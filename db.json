{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/ExtJS6-demo-app-500x206.png","path":"images/ExtJS6-demo-app-500x206.png","modified":0,"renderable":0},{"_id":"source/images/Screen-Shot-2017-04-10-at-4.57.56-PM.png","path":"images/Screen-Shot-2017-04-10-at-4.57.56-PM.png","modified":0,"renderable":0},{"_id":"source/images/Screen-Shot-2017-04-10-at-4.57.56-PM (1).png","path":"images/Screen-Shot-2017-04-10-at-4.57.56-PM (1).png","modified":0,"renderable":0},{"_id":"source/images/analyze-bq-ml-3.png","path":"images/analyze-bq-ml-3.png","modified":0,"renderable":0},{"_id":"source/images/automatedbuilds2-500x203.png","path":"images/automatedbuilds2-500x203.png","modified":0,"renderable":0},{"_id":"source/images/book.gif","path":"images/book.gif","modified":0,"renderable":0},{"_id":"source/images/automatedbuilds3-500x143.png","path":"images/automatedbuilds3-500x143.png","modified":0,"renderable":0},{"_id":"source/images/build-universal-app-img17.png","path":"images/build-universal-app-img17.png","modified":0,"renderable":0},{"_id":"source/images/build-universal-app-img18.png","path":"images/build-universal-app-img18.png","modified":0,"renderable":0},{"_id":"source/images/build-universal-app-img4.png","path":"images/build-universal-app-img4.png","modified":0,"renderable":0},{"_id":"source/images/docker-500x171.png","path":"images/docker-500x171.png","modified":0,"renderable":0},{"_id":"source/images/google-fonts-add.png","path":"images/google-fonts-add.png","modified":0,"renderable":0},{"_id":"source/images/profile_small.jpg","path":"images/profile_small.jpg","modified":0,"renderable":0},{"_id":"source/images/sass-snippet.png","path":"images/sass-snippet.png","modified":0,"renderable":0},{"_id":"source/images/studio-500x281.jpg","path":"images/studio-500x281.jpg","modified":0,"renderable":0},{"_id":"source/images/sphero.jpg","path":"images/sphero.jpg","modified":0,"renderable":0},{"_id":"source/images/profile.jpg","path":"images/profile.jpg","modified":0,"renderable":0},{"_id":"source/images/weather-app-3-styling.png","path":"images/weather-app-3-styling.png","modified":0,"renderable":0},{"_id":"source/images/weather-app-2-styling.png","path":"images/weather-app-2-styling.png","modified":0,"renderable":0},{"_id":"source/images/weather-app-3-styling2.png","path":"images/weather-app-3-styling2.png","modified":0,"renderable":0},{"_id":"themes/ladysign/source/robot.txt","path":"robot.txt","modified":0,"renderable":1},{"_id":"themes/ladysign/source/cache-pf.js","path":"cache-pf.js","modified":0,"renderable":1},{"_id":"themes/ladysign/source/manifest.json","path":"manifest.json","modified":0,"renderable":1},{"_id":"themes/ladysign/source/serviceworker.js","path":"serviceworker.js","modified":0,"renderable":1},{"_id":"themes/ladysign/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"source/images/analyze-bq-ml-2-500x250.png","path":"images/analyze-bq-ml-2-500x250.png","modified":0,"renderable":0},{"_id":"source/images/analyze-bq-ml-1-500x300.png","path":"images/analyze-bq-ml-1-500x300.png","modified":0,"renderable":0},{"_id":"source/images/DockerHub-500x347.png","path":"images/DockerHub-500x347.png","modified":0,"renderable":0},{"_id":"source/images/authorize-500x345.png","path":"images/authorize-500x345.png","modified":0,"renderable":0},{"_id":"source/images/automatedbuilds1-500x280.png","path":"images/automatedbuilds1-500x280.png","modified":0,"renderable":0},{"_id":"source/images/apptemplate-500x270.png","path":"images/apptemplate-500x270.png","modified":0,"renderable":0},{"_id":"source/images/analyze-bq-ml-4-500x166.png","path":"images/analyze-bq-ml-4-500x166.png","modified":0,"renderable":0},{"_id":"source/images/google-fonts.png","path":"images/google-fonts.png","modified":0,"renderable":0},{"_id":"source/images/mobile.png","path":"images/mobile.png","modified":0,"renderable":0},{"_id":"source/images/d3-spotifinder-500x217.png","path":"images/d3-spotifinder-500x217.png","modified":0,"renderable":0},{"_id":"source/images/postman-1024x302.png","path":"images/postman-1024x302.png","modified":0,"renderable":0},{"_id":"source/images/weather-app-1-build.png","path":"images/weather-app-1-build.png","modified":0,"renderable":0},{"_id":"source/images/sp4-500x326.png","path":"images/sp4-500x326.png","modified":0,"renderable":0},{"_id":"source/images/weather-app-1.png","path":"images/weather-app-1.png","modified":0,"renderable":0},{"_id":"source/images/weather-app-2-files.png","path":"images/weather-app-2-files.png","modified":0,"renderable":0},{"_id":"source/images/weather-app-2.png","path":"images/weather-app-2.png","modified":0,"renderable":0},{"_id":"source/images/weather-app-3.png","path":"images/weather-app-3.png","modified":0,"renderable":0},{"_id":"source/images/build-universal-app-img11.png","path":"images/build-universal-app-img11.png","modified":0,"renderable":0},{"_id":"source/images/compile-order.png","path":"images/compile-order.png","modified":0,"renderable":0},{"_id":"source/images/desktop-1024x490.png","path":"images/desktop-1024x490.png","modified":0,"renderable":0},{"_id":"source/images/weather-app-5.png","path":"images/weather-app-5.png","modified":0,"renderable":0},{"_id":"source/images/weather-app-6.png","path":"images/weather-app-6.png","modified":0,"renderable":0},{"_id":"source/images/build-universal-app-img14.png","path":"images/build-universal-app-img14.png","modified":0,"renderable":0},{"_id":"source/images/build-universal-app-img15.png","path":"images/build-universal-app-img15.png","modified":0,"renderable":0},{"_id":"source/images/compose-500x494 (1).png","path":"images/compose-500x494 (1).png","modified":0,"renderable":0},{"_id":"source/images/compose-500x494.png","path":"images/compose-500x494.png","modified":0,"renderable":0},{"_id":"source/images/build-universal-app-img5.png","path":"images/build-universal-app-img5.png","modified":0,"renderable":0},{"_id":"source/images/leeboonstra-speaker-500x351.png","path":"images/leeboonstra-speaker-500x351.png","modified":0,"renderable":0},{"_id":"source/images/weather-app-1-docs.png","path":"images/weather-app-1-docs.png","modified":0,"renderable":0},{"_id":"source/images/10yearsold-500x326.png","path":"images/10yearsold-500x326.png","modified":0,"renderable":0},{"_id":"source/images/build-universal-app-img10-1024x508.png","path":"images/build-universal-app-img10-1024x508.png","modified":0,"renderable":0},{"_id":"source/images/build-universal-app-img12-1024x430.png","path":"images/build-universal-app-img12-1024x430.png","modified":0,"renderable":0},{"_id":"source/images/build-universal-app-img16-1024x433.png","path":"images/build-universal-app-img16-1024x433.png","modified":0,"renderable":0},{"_id":"themes/ladysign/source/assets/js/main.js","path":"assets/js/main.js","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/js/disqus-lazy-min.js","path":"assets/js/disqus-lazy-min.js","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/styles/print.scss","path":"assets/styles/print.scss","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/styles/main.scss","path":"assets/styles/main.scss","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/Mathlete-Skinny-webfont.woff","path":"assets/fonts/Mathlete-Skinny-webfont.woff","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Bold-webfont.eot","path":"assets/fonts/Roboto-Bold-webfont.eot","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Bold-webfont.woff","path":"assets/fonts/Roboto-Bold-webfont.woff","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Italic-webfont.ttf","path":"assets/fonts/Roboto-Italic-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Regular-webfont.eot","path":"assets/fonts/Roboto-Regular-webfont.eot","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Regular-webfont.woff","path":"assets/fonts/Roboto-Regular-webfont.woff","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Italic-webfont.woff","path":"assets/fonts/Roboto-Italic-webfont.woff","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/bebasneue-webfont.eot","path":"assets/fonts/bebasneue-webfont.eot","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/bebasneue-webfont.ttf","path":"assets/fonts/bebasneue-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Regular-webfont.ttf","path":"assets/fonts/Roboto-Regular-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/bebasneue-webfont.woff","path":"assets/fonts/bebasneue-webfont.woff","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/bebasneue-webfont.woff2","path":"assets/fonts/bebasneue-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/icomoon.woff","path":"assets/fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/icomoon.eot","path":"assets/fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/icomoon.svg","path":"assets/fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/icomoon.ttf","path":"assets/fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/oswald-regular-webfont.eot","path":"assets/fonts/oswald-regular-webfont.eot","modified":0,"renderable":1},{"_id":"source/images/build-universal-app-img1.png","path":"images/build-universal-app-img1.png","modified":0,"renderable":0},{"_id":"source/images/build-universal-app-img3.png","path":"images/build-universal-app-img3.png","modified":0,"renderable":0},{"_id":"themes/ladysign/source/assets/fonts/oswald-regular-webfont.ttf","path":"assets/fonts/oswald-regular-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/oswald-regular-webfont.svg","path":"assets/fonts/oswald-regular-webfont.svg","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/oswald-regular-webfont.woff","path":"assets/fonts/oswald-regular-webfont.woff","modified":0,"renderable":1},{"_id":"source/images/build-universal-app-img7-1024x483.png","path":"images/build-universal-app-img7-1024x483.png","modified":0,"renderable":0},{"_id":"source/images/weather-app-4.png","path":"images/weather-app-4.png","modified":0,"renderable":0},{"_id":"themes/ladysign/source/assets/fonts/Mathlete-Skinny-webfont.eot","path":"assets/fonts/Mathlete-Skinny-webfont.eot","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/Mathlete-Skinny-webfont.ttf","path":"assets/fonts/Mathlete-Skinny-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/Mathlete-Skinny-webfont.svg","path":"assets/fonts/Mathlete-Skinny-webfont.svg","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Bold-webfont.ttf","path":"assets/fonts/Roboto-Bold-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Italic-webfont.eot","path":"assets/fonts/Roboto-Italic-webfont.eot","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Bold-webfont.svg","path":"assets/fonts/Roboto-Bold-webfont.svg","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Italic-webfont.svg","path":"assets/fonts/Roboto-Italic-webfont.svg","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Regular-webfont.svg","path":"assets/fonts/Roboto-Regular-webfont.svg","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/bebasneue-webfont.svg","path":"assets/fonts/bebasneue-webfont.svg","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/consolas-webfont.ttf","path":"assets/fonts/consolas-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/consolas-webfont.svg","path":"assets/fonts/consolas-webfont.svg","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/consolas-webfont.eot","path":"assets/fonts/consolas-webfont.eot","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/fonts/consolas-webfont.woff","path":"assets/fonts/consolas-webfont.woff","modified":0,"renderable":1},{"_id":"source/images/build-universal-app-img9-1024x590.png","path":"images/build-universal-app-img9-1024x590.png","modified":0,"renderable":0},{"_id":"source/images/build-universal-app-img9-1024x590 (1).png","path":"images/build-universal-app-img9-1024x590 (1).png","modified":0,"renderable":0},{"_id":"source/images/preview.png","path":"images/preview.png","modified":0,"renderable":0},{"_id":"themes/ladysign/source/assets/js/vendor/modernizr-3.6.0.min.js","path":"assets/js/vendor/modernizr-3.6.0.min.js","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/js/vendor/popper.min.js","path":"assets/js/vendor/popper.min.js","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/js/vendor/bootstrap.min.js","path":"assets/js/vendor/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/ladysign/source/assets/js/vendor/jquery-3.3.1.min.js","path":"assets/js/vendor/jquery-3.3.1.min.js","modified":0,"renderable":1},{"_id":"source/images/build-universal-app-img8-1024x572.png","path":"images/build-universal-app-img8-1024x572.png","modified":0,"renderable":0},{"_id":"source/images/build-universal-app-img13-1024x601.png","path":"images/build-universal-app-img13-1024x601.png","modified":0,"renderable":0},{"_id":"source/images/leeboonstra-book.png","path":"images/leeboonstra-book.png","modified":0,"renderable":0},{"_id":"source/images/build-universal-app-img2.png","path":"images/build-universal-app-img2.png","modified":0,"renderable":0},{"_id":"source/images/lee.boonstra-resume.pdf","path":"images/lee.boonstra-resume.pdf","modified":0,"renderable":0},{"_id":"source/images/build-universal-app-img6.gif","path":"images/build-universal-app-img6.gif","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"b8e5951c497e1060bfccf7be197be3bad8cb1885","modified":1543670766821},{"_id":"source/404.md","hash":"b37c715d20b4e760b67c957ca4886edbae907954","modified":1543156700088},{"_id":"themes/ladysign/.eslintrc.yml","hash":"cc4147e487a3f8d471ad3599d9cee1116948a01c","modified":1487495588000},{"_id":"themes/ladysign/.DS_Store","hash":"c0a21290008e5d4d6e22f4e72967bd5b8d79ca48","modified":1542998961424},{"_id":"themes/ladysign/.jscsrc","hash":"dfd476380b78e594ca647a83159a4f945faa8a5d","modified":1487495588000},{"_id":"themes/ladysign/_config.yml","hash":"c990bb8b9c93dd24fb93b195de183a746dab7482","modified":1543066870832},{"_id":"themes/ladysign/package.json","hash":"4f0d893b7a6879ce0e21c6280444b1ff548d52e4","modified":1487495588000},{"_id":"source/_drafts/styleguide.md","hash":"b93848ec1c02f8c511c41ad2a89b9ac6c2e47209","modified":1543605552322},{"_id":"source/_posts/actions-on-google-for-google-cloud-functions.md","hash":"62377c2e0ae5ad2939fa0c9c5cf6e62fda1421a8","modified":1543085706213},{"_id":"source/_posts/asynchronous-javascript-promises.md","hash":"4aec45f7a81841d28d55fa02d95b25332d6fb864","modified":1543146332656},{"_id":"source/_posts/connect-play-around-with-bb-8-by-sphero-with-javascript-on-a-mac.md","hash":"d818bdf4a570879730be4162d193e00f9dade026","modified":1543162084418},{"_id":"source/_posts/analyzing-data-with-bigquery-and-machine-learning-apis.md","hash":"4d407cca8c55da7aa9290cffa0043a0e3f1af543","modified":1543161628886},{"_id":"source/_posts/conditional-templating-in-dialogflow-for-google-assistant.md","hash":"e33dd8d487341af04c0ca74eae4d23ef91b46b25","modified":1543162811527},{"_id":"source/_posts/advanced-cmd-how-to-integrate-ext-js-with-maven.md","hash":"e7ec3dffb43d2bb2f579e7393afced22311d7068","modified":1543604747696},{"_id":"source/_posts/advanced-sencha-cmd-dealing-with-a-multi-ext-js-app-infrastructure.md","hash":"1b5783108317e105985416d96e31e1ee7aa68633","modified":1543159810687},{"_id":"source/_posts/create-an-amazing-sencha-touch-theme-with-sass.md","hash":"ee8528e083e84a77460c3b56df02a07944bef597","modified":1543600881454},{"_id":"source/_posts/create-dynamic-sencha-models-from-your-server-side.md","hash":"5a783ad0698a74a1c8fbdd1c6c2effa47e9c24b6","modified":1543597851653},{"_id":"source/_posts/create-a-tv-app-with-sencha-touch-and-sencha-architect.md","hash":"e3086237274372eaba24e6279a3c240eacb62b50","modified":1543589671066},{"_id":"source/_posts/django-template-extending.md","hash":"b90600dd174c7e6b0d5e54515b1b12b4564461a5","modified":1543587421372},{"_id":"source/_posts/generate-a-theme-with-sencha-cmd.md","hash":"a199e7e41d881f095a03f3cfd9907077b7d0d1d3","modified":1543587707949},{"_id":"source/_posts/creating-theme-specific-overrides-in-ext-js.md","hash":"7d137b79cb78859ad53191f6fae7c774ee1745ab","modified":1543587907972},{"_id":"source/_posts/custom-greeting-google-assistant-app-with-dialogflow-and-actions-on-google.md","hash":"6ee476e70253703bb1df9bd8feb2b49cb4dec98e","modified":1543162424141},{"_id":"source/_posts/d3-visualizations-in-ext-js-6-2.md","hash":"f64659af9df355de2ee47b15bb2e97cd295a3200","modified":1543601460119},{"_id":"source/_posts/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-2.md","hash":"2af5b0951a02cfc03b797363927588e10bc5cb37","modified":1543147415813},{"_id":"source/_posts/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-3.md","hash":"61071dc5a03f66c35d91d1a41333e03fd3d15044","modified":1543147564961},{"_id":"source/_posts/introduction-to-the-video-intelligence-api.md","hash":"8fe721ad3c58e6413fdbb7def19866bcac4170c7","modified":1543586749091},{"_id":"source/_posts/make-a-native-build-with-ext-js-5-sencha-cmd-5-and-phonegap-cordova-with-plugins.md","hash":"2c91caff8059fa0ea9d69931b24544ff3dbc0689","modified":1543588377581},{"_id":"source/_posts/native-sencha-apps-with-ext-js-6-and-cordova.md","hash":"2264566a9ceec44aa5229cd7b91dd05bc86025ea","modified":1543589237732},{"_id":"source/_posts/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-1.md","hash":"7b7d9103eb77d38b3656efbf949c8ffd85200798","modified":1543147179782},{"_id":"source/_posts/goodbye-sencha-hello-google.md","hash":"302d5dca94b0ca4ee65470e3f778fa1e8bc02b83","modified":1543163008024},{"_id":"source/_posts/machine-learning-apis-for-python-developers.md","hash":"034df31f7e3cf79b84cdd2e35869c74dcb2e8ef2","modified":1543151330239},{"_id":"source/_posts/senchaarchitect.md","hash":"8d8625e5fad007a7e2b527409a7a2e4a36b61d4e","modified":1543150550638},{"_id":"source/_posts/setup-a-django-project-with-a-mysql-database.md","hash":"d1695f368c776952990167b3d73c7fe147519cd4","modified":1543587214958},{"_id":"source/_posts/make-your-mobile-webapp-work-offline-with-application-cache.md","hash":"8b2571d37de3de90cfe84e1cb9bfd996ddb6bc1e","modified":1543586754554},{"_id":"source/_posts/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2.md","hash":"11b11391f96bd541f44502c416682cab160829d9","modified":1543584961879},{"_id":"source/_posts/optimizing-extjs.md","hash":"a58f274cc2ff5edd31b6e1396b10c30a8e328683","modified":1543150538002},{"_id":"source/_posts/running-multiple-sencha-cmd-versions-for-example-to-support-sencha-architect.md","hash":"4e2c57413c14419cef3acfae9a8c57387a110287","modified":1543587612775},{"_id":"source/_posts/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4.md","hash":"c06c9bce2db59fee5836faa81be2f48269797809","modified":1543584881074},{"_id":"source/_posts/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1.md","hash":"e315490a24edfc3d09130bb51fd71e3cead51eed","modified":1543584868866},{"_id":"source/_posts/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6.md","hash":"a8ecfeb3288ec6a2ad734e29e68fe222754c3627","modified":1543585286002},{"_id":"source/_posts/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7.md","hash":"80a88cc8512481e425c08a7d05d08df35ef55793","modified":1543584892815},{"_id":"source/_posts/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8.md","hash":"826bce881d04dddc84201fdcc51442bf0eda4da4","modified":1543584897585},{"_id":"source/_posts/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3.md","hash":"dc40d0f46f9aa8deeb89ee71732ad39cd18727de","modified":1543585080261},{"_id":"source/_posts/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5.md","hash":"c20379ab173b5878ee2cda5000cf774b51937075","modified":1543584884953},{"_id":"source/_posts/using-custom-icons-in-your-ext-js-apps.md","hash":"58af2c21a9db5f6086460c9464f4645ddad17961","modified":1543604742929},{"_id":"source/_posts/universal-windows-apps-for-microsoft-surface-pro-hybrids-ms-edge-with-ext-js-6.md","hash":"5f31c8380f4856105821e058b0fee66ec6343f97","modified":1543604345925},{"_id":"source/_posts/using-custom-fonts-with-sencha-architect-2.md","hash":"3cc5009c5c73588585b2fe5236113201c165cf01","modified":1543603150011},{"_id":"source/_posts/universal-app-ext6-p1.md","hash":"1a46b6191850fad6fdf526f83232e7888996a623","modified":1543602562639},{"_id":"source/_posts/video-cloud-on-air-webinar-create-custom-conversations-with-dialogflow.md","hash":"5217f176ac5f08534aa559c2331070d6ace72c8b","modified":1543145361193},{"_id":"source/_posts/video-dlp-vision-api-demo-google-cloud-summit-munich.md","hash":"569473dfa40b13928a07481687891bf29ea5ab29","modified":1543145379500},{"_id":"source/_posts/video-create-custom-chat-agents-for-google-home-with-api-ai.md","hash":"dcc52aacc6f003a0aaecaa16a7abe4a87ace33b8","modified":1543146149116},{"_id":"source/_posts/video-digitalwednesday.md","hash":"c1d88401b11db2bba4dee4069268af83789c51fa","modified":1543145370294},{"_id":"source/_posts/universal-app-ext6-p1-2.md","hash":"6e104980647dfd9bf3d5370409b794f676e71ab3","modified":1543602720785},{"_id":"source/_posts/video-google-cloud-next-amsterdam-keynote-video-intelligence-api.md","hash":"b4dbcd65a525b108c1a9c6b63842f3465a0848a3","modified":1543145404341},{"_id":"source/_posts/video-google-cloud-next-london.md","hash":"f3acdf3b74b768d69a72bf5203b518a00736ff85","modified":1543145421619},{"_id":"source/_posts/video-extending-g-suite-with-business-applications.md","hash":"67c61ee3d2c1c697eb5e7e84948896611ed8b88e","modified":1543150754043},{"_id":"source/_posts/webinar-secrets-to-building-a-great-looking-universal-app.md","hash":"8429c7c47fad23b9ac34ead797eacd30c5e37646","modified":1543149381991},{"_id":"source/about/index.md","hash":"349fe471a29e4716ea458e07b8224fedbe623a0c","modified":1543605525937},{"_id":"source/_posts/working-with-sencha-app-templates-boilerplate-ext-js-6-code.md","hash":"4213f252b3872c4d89a0fd51ec556c6a6e2ff3dc","modified":1543149149681},{"_id":"source/_posts/video-frontmania.md","hash":"3a754589ccd7eb8b5fc9a4af5b3114d9f6d8b2ec","modified":1543145396085},{"_id":"source/_posts/video-google-cloud-summit-paris-keynote-video-intelligence.md","hash":"e45d6e67e09c2c8f1b0c827b9ecad8a97bd41deb","modified":1543145412770},{"_id":"source/writing/index.md","hash":"da44e6de1c13385bfa3ebb9b5726a5cb77b73a14","modified":1543144464292},{"_id":"source/contact/index.md","hash":"1894af1f74c30188f74952ed4a9c35d64ce175c8","modified":1543083109190},{"_id":"source/speaking/index.md","hash":"cbbf9b090091ff4355e965168d3f1514e6d60f20","modified":1543605412707},{"_id":"source/_data/menu.yml","hash":"fa1e16cd21432b3c488ab44208a003488dcb0c68","modified":1487495588000},{"_id":"source/images/ExtJS6-demo-app-500x206.png","hash":"c90a752adc1793231ec15c0aeac1a97e54271892","modified":1543636152000},{"_id":"source/images/Screen-Shot-2017-04-10-at-4.57.56-PM.png","hash":"c7a71aaf1055a5414c733fc816a2b8d6f03a2c05","modified":1543636152000},{"_id":"source/images/Screen-Shot-2017-04-10-at-4.57.56-PM (1).png","hash":"c7a71aaf1055a5414c733fc816a2b8d6f03a2c05","modified":1543636152000},{"_id":"source/images/analyze-bq-ml-3.png","hash":"44843af1d58a8a98b11b226b3cd66f9b449b4fc3","modified":1543636152000},{"_id":"source/images/automatedbuilds2-500x203.png","hash":"53ffd5545d19639e978c6b3559236c94189a1ee1","modified":1543636152000},{"_id":"source/images/book.gif","hash":"6f5905ce49b5eeaedb92a64d4180271696b1298f","modified":1543636152000},{"_id":"source/images/automatedbuilds3-500x143.png","hash":"0b23445e100e15049f841eb60c8650945f9b9945","modified":1543636152000},{"_id":"source/images/build-universal-app-img17.png","hash":"d3dd56d75e39c452a26b6a2121fc1077d8e60967","modified":1543636152000},{"_id":"source/images/build-universal-app-img18.png","hash":"a05cd008e1227b99c228a1e6c0221598d9aadc2c","modified":1543636152000},{"_id":"source/images/build-universal-app-img4.png","hash":"10788408c334170a6e782df245317269df85a41f","modified":1543636152000},{"_id":"source/images/docker-500x171.png","hash":"dc80bf71584b8f90da1cd085f3eb6a92279e7597","modified":1543636152000},{"_id":"source/images/google-fonts-add.png","hash":"85acef4b249adef94de790fe85ef74538feaec53","modified":1543636152000},{"_id":"source/images/profile_small.jpg","hash":"e0b8b4083ddb1307b49ae38a339049ab277e6703","modified":1543636152000},{"_id":"source/images/sass-snippet.png","hash":"8c86d3682fc4c363e05d24933c43d67aff9a434a","modified":1543636152000},{"_id":"source/images/studio-500x281.jpg","hash":"1f0e1ea76c9e490937fcd1bcfae326c64b47ce8a","modified":1543636152000},{"_id":"source/images/sphero.jpg","hash":"230e93a5d537a0daf21883f4e5aef81fd6f52a3b","modified":1543636152000},{"_id":"source/images/profile.jpg","hash":"f48a4e6b660ab2bced90bfd1d06f33b67374209d","modified":1543636152000},{"_id":"source/images/weather-app-3-styling.png","hash":"8976c7c5f51339baa5b3a5cc154e14ac752fc173","modified":1543636152000},{"_id":"source/images/weather-app-2-styling.png","hash":"42855ddd344b818eb282501e75fc75847f6ac7ae","modified":1543636152000},{"_id":"source/images/weather-app-3-styling2.png","hash":"8976c7c5f51339baa5b3a5cc154e14ac752fc173","modified":1543636152000},{"_id":"themes/ladysign/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1542393750481},{"_id":"themes/ladysign/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1542393804822},{"_id":"themes/ladysign/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1542393792486},{"_id":"themes/ladysign/layout/tag.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1543080354587},{"_id":"themes/ladysign/layout/layout.ejs","hash":"b21c28d93eb3c93e5b764c6089423f7b29bcc0ac","modified":1543669938200},{"_id":"themes/ladysign/source/robot.txt","hash":"0062f52965da9d0b4f1fa7d37f36f694fe058587","modified":1543664692855},{"_id":"themes/ladysign/source/.DS_Store","hash":"3fee08611be222bf96c7407daa291a468ba0f344","modified":1542969066971},{"_id":"themes/ladysign/source/cache-pf.js","hash":"2bcbc89271c02dda335c643925363b1c733457af","modified":1542997706640},{"_id":"themes/ladysign/source/manifest.json","hash":"71172e9f83eaaf276e7358bd62c1f4cb3326cddf","modified":1542996936922},{"_id":"themes/ladysign/source/serviceworker.js","hash":"2ac0e82be8a2fef3145df0230d9f7f7d24ae6dc0","modified":1543159653188},{"_id":"themes/ladysign/source/favicon.ico","hash":"7a2efacce4ea52357c6ed14cd35ac40a659c810c","modified":1542996941910},{"_id":"source/images/analyze-bq-ml-2-500x250.png","hash":"e9a143ebf58ef41e4b71d82f5d9aa6b5a7ec6ca1","modified":1543636152000},{"_id":"source/images/analyze-bq-ml-1-500x300.png","hash":"6ac1421863825e5f400653e27ce116ff9bf355d5","modified":1543636152000},{"_id":"source/images/DockerHub-500x347.png","hash":"95db94782cdd7f560842e92210c8cdd1bbcd3ac6","modified":1543636152000},{"_id":"source/images/authorize-500x345.png","hash":"4d39cd93c103456e1ca7f4d904274b63bc296c05","modified":1543636152000},{"_id":"source/images/automatedbuilds1-500x280.png","hash":"96bfff52e3c16946d40b0ca2b27b987aa452acb2","modified":1543636152000},{"_id":"source/images/apptemplate-500x270.png","hash":"899b9973e31c117a8f60f99c6971481c1440a814","modified":1543636152000},{"_id":"source/images/analyze-bq-ml-4-500x166.png","hash":"3495798af76e31b398d34244909e857d6bc1d82d","modified":1543636152000},{"_id":"source/images/google-fonts.png","hash":"6877b3ddb1b747623fbbc6ccf4feac4fb389a110","modified":1543636152000},{"_id":"source/images/mobile.png","hash":"973953e4010506e6564840934cfd53e00b1b594c","modified":1543636152000},{"_id":"source/images/d3-spotifinder-500x217.png","hash":"96630761066a119727d95c12fa06c9978d4a0ef6","modified":1543636152000},{"_id":"source/images/postman-1024x302.png","hash":"1b895d59216ae1e76fa0a50024b4c9c1b049c376","modified":1543636152000},{"_id":"source/images/weather-app-1-build.png","hash":"64e23292e8e821aa203f72ded281ff54817a5b52","modified":1543636152000},{"_id":"source/images/sp4-500x326.png","hash":"9d4a7db7c8fdff9aeebb2b92810b8626e38e9bd2","modified":1543636152000},{"_id":"source/images/weather-app-1.png","hash":"c10fa20ed3a2db290e4447dcfc55ea0b560194a2","modified":1543636152000},{"_id":"source/images/weather-app-2-files.png","hash":"146c826dea4f7d20e3d4405122a0ccac57da2c5a","modified":1543636152000},{"_id":"source/images/weather-app-2.png","hash":"3ed641ef7d854f6951479c5f9effb56596b03cc3","modified":1543636152000},{"_id":"source/images/weather-app-3.png","hash":"efb11a9e60bda15acefdc5e9fac82923522e2a12","modified":1543636152000},{"_id":"source/_drafts/how-tos/How-to-integrate-the-ext-electron-package-with-your-own-project.md","hash":"71c7cddaaac9b1513a4edc3557c892b6daa39b42","modified":1543146369301},{"_id":"source/_drafts/how-tos/How-to-set-macbook-hostname.md","hash":"21347649a049664c51650b7dc28b3723ccdf970d","modified":1543146369301},{"_id":"source/_drafts/how-tos/application-loader-error-there-is-no-embedded-java-executable.md","hash":"92543b8a3d1ee97ca2a3d3bcf0ba9472e4123c2a","modified":1543149525207},{"_id":"source/_drafts/how-tos/are-there-examples-of-sencha-touch-apps-in-the-app-store.md","hash":"e1667af50761ce6d08b97943e207edeec4a16eee","modified":1543149461392},{"_id":"source/_drafts/how-tos/How-to-setup-SSL-on-XAMPP.md","hash":"d0d4a765a546aa9ad1f4110dc6dd583a9b4fc177","modified":1543146369301},{"_id":"source/_drafts/how-tos/auto-restart-node-after-code-changes.md","hash":"782d969bce3e28aa8413eee6d2da009d4c9d0f25","modified":1543149525207},{"_id":"source/_drafts/how-tos/any-tips-for-building-huge-applications-with-100s-of-views.md","hash":"f176809112c2508b8c8ee56f7185fbfc461d1cba","modified":1543149525207},{"_id":"source/_drafts/how-tos/can-i-use-the-ext-js-gpl.md","hash":"f99ce342e300df7d9479c3bddce23e0235e1f916","modified":1543150878910},{"_id":"source/_drafts/how-tos/chrome-43-breaks-sencha-touch-modern-toolkit-and-how-to-fix-it.md","hash":"18b3a37924887881d8ea8473d42e352be4e654c1","modified":1543151388694},{"_id":"source/_drafts/how-tos/cmd-asks-to-upgrade-my-app-why.md","hash":"36581f19431e59599a0057df3124b1dec663e848","modified":1543149539831},{"_id":"source/_drafts/how-tos/can-i-combine-sencha-touch-or-ext-js-with-angular-js.md","hash":"119fb4805dcfab2e572a86f80bb9af17e114eb2a","modified":1543149501473},{"_id":"source/_drafts/how-tos/chrome-43-breaks-ext-menu-menu-submenus-ext-js-4.md","hash":"97273e6d594a532e24780749268390a77696a3d5","modified":1543151388694},{"_id":"source/_drafts/how-tos/do-i-need-the-deltas-folder-in-my-hybrid-sencha-phonegapcordova-app.md","hash":"b4684a16b1e9a14ba4cfea48af3daf0fa68aae4a","modified":1543149584610},{"_id":"source/_drafts/how-tos/do-you-support-integration-with-external-databases.md","hash":"e58d5105ba75cd5eec1a4f22c34c06e526d303b7","modified":1543149617149},{"_id":"source/_drafts/how-tos/does-ext-js-6-include-a-solution-for-push-notifications.md","hash":"4d6dc6877b5f93500310323f72354858c035a895","modified":1543149617149},{"_id":"source/_drafts/how-tos/does-sencha-support-jaws.md","hash":"d600823c6ffb82697e6b0b346401800c0e9ff4a9","modified":1543149605733},{"_id":"source/_drafts/how-tos/easy-update-sencha-cmd.md","hash":"a1a2c7e82a8ae2c5888288349931f870ae294b63","modified":1543149605733},{"_id":"source/_drafts/how-tos/custom-ui-components-with-sencha.md","hash":"27957f8733b789b5cabd18f866046cce239798d6","modified":1543151388694},{"_id":"source/_drafts/how-tos/git-cheat-sheet.md","hash":"eb2d216f23d7c9f903c39b651e5fc83ba943e38a","modified":1543151388694},{"_id":"source/_drafts/how-tos/handy-sublime-shortcuts.md","hash":"05a20be5711d3d6ae9e993221d08fb015a5ff147","modified":1543149655404},{"_id":"source/_drafts/how-tos/fix-git-http-error.md","hash":"b1efabcacd6176fcdaf9c3f546b2cc58d5e9cf4d","modified":1543149634375},{"_id":"source/_drafts/how-tos/css-print-stylesheet-tricks.md","hash":"4838a3db18fab3be40d1cd73e4a7ff734f1b1edf","modified":1543151388694},{"_id":"source/_drafts/how-tos/fix-chrome-29-breaks-all-sencha-touch-2-apps.md","hash":"c422eab4b6910e3b53ebd6623928ac1f63b0e747","modified":1543151388694},{"_id":"source/_drafts/how-tos/does-sencha-touch-support-windows-8.md","hash":"bc288403e18822a9dfc6146c706f1059477da073","modified":1543149605733},{"_id":"source/_drafts/how-tos/how-can-i-create-a-google-map-component-to-my-ext-js-app.md","hash":"946b8d6a52e39a57a726b435a65c1e458ab2fc26","modified":1543146369301},{"_id":"source/_drafts/how-tos/help-with-a-tap-delay-on-android-devices-and-chrome-browsers-on-ios.md","hash":"4d1a914514a4bd0f8f3ca721cf264d1b077472a6","modified":1543149779871},{"_id":"source/_drafts/how-tos/how-can-i-get-started-with-sencha.md","hash":"d47535b4659eff8a1641be988eae205bd84e7181","modified":1543146369301},{"_id":"source/_drafts/how-tos/github-error-permission-to-userrepo-denied-to-userother-repo.md","hash":"7ce475449e815299d670e65444206fed9b22fb34","modified":1543149833815},{"_id":"source/_drafts/how-tos/how-does-sencha-support-work.md","hash":"35608f80c3f5bcce9594d2a19914d0ddbcd69c2c","modified":1543146369301},{"_id":"source/_drafts/how-tos/help-i-have-to-present-how-to-rock-it.md","hash":"ebb453aef72af19af84436baaebcdead4989d6c5","modified":1543586357168},{"_id":"source/_drafts/how-tos/how-does-suspendlayout-work.md","hash":"3bc0409c739878f460f15a596ae36acdf69e24ab","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-to-activate-sencha-architect-behind-a-firewall.md","hash":"376b566ecfb5880744631108449b58535b6b7e21","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-does-the-sencha-test-event-recorder-work.md","hash":"23d170522269d1a16dc3deef24b1af3d3db0d54e","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-do-model-associations-work.md","hash":"e3d8ee29a28a857ed02a4c0c5e515c1dc9e23b82","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-to-create-a-dark-ext-js-theme-part-2.md","hash":"dd8c2d57c0cfdb52dc9f295ff08da859ac6e5bc1","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-does-st-screenshot-work.md","hash":"a395d3471cf7db265b88b14d2892def3675cdf67","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-to-create-a-dark-ext-js-theme-part-1.md","hash":"d0fec2552e06949ab3cdfd454ff06be120837e8b","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-to-embed-your-ext-js-4-applications-to-run-inside-a-div-on-an-external-appwebsite.md","hash":"efca85e5254a0f7b1f761b51ea750e59827a8e02","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-to-generate-a-sencha-app-to-pdf.md","hash":"f9e0f41b5088fc1be50c56358c38a3be9e1b6c88","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-to-enable-grid-filtering.md","hash":"1f9bdc25c07954ede123ced5fa74f779f9497cc4","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-to-get-soap-proxy-to-work-in-sencha-architect.md","hash":"ec0d8cf61360fcfffc4bf4072e542506fd634db3","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-to-lazy-load-scripts-partials.md","hash":"4186831f59f6ca94f6dfac0875a6977b51dc8b27","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-to-embed-an-ext-js-5-app-in-a-div-on-an-external-appwebsite.md","hash":"58f11f2f2ac5e3aa429851d4bf6c37cd2a324e95","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-to-fix-save-imageweb-window-mac-os-x-yosemite.md","hash":"0dc982a4300dbe1fd716f02cfccee610a9850bc0","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-to-modify-sencha-builds.md","hash":"26298b47611c95771b220c517c76fb571de93deb","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-to-localize-your-sencha-touch-applications.md","hash":"55f15d20e200d7b594baf57d428dc93a9dd55464","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-to-set-up-your-sencha-environment.md","hash":"2ae3ffa0e600096f6559bccd46c1f8bf8a74d5e0","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-to-improve-your-sencha-code-while-working-in-large-teams.md","hash":"72acf02f14397b6dfafdfe11ef77cc693e539de2","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-to-switch-sencha-cmd-versions-from-the-command-line.md","hash":"51b2fb6e7055375800fdbce5626b6defc8860472","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-to-prepare-your-machine-for-gxt-4-development.md","hash":"10af278e614a5ef505e5291db047af093592b473","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-to-use-the-sencha-visual-studio-plugin.md","hash":"86563bc04dd14cba5e3b6c8c83dd3dae45f7e784","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-2.md","hash":"ac7fc70f633731a30c4906fd1a45982b93b77eab","modified":1543146369302},{"_id":"source/_drafts/how-tos/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-1.md","hash":"81eed5332764c95813789b4f9de95f4b56a787e9","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-3.md","hash":"7fde4017a3809cd4559c1bc30e8a638f8426876c","modified":1543146369303},{"_id":"source/_drafts/how-tos/i-like-to-build-a-mobile-application-what-sencha-framework-should-i-use.md","hash":"e33e13203a194842e232673731b78d2a887bbf69","modified":1543149779871},{"_id":"source/_drafts/how-tos/installing-node-and-npm-on-mac.md","hash":"ed384ff44ed734812efbe28f7bab702500d5b55a","modified":1543151388694},{"_id":"source/_drafts/how-tos/install-asciidoc-on-the-commandline-mac-osx.md","hash":"4515b42b299da6caf8a43d1e5fe8511808985dcf","modified":1543151388694},{"_id":"source/_drafts/how-tos/how-to-style-apps-with-fashion-in-ext-js-6.md","hash":"451d84167d372f662237c484c56f99b6b6e107bd","modified":1543146369301},{"_id":"source/_drafts/how-tos/how-to-use-the-sencha-visual-studio-plugin-with-existing-projects.md","hash":"4bd37dab7b9a884ab4b5da99a40c383ff9f64a04","modified":1543146369303},{"_id":"source/_drafts/how-tos/is-there-a-way-to-add-a-timeout-to-the-listeners-so-that-it-only-executes-after-a-time-period-as-passed.md","hash":"64422784ffb25c145cd72ed0f23880a941da0ac7","modified":1543149761848},{"_id":"source/_drafts/how-tos/introducing-ext-js-5-beta.md","hash":"51b3d1fcc84c2bfef43f21e3c8071792407ea1aa","modified":1543151388694},{"_id":"source/_drafts/how-tos/is-it-possible-to-implement-non-sencha-controls-3rd-party-scripts-in-a-sencha-project.md","hash":"49955b850d7b8e5a9be6f3909bf5b209c1785b47","modified":1543149761849},{"_id":"source/_drafts/how-tos/jQuery-Ext-JS-translation-guide.md","hash":"f6090c4aec530a61c8602fe38663a308b518d7b2","modified":1543151388694},{"_id":"source/_drafts/how-tos/java-heap-exception-when-using-sencha-cmd.md","hash":"6e461fbd0d21814c4fa9ea5f5f762f972a1f289e","modified":1543151388694},{"_id":"source/_drafts/how-tos/installing-sass-compass-for-windows-os-x.md","hash":"4435d26374973875c8af3aa997e64e2a94e7ad81","modified":1543151388694},{"_id":"source/_drafts/how-tos/mac-os-x-10-9-mavericks-ruby-2-0-and-sencha-cmd-how-to-work-together.md","hash":"7b9917f5acb2df241c06c4d5762dc9d19708caf3","modified":1543149675314},{"_id":"source/_drafts/how-tos/mac-osx-how-to-install-jshint-to-the-commandline-sublime-text-with-node.md","hash":"43febc2ace3a680f4c021ab2bf71edbec535f36b","modified":1543149675315},{"_id":"source/_drafts/how-tos/mac-osx-run-sublime-from-your-terminal.md","hash":"3a52ef8b2a819e06c135080661a049de8cfe5ab3","modified":1543149675315},{"_id":"source/_drafts/how-tos/no-sound-airplay-apple-tv.md","hash":"54b47798083c9864f65ba8c66ef77d534295c028","modified":1543149814918},{"_id":"source/_drafts/how-tos/printscreen-on-macos.md","hash":"94d70149e34a91df04c13400e05a0235f8fddbed","modified":1543149647350},{"_id":"source/_drafts/how-tos/mac-osx-error-sauce-labs-error-fetching-pac.md","hash":"95983a20dfb8a0821dd2914035349a85901f1177","modified":1543149675315},{"_id":"source/_drafts/how-tos/mac-osx-create-a-symbolic-link.md","hash":"ff880de6693fb5009b377da7722b0d0a9691a092","modified":1543149675314},{"_id":"source/_drafts/how-tos/remove-all-svn-folders-via-command-line.md","hash":"e13135520202622b4ae395ea0f80ac9c0b129b9a","modified":1543149846285},{"_id":"source/_drafts/how-tos/removing-a-local-web-sql-database-in-google-chrome.md","hash":"f220c7380d808b7c342910ad41526fa2d23339d4","modified":1543150793725},{"_id":"source/_drafts/how-tos/reverse-engineer-the-sencha-fontawesome-package-to-get-an-overview-of-icons.md","hash":"4bddfb258a47ec85c90a1ef440928c690082e95c","modified":1543151388694},{"_id":"source/_drafts/how-tos/projects-in-sublime-text-2.md","hash":"033f403fcaf941a69dc8c4549b18ac2aba751c42","modified":1543151388694},{"_id":"source/_drafts/how-tos/sencha-architect-crashes-cant-start-sencha-architect-problems.md","hash":"06a88bee12acb2d22109639d0ddb1c8c879eec75","modified":1543151388694},{"_id":"source/_drafts/how-tos/remove-ds-store-files-from-my-git-repo-and-ignore-them.md","hash":"be0268b0ab62af06c92f3d926235b92eeee006e2","modified":1543149846285},{"_id":"source/_drafts/how-tos/sencha-architect-wont-start-sencha-themer-wont-build.md","hash":"0bb52c7bddc34f9ac189f1daa7e3673873a76d71","modified":1543151388694},{"_id":"source/_drafts/how-tos/sencha-cmd-making-builds-ios-packages.md","hash":"e6c23dbfb0e68622c01f72120870be1686072b48","modified":1543151388694},{"_id":"source/_drafts/how-tos/sencha-cmd-for-scaffolding-sencha-touch-mvc-project.md","hash":"6a67f391ea8d49a778fd84db461157bf23261e69","modified":1543151388694},{"_id":"source/_drafts/how-tos/sencha-touch-sliding-menu.md","hash":"09aa8b049f808cf1d201a0ae554f4c7f8218b950","modified":1543151388694},{"_id":"source/_drafts/how-tos/setup-phantomjs-to-automate-testing.md","hash":"cd9373e1c532e678d95965f14ee84cd98230c313","modified":1543151388694},{"_id":"source/_drafts/how-tos/setting-up-localhost-mac-osx.md","hash":"6834e92be22f0836b22986b287e0af778b7db54f","modified":1543151388694},{"_id":"source/_drafts/how-tos/simple-techniques-for-solving-common-sencha-coding-problems.md","hash":"ac38d184eb7ff42a00a16e6613dfecbdffaf6ae8","modified":1543151388694},{"_id":"source/_drafts/how-tos/setup-jslint-for-eclipseaptana.md","hash":"ddb95e789dc70fdd998941e624832060be6604a2","modified":1543151388694},{"_id":"source/_drafts/how-tos/setup-jasmine-tdd-with-for-ext-js.md","hash":"aef86a1fc3e83812c52bb021a44f52524f937f43","modified":1543151388694},{"_id":"source/_drafts/how-tos/start-theming-sencha-with-sass-compass-on-macosx.md","hash":"b111f277ad24c92c1611ba4185d3d869fd6b7f28","modified":1543151388694},{"_id":"source/_drafts/how-tos/sencha-ecmascript-2015.md","hash":"5d873a7182cf75548ebc1f292f9db5501fbd1a7d","modified":1543151388694},{"_id":"source/_drafts/how-tos/some-sencha-news-from-me.md","hash":"33cae09b018ae497569641b3d6d471ca332a5a11","modified":1543151388694},{"_id":"source/_drafts/how-tos/unix-mac-osx-how-to-find-a-strings-in-multiple-files.md","hash":"f18faaf110ebfbaf2b1fb6429a64e0179d92a8d0","modified":1543149887660},{"_id":"source/_drafts/how-tos/the-future-of-senchas-build-tools.md","hash":"42a5b0bc7468d46f9712fb635a4ce9a568b5e5d2","modified":1543151388695},{"_id":"source/_drafts/how-tos/svn-commands.md","hash":"cf98b3fcd2681d3c6140185a17ffb9b95463cc19","modified":1543151388695},{"_id":"source/_drafts/how-tos/top-5-tips-get-started-with-the-latest-sencha-product-releases.md","hash":"95fd2154158c06537852d9e7d30ddafeafd98f45","modified":1543151388694},{"_id":"source/_drafts/how-tos/upgrade-extjs4-1-to-extjs4-2-with-sencha-cmd.md","hash":"ce808844b21ca04477b1effd01cac4a614c0701c","modified":1543149865625},{"_id":"source/_drafts/how-tos/upgrade-node-js-from-the-cli.md","hash":"7dd4644787ea437a5b446a2643eec88171290a3d","modified":1543149865625},{"_id":"source/_drafts/how-tos/what-about-ext-js-and-aria-support.md","hash":"6eb73ace011e3960b8f6f1c9cc518bae698161e7","modified":1543149715567},{"_id":"source/_drafts/how-tos/use-the-sencha-cmd-webserver.md","hash":"4c14d2bf2cba44a87f892eded0ce92ef0f1e91fa","modified":1543149865625},{"_id":"source/_drafts/how-tos/why-do-i-need-phonegapcordova-for-if-i-use-sencha-ext-js.md","hash":"7bc9a0c17c20b807388035cfb54575fcad4ecaf4","modified":1543149715567},{"_id":"source/_drafts/how-tos/which-os-and-browsers-do-ext-js-6-support.md","hash":"c5eb387de74ff7876a0b9b850283d8efea90c9ac","modified":1543149715567},{"_id":"source/_drafts/how-tos/which-version-of-jasmine-is-integrated-in-sencha-test.md","hash":"0c0860192129fddbce7fa8e4f25bf5589c2f06cd","modified":1543149715567},{"_id":"source/images/build-universal-app-img11.png","hash":"b3ecccf8f1d1eb6c9ee8f39bad42c217d6fb4ce0","modified":1543636152000},{"_id":"source/images/compile-order.png","hash":"5e8d0fc5abae57c2df2d9a20fce1fd875c83d776","modified":1543636152000},{"_id":"source/images/desktop-1024x490.png","hash":"909b809147eb76f75d07fffe5d815772cd588e61","modified":1543636152000},{"_id":"themes/ladysign/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1542906736117},{"_id":"themes/ladysign/layout/_partial/article.ejs","hash":"980c441c9ccbe34e2f84f38bc3bd3b9bf17157fa","modified":1543673504941},{"_id":"source/images/weather-app-5.png","hash":"a6cb599fee298945e2a4e0e629055916aaba5aaa","modified":1543636152000},{"_id":"themes/ladysign/layout/_partial/sidebar.ejs","hash":"56e644fa4621a0d27b8c1eea2f3f0451807ea878","modified":1543145315174},{"_id":"themes/ladysign/layout/_partial/scripts.ejs","hash":"1004c590c0b41a327c62c6c2632ee784932bf512","modified":1543666095328},{"_id":"themes/ladysign/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1542392650881},{"_id":"themes/ladysign/layout/_widget/about.ejs","hash":"1fd84b18cf35d459903acb862cc7260e8f76ae82","modified":1542451499168},{"_id":"themes/ladysign/layout/_widget/recent_posts.ejs","hash":"31e426abd4704a61c886fadb9128784f8f38769c","modified":1542451499172},{"_id":"source/images/weather-app-6.png","hash":"a730b89b45e20a606f0b8da870363ea9b9d14a62","modified":1543636152000},{"_id":"themes/ladysign/layout/_widget/category.ejs","hash":"b4308af328c29c1454c58528df96f056ca9bd44d","modified":1543064853815},{"_id":"themes/ladysign/layout/_widget/archive.ejs","hash":"9e247c5f6d41695295afa7e214c89c31135df85c","modified":1543604905452},{"_id":"themes/ladysign/layout/_widget/tag.ejs","hash":"8c57e91f6b709f3bcaf8a0c182b0b76eca27f0df","modified":1542451499173},{"_id":"themes/ladysign/layout/_widget/tagcloud.ejs","hash":"1cf448b34a0bf31b476f80e19706b27d16e1d5dd","modified":1542451499174},{"_id":"themes/ladysign/source/assets/.DS_Store","hash":"0d5555ca907a9a2dc4c1f2b040787c161301bda9","modified":1542999318421},{"_id":"source/images/build-universal-app-img14.png","hash":"e93443dd387a11d13fb52fdc2ab04fdc8ad815df","modified":1543636152000},{"_id":"source/images/build-universal-app-img15.png","hash":"acfa76d4827546091895efe2f4140fce1ad85176","modified":1543636152000},{"_id":"source/images/compose-500x494 (1).png","hash":"be3cc9b9f12c5603933145023de81953101ea97b","modified":1543636152000},{"_id":"source/images/compose-500x494.png","hash":"be3cc9b9f12c5603933145023de81953101ea97b","modified":1543636152000},{"_id":"source/images/build-universal-app-img5.png","hash":"cc38143218d8500e60042e38e8029446c244b82a","modified":1543636152000},{"_id":"source/images/leeboonstra-speaker-500x351.png","hash":"5a8f79ccd1d4b66de5ea4c3ed1d536126db21c51","modified":1543636152000},{"_id":"source/images/weather-app-1-docs.png","hash":"33b2fa3d7f61e9acd920940c28dacd9d68a0d78b","modified":1543636152000},{"_id":"source/images/10yearsold-500x326.png","hash":"6af0818782c0b8ebead5acecfcc700faa369b8a9","modified":1543636152000},{"_id":"source/images/build-universal-app-img10-1024x508.png","hash":"e5ae1eb0e94798fa375232299c21ea258aa6a68b","modified":1543636152000},{"_id":"source/images/build-universal-app-img12-1024x430.png","hash":"78c6af2ff05cadea0dd003ef3e4211413ec27a9b","modified":1543636152000},{"_id":"source/images/build-universal-app-img16-1024x433.png","hash":"59bd6ad9970a16598f14b23a1c27449ba4f75936","modified":1543636152000},{"_id":"themes/ladysign/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1542393855404},{"_id":"themes/ladysign/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1542393855406},{"_id":"themes/ladysign/layout/_partial/post/nav.ejs","hash":"342a04c2a3033bdf0856c826b826ac7464ea3cf8","modified":1543664402403},{"_id":"themes/ladysign/layout/_partial/post/category.ejs","hash":"779c5178c298d5d6e0e3d6b2375e839192db5226","modified":1543137931148},{"_id":"themes/ladysign/layout/_partial/post/tag.ejs","hash":"5c2ac14b126bc4f3bd3beaba805798cb2e565386","modified":1543063077133},{"_id":"themes/ladysign/layout/_partial/post/title.ejs","hash":"bc8c5985dd54c54e3be0831ecb8ca65ce3db5117","modified":1543664351707},{"_id":"themes/ladysign/source/assets/js/main.js","hash":"96bd4c641f48e9d6cdf6f41dd3c0ab3713277128","modified":1542996103316},{"_id":"themes/ladysign/source/assets/js/disqus-lazy-min.js","hash":"a127293e6fb8e12f811757d839e95822521bbd5a","modified":1543070321942},{"_id":"themes/ladysign/source/assets/styles/print.scss","hash":"327cc46e463ce671fee673a6e208083d47a5056f","modified":1543668538759},{"_id":"themes/ladysign/source/assets/styles/main.scss","hash":"ba77f6338346158357041994ef2824d72d1dc65a","modified":1543668463049},{"_id":"themes/ladysign/source/assets/fonts/Mathlete-Skinny-webfont.woff","hash":"f083c1facc24d6ff163cc45688ec1d2d97eb4631","modified":1542908612644},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Bold-webfont.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1542494074458},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Bold-webfont.woff","hash":"da4032f9e0a9753489a58f81bf02930ed6952e04","modified":1542494074458},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Italic-webfont.ttf","hash":"9cac18f017f304fb6b52634965beb87933210daa","modified":1542494074460},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Regular-webfont.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1542494074460},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Regular-webfont.woff","hash":"99d93e1e3636f86c85b0c7c4da2077b4f1ee010c","modified":1542494074460},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Italic-webfont.woff","hash":"fc9e3d9b5a34951a7ad3e461120fa6316c3b754a","modified":1542494074460},{"_id":"themes/ladysign/source/assets/fonts/bebasneue-webfont.eot","hash":"117e85a2ca6fbf68d4078b3f9b658d855ef313f7","modified":1542493937796},{"_id":"themes/ladysign/source/assets/fonts/bebasneue-webfont.ttf","hash":"6cd405d21a8d5810a2ed5408b4cf9d6e700b0713","modified":1542493937796},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Regular-webfont.ttf","hash":"f707e98ad2f7cbe937d14537428630faba9a1d33","modified":1542494074460},{"_id":"themes/ladysign/source/assets/fonts/bebasneue-webfont.woff","hash":"03c49a83a44d4f1a3414a33b26d3974c910f2dd0","modified":1542493937796},{"_id":"themes/ladysign/source/assets/fonts/bebasneue-webfont.woff2","hash":"8415365c4180f9ba8def5b620ee0800314712f22","modified":1542493937796},{"_id":"themes/ladysign/source/assets/fonts/icomoon.woff","hash":"e5dcab64bedb551944900f19ad9054bccc1bf7b9","modified":1542990070000},{"_id":"themes/ladysign/source/assets/fonts/icomoon.eot","hash":"c70c654e84f8889e12197e0ca7580b18a4a87c60","modified":1542990070000},{"_id":"themes/ladysign/source/assets/fonts/icomoon.svg","hash":"344e1e001507c9a6f9f3d075c45519456e061e72","modified":1542990070000},{"_id":"themes/ladysign/source/assets/fonts/icomoon.ttf","hash":"d3d2ceac7d9ee9749c02f359290b8bfa8cbc5487","modified":1542990070000},{"_id":"themes/ladysign/source/assets/fonts/oswald-regular-webfont.eot","hash":"c587d78f2bd7345d03e8f8f3763ec20b40a06ddd","modified":1542557399784},{"_id":"source/images/build-universal-app-img1.png","hash":"82c55745d177c9698ec1d0a6958df98d3058f6a6","modified":1543636152000},{"_id":"source/images/build-universal-app-img3.png","hash":"919db2eb05b07f1613b043042515837901aa8563","modified":1543636152000},{"_id":"themes/ladysign/source/assets/fonts/oswald-regular-webfont.ttf","hash":"cbdd989061ff5a31e6c48eeb3782730c09619be3","modified":1542557399785},{"_id":"themes/ladysign/source/assets/fonts/oswald-regular-webfont.svg","hash":"0863fe2437e32ab08a403f38391ae6f54c35c9c5","modified":1542557399785},{"_id":"themes/ladysign/source/assets/fonts/oswald-regular-webfont.woff","hash":"64bad5b2e85694e46ee74a8b05805ae1344645de","modified":1542557399785},{"_id":"source/images/build-universal-app-img7-1024x483.png","hash":"6e62de12164f454d3e7fa4f2a73a42fdd6c5d884","modified":1543636152000},{"_id":"source/images/weather-app-4.png","hash":"2ba1685d7aa2d93e35d93bcc0b32c1b24e916833","modified":1543636152000},{"_id":"themes/ladysign/source/assets/fonts/Mathlete-Skinny-webfont.eot","hash":"e129b8e5c30ac74199c036c6b5cc7f5c0ef36e57","modified":1542908612643},{"_id":"themes/ladysign/source/assets/fonts/Mathlete-Skinny-webfont.ttf","hash":"54a7df4fe2b3cf59a4155ae051fe75378bd73fc2","modified":1542908612643},{"_id":"themes/ladysign/source/assets/fonts/Mathlete-Skinny-webfont.svg","hash":"11789f3df5fab8981bf515a4179b4683f86dad94","modified":1542908612645},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Bold-webfont.ttf","hash":"e1f98df0753298737a59d10ee3d276daf166c052","modified":1542494074458},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Italic-webfont.eot","hash":"6e916ced854bbddc1711b2d54bbbae56bece0b6f","modified":1542494074458},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Bold-webfont.svg","hash":"fbb46da1ccda54b4b5b84287598fa92cf4873ced","modified":1542494074461},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Italic-webfont.svg","hash":"614e6f94621584e89db09d044f0a10d8d521e289","modified":1542494074461},{"_id":"themes/ladysign/source/assets/fonts/Roboto-Regular-webfont.svg","hash":"74658e8062c2306d57a3885d55831ad2e2841c0d","modified":1542494074461},{"_id":"themes/ladysign/source/assets/fonts/bebasneue-webfont.svg","hash":"f5813bb53e70db2a83250e48ca7655e245babf23","modified":1542493937797},{"_id":"themes/ladysign/source/assets/fonts/consolas-webfont.ttf","hash":"7eee4196ec2374184994e06301ecc35572cc24ca","modified":1543065995026},{"_id":"themes/ladysign/source/assets/fonts/consolas-webfont.svg","hash":"af73b069b43922f21a4adda465d621ea3aaa726e","modified":1543065989723},{"_id":"themes/ladysign/source/assets/fonts/consolas-webfont.eot","hash":"a1a999e810cdab680b73dc1955b6fbb5b4a47242","modified":1543065969599},{"_id":"themes/ladysign/source/assets/fonts/consolas-webfont.woff","hash":"2e561a091ef5ac5fb8b1c07a866674aebd674c4b","modified":1543065999491},{"_id":"source/images/build-universal-app-img9-1024x590.png","hash":"d1986d3fb8d27ab2249dabbe1c089ab70b16091c","modified":1543636152000},{"_id":"source/images/build-universal-app-img9-1024x590 (1).png","hash":"d1986d3fb8d27ab2249dabbe1c089ab70b16091c","modified":1543636152000},{"_id":"source/images/preview.png","hash":"71f932846c2111f91743489065f9dc15756e02de","modified":1543636152000},{"_id":"themes/ladysign/source/assets/js/vendor/modernizr-3.6.0.min.js","hash":"fe34b722985671feb767ba559df2615ac0cad320","modified":1542393268714},{"_id":"themes/ladysign/source/assets/js/vendor/popper.min.js","hash":"d8503645c17f9856868a7def3dc0505e19a95ec7","modified":1542998694015},{"_id":"themes/ladysign/source/assets/js/vendor/bootstrap.min.js","hash":"27a71b00383d61ef3c489326b3564d698fc1227c","modified":1542998752398},{"_id":"themes/ladysign/source/assets/styles/_components/_footer.scss","hash":"5b72240c89f4d9e5d3ede270f6697d9e18514fee","modified":1543667508417},{"_id":"themes/ladysign/source/assets/styles/_components/_article.scss","hash":"ad7db90cab2ada8c5114b63204260d56e2061519","modified":1543667611569},{"_id":"themes/ladysign/source/assets/styles/_components/_header.scss","hash":"38c1d2718bf5641b8216c8853a67dcafe97d340f","modified":1543667619160},{"_id":"themes/ladysign/source/assets/styles/_components/_sidebar.scss","hash":"56b1279fd74d4adab186d47cd52fdc74c680c3b3","modified":1543667480148},{"_id":"themes/ladysign/source/assets/styles/_sections/_footer.scss","hash":"050b8045f2e68db52b97aecf4b026ae32a248c5a","modified":1487495588000},{"_id":"themes/ladysign/source/assets/styles/_sections/_box.scss","hash":"c1f90e21abe399d22e79b794d22ad5726dca96e0","modified":1487495588000},{"_id":"themes/ladysign/source/assets/styles/_components/_components.scss","hash":"8a81daa1277c1ef9ebfaf2ccc833df8eeae96bd4","modified":1543065503500},{"_id":"themes/ladysign/source/assets/styles/_sections/_sections.scss","hash":"e88efb2b86757e04d34f9bf9de943b5d229d0241","modified":1487495588000},{"_id":"themes/ladysign/source/assets/styles/_components/syntax.scss","hash":"96018509651db63e17608d436e71d340a2851732","modified":1543666070222},{"_id":"themes/ladysign/source/assets/styles/_settings/_colors.scss","hash":"173a66fdbc7429ba704a3a8c09c4f4c85fba5aae","modified":1542746200324},{"_id":"themes/ladysign/source/assets/styles/_settings/_bootstrap.scss","hash":"a4fa4ae1943b835bdcb99f65054a79bea9ba9539","modified":1487495588000},{"_id":"themes/ladysign/source/assets/styles/_settings/_settings.scss","hash":"209ab8ba1efef437643d36a2a89e881821eac8d3","modified":1487495588000},{"_id":"themes/ladysign/source/assets/styles/_components/_menu.scss","hash":"84ccc6fcf5b5a533b0a06df506fb7a60c75929fe","modified":1543158985972},{"_id":"themes/ladysign/source/assets/js/vendor/jquery-3.3.1.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1542393268713},{"_id":"source/images/build-universal-app-img8-1024x572.png","hash":"a72aba4dbf0f0f85862b09008444749ec6737849","modified":1543636152000},{"_id":"source/images/build-universal-app-img13-1024x601.png","hash":"8dbd25ec7910d67390ad7c34656ac24b7bf20589","modified":1543636152000},{"_id":"source/images/leeboonstra-book.png","hash":"88139ac882368daad315b73ccce4c1eb00eed288","modified":1543636152000},{"_id":"source/images/build-universal-app-img2.png","hash":"d5a18946aa49b74dc86e7fa37c735cc653348d8e","modified":1543636152000},{"_id":"source/images/lee.boonstra-resume.pdf","hash":"8444955d4ccfeed2afdffc5d38c8e9a050967589","modified":1543636152000},{"_id":"source/images/build-universal-app-img6.gif","hash":"c9d4a95349d18a126ed5e7833a5b90e25d3f3647","modified":1543636152000},{"_id":"public/feed.json","hash":"e07d113d719212c331296444a7426a356205fa2a","modified":1543676576961},{"_id":"public/sitemap.xml","hash":"7a9dd443913ff3d28c878a31707fc7642cbf4efa","modified":1543676578173},{"_id":"public/atom.xml","hash":"cb986a9402c69de1653750e3e6bde0a95becc262","modified":1543676578176},{"_id":"public/archives/2012/11/index.html","hash":"7f49c300df0a4f861bda1365a794533e04b7d3d8","modified":1543676588828},{"_id":"public/archives/2012/12/index.html","hash":"3f72e675fbb47e3a5955e2ee3eda1e16a852f933","modified":1543676588828},{"_id":"public/archives/2014/page/2/index.html","hash":"85ad974c1a9af2bec3816a4663457087787cda44","modified":1543676588828},{"_id":"public/archives/2014/03/index.html","hash":"62460dbbcfb449e170f929d6059caec2a267b9d2","modified":1543676588828},{"_id":"public/archives/2014/05/index.html","hash":"698a70544c1ec864193a25e2b4b4c2af96fdbd01","modified":1543676588828},{"_id":"public/archives/2014/06/index.html","hash":"de5b85ebbd7b36473849cbb7ebcb5076eb221b12","modified":1543676588828},{"_id":"public/archives/2014/07/index.html","hash":"89c5432b0e9efd8c2c646a78f7ebb3e00248f86f","modified":1543676588828},{"_id":"public/archives/2014/08/index.html","hash":"7b7a1cad6fc167f961d869b485c995841944b85c","modified":1543676588828},{"_id":"public/archives/2014/09/index.html","hash":"3e1ccf6117a1bf5f9d7776b916ba9876eaedc4fc","modified":1543676588828},{"_id":"public/archives/2016/01/index.html","hash":"618b95a6b577c95d16fd089215c69c93929862ea","modified":1543676588828},{"_id":"public/archives/2016/03/index.html","hash":"27bd58337952070747f504310cc63b71a920c517","modified":1543676588829},{"_id":"public/archives/2016/04/index.html","hash":"4bfd9cc707f83de8aecad5d57d0fa072c699f453","modified":1543676588829},{"_id":"public/archives/2016/11/index.html","hash":"8b195834c6679b7bf9956b1064e1259b943bca57","modified":1543676588829},{"_id":"public/archives/2016/12/index.html","hash":"425127514bd0337792f4345c5b3459416f48f001","modified":1543676588829},{"_id":"public/archives/2017/03/index.html","hash":"5748cda20e37e32171f67943290b473dd1ad9098","modified":1543676588829},{"_id":"public/archives/2017/04/index.html","hash":"e7272d137e401ba161269f23e1d214ddc6934ee7","modified":1543676588829},{"_id":"public/archives/2017/08/index.html","hash":"8295b177fbafe3415113c1bfc7756344b17a05d0","modified":1543676588829},{"_id":"public/archives/2017/11/index.html","hash":"bc2e1b013215cdb276b23dd44b5d51c909a99291","modified":1543676588829},{"_id":"public/archives/2017/12/index.html","hash":"37e03cad0147aba1fe80432cd8ae26650c0988bd","modified":1543676588830},{"_id":"public/archives/2018/02/index.html","hash":"aaf41bb45cf222eda14d028d1e549543fe85fc7c","modified":1543676588830},{"_id":"public/archives/2018/10/index.html","hash":"7804b9ca9c327b04351b466ad4954c4ed80c520b","modified":1543676588830},{"_id":"public/archives/2018/11/index.html","hash":"6a004a338a298fa00168f9165e3c96e166054015","modified":1543676588830},{"_id":"public/404.html","hash":"c64e6be191872049966d0a4afdb757607807a44b","modified":1543676588830},{"_id":"public/about/index.html","hash":"1cf4f1e8a9714ed087ee6843b8b73162d3a66e4a","modified":1543676588831},{"_id":"public/writing/index.html","hash":"b4b37978353948ea8f3fd8523a5789f1b66127fe","modified":1543676588831},{"_id":"public/contact/index.html","hash":"182ccafc1b1747f06cb76dc7a1c240e7d76cb010","modified":1543676588831},{"_id":"public/Videos/video-frontmania/index.html","hash":"4314793deacc9fdf43969325ddeb26b02e90038d","modified":1543676588831},{"_id":"public/speaking/index.html","hash":"1eb4b788636397add87c5e19cef92d2567c0d371","modified":1543676588831},{"_id":"public/Videos/video-google-cloud-next-london/index.html","hash":"36f95b9b044d003b296d5905a34f9040e3ce7739","modified":1543676588831},{"_id":"public/Videos/video-digitalwednesday/index.html","hash":"513ce775c881ea74686bed10c0713d39ca936997","modified":1543676588831},{"_id":"public/Bots/conditional-templating-in-dialogflow-for-google-assistant/index.html","hash":"e91d0d605704e9ec892e672703f88e4ffd7b0ce3","modified":1543676588831},{"_id":"public/Bots/custom-greeting-google-assistant-app-with-dialogflow-and-actions-on-google/index.html","hash":"2e3e975f9c1ccd1471e276fc3cc48108c7aee2c2","modified":1543676588831},{"_id":"public/Bots/actions-on-google-for-google-cloud-functions/index.html","hash":"96adc690a3d8d6483f61b554e3f10c6b6bc3894e","modified":1543676588832},{"_id":"public/Videos/video-dlp-vision-api-demo-google-cloud-summit-munich/index.html","hash":"e7c69f55e59578a6a277606d57a122094a2c4bf2","modified":1543676588832},{"_id":"public/Videos/video-google-cloud-summit-paris-keynote-video-intelligence/index.html","hash":"7d4a5fec7e859b6fa465e2ad6dfd87a7aae3bf3c","modified":1543676588832},{"_id":"public/Videos/video-cloud-on-air-webinar-create-custom-conversations-with-dialogflow/index.html","hash":"7d1d77ea0477e97d192bcda2a559db63e7ee2870","modified":1543676588832},{"_id":"public/Videos/video-google-cloud-next-amsterdam-keynote-video-intelligence-api/index.html","hash":"6acec6f7e48f18593dfe3eb3d2e2e62abf2042ed","modified":1543676588832},{"_id":"public/Videos/video-create-custom-chat-agents-for-google-home-with-api-ai/index.html","hash":"1308250871e9f9a8ff3b186690919ac2e5d34b75","modified":1543676588832},{"_id":"public/Videos/video-extending-g-suite-with-business-applications/index.html","hash":"642ebf41b985644bcde441c8df30950ac896eb5b","modified":1543676588832},{"_id":"public/Videos/machine-learning-apis-for-python-developers/index.html","hash":"c55b65b45a862e879e93b792ae1f30670157fe25","modified":1543676588832},{"_id":"public/Machine-Learning/introduction-to-the-video-intelligence-api/index.html","hash":"c1f26d96dd8c4f2eb26090e857e20ef98e9386bd","modified":1543676588832},{"_id":"public/Google-Cloud-Platform/analyzing-data-with-bigquery-and-machine-learning-apis/index.html","hash":"13181922f99a2c2a89a94f81968e2f19b155e91a","modified":1543676588833},{"_id":"public/Sencha/goodbye-sencha-hello-google/index.html","hash":"772906ae31df808c5996a26365a8fc9c0fd5167a","modified":1543676588833},{"_id":"public/Ext-JS/universal-windows-apps-for-microsoft-surface-pro-hybrids-ms-edge-with-ext-js-6/index.html","hash":"72922e3e0adcaaf55a87b0fcd5dcaac4d63de4f9","modified":1543676588833},{"_id":"public/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8/index.html","hash":"79088b9607a3c26c3791accc3b81091ae69ee2c6","modified":1543676588833},{"_id":"public/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7/index.html","hash":"a20bf20fa553e65f2836afe6b41ecd9665d27d87","modified":1543676588833},{"_id":"public/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6/index.html","hash":"a89a42ed5b552d033e75d44018e78047979208b9","modified":1543676588833},{"_id":"public/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5/index.html","hash":"c1141d61f23c25f33fe4aaf9b903375b1d2c4155","modified":1543676588834},{"_id":"public/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4/index.html","hash":"a0a93668b4f31d5d9cf1bebb4bebc32d3175c2e7","modified":1543676588834},{"_id":"public/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3/index.html","hash":"3fd8d6b028fdf826da7ecaa60e248a40560abdb2","modified":1543676588834},{"_id":"public/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2/index.html","hash":"3f415c507779b6a2a7fa403a4e55b50f7a400ecd","modified":1543676588834},{"_id":"public/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1/index.html","hash":"cbf3b425653d5de571d5f9dc466fbeeaf2c141fb","modified":1543676588834},{"_id":"public/Ext-JS/d3-visualizations-in-ext-js-6-2/index.html","hash":"d7836feb44fe91a23d6277f34d04c0636c00bdb4","modified":1543676588834},{"_id":"public/Cordova/native-sencha-apps-with-ext-js-6-and-cordova/index.html","hash":"2c23697234499f621e21810db76d677c71a3fd7c","modified":1543676588835},{"_id":"public/Ext-JS/asynchronous-javascript-promises/index.html","hash":"d6fc1d998aecadb077e9d6c85a32802711eaa2af","modified":1543676588835},{"_id":"public/Django/django-template-extending/index.html","hash":"d5be8598f546a88b16392b7cd4d2b17d0ac9e5af","modified":1543676588835},{"_id":"public/Django/setup-a-django-project-with-a-mysql-database/index.html","hash":"641d9a686eac90d01a47b3e9c9342922a051645a","modified":1543676588835},{"_id":"public/Sencha-CMD/advanced-cmd-how-to-integrate-ext-js-with-maven/index.html","hash":"c2fe2a747481817ee36be8995f1837a15a0d46ae","modified":1543676588835},{"_id":"public/Sencha-CMD/advanced-sencha-cmd-dealing-with-a-multi-ext-js-app-infrastructure/index.html","hash":"47c080f59365e373cf6ffbdc37eea653c364576f","modified":1543676588835},{"_id":"public/Robotics/connect-play-around-with-bb-8-by-sphero-with-javascript-on-a-mac/index.html","hash":"6da8391aa84c5fe4a9af3100bf13f00d1c003218","modified":1543676588835},{"_id":"public/Videos/webinar-secrets-to-building-a-great-looking-universal-app/index.html","hash":"21bb9d733bd58f68dfc3752a6006dccb8f29ab68","modified":1543676588835},{"_id":"public/Ext-JS/universal-app-ext6-p1-2/index.html","hash":"2eb2de7c44bc0881b5c95fa802a9aff49b0446e4","modified":1543676588835},{"_id":"public/Ext-JS/universal-app-ext6-p1/index.html","hash":"98bfdf0ee6b1d8d52b08b9ffb11d5df77fde19cc","modified":1543676588835},{"_id":"public/Ext-JS/working-with-sencha-app-templates-boilerplate-ext-js-6-code/index.html","hash":"5e1ff4904283f5feb0fb210ec776d05529d729ba","modified":1543676588836},{"_id":"public/Sencha-CMD/running-multiple-sencha-cmd-versions-for-example-to-support-sencha-architect/index.html","hash":"c78d2ef8edf1c35926f1799dc349b4a860f561c0","modified":1543676588836},{"_id":"public/Cordova/make-a-native-build-with-ext-js-5-sencha-cmd-5-and-phonegap-cordova-with-plugins/index.html","hash":"2b2780a419b36f9f5246171c7ed99598ba32bb59","modified":1543676588836},{"_id":"public/Videos/optimizing-extjs/index.html","hash":"5294a55757b08fe6128e8270cde525df7c13c5f0","modified":1543676588836},{"_id":"public/Videos/senchaarchitect/index.html","hash":"f4a651e460c8d13918b8e2005998961f61efd359","modified":1543676588836},{"_id":"public/Sencha-Architect/using-custom-fonts-with-sencha-architect-2/index.html","hash":"ade72241b90496ca169607b1655320498bcf7623","modified":1543676588837},{"_id":"public/Sencha-Architect/create-a-tv-app-with-sencha-touch-and-sencha-architect/index.html","hash":"d8358a9b85ad5f58e2053a6e714db580adeea999","modified":1543676588837},{"_id":"public/Ext-JS/creating-theme-specific-overrides-in-ext-js/index.html","hash":"eb925cabbedd8fc52dd66f0708902f8cb3ab1ea4","modified":1543676588837},{"_id":"public/Ext-JS/create-dynamic-sencha-models-from-your-server-side/index.html","hash":"d03741b696a0aa26d2186928d00dcba3099d547c","modified":1543676588837},{"_id":"public/Sencha-Touch/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-3/index.html","hash":"b60cf30b4f49668d3141c9194d3d2485555c3946","modified":1543676588837},{"_id":"public/Sencha-Touch/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-2/index.html","hash":"b98d064beb59a23d85057abb8de36f3f85518427","modified":1543676588837},{"_id":"public/Sencha-Touch/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-1/index.html","hash":"4535b896cd64e67b3f6911c7b26f23dc2f49735a","modified":1543676588837},{"_id":"public/Theming/using-custom-icons-in-your-ext-js-apps/index.html","hash":"f8744e9629d2ee9a1b8c7324dda3de45a56fe715","modified":1543676588837},{"_id":"public/Sencha-CMD/generate-a-theme-with-sencha-cmd/index.html","hash":"c578a5fa629cefa03f962eb2d9dc97b83b7c2146","modified":1543676588837},{"_id":"public/Theming/create-an-amazing-sencha-touch-theme-with-sass/index.html","hash":"62af00dd8b55bcb42bbb71b4cc3f96aa419ee54d","modified":1543676588837},{"_id":"public/App-Cache/make-your-mobile-webapp-work-offline-with-application-cache/index.html","hash":"4e27dd5f93e2d5ff8ca424800ab68aabe2ee5438","modified":1543676588837},{"_id":"public/categories/Bots/index.html","hash":"9637259fe0cb70161ffd5ccef2dee9d66bc8186c","modified":1543676588838},{"_id":"public/categories/Ext-JS/index.html","hash":"97bd62e5d75426669fcac8c32985d374b91af094","modified":1543676588838},{"_id":"public/categories/Robotics/index.html","hash":"e8fb8c2a990f806be98e94a6abe89d4acaa62ed7","modified":1543676588838},{"_id":"public/categories/Sencha-CMD/index.html","hash":"8ec327d4338fe965bb79f6ca1d0235b2448343dd","modified":1543676588838},{"_id":"public/categories/Theming/index.html","hash":"43b9837b053747f4ddf5293b0a41c6d4fbf1a085","modified":1543676588838},{"_id":"public/categories/Django/index.html","hash":"a8afad5804fe4ebcf34c05157efda4d1a354ca35","modified":1543676588838},{"_id":"public/categories/Cordova/index.html","hash":"d7cee9803dfeb021d880892949a5bf71c1b16a4b","modified":1543676588838},{"_id":"public/categories/Sencha/index.html","hash":"bdef8bb54e77ce607aeb09ca75dc9b2504c6cf14","modified":1543676588838},{"_id":"public/categories/Videos/index.html","hash":"4ae27ae5032c4f445d71fce94b813fa205980a1a","modified":1543676588838},{"_id":"public/categories/Videos/page/2/index.html","hash":"e3a9cca45dd1efd3c3b8b949e1af142d58a4ab5d","modified":1543676588838},{"_id":"public/categories/App-Cache/index.html","hash":"3dbc56317f4fba288e6bb57d1c64ab11b39d943f","modified":1543676588839},{"_id":"public/categories/Containers/index.html","hash":"ab12deab5dc3650bebf03f059577cbafa22fa370","modified":1543676588839},{"_id":"public/categories/Sencha-Architect/index.html","hash":"953f360b58bea136748c9a7106e48814128be943","modified":1543676588839},{"_id":"public/categories/Sencha-Touch/index.html","hash":"5178266ece74ca5ee5ce0ab3e053135af111bdee","modified":1543676588839},{"_id":"public/categories/Machine-Learning/index.html","hash":"fa2234900de6f9f43bc6b3c712db60dc527c8023","modified":1543676588839},{"_id":"public/categories/Google-Cloud-Platform/index.html","hash":"53dce5bda4655dc9ace674a49d89e13c30124a8c","modified":1543676588839},{"_id":"public/index.html","hash":"16627b0742ecf68f4620f56c38925b7eefba8472","modified":1543676588839},{"_id":"public/page/2/index.html","hash":"7b9f7824447d9b21824dba0ad497ff56d915c9c4","modified":1543676588839},{"_id":"public/page/3/index.html","hash":"ccc1ad399e3db7d4c46244cec4c17b110e7dd933","modified":1543676588840},{"_id":"public/page/4/index.html","hash":"8e92ce42141c37604dfe3ec3caaf054ce89e4a82","modified":1543676588840},{"_id":"public/page/5/index.html","hash":"51d2cad58c65d2fb31de2ad7e2f2c2a20ca60b2b","modified":1543676588840},{"_id":"public/page/6/index.html","hash":"40e6f6b2288fba391d7eb654105e4bb996f4f868","modified":1543676588840},{"_id":"public/archives/index.html","hash":"a8b3e5431d52fc0a7785653e8561211db5a11d75","modified":1543676588840},{"_id":"public/archives/page/2/index.html","hash":"569e2e816ce5096043a29cdf3574020a708f1aaf","modified":1543676588840},{"_id":"public/archives/page/3/index.html","hash":"f9aca001b8103f97fc242a8c290915b6033cfdbd","modified":1543676588840},{"_id":"public/archives/page/4/index.html","hash":"71c622a0071b467b7500befd40f1649f6761ae65","modified":1543676588840},{"_id":"public/archives/page/5/index.html","hash":"13277e78baaa3121eb53d9649f7dbf1982b4464e","modified":1543676588840},{"_id":"public/archives/page/6/index.html","hash":"be8e70d97704e5d28d007b0fb29b035934125383","modified":1543676588840},{"_id":"public/archives/2012/index.html","hash":"cdabc6dad86343b166a91b8f800dd1dcc49d468d","modified":1543676588841},{"_id":"public/archives/2014/index.html","hash":"ac8e2145f825d308ad0b6adf3846111575a927f3","modified":1543676588841},{"_id":"public/archives/2014/04/index.html","hash":"edafd0223567e26b9957473e2327ded6b1155105","modified":1543676588841},{"_id":"public/archives/2015/index.html","hash":"45ffc89777d3beb8c9c33b71228173b8099debb8","modified":1543676588841},{"_id":"public/archives/2015/07/index.html","hash":"c2948999163c81eee68a1891387a2353f45c785f","modified":1543676588841},{"_id":"public/archives/2015/11/index.html","hash":"3313825d86bc9235326bbbc8c1e106f2b6b9fcf9","modified":1543676588841},{"_id":"public/archives/2016/index.html","hash":"91fd93b8b44bebdd8e6eddce70d5f55e812bf510","modified":1543676588841},{"_id":"public/archives/2016/page/2/index.html","hash":"899659b974e3ec32d5a75995a85887d783e56316","modified":1543676588841},{"_id":"public/archives/2016/02/index.html","hash":"c19bf7a67601aec8c8325bb499ac24bbcb899bf7","modified":1543676588841},{"_id":"public/archives/2016/06/index.html","hash":"a37597ee80264e2f86e4e41a368190fb26b6b2e5","modified":1543676588841},{"_id":"public/archives/2016/08/index.html","hash":"21a4bce2ea494d90a87c9106bfbaf71f9e8066fb","modified":1543676588842},{"_id":"public/archives/2017/index.html","hash":"d6a12480b2428a2a4583d96f700effe186b640d4","modified":1543676588842},{"_id":"public/archives/2017/09/index.html","hash":"d5defc037f5c9138e8b1f9c1614a7f20325ee27a","modified":1543676588842},{"_id":"public/archives/2018/index.html","hash":"f32d7e7a9e8d8707ce4afb94d99dd32f59a59806","modified":1543676588842},{"_id":"public/archives/2018/05/index.html","hash":"36ddfef81d5fc99329476e61120388e7c973cf07","modified":1543676588842},{"_id":"public/tags/Sencha/index.html","hash":"4eae1122cc44df280ee1c40423ea6bcc53eff2aa","modified":1543676588842},{"_id":"public/tags/Ext-JS/index.html","hash":"6992689b70015810df94b36bfd799628d65e645c","modified":1543676588842},{"_id":"public/tags/Actions-on-Google/index.html","hash":"1e37d6cef45b8e7f1b827beea9e9c98b935ef793","modified":1543676588842},{"_id":"public/tags/Cloud-Functions/index.html","hash":"1b8c3d2fc6c0ceafa98c116fcca7221313efd295","modified":1543676588842},{"_id":"public/tags/Dialogflow/index.html","hash":"831fc2087bbb9c18390b6b0cd60bc2c41f6de8b4","modified":1543676588842},{"_id":"public/tags/Node-JS/index.html","hash":"67ef41052436f6351a7bdebbf8737e3437863895","modified":1543676588843},{"_id":"public/tags/async/index.html","hash":"67a42c98f36028eb60e9e6825f34f2d2a5c30055","modified":1543676588843},{"_id":"public/tags/ecmascript6/index.html","hash":"30687c2cab4d703b78c4c2503f9f42151ba51e7c","modified":1543676588843},{"_id":"public/tags/es6/index.html","hash":"b02aba975d3073ba63e4276cf8624995198d00b6","modified":1543676588843},{"_id":"public/tags/JavaScript/index.html","hash":"823461ed060f5720e92dca4b65874cf79c829ade","modified":1543676588843},{"_id":"public/tags/promises/index.html","hash":"3e556d662fe393013181a1605e7457c3750c8229","modified":1543676588843},{"_id":"public/tags/ExtJS6/index.html","hash":"f7fb7efb85be135395ad06bce5e039f902db416e","modified":1543676588843},{"_id":"public/tags/Sphero/index.html","hash":"ec792600d54567e11815a134c14f0ad48ef6125d","modified":1543676588843},{"_id":"public/tags/BB8/index.html","hash":"899865257c2ec96f38e8f73630ca759aa08e2003","modified":1543676588843},{"_id":"public/tags/Star-Wars/index.html","hash":"9dfbc8f46afb0bf93915f365224f8b04676d66e2","modified":1543676588843},{"_id":"public/tags/Conditionals/index.html","hash":"1fd9cfeb1cb19d785c944de8e477a25d7781b8c7","modified":1543676588843},{"_id":"public/tags/Google-Assistant/index.html","hash":"9146ab82fbb658737b59eb2de14ea7c119848d10","modified":1543676588843},{"_id":"public/tags/Templating/index.html","hash":"5f299c74606e1bc2c7f9be6677c7792c84719a01","modified":1543676588843},{"_id":"public/tags/Pug/index.html","hash":"ddc0817f4656d64551e0ac06fbc118ea1b26b0b3","modified":1543676588844},{"_id":"public/tags/Java/index.html","hash":"8e8b2d8395d984a3497a510a92a3f28571bece35","modified":1543676588844},{"_id":"public/tags/Maven/index.html","hash":"d3c7eed97f455ae2a6cbf3dd8ab62e9d5805c443","modified":1543676588844},{"_id":"public/tags/pom/index.html","hash":"f4d1a6b0326783fd545c5074160fb8a79f8e1123","modified":1543676588844},{"_id":"public/tags/Compass/index.html","hash":"e77fb35ed2cf12f2c3706e1c1df636e538812c59","modified":1543676588844},{"_id":"public/tags/CSS3/index.html","hash":"48ffba7734007513f89941dae7923ec3aa208a19","modified":1543676588844},{"_id":"public/tags/Sass/index.html","hash":"511827cdbc56ec9f0e33ccd507481afbfe8ee18f","modified":1543676588844},{"_id":"public/tags/Theming/index.html","hash":"9dd47b327f55eecabae945947e719e128d7beb4c","modified":1543676588844},{"_id":"public/tags/MVC/index.html","hash":"279484abf137643e55fee5b14da226cf0306816a","modified":1543676588845},{"_id":"public/tags/Models/index.html","hash":"bddd94ecfdeafa51a8a68a9beb3eb543bb375851","modified":1543676588845},{"_id":"public/tags/Django/index.html","hash":"bbe728807a6fcb2939e2a49dbab96ace3ca99288","modified":1543676588845},{"_id":"public/tags/Python/index.html","hash":"eedaa6ade6b1b1a16302146c5bcf03e2f7ca0a8f","modified":1543676588845},{"_id":"public/tags/Templates/index.html","hash":"0e33359e745d3dac31ff3685b787551ec6fb4ed7","modified":1543676588845},{"_id":"public/tags/Sencha-Cmd/index.html","hash":"b9bfb04e046beb17bb79eabd801f47917ef66773","modified":1543676588845},{"_id":"public/tags/Sencha-themes/index.html","hash":"495bddaf8c85c969138cc8ee110cc4ecf8f677de","modified":1543676588845},{"_id":"public/tags/Overrides/index.html","hash":"584c66d70e814a46b195b9cf889a347dc92d40f2","modified":1543676588845},{"_id":"public/tags/Custom-Welcome-Intent/index.html","hash":"9bc7f6343058cfbe1b70a4948aca42ffb0042bc4","modified":1543676588845},{"_id":"public/tags/d3-js/index.html","hash":"a34d80d076f0d35d1032fc9edabf9c951a1d157a","modified":1543676588845},{"_id":"public/tags/SVG/index.html","hash":"f0ed95c9d84a00923a5c393c04e1bf1193b93ef0","modified":1543676588846},{"_id":"public/tags/Cordova/index.html","hash":"b8221b8f88b7548662ea5e8893d13b2b7280287d","modified":1543676588846},{"_id":"public/tags/Hybrid-App/index.html","hash":"80730c4b67c9ced5a54543e6ac3bdd676caffd27","modified":1543676588846},{"_id":"public/tags/iOS/index.html","hash":"b03be49356a4f5ecb3b01c8b502f0438ed9ed3c2","modified":1543676588846},{"_id":"public/tags/InAppBrowser/index.html","hash":"a2f5beeb07de250052145cf4f022ac3c9ba70d94","modified":1543676588846},{"_id":"public/tags/Native/index.html","hash":"7fec7c7f8d8e9f3f2171cb3aa6e3491ff9dba911","modified":1543676588846},{"_id":"public/tags/Phonegap/index.html","hash":"cd9ed85e928b2216e2916c239e1aa553c7eb1cc6","modified":1543676588846},{"_id":"public/tags/Google/index.html","hash":"ed60ee029f056e026a7b12bd68dadf625582076a","modified":1543676588846},{"_id":"public/tags/Google-Cloud/index.html","hash":"1b45f4f7cd6acf0c215a59dc00edd57f488e1dad","modified":1543676588846},{"_id":"public/tags/Machine-Learning/index.html","hash":"de8a82d621f3f8339d2f2d78af71414239a22f4e","modified":1543676588847},{"_id":"public/tags/Pygrunn-2017/index.html","hash":"127a07c119594e29fa1536b1a57866f691707b37","modified":1543676588847},{"_id":"public/tags/Sencha-Architect/index.html","hash":"bd523636b3aef0a68d5b105cf406571f94a92e69","modified":1543676588847},{"_id":"public/tags/MySQL/index.html","hash":"48cf93217b802b124f9db1e8d91f903b61a2519f","modified":1543676588847},{"_id":"public/tags/Phyton/index.html","hash":"84439fab8cce98efeb5e04eaea9f4eb8f8c4b201","modified":1543676588847},{"_id":"public/tags/Application-Cache/index.html","hash":"535ac65c8e2be67daa6a11f630221a8c9d333558","modified":1543676588847},{"_id":"public/tags/Offline-Apps/index.html","hash":"fa84805a582e5f4cbab4fd4f029fed0ce25a83d3","modified":1543676588847},{"_id":"public/tags/Docker/index.html","hash":"76d0f55f84ac96d53c9275d159f531843b88f569","modified":1543676588847},{"_id":"public/tags/Node-js/index.html","hash":"3528809a4a93afc293e7e8eb67dc0ee6c8906a2b","modified":1543676588847},{"_id":"public/tags/MongoDB/index.html","hash":"295e37fdb7127c577c2a1c89b0859087f533f9ac","modified":1543676588847},{"_id":"public/tags/Sench-Cmd/index.html","hash":"85946c3f3af583a08c9017a3a2fb17d704d8cfd9","modified":1543676588848},{"_id":"public/tags/glyphs/index.html","hash":"8e8fa760bb26272759820cc58a780e22d136467e","modified":1543676588848},{"_id":"public/tags/icon-fonts/index.html","hash":"31d661d7d005340e3f55e1919a3f21e39f7a16dd","modified":1543676588848},{"_id":"public/tags/icons/index.html","hash":"d941579a546e3b92055d565c8595ea97c5a7c05e","modified":1543676588848},{"_id":"public/tags/Custom-fonts/index.html","hash":"7a569cb70ba013a95748a7f1cae7d3bcde193f98","modified":1543676588848},{"_id":"public/tags/Font-Face/index.html","hash":"8290f73969896e32be93a2aef09700dcb311001e","modified":1543676588848},{"_id":"public/tags/DLP-API/index.html","hash":"515724bc1ca84b41a4d994ff7d93ce0155a4d41e","modified":1543676588848},{"_id":"public/tags/GDPR/index.html","hash":"7781f304742e51da85f05cf0b79d76ebe04e41fc","modified":1543676588848},{"_id":"public/tags/Vision-API/index.html","hash":"66cbe3ef1a392d183c68b1729cf210c4993a5c76","modified":1543676588848},{"_id":"public/tags/Alexa/index.html","hash":"a223455d2ff4d46ff58e5a7a681701ea6f5cc97d","modified":1543676588848},{"_id":"public/tags/Chat-Agents/index.html","hash":"0fbdc20168506d320db78114e91f30e708e9d6cc","modified":1543676588848},{"_id":"public/tags/Chatbots/index.html","hash":"c1feb0ec8c447044d4d3a3f8d3ac1191ece04886","modified":1543676588848},{"_id":"public/tags/Google-Home/index.html","hash":"62758bbc7f6bb1292e5bc2bc251e190fb860c32d","modified":1543676588848},{"_id":"public/tags/Siri/index.html","hash":"a3e7acb7a7fbf7f3f1114b66e07d4cf07c011706","modified":1543676588849},{"_id":"public/tags/Video-Intelligence-API/index.html","hash":"4126d565ebfa86c2c77120d3f17261ae70fba82b","modified":1543676588849},{"_id":"public/tags/BigQuery/index.html","hash":"d4a20000554d9816e2b7712063e4c115c42fc580","modified":1543676588849},{"_id":"public/tags/App-Maker/index.html","hash":"33c5ce628271f9bb65afa40a9ce666ff64577ad8","modified":1543676588849},{"_id":"public/tags/app-templates/index.html","hash":"84a52184ba1c2213cfa55879049c59cd341337c5","modified":1543676588849},{"_id":"public/tags/boilerplate/index.html","hash":"f6be47c15785068a82f43aa7459ea874b060cfec","modified":1543676588849},{"_id":"public/tags/bootstrap/index.html","hash":"a49e47e16e8489ae37f4b30154fb27f412610b2d","modified":1543676588849},{"_id":"public/tags/templates/index.html","hash":"90ca1da54a381d15ed49cca93ac3838c348a2eb6","modified":1543676588849},{"_id":"public/tags/AutoML/index.html","hash":"086247eac65d6986749f9e12a05ef3fca118ba20","modified":1543676588849},{"_id":"public/tags/Apache-Ant/index.html","hash":"affe89828764e6b0477fc37ad4fff68fb2e4b63a","modified":1543676588849},{"_id":"public/tags/build-properties/index.html","hash":"d3440a23275ebc44b58ededb67c788d9af2900e5","modified":1543676588849},{"_id":"public/tags/build-scripts/index.html","hash":"1ea6c1a7ed45b2f0187459603921a8d47108222f","modified":1543676588850},{"_id":"public/tags/Sencha-CMD/index.html","hash":"16f50fa1261400406a86f0dbcad6989ab77e4d09","modified":1543676588850},{"_id":"public/tags/Sencha-Touch/index.html","hash":"3bb8839c1a916c45e1200505e74ed3d503ffb023","modified":1543676588850},{"_id":"public/tags/CSS/index.html","hash":"3dfa8e652963df7fb58677d3996787d8bfe84bb2","modified":1543676588850},{"_id":"public/tags/Pre-trained-Model/index.html","hash":"c82c1c65e99f1c5636f7a4140a8defd4756c50f1","modified":1543676588850},{"_id":"public/tags/Video-Intelligence-Api/index.html","hash":"f366da64f7bdcacd258ded89b6dcdbaa8c9bfe91","modified":1543676588850},{"_id":"public/tags/Hybrid/index.html","hash":"bb1d447515348b9c0379c993a5b6ef337182c6a8","modified":1543676588850},{"_id":"public/tags/Surface-Pro/index.html","hash":"2a245f792ee9d9414d59a17dafde39b349add5c9","modified":1543676588850},{"_id":"public/tags/Universal-App/index.html","hash":"0dda0edf3c4b456711228a1678d439072978dd4e","modified":1543676588851},{"_id":"public/tags/Desktop/index.html","hash":"22d1d52f105f4778151adc12916ea2ac3761e9c5","modified":1543676588851},{"_id":"public/tags/Mobile/index.html","hash":"9e670355b926c684946658d61c0bfa830078c497","modified":1543676588851},{"_id":"public/tags/Build-native-app/index.html","hash":"01e68d0231d45f6870f05fe4ebe17d651b4df5c5","modified":1543676588851},{"_id":"public/tags/hybrid-app/index.html","hash":"7b2dbe9c49af498457c21f01df4f3e6863b8d311","modified":1543676588851},{"_id":"public/tags/Sencha-Ant/index.html","hash":"0828ac342de9474a55a9f390e3d8764557c3e157","modified":1543676588851},{"_id":"public/tags/Sencha-Build/index.html","hash":"7c86dda8ddcf0be391ab4d3ef730b4690d987bc6","modified":1543676588851},{"_id":"public/tags/Utility-app/index.html","hash":"f7a093e764d218f1fac8fb2ae348cbd3750eb27e","modified":1543676588851},{"_id":"public/tags/Weather-app/index.html","hash":"ccac8ba272112e0342481f6277415b043bbe6fc8","modified":1543676588851},{"_id":"public/tags/Cloud-launcher/index.html","hash":"664aa99416f61830a505ae5b6d3d525f6c686b96","modified":1543676588851},{"_id":"public/tags/Compute-Engine/index.html","hash":"22f165a2dd1087dc7e2943e13d3d73a0d72942f5","modified":1543676588851},{"_id":"public/tags/GCP/index.html","hash":"f74628628f32e3de1c951ea01001183e3738ef29","modified":1543676588851},{"_id":"public/tags/Natural-Language-API/index.html","hash":"78643cc9b99fede4cf69dfa53e915be247253dff","modified":1543676588852},{"_id":"public/tags/Translate-API/index.html","hash":"e056fd4220ce23aab660e756f9673822b4f736d7","modified":1543676588852},{"_id":"public/tags/Virtual-Machines/index.html","hash":"d01dd4c67c49073a300db65a4eda621c65dc863d","modified":1543676588852},{"_id":"public/images/Screen-Shot-2017-04-10-at-4.57.56-PM.png","hash":"c7a71aaf1055a5414c733fc816a2b8d6f03a2c05","modified":1543676588880},{"_id":"public/images/Screen-Shot-2017-04-10-at-4.57.56-PM (1).png","hash":"c7a71aaf1055a5414c733fc816a2b8d6f03a2c05","modified":1543676588880},{"_id":"public/images/analyze-bq-ml-3.png","hash":"44843af1d58a8a98b11b226b3cd66f9b449b4fc3","modified":1543676588880},{"_id":"public/images/book.gif","hash":"6f5905ce49b5eeaedb92a64d4180271696b1298f","modified":1543676588880},{"_id":"public/images/automatedbuilds2-500x203.png","hash":"53ffd5545d19639e978c6b3559236c94189a1ee1","modified":1543676588880},{"_id":"public/images/automatedbuilds3-500x143.png","hash":"0b23445e100e15049f841eb60c8650945f9b9945","modified":1543676588880},{"_id":"public/images/build-universal-app-img18.png","hash":"a05cd008e1227b99c228a1e6c0221598d9aadc2c","modified":1543676588880},{"_id":"public/images/build-universal-app-img17.png","hash":"d3dd56d75e39c452a26b6a2121fc1077d8e60967","modified":1543676588881},{"_id":"public/images/docker-500x171.png","hash":"dc80bf71584b8f90da1cd085f3eb6a92279e7597","modified":1543676588881},{"_id":"public/images/build-universal-app-img4.png","hash":"10788408c334170a6e782df245317269df85a41f","modified":1543676588881},{"_id":"public/images/google-fonts-add.png","hash":"85acef4b249adef94de790fe85ef74538feaec53","modified":1543676588881},{"_id":"public/images/profile_small.jpg","hash":"e0b8b4083ddb1307b49ae38a339049ab277e6703","modified":1543676588881},{"_id":"public/images/sass-snippet.png","hash":"8c86d3682fc4c363e05d24933c43d67aff9a434a","modified":1543676588881},{"_id":"public/images/studio-500x281.jpg","hash":"1f0e1ea76c9e490937fcd1bcfae326c64b47ce8a","modified":1543676588881},{"_id":"public/images/sphero.jpg","hash":"230e93a5d537a0daf21883f4e5aef81fd6f52a3b","modified":1543676588881},{"_id":"public/images/profile.jpg","hash":"f48a4e6b660ab2bced90bfd1d06f33b67374209d","modified":1543676588882},{"_id":"public/images/weather-app-3-styling.png","hash":"8976c7c5f51339baa5b3a5cc154e14ac752fc173","modified":1543676588882},{"_id":"public/robot.txt","hash":"0062f52965da9d0b4f1fa7d37f36f694fe058587","modified":1543676588882},{"_id":"public/favicon.ico","hash":"7a2efacce4ea52357c6ed14cd35ac40a659c810c","modified":1543676588882},{"_id":"public/assets/fonts/Mathlete-Skinny-webfont.woff","hash":"f083c1facc24d6ff163cc45688ec1d2d97eb4631","modified":1543676588882},{"_id":"public/assets/fonts/Roboto-Bold-webfont.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1543676588882},{"_id":"public/assets/fonts/Roboto-Bold-webfont.woff","hash":"da4032f9e0a9753489a58f81bf02930ed6952e04","modified":1543676588882},{"_id":"public/assets/fonts/Roboto-Italic-webfont.ttf","hash":"9cac18f017f304fb6b52634965beb87933210daa","modified":1543676588882},{"_id":"public/assets/fonts/Roboto-Regular-webfont.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1543676588882},{"_id":"public/assets/fonts/Roboto-Regular-webfont.woff","hash":"99d93e1e3636f86c85b0c7c4da2077b4f1ee010c","modified":1543676588882},{"_id":"public/assets/fonts/Roboto-Italic-webfont.woff","hash":"fc9e3d9b5a34951a7ad3e461120fa6316c3b754a","modified":1543676588883},{"_id":"public/assets/fonts/bebasneue-webfont.eot","hash":"117e85a2ca6fbf68d4078b3f9b658d855ef313f7","modified":1543676588883},{"_id":"public/assets/fonts/bebasneue-webfont.ttf","hash":"6cd405d21a8d5810a2ed5408b4cf9d6e700b0713","modified":1543676588883},{"_id":"public/assets/fonts/Roboto-Regular-webfont.ttf","hash":"f707e98ad2f7cbe937d14537428630faba9a1d33","modified":1543676588883},{"_id":"public/assets/fonts/bebasneue-webfont.woff","hash":"03c49a83a44d4f1a3414a33b26d3974c910f2dd0","modified":1543676588883},{"_id":"public/assets/fonts/bebasneue-webfont.woff2","hash":"8415365c4180f9ba8def5b620ee0800314712f22","modified":1543676588883},{"_id":"public/assets/fonts/icomoon.woff","hash":"e5dcab64bedb551944900f19ad9054bccc1bf7b9","modified":1543676588883},{"_id":"public/assets/fonts/icomoon.eot","hash":"c70c654e84f8889e12197e0ca7580b18a4a87c60","modified":1543676588883},{"_id":"public/assets/fonts/icomoon.svg","hash":"344e1e001507c9a6f9f3d075c45519456e061e72","modified":1543676588883},{"_id":"public/assets/fonts/icomoon.ttf","hash":"d3d2ceac7d9ee9749c02f359290b8bfa8cbc5487","modified":1543676588883},{"_id":"public/assets/fonts/oswald-regular-webfont.eot","hash":"c587d78f2bd7345d03e8f8f3763ec20b40a06ddd","modified":1543676588883},{"_id":"public/assets/fonts/oswald-regular-webfont.ttf","hash":"cbdd989061ff5a31e6c48eeb3782730c09619be3","modified":1543676588884},{"_id":"public/assets/fonts/oswald-regular-webfont.svg","hash":"0863fe2437e32ab08a403f38391ae6f54c35c9c5","modified":1543676588884},{"_id":"public/assets/fonts/oswald-regular-webfont.woff","hash":"64bad5b2e85694e46ee74a8b05805ae1344645de","modified":1543676588884},{"_id":"public/assets/fonts/Mathlete-Skinny-webfont.eot","hash":"e129b8e5c30ac74199c036c6b5cc7f5c0ef36e57","modified":1543676588884},{"_id":"public/assets/fonts/Mathlete-Skinny-webfont.ttf","hash":"54a7df4fe2b3cf59a4155ae051fe75378bd73fc2","modified":1543676588884},{"_id":"public/assets/fonts/Roboto-Bold-webfont.ttf","hash":"e1f98df0753298737a59d10ee3d276daf166c052","modified":1543676588884},{"_id":"public/assets/fonts/Roboto-Italic-webfont.eot","hash":"6e916ced854bbddc1711b2d54bbbae56bece0b6f","modified":1543676588884},{"_id":"public/images/ExtJS6-demo-app-500x206.png","hash":"c90a752adc1793231ec15c0aeac1a97e54271892","modified":1543676588912},{"_id":"public/images/weather-app-3-styling2.png","hash":"8976c7c5f51339baa5b3a5cc154e14ac752fc173","modified":1543676588962},{"_id":"public/images/weather-app-2-styling.png","hash":"42855ddd344b818eb282501e75fc75847f6ac7ae","modified":1543676589025},{"_id":"public/images/analyze-bq-ml-2-500x250.png","hash":"e9a143ebf58ef41e4b71d82f5d9aa6b5a7ec6ca1","modified":1543676589026},{"_id":"public/images/authorize-500x345.png","hash":"4d39cd93c103456e1ca7f4d904274b63bc296c05","modified":1543676589026},{"_id":"public/images/analyze-bq-ml-1-500x300.png","hash":"6ac1421863825e5f400653e27ce116ff9bf355d5","modified":1543676589026},{"_id":"public/images/DockerHub-500x347.png","hash":"95db94782cdd7f560842e92210c8cdd1bbcd3ac6","modified":1543676589026},{"_id":"public/images/automatedbuilds1-500x280.png","hash":"96bfff52e3c16946d40b0ca2b27b987aa452acb2","modified":1543676589026},{"_id":"public/images/apptemplate-500x270.png","hash":"899b9973e31c117a8f60f99c6971481c1440a814","modified":1543676589026},{"_id":"public/images/analyze-bq-ml-4-500x166.png","hash":"3495798af76e31b398d34244909e857d6bc1d82d","modified":1543676589026},{"_id":"public/images/mobile.png","hash":"973953e4010506e6564840934cfd53e00b1b594c","modified":1543676589026},{"_id":"public/images/google-fonts.png","hash":"6877b3ddb1b747623fbbc6ccf4feac4fb389a110","modified":1543676589027},{"_id":"public/images/d3-spotifinder-500x217.png","hash":"96630761066a119727d95c12fa06c9978d4a0ef6","modified":1543676589027},{"_id":"public/images/postman-1024x302.png","hash":"1b895d59216ae1e76fa0a50024b4c9c1b049c376","modified":1543676589027},{"_id":"public/images/weather-app-1-build.png","hash":"64e23292e8e821aa203f72ded281ff54817a5b52","modified":1543676589027},{"_id":"public/images/sp4-500x326.png","hash":"9d4a7db7c8fdff9aeebb2b92810b8626e38e9bd2","modified":1543676589027},{"_id":"public/images/weather-app-1.png","hash":"c10fa20ed3a2db290e4447dcfc55ea0b560194a2","modified":1543676589027},{"_id":"public/images/weather-app-2-files.png","hash":"146c826dea4f7d20e3d4405122a0ccac57da2c5a","modified":1543676589027},{"_id":"public/images/weather-app-2.png","hash":"3ed641ef7d854f6951479c5f9effb56596b03cc3","modified":1543676589027},{"_id":"public/images/weather-app-3.png","hash":"efb11a9e60bda15acefdc5e9fac82923522e2a12","modified":1543676589027},{"_id":"public/assets/fonts/Mathlete-Skinny-webfont.svg","hash":"11789f3df5fab8981bf515a4179b4683f86dad94","modified":1543676589028},{"_id":"public/assets/fonts/Roboto-Bold-webfont.svg","hash":"fbb46da1ccda54b4b5b84287598fa92cf4873ced","modified":1543676589028},{"_id":"public/assets/fonts/Roboto-Italic-webfont.svg","hash":"614e6f94621584e89db09d044f0a10d8d521e289","modified":1543676589028},{"_id":"public/assets/fonts/Roboto-Regular-webfont.svg","hash":"74658e8062c2306d57a3885d55831ad2e2841c0d","modified":1543676589028},{"_id":"public/assets/fonts/bebasneue-webfont.svg","hash":"f5813bb53e70db2a83250e48ca7655e245babf23","modified":1543676589028},{"_id":"public/assets/fonts/consolas-webfont.ttf","hash":"7eee4196ec2374184994e06301ecc35572cc24ca","modified":1543676589028},{"_id":"public/assets/fonts/consolas-webfont.svg","hash":"af73b069b43922f21a4adda465d621ea3aaa726e","modified":1543676589028},{"_id":"public/assets/fonts/consolas-webfont.eot","hash":"a1a999e810cdab680b73dc1955b6fbb5b4a47242","modified":1543676589028},{"_id":"public/assets/fonts/consolas-webfont.woff","hash":"2e561a091ef5ac5fb8b1c07a866674aebd674c4b","modified":1543676589028},{"_id":"public/manifest.json","hash":"b1091c14ce6b1d453b12f27170f69c98d729833e","modified":1543676589046},{"_id":"public/cache-pf.js","hash":"5a54765746edff4a53932e1552dc5941d8b7817f","modified":1543676589064},{"_id":"public/serviceworker.js","hash":"870fcf76e33546fd0ede183f327b2d39aaade714","modified":1543676589180},{"_id":"public/assets/js/main.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543676589180},{"_id":"public/assets/js/disqus-lazy-min.js","hash":"7df86cc1c5fb9bdc6492be799bebcca8a3d0e7a4","modified":1543676589181},{"_id":"public/images/build-universal-app-img11.png","hash":"b3ecccf8f1d1eb6c9ee8f39bad42c217d6fb4ce0","modified":1543676589181},{"_id":"public/images/compile-order.png","hash":"5e8d0fc5abae57c2df2d9a20fce1fd875c83d776","modified":1543676589181},{"_id":"public/images/build-universal-app-img15.png","hash":"acfa76d4827546091895efe2f4140fce1ad85176","modified":1543676589181},{"_id":"public/assets/styles/print.css","hash":"7cdddb4bbb5c26c134312f0352b6206b63e980fb","modified":1543676589192},{"_id":"public/assets/js/vendor/modernizr-3.6.0.min.js","hash":"6acbe840174ed67d4da9294470bcd4ce0ad056bb","modified":1543676589235},{"_id":"public/images/desktop-1024x490.png","hash":"909b809147eb76f75d07fffe5d815772cd588e61","modified":1543676589418},{"_id":"public/images/weather-app-6.png","hash":"a730b89b45e20a606f0b8da870363ea9b9d14a62","modified":1543676589418},{"_id":"public/images/weather-app-5.png","hash":"a6cb599fee298945e2a4e0e629055916aaba5aaa","modified":1543676589419},{"_id":"public/images/build-universal-app-img5.png","hash":"cc38143218d8500e60042e38e8029446c244b82a","modified":1543676589419},{"_id":"public/images/weather-app-1-docs.png","hash":"33b2fa3d7f61e9acd920940c28dacd9d68a0d78b","modified":1543676589419},{"_id":"public/images/weather-app-4.png","hash":"2ba1685d7aa2d93e35d93bcc0b32c1b24e916833","modified":1543676589420},{"_id":"public/assets/js/vendor/popper.min.js","hash":"902bdb3a917ffd9575eeadd7c1b24f13b01dc069","modified":1543676589429},{"_id":"public/images/build-universal-app-img14.png","hash":"e93443dd387a11d13fb52fdc2ab04fdc8ad815df","modified":1543676589429},{"_id":"public/images/compose-500x494 (1).png","hash":"be3cc9b9f12c5603933145023de81953101ea97b","modified":1543676589429},{"_id":"public/images/leeboonstra-speaker-500x351.png","hash":"5a8f79ccd1d4b66de5ea4c3ed1d536126db21c51","modified":1543676589429},{"_id":"public/images/compose-500x494.png","hash":"be3cc9b9f12c5603933145023de81953101ea97b","modified":1543676589433},{"_id":"public/images/build-universal-app-img12-1024x430.png","hash":"78c6af2ff05cadea0dd003ef3e4211413ec27a9b","modified":1543676589433},{"_id":"public/images/build-universal-app-img1.png","hash":"82c55745d177c9698ec1d0a6958df98d3058f6a6","modified":1543676589433},{"_id":"public/images/build-universal-app-img3.png","hash":"919db2eb05b07f1613b043042515837901aa8563","modified":1543676589434},{"_id":"public/images/build-universal-app-img10-1024x508.png","hash":"e5ae1eb0e94798fa375232299c21ea258aa6a68b","modified":1543676589457},{"_id":"public/images/build-universal-app-img16-1024x433.png","hash":"59bd6ad9970a16598f14b23a1c27449ba4f75936","modified":1543676589457},{"_id":"public/images/build-universal-app-img7-1024x483.png","hash":"6e62de12164f454d3e7fa4f2a73a42fdd6c5d884","modified":1543676589463},{"_id":"public/images/preview.png","hash":"71f932846c2111f91743489065f9dc15756e02de","modified":1543676589463},{"_id":"public/images/build-universal-app-img9-1024x590.png","hash":"d1986d3fb8d27ab2249dabbe1c089ab70b16091c","modified":1543676589483},{"_id":"public/images/build-universal-app-img9-1024x590 (1).png","hash":"d1986d3fb8d27ab2249dabbe1c089ab70b16091c","modified":1543676589488},{"_id":"public/assets/js/vendor/bootstrap.min.js","hash":"acf64a7d907b0ffaa8be36560140cdcb766b64b8","modified":1543676590108},{"_id":"public/images/10yearsold-500x326.png","hash":"6af0818782c0b8ebead5acecfcc700faa369b8a9","modified":1543676590108},{"_id":"public/images/build-universal-app-img13-1024x601.png","hash":"8dbd25ec7910d67390ad7c34656ac24b7bf20589","modified":1543676590108},{"_id":"public/images/build-universal-app-img8-1024x572.png","hash":"a72aba4dbf0f0f85862b09008444749ec6737849","modified":1543676590117},{"_id":"public/assets/js/vendor/jquery-3.3.1.min.js","hash":"b44ceb85caa43c8ad045ff9afd96a6d576c3c271","modified":1543676590813},{"_id":"public/images/leeboonstra-book.png","hash":"88139ac882368daad315b73ccce4c1eb00eed288","modified":1543676590813},{"_id":"public/images/build-universal-app-img2.png","hash":"d5a18946aa49b74dc86e7fa37c735cc653348d8e","modified":1543676590816},{"_id":"public/images/lee.boonstra-resume.pdf","hash":"8444955d4ccfeed2afdffc5d38c8e9a050967589","modified":1543676590819},{"_id":"public/images/build-universal-app-img6.gif","hash":"c9d4a95349d18a126ed5e7833a5b90e25d3f3647","modified":1543676590823},{"_id":"public/assets/styles/main.css","hash":"c70c01826b485d4f926266cf82e8c08491e0de77","modified":1543676591570}],"Category":[{"name":"JavaScript","_id":"cjp5jncnn0005kif5g3xijci4"},{"name":"Bots","_id":"cjp5jncnu000bkif5v8774kl8"},{"name":"Ext JS","_id":"cjp5jncnx000gkif58r8so7mz"},{"name":"Robotics","_id":"cjp5jnco0000nkif5y83uh5mo"},{"name":"Sencha CMD","_id":"cjp5jnco7000xkif5mbb2wnox"},{"name":"Theming","_id":"cjp5jnco90015kif5jsiascod"},{"name":"Django","_id":"cjp5jncoc001dkif5mah64226"},{"name":"Cordova","_id":"cjp5jncog001pkif5zkpeijar"},{"name":"Sencha","_id":"cjp5jncoi001vkif51219kqak"},{"name":"Videos","_id":"cjp5jncol0022kif5hv8esfgh"},{"name":"App Cache","_id":"cjp5jncos002kkif5md2xowv2"},{"name":"Containers","_id":"cjp5jncov002tkif53lh1fvco"},{"name":"Sencha Architect","_id":"cjp5jncp8003tkif59aed2gf4"},{"name":"Sencha Touch","_id":"cjp5jncqu009mkif5et2hvz00"},{"name":"Machine Learning","_id":"cjp5jncqx009skif52ag2uo58"},{"name":"Cmd","_id":"cjp5jncs700bwkif5x64h6l89"},{"name":"Environment","_id":"cjp5jncsa00c3kif5tpazfhb3"},{"name":"Questions","_id":"cjp5jncse00c7kif5pb9k8zlx"},{"name":"Environment","parent":"cjp5jncs700bwkif5x64h6l89","_id":"cjp5jncsh00cekif5z4q40wh9"},{"name":"Uncategorized","_id":"cjp5jncsl00clkif5qzorrdcq"},{"name":"Node JS","parent":"cjp5jncnn0005kif5g3xijci4","_id":"cjp5jncso00ctkif5rmvaez9s"},{"name":"Ext JS 5 &amp; 6","_id":"cjp5jncsq00d1kif51nyp4ids"},{"name":"Ext JS 6","_id":"cjp5jncsv00dfkif5gahz1tv7"},{"name":"Ext JS","parent":"cjp5jncsh00cekif5z4q40wh9","_id":"cjp5jnct000dqkif5bxg8r1nu"},{"name":"Ext JS 5 &amp; 6","parent":"cjp5jncog001pkif5zkpeijar","_id":"cjp5jnct300dwkif56w8xi0ay"},{"name":"Sencha","parent":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jnctd00epkif5tdq8n8ka"},{"name":"Questions","parent":"cjp5jncsq00d1kif51nyp4ids","_id":"cjp5jnctf00ewkif59semgmhf"},{"name":"Git","parent":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncth00f1kif5hwkw28yb"},{"name":"Sublime Text","parent":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jnctl00fbkif5pfnkdcpi"},{"name":"CSS","_id":"cjp5jnctq00fnkif5vglz4eam"},{"name":"Sencha Touch","parent":"cjp5jncsv00dfkif5gahz1tv7","_id":"cjp5jnctv00g3kif5x3xwe6rm"},{"name":"Sencha Touch","parent":"cjp5jncse00c7kif5pb9k8zlx","_id":"cjp5jncty00gckif5en1yhick"},{"name":"Ext JS 6","parent":"cjp5jncsq00d1kif51nyp4ids","_id":"cjp5jncu400gkkif5gz40fvjw"},{"name":"Git","_id":"cjp5jncuf00h4kif5im35o5fo"},{"name":"Questions","parent":"cjp5jnct300dwkif56w8xi0ay","_id":"cjp5jncuh00hakif59q17nixv"},{"name":"Sencha Test","parent":"cjp5jncse00c7kif5pb9k8zlx","_id":"cjp5jncup00hxkif56kv1frag"},{"name":"Architect","_id":"cjp5jncv600iykif5rlnoejcf"},{"name":"Ext JS 5","parent":"cjp5jnct000dqkif5bxg8r1nu","_id":"cjp5jncvf00jmkif5esvc96v7"},{"name":"Sencha Touch","parent":"cjp5jncoi001vkif51219kqak","_id":"cjp5jncvi00jukif50o6oe03c"},{"name":"GXT","_id":"cjp5jncvl00k3kif5mmghpioz"},{"name":"Node JS","parent":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncvn00kckif5itx435fz"},{"name":"Sass","parent":"cjp5jncsv00dfkif5gahz1tv7","_id":"cjp5jncvo00kikif587p1ggop"},{"name":"Sass","parent":"cjp5jnctq00fnkif5vglz4eam","_id":"cjp5jncvp00kokif5fbgrhtf9"},{"name":"Ext JS 5 &amp; 6","parent":"cjp5jncnx000gkif58r8so7mz","_id":"cjp5jncvp00kukif56bxupdt3"},{"name":"Ext JS 5","_id":"cjp5jncvr00kykif5rp6ppvr0"},{"name":"jQuery","parent":"cjp5jncnx000gkif58r8so7mz","_id":"cjp5jncvr00l2kif5h0cpuk7a"},{"name":"Questions","parent":"cjp5jncu400gkkif5gz40fvjw","_id":"cjp5jncvt00ldkif54eyk52vu"},{"name":"SVN","_id":"cjp5jncvu00lkkif5u710mbwv"},{"name":"Sencha Touch","parent":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncvu00lokif52j960pz9"},{"name":"Sencha Components","_id":"cjp5jncvy00mdkif52p3z19l5"},{"name":"Jasmine","parent":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncvz00mikif5ue7v59oq"},{"name":"JavaScript","parent":"cjp5jncnx000gkif58r8so7mz","_id":"cjp5jncw000mokif5d4ottgwy"},{"name":"Ext JS","parent":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncw100mukif5gczp8imn"},{"name":"Sass","_id":"cjp5jncw100n0kif5101rl5ah"},{"name":"Unix","parent":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncw300n7kif55j7wq0s6"},{"name":"ES2015","parent":"cjp5jncsh00cekif5z4q40wh9","_id":"cjp5jncw300nbkif5e77lwmio"},{"name":"Questions","parent":"cjp5jncv600iykif5rlnoejcf","_id":"cjp5jncw500nfkif5nrfiknug"},{"name":"Sencha","parent":"cjp5jncnx000gkif58r8so7mz","_id":"cjp5jncw700nokif5rvf6n1o2"},{"name":"Node JS","_id":"cjp5jncw900nykif5c77096hk"},{"name":"Ext JS 6","parent":"cjp5jncvf00jmkif5esvc96v7","_id":"cjp5jncwa00o5kif5fx4gek27"},{"name":"TDD","parent":"cjp5jncup00hxkif56kv1frag","_id":"cjp5jncwc00odkif51taqe0o6"},{"name":"Sencha","parent":"cjp5jncvo00kikif587p1ggop","_id":"cjp5jncwd00okkif55z42lqqg"},{"name":"Sencha","parent":"cjp5jncvp00kokif5fbgrhtf9","_id":"cjp5jncwe00ookif5btvb8xj8"},{"name":"Questions","parent":"cjp5jncvp00kukif56bxupdt3","_id":"cjp5jncwg00oukif5adsew9ap"},{"name":"Sencha","parent":"cjp5jncvr00kykif5rp6ppvr0","_id":"cjp5jncwh00oykif5jzq9vy5j"},{"name":"Sencha Touch","parent":"cjp5jncvy00mdkif52p3z19l5","_id":"cjp5jncwj00pakif5d9r73adu"},{"name":"TDD","parent":"cjp5jncvz00mikif5ue7v59oq","_id":"cjp5jncwk00pgkif5c2vtmbix"},{"name":"Sencha","parent":"cjp5jncw000mokif5d4ottgwy","_id":"cjp5jncwl00pkkif565jjx7qm"},{"name":"Jasmine","parent":"cjp5jncw100mukif5gczp8imn","_id":"cjp5jncwm00pqkif5h7mgajne"},{"name":"Sencha Touch","parent":"cjp5jncw700nokif5rvf6n1o2","_id":"cjp5jncwo00q1kif5jtw34aya"},{"name":"Sencha","parent":"cjp5jncw100mukif5gczp8imn","_id":"cjp5jncwp00q6kif5hllzqles"},{"name":"Sencha Touch","parent":"cjp5jncwe00ookif5btvb8xj8","_id":"cjp5jncwp00qakif509sdzriq"},{"name":"Sencha Components","parent":"cjp5jncwl00pkkif565jjx7qm","_id":"cjp5jncwq00qgkif5122000wg"},{"name":"TDD","parent":"cjp5jncwm00pqkif5h7mgajne","_id":"cjp5jncwr00qkkif5lxn9vjov"},{"name":"Sencha Touch","parent":"cjp5jncwp00q6kif5hllzqles","_id":"cjp5jncws00qokif52a9gxx7o"},{"name":"Sencha Touch","parent":"cjp5jncwq00qgkif5122000wg","_id":"cjp5jncws00qukif566wpmghe"},{"name":"TDD","parent":"cjp5jncws00qukif566wpmghe","_id":"cjp5jncwu00r1kif57723qfug"},{"name":"Google Cloud Platform","_id":"cjp5jncz300zvkif5wj49rod6"},{"name":"Ext JS","parent":"cjp5jncs700bwkif5x64h6l89","_id":"cjp5jncz70100kif5ebpkiuw3"},{"name":"Ext JS 5","parent":"cjp5jncw100mukif5gczp8imn","_id":"cjp5jnczb0106kif5pqju5ke1"},{"name":"Ext JS 5","parent":"cjp5jncz70100kif5ebpkiuw3","_id":"cjp5jncze010ckif5a3skcdz1"},{"name":"Cmd","parent":"cjp5jncv600iykif5rlnoejcf","_id":"cjp5jnczj010ikif5rs27kf6m"},{"name":"Ext JS 6","parent":"cjp5jnczb0106kif5pqju5ke1","_id":"cjp5jnczk010mkif5id0gwa6z"},{"name":"ES2015","_id":"cjp5jnczl010rkif515985vxf"},{"name":"Ext JS 6","parent":"cjp5jncze010ckif5a3skcdz1","_id":"cjp5jnczn010vkif5el5mxxma"},{"name":"Environment","parent":"cjp5jnczj010ikif5rs27kf6m","_id":"cjp5jnczo010zkif5jsfkhd5z"},{"name":"Node JS","parent":"cjp5jnczk010mkif5id0gwa6z","_id":"cjp5jnczp0114kif54l77ww4g"},{"name":"JavaScript","parent":"cjp5jnczl010rkif515985vxf","_id":"cjp5jnczq0119kif576fo5383"},{"name":"Ext JS","parent":"cjp5jnczo010zkif5jsfkhd5z","_id":"cjp5jnczr011fkif5jn9d6zoh"},{"name":"Ext JS 5","parent":"cjp5jnczr011fkif5jn9d6zoh","_id":"cjp5jnczs011nkif5ojnbmad7"},{"name":"Ext JS 6","parent":"cjp5jnczs011nkif5ojnbmad7","_id":"cjp5jnczu011skif5874jx017"},{"name":"Git","parent":"cjp5jnczu011skif5874jx017","_id":"cjp5jnczv011vkif51sy36wjv"},{"name":"Jasmine","parent":"cjp5jnczv011vkif51sy36wjv","_id":"cjp5jnczx011ykif5xc6pvkso"},{"name":"Sencha","parent":"cjp5jnczx011ykif5xc6pvkso","_id":"cjp5jnczy0125kif5jr1hpm64"},{"name":"TDD","parent":"cjp5jnczy0125kif5jr1hpm64","_id":"cjp5jnczz012akif5knozxc40"}],"Data":[{"_id":"menu","data":{"links":{"Home":"/","Contact Us":"contact-us/"}}}],"Page":[{"layout":"page","title":"404 Page Not Found","comments":0,"_content":"\nOops, the page could not be found.","source":"404.md","raw":"---\nlayout: page\ntitle: 404 Page Not Found\ncomments: false\n---\n\nOops, the page could not be found.","date":"2018-11-25T14:38:20.088Z","updated":"2018-11-25T14:38:20.088Z","path":"404.html","_id":"cjp5jnclo0000kif5lgxkiewn","content":"<p>Oops, the page could not be found.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Oops, the page could not be found.</p>\n"},{"title":"About me","date":"2015-07-06T18:44:54.000Z","_content":"\n> “I love creating technology, instead of just consuming technology.”\n\nI’m [Lee Boonstra](https://plus.google.com/117712452932146916020) from the Netherlands and I work for Google. as a Google Cloud sales engineer.\n\nI studied Art & Technology in 2004 and during my last year of my study I worked for Accenture as a senior Java developer. I worked for clients such as UPC and KLM (Dutch Royal Airlines).\n\nAlthough I really liked it, after 3 years I decided to make the move to the front-end. I think it’s advantageous to understand back-end technologies while working on the front-end. I’m a creative person and I like to have a nice workflow and see my changes directly on the screen. That’s why I worked before Sencha, as a teamlead at a creative agency in the Netherlands where we created (mobile) websites and apps for clients such as Heineken and Philips.\n\nStarted my own webdev company when I was 19 years old. It was called: \"Ladysign\" (Why that name? When you would pronounce this in Dutch it sounds like: \"Lee Design\").\n\nI love technology. Especially Web. - JavaScript, Node JS, Ext JS, Sencha Touch, Google Cloud, App Engine, API.AI MongoDB, Angular2, HTML5, Sass, CSS, Python, Django, Cordova ...)\n\nAlso I wrote a book for O'Reilly about Sencha Touch and occasionally I’m doing book reviews about Sencha Technologies.\n\nBeside technology I love (alternative) music and I’m a videogames addict.\n\n* [Here's my resume: Lee Boonstra CV](/images/lee.boonstra-resume.pdf)\n\n<img src=\"/images/10yearsold-500x326.png\" class=\"border\">\n\n*This is me at 10 years old. Who can guess the video game I'm playing?*","source":"about/index.md","raw":"---\ntitle: About me\ndate: 2015-07-06 20:44:54\n---\n\n> “I love creating technology, instead of just consuming technology.”\n\nI’m [Lee Boonstra](https://plus.google.com/117712452932146916020) from the Netherlands and I work for Google. as a Google Cloud sales engineer.\n\nI studied Art & Technology in 2004 and during my last year of my study I worked for Accenture as a senior Java developer. I worked for clients such as UPC and KLM (Dutch Royal Airlines).\n\nAlthough I really liked it, after 3 years I decided to make the move to the front-end. I think it’s advantageous to understand back-end technologies while working on the front-end. I’m a creative person and I like to have a nice workflow and see my changes directly on the screen. That’s why I worked before Sencha, as a teamlead at a creative agency in the Netherlands where we created (mobile) websites and apps for clients such as Heineken and Philips.\n\nStarted my own webdev company when I was 19 years old. It was called: \"Ladysign\" (Why that name? When you would pronounce this in Dutch it sounds like: \"Lee Design\").\n\nI love technology. Especially Web. - JavaScript, Node JS, Ext JS, Sencha Touch, Google Cloud, App Engine, API.AI MongoDB, Angular2, HTML5, Sass, CSS, Python, Django, Cordova ...)\n\nAlso I wrote a book for O'Reilly about Sencha Touch and occasionally I’m doing book reviews about Sencha Technologies.\n\nBeside technology I love (alternative) music and I’m a videogames addict.\n\n* [Here's my resume: Lee Boonstra CV](/images/lee.boonstra-resume.pdf)\n\n<img src=\"/images/10yearsold-500x326.png\" class=\"border\">\n\n*This is me at 10 years old. Who can guess the video game I'm playing?*","updated":"2018-11-30T19:18:45.937Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjp5jncng0002kif5gvotpsrp","content":"<blockquote>\n  <p>“I love creating technology, instead of just consuming technology.”</p>\n</blockquote>\n<p>I’m <a href=\"https://plus.google.com/117712452932146916020\" target=\"_blank\" rel=\"noopener\">Lee Boonstra</a>\n  from the Netherlands and I work for Google. as a Google Cloud sales engineer.</p>\n<p>I studied Art &amp; Technology in 2004 and during my last year of my study I\n  worked for Accenture as a senior Java developer. I worked for clients such as\n  UPC and KLM (Dutch Royal Airlines).</p>\n<p>Although I really liked it, after 3 years I decided to make the move to the\n  front-end. I think it’s advantageous to understand back-end technologies\n  while working on the front-end. I’m a creative person and I like to have a\n  nice workflow and see my changes directly on the screen. That’s why I worked\n  before Sencha, as a teamlead at a creative agency in the Netherlands where we\n  created (mobile) websites and apps for clients such as Heineken and Philips.</p>\n<p>Started my own webdev company when I was 19 years old. It was called:\n  “Ladysign” (Why that name? When you would pronounce this in Dutch it sounds\n  like: “Lee Design”).</p>\n<p>I love technology. Especially Web. - JavaScript, Node JS, Ext JS, Sencha\n  Touch, Google Cloud, App Engine, API.AI MongoDB, Angular2, HTML5, Sass, CSS,\n  Python, Django, Cordova …)</p>\n<p>Also I wrote a book for O’Reilly about Sencha Touch and occasionally I’m\n  doing book reviews about Sencha Technologies.</p>\n<p>Beside technology I love (alternative) music and I’m a videogames addict.</p>\n<ul>\n  <li><a href=\"/images/lee.boonstra-resume.pdf\">Here’s my resume: Lee Boonstra\n      CV</a></li>\n</ul>\n<p><img src=\"/images/10yearsold-500x326.png\" class=\"border\"></p>\n<p><em>This is me at 10 years old. Who can guess the video game I’m playing?</em></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<blockquote>\n  <p>“I love creating technology, instead of just consuming technology.”</p>\n</blockquote>\n<p>I’m <a href=\"https://plus.google.com/117712452932146916020\" target=\"_blank\" rel=\"noopener\">Lee Boonstra</a>\n  from the Netherlands and I work for Google. as a Google Cloud sales engineer.</p>\n<p>I studied Art &amp; Technology in 2004 and during my last year of my study I\n  worked for Accenture as a senior Java developer. I worked for clients such as\n  UPC and KLM (Dutch Royal Airlines).</p>\n<p>Although I really liked it, after 3 years I decided to make the move to the\n  front-end. I think it’s advantageous to understand back-end technologies\n  while working on the front-end. I’m a creative person and I like to have a\n  nice workflow and see my changes directly on the screen. That’s why I worked\n  before Sencha, as a teamlead at a creative agency in the Netherlands where we\n  created (mobile) websites and apps for clients such as Heineken and Philips.</p>\n<p>Started my own webdev company when I was 19 years old. It was called:\n  “Ladysign” (Why that name? When you would pronounce this in Dutch it sounds\n  like: “Lee Design”).</p>\n<p>I love technology. Especially Web. - JavaScript, Node JS, Ext JS, Sencha\n  Touch, Google Cloud, App Engine, API.AI MongoDB, Angular2, HTML5, Sass, CSS,\n  Python, Django, Cordova …)</p>\n<p>Also I wrote a book for O’Reilly about Sencha Touch and occasionally I’m\n  doing book reviews about Sencha Technologies.</p>\n<p>Beside technology I love (alternative) music and I’m a videogames addict.</p>\n<ul>\n  <li><a href=\"/images/lee.boonstra-resume.pdf\">Here’s my resume: Lee Boonstra\n      CV</a></li>\n</ul>\n<p><img src=\"/images/10yearsold-500x326.png\" class=\"border\"></p>\n<p><em>This is me at 10 years old. Who can guess the video game I’m playing?</em></p>\n"},{"title":"Writing","date":"2015-07-06T18:46:06.000Z","_content":"\nBeside writing this blog, I’ve also published my work elsewhere. Below is a list of my publications:\n\n*   Various official Sencha blogs\n    -----------------------------\n    \n    2016 | **Sencha** | [Link](http://www.sencha.com/blog/)\n    \n*   Hands-on Sencha Touch 2\n    -----------------------\n    \n    05-2014 | **O'Reilly** | [Link](http://shop.oreilly.com/product/0636920030058.do)\n\n    <script type=\"application/ld+json\">\n    {\n      \"@context\": \"http://schema.org\",\n      \"@type\": \"WebPage\",\n      \"mainEntity\":{\n              \"@type\": \"Book\",\n              \"author\": \"https://www.oreilly.com/pub/au/6134\",\n              \"datePublished\": \"2014-07-01\",\n              \"image\": \"https://covers.oreillystatic.com/images/0636920030058/lrg.jpg\",\n              \"inLanguage\": \"English\",\n              \"isbn\": \"978-1449366520\",\n              \"name\": \"Hands-On Sencha Touch 2\",\n              \"numberOfPages\": \"332\",\n              \"publisher\": \"O'Reilly Media\"\n            }\n    }</script>\n    \n*   .Net Magazine #247 - Sencha Touch tutorial\n    ------------------------------------------\n    \n    10-2013 | **Future Plc**\n    \n\n\n<hr>\n\n<img src=\"/images/leeboonstra-book.png\" width=\"500\" class=\"border\" alt=\"Lee Boonstra Author\"/>\n\nRead my **Girls In Tech spotlight interview** at [CodePanCake](http://www.codepancake.com/spotlight-49-meet-sales-engineer-lee-boonstra/)\n\n","source":"writing/index.md","raw":"---\ntitle: Writing\ndate: 2015-07-06 20:46:06\n---\n\nBeside writing this blog, I’ve also published my work elsewhere. Below is a list of my publications:\n\n*   Various official Sencha blogs\n    -----------------------------\n    \n    2016 | **Sencha** | [Link](http://www.sencha.com/blog/)\n    \n*   Hands-on Sencha Touch 2\n    -----------------------\n    \n    05-2014 | **O'Reilly** | [Link](http://shop.oreilly.com/product/0636920030058.do)\n\n    <script type=\"application/ld+json\">\n    {\n      \"@context\": \"http://schema.org\",\n      \"@type\": \"WebPage\",\n      \"mainEntity\":{\n              \"@type\": \"Book\",\n              \"author\": \"https://www.oreilly.com/pub/au/6134\",\n              \"datePublished\": \"2014-07-01\",\n              \"image\": \"https://covers.oreillystatic.com/images/0636920030058/lrg.jpg\",\n              \"inLanguage\": \"English\",\n              \"isbn\": \"978-1449366520\",\n              \"name\": \"Hands-On Sencha Touch 2\",\n              \"numberOfPages\": \"332\",\n              \"publisher\": \"O'Reilly Media\"\n            }\n    }</script>\n    \n*   .Net Magazine #247 - Sencha Touch tutorial\n    ------------------------------------------\n    \n    10-2013 | **Future Plc**\n    \n\n\n<hr>\n\n<img src=\"/images/leeboonstra-book.png\" width=\"500\" class=\"border\" alt=\"Lee Boonstra Author\"/>\n\nRead my **Girls In Tech spotlight interview** at [CodePanCake](http://www.codepancake.com/spotlight-49-meet-sales-engineer-lee-boonstra/)\n\n","updated":"2018-11-25T11:14:24.292Z","path":"writing/index.html","comments":1,"layout":"page","_id":"cjp5jncnm0004kif5ilnkoorc","content":"<p>Beside writing this blog, I’ve also published my work elsewhere. Below is a\n  list of my publications:</p>\n<ul>\n  <li>\n    <h2 id=\"Various-official-Sencha-blogs\"><a href=\"#Various-official-Sencha-blogs\" class=\"headerlink\" title=\"Various official Sencha blogs\"></a>Various\n      official Sencha blogs</h2>\n    <p>2016 | <strong>Sencha</strong> | <a href=\"http://www.sencha.com/blog/\" target=\"_blank\" rel=\"noopener\">Link</a></p>\n  </li>\n  <li>\n    <h2 id=\"Hands-on-Sencha-Touch-2\"><a href=\"#Hands-on-Sencha-Touch-2\" class=\"headerlink\" title=\"Hands-on Sencha Touch 2\"></a>Hands-on\n      Sencha Touch 2</h2>\n    <p>05-2014 | <strong>O’Reilly</strong> | <a href=\"http://shop.oreilly.com/product/0636920030058.do\" target=\"_blank\" rel=\"noopener\">Link</a></p>\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebPage\",\n        \"mainEntity\": {\n          \"@type\": \"Book\",\n          \"author\": \"https://www.oreilly.com/pub/au/6134\",\n          \"datePublished\": \"2014-07-01\",\n          \"image\": \"https://covers.oreillystatic.com/images/0636920030058/lrg.jpg\",\n          \"inLanguage\": \"English\",\n          \"isbn\": \"978-1449366520\",\n          \"name\": \"Hands-On Sencha Touch 2\",\n          \"numberOfPages\": \"332\",\n          \"publisher\": \"O'Reilly Media\"\n        }\n      }\n\n    </script>\n  </li>\n  <li>\n    <h2 id=\"Net-Magazine-247-Sencha-Touch-tutorial\"><a href=\"#Net-Magazine-247-Sencha-Touch-tutorial\" class=\"headerlink\" title=\".Net Magazine #247 - Sencha Touch tutorial\"></a>.Net\n      Magazine #247 - Sencha Touch tutorial</h2>\n    <p>10-2013 | <strong>Future Plc</strong></p>\n  </li>\n</ul>\n<hr>\n<p><img src=\"/images/leeboonstra-book.png\" width=\"500\" class=\"border\" alt=\"Lee Boonstra Author\"></p>\n<p>Read my <strong>Girls In Tech spotlight interview</strong> at <a href=\"http://www.codepancake.com/spotlight-49-meet-sales-engineer-lee-boonstra/\" target=\"_blank\" rel=\"noopener\">CodePanCake</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Beside writing this blog, I’ve also published my work elsewhere. Below is a\n  list of my publications:</p>\n<ul>\n  <li>\n    <h2 id=\"Various-official-Sencha-blogs\"><a href=\"#Various-official-Sencha-blogs\" class=\"headerlink\" title=\"Various official Sencha blogs\"></a>Various\n      official Sencha blogs</h2>\n    <p>2016 | <strong>Sencha</strong> | <a href=\"http://www.sencha.com/blog/\" target=\"_blank\" rel=\"noopener\">Link</a></p>\n  </li>\n  <li>\n    <h2 id=\"Hands-on-Sencha-Touch-2\"><a href=\"#Hands-on-Sencha-Touch-2\" class=\"headerlink\" title=\"Hands-on Sencha Touch 2\"></a>Hands-on\n      Sencha Touch 2</h2>\n    <p>05-2014 | <strong>O’Reilly</strong> | <a href=\"http://shop.oreilly.com/product/0636920030058.do\" target=\"_blank\" rel=\"noopener\">Link</a></p>\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebPage\",\n        \"mainEntity\": {\n          \"@type\": \"Book\",\n          \"author\": \"https://www.oreilly.com/pub/au/6134\",\n          \"datePublished\": \"2014-07-01\",\n          \"image\": \"https://covers.oreillystatic.com/images/0636920030058/lrg.jpg\",\n          \"inLanguage\": \"English\",\n          \"isbn\": \"978-1449366520\",\n          \"name\": \"Hands-On Sencha Touch 2\",\n          \"numberOfPages\": \"332\",\n          \"publisher\": \"O'Reilly Media\"\n        }\n      }\n\n    </script>\n  </li>\n  <li>\n    <h2 id=\"Net-Magazine-247-Sencha-Touch-tutorial\"><a href=\"#Net-Magazine-247-Sencha-Touch-tutorial\" class=\"headerlink\" title=\".Net Magazine #247 - Sencha Touch tutorial\"></a>.Net\n      Magazine #247 - Sencha Touch tutorial</h2>\n    <p>10-2013 | <strong>Future Plc</strong></p>\n  </li>\n</ul>\n<hr>\n<p><img src=\"/images/leeboonstra-book.png\" width=\"500\" class=\"border\" alt=\"Lee Boonstra Author\"></p>\n<p>Read my <strong>Girls In Tech spotlight interview</strong> at <a href=\"http://www.codepancake.com/spotlight-49-meet-sales-engineer-lee-boonstra/\" target=\"_blank\" rel=\"noopener\">CodePanCake</a></p>\n"},{"title":"Contact","date":"2018-11-17T12:40:52.000Z","_content":"\nIn case you want to contact me, please send me a dm on <a href=\"https://twitter.com/ladysign\" target=\"_blank\">Twitter</a> or contact me via <a href=\"https://linkedin.com/in/leeboonstra/\" target=\"_blank\">LinkedIn</a>.\n\n<div class=\"row\">\n    <div class=\"col col-sm-8\"> <a class=\"twitter-timeline\" href=\"https://twitter.com/ladysign\"> Tweets by @ladysign</a>\n    </div>\n    <div class=\"col col-sm-4\"></div>\n</div>","source":"contact/index.md","raw":"---\ntitle: Contact\ndate: 2018-11-17 13:40:52\n---\n\nIn case you want to contact me, please send me a dm on <a href=\"https://twitter.com/ladysign\" target=\"_blank\">Twitter</a> or contact me via <a href=\"https://linkedin.com/in/leeboonstra/\" target=\"_blank\">LinkedIn</a>.\n\n<div class=\"row\">\n    <div class=\"col col-sm-8\"> <a class=\"twitter-timeline\" href=\"https://twitter.com/ladysign\"> Tweets by @ladysign</a>\n    </div>\n    <div class=\"col col-sm-4\"></div>\n</div>","updated":"2018-11-24T18:11:49.190Z","path":"contact/index.html","comments":1,"layout":"page","_id":"cjp5jncnr0008kif5pjvt1176","content":"<p>In case you want to contact me, please send me a dm on <a href=\"https://twitter.com/ladysign\" target=\"_blank\">Twitter</a>\n  or contact me via <a href=\"https://linkedin.com/in/leeboonstra/\" target=\"_blank\">LinkedIn</a>.</p>\n<div class=\"row\">\n  <div class=\"col col-sm-8\"><a class=\"twitter-timeline\" href=\"https://twitter.com/ladysign\" target=\"_blank\" rel=\"noopener\">Tweets\n      by @ladysign</a></div>\n  <div class=\"col col-sm-4\"></div>\n</div>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>In case you want to contact me, please send me a dm on <a href=\"https://twitter.com/ladysign\" target=\"_blank\">Twitter</a>\n  or contact me via <a href=\"https://linkedin.com/in/leeboonstra/\" target=\"_blank\">LinkedIn</a>.</p>\n<div class=\"row\">\n  <div class=\"col col-sm-8\"><a class=\"twitter-timeline\" href=\"https://twitter.com/ladysign\" target=\"_blank\" rel=\"noopener\">Tweets\n      by @ladysign</a></div>\n  <div class=\"col col-sm-4\"></div>\n</div>\n"},{"title":"Speaking","date":"2015-07-06T18:45:21.000Z","event":true,"_content":"\n<img src=\"/images/leeboonstra-speaker-500x351.png\" width=\"400\" class=\"float-right border\" alt=\"Lee Speaking\">\n\nWorked in the past as a technical trainer, now Sales Engineer at Google. I'm a public speaker at conferences and events. Below is a list of my past sessions.\n\nCheck out my Speaker Deck, for an overview of all my presentations: [Speaker Deck](https://speakerdeck.com/savelee/).\n\nTopics I speak about: Google, Google Cloud, Cloud Computing, Machine Learning for Developers, Chatbots, Building software at Google scale, (Mobile) app development and deployment, JavaScript, HTML5 app development (Cordova / PhoneGap / HTML5 frameworks) & advanced theming (Sass/CSS3).\n\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr>\n\n2019\n----\n\n*   ### Friends of Search\n    \n     6 Feb 2019 | **Kromhouthallen, Amsterdam** | [Website](https://friendsofsearch.nl/) | Keynote: Google Assistant\n      <script type='application/ld+json'> \n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Friends of Search\",\n        \"url\": \"https://friendsofsearch.nl/\",\n        \"startDate\": \"06/02/2019\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Kromhouthallen\",\n          \"address\": {\n            \"addressLocality\": \"Amsterdam\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }</script>\n\n2018\n----\n\n*   ### Startup Roadshow\n    \n     11 Dec 2018 | **London, UK** | [Website](https://events.withgoogle.com/google-cloud-startup-roadshow-london/#content) | Build real world applications with Google Cloud.\n      <script type='application/ld+json'> \n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Startup Roadshow\",\n        \"url\": \"https://events.withgoogle.com/google-cloud-startup-roadshow-london/#content\",\n        \"startDate\": \"11/12/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Google Academy\",\n          \"address\": {\n            \"addressLocality\": \"London\",\n            \"addressCountry\": \"UK\"\n          }\n        }\n      }</script>\n\n*   ### Schiphol Developers Group\n    \n    06 Dec 2018 | **Amsterdam** | [Website](https://www.meetup.com/nl-NL/schiphol-developers/events/256537947/) | Machine Learning for JavaScript Developers\n\n      <script type='application/ld+json'> \n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Schiphol Developers Group\",\n        \"url\": \"https://www.meetup.com/nl-NL/schiphol-developers/events/256537947/\",\n        \"startDate\": \"06/12/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"address\": {\n            \"addressLocality\": \"Schipholrijk\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }</script>\n\n*   ### Dialogflow Day\n    \n     04 Dec 2018 | **Amsterdam** | Contact Center AI\n\n*   ### Google Cloud Summit Amsterdam\n    \n     28 Nov 2018 | **Zaandam** | [Website](https://cloudplatformonline.com/2018-Summit-Amsterdam-EN-Home.html) | Keynote: AutoML Demo + Contact Center AI Breakout session\n      <script type='application/ld+json'> \n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Google Cloud Summit Amsterdam\",\n        \"url\": \"https://cloudplatformonline.com/2018-Summit-Amsterdam-EN-Home.html\",\n        \"startDate\": \"28/11/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Taets Gallery\",\n          \"address\": {\n            \"addressLocality\": \"Zaandam\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }</script>\n  \n*   ### KSF Jaarcongres 2018\n    \n    20 Nov 2018 | **Almere** | [Website](https://klantenservicefederatie.nl/) | Session about Contact Center AI\n     <script type='application/ld+json'> \n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"KSF Jaarcongres 2018\",\n        \"url\": \"https://klantenservicefederatie.nl/\",\n        \"startDate\": \"20/11/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Kaf\",\n          \"address\": {\n            \"addressLocality\": \"Almere\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }</script>  \n\n*   ### FrontMania Conference \n    \n    16 Nov 2018 | **Utrecht** | [Website](https://frontmania.com/) | Keynote: Machine Learning for JavaScript developers\n\n    <script type='application/ld+json'> \n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"FrontMania Conference\",\n        \"url\": \"https://frontmania.com/\",\n        \"startDate\": \"16/11/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Rabobank\",\n          \"address\": {\n            \"addressLocality\": \"Utrecht\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }</script> \n    \n*   ### Chatathon\n    \n    28 Oct 2018 | **Brussel** | Chatbot hackathon - trainer\n\n     <script type='application/ld+json'> \n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Chatbot Hackathon\",\n        \"startDate\": \"28/10/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Google Brussel\",\n          \"address\": {\n            \"addressLocality\": \"Brussel\",\n            \"addressCountry\": \"BE\"\n          }\n        }\n      }</script>\n\n*   ### GoDataFest 2018\n    \n    18 Oct 2018 | **Amsterdam** | [Website](https://www.godatafest.com/) | Learn about Dialogflow and the Google Assistant\n\n    <script type='application/ld+json'> \n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"GoDataFest 2018\",\n        \"url\": \"https://www.godatafest.com/\",\n        \"startDate\": \"18/10/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"GoDataDriven\",\n          \"address\": {\n            \"addressLocality\": \"Amsterdam\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }</script>\n\n*   ### Google Cloud Next\n    \n    11 Oct 2018 | **London** | Diversity at Google Panel\n\n    <script type='application/ld+json'> \n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Google Cloud Next 2018\",\n        \"startDate\": \"11/10/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Excel\",\n          \"address\": {\n            \"addressLocality\": \"London\",\n            \"addressCountry\": \"UK\"\n          }\n        }\n      }</script>\n\n*   ### YSE Digital Now\n    \n    05 Oct 2018 | **Amsterdam** | Machine Learning at Google\n    \n*   ### Digital Wednesday\n    \n    26 Sept 2018 | **Eindhoven** | [Website](https://www.eventbrite.nl/e/tickets-digital-wednesday-siri-alexa-voice-marketing-gaat-nu-echt-beginnen-49869024595) | Learn about Dialogflow and the Google Assistant\n    \n*   ### Hackademy\n    \n    20 July 2018 | [](https://t.co/K8MPbfQ3fG)**Amsterdam** | Chatbot Hackathon\n    \n*   ### DDMA\n    \n    26 June 2018 | **Amsterdam** | Learn about Dialogflow and the Google Assistant\n    \n*   ### GHG Chatbot event\n    \n    21 June 2018 | **Amsterdam** | Learn about Dialogflow and the Google Assistant\n    \n*   ### Women Tech Makers event\n    \n    3 May 2018 | **Amsterdam** | About Public Speaking\n    \n*   ### CSA Security event\n    \n    4 April 2018 | **Amsterdam** | Learn about DevOps at Google\n    \n\n2017\n----\n\n*   ### Google Cloud Summit Munich\n    \n    6 Dec 2017 | **Munich, Germany** | [Website](https://cloudplatformonline.com/Summit-Munich-2017.html) | Keynote: Machine Learning Vision API and DLP Demo.\n    \n*   ### Dutch Search Awards\n    \n    Nov 2017 | **Amsterdam, NL** | [Website](https://dutchsearchawards.nl/sprekers) | Machine Learning demo, how models work.\n    \n*   ### Think with Google\n    \n    8 Nov 2017 | **Amsterdam, NL** | [Website](https://events.withgoogle.com/think-with-google-2018/program/#content)\n    \n    Machine Learning, Twitter Analytics Sentiment demo\n    \n*   ### Google Cloud Summit Paris\n    \n    19 Oct 2017 | **Paris, FR** | [Website](https://cloudnext.withgoogle.com/)\n    \n    Keynote: Video Intelligence API demo & Tech session\n    \n*   ### Google Cloud On Air Webinar\n    \n    17 Oct 2017 | **Online** | [Website](https://cloudplatformonline.com/onair-emea.html)\n    \n    Webinar about smart conversations and chatbots\n    \n*   ### Financial Services Lighthouse\n    \n    13 Oct 2017 | **Amsterdam, FR** | [Website](https://cloudtricks.eu)\n    \n    Introduction to Google Cloud\n    \n*   ### Software Circus\n    \n    8 Sept 2017 | **Amsterdam, NL** | [Website](http://cloudbusting.softwarecircus.io/)\n    \n    Google Home workshop\n    \n*   ### Faster is Better\n    \n    8 Sept 2017 | **Utrecht, NL**\n    \n    Building software at Google scale, keynote\n    \n*   ### LGBTech\n    \n    4 Aug 2017 | **Amsterdam, NL**\n    \n    Presentation about Machine Learning\n    \n*   ### Google Cloud Next Amsterdam\n    \n    21 June 2017 | **Amsterdam, NL** | [Website](https://cloudnext.withgoogle.com/)\n    \n    Keynote, Leadercircle, Tech session\n    \n*   ### IoT Techday\n    \n    19 April 2017 | **Utrecht, NL** | [Website](http://iottechday.nl/)\n    \n    Workshop: Create the TV guide action for the Google Assistant with API.AI and Cloud Functions.\n    \n\n2016\n----\n\n*   ### SenchaCon 2016\n    \n    9 November 2016 | **Las Vegas, USA** | [Website](https://www.senchacon.com)\n    \n    Presentation: Top 10 features ECMAScript 2015.\n    \n*   ### AppsWorld London: Sencha AppCamp\n    \n    19 October 2016 | **London, UK** | [Website](https://tmt.knect365.com/apps-world/)\n    \n    Workshop: Build a universal Ext JS 6 app.\n    \n*   ### Sencha Roadshow Germany\n    \n    22 September 2016 | **Karlsruhe, Germany** | [Website](https://www.sencha.com/company/roadshow/karlsruhe/)\n    \n    Presentation: Top 10 features ECMAScript 2015. [(slides available)](https://speakerdeck.com/savelee/learn-the-top-10-best-es2015-features)\n    \n*   ### Sencha Roadshow France\n    \n    21 September 2016 | **Paris, France** | [Website](https://www.sencha.com/company/roadshow/paris/)\n    \n    Presentation: Top 10 features ECMAScript 2015. [(slides available)](https://speakerdeck.com/savelee/learn-the-top-10-best-es2015-features)\n    \n*   ### Sencha Roadshow UK\n    \n    20 September 2016 | **London, UK** | [Website](https://www.sencha.com/company/roadshow/london/)\n    \n    Presentation: Top 10 features ECMAScript 2015. [(slides available)](https://speakerdeck.com/savelee/learn-the-top-10-best-es2015-features)\n    \n*   ### AppsWorld Berlin: Sencha AppCamp\n    \n    20 April 2016 | **Berlin, Germany** | [Website](https://germany.apps-world.net/)\n    \n    Workshop: Build a universal Ext JS 6 app.\n    \n*   ### Appril Festival\n    \n    15 April 2016 | **Utrecht, The Netherlands** | [Website](http://apprilfestival.com/programma/) | [Preview](https://speakerdeck.com/savelee/secrets-in-building-great-enterprise-apps)\n    \n    Presentation: Let's talk about enterprise apps! Often those apps don’t live in an app store. They live in a private cloud or private network. Maybe even secured and behind a firewall. You and I, might not even be aware of these types of apps. You need to have experience, with building complex applications like these. But that’s difficult, if you don’t really see these apps in the wild. In this session, Lee Boonstra will discuss why enterprise apps can be complex, and how you can build better apps, with maintainability and scalability in mind!\n    \n*   ### Sencha Roadshow Stockholm\n    \n    8 April 2016 | **Stockholm, Sweden** | [Website](https://www.sencha.com/company/roadshow)\n    \n*   ### Sencha AppCamp Milan\n    \n    6 April 2016 | **Milan, Italy** | [Website](https://www.sencha.com/company/roadshow)\n    \n    Workshop: Build a universal Ext JS 6 app.\n    \n*   ### Sencha Roadshow Milan\n    \n    5 April 2016 | **Milan, Italy** | [Website](https://www.sencha.com/company/roadshow)\n    \n*   ### Sencha Roadshow Munich\n    \n    17 March 2016 | **Munich, Germany** | [Website](https://www.sencha.com/company/roadshow)\n    \n*   ### Sencha Roadshow Paris\n    \n    16 March 2016 | **Paris, France** | [Website](https://www.sencha.com/company/roadshow)\n    \n*   ### Sencha Roadshow London\n    \n    15 March 2016 | **London, UK** | [Website](https://www.sencha.com/company/roadshow)\n    \n\n2015\n----\n\n*   ### AppsWorld London\n    \n    11-2015 | **London, UK** | [Website](http://world.apps-world.net/speaker/lee-boonstra/)\n    \n*   ### London JavaScript Community\n    \n    11-2015 | **London, UK** | [Website](http://www.meetup.com/London-JavaScript-Community/)\n    \n    Workshop: Build a universal Ext JS 6 app.\n    \n*   ### Webinar: Secrets to building great looking universal apps\n    \n    10-2015 | **Online @Brighttalk**\n    \n*   ### Sencha Day Zurich\n    \n    10-2015 | **Zurich, Switzerland** | [Preview](http://roadshow.senchacon.com/)\n    \n    Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Asynchronous Javascript\n    \n*   ### Sencha Day Stockholm\n    \n    9-2015 | **Stockholm, Sweden** | [Preview](http://roadshow.senchacon.com/)\n    \n    Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Asynchronous Javascript, Web Application Manager\n    \n*   ### Sencha Day Copenhagen\n    \n    9-2015 | **Copenhagen, Denmark** | [Preview](http://roadshow.senchacon.com/)\n    \n    Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Asynchronous Javascript\n    \n*   ### Sencha Day Oslo\n    \n    9-2015 | **Oslo, Norway** | [Preview](http://roadshow.senchacon.com/)\n    \n    Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Asynchronous Javascript\n    \n*   ### Devoxx London\n    \n    6-2015 | **London, UK** | [Website](http://www.devoxx.com/)\n    \n    Topic: Using frameworks to avoid common pitfalls of app development\n    \n*   ### Sencha Day Milan\n    \n    6-2015 | **Milan, Italy** | [Preview](http://roadshow.senchacon.com/)\n    \n    Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Web Application Manager\n    \n*   ### Sencha Day Amsterdam\n    \n    6-2015 | **Amsterdam, NL** | [Preview](http://roadshow.senchacon.com/)\n    \n    Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Web Application Manager\n    \n*   ### Sencha Day Karlsruhe\n    \n    5-2015 | **Karlsruhe, Germany** | [Preview](http://roadshow.senchacon.com/)\n    \n    Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Web Application Manager\n    \n*   ### Sencha Day Paris\n    \n    5-2015 | **Paris, France** | [Preview](http://roadshow.senchacon.com/)\n    \n    Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Web Application Manager\n    \n*   ### Sencha Day London\n    \n    5-2015 | **London, UK** | [Preview](http://roadshow.senchacon.com/)\n    \n    Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Web Application Manager\n    \n*   ### Appril Festival\n    \n    4-2015 | **Amsterdam, NL** | [Website](http://apprilfestival.com/)\n    \n    Workshop: Build a mobile app within a day.\n    \n*   ### AppsWorld Berlin\n    \n    4-2015 | **Berlin, Germany** | [Website](https://www.apps-world.net/)\n    \n    Panel Discussion App Development\n    \n*   ### SenchaCon USA 2015\n    \n    4-2015 | **Silicon Valley, USAK** | [Preview](http://senchacon.com)\n    \n    Topic: Advanced Theming techniques\n    \n\n2014\n----\n\n*   ### SenchaDay 2014\n    \n    12-2014 | **Karlsruhe Germany** | [Preview](http://www.senchaday.de/)\n    \n    3 Presentations: Building Ext JS 5 apps with Sencha Architect Optimizing your current Ext JS applications for touch and tablets.  \n    How to secure your data with Sencha Space\n    \n*   ### Sencha Workshop Milan\n    \n    10-2014 | **Milan IT**\n    \n    Sencha Touch workshop, build the ATM finder with Sencha Architect for 40 students.\n    \n*   ### Sencha Webcast Webcast\n    \n    08-2014 | **Online** | [Preview](http://vimeo.com/107524499)\n    \n    Presentation: Optimizing Your Current Ext JS 4 Applications for Touch and Tablets with Ext JS 5  \n    Would you like your Ext JS application to support Touch and Tablet devices, but don't know where to start? Please join us as Lee Boonstra, Technical Trainer at Sencha shares best practices and techniques for optimizing your existing Ext JS applications with the new touch gestures introduced in Ext JS 5.\n    \n*   ### O'Reily Webcast\n    \n    08-2014 | **Online** | [Preview](http://www.oreilly.com/pub/e/3100)\n    \n    Presentation: Apps in the multi-device world.  \n    We live in a multi-device world of phones, tablets, TVs, in-car navs, smart watches….And there is one thing all these devices have in common: HTML5. In this session Lee Boonstra, technical trainer at Sencha, will discuss some of the challenges and opportunities of developing for a multi-device world and how Sencha can help you create better experiences. She will also provide some inspiring client examples and case studies.\n    \n*   ### Dutch Mobile Conference 2014\n    \n    06-2014 | **Rai Amsterdam NL**\n    \n    Learn how to build and deploy powerful mobile apps quickly for iOS, Android, Blackberry 10, and Windows Phone 8 with Sencha Touch and Sencha Architect. Register at [mobileconference.nl/](http://www.mobileconference.nl/speakers#lee-boonstra).\n    \n*   ### Appsterdam WWLL\n    \n    04-2014 | **Amsterdam NL**\n    \n    Presentation: Apps in the multi-device world.  \n    We live in a multi-device world of phones, tablets, TVs, in-car navs, smart watches….And there is one thing all these devices have in common: HTML5. In this session Lee Boonstra, technical trainer at Sencha, will discuss some of the challenges and opportunities of developing for a multi-device world and how Sencha can help you create better experiences. She will also provide some inspiring client examples and case studies.\n    \n*   ### Sencha Paris Meetup Group\n    \n    04-2014 | **Online** | [Preview](https://speakerdeck.com/savelee/paris-sencha-meetup-apps-for-the-multi-device-world)\n    \n    Presentation: Apps in the multi-device world.  \n    We live in a multi-device world of phones, tablets, TVs, in-car navs, smart watches….And there is one thing all these devices have in common: HTML5. In this session Lee Boonstra, technical trainer at Sencha, will discuss some of the challenges and opportunities of developing for a multi-device world and how Sencha can help you create better experiences. She will also provide some inspiring client examples and case studies.\n    \n*   ### Sencha Workshop Milan\n    \n    03-2014 | **Milan IT**\n    \n    Sencha Touch workshop, build the ATM finder with Sencha Architect for 80 students.\n    \n*   ### FITC Conference\n    \n    02-2014 | **Felix Mertis Amsterdam NL** | [Preview](https://speakerdeck.com/savelee/apps-for-the-multi-device-world)\n    \n    Presentation: Apps in the multi-device world.  \n    We live in a multi-device world of phones, tablets, TVs, in-car navs, smart watches….And there is one thing all these devices have in common: HTML5. In this session Lee Boonstra, technical trainer at Sencha, will discuss some of the challenges and opportunities of developing for a multi-device world and how Sencha can help you create better experiences. She will also provide some inspiring client examples and case studies.\n    \n*   ### Amsterdam Sencha Meetup Group\n    \n    01-2014 | **Sencha Office, Amsterdam NL**\n    \n    Sencha Touch workshop, build the ATM finder with Sencha Architect.\n    \n*   ### Amsterdam Sencha Meetup Group\n    \n    01-2014 | **Sencha Office, Amsterdam NL**\n    \n    Presentation: Re-skinning Your Apps Just Got Easier with Sencha Architect 3  \n    Ever had to reskin UI components to match a visual design or brand standard? The new Themes feature in Architect 3 makes changing the look and feel of your app easier than ever. If you’re familiar with Sass/SCSS, you'll find this new feature a huge time saver. Architect 3 now allows you to locate and change the different variables and rules that define the visual appearance of the UI components in Ext JS and Sencha Touch.\n    \n\n2013\n----\n\n*   ### Sencha Webinar\n    \n    12-2013 | **Online** | [Preview](http://vimeo.com/81745175)\n    \n    Presentation: Re-skinning Your Apps Just Got Easier with Sencha Architect 3  \n    Ever had to reskin UI components to match a visual design or brand standard? The new Themes feature in Architect 3 makes changing the look and feel of your app easier than ever. If you’re familiar with Sass/SCSS, you'll find this new feature a huge time saver. Architect 3 now allows you to locate and change the different variables and rules that define the visual appearance of the UI components in Ext JS and Sencha Touch.\n    \n*   ### SenchaCon 2013\n    \n    07-2013 | **Orlando Florida USA**\n    \n    Sencha Touch / Sencha Architect App Camp for hundreds of students.\n    \n*   ### Appsterdam WWLL\n    \n    07-2013 | **Amsterdam NL** | [Preview](https://speakerdeck.com/savelee/appsterdam-wwll-sencha-touch)\n    \n    Presentation: How to build highly scalable cross-platform mobile apps.\n    \n*   ### Dutch Mobile Conference 2013\n    \n    06-2013 | **Rai Amsterdam NL**\n    \n    Sencha Touch workshop, build a utility app with Sencha Cmd.\n    \n*   ### Sencha Frankfurt Meetup Group\n    \n    02-2013 | **Frankfurt DE** | [Preview](https://speakerdeck.com/savelee/an-introduction-to-sencha-cmd-frankfurt-sencha-meetup)\n    \n    Presentation: An introduction to Sencha Cmd.\n","source":"speaking/index.md","raw":"---\ntitle: Speaking\ndate: 2015-07-06 20:45:21\nevent: true\n---\n\n<img src=\"/images/leeboonstra-speaker-500x351.png\" width=\"400\" class=\"float-right border\" alt=\"Lee Speaking\">\n\nWorked in the past as a technical trainer, now Sales Engineer at Google. I'm a public speaker at conferences and events. Below is a list of my past sessions.\n\nCheck out my Speaker Deck, for an overview of all my presentations: [Speaker Deck](https://speakerdeck.com/savelee/).\n\nTopics I speak about: Google, Google Cloud, Cloud Computing, Machine Learning for Developers, Chatbots, Building software at Google scale, (Mobile) app development and deployment, JavaScript, HTML5 app development (Cordova / PhoneGap / HTML5 frameworks) & advanced theming (Sass/CSS3).\n\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr>\n\n2019\n----\n\n*   ### Friends of Search\n    \n     6 Feb 2019 | **Kromhouthallen, Amsterdam** | [Website](https://friendsofsearch.nl/) | Keynote: Google Assistant\n      <script type='application/ld+json'> \n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Friends of Search\",\n        \"url\": \"https://friendsofsearch.nl/\",\n        \"startDate\": \"06/02/2019\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Kromhouthallen\",\n          \"address\": {\n            \"addressLocality\": \"Amsterdam\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }</script>\n\n2018\n----\n\n*   ### Startup Roadshow\n    \n     11 Dec 2018 | **London, UK** | [Website](https://events.withgoogle.com/google-cloud-startup-roadshow-london/#content) | Build real world applications with Google Cloud.\n      <script type='application/ld+json'> \n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Startup Roadshow\",\n        \"url\": \"https://events.withgoogle.com/google-cloud-startup-roadshow-london/#content\",\n        \"startDate\": \"11/12/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Google Academy\",\n          \"address\": {\n            \"addressLocality\": \"London\",\n            \"addressCountry\": \"UK\"\n          }\n        }\n      }</script>\n\n*   ### Schiphol Developers Group\n    \n    06 Dec 2018 | **Amsterdam** | [Website](https://www.meetup.com/nl-NL/schiphol-developers/events/256537947/) | Machine Learning for JavaScript Developers\n\n      <script type='application/ld+json'> \n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Schiphol Developers Group\",\n        \"url\": \"https://www.meetup.com/nl-NL/schiphol-developers/events/256537947/\",\n        \"startDate\": \"06/12/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"address\": {\n            \"addressLocality\": \"Schipholrijk\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }</script>\n\n*   ### Dialogflow Day\n    \n     04 Dec 2018 | **Amsterdam** | Contact Center AI\n\n*   ### Google Cloud Summit Amsterdam\n    \n     28 Nov 2018 | **Zaandam** | [Website](https://cloudplatformonline.com/2018-Summit-Amsterdam-EN-Home.html) | Keynote: AutoML Demo + Contact Center AI Breakout session\n      <script type='application/ld+json'> \n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Google Cloud Summit Amsterdam\",\n        \"url\": \"https://cloudplatformonline.com/2018-Summit-Amsterdam-EN-Home.html\",\n        \"startDate\": \"28/11/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Taets Gallery\",\n          \"address\": {\n            \"addressLocality\": \"Zaandam\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }</script>\n  \n*   ### KSF Jaarcongres 2018\n    \n    20 Nov 2018 | **Almere** | [Website](https://klantenservicefederatie.nl/) | Session about Contact Center AI\n     <script type='application/ld+json'> \n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"KSF Jaarcongres 2018\",\n        \"url\": \"https://klantenservicefederatie.nl/\",\n        \"startDate\": \"20/11/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Kaf\",\n          \"address\": {\n            \"addressLocality\": \"Almere\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }</script>  \n\n*   ### FrontMania Conference \n    \n    16 Nov 2018 | **Utrecht** | [Website](https://frontmania.com/) | Keynote: Machine Learning for JavaScript developers\n\n    <script type='application/ld+json'> \n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"FrontMania Conference\",\n        \"url\": \"https://frontmania.com/\",\n        \"startDate\": \"16/11/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Rabobank\",\n          \"address\": {\n            \"addressLocality\": \"Utrecht\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }</script> \n    \n*   ### Chatathon\n    \n    28 Oct 2018 | **Brussel** | Chatbot hackathon - trainer\n\n     <script type='application/ld+json'> \n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Chatbot Hackathon\",\n        \"startDate\": \"28/10/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Google Brussel\",\n          \"address\": {\n            \"addressLocality\": \"Brussel\",\n            \"addressCountry\": \"BE\"\n          }\n        }\n      }</script>\n\n*   ### GoDataFest 2018\n    \n    18 Oct 2018 | **Amsterdam** | [Website](https://www.godatafest.com/) | Learn about Dialogflow and the Google Assistant\n\n    <script type='application/ld+json'> \n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"GoDataFest 2018\",\n        \"url\": \"https://www.godatafest.com/\",\n        \"startDate\": \"18/10/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"GoDataDriven\",\n          \"address\": {\n            \"addressLocality\": \"Amsterdam\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }</script>\n\n*   ### Google Cloud Next\n    \n    11 Oct 2018 | **London** | Diversity at Google Panel\n\n    <script type='application/ld+json'> \n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Google Cloud Next 2018\",\n        \"startDate\": \"11/10/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Excel\",\n          \"address\": {\n            \"addressLocality\": \"London\",\n            \"addressCountry\": \"UK\"\n          }\n        }\n      }</script>\n\n*   ### YSE Digital Now\n    \n    05 Oct 2018 | **Amsterdam** | Machine Learning at Google\n    \n*   ### Digital Wednesday\n    \n    26 Sept 2018 | **Eindhoven** | [Website](https://www.eventbrite.nl/e/tickets-digital-wednesday-siri-alexa-voice-marketing-gaat-nu-echt-beginnen-49869024595) | Learn about Dialogflow and the Google Assistant\n    \n*   ### Hackademy\n    \n    20 July 2018 | [](https://t.co/K8MPbfQ3fG)**Amsterdam** | Chatbot Hackathon\n    \n*   ### DDMA\n    \n    26 June 2018 | **Amsterdam** | Learn about Dialogflow and the Google Assistant\n    \n*   ### GHG Chatbot event\n    \n    21 June 2018 | **Amsterdam** | Learn about Dialogflow and the Google Assistant\n    \n*   ### Women Tech Makers event\n    \n    3 May 2018 | **Amsterdam** | About Public Speaking\n    \n*   ### CSA Security event\n    \n    4 April 2018 | **Amsterdam** | Learn about DevOps at Google\n    \n\n2017\n----\n\n*   ### Google Cloud Summit Munich\n    \n    6 Dec 2017 | **Munich, Germany** | [Website](https://cloudplatformonline.com/Summit-Munich-2017.html) | Keynote: Machine Learning Vision API and DLP Demo.\n    \n*   ### Dutch Search Awards\n    \n    Nov 2017 | **Amsterdam, NL** | [Website](https://dutchsearchawards.nl/sprekers) | Machine Learning demo, how models work.\n    \n*   ### Think with Google\n    \n    8 Nov 2017 | **Amsterdam, NL** | [Website](https://events.withgoogle.com/think-with-google-2018/program/#content)\n    \n    Machine Learning, Twitter Analytics Sentiment demo\n    \n*   ### Google Cloud Summit Paris\n    \n    19 Oct 2017 | **Paris, FR** | [Website](https://cloudnext.withgoogle.com/)\n    \n    Keynote: Video Intelligence API demo & Tech session\n    \n*   ### Google Cloud On Air Webinar\n    \n    17 Oct 2017 | **Online** | [Website](https://cloudplatformonline.com/onair-emea.html)\n    \n    Webinar about smart conversations and chatbots\n    \n*   ### Financial Services Lighthouse\n    \n    13 Oct 2017 | **Amsterdam, FR** | [Website](https://cloudtricks.eu)\n    \n    Introduction to Google Cloud\n    \n*   ### Software Circus\n    \n    8 Sept 2017 | **Amsterdam, NL** | [Website](http://cloudbusting.softwarecircus.io/)\n    \n    Google Home workshop\n    \n*   ### Faster is Better\n    \n    8 Sept 2017 | **Utrecht, NL**\n    \n    Building software at Google scale, keynote\n    \n*   ### LGBTech\n    \n    4 Aug 2017 | **Amsterdam, NL**\n    \n    Presentation about Machine Learning\n    \n*   ### Google Cloud Next Amsterdam\n    \n    21 June 2017 | **Amsterdam, NL** | [Website](https://cloudnext.withgoogle.com/)\n    \n    Keynote, Leadercircle, Tech session\n    \n*   ### IoT Techday\n    \n    19 April 2017 | **Utrecht, NL** | [Website](http://iottechday.nl/)\n    \n    Workshop: Create the TV guide action for the Google Assistant with API.AI and Cloud Functions.\n    \n\n2016\n----\n\n*   ### SenchaCon 2016\n    \n    9 November 2016 | **Las Vegas, USA** | [Website](https://www.senchacon.com)\n    \n    Presentation: Top 10 features ECMAScript 2015.\n    \n*   ### AppsWorld London: Sencha AppCamp\n    \n    19 October 2016 | **London, UK** | [Website](https://tmt.knect365.com/apps-world/)\n    \n    Workshop: Build a universal Ext JS 6 app.\n    \n*   ### Sencha Roadshow Germany\n    \n    22 September 2016 | **Karlsruhe, Germany** | [Website](https://www.sencha.com/company/roadshow/karlsruhe/)\n    \n    Presentation: Top 10 features ECMAScript 2015. [(slides available)](https://speakerdeck.com/savelee/learn-the-top-10-best-es2015-features)\n    \n*   ### Sencha Roadshow France\n    \n    21 September 2016 | **Paris, France** | [Website](https://www.sencha.com/company/roadshow/paris/)\n    \n    Presentation: Top 10 features ECMAScript 2015. [(slides available)](https://speakerdeck.com/savelee/learn-the-top-10-best-es2015-features)\n    \n*   ### Sencha Roadshow UK\n    \n    20 September 2016 | **London, UK** | [Website](https://www.sencha.com/company/roadshow/london/)\n    \n    Presentation: Top 10 features ECMAScript 2015. [(slides available)](https://speakerdeck.com/savelee/learn-the-top-10-best-es2015-features)\n    \n*   ### AppsWorld Berlin: Sencha AppCamp\n    \n    20 April 2016 | **Berlin, Germany** | [Website](https://germany.apps-world.net/)\n    \n    Workshop: Build a universal Ext JS 6 app.\n    \n*   ### Appril Festival\n    \n    15 April 2016 | **Utrecht, The Netherlands** | [Website](http://apprilfestival.com/programma/) | [Preview](https://speakerdeck.com/savelee/secrets-in-building-great-enterprise-apps)\n    \n    Presentation: Let's talk about enterprise apps! Often those apps don’t live in an app store. They live in a private cloud or private network. Maybe even secured and behind a firewall. You and I, might not even be aware of these types of apps. You need to have experience, with building complex applications like these. But that’s difficult, if you don’t really see these apps in the wild. In this session, Lee Boonstra will discuss why enterprise apps can be complex, and how you can build better apps, with maintainability and scalability in mind!\n    \n*   ### Sencha Roadshow Stockholm\n    \n    8 April 2016 | **Stockholm, Sweden** | [Website](https://www.sencha.com/company/roadshow)\n    \n*   ### Sencha AppCamp Milan\n    \n    6 April 2016 | **Milan, Italy** | [Website](https://www.sencha.com/company/roadshow)\n    \n    Workshop: Build a universal Ext JS 6 app.\n    \n*   ### Sencha Roadshow Milan\n    \n    5 April 2016 | **Milan, Italy** | [Website](https://www.sencha.com/company/roadshow)\n    \n*   ### Sencha Roadshow Munich\n    \n    17 March 2016 | **Munich, Germany** | [Website](https://www.sencha.com/company/roadshow)\n    \n*   ### Sencha Roadshow Paris\n    \n    16 March 2016 | **Paris, France** | [Website](https://www.sencha.com/company/roadshow)\n    \n*   ### Sencha Roadshow London\n    \n    15 March 2016 | **London, UK** | [Website](https://www.sencha.com/company/roadshow)\n    \n\n2015\n----\n\n*   ### AppsWorld London\n    \n    11-2015 | **London, UK** | [Website](http://world.apps-world.net/speaker/lee-boonstra/)\n    \n*   ### London JavaScript Community\n    \n    11-2015 | **London, UK** | [Website](http://www.meetup.com/London-JavaScript-Community/)\n    \n    Workshop: Build a universal Ext JS 6 app.\n    \n*   ### Webinar: Secrets to building great looking universal apps\n    \n    10-2015 | **Online @Brighttalk**\n    \n*   ### Sencha Day Zurich\n    \n    10-2015 | **Zurich, Switzerland** | [Preview](http://roadshow.senchacon.com/)\n    \n    Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Asynchronous Javascript\n    \n*   ### Sencha Day Stockholm\n    \n    9-2015 | **Stockholm, Sweden** | [Preview](http://roadshow.senchacon.com/)\n    \n    Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Asynchronous Javascript, Web Application Manager\n    \n*   ### Sencha Day Copenhagen\n    \n    9-2015 | **Copenhagen, Denmark** | [Preview](http://roadshow.senchacon.com/)\n    \n    Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Asynchronous Javascript\n    \n*   ### Sencha Day Oslo\n    \n    9-2015 | **Oslo, Norway** | [Preview](http://roadshow.senchacon.com/)\n    \n    Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Asynchronous Javascript\n    \n*   ### Devoxx London\n    \n    6-2015 | **London, UK** | [Website](http://www.devoxx.com/)\n    \n    Topic: Using frameworks to avoid common pitfalls of app development\n    \n*   ### Sencha Day Milan\n    \n    6-2015 | **Milan, Italy** | [Preview](http://roadshow.senchacon.com/)\n    \n    Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Web Application Manager\n    \n*   ### Sencha Day Amsterdam\n    \n    6-2015 | **Amsterdam, NL** | [Preview](http://roadshow.senchacon.com/)\n    \n    Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Web Application Manager\n    \n*   ### Sencha Day Karlsruhe\n    \n    5-2015 | **Karlsruhe, Germany** | [Preview](http://roadshow.senchacon.com/)\n    \n    Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Web Application Manager\n    \n*   ### Sencha Day Paris\n    \n    5-2015 | **Paris, France** | [Preview](http://roadshow.senchacon.com/)\n    \n    Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Web Application Manager\n    \n*   ### Sencha Day London\n    \n    5-2015 | **London, UK** | [Preview](http://roadshow.senchacon.com/)\n    \n    Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Web Application Manager\n    \n*   ### Appril Festival\n    \n    4-2015 | **Amsterdam, NL** | [Website](http://apprilfestival.com/)\n    \n    Workshop: Build a mobile app within a day.\n    \n*   ### AppsWorld Berlin\n    \n    4-2015 | **Berlin, Germany** | [Website](https://www.apps-world.net/)\n    \n    Panel Discussion App Development\n    \n*   ### SenchaCon USA 2015\n    \n    4-2015 | **Silicon Valley, USAK** | [Preview](http://senchacon.com)\n    \n    Topic: Advanced Theming techniques\n    \n\n2014\n----\n\n*   ### SenchaDay 2014\n    \n    12-2014 | **Karlsruhe Germany** | [Preview](http://www.senchaday.de/)\n    \n    3 Presentations: Building Ext JS 5 apps with Sencha Architect Optimizing your current Ext JS applications for touch and tablets.  \n    How to secure your data with Sencha Space\n    \n*   ### Sencha Workshop Milan\n    \n    10-2014 | **Milan IT**\n    \n    Sencha Touch workshop, build the ATM finder with Sencha Architect for 40 students.\n    \n*   ### Sencha Webcast Webcast\n    \n    08-2014 | **Online** | [Preview](http://vimeo.com/107524499)\n    \n    Presentation: Optimizing Your Current Ext JS 4 Applications for Touch and Tablets with Ext JS 5  \n    Would you like your Ext JS application to support Touch and Tablet devices, but don't know where to start? Please join us as Lee Boonstra, Technical Trainer at Sencha shares best practices and techniques for optimizing your existing Ext JS applications with the new touch gestures introduced in Ext JS 5.\n    \n*   ### O'Reily Webcast\n    \n    08-2014 | **Online** | [Preview](http://www.oreilly.com/pub/e/3100)\n    \n    Presentation: Apps in the multi-device world.  \n    We live in a multi-device world of phones, tablets, TVs, in-car navs, smart watches….And there is one thing all these devices have in common: HTML5. In this session Lee Boonstra, technical trainer at Sencha, will discuss some of the challenges and opportunities of developing for a multi-device world and how Sencha can help you create better experiences. She will also provide some inspiring client examples and case studies.\n    \n*   ### Dutch Mobile Conference 2014\n    \n    06-2014 | **Rai Amsterdam NL**\n    \n    Learn how to build and deploy powerful mobile apps quickly for iOS, Android, Blackberry 10, and Windows Phone 8 with Sencha Touch and Sencha Architect. Register at [mobileconference.nl/](http://www.mobileconference.nl/speakers#lee-boonstra).\n    \n*   ### Appsterdam WWLL\n    \n    04-2014 | **Amsterdam NL**\n    \n    Presentation: Apps in the multi-device world.  \n    We live in a multi-device world of phones, tablets, TVs, in-car navs, smart watches….And there is one thing all these devices have in common: HTML5. In this session Lee Boonstra, technical trainer at Sencha, will discuss some of the challenges and opportunities of developing for a multi-device world and how Sencha can help you create better experiences. She will also provide some inspiring client examples and case studies.\n    \n*   ### Sencha Paris Meetup Group\n    \n    04-2014 | **Online** | [Preview](https://speakerdeck.com/savelee/paris-sencha-meetup-apps-for-the-multi-device-world)\n    \n    Presentation: Apps in the multi-device world.  \n    We live in a multi-device world of phones, tablets, TVs, in-car navs, smart watches….And there is one thing all these devices have in common: HTML5. In this session Lee Boonstra, technical trainer at Sencha, will discuss some of the challenges and opportunities of developing for a multi-device world and how Sencha can help you create better experiences. She will also provide some inspiring client examples and case studies.\n    \n*   ### Sencha Workshop Milan\n    \n    03-2014 | **Milan IT**\n    \n    Sencha Touch workshop, build the ATM finder with Sencha Architect for 80 students.\n    \n*   ### FITC Conference\n    \n    02-2014 | **Felix Mertis Amsterdam NL** | [Preview](https://speakerdeck.com/savelee/apps-for-the-multi-device-world)\n    \n    Presentation: Apps in the multi-device world.  \n    We live in a multi-device world of phones, tablets, TVs, in-car navs, smart watches….And there is one thing all these devices have in common: HTML5. In this session Lee Boonstra, technical trainer at Sencha, will discuss some of the challenges and opportunities of developing for a multi-device world and how Sencha can help you create better experiences. She will also provide some inspiring client examples and case studies.\n    \n*   ### Amsterdam Sencha Meetup Group\n    \n    01-2014 | **Sencha Office, Amsterdam NL**\n    \n    Sencha Touch workshop, build the ATM finder with Sencha Architect.\n    \n*   ### Amsterdam Sencha Meetup Group\n    \n    01-2014 | **Sencha Office, Amsterdam NL**\n    \n    Presentation: Re-skinning Your Apps Just Got Easier with Sencha Architect 3  \n    Ever had to reskin UI components to match a visual design or brand standard? The new Themes feature in Architect 3 makes changing the look and feel of your app easier than ever. If you’re familiar with Sass/SCSS, you'll find this new feature a huge time saver. Architect 3 now allows you to locate and change the different variables and rules that define the visual appearance of the UI components in Ext JS and Sencha Touch.\n    \n\n2013\n----\n\n*   ### Sencha Webinar\n    \n    12-2013 | **Online** | [Preview](http://vimeo.com/81745175)\n    \n    Presentation: Re-skinning Your Apps Just Got Easier with Sencha Architect 3  \n    Ever had to reskin UI components to match a visual design or brand standard? The new Themes feature in Architect 3 makes changing the look and feel of your app easier than ever. If you’re familiar with Sass/SCSS, you'll find this new feature a huge time saver. Architect 3 now allows you to locate and change the different variables and rules that define the visual appearance of the UI components in Ext JS and Sencha Touch.\n    \n*   ### SenchaCon 2013\n    \n    07-2013 | **Orlando Florida USA**\n    \n    Sencha Touch / Sencha Architect App Camp for hundreds of students.\n    \n*   ### Appsterdam WWLL\n    \n    07-2013 | **Amsterdam NL** | [Preview](https://speakerdeck.com/savelee/appsterdam-wwll-sencha-touch)\n    \n    Presentation: How to build highly scalable cross-platform mobile apps.\n    \n*   ### Dutch Mobile Conference 2013\n    \n    06-2013 | **Rai Amsterdam NL**\n    \n    Sencha Touch workshop, build a utility app with Sencha Cmd.\n    \n*   ### Sencha Frankfurt Meetup Group\n    \n    02-2013 | **Frankfurt DE** | [Preview](https://speakerdeck.com/savelee/an-introduction-to-sencha-cmd-frankfurt-sencha-meetup)\n    \n    Presentation: An introduction to Sencha Cmd.\n","updated":"2018-11-30T19:16:52.707Z","path":"speaking/index.html","comments":1,"layout":"page","_id":"cjp5jncs200bqkif5sqrtf0ot","content":"<p><img src=\"/images/leeboonstra-speaker-500x351.png\" width=\"400\" class=\"float-right border\" alt=\"Lee Speaking\"></p>\n<p>Worked in the past as a technical trainer, now Sales Engineer at Google. I’m\n  a public speaker at conferences and events. Below is a list of my past\n  sessions.</p>\n<p>Check out my Speaker Deck, for an overview of all my presentations: <a href=\"https://speakerdeck.com/savelee/\" target=\"_blank\" rel=\"noopener\">Speaker\n    Deck</a>.</p>\n<p>Topics I speak about: Google, Google Cloud, Cloud Computing, Machine\n  Learning for Developers, Chatbots, Building software at Google scale,\n  (Mobile) app development and deployment, JavaScript, HTML5 app development\n  (Cordova / PhoneGap / HTML5 frameworks) &amp; advanced theming (Sass/CSS3).</p>\n<p></p>\n<p>&nbsp;</p>\n<p></p>\n<p></p>\n<p>&nbsp;</p>\n<p></p>\n<hr>\n<h2 id=\"2019\"><a href=\"#2019\" class=\"headerlink\" title=\"2019\"></a>2019</h2>\n<ul>\n  <li>\n    <h3 id=\"Friends-of-Search\"><a href=\"#Friends-of-Search\" class=\"headerlink\" title=\"Friends of Search\"></a>Friends\n      of Search</h3>\n    <p>6 Feb 2019 | <strong>Kromhouthallen, Amsterdam</strong> | <a href=\"https://friendsofsearch.nl/\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | Keynote: Google Assistant</p>\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Friends of Search\",\n        \"url\": \"https://friendsofsearch.nl/\",\n        \"startDate\": \"06/02/2019\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Kromhouthallen\",\n          \"address\": {\n            \"addressLocality\": \"Amsterdam\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }\n\n    </script>\n  </li>\n</ul>\n<h2 id=\"2018\"><a href=\"#2018\" class=\"headerlink\" title=\"2018\"></a>2018</h2>\n<ul>\n  <li>\n    <h3 id=\"Startup-Roadshow\"><a href=\"#Startup-Roadshow\" class=\"headerlink\" title=\"Startup Roadshow\"></a>Startup\n      Roadshow</h3>\n    <p>11 Dec 2018 | <strong>London, UK</strong> | <a href=\"https://events.withgoogle.com/google-cloud-startup-roadshow-london/#content\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | Build real world applications with Google Cloud.</p>\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Startup Roadshow\",\n        \"url\": \"https://events.withgoogle.com/google-cloud-startup-roadshow-london/#content\",\n        \"startDate\": \"11/12/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Google Academy\",\n          \"address\": {\n            \"addressLocality\": \"London\",\n            \"addressCountry\": \"UK\"\n          }\n        }\n      }\n\n    </script>\n  </li>\n  <li>\n    <h3 id=\"Schiphol-Developers-Group\"><a href=\"#Schiphol-Developers-Group\" class=\"headerlink\" title=\"Schiphol Developers Group\"></a>Schiphol\n      Developers Group</h3>\n    <p>06 Dec 2018 | <strong>Amsterdam</strong> | <a href=\"https://www.meetup.com/nl-NL/schiphol-developers/events/256537947/\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | Machine Learning for JavaScript Developers</p>\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Schiphol Developers Group\",\n        \"url\": \"https://www.meetup.com/nl-NL/schiphol-developers/events/256537947/\",\n        \"startDate\": \"06/12/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"address\": {\n            \"addressLocality\": \"Schipholrijk\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }\n\n    </script>\n  </li>\n  <li>\n    <h3 id=\"Dialogflow-Day\"><a href=\"#Dialogflow-Day\" class=\"headerlink\" title=\"Dialogflow Day\"></a>Dialogflow\n      Day</h3>\n    <p>04 Dec 2018 | <strong>Amsterdam</strong> | Contact Center AI</p>\n  </li>\n  <li>\n    <h3 id=\"Google-Cloud-Summit-Amsterdam\"><a href=\"#Google-Cloud-Summit-Amsterdam\" class=\"headerlink\" title=\"Google Cloud Summit Amsterdam\"></a>Google\n      Cloud Summit Amsterdam</h3>\n    <p>28 Nov 2018 | <strong>Zaandam</strong> | <a href=\"https://cloudplatformonline.com/2018-Summit-Amsterdam-EN-Home.html\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | Keynote: AutoML Demo + Contact Center AI Breakout session</p>\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Google Cloud Summit Amsterdam\",\n        \"url\": \"https://cloudplatformonline.com/2018-Summit-Amsterdam-EN-Home.html\",\n        \"startDate\": \"28/11/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Taets Gallery\",\n          \"address\": {\n            \"addressLocality\": \"Zaandam\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }\n\n    </script>\n  </li>\n  <li>\n    <h3 id=\"KSF-Jaarcongres-2018\"><a href=\"#KSF-Jaarcongres-2018\" class=\"headerlink\" title=\"KSF Jaarcongres 2018\"></a>KSF\n      Jaarcongres 2018</h3>\n    <p>20 Nov 2018 | <strong>Almere</strong> | <a href=\"https://klantenservicefederatie.nl/\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | Session about Contact Center AI</p>\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"KSF Jaarcongres 2018\",\n        \"url\": \"https://klantenservicefederatie.nl/\",\n        \"startDate\": \"20/11/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Kaf\",\n          \"address\": {\n            \"addressLocality\": \"Almere\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }\n\n    </script>\n  </li>\n  <li>\n    <h3 id=\"FrontMania-Conference\"><a href=\"#FrontMania-Conference\" class=\"headerlink\" title=\"FrontMania Conference\"></a>FrontMania\n      Conference</h3>\n    <p>16 Nov 2018 | <strong>Utrecht</strong> | <a href=\"https://frontmania.com/\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | Keynote: Machine Learning for JavaScript developers</p>\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"FrontMania Conference\",\n        \"url\": \"https://frontmania.com/\",\n        \"startDate\": \"16/11/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Rabobank\",\n          \"address\": {\n            \"addressLocality\": \"Utrecht\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }\n\n    </script>\n  </li>\n  <li>\n    <h3 id=\"Chatathon\"><a href=\"#Chatathon\" class=\"headerlink\" title=\"Chatathon\"></a>Chatathon</h3>\n    <p>28 Oct 2018 | <strong>Brussel</strong> | Chatbot hackathon - trainer</p>\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Chatbot Hackathon\",\n        \"startDate\": \"28/10/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Google Brussel\",\n          \"address\": {\n            \"addressLocality\": \"Brussel\",\n            \"addressCountry\": \"BE\"\n          }\n        }\n      }\n\n    </script>\n  </li>\n  <li>\n    <h3 id=\"GoDataFest-2018\"><a href=\"#GoDataFest-2018\" class=\"headerlink\" title=\"GoDataFest 2018\"></a>GoDataFest\n      2018</h3>\n    <p>18 Oct 2018 | <strong>Amsterdam</strong> | <a href=\"https://www.godatafest.com/\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | Learn about Dialogflow and the Google Assistant</p>\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"GoDataFest 2018\",\n        \"url\": \"https://www.godatafest.com/\",\n        \"startDate\": \"18/10/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"GoDataDriven\",\n          \"address\": {\n            \"addressLocality\": \"Amsterdam\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }\n\n    </script>\n  </li>\n  <li>\n    <h3 id=\"Google-Cloud-Next\"><a href=\"#Google-Cloud-Next\" class=\"headerlink\" title=\"Google Cloud Next\"></a>Google\n      Cloud Next</h3>\n    <p>11 Oct 2018 | <strong>London</strong> | Diversity at Google Panel</p>\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Google Cloud Next 2018\",\n        \"startDate\": \"11/10/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Excel\",\n          \"address\": {\n            \"addressLocality\": \"London\",\n            \"addressCountry\": \"UK\"\n          }\n        }\n      }\n\n    </script>\n  </li>\n  <li>\n    <h3 id=\"YSE-Digital-Now\"><a href=\"#YSE-Digital-Now\" class=\"headerlink\" title=\"YSE Digital Now\"></a>YSE\n      Digital Now</h3>\n    <p>05 Oct 2018 | <strong>Amsterdam</strong> | Machine Learning at Google</p>\n  </li>\n  <li>\n    <h3 id=\"Digital-Wednesday\"><a href=\"#Digital-Wednesday\" class=\"headerlink\" title=\"Digital Wednesday\"></a>Digital\n      Wednesday</h3>\n    <p>26 Sept 2018 | <strong>Eindhoven</strong> | <a href=\"https://www.eventbrite.nl/e/tickets-digital-wednesday-siri-alexa-voice-marketing-gaat-nu-echt-beginnen-49869024595\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | Learn about Dialogflow and the Google Assistant</p>\n  </li>\n  <li>\n    <h3 id=\"Hackademy\"><a href=\"#Hackademy\" class=\"headerlink\" title=\"Hackademy\"></a>Hackademy</h3>\n    <p>20 July 2018 | <a href=\"https://t.co/K8MPbfQ3fG\" target=\"_blank\" rel=\"noopener\"></a><strong>Amsterdam</strong>\n      | Chatbot Hackathon</p>\n  </li>\n  <li>\n    <h3 id=\"DDMA\"><a href=\"#DDMA\" class=\"headerlink\" title=\"DDMA\"></a>DDMA</h3>\n    <p>26 June 2018 | <strong>Amsterdam</strong> | Learn about Dialogflow and\n      the Google Assistant</p>\n  </li>\n  <li>\n    <h3 id=\"GHG-Chatbot-event\"><a href=\"#GHG-Chatbot-event\" class=\"headerlink\" title=\"GHG Chatbot event\"></a>GHG\n      Chatbot event</h3>\n    <p>21 June 2018 | <strong>Amsterdam</strong> | Learn about Dialogflow and\n      the Google Assistant</p>\n  </li>\n  <li>\n    <h3 id=\"Women-Tech-Makers-event\"><a href=\"#Women-Tech-Makers-event\" class=\"headerlink\" title=\"Women Tech Makers event\"></a>Women\n      Tech Makers event</h3>\n    <p>3 May 2018 | <strong>Amsterdam</strong> | About Public Speaking</p>\n  </li>\n  <li>\n    <h3 id=\"CSA-Security-event\"><a href=\"#CSA-Security-event\" class=\"headerlink\" title=\"CSA Security event\"></a>CSA\n      Security event</h3>\n    <p>4 April 2018 | <strong>Amsterdam</strong> | Learn about DevOps at Google</p>\n  </li>\n</ul>\n<h2 id=\"2017\"><a href=\"#2017\" class=\"headerlink\" title=\"2017\"></a>2017</h2>\n<ul>\n  <li>\n    <h3 id=\"Google-Cloud-Summit-Munich\"><a href=\"#Google-Cloud-Summit-Munich\" class=\"headerlink\" title=\"Google Cloud Summit Munich\"></a>Google\n      Cloud Summit Munich</h3>\n    <p>6 Dec 2017 | <strong>Munich, Germany</strong> | <a href=\"https://cloudplatformonline.com/Summit-Munich-2017.html\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | Keynote: Machine Learning Vision API and DLP Demo.</p>\n  </li>\n  <li>\n    <h3 id=\"Dutch-Search-Awards\"><a href=\"#Dutch-Search-Awards\" class=\"headerlink\" title=\"Dutch Search Awards\"></a>Dutch\n      Search Awards</h3>\n    <p>Nov 2017 | <strong>Amsterdam, NL</strong> | <a href=\"https://dutchsearchawards.nl/sprekers\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | Machine Learning demo, how models work.</p>\n  </li>\n  <li>\n    <h3 id=\"Think-with-Google\"><a href=\"#Think-with-Google\" class=\"headerlink\" title=\"Think with Google\"></a>Think\n      with Google</h3>\n    <p>8 Nov 2017 | <strong>Amsterdam, NL</strong> | <a href=\"https://events.withgoogle.com/think-with-google-2018/program/#content\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Machine Learning, Twitter Analytics Sentiment demo</p>\n  </li>\n  <li>\n    <h3 id=\"Google-Cloud-Summit-Paris\"><a href=\"#Google-Cloud-Summit-Paris\" class=\"headerlink\" title=\"Google Cloud Summit Paris\"></a>Google\n      Cloud Summit Paris</h3>\n    <p>19 Oct 2017 | <strong>Paris, FR</strong> | <a href=\"https://cloudnext.withgoogle.com/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Keynote: Video Intelligence API demo &amp; Tech session</p>\n  </li>\n  <li>\n    <h3 id=\"Google-Cloud-On-Air-Webinar\"><a href=\"#Google-Cloud-On-Air-Webinar\" class=\"headerlink\" title=\"Google Cloud On Air Webinar\"></a>Google\n      Cloud On Air Webinar</h3>\n    <p>17 Oct 2017 | <strong>Online</strong> | <a href=\"https://cloudplatformonline.com/onair-emea.html\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Webinar about smart conversations and chatbots</p>\n  </li>\n  <li>\n    <h3 id=\"Financial-Services-Lighthouse\"><a href=\"#Financial-Services-Lighthouse\" class=\"headerlink\" title=\"Financial Services Lighthouse\"></a>Financial\n      Services Lighthouse</h3>\n    <p>13 Oct 2017 | <strong>Amsterdam, FR</strong> | <a href=\"https://cloudtricks.eu\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Introduction to Google Cloud</p>\n  </li>\n  <li>\n    <h3 id=\"Software-Circus\"><a href=\"#Software-Circus\" class=\"headerlink\" title=\"Software Circus\"></a>Software\n      Circus</h3>\n    <p>8 Sept 2017 | <strong>Amsterdam, NL</strong> | <a href=\"http://cloudbusting.softwarecircus.io/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Google Home workshop</p>\n  </li>\n  <li>\n    <h3 id=\"Faster-is-Better\"><a href=\"#Faster-is-Better\" class=\"headerlink\" title=\"Faster is Better\"></a>Faster\n      is Better</h3>\n    <p>8 Sept 2017 | <strong>Utrecht, NL</strong></p>\n    <p>Building software at Google scale, keynote</p>\n  </li>\n  <li>\n    <h3 id=\"LGBTech\"><a href=\"#LGBTech\" class=\"headerlink\" title=\"LGBTech\"></a>LGBTech</h3>\n    <p>4 Aug 2017 | <strong>Amsterdam, NL</strong></p>\n    <p>Presentation about Machine Learning</p>\n  </li>\n  <li>\n    <h3 id=\"Google-Cloud-Next-Amsterdam\"><a href=\"#Google-Cloud-Next-Amsterdam\" class=\"headerlink\" title=\"Google Cloud Next Amsterdam\"></a>Google\n      Cloud Next Amsterdam</h3>\n    <p>21 June 2017 | <strong>Amsterdam, NL</strong> | <a href=\"https://cloudnext.withgoogle.com/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Keynote, Leadercircle, Tech session</p>\n  </li>\n  <li>\n    <h3 id=\"IoT-Techday\"><a href=\"#IoT-Techday\" class=\"headerlink\" title=\"IoT Techday\"></a>IoT\n      Techday</h3>\n    <p>19 April 2017 | <strong>Utrecht, NL</strong> | <a href=\"http://iottechday.nl/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Workshop: Create the TV guide action for the Google Assistant with\n      API.AI and Cloud Functions.</p>\n  </li>\n</ul>\n<h2 id=\"2016\"><a href=\"#2016\" class=\"headerlink\" title=\"2016\"></a>2016</h2>\n<ul>\n  <li>\n    <h3 id=\"SenchaCon-2016\"><a href=\"#SenchaCon-2016\" class=\"headerlink\" title=\"SenchaCon 2016\"></a>SenchaCon\n      2016</h3>\n    <p>9 November 2016 | <strong>Las Vegas, USA</strong> | <a href=\"https://www.senchacon.com\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Presentation: Top 10 features ECMAScript 2015.</p>\n  </li>\n  <li>\n    <h3 id=\"AppsWorld-London-Sencha-AppCamp\"><a href=\"#AppsWorld-London-Sencha-AppCamp\" class=\"headerlink\" title=\"AppsWorld London: Sencha AppCamp\"></a>AppsWorld\n      London: Sencha AppCamp</h3>\n    <p>19 October 2016 | <strong>London, UK</strong> | <a href=\"https://tmt.knect365.com/apps-world/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Workshop: Build a universal Ext JS 6 app.</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Roadshow-Germany\"><a href=\"#Sencha-Roadshow-Germany\" class=\"headerlink\" title=\"Sencha Roadshow Germany\"></a>Sencha\n      Roadshow Germany</h3>\n    <p>22 September 2016 | <strong>Karlsruhe, Germany</strong> | <a href=\"https://www.sencha.com/company/roadshow/karlsruhe/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Presentation: Top 10 features ECMAScript 2015. <a href=\"https://speakerdeck.com/savelee/learn-the-top-10-best-es2015-features\" target=\"_blank\" rel=\"noopener\">(slides\n        available)</a></p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Roadshow-France\"><a href=\"#Sencha-Roadshow-France\" class=\"headerlink\" title=\"Sencha Roadshow France\"></a>Sencha\n      Roadshow France</h3>\n    <p>21 September 2016 | <strong>Paris, France</strong> | <a href=\"https://www.sencha.com/company/roadshow/paris/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Presentation: Top 10 features ECMAScript 2015. <a href=\"https://speakerdeck.com/savelee/learn-the-top-10-best-es2015-features\" target=\"_blank\" rel=\"noopener\">(slides\n        available)</a></p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Roadshow-UK\"><a href=\"#Sencha-Roadshow-UK\" class=\"headerlink\" title=\"Sencha Roadshow UK\"></a>Sencha\n      Roadshow UK</h3>\n    <p>20 September 2016 | <strong>London, UK</strong> | <a href=\"https://www.sencha.com/company/roadshow/london/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Presentation: Top 10 features ECMAScript 2015. <a href=\"https://speakerdeck.com/savelee/learn-the-top-10-best-es2015-features\" target=\"_blank\" rel=\"noopener\">(slides\n        available)</a></p>\n  </li>\n  <li>\n    <h3 id=\"AppsWorld-Berlin-Sencha-AppCamp\"><a href=\"#AppsWorld-Berlin-Sencha-AppCamp\" class=\"headerlink\" title=\"AppsWorld Berlin: Sencha AppCamp\"></a>AppsWorld\n      Berlin: Sencha AppCamp</h3>\n    <p>20 April 2016 | <strong>Berlin, Germany</strong> | <a href=\"https://germany.apps-world.net/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Workshop: Build a universal Ext JS 6 app.</p>\n  </li>\n  <li>\n    <h3 id=\"Appril-Festival\"><a href=\"#Appril-Festival\" class=\"headerlink\" title=\"Appril Festival\"></a>Appril\n      Festival</h3>\n    <p>15 April 2016 | <strong>Utrecht, The Netherlands</strong> | <a href=\"http://apprilfestival.com/programma/\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | <a href=\"https://speakerdeck.com/savelee/secrets-in-building-great-enterprise-apps\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Presentation: Let’s talk about enterprise apps! Often those apps don’t\n      live in an app store. They live in a private cloud or private network.\n      Maybe even secured and behind a firewall. You and I, might not even be\n      aware of these types of apps. You need to have experience, with building\n      complex applications like these. But that’s difficult, if you don’t\n      really see these apps in the wild. In this session, Lee Boonstra will\n      discuss why enterprise apps can be complex, and how you can build better\n      apps, with maintainability and scalability in mind!</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Roadshow-Stockholm\"><a href=\"#Sencha-Roadshow-Stockholm\" class=\"headerlink\" title=\"Sencha Roadshow Stockholm\"></a>Sencha\n      Roadshow Stockholm</h3>\n    <p>8 April 2016 | <strong>Stockholm, Sweden</strong> | <a href=\"https://www.sencha.com/company/roadshow\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-AppCamp-Milan\"><a href=\"#Sencha-AppCamp-Milan\" class=\"headerlink\" title=\"Sencha AppCamp Milan\"></a>Sencha\n      AppCamp Milan</h3>\n    <p>6 April 2016 | <strong>Milan, Italy</strong> | <a href=\"https://www.sencha.com/company/roadshow\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Workshop: Build a universal Ext JS 6 app.</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Roadshow-Milan\"><a href=\"#Sencha-Roadshow-Milan\" class=\"headerlink\" title=\"Sencha Roadshow Milan\"></a>Sencha\n      Roadshow Milan</h3>\n    <p>5 April 2016 | <strong>Milan, Italy</strong> | <a href=\"https://www.sencha.com/company/roadshow\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Roadshow-Munich\"><a href=\"#Sencha-Roadshow-Munich\" class=\"headerlink\" title=\"Sencha Roadshow Munich\"></a>Sencha\n      Roadshow Munich</h3>\n    <p>17 March 2016 | <strong>Munich, Germany</strong> | <a href=\"https://www.sencha.com/company/roadshow\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Roadshow-Paris\"><a href=\"#Sencha-Roadshow-Paris\" class=\"headerlink\" title=\"Sencha Roadshow Paris\"></a>Sencha\n      Roadshow Paris</h3>\n    <p>16 March 2016 | <strong>Paris, France</strong> | <a href=\"https://www.sencha.com/company/roadshow\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Roadshow-London\"><a href=\"#Sencha-Roadshow-London\" class=\"headerlink\" title=\"Sencha Roadshow London\"></a>Sencha\n      Roadshow London</h3>\n    <p>15 March 2016 | <strong>London, UK</strong> | <a href=\"https://www.sencha.com/company/roadshow\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n  </li>\n</ul>\n<h2 id=\"2015\"><a href=\"#2015\" class=\"headerlink\" title=\"2015\"></a>2015</h2>\n<ul>\n  <li>\n    <h3 id=\"AppsWorld-London\"><a href=\"#AppsWorld-London\" class=\"headerlink\" title=\"AppsWorld London\"></a>AppsWorld\n      London</h3>\n    <p>11-2015 | <strong>London, UK</strong> | <a href=\"http://world.apps-world.net/speaker/lee-boonstra/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n  </li>\n  <li>\n    <h3 id=\"London-JavaScript-Community\"><a href=\"#London-JavaScript-Community\" class=\"headerlink\" title=\"London JavaScript Community\"></a>London\n      JavaScript Community</h3>\n    <p>11-2015 | <strong>London, UK</strong> | <a href=\"http://www.meetup.com/London-JavaScript-Community/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Workshop: Build a universal Ext JS 6 app.</p>\n  </li>\n  <li>\n    <h3 id=\"Webinar-Secrets-to-building-great-looking-universal-apps\"><a href=\"#Webinar-Secrets-to-building-great-looking-universal-apps\" class=\"headerlink\" title=\"Webinar: Secrets to building great looking universal apps\"></a>Webinar:\n      Secrets to building great looking universal apps</h3>\n    <p>10-2015 | <strong>Online @Brighttalk</strong></p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Day-Zurich\"><a href=\"#Sencha-Day-Zurich\" class=\"headerlink\" title=\"Sencha Day Zurich\"></a>Sencha\n      Day Zurich</h3>\n    <p>10-2015 | <strong>Zurich, Switzerland</strong> | <a href=\"http://roadshow.senchacon.com/\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming,\n      Asynchronous Javascript</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Day-Stockholm\"><a href=\"#Sencha-Day-Stockholm\" class=\"headerlink\" title=\"Sencha Day Stockholm\"></a>Sencha\n      Day Stockholm</h3>\n    <p>9-2015 | <strong>Stockholm, Sweden</strong> | <a href=\"http://roadshow.senchacon.com/\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming,\n      Asynchronous Javascript, Web Application Manager</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Day-Copenhagen\"><a href=\"#Sencha-Day-Copenhagen\" class=\"headerlink\" title=\"Sencha Day Copenhagen\"></a>Sencha\n      Day Copenhagen</h3>\n    <p>9-2015 | <strong>Copenhagen, Denmark</strong> | <a href=\"http://roadshow.senchacon.com/\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming,\n      Asynchronous Javascript</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Day-Oslo\"><a href=\"#Sencha-Day-Oslo\" class=\"headerlink\" title=\"Sencha Day Oslo\"></a>Sencha\n      Day Oslo</h3>\n    <p>9-2015 | <strong>Oslo, Norway</strong> | <a href=\"http://roadshow.senchacon.com/\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming,\n      Asynchronous Javascript</p>\n  </li>\n  <li>\n    <h3 id=\"Devoxx-London\"><a href=\"#Devoxx-London\" class=\"headerlink\" title=\"Devoxx London\"></a>Devoxx\n      London</h3>\n    <p>6-2015 | <strong>London, UK</strong> | <a href=\"http://www.devoxx.com/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Topic: Using frameworks to avoid common pitfalls of app development</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Day-Milan\"><a href=\"#Sencha-Day-Milan\" class=\"headerlink\" title=\"Sencha Day Milan\"></a>Sencha\n      Day Milan</h3>\n    <p>6-2015 | <strong>Milan, Italy</strong> | <a href=\"http://roadshow.senchacon.com/\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Web\n      Application Manager</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Day-Amsterdam\"><a href=\"#Sencha-Day-Amsterdam\" class=\"headerlink\" title=\"Sencha Day Amsterdam\"></a>Sencha\n      Day Amsterdam</h3>\n    <p>6-2015 | <strong>Amsterdam, NL</strong> | <a href=\"http://roadshow.senchacon.com/\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Web\n      Application Manager</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Day-Karlsruhe\"><a href=\"#Sencha-Day-Karlsruhe\" class=\"headerlink\" title=\"Sencha Day Karlsruhe\"></a>Sencha\n      Day Karlsruhe</h3>\n    <p>5-2015 | <strong>Karlsruhe, Germany</strong> | <a href=\"http://roadshow.senchacon.com/\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Web\n      Application Manager</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Day-Paris\"><a href=\"#Sencha-Day-Paris\" class=\"headerlink\" title=\"Sencha Day Paris\"></a>Sencha\n      Day Paris</h3>\n    <p>5-2015 | <strong>Paris, France</strong> | <a href=\"http://roadshow.senchacon.com/\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Web\n      Application Manager</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Day-London\"><a href=\"#Sencha-Day-London\" class=\"headerlink\" title=\"Sencha Day London\"></a>Sencha\n      Day London</h3>\n    <p>5-2015 | <strong>London, UK</strong> | <a href=\"http://roadshow.senchacon.com/\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Web\n      Application Manager</p>\n  </li>\n  <li>\n    <h3 id=\"Appril-Festival-1\"><a href=\"#Appril-Festival-1\" class=\"headerlink\" title=\"Appril Festival\"></a>Appril\n      Festival</h3>\n    <p>4-2015 | <strong>Amsterdam, NL</strong> | <a href=\"http://apprilfestival.com/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Workshop: Build a mobile app within a day.</p>\n  </li>\n  <li>\n    <h3 id=\"AppsWorld-Berlin\"><a href=\"#AppsWorld-Berlin\" class=\"headerlink\" title=\"AppsWorld Berlin\"></a>AppsWorld\n      Berlin</h3>\n    <p>4-2015 | <strong>Berlin, Germany</strong> | <a href=\"https://www.apps-world.net/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Panel Discussion App Development</p>\n  </li>\n  <li>\n    <h3 id=\"SenchaCon-USA-2015\"><a href=\"#SenchaCon-USA-2015\" class=\"headerlink\" title=\"SenchaCon USA 2015\"></a>SenchaCon\n      USA 2015</h3>\n    <p>4-2015 | <strong>Silicon Valley, USAK</strong> | <a href=\"http://senchacon.com\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Topic: Advanced Theming techniques</p>\n  </li>\n</ul>\n<h2 id=\"2014\"><a href=\"#2014\" class=\"headerlink\" title=\"2014\"></a>2014</h2>\n<ul>\n  <li>\n    <h3 id=\"SenchaDay-2014\"><a href=\"#SenchaDay-2014\" class=\"headerlink\" title=\"SenchaDay 2014\"></a>SenchaDay\n      2014</h3>\n    <p>12-2014 | <strong>Karlsruhe Germany</strong> | <a href=\"http://www.senchaday.de/\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>3 Presentations: Building Ext JS 5 apps with Sencha Architect Optimizing\n      your current Ext JS applications for touch and tablets.<br>How to secure\n      your data with Sencha Space</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Workshop-Milan\"><a href=\"#Sencha-Workshop-Milan\" class=\"headerlink\" title=\"Sencha Workshop Milan\"></a>Sencha\n      Workshop Milan</h3>\n    <p>10-2014 | <strong>Milan IT</strong></p>\n    <p>Sencha Touch workshop, build the ATM finder with Sencha Architect for 40\n      students.</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Webcast-Webcast\"><a href=\"#Sencha-Webcast-Webcast\" class=\"headerlink\" title=\"Sencha Webcast Webcast\"></a>Sencha\n      Webcast Webcast</h3>\n    <p>08-2014 | <strong>Online</strong> | <a href=\"http://vimeo.com/107524499\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Presentation: Optimizing Your Current Ext JS 4 Applications for Touch\n      and Tablets with Ext JS 5<br>Would you like your Ext JS application to\n      support Touch and Tablet devices, but don’t know where to start? Please\n      join us as Lee Boonstra, Technical Trainer at Sencha shares best\n      practices and techniques for optimizing your existing Ext JS applications\n      with the new touch gestures introduced in Ext JS 5.</p>\n  </li>\n  <li>\n    <h3 id=\"O’Reily-Webcast\"><a href=\"#O’Reily-Webcast\" class=\"headerlink\" title=\"O’Reily Webcast\"></a>O’Reily\n      Webcast</h3>\n    <p>08-2014 | <strong>Online</strong> | <a href=\"http://www.oreilly.com/pub/e/3100\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Presentation: Apps in the multi-device world.<br>We live in a\n      multi-device world of phones, tablets, TVs, in-car navs, smart\n      watches….And there is one thing all these devices have in common: HTML5.\n      In this session Lee Boonstra, technical trainer at Sencha, will discuss\n      some of the challenges and opportunities of developing for a multi-device\n      world and how Sencha can help you create better experiences. She will\n      also provide some inspiring client examples and case studies.</p>\n  </li>\n  <li>\n    <h3 id=\"Dutch-Mobile-Conference-2014\"><a href=\"#Dutch-Mobile-Conference-2014\" class=\"headerlink\" title=\"Dutch Mobile Conference 2014\"></a>Dutch\n      Mobile Conference 2014</h3>\n    <p>06-2014 | <strong>Rai Amsterdam NL</strong></p>\n    <p>Learn how to build and deploy powerful mobile apps quickly for iOS,\n      Android, Blackberry 10, and Windows Phone 8 with Sencha Touch and Sencha\n      Architect. Register at <a href=\"http://www.mobileconference.nl/speakers#lee-boonstra\" target=\"_blank\" rel=\"noopener\">mobileconference.nl/</a>.</p>\n  </li>\n  <li>\n    <h3 id=\"Appsterdam-WWLL\"><a href=\"#Appsterdam-WWLL\" class=\"headerlink\" title=\"Appsterdam WWLL\"></a>Appsterdam\n      WWLL</h3>\n    <p>04-2014 | <strong>Amsterdam NL</strong></p>\n    <p>Presentation: Apps in the multi-device world.<br>We live in a\n      multi-device world of phones, tablets, TVs, in-car navs, smart\n      watches….And there is one thing all these devices have in common: HTML5.\n      In this session Lee Boonstra, technical trainer at Sencha, will discuss\n      some of the challenges and opportunities of developing for a multi-device\n      world and how Sencha can help you create better experiences. She will\n      also provide some inspiring client examples and case studies.</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Paris-Meetup-Group\"><a href=\"#Sencha-Paris-Meetup-Group\" class=\"headerlink\" title=\"Sencha Paris Meetup Group\"></a>Sencha\n      Paris Meetup Group</h3>\n    <p>04-2014 | <strong>Online</strong> | <a href=\"https://speakerdeck.com/savelee/paris-sencha-meetup-apps-for-the-multi-device-world\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Presentation: Apps in the multi-device world.<br>We live in a\n      multi-device world of phones, tablets, TVs, in-car navs, smart\n      watches….And there is one thing all these devices have in common: HTML5.\n      In this session Lee Boonstra, technical trainer at Sencha, will discuss\n      some of the challenges and opportunities of developing for a multi-device\n      world and how Sencha can help you create better experiences. She will\n      also provide some inspiring client examples and case studies.</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Workshop-Milan-1\"><a href=\"#Sencha-Workshop-Milan-1\" class=\"headerlink\" title=\"Sencha Workshop Milan\"></a>Sencha\n      Workshop Milan</h3>\n    <p>03-2014 | <strong>Milan IT</strong></p>\n    <p>Sencha Touch workshop, build the ATM finder with Sencha Architect for 80\n      students.</p>\n  </li>\n  <li>\n    <h3 id=\"FITC-Conference\"><a href=\"#FITC-Conference\" class=\"headerlink\" title=\"FITC Conference\"></a>FITC\n      Conference</h3>\n    <p>02-2014 | <strong>Felix Mertis Amsterdam NL</strong> | <a href=\"https://speakerdeck.com/savelee/apps-for-the-multi-device-world\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Presentation: Apps in the multi-device world.<br>We live in a\n      multi-device world of phones, tablets, TVs, in-car navs, smart\n      watches….And there is one thing all these devices have in common: HTML5.\n      In this session Lee Boonstra, technical trainer at Sencha, will discuss\n      some of the challenges and opportunities of developing for a multi-device\n      world and how Sencha can help you create better experiences. She will\n      also provide some inspiring client examples and case studies.</p>\n  </li>\n  <li>\n    <h3 id=\"Amsterdam-Sencha-Meetup-Group\"><a href=\"#Amsterdam-Sencha-Meetup-Group\" class=\"headerlink\" title=\"Amsterdam Sencha Meetup Group\"></a>Amsterdam\n      Sencha Meetup Group</h3>\n    <p>01-2014 | <strong>Sencha Office, Amsterdam NL</strong></p>\n    <p>Sencha Touch workshop, build the ATM finder with Sencha Architect.</p>\n  </li>\n  <li>\n    <h3 id=\"Amsterdam-Sencha-Meetup-Group-1\"><a href=\"#Amsterdam-Sencha-Meetup-Group-1\" class=\"headerlink\" title=\"Amsterdam Sencha Meetup Group\"></a>Amsterdam\n      Sencha Meetup Group</h3>\n    <p>01-2014 | <strong>Sencha Office, Amsterdam NL</strong></p>\n    <p>Presentation: Re-skinning Your Apps Just Got Easier with Sencha\n      Architect 3<br>Ever had to reskin UI components to match a visual design\n      or brand standard? The new Themes feature in Architect 3 makes changing\n      the look and feel of your app easier than ever. If you’re familiar with\n      Sass/SCSS, you’ll find this new feature a huge time saver. Architect 3\n      now allows you to locate and change the different variables and rules\n      that define the visual appearance of the UI components in Ext JS and\n      Sencha Touch.</p>\n  </li>\n</ul>\n<h2 id=\"2013\"><a href=\"#2013\" class=\"headerlink\" title=\"2013\"></a>2013</h2>\n<ul>\n  <li>\n    <h3 id=\"Sencha-Webinar\"><a href=\"#Sencha-Webinar\" class=\"headerlink\" title=\"Sencha Webinar\"></a>Sencha\n      Webinar</h3>\n    <p>12-2013 | <strong>Online</strong> | <a href=\"http://vimeo.com/81745175\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Presentation: Re-skinning Your Apps Just Got Easier with Sencha\n      Architect 3<br>Ever had to reskin UI components to match a visual design\n      or brand standard? The new Themes feature in Architect 3 makes changing\n      the look and feel of your app easier than ever. If you’re familiar with\n      Sass/SCSS, you’ll find this new feature a huge time saver. Architect 3\n      now allows you to locate and change the different variables and rules\n      that define the visual appearance of the UI components in Ext JS and\n      Sencha Touch.</p>\n  </li>\n  <li>\n    <h3 id=\"SenchaCon-2013\"><a href=\"#SenchaCon-2013\" class=\"headerlink\" title=\"SenchaCon 2013\"></a>SenchaCon\n      2013</h3>\n    <p>07-2013 | <strong>Orlando Florida USA</strong></p>\n    <p>Sencha Touch / Sencha Architect App Camp for hundreds of students.</p>\n  </li>\n  <li>\n    <h3 id=\"Appsterdam-WWLL-1\"><a href=\"#Appsterdam-WWLL-1\" class=\"headerlink\" title=\"Appsterdam WWLL\"></a>Appsterdam\n      WWLL</h3>\n    <p>07-2013 | <strong>Amsterdam NL</strong> | <a href=\"https://speakerdeck.com/savelee/appsterdam-wwll-sencha-touch\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Presentation: How to build highly scalable cross-platform mobile apps.</p>\n  </li>\n  <li>\n    <h3 id=\"Dutch-Mobile-Conference-2013\"><a href=\"#Dutch-Mobile-Conference-2013\" class=\"headerlink\" title=\"Dutch Mobile Conference 2013\"></a>Dutch\n      Mobile Conference 2013</h3>\n    <p>06-2013 | <strong>Rai Amsterdam NL</strong></p>\n    <p>Sencha Touch workshop, build a utility app with Sencha Cmd.</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Frankfurt-Meetup-Group\"><a href=\"#Sencha-Frankfurt-Meetup-Group\" class=\"headerlink\" title=\"Sencha Frankfurt Meetup Group\"></a>Sencha\n      Frankfurt Meetup Group</h3>\n    <p>02-2013 | <strong>Frankfurt DE</strong> | <a href=\"https://speakerdeck.com/savelee/an-introduction-to-sencha-cmd-frankfurt-sencha-meetup\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Presentation: An introduction to Sencha Cmd.</p>\n  </li>\n</ul>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p><img src=\"/images/leeboonstra-speaker-500x351.png\" width=\"400\" class=\"float-right border\" alt=\"Lee Speaking\"></p>\n<p>Worked in the past as a technical trainer, now Sales Engineer at Google. I’m\n  a public speaker at conferences and events. Below is a list of my past\n  sessions.</p>\n<p>Check out my Speaker Deck, for an overview of all my presentations: <a href=\"https://speakerdeck.com/savelee/\" target=\"_blank\" rel=\"noopener\">Speaker\n    Deck</a>.</p>\n<p>Topics I speak about: Google, Google Cloud, Cloud Computing, Machine\n  Learning for Developers, Chatbots, Building software at Google scale,\n  (Mobile) app development and deployment, JavaScript, HTML5 app development\n  (Cordova / PhoneGap / HTML5 frameworks) &amp; advanced theming (Sass/CSS3).</p>\n<p></p>\n<p>&nbsp;</p>\n<p></p>\n<p></p>\n<p>&nbsp;</p>\n<p></p>\n<hr>\n<h2 id=\"2019\"><a href=\"#2019\" class=\"headerlink\" title=\"2019\"></a>2019</h2>\n<ul>\n  <li>\n    <h3 id=\"Friends-of-Search\"><a href=\"#Friends-of-Search\" class=\"headerlink\" title=\"Friends of Search\"></a>Friends\n      of Search</h3>\n    <p>6 Feb 2019 | <strong>Kromhouthallen, Amsterdam</strong> | <a href=\"https://friendsofsearch.nl/\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | Keynote: Google Assistant</p>\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Friends of Search\",\n        \"url\": \"https://friendsofsearch.nl/\",\n        \"startDate\": \"06/02/2019\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Kromhouthallen\",\n          \"address\": {\n            \"addressLocality\": \"Amsterdam\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }\n\n    </script>\n  </li>\n</ul>\n<h2 id=\"2018\"><a href=\"#2018\" class=\"headerlink\" title=\"2018\"></a>2018</h2>\n<ul>\n  <li>\n    <h3 id=\"Startup-Roadshow\"><a href=\"#Startup-Roadshow\" class=\"headerlink\" title=\"Startup Roadshow\"></a>Startup\n      Roadshow</h3>\n    <p>11 Dec 2018 | <strong>London, UK</strong> | <a href=\"https://events.withgoogle.com/google-cloud-startup-roadshow-london/#content\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | Build real world applications with Google Cloud.</p>\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Startup Roadshow\",\n        \"url\": \"https://events.withgoogle.com/google-cloud-startup-roadshow-london/#content\",\n        \"startDate\": \"11/12/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Google Academy\",\n          \"address\": {\n            \"addressLocality\": \"London\",\n            \"addressCountry\": \"UK\"\n          }\n        }\n      }\n\n    </script>\n  </li>\n  <li>\n    <h3 id=\"Schiphol-Developers-Group\"><a href=\"#Schiphol-Developers-Group\" class=\"headerlink\" title=\"Schiphol Developers Group\"></a>Schiphol\n      Developers Group</h3>\n    <p>06 Dec 2018 | <strong>Amsterdam</strong> | <a href=\"https://www.meetup.com/nl-NL/schiphol-developers/events/256537947/\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | Machine Learning for JavaScript Developers</p>\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Schiphol Developers Group\",\n        \"url\": \"https://www.meetup.com/nl-NL/schiphol-developers/events/256537947/\",\n        \"startDate\": \"06/12/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"address\": {\n            \"addressLocality\": \"Schipholrijk\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }\n\n    </script>\n  </li>\n  <li>\n    <h3 id=\"Dialogflow-Day\"><a href=\"#Dialogflow-Day\" class=\"headerlink\" title=\"Dialogflow Day\"></a>Dialogflow\n      Day</h3>\n    <p>04 Dec 2018 | <strong>Amsterdam</strong> | Contact Center AI</p>\n  </li>\n  <li>\n    <h3 id=\"Google-Cloud-Summit-Amsterdam\"><a href=\"#Google-Cloud-Summit-Amsterdam\" class=\"headerlink\" title=\"Google Cloud Summit Amsterdam\"></a>Google\n      Cloud Summit Amsterdam</h3>\n    <p>28 Nov 2018 | <strong>Zaandam</strong> | <a href=\"https://cloudplatformonline.com/2018-Summit-Amsterdam-EN-Home.html\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | Keynote: AutoML Demo + Contact Center AI Breakout session</p>\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Google Cloud Summit Amsterdam\",\n        \"url\": \"https://cloudplatformonline.com/2018-Summit-Amsterdam-EN-Home.html\",\n        \"startDate\": \"28/11/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Taets Gallery\",\n          \"address\": {\n            \"addressLocality\": \"Zaandam\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }\n\n    </script>\n  </li>\n  <li>\n    <h3 id=\"KSF-Jaarcongres-2018\"><a href=\"#KSF-Jaarcongres-2018\" class=\"headerlink\" title=\"KSF Jaarcongres 2018\"></a>KSF\n      Jaarcongres 2018</h3>\n    <p>20 Nov 2018 | <strong>Almere</strong> | <a href=\"https://klantenservicefederatie.nl/\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | Session about Contact Center AI</p>\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"KSF Jaarcongres 2018\",\n        \"url\": \"https://klantenservicefederatie.nl/\",\n        \"startDate\": \"20/11/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Kaf\",\n          \"address\": {\n            \"addressLocality\": \"Almere\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }\n\n    </script>\n  </li>\n  <li>\n    <h3 id=\"FrontMania-Conference\"><a href=\"#FrontMania-Conference\" class=\"headerlink\" title=\"FrontMania Conference\"></a>FrontMania\n      Conference</h3>\n    <p>16 Nov 2018 | <strong>Utrecht</strong> | <a href=\"https://frontmania.com/\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | Keynote: Machine Learning for JavaScript developers</p>\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"FrontMania Conference\",\n        \"url\": \"https://frontmania.com/\",\n        \"startDate\": \"16/11/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Rabobank\",\n          \"address\": {\n            \"addressLocality\": \"Utrecht\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }\n\n    </script>\n  </li>\n  <li>\n    <h3 id=\"Chatathon\"><a href=\"#Chatathon\" class=\"headerlink\" title=\"Chatathon\"></a>Chatathon</h3>\n    <p>28 Oct 2018 | <strong>Brussel</strong> | Chatbot hackathon - trainer</p>\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Chatbot Hackathon\",\n        \"startDate\": \"28/10/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Google Brussel\",\n          \"address\": {\n            \"addressLocality\": \"Brussel\",\n            \"addressCountry\": \"BE\"\n          }\n        }\n      }\n\n    </script>\n  </li>\n  <li>\n    <h3 id=\"GoDataFest-2018\"><a href=\"#GoDataFest-2018\" class=\"headerlink\" title=\"GoDataFest 2018\"></a>GoDataFest\n      2018</h3>\n    <p>18 Oct 2018 | <strong>Amsterdam</strong> | <a href=\"https://www.godatafest.com/\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | Learn about Dialogflow and the Google Assistant</p>\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"GoDataFest 2018\",\n        \"url\": \"https://www.godatafest.com/\",\n        \"startDate\": \"18/10/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"GoDataDriven\",\n          \"address\": {\n            \"addressLocality\": \"Amsterdam\",\n            \"addressCountry\": \"NL\"\n          }\n        }\n      }\n\n    </script>\n  </li>\n  <li>\n    <h3 id=\"Google-Cloud-Next\"><a href=\"#Google-Cloud-Next\" class=\"headerlink\" title=\"Google Cloud Next\"></a>Google\n      Cloud Next</h3>\n    <p>11 Oct 2018 | <strong>London</strong> | Diversity at Google Panel</p>\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://www.schema.org\",\n        \"@type\": \"Event\",\n        \"name\": \"Google Cloud Next 2018\",\n        \"startDate\": \"11/10/2018\",\n        \"location\": {\n          \"@type\": \"Place\",\n          \"name\": \"Excel\",\n          \"address\": {\n            \"addressLocality\": \"London\",\n            \"addressCountry\": \"UK\"\n          }\n        }\n      }\n\n    </script>\n  </li>\n  <li>\n    <h3 id=\"YSE-Digital-Now\"><a href=\"#YSE-Digital-Now\" class=\"headerlink\" title=\"YSE Digital Now\"></a>YSE\n      Digital Now</h3>\n    <p>05 Oct 2018 | <strong>Amsterdam</strong> | Machine Learning at Google</p>\n  </li>\n  <li>\n    <h3 id=\"Digital-Wednesday\"><a href=\"#Digital-Wednesday\" class=\"headerlink\" title=\"Digital Wednesday\"></a>Digital\n      Wednesday</h3>\n    <p>26 Sept 2018 | <strong>Eindhoven</strong> | <a href=\"https://www.eventbrite.nl/e/tickets-digital-wednesday-siri-alexa-voice-marketing-gaat-nu-echt-beginnen-49869024595\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | Learn about Dialogflow and the Google Assistant</p>\n  </li>\n  <li>\n    <h3 id=\"Hackademy\"><a href=\"#Hackademy\" class=\"headerlink\" title=\"Hackademy\"></a>Hackademy</h3>\n    <p>20 July 2018 | <a href=\"https://t.co/K8MPbfQ3fG\" target=\"_blank\" rel=\"noopener\"></a><strong>Amsterdam</strong>\n      | Chatbot Hackathon</p>\n  </li>\n  <li>\n    <h3 id=\"DDMA\"><a href=\"#DDMA\" class=\"headerlink\" title=\"DDMA\"></a>DDMA</h3>\n    <p>26 June 2018 | <strong>Amsterdam</strong> | Learn about Dialogflow and\n      the Google Assistant</p>\n  </li>\n  <li>\n    <h3 id=\"GHG-Chatbot-event\"><a href=\"#GHG-Chatbot-event\" class=\"headerlink\" title=\"GHG Chatbot event\"></a>GHG\n      Chatbot event</h3>\n    <p>21 June 2018 | <strong>Amsterdam</strong> | Learn about Dialogflow and\n      the Google Assistant</p>\n  </li>\n  <li>\n    <h3 id=\"Women-Tech-Makers-event\"><a href=\"#Women-Tech-Makers-event\" class=\"headerlink\" title=\"Women Tech Makers event\"></a>Women\n      Tech Makers event</h3>\n    <p>3 May 2018 | <strong>Amsterdam</strong> | About Public Speaking</p>\n  </li>\n  <li>\n    <h3 id=\"CSA-Security-event\"><a href=\"#CSA-Security-event\" class=\"headerlink\" title=\"CSA Security event\"></a>CSA\n      Security event</h3>\n    <p>4 April 2018 | <strong>Amsterdam</strong> | Learn about DevOps at Google</p>\n  </li>\n</ul>\n<h2 id=\"2017\"><a href=\"#2017\" class=\"headerlink\" title=\"2017\"></a>2017</h2>\n<ul>\n  <li>\n    <h3 id=\"Google-Cloud-Summit-Munich\"><a href=\"#Google-Cloud-Summit-Munich\" class=\"headerlink\" title=\"Google Cloud Summit Munich\"></a>Google\n      Cloud Summit Munich</h3>\n    <p>6 Dec 2017 | <strong>Munich, Germany</strong> | <a href=\"https://cloudplatformonline.com/Summit-Munich-2017.html\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | Keynote: Machine Learning Vision API and DLP Demo.</p>\n  </li>\n  <li>\n    <h3 id=\"Dutch-Search-Awards\"><a href=\"#Dutch-Search-Awards\" class=\"headerlink\" title=\"Dutch Search Awards\"></a>Dutch\n      Search Awards</h3>\n    <p>Nov 2017 | <strong>Amsterdam, NL</strong> | <a href=\"https://dutchsearchawards.nl/sprekers\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | Machine Learning demo, how models work.</p>\n  </li>\n  <li>\n    <h3 id=\"Think-with-Google\"><a href=\"#Think-with-Google\" class=\"headerlink\" title=\"Think with Google\"></a>Think\n      with Google</h3>\n    <p>8 Nov 2017 | <strong>Amsterdam, NL</strong> | <a href=\"https://events.withgoogle.com/think-with-google-2018/program/#content\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Machine Learning, Twitter Analytics Sentiment demo</p>\n  </li>\n  <li>\n    <h3 id=\"Google-Cloud-Summit-Paris\"><a href=\"#Google-Cloud-Summit-Paris\" class=\"headerlink\" title=\"Google Cloud Summit Paris\"></a>Google\n      Cloud Summit Paris</h3>\n    <p>19 Oct 2017 | <strong>Paris, FR</strong> | <a href=\"https://cloudnext.withgoogle.com/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Keynote: Video Intelligence API demo &amp; Tech session</p>\n  </li>\n  <li>\n    <h3 id=\"Google-Cloud-On-Air-Webinar\"><a href=\"#Google-Cloud-On-Air-Webinar\" class=\"headerlink\" title=\"Google Cloud On Air Webinar\"></a>Google\n      Cloud On Air Webinar</h3>\n    <p>17 Oct 2017 | <strong>Online</strong> | <a href=\"https://cloudplatformonline.com/onair-emea.html\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Webinar about smart conversations and chatbots</p>\n  </li>\n  <li>\n    <h3 id=\"Financial-Services-Lighthouse\"><a href=\"#Financial-Services-Lighthouse\" class=\"headerlink\" title=\"Financial Services Lighthouse\"></a>Financial\n      Services Lighthouse</h3>\n    <p>13 Oct 2017 | <strong>Amsterdam, FR</strong> | <a href=\"https://cloudtricks.eu\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Introduction to Google Cloud</p>\n  </li>\n  <li>\n    <h3 id=\"Software-Circus\"><a href=\"#Software-Circus\" class=\"headerlink\" title=\"Software Circus\"></a>Software\n      Circus</h3>\n    <p>8 Sept 2017 | <strong>Amsterdam, NL</strong> | <a href=\"http://cloudbusting.softwarecircus.io/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Google Home workshop</p>\n  </li>\n  <li>\n    <h3 id=\"Faster-is-Better\"><a href=\"#Faster-is-Better\" class=\"headerlink\" title=\"Faster is Better\"></a>Faster\n      is Better</h3>\n    <p>8 Sept 2017 | <strong>Utrecht, NL</strong></p>\n    <p>Building software at Google scale, keynote</p>\n  </li>\n  <li>\n    <h3 id=\"LGBTech\"><a href=\"#LGBTech\" class=\"headerlink\" title=\"LGBTech\"></a>LGBTech</h3>\n    <p>4 Aug 2017 | <strong>Amsterdam, NL</strong></p>\n    <p>Presentation about Machine Learning</p>\n  </li>\n  <li>\n    <h3 id=\"Google-Cloud-Next-Amsterdam\"><a href=\"#Google-Cloud-Next-Amsterdam\" class=\"headerlink\" title=\"Google Cloud Next Amsterdam\"></a>Google\n      Cloud Next Amsterdam</h3>\n    <p>21 June 2017 | <strong>Amsterdam, NL</strong> | <a href=\"https://cloudnext.withgoogle.com/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Keynote, Leadercircle, Tech session</p>\n  </li>\n  <li>\n    <h3 id=\"IoT-Techday\"><a href=\"#IoT-Techday\" class=\"headerlink\" title=\"IoT Techday\"></a>IoT\n      Techday</h3>\n    <p>19 April 2017 | <strong>Utrecht, NL</strong> | <a href=\"http://iottechday.nl/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Workshop: Create the TV guide action for the Google Assistant with\n      API.AI and Cloud Functions.</p>\n  </li>\n</ul>\n<h2 id=\"2016\"><a href=\"#2016\" class=\"headerlink\" title=\"2016\"></a>2016</h2>\n<ul>\n  <li>\n    <h3 id=\"SenchaCon-2016\"><a href=\"#SenchaCon-2016\" class=\"headerlink\" title=\"SenchaCon 2016\"></a>SenchaCon\n      2016</h3>\n    <p>9 November 2016 | <strong>Las Vegas, USA</strong> | <a href=\"https://www.senchacon.com\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Presentation: Top 10 features ECMAScript 2015.</p>\n  </li>\n  <li>\n    <h3 id=\"AppsWorld-London-Sencha-AppCamp\"><a href=\"#AppsWorld-London-Sencha-AppCamp\" class=\"headerlink\" title=\"AppsWorld London: Sencha AppCamp\"></a>AppsWorld\n      London: Sencha AppCamp</h3>\n    <p>19 October 2016 | <strong>London, UK</strong> | <a href=\"https://tmt.knect365.com/apps-world/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Workshop: Build a universal Ext JS 6 app.</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Roadshow-Germany\"><a href=\"#Sencha-Roadshow-Germany\" class=\"headerlink\" title=\"Sencha Roadshow Germany\"></a>Sencha\n      Roadshow Germany</h3>\n    <p>22 September 2016 | <strong>Karlsruhe, Germany</strong> | <a href=\"https://www.sencha.com/company/roadshow/karlsruhe/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Presentation: Top 10 features ECMAScript 2015. <a href=\"https://speakerdeck.com/savelee/learn-the-top-10-best-es2015-features\" target=\"_blank\" rel=\"noopener\">(slides\n        available)</a></p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Roadshow-France\"><a href=\"#Sencha-Roadshow-France\" class=\"headerlink\" title=\"Sencha Roadshow France\"></a>Sencha\n      Roadshow France</h3>\n    <p>21 September 2016 | <strong>Paris, France</strong> | <a href=\"https://www.sencha.com/company/roadshow/paris/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Presentation: Top 10 features ECMAScript 2015. <a href=\"https://speakerdeck.com/savelee/learn-the-top-10-best-es2015-features\" target=\"_blank\" rel=\"noopener\">(slides\n        available)</a></p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Roadshow-UK\"><a href=\"#Sencha-Roadshow-UK\" class=\"headerlink\" title=\"Sencha Roadshow UK\"></a>Sencha\n      Roadshow UK</h3>\n    <p>20 September 2016 | <strong>London, UK</strong> | <a href=\"https://www.sencha.com/company/roadshow/london/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Presentation: Top 10 features ECMAScript 2015. <a href=\"https://speakerdeck.com/savelee/learn-the-top-10-best-es2015-features\" target=\"_blank\" rel=\"noopener\">(slides\n        available)</a></p>\n  </li>\n  <li>\n    <h3 id=\"AppsWorld-Berlin-Sencha-AppCamp\"><a href=\"#AppsWorld-Berlin-Sencha-AppCamp\" class=\"headerlink\" title=\"AppsWorld Berlin: Sencha AppCamp\"></a>AppsWorld\n      Berlin: Sencha AppCamp</h3>\n    <p>20 April 2016 | <strong>Berlin, Germany</strong> | <a href=\"https://germany.apps-world.net/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Workshop: Build a universal Ext JS 6 app.</p>\n  </li>\n  <li>\n    <h3 id=\"Appril-Festival\"><a href=\"#Appril-Festival\" class=\"headerlink\" title=\"Appril Festival\"></a>Appril\n      Festival</h3>\n    <p>15 April 2016 | <strong>Utrecht, The Netherlands</strong> | <a href=\"http://apprilfestival.com/programma/\" target=\"_blank\" rel=\"noopener\">Website</a>\n      | <a href=\"https://speakerdeck.com/savelee/secrets-in-building-great-enterprise-apps\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Presentation: Let’s talk about enterprise apps! Often those apps don’t\n      live in an app store. They live in a private cloud or private network.\n      Maybe even secured and behind a firewall. You and I, might not even be\n      aware of these types of apps. You need to have experience, with building\n      complex applications like these. But that’s difficult, if you don’t\n      really see these apps in the wild. In this session, Lee Boonstra will\n      discuss why enterprise apps can be complex, and how you can build better\n      apps, with maintainability and scalability in mind!</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Roadshow-Stockholm\"><a href=\"#Sencha-Roadshow-Stockholm\" class=\"headerlink\" title=\"Sencha Roadshow Stockholm\"></a>Sencha\n      Roadshow Stockholm</h3>\n    <p>8 April 2016 | <strong>Stockholm, Sweden</strong> | <a href=\"https://www.sencha.com/company/roadshow\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-AppCamp-Milan\"><a href=\"#Sencha-AppCamp-Milan\" class=\"headerlink\" title=\"Sencha AppCamp Milan\"></a>Sencha\n      AppCamp Milan</h3>\n    <p>6 April 2016 | <strong>Milan, Italy</strong> | <a href=\"https://www.sencha.com/company/roadshow\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Workshop: Build a universal Ext JS 6 app.</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Roadshow-Milan\"><a href=\"#Sencha-Roadshow-Milan\" class=\"headerlink\" title=\"Sencha Roadshow Milan\"></a>Sencha\n      Roadshow Milan</h3>\n    <p>5 April 2016 | <strong>Milan, Italy</strong> | <a href=\"https://www.sencha.com/company/roadshow\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Roadshow-Munich\"><a href=\"#Sencha-Roadshow-Munich\" class=\"headerlink\" title=\"Sencha Roadshow Munich\"></a>Sencha\n      Roadshow Munich</h3>\n    <p>17 March 2016 | <strong>Munich, Germany</strong> | <a href=\"https://www.sencha.com/company/roadshow\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Roadshow-Paris\"><a href=\"#Sencha-Roadshow-Paris\" class=\"headerlink\" title=\"Sencha Roadshow Paris\"></a>Sencha\n      Roadshow Paris</h3>\n    <p>16 March 2016 | <strong>Paris, France</strong> | <a href=\"https://www.sencha.com/company/roadshow\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Roadshow-London\"><a href=\"#Sencha-Roadshow-London\" class=\"headerlink\" title=\"Sencha Roadshow London\"></a>Sencha\n      Roadshow London</h3>\n    <p>15 March 2016 | <strong>London, UK</strong> | <a href=\"https://www.sencha.com/company/roadshow\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n  </li>\n</ul>\n<h2 id=\"2015\"><a href=\"#2015\" class=\"headerlink\" title=\"2015\"></a>2015</h2>\n<ul>\n  <li>\n    <h3 id=\"AppsWorld-London\"><a href=\"#AppsWorld-London\" class=\"headerlink\" title=\"AppsWorld London\"></a>AppsWorld\n      London</h3>\n    <p>11-2015 | <strong>London, UK</strong> | <a href=\"http://world.apps-world.net/speaker/lee-boonstra/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n  </li>\n  <li>\n    <h3 id=\"London-JavaScript-Community\"><a href=\"#London-JavaScript-Community\" class=\"headerlink\" title=\"London JavaScript Community\"></a>London\n      JavaScript Community</h3>\n    <p>11-2015 | <strong>London, UK</strong> | <a href=\"http://www.meetup.com/London-JavaScript-Community/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Workshop: Build a universal Ext JS 6 app.</p>\n  </li>\n  <li>\n    <h3 id=\"Webinar-Secrets-to-building-great-looking-universal-apps\"><a href=\"#Webinar-Secrets-to-building-great-looking-universal-apps\" class=\"headerlink\" title=\"Webinar: Secrets to building great looking universal apps\"></a>Webinar:\n      Secrets to building great looking universal apps</h3>\n    <p>10-2015 | <strong>Online @Brighttalk</strong></p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Day-Zurich\"><a href=\"#Sencha-Day-Zurich\" class=\"headerlink\" title=\"Sencha Day Zurich\"></a>Sencha\n      Day Zurich</h3>\n    <p>10-2015 | <strong>Zurich, Switzerland</strong> | <a href=\"http://roadshow.senchacon.com/\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming,\n      Asynchronous Javascript</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Day-Stockholm\"><a href=\"#Sencha-Day-Stockholm\" class=\"headerlink\" title=\"Sencha Day Stockholm\"></a>Sencha\n      Day Stockholm</h3>\n    <p>9-2015 | <strong>Stockholm, Sweden</strong> | <a href=\"http://roadshow.senchacon.com/\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming,\n      Asynchronous Javascript, Web Application Manager</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Day-Copenhagen\"><a href=\"#Sencha-Day-Copenhagen\" class=\"headerlink\" title=\"Sencha Day Copenhagen\"></a>Sencha\n      Day Copenhagen</h3>\n    <p>9-2015 | <strong>Copenhagen, Denmark</strong> | <a href=\"http://roadshow.senchacon.com/\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming,\n      Asynchronous Javascript</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Day-Oslo\"><a href=\"#Sencha-Day-Oslo\" class=\"headerlink\" title=\"Sencha Day Oslo\"></a>Sencha\n      Day Oslo</h3>\n    <p>9-2015 | <strong>Oslo, Norway</strong> | <a href=\"http://roadshow.senchacon.com/\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming,\n      Asynchronous Javascript</p>\n  </li>\n  <li>\n    <h3 id=\"Devoxx-London\"><a href=\"#Devoxx-London\" class=\"headerlink\" title=\"Devoxx London\"></a>Devoxx\n      London</h3>\n    <p>6-2015 | <strong>London, UK</strong> | <a href=\"http://www.devoxx.com/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Topic: Using frameworks to avoid common pitfalls of app development</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Day-Milan\"><a href=\"#Sencha-Day-Milan\" class=\"headerlink\" title=\"Sencha Day Milan\"></a>Sencha\n      Day Milan</h3>\n    <p>6-2015 | <strong>Milan, Italy</strong> | <a href=\"http://roadshow.senchacon.com/\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Web\n      Application Manager</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Day-Amsterdam\"><a href=\"#Sencha-Day-Amsterdam\" class=\"headerlink\" title=\"Sencha Day Amsterdam\"></a>Sencha\n      Day Amsterdam</h3>\n    <p>6-2015 | <strong>Amsterdam, NL</strong> | <a href=\"http://roadshow.senchacon.com/\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Web\n      Application Manager</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Day-Karlsruhe\"><a href=\"#Sencha-Day-Karlsruhe\" class=\"headerlink\" title=\"Sencha Day Karlsruhe\"></a>Sencha\n      Day Karlsruhe</h3>\n    <p>5-2015 | <strong>Karlsruhe, Germany</strong> | <a href=\"http://roadshow.senchacon.com/\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Web\n      Application Manager</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Day-Paris\"><a href=\"#Sencha-Day-Paris\" class=\"headerlink\" title=\"Sencha Day Paris\"></a>Sencha\n      Day Paris</h3>\n    <p>5-2015 | <strong>Paris, France</strong> | <a href=\"http://roadshow.senchacon.com/\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Web\n      Application Manager</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Day-London\"><a href=\"#Sencha-Day-London\" class=\"headerlink\" title=\"Sencha Day London\"></a>Sencha\n      Day London</h3>\n    <p>5-2015 | <strong>London, UK</strong> | <a href=\"http://roadshow.senchacon.com/\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Event organizer and speaker. Topics: Keynote, Ext JS 6, Theming, Web\n      Application Manager</p>\n  </li>\n  <li>\n    <h3 id=\"Appril-Festival-1\"><a href=\"#Appril-Festival-1\" class=\"headerlink\" title=\"Appril Festival\"></a>Appril\n      Festival</h3>\n    <p>4-2015 | <strong>Amsterdam, NL</strong> | <a href=\"http://apprilfestival.com/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Workshop: Build a mobile app within a day.</p>\n  </li>\n  <li>\n    <h3 id=\"AppsWorld-Berlin\"><a href=\"#AppsWorld-Berlin\" class=\"headerlink\" title=\"AppsWorld Berlin\"></a>AppsWorld\n      Berlin</h3>\n    <p>4-2015 | <strong>Berlin, Germany</strong> | <a href=\"https://www.apps-world.net/\" target=\"_blank\" rel=\"noopener\">Website</a></p>\n    <p>Panel Discussion App Development</p>\n  </li>\n  <li>\n    <h3 id=\"SenchaCon-USA-2015\"><a href=\"#SenchaCon-USA-2015\" class=\"headerlink\" title=\"SenchaCon USA 2015\"></a>SenchaCon\n      USA 2015</h3>\n    <p>4-2015 | <strong>Silicon Valley, USAK</strong> | <a href=\"http://senchacon.com\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Topic: Advanced Theming techniques</p>\n  </li>\n</ul>\n<h2 id=\"2014\"><a href=\"#2014\" class=\"headerlink\" title=\"2014\"></a>2014</h2>\n<ul>\n  <li>\n    <h3 id=\"SenchaDay-2014\"><a href=\"#SenchaDay-2014\" class=\"headerlink\" title=\"SenchaDay 2014\"></a>SenchaDay\n      2014</h3>\n    <p>12-2014 | <strong>Karlsruhe Germany</strong> | <a href=\"http://www.senchaday.de/\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>3 Presentations: Building Ext JS 5 apps with Sencha Architect Optimizing\n      your current Ext JS applications for touch and tablets.<br>How to secure\n      your data with Sencha Space</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Workshop-Milan\"><a href=\"#Sencha-Workshop-Milan\" class=\"headerlink\" title=\"Sencha Workshop Milan\"></a>Sencha\n      Workshop Milan</h3>\n    <p>10-2014 | <strong>Milan IT</strong></p>\n    <p>Sencha Touch workshop, build the ATM finder with Sencha Architect for 40\n      students.</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Webcast-Webcast\"><a href=\"#Sencha-Webcast-Webcast\" class=\"headerlink\" title=\"Sencha Webcast Webcast\"></a>Sencha\n      Webcast Webcast</h3>\n    <p>08-2014 | <strong>Online</strong> | <a href=\"http://vimeo.com/107524499\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Presentation: Optimizing Your Current Ext JS 4 Applications for Touch\n      and Tablets with Ext JS 5<br>Would you like your Ext JS application to\n      support Touch and Tablet devices, but don’t know where to start? Please\n      join us as Lee Boonstra, Technical Trainer at Sencha shares best\n      practices and techniques for optimizing your existing Ext JS applications\n      with the new touch gestures introduced in Ext JS 5.</p>\n  </li>\n  <li>\n    <h3 id=\"O’Reily-Webcast\"><a href=\"#O’Reily-Webcast\" class=\"headerlink\" title=\"O’Reily Webcast\"></a>O’Reily\n      Webcast</h3>\n    <p>08-2014 | <strong>Online</strong> | <a href=\"http://www.oreilly.com/pub/e/3100\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Presentation: Apps in the multi-device world.<br>We live in a\n      multi-device world of phones, tablets, TVs, in-car navs, smart\n      watches….And there is one thing all these devices have in common: HTML5.\n      In this session Lee Boonstra, technical trainer at Sencha, will discuss\n      some of the challenges and opportunities of developing for a multi-device\n      world and how Sencha can help you create better experiences. She will\n      also provide some inspiring client examples and case studies.</p>\n  </li>\n  <li>\n    <h3 id=\"Dutch-Mobile-Conference-2014\"><a href=\"#Dutch-Mobile-Conference-2014\" class=\"headerlink\" title=\"Dutch Mobile Conference 2014\"></a>Dutch\n      Mobile Conference 2014</h3>\n    <p>06-2014 | <strong>Rai Amsterdam NL</strong></p>\n    <p>Learn how to build and deploy powerful mobile apps quickly for iOS,\n      Android, Blackberry 10, and Windows Phone 8 with Sencha Touch and Sencha\n      Architect. Register at <a href=\"http://www.mobileconference.nl/speakers#lee-boonstra\" target=\"_blank\" rel=\"noopener\">mobileconference.nl/</a>.</p>\n  </li>\n  <li>\n    <h3 id=\"Appsterdam-WWLL\"><a href=\"#Appsterdam-WWLL\" class=\"headerlink\" title=\"Appsterdam WWLL\"></a>Appsterdam\n      WWLL</h3>\n    <p>04-2014 | <strong>Amsterdam NL</strong></p>\n    <p>Presentation: Apps in the multi-device world.<br>We live in a\n      multi-device world of phones, tablets, TVs, in-car navs, smart\n      watches….And there is one thing all these devices have in common: HTML5.\n      In this session Lee Boonstra, technical trainer at Sencha, will discuss\n      some of the challenges and opportunities of developing for a multi-device\n      world and how Sencha can help you create better experiences. She will\n      also provide some inspiring client examples and case studies.</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Paris-Meetup-Group\"><a href=\"#Sencha-Paris-Meetup-Group\" class=\"headerlink\" title=\"Sencha Paris Meetup Group\"></a>Sencha\n      Paris Meetup Group</h3>\n    <p>04-2014 | <strong>Online</strong> | <a href=\"https://speakerdeck.com/savelee/paris-sencha-meetup-apps-for-the-multi-device-world\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Presentation: Apps in the multi-device world.<br>We live in a\n      multi-device world of phones, tablets, TVs, in-car navs, smart\n      watches….And there is one thing all these devices have in common: HTML5.\n      In this session Lee Boonstra, technical trainer at Sencha, will discuss\n      some of the challenges and opportunities of developing for a multi-device\n      world and how Sencha can help you create better experiences. She will\n      also provide some inspiring client examples and case studies.</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Workshop-Milan-1\"><a href=\"#Sencha-Workshop-Milan-1\" class=\"headerlink\" title=\"Sencha Workshop Milan\"></a>Sencha\n      Workshop Milan</h3>\n    <p>03-2014 | <strong>Milan IT</strong></p>\n    <p>Sencha Touch workshop, build the ATM finder with Sencha Architect for 80\n      students.</p>\n  </li>\n  <li>\n    <h3 id=\"FITC-Conference\"><a href=\"#FITC-Conference\" class=\"headerlink\" title=\"FITC Conference\"></a>FITC\n      Conference</h3>\n    <p>02-2014 | <strong>Felix Mertis Amsterdam NL</strong> | <a href=\"https://speakerdeck.com/savelee/apps-for-the-multi-device-world\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Presentation: Apps in the multi-device world.<br>We live in a\n      multi-device world of phones, tablets, TVs, in-car navs, smart\n      watches….And there is one thing all these devices have in common: HTML5.\n      In this session Lee Boonstra, technical trainer at Sencha, will discuss\n      some of the challenges and opportunities of developing for a multi-device\n      world and how Sencha can help you create better experiences. She will\n      also provide some inspiring client examples and case studies.</p>\n  </li>\n  <li>\n    <h3 id=\"Amsterdam-Sencha-Meetup-Group\"><a href=\"#Amsterdam-Sencha-Meetup-Group\" class=\"headerlink\" title=\"Amsterdam Sencha Meetup Group\"></a>Amsterdam\n      Sencha Meetup Group</h3>\n    <p>01-2014 | <strong>Sencha Office, Amsterdam NL</strong></p>\n    <p>Sencha Touch workshop, build the ATM finder with Sencha Architect.</p>\n  </li>\n  <li>\n    <h3 id=\"Amsterdam-Sencha-Meetup-Group-1\"><a href=\"#Amsterdam-Sencha-Meetup-Group-1\" class=\"headerlink\" title=\"Amsterdam Sencha Meetup Group\"></a>Amsterdam\n      Sencha Meetup Group</h3>\n    <p>01-2014 | <strong>Sencha Office, Amsterdam NL</strong></p>\n    <p>Presentation: Re-skinning Your Apps Just Got Easier with Sencha\n      Architect 3<br>Ever had to reskin UI components to match a visual design\n      or brand standard? The new Themes feature in Architect 3 makes changing\n      the look and feel of your app easier than ever. If you’re familiar with\n      Sass/SCSS, you’ll find this new feature a huge time saver. Architect 3\n      now allows you to locate and change the different variables and rules\n      that define the visual appearance of the UI components in Ext JS and\n      Sencha Touch.</p>\n  </li>\n</ul>\n<h2 id=\"2013\"><a href=\"#2013\" class=\"headerlink\" title=\"2013\"></a>2013</h2>\n<ul>\n  <li>\n    <h3 id=\"Sencha-Webinar\"><a href=\"#Sencha-Webinar\" class=\"headerlink\" title=\"Sencha Webinar\"></a>Sencha\n      Webinar</h3>\n    <p>12-2013 | <strong>Online</strong> | <a href=\"http://vimeo.com/81745175\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Presentation: Re-skinning Your Apps Just Got Easier with Sencha\n      Architect 3<br>Ever had to reskin UI components to match a visual design\n      or brand standard? The new Themes feature in Architect 3 makes changing\n      the look and feel of your app easier than ever. If you’re familiar with\n      Sass/SCSS, you’ll find this new feature a huge time saver. Architect 3\n      now allows you to locate and change the different variables and rules\n      that define the visual appearance of the UI components in Ext JS and\n      Sencha Touch.</p>\n  </li>\n  <li>\n    <h3 id=\"SenchaCon-2013\"><a href=\"#SenchaCon-2013\" class=\"headerlink\" title=\"SenchaCon 2013\"></a>SenchaCon\n      2013</h3>\n    <p>07-2013 | <strong>Orlando Florida USA</strong></p>\n    <p>Sencha Touch / Sencha Architect App Camp for hundreds of students.</p>\n  </li>\n  <li>\n    <h3 id=\"Appsterdam-WWLL-1\"><a href=\"#Appsterdam-WWLL-1\" class=\"headerlink\" title=\"Appsterdam WWLL\"></a>Appsterdam\n      WWLL</h3>\n    <p>07-2013 | <strong>Amsterdam NL</strong> | <a href=\"https://speakerdeck.com/savelee/appsterdam-wwll-sencha-touch\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Presentation: How to build highly scalable cross-platform mobile apps.</p>\n  </li>\n  <li>\n    <h3 id=\"Dutch-Mobile-Conference-2013\"><a href=\"#Dutch-Mobile-Conference-2013\" class=\"headerlink\" title=\"Dutch Mobile Conference 2013\"></a>Dutch\n      Mobile Conference 2013</h3>\n    <p>06-2013 | <strong>Rai Amsterdam NL</strong></p>\n    <p>Sencha Touch workshop, build a utility app with Sencha Cmd.</p>\n  </li>\n  <li>\n    <h3 id=\"Sencha-Frankfurt-Meetup-Group\"><a href=\"#Sencha-Frankfurt-Meetup-Group\" class=\"headerlink\" title=\"Sencha Frankfurt Meetup Group\"></a>Sencha\n      Frankfurt Meetup Group</h3>\n    <p>02-2013 | <strong>Frankfurt DE</strong> | <a href=\"https://speakerdeck.com/savelee/an-introduction-to-sencha-cmd-frankfurt-sencha-meetup\" target=\"_blank\" rel=\"noopener\">Preview</a></p>\n    <p>Presentation: An introduction to Sencha Cmd.</p>\n  </li>\n</ul>\n"}],"Post":[{"title":"Styleguide","desc":"Example Styleguide for Hexo","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. \n<!-- more -->\nCheck [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo serve\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n### Styleguide\n\n{% gist eb5ce9480b2f5586288df50a8c4ffdf4 %}\n\n{% youtube NH-bL6Bd7Tw %}\n\n{% link https://www.youtube.com/watch?v=NH-bL6Bd7Tw [external] [Lee Boonstra] %}\n\n![Lee Boonstra](/images/profile.jpg)\n\n{% img [fancybox] /images/profile.jpg [200] [100] [Lee Boonstra [Lee Boonstra profile]] %}\n\n``` javascript\nconsole.log(\"test\")\n```\n\n<table class=\"table table-striped\">\n  <thead>\n    <tr>\n      <th scope=\"col\">#</th>\n      <th scope=\"col\">First</th>\n      <th scope=\"col\">Last</th>\n      <th scope=\"col\">Handle</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">1</th>\n      <td>Mark</td>\n      <td>Otto</td>\n      <td>@mdo</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">2</th>\n      <td>Jacob</td>\n      <td>Thornton</td>\n      <td>@fat</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">3</th>\n      <td>Larry</td>\n      <td>the Bird</td>\n      <td>@twitter</td>\n    </tr>\n  </tbody>\n</table>","source":"_drafts/styleguide.md","raw":"---\ntitle: Styleguide\ndesc: Example Styleguide for Hexo\ncategories:\n- JavaScript\ntags:\n- Sencha\n- Ext JS\n\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. \n<!-- more -->\nCheck [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo serve\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n### Styleguide\n\n{% gist eb5ce9480b2f5586288df50a8c4ffdf4 %}\n\n{% youtube NH-bL6Bd7Tw %}\n\n{% link https://www.youtube.com/watch?v=NH-bL6Bd7Tw [external] [Lee Boonstra] %}\n\n![Lee Boonstra](/images/profile.jpg)\n\n{% img [fancybox] /images/profile.jpg [200] [100] [Lee Boonstra [Lee Boonstra profile]] %}\n\n``` javascript\nconsole.log(\"test\")\n```\n\n<table class=\"table table-striped\">\n  <thead>\n    <tr>\n      <th scope=\"col\">#</th>\n      <th scope=\"col\">First</th>\n      <th scope=\"col\">Last</th>\n      <th scope=\"col\">Handle</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">1</th>\n      <td>Mark</td>\n      <td>Otto</td>\n      <td>@mdo</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">2</th>\n      <td>Jacob</td>\n      <td>Thornton</td>\n      <td>@fat</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">3</th>\n      <td>Larry</td>\n      <td>the Bird</td>\n      <td>@twitter</td>\n    </tr>\n  </tbody>\n</table>","slug":"styleguide","published":0,"date":"2018-11-10T20:18:09.944Z","updated":"2018-11-30T19:19:12.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncnd0001kif5ofdk6wme","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first\n  post.\n  <a id=\"more\"></a> Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for\n  more info. If you get any problems when using Hexo, you can find the answer\n  in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or\n  you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick\n  Start</h2>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create\n  a new post</h3>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run\n  server</h3>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ hexo serve</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate\n  static files</h3>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ hexo generate</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy\n  to remote sites</h3>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ hexo deploy</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<h3 id=\"Styleguide\"><a href=\"#Styleguide\" class=\"headerlink\" title=\"Styleguide\"></a>Styleguide</h3>\n<script src=\"//gist.github.com/eb5ce9480b2f5586288df50a8c4ffdf4.js\"></script>\n<div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/NH-bL6Bd7Tw\" frameborder=\"0\" allowfullscreen></iframe></div><a href=\"https://www.youtube.com/watch?v=NH-bL6Bd7Tw\" title=\"[external] [Lee Boonstra]\" target=\"_blank\" rel=\"noopener\"></a>\n<p><img src=\"/images/profile.jpg\" alt=\"Lee Boonstra\"></p><img src=\"/images/profile.jpg\" class=\"[fancybox]\" title=\"[200] [100] [Lee Boonstra [Lee Boonstra profile]]\">\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"test\"</span>)</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<table class=\"table table-striped\">\n  <thead>\n    <tr>\n      <th scope=\"col\">#</th>\n      <th scope=\"col\">First</th>\n      <th scope=\"col\">Last</th>\n      <th scope=\"col\">Handle</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">1</th>\n      <td>Mark</td>\n      <td>Otto</td>\n      <td>@mdo</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">2</th>\n      <td>Jacob</td>\n      <td>Thornton</td>\n      <td>@fat</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">3</th>\n      <td>Larry</td>\n      <td>the Bird</td>\n      <td>@twitter</td>\n    </tr>\n  </tbody>\n</table>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first\n  post.","more":"Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for\n  more info. If you get any problems when using Hexo, you can find the answer\n  in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or\n  you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick\n  Start</h2>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create\n  a new post</h3>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run\n  server</h3>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ hexo serve</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate\n  static files</h3>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ hexo generate</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy\n  to remote sites</h3>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ hexo deploy</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<h3 id=\"Styleguide\"><a href=\"#Styleguide\" class=\"headerlink\" title=\"Styleguide\"></a>Styleguide</h3>\n<script src=\"//gist.github.com/eb5ce9480b2f5586288df50a8c4ffdf4.js\"></script>\n<div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/NH-bL6Bd7Tw\" frameborder=\"0\" allowfullscreen></iframe></div><a href=\"https://www.youtube.com/watch?v=NH-bL6Bd7Tw\" title=\"[external] [Lee Boonstra]\" target=\"_blank\" rel=\"noopener\"></a>\n<p><img src=\"/images/profile.jpg\" alt=\"Lee Boonstra\"></p><img src=\"/images/profile.jpg\" class=\"[fancybox]\" title=\"[200] [100] [Lee Boonstra [Lee Boonstra profile]]\">\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"test\"</span>)</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<table class=\"table table-striped\">\n  <thead>\n    <tr>\n      <th scope=\"col\">#</th>\n      <th scope=\"col\">First</th>\n      <th scope=\"col\">Last</th>\n      <th scope=\"col\">Handle</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">1</th>\n      <td>Mark</td>\n      <td>Otto</td>\n      <td>@mdo</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">2</th>\n      <td>Jacob</td>\n      <td>Thornton</td>\n      <td>@fat</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">3</th>\n      <td>Larry</td>\n      <td>the Bird</td>\n      <td>@twitter</td>\n    </tr>\n  </tbody>\n</table>"},{"title":"Actions on Google for Google Cloud Functions","description":"Learn how to invoke the Google Assistant with Cloud Functions","date":"2018-05-19T12:41:36.000Z","_content":"\nWhen building Google Assistant apps (actions) with Dialogflow, you likely will have to write some logics. The most common way in developing this logics layer is by using a webhook and a Cloud Function. The webhook requires a URL. So technically you can use any web server and program language you like, Cloud Functions are just easy.\n<!-- more -->\nIt's serverless, which means you don't need to worry on setting up and maintaining an environment, and it scales out of the box. Dialogflow integrates with Firebase Cloud Functions. There's an easy inline editor you can use, which creates the Cloud Function within Firebase. (Which under the hood uses the infrastructure of Google Cloud.) For Dialogflow Enterprise customers (the Dialogflow version which is compliant and better for large organizations), Firebase Functions don't make much sense. (And in fact, are not been created within your current GCP project). You rather use the Google Cloud Functions. Both use functions can make use of HTTP triggers. The way of invoking is different: \n\n*GCP*:\n\n``` JavaScript \nexports.helloWorld = function helloWorld (request, response) { \n  res.send(`Hello from GCP!`); \n};\n```\n\n\n*Firebase:* \n\n``` JavaScript\nexports.helloWorld = functions.https.onRequest((request, response) => { \n  response.send(\"Hello from Firebase!\"); \n}); \n```\n\nThe [Actions on Google Node JS library](https://www.npmjs.com/package/actions-on-google) (for creating Dialogflow agents with Google Assistant), explains how you can integrate the library within a Firebase Cloud function. Unfortunately, it doesn't explain to you how to integrate it with a GCP Cloud Function. So here's how you would do this: \n\n{% gist 7485763b67e6ee3a5d00aa07c8678f94 %}\n\nAs you can see, you can get the request and response headers from the `conv` object, in the conversation handler function. NOTE: This example was written for the 2.1.1 version of the Actions on Google NPM package: *package.json* \n\n``` JSON \n{ \n  \"name\": \"Demo\", \n  \"description\": \"Google Assistant with Dialogflow Enterprise\", \n  \"version\": \"1.0.0\", \n  \"license\": \"Apache-2.0\", \n  \"author\": \"Lee Boonstra\", \n  \"engines\": { \n    \"node\": \"^6.11.5\" \n  }, \n  \"dependencies\": { \n    \"actions-on-google\": \"2.1.1\" \n  } \n}\n```","source":"_posts/actions-on-google-for-google-cloud-functions.md","raw":"---\ntitle: Actions on Google for Google Cloud Functions\ndescription: Learn how to invoke the Google Assistant with Cloud Functions\ncategories:\n  - Bots\ntags:\n  - Actions on Google\n  - Cloud Functions\n  - Dialogflow\n  - Node JS\ndate: 2018-05-19 14:41:36\n---\n\nWhen building Google Assistant apps (actions) with Dialogflow, you likely will have to write some logics. The most common way in developing this logics layer is by using a webhook and a Cloud Function. The webhook requires a URL. So technically you can use any web server and program language you like, Cloud Functions are just easy.\n<!-- more -->\nIt's serverless, which means you don't need to worry on setting up and maintaining an environment, and it scales out of the box. Dialogflow integrates with Firebase Cloud Functions. There's an easy inline editor you can use, which creates the Cloud Function within Firebase. (Which under the hood uses the infrastructure of Google Cloud.) For Dialogflow Enterprise customers (the Dialogflow version which is compliant and better for large organizations), Firebase Functions don't make much sense. (And in fact, are not been created within your current GCP project). You rather use the Google Cloud Functions. Both use functions can make use of HTTP triggers. The way of invoking is different: \n\n*GCP*:\n\n``` JavaScript \nexports.helloWorld = function helloWorld (request, response) { \n  res.send(`Hello from GCP!`); \n};\n```\n\n\n*Firebase:* \n\n``` JavaScript\nexports.helloWorld = functions.https.onRequest((request, response) => { \n  response.send(\"Hello from Firebase!\"); \n}); \n```\n\nThe [Actions on Google Node JS library](https://www.npmjs.com/package/actions-on-google) (for creating Dialogflow agents with Google Assistant), explains how you can integrate the library within a Firebase Cloud function. Unfortunately, it doesn't explain to you how to integrate it with a GCP Cloud Function. So here's how you would do this: \n\n{% gist 7485763b67e6ee3a5d00aa07c8678f94 %}\n\nAs you can see, you can get the request and response headers from the `conv` object, in the conversation handler function. NOTE: This example was written for the 2.1.1 version of the Actions on Google NPM package: *package.json* \n\n``` JSON \n{ \n  \"name\": \"Demo\", \n  \"description\": \"Google Assistant with Dialogflow Enterprise\", \n  \"version\": \"1.0.0\", \n  \"license\": \"Apache-2.0\", \n  \"author\": \"Lee Boonstra\", \n  \"engines\": { \n    \"node\": \"^6.11.5\" \n  }, \n  \"dependencies\": { \n    \"actions-on-google\": \"2.1.1\" \n  } \n}\n```","slug":"actions-on-google-for-google-cloud-functions","published":1,"updated":"2018-11-24T18:55:06.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncnh0003kif54x49ighg","content":"<p>When building Google Assistant apps (actions) with Dialogflow, you likely\n  will have to write some logics. The most common way in developing this logics\n  layer is by using a webhook and a Cloud Function. The webhook requires a URL.\n  So technically you can use any web server and program language you like,\n  Cloud Functions are just easy.\n  <a id=\"more\"></a> It’s serverless, which means you don’t need to worry on setting\n  up and maintaining an environment, and it scales out of the box. Dialogflow\n  integrates with Firebase Cloud Functions. There’s an easy inline editor you\n  can use, which creates the Cloud Function within Firebase. (Which under the\n  hood uses the infrastructure of Google Cloud.) For Dialogflow Enterprise\n  customers (the Dialogflow version which is compliant and better for large\n  organizations), Firebase Functions don’t make much sense. (And in fact, are\n  not been created within your current GCP project). You rather use the Google\n  Cloud Functions. Both use functions can make use of HTTP triggers. The way of\n  invoking is different:</p>\n<p><em>GCP</em>:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">exports.helloWorld = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">helloWorld</span> (<span class=\"params\">request, response</span>) </span>&#123; </span><br><span class=\"line\">  res.send(<span class=\"string\">`Hello from GCP!`</span>); </span><br><span class=\"line\">&#125;;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p><em>Firebase:</em></p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">exports.helloWorld = functions.https.onRequest(<span class=\"function\">(<span class=\"params\">request, response</span>) =&gt;</span> &#123; </span><br><span class=\"line\">  response.send(<span class=\"string\">\"Hello from Firebase!\"</span>); </span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The <a href=\"https://www.npmjs.com/package/actions-on-google\" target=\"_blank\" rel=\"noopener\">Actions on\n    Google Node JS library</a> (for creating Dialogflow agents with Google\n  Assistant), explains how you can integrate the library within a Firebase\n  Cloud function. Unfortunately, it doesn’t explain to you how to integrate it\n  with a GCP Cloud Function. So here’s how you would do this:</p>\n<script src=\"//gist.github.com/7485763b67e6ee3a5d00aa07c8678f94.js\"></script>\n<p>As you can see, you can get the request and response headers from the <code>conv</code>\n  object, in the conversation handler function. NOTE: This example was written\n  for the 2.1.1 version of the Actions on Google NPM package: <em>package.json</em></p>\n<figure class=\"highlight json\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">&#123; </span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Demo\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Google Assistant with Dialogflow Enterprise\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"Apache-2.0\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"Lee Boonstra\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"engines\"</span>: &#123; </span><br><span class=\"line\">    <span class=\"attr\">\"node\"</span>: <span class=\"string\">\"^6.11.5\"</span> </span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123; </span><br><span class=\"line\">    <span class=\"attr\">\"actions-on-google\"</span>: <span class=\"string\">\"2.1.1\"</span> </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>When building Google Assistant apps (actions) with Dialogflow, you likely\n  will have to write some logics. The most common way in developing this logics\n  layer is by using a webhook and a Cloud Function. The webhook requires a URL.\n  So technically you can use any web server and program language you like,\n  Cloud Functions are just easy.","more":"It’s serverless, which means you don’t need to worry on setting\n  up and maintaining an environment, and it scales out of the box. Dialogflow\n  integrates with Firebase Cloud Functions. There’s an easy inline editor you\n  can use, which creates the Cloud Function within Firebase. (Which under the\n  hood uses the infrastructure of Google Cloud.) For Dialogflow Enterprise\n  customers (the Dialogflow version which is compliant and better for large\n  organizations), Firebase Functions don’t make much sense. (And in fact, are\n  not been created within your current GCP project). You rather use the Google\n  Cloud Functions. Both use functions can make use of HTTP triggers. The way of\n  invoking is different:</p>\n<p><em>GCP</em>:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">exports.helloWorld = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">helloWorld</span> (<span class=\"params\">request, response</span>) </span>&#123; </span><br><span class=\"line\">  res.send(<span class=\"string\">`Hello from GCP!`</span>); </span><br><span class=\"line\">&#125;;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p><em>Firebase:</em></p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">exports.helloWorld = functions.https.onRequest(<span class=\"function\">(<span class=\"params\">request, response</span>) =&gt;</span> &#123; </span><br><span class=\"line\">  response.send(<span class=\"string\">\"Hello from Firebase!\"</span>); </span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The <a href=\"https://www.npmjs.com/package/actions-on-google\" target=\"_blank\" rel=\"noopener\">Actions on\n    Google Node JS library</a> (for creating Dialogflow agents with Google\n  Assistant), explains how you can integrate the library within a Firebase\n  Cloud function. Unfortunately, it doesn’t explain to you how to integrate it\n  with a GCP Cloud Function. So here’s how you would do this:</p>\n<script src=\"//gist.github.com/7485763b67e6ee3a5d00aa07c8678f94.js\"></script>\n<p>As you can see, you can get the request and response headers from the <code>conv</code>\n  object, in the conversation handler function. NOTE: This example was written\n  for the 2.1.1 version of the Actions on Google NPM package: <em>package.json</em></p>\n<figure class=\"highlight json\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">&#123; </span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Demo\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Google Assistant with Dialogflow Enterprise\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"Apache-2.0\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"Lee Boonstra\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"engines\"</span>: &#123; </span><br><span class=\"line\">    <span class=\"attr\">\"node\"</span>: <span class=\"string\">\"^6.11.5\"</span> </span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123; </span><br><span class=\"line\">    <span class=\"attr\">\"actions-on-google\"</span>: <span class=\"string\">\"2.1.1\"</span> </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>"},{"title":"Asynchronous JavaScript: Promises","description":"JavaScript is single threaded, causing code to execute from top to bottom. Instead of blocking the thread, there are ways you can streamline this code execution by using asynchronous JavaScript.","date":"2016-04-01T08:14:56.000Z","_content":"\nJavaScript is single threaded, causing code to execute from top to bottom, so two bits of code cannot run at the same time. For example, you might download a JSON file from an (external) server and you’d have to wait until you retrieve that file. Instead of blocking the thread, there are ways you can streamline this code execution by using asynchronous JavaScript.\n<!--more-->\nYou’re probably already familiar with asynchronous JavaScript. Events (observer pattern) and Callbacks are examples of asynchronous code. For example, whenever you make an Ext.Ajax request or a user presses a button, the action is pushed into a queue, which is called the event loop. The JavaScript engine doesn’t start processing the event loop until the code has been executed after an async function (from top to bottom). This means that JavaScript code is not multi-threaded even though it appears to be so.\n\n![Event Loop](https://wp-test.sencha.com/wp-content/uploads/2016/02/asynch-javascript-promises-img2-300x210.png)\n\nCallbacks are often used when you have an async operation (for example, loading data from a database) that should notify the caller about its completion. When calling such a function, you can pass it another function as an argument, which confirms that something has happened. Putting callbacks into callbacks is a great solution, and I think that’s one of the powerful features of JavaScript. However, it can be messy when your code requires other asynchronous pieces of code first.\n\nFor example, you read your user settings from local storage (that’s a callback!). Based on those settings, you make a request from some external server with a database connection, (that’s callback #2). Before you render that information on the screen, you retrieve something else from the database (that’s callback #3).\n\nThese steps are very common when you build a large enterprise app. In your code, there will be a callback function, written in a callback function, that’s in another callback function. You can imagine if these functions are spread over separate files that you’d have a hard time reading this code back a month later.\n\nThis is where JavaScript Promises comes into play. It’s a new way of writing your code in a more readable and understandable way. A Promise represents the result of a task, which may or may not have been completed. Like a contract for a value that we might not know when the promise is created. It’s an object or function with a **then** method. Because of the “then” method, the action can be chained endlessly, and that’s awesome!\n\nA Promise typically has one of these 4 states.\n\n*   **fulfilled** – when the promise succeeds\n*   **rejected** – when the promise failed\n*   **pending** – ongoing, hasn’t been fulfilled or rejected yet\n*   **settled** – it has been fulfilled or rejected already\n\n![JavaScript Promises](https://wp-test.sencha.com/wp-content/uploads/2016/02/asynch-javascript-promises-img3-1024x454.png)\n\nPromises is part of ECMAScript 6, which is available in the client of some modern browsers, and also within the latest version of Node.js. The following browsers do not support JavaScript Promises: Explorer 11 and below, Android 4.4 and below, and iOS Safari 7.1 and below.\n\nExt JS 6 supports Promises and conforms to the Promises A+ spec; both Classic and Modern toolkits are included. You can call the Sencha Promises class, which is a wrapper for the native JavaScript functionality. Legacy browsers will use the fallback provided by Sencha, and modern browsers will use the native functionality.\n\nHere’s an example of a function that returns a Sencha Promise object:\n\n``` JavaScript\nrequestUserSettings: function(){\n    \treturn new Ext.Promise(function (resolve, reject) {\n\t\t    //something asynchronous, like loading a store\n\t    \tExt.getStore(‘Settings’).load({\n    \t\t\tcallback: function(records, operation, success) {\n    \t\t\t        if(success){\n    \t\t\t        \tif(records.length > 0){\n    \t\t\t\t\t\t//when it’s ok\n    \t\t\t        \t\tresolve(records);\n    \t\t\t        \t} else {\n    \t\t\t\t\t\t//still ok, but no results\n    \t\t\t        \t\tresolve(false);\n    \t\t\t        \t}\n    \t\t\t        } else{\n    \t\t\t\t\t//something bad happened\n    \t\t\t        \treject(operation);\n    \t\t\t        }\n    \t\t\t  }\n\t\t    });\n    \t});\n}\n```\n\nThe `Ext.Promise` constructor takes one argument, a callback with two parameters, resolve and reject. When it does something asynchronous within the callback, like retrieving user settings from a local storage store, then it calls “**resolve**”; if everything worked it passes in the result, otherwise it calls “**reject**” and passes in what went wrong.\n\nHere’s how you use that Promise:\n\n``` JavaScript\nthis.requestUserSettings().then(function(records) {\n  //It’s ok. do something with the records\n}, function(err) {\n  //oh no, something went wrong, display a nice error\n});\n```\n\nThe “**then**” takes two arguments, a callback for a success case, and another one for the failure case [our website](http://biturlz.com/L5m74B2). Both are optional, so you can add a callback for the success or failure case only. You can chain as many **then** methods as you want to run additional async actions one after another.\n\nBesides the `“then()”` instance method, there are also ways to terminate a Promise chain (`“done()”`), cancel pending chains (`“cancel()”`). Also, there’s a way to attach an **onCompleted** callback to the chain (`“always()”`), for example with cleanup logic regardless the outcome. And, you can attach an **onRejected** callback, if one action within the chain is rejected (`“otherwise()”`), for example to handle failures.\n\nIn addition to `Ext.Promise`, Sencha will also ship `Ext.Deferred`, which is a mechanism used to create new Promises within Ext JS 6. The difference between these two constructors is that with a deferred constructor the creator has direct access to “behind the scenes” extras, such as progress updates.\n\nLast but not least, Sencha integrated Promises support into `Ext.Ajax`.\n\n`Ext.Ajax.request()` is now an instance of a class derived from Ext.data.request.Base which can be used with a **then** method. It allows you to write code like this:\n\n``` JavaScript\nExt.Ajax.request({\n    url: 'feed.json',\n}).then(function(response) {\n    // use response\n}).always(function() {\n   // clean-up logic, regardless the outcome\n}).otherwise(function(reason){\n   // handle failure\n});\n```\n\n#### More Resources\n\nThere’s a lot more information to explain how you can use JavaScript & Ext JS Promises. Take a look at these resources to learn more!\n\n*   [Dealing with Asynchronous JavaScript: Events, Callbacks & Promises/Deferreds](https://speakerdeck.com/savelee/deferreds) (presentation)\n*   Ext JS API docs\n    *   [Ext.Promise](http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.Promise)\n    *   [Ext.promise.Promise-method-then](http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.promise.Promise-method-then)\n    *   [Ext.Deferred](http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.Deferred)\n*   [Promises spec](https://github.com/promises-aplus/promises-spec)\n*   [Mozilla Promise spec](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise)","source":"_posts/asynchronous-javascript-promises.md","raw":"---\ntitle: 'Asynchronous JavaScript: Promises'\ndescription: JavaScript is single threaded, causing code to execute from top to bottom. Instead of blocking the thread, there are ways you can streamline this code execution by using asynchronous JavaScript.\ntags:\n  - async\n  - ecmascript6\n  - es6\n  - JavaScript\n  - promises\n  - ExtJS6\n  - Sencha\ncategories:\n  - Ext JS\ndate: 2016-04-01 10:14:56\n---\n\nJavaScript is single threaded, causing code to execute from top to bottom, so two bits of code cannot run at the same time. For example, you might download a JSON file from an (external) server and you’d have to wait until you retrieve that file. Instead of blocking the thread, there are ways you can streamline this code execution by using asynchronous JavaScript.\n<!--more-->\nYou’re probably already familiar with asynchronous JavaScript. Events (observer pattern) and Callbacks are examples of asynchronous code. For example, whenever you make an Ext.Ajax request or a user presses a button, the action is pushed into a queue, which is called the event loop. The JavaScript engine doesn’t start processing the event loop until the code has been executed after an async function (from top to bottom). This means that JavaScript code is not multi-threaded even though it appears to be so.\n\n![Event Loop](https://wp-test.sencha.com/wp-content/uploads/2016/02/asynch-javascript-promises-img2-300x210.png)\n\nCallbacks are often used when you have an async operation (for example, loading data from a database) that should notify the caller about its completion. When calling such a function, you can pass it another function as an argument, which confirms that something has happened. Putting callbacks into callbacks is a great solution, and I think that’s one of the powerful features of JavaScript. However, it can be messy when your code requires other asynchronous pieces of code first.\n\nFor example, you read your user settings from local storage (that’s a callback!). Based on those settings, you make a request from some external server with a database connection, (that’s callback #2). Before you render that information on the screen, you retrieve something else from the database (that’s callback #3).\n\nThese steps are very common when you build a large enterprise app. In your code, there will be a callback function, written in a callback function, that’s in another callback function. You can imagine if these functions are spread over separate files that you’d have a hard time reading this code back a month later.\n\nThis is where JavaScript Promises comes into play. It’s a new way of writing your code in a more readable and understandable way. A Promise represents the result of a task, which may or may not have been completed. Like a contract for a value that we might not know when the promise is created. It’s an object or function with a **then** method. Because of the “then” method, the action can be chained endlessly, and that’s awesome!\n\nA Promise typically has one of these 4 states.\n\n*   **fulfilled** – when the promise succeeds\n*   **rejected** – when the promise failed\n*   **pending** – ongoing, hasn’t been fulfilled or rejected yet\n*   **settled** – it has been fulfilled or rejected already\n\n![JavaScript Promises](https://wp-test.sencha.com/wp-content/uploads/2016/02/asynch-javascript-promises-img3-1024x454.png)\n\nPromises is part of ECMAScript 6, which is available in the client of some modern browsers, and also within the latest version of Node.js. The following browsers do not support JavaScript Promises: Explorer 11 and below, Android 4.4 and below, and iOS Safari 7.1 and below.\n\nExt JS 6 supports Promises and conforms to the Promises A+ spec; both Classic and Modern toolkits are included. You can call the Sencha Promises class, which is a wrapper for the native JavaScript functionality. Legacy browsers will use the fallback provided by Sencha, and modern browsers will use the native functionality.\n\nHere’s an example of a function that returns a Sencha Promise object:\n\n``` JavaScript\nrequestUserSettings: function(){\n    \treturn new Ext.Promise(function (resolve, reject) {\n\t\t    //something asynchronous, like loading a store\n\t    \tExt.getStore(‘Settings’).load({\n    \t\t\tcallback: function(records, operation, success) {\n    \t\t\t        if(success){\n    \t\t\t        \tif(records.length > 0){\n    \t\t\t\t\t\t//when it’s ok\n    \t\t\t        \t\tresolve(records);\n    \t\t\t        \t} else {\n    \t\t\t\t\t\t//still ok, but no results\n    \t\t\t        \t\tresolve(false);\n    \t\t\t        \t}\n    \t\t\t        } else{\n    \t\t\t\t\t//something bad happened\n    \t\t\t        \treject(operation);\n    \t\t\t        }\n    \t\t\t  }\n\t\t    });\n    \t});\n}\n```\n\nThe `Ext.Promise` constructor takes one argument, a callback with two parameters, resolve and reject. When it does something asynchronous within the callback, like retrieving user settings from a local storage store, then it calls “**resolve**”; if everything worked it passes in the result, otherwise it calls “**reject**” and passes in what went wrong.\n\nHere’s how you use that Promise:\n\n``` JavaScript\nthis.requestUserSettings().then(function(records) {\n  //It’s ok. do something with the records\n}, function(err) {\n  //oh no, something went wrong, display a nice error\n});\n```\n\nThe “**then**” takes two arguments, a callback for a success case, and another one for the failure case [our website](http://biturlz.com/L5m74B2). Both are optional, so you can add a callback for the success or failure case only. You can chain as many **then** methods as you want to run additional async actions one after another.\n\nBesides the `“then()”` instance method, there are also ways to terminate a Promise chain (`“done()”`), cancel pending chains (`“cancel()”`). Also, there’s a way to attach an **onCompleted** callback to the chain (`“always()”`), for example with cleanup logic regardless the outcome. And, you can attach an **onRejected** callback, if one action within the chain is rejected (`“otherwise()”`), for example to handle failures.\n\nIn addition to `Ext.Promise`, Sencha will also ship `Ext.Deferred`, which is a mechanism used to create new Promises within Ext JS 6. The difference between these two constructors is that with a deferred constructor the creator has direct access to “behind the scenes” extras, such as progress updates.\n\nLast but not least, Sencha integrated Promises support into `Ext.Ajax`.\n\n`Ext.Ajax.request()` is now an instance of a class derived from Ext.data.request.Base which can be used with a **then** method. It allows you to write code like this:\n\n``` JavaScript\nExt.Ajax.request({\n    url: 'feed.json',\n}).then(function(response) {\n    // use response\n}).always(function() {\n   // clean-up logic, regardless the outcome\n}).otherwise(function(reason){\n   // handle failure\n});\n```\n\n#### More Resources\n\nThere’s a lot more information to explain how you can use JavaScript & Ext JS Promises. Take a look at these resources to learn more!\n\n*   [Dealing with Asynchronous JavaScript: Events, Callbacks & Promises/Deferreds](https://speakerdeck.com/savelee/deferreds) (presentation)\n*   Ext JS API docs\n    *   [Ext.Promise](http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.Promise)\n    *   [Ext.promise.Promise-method-then](http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.promise.Promise-method-then)\n    *   [Ext.Deferred](http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.Deferred)\n*   [Promises spec](https://github.com/promises-aplus/promises-spec)\n*   [Mozilla Promise spec](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise)","slug":"asynchronous-javascript-promises","published":1,"updated":"2018-11-25T11:45:32.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncnq0007kif52i7fo4x9","content":"<p>JavaScript is single threaded, causing code to execute from top to bottom,\n  so two bits of code cannot run at the same time. For example, you might\n  download a JSON file from an (external) server and you’d have to wait until\n  you retrieve that file. Instead of blocking the thread, there are ways you\n  can streamline this code execution by using asynchronous JavaScript.\n  <a id=\"more\"></a> You’re probably already familiar with asynchronous JavaScript.\n  Events (observer pattern) and Callbacks are examples of asynchronous code.\n  For example, whenever you make an Ext.Ajax request or a user presses a\n  button, the action is pushed into a queue, which is called the event loop.\n  The JavaScript engine doesn’t start processing the event loop until the code\n  has been executed after an async function (from top to bottom). This means\n  that JavaScript code is not multi-threaded even though it appears to be so.</p>\n<p><img src=\"https://wp-test.sencha.com/wp-content/uploads/2016/02/asynch-javascript-promises-img2-300x210.png\" alt=\"Event Loop\"></p>\n<p>Callbacks are often used when you have an async operation (for example,\n  loading data from a database) that should notify the caller about its\n  completion. When calling such a function, you can pass it another function as\n  an argument, which confirms that something has happened. Putting callbacks\n  into callbacks is a great solution, and I think that’s one of the powerful\n  features of JavaScript. However, it can be messy when your code requires\n  other asynchronous pieces of code first.</p>\n<p>For example, you read your user settings from local storage (that’s a\n  callback!). Based on those settings, you make a request from some external\n  server with a database connection, (that’s callback #2). Before you render\n  that information on the screen, you retrieve something else from the database\n  (that’s callback #3).</p>\n<p>These steps are very common when you build a large enterprise app. In your\n  code, there will be a callback function, written in a callback function,\n  that’s in another callback function. You can imagine if these functions are\n  spread over separate files that you’d have a hard time reading this code back\n  a month later.</p>\n<p>This is where JavaScript Promises comes into play. It’s a new way of writing\n  your code in a more readable and understandable way. A Promise represents the\n  result of a task, which may or may not have been completed. Like a contract\n  for a value that we might not know when the promise is created. It’s an\n  object or function with a <strong>then</strong> method. Because of the “then”\n  method, the action can be chained endlessly, and that’s awesome!</p>\n<p>A Promise typically has one of these 4 states.</p>\n<ul>\n  <li><strong>fulfilled</strong> – when the promise succeeds</li>\n  <li><strong>rejected</strong> – when the promise failed</li>\n  <li><strong>pending</strong> – ongoing, hasn’t been fulfilled or rejected yet</li>\n  <li><strong>settled</strong> – it has been fulfilled or rejected already</li>\n</ul>\n<p><img src=\"https://wp-test.sencha.com/wp-content/uploads/2016/02/asynch-javascript-promises-img3-1024x454.png\" alt=\"JavaScript Promises\"></p>\n<p>Promises is part of ECMAScript 6, which is available in the client of some\n  modern browsers, and also within the latest version of Node.js. The following\n  browsers do not support JavaScript Promises: Explorer 11 and below, Android\n  4.4 and below, and iOS Safari 7.1 and below.</p>\n<p>Ext JS 6 supports Promises and conforms to the Promises A+ spec; both\n  Classic and Modern toolkits are included. You can call the Sencha Promises\n  class, which is a wrapper for the native JavaScript functionality. Legacy\n  browsers will use the fallback provided by Sencha, and modern browsers will\n  use the native functionality.</p>\n<p>Here’s an example of a function that returns a Sencha Promise object:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">requestUserSettings: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Ext.Promise(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\t\t    <span class=\"comment\">//something asynchronous, like loading a store</span></span><br><span class=\"line\">\t    \tExt.getStore(‘Settings’).load(&#123;</span><br><span class=\"line\">    \t\t\tcallback: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">records, operation, success</span>) </span>&#123;</span><br><span class=\"line\">    \t\t\t        <span class=\"keyword\">if</span>(success)&#123;</span><br><span class=\"line\">    \t\t\t        \t<span class=\"keyword\">if</span>(records.length &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    \t\t\t\t\t\t<span class=\"comment\">//when it’s ok</span></span><br><span class=\"line\">    \t\t\t        \t\tresolve(records);</span><br><span class=\"line\">    \t\t\t        \t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    \t\t\t\t\t\t<span class=\"comment\">//still ok, but no results</span></span><br><span class=\"line\">    \t\t\t        \t\tresolve(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    \t\t\t        \t&#125;</span><br><span class=\"line\">    \t\t\t        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \t\t\t\t\t<span class=\"comment\">//something bad happened</span></span><br><span class=\"line\">    \t\t\t        \treject(operation);</span><br><span class=\"line\">    \t\t\t        &#125;</span><br><span class=\"line\">    \t\t\t  &#125;</span><br><span class=\"line\">\t\t    &#125;);</span><br><span class=\"line\">    \t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The <code>Ext.Promise</code> constructor takes one argument, a callback with\n  two parameters, resolve and reject. When it does something asynchronous\n  within the callback, like retrieving user settings from a local storage\n  store, then it calls “<strong>resolve</strong>”; if everything worked it\n  passes in the result, otherwise it calls “<strong>reject</strong>” and passes\n  in what went wrong.</p>\n<p>Here’s how you use that Promise:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">this</span>.requestUserSettings().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">records</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//It’s ok. do something with the records</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//oh no, something went wrong, display a nice error</span></span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The “<strong>then</strong>” takes two arguments, a callback for a success\n  case, and another one for the failure case <a href=\"http://biturlz.com/L5m74B2\" target=\"_blank\" rel=\"noopener\">our\n    website</a>. Both are optional, so you can add a callback for the success\n  or failure case only. You can chain as many <strong>then</strong> methods as\n  you want to run additional async actions one after another.</p>\n<p>Besides the <code>“then()”</code> instance method, there are also ways to\n  terminate a Promise chain (<code>“done()”</code>), cancel pending chains (<code>“cancel()”</code>).\n  Also, there’s a way to attach an <strong>onCompleted</strong> callback to the\n  chain (<code>“always()”</code>), for example with cleanup logic regardless\n  the outcome. And, you can attach an <strong>onRejected</strong> callback, if\n  one action within the chain is rejected (<code>“otherwise()”</code>), for\n  example to handle failures.</p>\n<p>In addition to <code>Ext.Promise</code>, Sencha will also ship <code>Ext.Deferred</code>,\n  which is a mechanism used to create new Promises within Ext JS 6. The\n  difference between these two constructors is that with a deferred constructor\n  the creator has direct access to “behind the scenes” extras, such as progress\n  updates.</p>\n<p>Last but not least, Sencha integrated Promises support into <code>Ext.Ajax</code>.</p>\n<p><code>Ext.Ajax.request()</code> is now an instance of a class derived from\n  Ext.data.request.Base which can be used with a <strong>then</strong> method.\n  It allows you to write code like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.Ajax.request(&#123;</span><br><span class=\"line\">    url: <span class=\"string\">'feed.json'</span>,</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// use response</span></span><br><span class=\"line\">&#125;).always(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// clean-up logic, regardless the outcome</span></span><br><span class=\"line\">&#125;).otherwise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// handle failure</span></span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<h4 id=\"More-Resources\"><a href=\"#More-Resources\" class=\"headerlink\" title=\"More Resources\"></a>More\n  Resources</h4>\n<p>There’s a lot more information to explain how you can use JavaScript &amp;\n  Ext JS Promises. Take a look at these resources to learn more!</p>\n<ul>\n  <li><a href=\"https://speakerdeck.com/savelee/deferreds\" target=\"_blank\" rel=\"noopener\">Dealing with\n      Asynchronous JavaScript: Events, Callbacks &amp; Promises/Deferreds</a>\n    (presentation)</li>\n  <li>Ext JS API docs<ul>\n      <li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.Promise\" target=\"_blank\" rel=\"noopener\">Ext.Promise</a></li>\n      <li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.promise.Promise-method-then\" target=\"_blank\" rel=\"noopener\">Ext.promise.Promise-method-then</a></li>\n      <li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.Deferred\" target=\"_blank\" rel=\"noopener\">Ext.Deferred</a></li>\n    </ul>\n  </li>\n  <li><a href=\"https://github.com/promises-aplus/promises-spec\" target=\"_blank\" rel=\"noopener\">Promises spec</a></li>\n  <li><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener\">Mozilla\n      Promise spec</a></li>\n</ul>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>JavaScript is single threaded, causing code to execute from top to bottom,\n  so two bits of code cannot run at the same time. For example, you might\n  download a JSON file from an (external) server and you’d have to wait until\n  you retrieve that file. Instead of blocking the thread, there are ways you\n  can streamline this code execution by using asynchronous JavaScript.","more":"You’re probably already familiar with asynchronous JavaScript.\n  Events (observer pattern) and Callbacks are examples of asynchronous code.\n  For example, whenever you make an Ext.Ajax request or a user presses a\n  button, the action is pushed into a queue, which is called the event loop.\n  The JavaScript engine doesn’t start processing the event loop until the code\n  has been executed after an async function (from top to bottom). This means\n  that JavaScript code is not multi-threaded even though it appears to be so.</p>\n<p><img src=\"https://wp-test.sencha.com/wp-content/uploads/2016/02/asynch-javascript-promises-img2-300x210.png\" alt=\"Event Loop\"></p>\n<p>Callbacks are often used when you have an async operation (for example,\n  loading data from a database) that should notify the caller about its\n  completion. When calling such a function, you can pass it another function as\n  an argument, which confirms that something has happened. Putting callbacks\n  into callbacks is a great solution, and I think that’s one of the powerful\n  features of JavaScript. However, it can be messy when your code requires\n  other asynchronous pieces of code first.</p>\n<p>For example, you read your user settings from local storage (that’s a\n  callback!). Based on those settings, you make a request from some external\n  server with a database connection, (that’s callback #2). Before you render\n  that information on the screen, you retrieve something else from the database\n  (that’s callback #3).</p>\n<p>These steps are very common when you build a large enterprise app. In your\n  code, there will be a callback function, written in a callback function,\n  that’s in another callback function. You can imagine if these functions are\n  spread over separate files that you’d have a hard time reading this code back\n  a month later.</p>\n<p>This is where JavaScript Promises comes into play. It’s a new way of writing\n  your code in a more readable and understandable way. A Promise represents the\n  result of a task, which may or may not have been completed. Like a contract\n  for a value that we might not know when the promise is created. It’s an\n  object or function with a <strong>then</strong> method. Because of the “then”\n  method, the action can be chained endlessly, and that’s awesome!</p>\n<p>A Promise typically has one of these 4 states.</p>\n<ul>\n  <li><strong>fulfilled</strong> – when the promise succeeds</li>\n  <li><strong>rejected</strong> – when the promise failed</li>\n  <li><strong>pending</strong> – ongoing, hasn’t been fulfilled or rejected yet</li>\n  <li><strong>settled</strong> – it has been fulfilled or rejected already</li>\n</ul>\n<p><img src=\"https://wp-test.sencha.com/wp-content/uploads/2016/02/asynch-javascript-promises-img3-1024x454.png\" alt=\"JavaScript Promises\"></p>\n<p>Promises is part of ECMAScript 6, which is available in the client of some\n  modern browsers, and also within the latest version of Node.js. The following\n  browsers do not support JavaScript Promises: Explorer 11 and below, Android\n  4.4 and below, and iOS Safari 7.1 and below.</p>\n<p>Ext JS 6 supports Promises and conforms to the Promises A+ spec; both\n  Classic and Modern toolkits are included. You can call the Sencha Promises\n  class, which is a wrapper for the native JavaScript functionality. Legacy\n  browsers will use the fallback provided by Sencha, and modern browsers will\n  use the native functionality.</p>\n<p>Here’s an example of a function that returns a Sencha Promise object:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">requestUserSettings: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Ext.Promise(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\t\t    <span class=\"comment\">//something asynchronous, like loading a store</span></span><br><span class=\"line\">\t    \tExt.getStore(‘Settings’).load(&#123;</span><br><span class=\"line\">    \t\t\tcallback: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">records, operation, success</span>) </span>&#123;</span><br><span class=\"line\">    \t\t\t        <span class=\"keyword\">if</span>(success)&#123;</span><br><span class=\"line\">    \t\t\t        \t<span class=\"keyword\">if</span>(records.length &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    \t\t\t\t\t\t<span class=\"comment\">//when it’s ok</span></span><br><span class=\"line\">    \t\t\t        \t\tresolve(records);</span><br><span class=\"line\">    \t\t\t        \t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    \t\t\t\t\t\t<span class=\"comment\">//still ok, but no results</span></span><br><span class=\"line\">    \t\t\t        \t\tresolve(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    \t\t\t        \t&#125;</span><br><span class=\"line\">    \t\t\t        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \t\t\t\t\t<span class=\"comment\">//something bad happened</span></span><br><span class=\"line\">    \t\t\t        \treject(operation);</span><br><span class=\"line\">    \t\t\t        &#125;</span><br><span class=\"line\">    \t\t\t  &#125;</span><br><span class=\"line\">\t\t    &#125;);</span><br><span class=\"line\">    \t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The <code>Ext.Promise</code> constructor takes one argument, a callback with\n  two parameters, resolve and reject. When it does something asynchronous\n  within the callback, like retrieving user settings from a local storage\n  store, then it calls “<strong>resolve</strong>”; if everything worked it\n  passes in the result, otherwise it calls “<strong>reject</strong>” and passes\n  in what went wrong.</p>\n<p>Here’s how you use that Promise:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">this</span>.requestUserSettings().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">records</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//It’s ok. do something with the records</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//oh no, something went wrong, display a nice error</span></span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The “<strong>then</strong>” takes two arguments, a callback for a success\n  case, and another one for the failure case <a href=\"http://biturlz.com/L5m74B2\" target=\"_blank\" rel=\"noopener\">our\n    website</a>. Both are optional, so you can add a callback for the success\n  or failure case only. You can chain as many <strong>then</strong> methods as\n  you want to run additional async actions one after another.</p>\n<p>Besides the <code>“then()”</code> instance method, there are also ways to\n  terminate a Promise chain (<code>“done()”</code>), cancel pending chains (<code>“cancel()”</code>).\n  Also, there’s a way to attach an <strong>onCompleted</strong> callback to the\n  chain (<code>“always()”</code>), for example with cleanup logic regardless\n  the outcome. And, you can attach an <strong>onRejected</strong> callback, if\n  one action within the chain is rejected (<code>“otherwise()”</code>), for\n  example to handle failures.</p>\n<p>In addition to <code>Ext.Promise</code>, Sencha will also ship <code>Ext.Deferred</code>,\n  which is a mechanism used to create new Promises within Ext JS 6. The\n  difference between these two constructors is that with a deferred constructor\n  the creator has direct access to “behind the scenes” extras, such as progress\n  updates.</p>\n<p>Last but not least, Sencha integrated Promises support into <code>Ext.Ajax</code>.</p>\n<p><code>Ext.Ajax.request()</code> is now an instance of a class derived from\n  Ext.data.request.Base which can be used with a <strong>then</strong> method.\n  It allows you to write code like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.Ajax.request(&#123;</span><br><span class=\"line\">    url: <span class=\"string\">'feed.json'</span>,</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// use response</span></span><br><span class=\"line\">&#125;).always(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// clean-up logic, regardless the outcome</span></span><br><span class=\"line\">&#125;).otherwise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// handle failure</span></span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<h4 id=\"More-Resources\"><a href=\"#More-Resources\" class=\"headerlink\" title=\"More Resources\"></a>More\n  Resources</h4>\n<p>There’s a lot more information to explain how you can use JavaScript &amp;\n  Ext JS Promises. Take a look at these resources to learn more!</p>\n<ul>\n  <li><a href=\"https://speakerdeck.com/savelee/deferreds\" target=\"_blank\" rel=\"noopener\">Dealing with\n      Asynchronous JavaScript: Events, Callbacks &amp; Promises/Deferreds</a>\n    (presentation)</li>\n  <li>Ext JS API docs<ul>\n      <li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.Promise\" target=\"_blank\" rel=\"noopener\">Ext.Promise</a></li>\n      <li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.promise.Promise-method-then\" target=\"_blank\" rel=\"noopener\">Ext.promise.Promise-method-then</a></li>\n      <li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.Deferred\" target=\"_blank\" rel=\"noopener\">Ext.Deferred</a></li>\n    </ul>\n  </li>\n  <li><a href=\"https://github.com/promises-aplus/promises-spec\" target=\"_blank\" rel=\"noopener\">Promises spec</a></li>\n  <li><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener\">Mozilla\n      Promise spec</a></li>\n</ul>"},{"title":"Connect & play around with BB-8 by Sphero with JavaScript on a Mac","description":"Play around with the BB-8 Sphero JavaScript SDK.","date":"2016-01-02T11:07:16.000Z","_content":"\nI'm a huge Star Wars fan, and like most of you, i've seen The Force Awakens as well. I immediately felt in love with BB-8. The little white orange droid. So you can imagine, how happy I was, when I opened my christmas presents, and found the little BB-8 by Sphero droid in a box. BB-8 by Sphero, is a little toy robot that you can control with apps for Android and iOS, via bluetooth. Actually the sphere is the true robot, BB-8's head is attached to the big sphere, via a magnet, and it has little wheels so it always stays on top, and gives it the Looney Toones Road runner look, while rolling. Cute. \n\nThis little droid has the following functionalities; it can roll around (quiet fast,), \nit can listen to your voice (via the app), it can show colors, it has IMU, 3 axis accelerometer, 3 axis rotation gyro and locator sensors.\nThe BB-8 uses a Bluetooth Low Energy (LE) interface, also known as \"Bluetooth Smart\" or \"Bluetooth 4.0/4.1\". \n\nWhat's really awesome is that Sphero opens up their APIs, so developers like me, can play around with this. And that's great. There are SDKs for Android, iOS, Windows development, and there's a JavaScript SDK! Since I'm a JavaScript lover, I thought, let's give it a go, and try this out myself.\n\n<!--more-->\n\nHere's are the steps that I took, to get it all up and running. I tried it on a Mac OSX with XCode installed. You will need an editor and Node JS on your machine. With these base requirements, you will need to install the Sphero SDK, and also Noble, a hardware adapter that supports the Bluetooth 4.x+ standard to connect your computer to your BB-8. https://github.com/sandeepmistry/noble\nWith Noble, you can read out the bluetooth information, which you will later need while writing your code. To get Noble up and running I had to fix my system paths. I've added the following to my bashprofile, to make sure Noble and XPC-Connection which is what the package uses under the hood, don't run into build errors: `export MYBIN=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin export PATH=${MYBIN}:${PATH}` \n\nThen afterwards, run the following commands to make a connection from your computer:\n\n{% gist 3098563c5566fdf8e320 %}\n\nThe UUID is what you'll need. I wrote this simple script, which I run in Node to make a simple connection with my little friend, and read out his information:\n\n{% gist b76682c6491a1b7b05a8 %}\n\nIt doesn't do anything special yet, other than switching some colors, but this is a great start. My next goal will be to create my own Sencha universal app, to control BB-8 via a web interface. I'll need a Node JS Express back-end for that: Once, I'm done with that I can share this, in another blog post, but here's a start: https://github.com/savelee/bb8-starwars\n\nFor now, take a look into these resources:\n\n* http://http://developer.gosphero.com/\n* https://github.com/orbotix\n* https://github.com/orbotix/DeveloperResources/tree/master/docs\n* https://github.com/alchemycs/spheron\n* http://sdk.sphero.com/community-apis/javascript-sdk/\n\n![BB8 by Sphero](/images/sphero.jpg)\n","source":"_posts/connect-play-around-with-bb-8-by-sphero-with-javascript-on-a-mac.md","raw":"---\ntitle: Connect & play around with BB-8 by Sphero with JavaScript on a Mac\ndescription: Play around with the BB-8 Sphero JavaScript SDK.\ntags:\n  - BB8\n  - JavaScript\n  - Sphero\n  - Star Wars\ncategories:\n  - Robotics\ndate: 2016-01-02 12:07:16\n---\n\nI'm a huge Star Wars fan, and like most of you, i've seen The Force Awakens as well. I immediately felt in love with BB-8. The little white orange droid. So you can imagine, how happy I was, when I opened my christmas presents, and found the little BB-8 by Sphero droid in a box. BB-8 by Sphero, is a little toy robot that you can control with apps for Android and iOS, via bluetooth. Actually the sphere is the true robot, BB-8's head is attached to the big sphere, via a magnet, and it has little wheels so it always stays on top, and gives it the Looney Toones Road runner look, while rolling. Cute. \n\nThis little droid has the following functionalities; it can roll around (quiet fast,), \nit can listen to your voice (via the app), it can show colors, it has IMU, 3 axis accelerometer, 3 axis rotation gyro and locator sensors.\nThe BB-8 uses a Bluetooth Low Energy (LE) interface, also known as \"Bluetooth Smart\" or \"Bluetooth 4.0/4.1\". \n\nWhat's really awesome is that Sphero opens up their APIs, so developers like me, can play around with this. And that's great. There are SDKs for Android, iOS, Windows development, and there's a JavaScript SDK! Since I'm a JavaScript lover, I thought, let's give it a go, and try this out myself.\n\n<!--more-->\n\nHere's are the steps that I took, to get it all up and running. I tried it on a Mac OSX with XCode installed. You will need an editor and Node JS on your machine. With these base requirements, you will need to install the Sphero SDK, and also Noble, a hardware adapter that supports the Bluetooth 4.x+ standard to connect your computer to your BB-8. https://github.com/sandeepmistry/noble\nWith Noble, you can read out the bluetooth information, which you will later need while writing your code. To get Noble up and running I had to fix my system paths. I've added the following to my bashprofile, to make sure Noble and XPC-Connection which is what the package uses under the hood, don't run into build errors: `export MYBIN=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin export PATH=${MYBIN}:${PATH}` \n\nThen afterwards, run the following commands to make a connection from your computer:\n\n{% gist 3098563c5566fdf8e320 %}\n\nThe UUID is what you'll need. I wrote this simple script, which I run in Node to make a simple connection with my little friend, and read out his information:\n\n{% gist b76682c6491a1b7b05a8 %}\n\nIt doesn't do anything special yet, other than switching some colors, but this is a great start. My next goal will be to create my own Sencha universal app, to control BB-8 via a web interface. I'll need a Node JS Express back-end for that: Once, I'm done with that I can share this, in another blog post, but here's a start: https://github.com/savelee/bb8-starwars\n\nFor now, take a look into these resources:\n\n* http://http://developer.gosphero.com/\n* https://github.com/orbotix\n* https://github.com/orbotix/DeveloperResources/tree/master/docs\n* https://github.com/alchemycs/spheron\n* http://sdk.sphero.com/community-apis/javascript-sdk/\n\n![BB8 by Sphero](/images/sphero.jpg)\n","slug":"connect-play-around-with-bb-8-by-sphero-with-javascript-on-a-mac","published":1,"updated":"2018-11-25T16:08:04.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncns0009kif53u43b7ca","content":"<p>I’m a huge Star Wars fan, and like most of you, i’ve seen The Force Awakens\n  as well. I immediately felt in love with BB-8. The little white orange droid.\n  So you can imagine, how happy I was, when I opened my christmas presents, and\n  found the little BB-8 by Sphero droid in a box. BB-8 by Sphero, is a little\n  toy robot that you can control with apps for Android and iOS, via bluetooth.\n  Actually the sphere is the true robot, BB-8’s head is attached to the big\n  sphere, via a magnet, and it has little wheels so it always stays on top, and\n  gives it the Looney Toones Road runner look, while rolling. Cute.</p>\n<p>This little droid has the following functionalities; it can roll around\n  (quiet fast,), it can listen to your voice (via the app), it can show colors,\n  it has IMU, 3 axis accelerometer, 3 axis rotation gyro and locator sensors.\n  The BB-8 uses a Bluetooth Low Energy (LE) interface, also known as “Bluetooth\n  Smart” or “Bluetooth 4.0/4.1”.</p>\n<p>What’s really awesome is that Sphero opens up their APIs, so developers like\n  me, can play around with this. And that’s great. There are SDKs for Android,\n  iOS, Windows development, and there’s a JavaScript SDK! Since I’m a\n  JavaScript lover, I thought, let’s give it a go, and try this out myself.</p>\n<a id=\"more\"></a>\n<p>Here’s are the steps that I took, to get it all up and running. I tried it\n  on a Mac OSX with XCode installed. You will need an editor and Node JS on\n  your machine. With these base requirements, you will need to install the\n  Sphero SDK, and also Noble, a hardware adapter that supports the Bluetooth\n  4.x+ standard to connect your computer to your BB-8. <a href=\"https://github.com/sandeepmistry/noble\" target=\"_blank\" rel=\"noopener\">https://github.com/sandeepmistry/noble</a>\n  With Noble, you can read out the bluetooth information, which you will later\n  need while writing your code. To get Noble up and running I had to fix my\n  system paths. I’ve added the following to my bashprofile, to make sure Noble\n  and XPC-Connection which is what the package uses under the hood, don’t run\n  into build errors: <code>export\n    MYBIN=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin export\n    PATH=${MYBIN}:${PATH}</code></p>\n<p>Then afterwards, run the following commands to make a connection from your\n  computer:</p>\n<script src=\"//gist.github.com/3098563c5566fdf8e320.js\"></script>\n<p>The UUID is what you’ll need. I wrote this simple script, which I run in\n  Node to make a simple connection with my little friend, and read out his\n  information:</p>\n<script src=\"//gist.github.com/b76682c6491a1b7b05a8.js\"></script>\n<p>It doesn’t do anything special yet, other than switching some colors, but\n  this is a great start. My next goal will be to create my own Sencha universal\n  app, to control BB-8 via a web interface. I’ll need a Node JS Express\n  back-end for that: Once, I’m done with that I can share this, in another blog\n  post, but here’s a start: <a href=\"https://github.com/savelee/bb8-starwars\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/bb8-starwars</a></p>\n<p>For now, take a look into these resources:</p>\n<ul>\n  <li><a href=\"http://http://developer.gosphero.com/\" target=\"_blank\" rel=\"noopener\">http://http://developer.gosphero.com/</a></li>\n  <li><a href=\"https://github.com/orbotix\" target=\"_blank\" rel=\"noopener\">https://github.com/orbotix</a></li>\n  <li><a href=\"https://github.com/orbotix/DeveloperResources/tree/master/docs\" target=\"_blank\" rel=\"noopener\">https://github.com/orbotix/DeveloperResources/tree/master/docs</a></li>\n  <li><a href=\"https://github.com/alchemycs/spheron\" target=\"_blank\" rel=\"noopener\">https://github.com/alchemycs/spheron</a></li>\n  <li><a href=\"http://sdk.sphero.com/community-apis/javascript-sdk/\" target=\"_blank\" rel=\"noopener\">http://sdk.sphero.com/community-apis/javascript-sdk/</a></li>\n</ul>\n<p><img src=\"/images/sphero.jpg\" alt=\"BB8 by Sphero\"></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>I’m a huge Star Wars fan, and like most of you, i’ve seen The Force Awakens\n  as well. I immediately felt in love with BB-8. The little white orange droid.\n  So you can imagine, how happy I was, when I opened my christmas presents, and\n  found the little BB-8 by Sphero droid in a box. BB-8 by Sphero, is a little\n  toy robot that you can control with apps for Android and iOS, via bluetooth.\n  Actually the sphere is the true robot, BB-8’s head is attached to the big\n  sphere, via a magnet, and it has little wheels so it always stays on top, and\n  gives it the Looney Toones Road runner look, while rolling. Cute.</p>\n<p>This little droid has the following functionalities; it can roll around\n  (quiet fast,), it can listen to your voice (via the app), it can show colors,\n  it has IMU, 3 axis accelerometer, 3 axis rotation gyro and locator sensors.\n  The BB-8 uses a Bluetooth Low Energy (LE) interface, also known as “Bluetooth\n  Smart” or “Bluetooth 4.0/4.1”.</p>\n<p>What’s really awesome is that Sphero opens up their APIs, so developers like\n  me, can play around with this. And that’s great. There are SDKs for Android,\n  iOS, Windows development, and there’s a JavaScript SDK! Since I’m a\n  JavaScript lover, I thought, let’s give it a go, and try this out myself.</p>","more":"<p>Here’s are the steps that I took, to get it all up and running. I tried it\n  on a Mac OSX with XCode installed. You will need an editor and Node JS on\n  your machine. With these base requirements, you will need to install the\n  Sphero SDK, and also Noble, a hardware adapter that supports the Bluetooth\n  4.x+ standard to connect your computer to your BB-8. <a href=\"https://github.com/sandeepmistry/noble\" target=\"_blank\" rel=\"noopener\">https://github.com/sandeepmistry/noble</a>\n  With Noble, you can read out the bluetooth information, which you will later\n  need while writing your code. To get Noble up and running I had to fix my\n  system paths. I’ve added the following to my bashprofile, to make sure Noble\n  and XPC-Connection which is what the package uses under the hood, don’t run\n  into build errors: <code>export\n    MYBIN=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin export\n    PATH=${MYBIN}:${PATH}</code></p>\n<p>Then afterwards, run the following commands to make a connection from your\n  computer:</p>\n<script src=\"//gist.github.com/3098563c5566fdf8e320.js\"></script>\n<p>The UUID is what you’ll need. I wrote this simple script, which I run in\n  Node to make a simple connection with my little friend, and read out his\n  information:</p>\n<script src=\"//gist.github.com/b76682c6491a1b7b05a8.js\"></script>\n<p>It doesn’t do anything special yet, other than switching some colors, but\n  this is a great start. My next goal will be to create my own Sencha universal\n  app, to control BB-8 via a web interface. I’ll need a Node JS Express\n  back-end for that: Once, I’m done with that I can share this, in another blog\n  post, but here’s a start: <a href=\"https://github.com/savelee/bb8-starwars\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/bb8-starwars</a></p>\n<p>For now, take a look into these resources:</p>\n<ul>\n  <li><a href=\"http://http://developer.gosphero.com/\" target=\"_blank\" rel=\"noopener\">http://http://developer.gosphero.com/</a></li>\n  <li><a href=\"https://github.com/orbotix\" target=\"_blank\" rel=\"noopener\">https://github.com/orbotix</a></li>\n  <li><a href=\"https://github.com/orbotix/DeveloperResources/tree/master/docs\" target=\"_blank\" rel=\"noopener\">https://github.com/orbotix/DeveloperResources/tree/master/docs</a></li>\n  <li><a href=\"https://github.com/alchemycs/spheron\" target=\"_blank\" rel=\"noopener\">https://github.com/alchemycs/spheron</a></li>\n  <li><a href=\"http://sdk.sphero.com/community-apis/javascript-sdk/\" target=\"_blank\" rel=\"noopener\">http://sdk.sphero.com/community-apis/javascript-sdk/</a></li>\n</ul>\n<p><img src=\"/images/sphero.jpg\" alt=\"BB8 by Sphero\"></p>"},{"title":"Conditional Templating in Dialogflow for Google Assistant","date":"2018-05-20T15:02:22.000Z","_content":"\nWhat I like most about Dialogflow, (the tool to create Chatbots and Smart Assistants / Google Assistant apps), is that you can maintain your conversations within the Dialogflow UI. Many users write their complete FAQ content in intents and responses. You no longer need a developer to tweak your conversations or deploy your agent which makes it very scalable for large organizations. It's also possible to load data from external systems. In that case, you are hosting parts of the conversation elsewhere. You could store these parts in language files or databases. Some organizations prefer to write the full conversation in the Dialogflow UI. That way your copywriters can maintain the full conversation. \n\nIt's good to know that it is possible to use templates and conditionals within the Dialogflow UI. The trick here, is to make use of the **custom payload** response setting, which you can find in the Intent > Responses section.\n<!--more-->\n\nJust like how you would include Rich Cards, you can choose custom payload, and provide your own JSON. Since JSON is just JavaScript, my first try was to use `if else` conditions directly in the code: \n\n``` JSON \n{ \"web\": { \n    \"type\": \"text\", \n    \"fn\": \"var today = new Date(); var curHr = today.getHours(); var greet = \"\"; if (curHr < 12) { greet = 'Good morning!'; } else if (curHr < 18) { greet = 'Good afternoon!'; } else { greet = 'Good evening!'; } return greet;\" }\n} \n```\n\nIn my SDK back-end code or fulfillment app, I could convert the string to executable JavaScript code. Although this works. It kinda feels dirty, since I need to use evil `eval()` or equivalent code in my back-end. On top of that I expect the person who maintains the conversation, to have JavaScript skills. The next solution, came from a customer of mine. Instead, let make use of a templating library, so you can provide readable templates, and variables that an be injected. \n\nThink Jinja (for Python or Java developers), Smarty (PHP) or Jade/Pug, Handlebars and Mustache (for JavaScript developers). I tried this with [PugJS](http://www.pugjs.org) (formerly known as Jade). It works really nice.\n\nLet's take this intent: \n\n**Intent Name**: [templating] example\n\n**Training Phrases**: \n  * Greet me \n  * Greet Lee \n\n**Parameters**: \n  * username - @sys.given-name - $username \n  \n**Fulfillment**: Enable webhook call \n\n**Response**: Here's an example \n\n**custom payload**: \n\n``` JSON \n{ \"custom\": \n  { \"locals\": { \n      \"username\": \"$username\" \n    }, \n    \"pug\": [ \"if usernamen\", \" | Hello $usernamen\", \"elsen\", \" | Hello stranger\" ] \n  } \n}\n```\n\nThe values of the `locals` object, are the parameter values. In the `pug` object, I wrote a multi-line string template, with an if else branche. When using PugJS, the line indenting is importing. Pay attention to the newline `n` code, and the `|` for using plain text. In my fulfillment Cloud Function, I will take this template, and compile it, together with the local template variables. Your code will look like this:\n\n{% gist 52b9c84c035b2e1ef4f8a84051a2803b %}\n","source":"_posts/conditional-templating-in-dialogflow-for-google-assistant.md","raw":"---\ntitle: Conditional Templating in Dialogflow for Google Assistant\ntags:\n  - Actions on Google\n  - Conditionals\n  - Dialogflow\n  - Google Assistant\n  - Pug\n  - Templating\ncategories:\n  - Bots\ndate: 2018-05-20 17:02:22\n---\n\nWhat I like most about Dialogflow, (the tool to create Chatbots and Smart Assistants / Google Assistant apps), is that you can maintain your conversations within the Dialogflow UI. Many users write their complete FAQ content in intents and responses. You no longer need a developer to tweak your conversations or deploy your agent which makes it very scalable for large organizations. It's also possible to load data from external systems. In that case, you are hosting parts of the conversation elsewhere. You could store these parts in language files or databases. Some organizations prefer to write the full conversation in the Dialogflow UI. That way your copywriters can maintain the full conversation. \n\nIt's good to know that it is possible to use templates and conditionals within the Dialogflow UI. The trick here, is to make use of the **custom payload** response setting, which you can find in the Intent > Responses section.\n<!--more-->\n\nJust like how you would include Rich Cards, you can choose custom payload, and provide your own JSON. Since JSON is just JavaScript, my first try was to use `if else` conditions directly in the code: \n\n``` JSON \n{ \"web\": { \n    \"type\": \"text\", \n    \"fn\": \"var today = new Date(); var curHr = today.getHours(); var greet = \"\"; if (curHr < 12) { greet = 'Good morning!'; } else if (curHr < 18) { greet = 'Good afternoon!'; } else { greet = 'Good evening!'; } return greet;\" }\n} \n```\n\nIn my SDK back-end code or fulfillment app, I could convert the string to executable JavaScript code. Although this works. It kinda feels dirty, since I need to use evil `eval()` or equivalent code in my back-end. On top of that I expect the person who maintains the conversation, to have JavaScript skills. The next solution, came from a customer of mine. Instead, let make use of a templating library, so you can provide readable templates, and variables that an be injected. \n\nThink Jinja (for Python or Java developers), Smarty (PHP) or Jade/Pug, Handlebars and Mustache (for JavaScript developers). I tried this with [PugJS](http://www.pugjs.org) (formerly known as Jade). It works really nice.\n\nLet's take this intent: \n\n**Intent Name**: [templating] example\n\n**Training Phrases**: \n  * Greet me \n  * Greet Lee \n\n**Parameters**: \n  * username - @sys.given-name - $username \n  \n**Fulfillment**: Enable webhook call \n\n**Response**: Here's an example \n\n**custom payload**: \n\n``` JSON \n{ \"custom\": \n  { \"locals\": { \n      \"username\": \"$username\" \n    }, \n    \"pug\": [ \"if usernamen\", \" | Hello $usernamen\", \"elsen\", \" | Hello stranger\" ] \n  } \n}\n```\n\nThe values of the `locals` object, are the parameter values. In the `pug` object, I wrote a multi-line string template, with an if else branche. When using PugJS, the line indenting is importing. Pay attention to the newline `n` code, and the `|` for using plain text. In my fulfillment Cloud Function, I will take this template, and compile it, together with the local template variables. Your code will look like this:\n\n{% gist 52b9c84c035b2e1ef4f8a84051a2803b %}\n","slug":"conditional-templating-in-dialogflow-for-google-assistant","published":1,"updated":"2018-11-25T16:20:11.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncnt000akif5occua2mh","content":"<p>What I like most about Dialogflow, (the tool to create Chatbots and Smart\n  Assistants / Google Assistant apps), is that you can maintain your\n  conversations within the Dialogflow UI. Many users write their complete FAQ\n  content in intents and responses. You no longer need a developer to tweak\n  your conversations or deploy your agent which makes it very scalable for\n  large organizations. It’s also possible to load data from external systems.\n  In that case, you are hosting parts of the conversation elsewhere. You could\n  store these parts in language files or databases. Some organizations prefer\n  to write the full conversation in the Dialogflow UI. That way your\n  copywriters can maintain the full conversation.</p>\n<p>It’s good to know that it is possible to use templates and conditionals\n  within the Dialogflow UI. The trick here, is to make use of the <strong>custom\n    payload</strong> response setting, which you can find in the Intent &gt;\n  Responses section.\n  <a id=\"more\"></a>\n</p>\n<p>Just like how you would include Rich Cards, you can choose custom payload,\n  and provide your own JSON. Since JSON is just JavaScript, my first try was to\n  use <code>if else</code> conditions directly in the code:</p>\n<figure class=\"highlight json\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">&#123; <span class=\"attr\">\"web\"</span>: &#123; </span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"text\"</span>, </span><br><span class=\"line\">    <span class=\"attr\">\"fn\"</span>: <span class=\"string\">\"var today = new Date(); var curHr = today.getHours(); var greet = \"</span><span class=\"string\">\"; if (curHr &lt; 12) &#123; greet = 'Good morning!'; &#125; else if (curHr &lt; 18) &#123; greet = 'Good afternoon!'; &#125; else &#123; greet = 'Good evening!'; &#125; return greet;\"</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>In my SDK back-end code or fulfillment app, I could convert the string to\n  executable JavaScript code. Although this works. It kinda feels dirty, since\n  I need to use evil <code>eval()</code> or equivalent code in my back-end. On\n  top of that I expect the person who maintains the conversation, to have\n  JavaScript skills. The next solution, came from a customer of mine. Instead,\n  let make use of a templating library, so you can provide readable templates,\n  and variables that an be injected.</p>\n<p>Think Jinja (for Python or Java developers), Smarty (PHP) or Jade/Pug,\n  Handlebars and Mustache (for JavaScript developers). I tried this with <a href=\"http://www.pugjs.org\" target=\"_blank\" rel=\"noopener\">PugJS</a>\n  (formerly known as Jade). It works really nice.</p>\n<p>Let’s take this intent:</p>\n<p><strong>Intent Name</strong>: [templating] example</p>\n<p><strong>Training Phrases</strong>:</p>\n<ul>\n  <li>Greet me</li>\n  <li>Greet Lee</li>\n</ul>\n<p><strong>Parameters</strong>:</p>\n<ul>\n  <li>username - @sys.given-name - $username</li>\n</ul>\n<p><strong>Fulfillment</strong>: Enable webhook call</p>\n<p><strong>Response</strong>: Here’s an example</p>\n<p><strong>custom payload</strong>:</p>\n<figure class=\"highlight json\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">&#123; <span class=\"attr\">\"custom\"</span>: </span><br><span class=\"line\">  &#123; <span class=\"attr\">\"locals\"</span>: &#123; </span><br><span class=\"line\">      <span class=\"attr\">\"username\"</span>: <span class=\"string\">\"$username\"</span> </span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    <span class=\"attr\">\"pug\"</span>: [ <span class=\"string\">\"if usernamen\"</span>, <span class=\"string\">\" | Hello $usernamen\"</span>, <span class=\"string\">\"elsen\"</span>, <span class=\"string\">\" | Hello stranger\"</span> ] </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The values of the <code>locals</code> object, are the parameter values. In\n  the <code>pug</code> object, I wrote a multi-line string template, with an if\n  else branche. When using PugJS, the line indenting is importing. Pay\n  attention to the newline <code>n</code> code, and the <code>|</code> for\n  using plain text. In my fulfillment Cloud Function, I will take this\n  template, and compile it, together with the local template variables. Your\n  code will look like this:</p>\n<script src=\"//gist.github.com/52b9c84c035b2e1ef4f8a84051a2803b.js\"></script>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>What I like most about Dialogflow, (the tool to create Chatbots and Smart\n  Assistants / Google Assistant apps), is that you can maintain your\n  conversations within the Dialogflow UI. Many users write their complete FAQ\n  content in intents and responses. You no longer need a developer to tweak\n  your conversations or deploy your agent which makes it very scalable for\n  large organizations. It’s also possible to load data from external systems.\n  In that case, you are hosting parts of the conversation elsewhere. You could\n  store these parts in language files or databases. Some organizations prefer\n  to write the full conversation in the Dialogflow UI. That way your\n  copywriters can maintain the full conversation.</p>\n<p>It’s good to know that it is possible to use templates and conditionals\n  within the Dialogflow UI. The trick here, is to make use of the <strong>custom\n    payload</strong> response setting, which you can find in the Intent &gt;\n  Responses section.","more":"</p>\n<p>Just like how you would include Rich Cards, you can choose custom payload,\n  and provide your own JSON. Since JSON is just JavaScript, my first try was to\n  use <code>if else</code> conditions directly in the code:</p>\n<figure class=\"highlight json\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">&#123; <span class=\"attr\">\"web\"</span>: &#123; </span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"text\"</span>, </span><br><span class=\"line\">    <span class=\"attr\">\"fn\"</span>: <span class=\"string\">\"var today = new Date(); var curHr = today.getHours(); var greet = \"</span><span class=\"string\">\"; if (curHr &lt; 12) &#123; greet = 'Good morning!'; &#125; else if (curHr &lt; 18) &#123; greet = 'Good afternoon!'; &#125; else &#123; greet = 'Good evening!'; &#125; return greet;\"</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>In my SDK back-end code or fulfillment app, I could convert the string to\n  executable JavaScript code. Although this works. It kinda feels dirty, since\n  I need to use evil <code>eval()</code> or equivalent code in my back-end. On\n  top of that I expect the person who maintains the conversation, to have\n  JavaScript skills. The next solution, came from a customer of mine. Instead,\n  let make use of a templating library, so you can provide readable templates,\n  and variables that an be injected.</p>\n<p>Think Jinja (for Python or Java developers), Smarty (PHP) or Jade/Pug,\n  Handlebars and Mustache (for JavaScript developers). I tried this with <a href=\"http://www.pugjs.org\" target=\"_blank\" rel=\"noopener\">PugJS</a>\n  (formerly known as Jade). It works really nice.</p>\n<p>Let’s take this intent:</p>\n<p><strong>Intent Name</strong>: [templating] example</p>\n<p><strong>Training Phrases</strong>:</p>\n<ul>\n  <li>Greet me</li>\n  <li>Greet Lee</li>\n</ul>\n<p><strong>Parameters</strong>:</p>\n<ul>\n  <li>username - @sys.given-name - $username</li>\n</ul>\n<p><strong>Fulfillment</strong>: Enable webhook call</p>\n<p><strong>Response</strong>: Here’s an example</p>\n<p><strong>custom payload</strong>:</p>\n<figure class=\"highlight json\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">&#123; <span class=\"attr\">\"custom\"</span>: </span><br><span class=\"line\">  &#123; <span class=\"attr\">\"locals\"</span>: &#123; </span><br><span class=\"line\">      <span class=\"attr\">\"username\"</span>: <span class=\"string\">\"$username\"</span> </span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    <span class=\"attr\">\"pug\"</span>: [ <span class=\"string\">\"if usernamen\"</span>, <span class=\"string\">\" | Hello $usernamen\"</span>, <span class=\"string\">\"elsen\"</span>, <span class=\"string\">\" | Hello stranger\"</span> ] </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The values of the <code>locals</code> object, are the parameter values. In\n  the <code>pug</code> object, I wrote a multi-line string template, with an if\n  else branche. When using PugJS, the line indenting is importing. Pay\n  attention to the newline <code>n</code> code, and the <code>|</code> for\n  using plain text. In my fulfillment Cloud Function, I will take this\n  template, and compile it, together with the local template variables. Your\n  code will look like this:</p>\n<script src=\"//gist.github.com/52b9c84c035b2e1ef4f8a84051a2803b.js\"></script>"},{"title":"Advanced Cmd: How to integrate Ext JS with Maven","description":"This article will show, how you can integrate Ext JS with tools like Maven","date":"2016-02-25T17:38:32.000Z","_content":"\nThis last article, will show you, how you can integrate Ext JS with tools like Maven. Please understand, Maven is not a required Sencha setup, though it is possible to build your Sencha projects with Maven.\n\n<!--more-->\n\n## About Apache Maven\n\nMaven is a build automation tool used primarily for Java projects. Maven addresses two aspects of building software: First, it describes how software is built, and second, it describes its dependencies. Contrary to preceding tools like <a href=\"https://en.wikipedia.org/wiki/Apache_Ant\">Apache Ant</a>, it uses conventions for the build procedure, and only exceptions need to be written down. An XML Project Object Model file (pom.xml) describes the software project being built, its dependencies on other external modules and components, the build order, directories, and required plugins. Maven is built using a plugin-based architecture that allows it to make use of any application controllable through standard input. Theoretically, this would allow anyone to write plugins to interface with build tools (compilers, unit test tools, etc.) for any other language. In reality, support and use for languages other than Java has been minimal. ##Generate a Maven project for a web project First, make sure Maven is installed on your machine. If not installed, you can follow this guide: https://maven.apache.org/install.html. Once Maven is installed, we will use it to generate a web application. To do so, we can choose the webapp archetype, which has folders and settings for a (Java) web application configured: https://maven.apache.org/archetypes/maven-archetype-webapp/. We can run the following command from the command-line, (it’s very similar to sencha generate app, but then for Java web applications.):\n\n```\nmvn archetype:generate -DgroupId=com.folder.name.you.like -DartifactId=NameOfProject -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false\n\nFor example: `mvn archetype:generate -DgroupId=com.ladysign.MavenApp -DartifactId=MavenApp` ` -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false` Maven will start processing and will create the complete web based java application project structure, with the following folders:\n\nMavenApp   \t\t\t# contains src folder and pom.xml\nsrc/main/webapp \t\t# contains index.jsp and WEB-INF folde\nsrc/main/webapp/WEB-INF\t # contains web.xmlthemes\nsrc/main/resources      # it contains images/properties files\n```\n\nThe **pom.xml** (project object model), will look like this: https://gist.github.com/savelee/d6d0039be37e397eb86b As you noticed, there is also an **index.jsp** file in the webapp folder. This means, you should be able to see this file in your browser, after a build.\n\n ## Build with Maven \n \n Let’s build this project: `cd MavenApp` `mvn clean package` (or mvn compile) (Mac OSX users might need to prefix with sudo) Maven will start building the project. It will create a targets folder, with a **MavenApp.war** file. This is the file that you can deploy, with a server like for example, Apache Tomcat. \n \n ## Deploy with Tomcat \n \n When you are new to Apache Tomcat, you can find the setup guide here: https://tomcat.apache.org/tomcat-9.0-doc/setup.html Once Tomcat is installed, you only need to copy the **war** file into the **webapps** folder of Tomcat. (It’s setup that easy, in **/TOMCAT_HOME/conf/server.xml** actually.) Sometimes you might need to stop/start your server. Navigate on the command-line to the Tomcat app bin folder. And run: `sudo sh shutdown.sh` (or execute **.bat** for Windows), and startup.sh (.bat). \n \n ## Integrate Ext JS with Maven \n \n Now, that we have seen how Maven works, let’s see how we can integrate an Ext JS app with a Maven web app project. Our goal is to have the Sencha build within our **src/main/webapp** folder. We want to automate it as much as possible, so **index.jsp** will contain the Sencha microloader. I have a working example, in my Github repository, which you can find here: https://github.com/savelee/maven-ant-sencha. These steps, will let you do the same from scratch: 1) From the downloaded ext js folder, start with generating a new workspace: `sencha generate workspace [path to the folder]/sencha` for example: `sencha generate workspace src/main/sencha` 2) Navigate to the new generated **sencha/ext** folder 3) Then generate a new app `sencha generate app MyApp ../myapp` 4) You can test the demo application by booting the sencha internal (Jetty) server, from the **myapp** folder, execute: `sencha app watch` Sencha spins off an internal server, it should give you the location with the port number, where it’s currently hosted. By default this will be: http://localhost:1841/myapp/ 5) Great, now that it works, let see where the sencha build is located: `sencha app build` The production build is located in: `sencha/build/MyApp/production` Now there are two things that we can do. We can either modify the **build.xml** file in the app folder, which can copy the build into the Maven folder. (Like how I described Ant build scripts, in article 2.) or we can create a Maven task for this. Ideally we need a separate Maven task. Because by just modifying it in the build.xml, we have to run 2 tasks on the command-line. The `sencha app build` and the `mvn clean package` commands. Let’s see how we can fix this...\n\n## Build through Maven \n\nPlugins There are 2 maven plugins that can help with building the Sencha app via Maven. We could create a Maven task which executes Sencha Cmd via the **sencha.jar** that’s available in the Sencha Cmd installation folder, or we can use Maven Ant task integration, since Sencha Cmd itself is build on top of Ant. With both solutions, you can achieve the same, it’s just a matter where you want to store your Ant tasks. In the Maven **pom.xml** file, or in the Sencha App **build.xml** file. I will show both solutions: \n\n### Sencha Cmd execution, with the Maven exec-maven-plugin \n\nWith the *exec-maven-plugin*, http://www.mojohaus.org/exec-maven-plugin/usage.htm, you can use Maven to execute commands from the command-line. This will require, that you have Sencha Cmd installed on the machine that runs the Maven commands. Your **pom.xml** file, will look like this:\n\n{% gist 16e9b853977bb528ac26 %}\n\nWhen you want to work with environment vars, you can configure a profiles block:\n\n{% gist 59c57584a1663bfc7dfe %}\n\n`--environment` `${sencha.env}` See also: https://github.com/savelee/maven-ant-sencha/blob/master/pom_backup.xml for my complete solution. \n\n### Ant Task runner, with the Maven maven-antrun-plugin \n\nWith the *maven-antrun-plugin* https://maven.apache.org/plugins/maven-antrun-plugin/, you can use Maven to run Apache Ant task. To make sure it recognizes the Sencha Ant command, you will need to have the **sencha.jar** somewhere on your machine. By default it’s located in the Cmd installation folder, but you could copy this over to your Maven environment/machine. Your **pom.xml** file, will look like this: https://gist.github.com/savelee/5d99a824d4df70c66fbe \n\nSee also: https://github.com/savelee/maven-ant-sencha/blob/master/pom.xml for my complete solution. \n\nHere are some handy resources:\n\n* https://maven.apache.org/ \n* http://www.tutorialspoint.com/maven/maven_web_application.htm\n* http://www.mkyong.com/maven/how-to-create-a-web-application-project-with-maven/\n* https://tomcat.apache.org/tomcat-9.0-doc/setup.html","source":"_posts/advanced-cmd-how-to-integrate-ext-js-with-maven.md","raw":"---\ntitle: 'Advanced Cmd: How to integrate Ext JS with Maven'\ndescription: This article will show, how you can integrate Ext JS with tools like Maven\ntags:\n  - Java\n  - Maven\n  - pom\n  - Sencha\ncategories:\n  - Sencha CMD\ndate: 2016-02-25 18:38:32\n---\n\nThis last article, will show you, how you can integrate Ext JS with tools like Maven. Please understand, Maven is not a required Sencha setup, though it is possible to build your Sencha projects with Maven.\n\n<!--more-->\n\n## About Apache Maven\n\nMaven is a build automation tool used primarily for Java projects. Maven addresses two aspects of building software: First, it describes how software is built, and second, it describes its dependencies. Contrary to preceding tools like <a href=\"https://en.wikipedia.org/wiki/Apache_Ant\">Apache Ant</a>, it uses conventions for the build procedure, and only exceptions need to be written down. An XML Project Object Model file (pom.xml) describes the software project being built, its dependencies on other external modules and components, the build order, directories, and required plugins. Maven is built using a plugin-based architecture that allows it to make use of any application controllable through standard input. Theoretically, this would allow anyone to write plugins to interface with build tools (compilers, unit test tools, etc.) for any other language. In reality, support and use for languages other than Java has been minimal. ##Generate a Maven project for a web project First, make sure Maven is installed on your machine. If not installed, you can follow this guide: https://maven.apache.org/install.html. Once Maven is installed, we will use it to generate a web application. To do so, we can choose the webapp archetype, which has folders and settings for a (Java) web application configured: https://maven.apache.org/archetypes/maven-archetype-webapp/. We can run the following command from the command-line, (it’s very similar to sencha generate app, but then for Java web applications.):\n\n```\nmvn archetype:generate -DgroupId=com.folder.name.you.like -DartifactId=NameOfProject -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false\n\nFor example: `mvn archetype:generate -DgroupId=com.ladysign.MavenApp -DartifactId=MavenApp` ` -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false` Maven will start processing and will create the complete web based java application project structure, with the following folders:\n\nMavenApp   \t\t\t# contains src folder and pom.xml\nsrc/main/webapp \t\t# contains index.jsp and WEB-INF folde\nsrc/main/webapp/WEB-INF\t # contains web.xmlthemes\nsrc/main/resources      # it contains images/properties files\n```\n\nThe **pom.xml** (project object model), will look like this: https://gist.github.com/savelee/d6d0039be37e397eb86b As you noticed, there is also an **index.jsp** file in the webapp folder. This means, you should be able to see this file in your browser, after a build.\n\n ## Build with Maven \n \n Let’s build this project: `cd MavenApp` `mvn clean package` (or mvn compile) (Mac OSX users might need to prefix with sudo) Maven will start building the project. It will create a targets folder, with a **MavenApp.war** file. This is the file that you can deploy, with a server like for example, Apache Tomcat. \n \n ## Deploy with Tomcat \n \n When you are new to Apache Tomcat, you can find the setup guide here: https://tomcat.apache.org/tomcat-9.0-doc/setup.html Once Tomcat is installed, you only need to copy the **war** file into the **webapps** folder of Tomcat. (It’s setup that easy, in **/TOMCAT_HOME/conf/server.xml** actually.) Sometimes you might need to stop/start your server. Navigate on the command-line to the Tomcat app bin folder. And run: `sudo sh shutdown.sh` (or execute **.bat** for Windows), and startup.sh (.bat). \n \n ## Integrate Ext JS with Maven \n \n Now, that we have seen how Maven works, let’s see how we can integrate an Ext JS app with a Maven web app project. Our goal is to have the Sencha build within our **src/main/webapp** folder. We want to automate it as much as possible, so **index.jsp** will contain the Sencha microloader. I have a working example, in my Github repository, which you can find here: https://github.com/savelee/maven-ant-sencha. These steps, will let you do the same from scratch: 1) From the downloaded ext js folder, start with generating a new workspace: `sencha generate workspace [path to the folder]/sencha` for example: `sencha generate workspace src/main/sencha` 2) Navigate to the new generated **sencha/ext** folder 3) Then generate a new app `sencha generate app MyApp ../myapp` 4) You can test the demo application by booting the sencha internal (Jetty) server, from the **myapp** folder, execute: `sencha app watch` Sencha spins off an internal server, it should give you the location with the port number, where it’s currently hosted. By default this will be: http://localhost:1841/myapp/ 5) Great, now that it works, let see where the sencha build is located: `sencha app build` The production build is located in: `sencha/build/MyApp/production` Now there are two things that we can do. We can either modify the **build.xml** file in the app folder, which can copy the build into the Maven folder. (Like how I described Ant build scripts, in article 2.) or we can create a Maven task for this. Ideally we need a separate Maven task. Because by just modifying it in the build.xml, we have to run 2 tasks on the command-line. The `sencha app build` and the `mvn clean package` commands. Let’s see how we can fix this...\n\n## Build through Maven \n\nPlugins There are 2 maven plugins that can help with building the Sencha app via Maven. We could create a Maven task which executes Sencha Cmd via the **sencha.jar** that’s available in the Sencha Cmd installation folder, or we can use Maven Ant task integration, since Sencha Cmd itself is build on top of Ant. With both solutions, you can achieve the same, it’s just a matter where you want to store your Ant tasks. In the Maven **pom.xml** file, or in the Sencha App **build.xml** file. I will show both solutions: \n\n### Sencha Cmd execution, with the Maven exec-maven-plugin \n\nWith the *exec-maven-plugin*, http://www.mojohaus.org/exec-maven-plugin/usage.htm, you can use Maven to execute commands from the command-line. This will require, that you have Sencha Cmd installed on the machine that runs the Maven commands. Your **pom.xml** file, will look like this:\n\n{% gist 16e9b853977bb528ac26 %}\n\nWhen you want to work with environment vars, you can configure a profiles block:\n\n{% gist 59c57584a1663bfc7dfe %}\n\n`--environment` `${sencha.env}` See also: https://github.com/savelee/maven-ant-sencha/blob/master/pom_backup.xml for my complete solution. \n\n### Ant Task runner, with the Maven maven-antrun-plugin \n\nWith the *maven-antrun-plugin* https://maven.apache.org/plugins/maven-antrun-plugin/, you can use Maven to run Apache Ant task. To make sure it recognizes the Sencha Ant command, you will need to have the **sencha.jar** somewhere on your machine. By default it’s located in the Cmd installation folder, but you could copy this over to your Maven environment/machine. Your **pom.xml** file, will look like this: https://gist.github.com/savelee/5d99a824d4df70c66fbe \n\nSee also: https://github.com/savelee/maven-ant-sencha/blob/master/pom.xml for my complete solution. \n\nHere are some handy resources:\n\n* https://maven.apache.org/ \n* http://www.tutorialspoint.com/maven/maven_web_application.htm\n* http://www.mkyong.com/maven/how-to-create-a-web-application-project-with-maven/\n* https://tomcat.apache.org/tomcat-9.0-doc/setup.html","slug":"advanced-cmd-how-to-integrate-ext-js-with-maven","published":1,"updated":"2018-11-30T19:05:47.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncnv000dkif5olvddd56","content":"<p>This last article, will show you, how you can integrate Ext JS with tools\n  like Maven. Please understand, Maven is not a required Sencha setup, though\n  it is possible to build your Sencha projects with Maven.</p>\n<a id=\"more\"></a>\n<h2 id=\"About-Apache-Maven\"><a href=\"#About-Apache-Maven\" class=\"headerlink\" title=\"About Apache Maven\"></a>About\n  Apache Maven</h2>\n<p>Maven is a build automation tool used primarily for Java projects. Maven\n  addresses two aspects of building software: First, it describes how software\n  is built, and second, it describes its dependencies. Contrary to preceding\n  tools like <a href=\"https://en.wikipedia.org/wiki/Apache_Ant\" target=\"_blank\" rel=\"noopener\">Apache Ant</a>,\n  it uses conventions for the build procedure, and only exceptions need to be\n  written down. An XML Project Object Model file (pom.xml) describes the\n  software project being built, its dependencies on other external modules and\n  components, the build order, directories, and required plugins. Maven is\n  built using a plugin-based architecture that allows it to make use of any\n  application controllable through standard input. Theoretically, this would\n  allow anyone to write plugins to interface with build tools (compilers, unit\n  test tools, etc.) for any other language. In reality, support and use for\n  languages other than Java has been minimal. ##Generate a Maven project for a\n  web project First, make sure Maven is installed on your machine. If not\n  installed, you can follow this guide: <a href=\"https://maven.apache.org/install.html\" target=\"_blank\" rel=\"noopener\">https://maven.apache.org/install.html</a>.\n  Once Maven is installed, we will use it to generate a web application. To do\n  so, we can choose the webapp archetype, which has folders and settings for a\n  (Java) web application configured: <a href=\"https://maven.apache.org/archetypes/maven-archetype-webapp/\" target=\"_blank\" rel=\"noopener\">https://maven.apache.org/archetypes/maven-archetype-webapp/</a>.\n  We can run the following command from the command-line, (it’s very similar to\n  sencha generate app, but then for Java web applications.):</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">mvn archetype:generate -DgroupId=com.folder.name.you.like -DartifactId=NameOfProject -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false</span><br><span class=\"line\"></span><br><span class=\"line\">For example: `mvn archetype:generate -DgroupId=com.ladysign.MavenApp -DartifactId=MavenApp` ` -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false` Maven will start processing and will create the complete web based java application project structure, with the following folders:</span><br><span class=\"line\"></span><br><span class=\"line\">MavenApp   \t\t\t# contains src folder and pom.xml</span><br><span class=\"line\">src/main/webapp \t\t# contains index.jsp and WEB-INF folde</span><br><span class=\"line\">src/main/webapp/WEB-INF\t # contains web.xmlthemes</span><br><span class=\"line\">src/main/resources      # it contains images/properties files</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The <strong>pom.xml</strong> (project object model), will look like this: <a href=\"https://gist.github.com/savelee/d6d0039be37e397eb86b\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/d6d0039be37e397eb86b</a>\n  As you noticed, there is also an <strong>index.jsp</strong> file in the\n  webapp folder. This means, you should be able to see this file in your\n  browser, after a build.</p>\n<h2 id=\"Build-with-Maven\"><a href=\"#Build-with-Maven\" class=\"headerlink\" title=\"Build with Maven\"></a>Build\n  with Maven</h2>\n<p>Let’s build this project: <code>cd MavenApp</code> <code>mvn clean package</code>\n  (or mvn compile) (Mac OSX users might need to prefix with sudo) Maven will\n  start building the project. It will create a targets folder, with a <strong>MavenApp.war</strong>\n  file. This is the file that you can deploy, with a server like for example,\n  Apache Tomcat.</p>\n<h2 id=\"Deploy-with-Tomcat\"><a href=\"#Deploy-with-Tomcat\" class=\"headerlink\" title=\"Deploy with Tomcat\"></a>Deploy\n  with Tomcat</h2>\n<p>When you are new to Apache Tomcat, you can find the setup guide here: <a href=\"https://tomcat.apache.org/tomcat-9.0-doc/setup.html\" target=\"_blank\" rel=\"noopener\">https://tomcat.apache.org/tomcat-9.0-doc/setup.html</a>\n  Once Tomcat is installed, you only need to copy the <strong>war</strong> file\n  into the <strong>webapps</strong> folder of Tomcat. (It’s setup that easy, in\n  <strong>/TOMCAT_HOME/conf/server.xml</strong> actually.) Sometimes you might\n  need to stop/start your server. Navigate on the command-line to the Tomcat\n  app bin folder. And run: <code>sudo sh shutdown.sh</code> (or execute <strong>.bat</strong>\n  for Windows), and startup.sh (.bat).</p>\n<h2 id=\"Integrate-Ext-JS-with-Maven\"><a href=\"#Integrate-Ext-JS-with-Maven\" class=\"headerlink\" title=\"Integrate Ext JS with Maven\"></a>Integrate\n  Ext JS with Maven</h2>\n<p>Now, that we have seen how Maven works, let’s see how we can integrate an\n  Ext JS app with a Maven web app project. Our goal is to have the Sencha build\n  within our <strong>src/main/webapp</strong> folder. We want to automate it as\n  much as possible, so <strong>index.jsp</strong> will contain the Sencha\n  microloader. I have a working example, in my Github repository, which you can\n  find here: <a href=\"https://github.com/savelee/maven-ant-sencha\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/maven-ant-sencha</a>.\n  These steps, will let you do the same from scratch: 1) From the downloaded\n  ext js folder, start with generating a new workspace: <code>sencha generate\n    workspace [path to the folder]/sencha</code> for example: <code>sencha\n    generate workspace src/main/sencha</code> 2) Navigate to the new generated\n  <strong>sencha/ext</strong> folder 3) Then generate a new app <code>sencha\n    generate app MyApp ../myapp</code> 4) You can test the demo application by\n  booting the sencha internal (Jetty) server, from the <strong>myapp</strong>\n  folder, execute: <code>sencha app watch</code> Sencha spins off an internal\n  server, it should give you the location with the port number, where it’s\n  currently hosted. By default this will be: <a href=\"http://localhost:1841/myapp/\" target=\"_blank\" rel=\"noopener\">http://localhost:1841/myapp/</a>\n  5) Great, now that it works, let see where the sencha build is located: <code>sencha\n    app build</code> The production build is located in: <code>sencha/build/MyApp/production</code>\n  Now there are two things that we can do. We can either modify the <strong>build.xml</strong>\n  file in the app folder, which can copy the build into the Maven folder. (Like\n  how I described Ant build scripts, in article 2.) or we can create a Maven\n  task for this. Ideally we need a separate Maven task. Because by just\n  modifying it in the build.xml, we have to run 2 tasks on the command-line.\n  The <code>sencha app build</code> and the <code>mvn clean package</code>\n  commands. Let’s see how we can fix this…</p>\n<h2 id=\"Build-through-Maven\"><a href=\"#Build-through-Maven\" class=\"headerlink\" title=\"Build through Maven\"></a>Build\n  through Maven</h2>\n<p>Plugins There are 2 maven plugins that can help with building the Sencha app\n  via Maven. We could create a Maven task which executes Sencha Cmd via the\n  <strong>sencha.jar</strong> that’s available in the Sencha Cmd installation\n  folder, or we can use Maven Ant task integration, since Sencha Cmd itself is\n  build on top of Ant. With both solutions, you can achieve the same, it’s just\n  a matter where you want to store your Ant tasks. In the Maven <strong>pom.xml</strong>\n  file, or in the Sencha App <strong>build.xml</strong> file. I will show both\n  solutions:</p>\n<h3 id=\"Sencha-Cmd-execution-with-the-Maven-exec-maven-plugin\"><a href=\"#Sencha-Cmd-execution-with-the-Maven-exec-maven-plugin\" class=\"headerlink\" title=\"Sencha Cmd execution, with the Maven exec-maven-plugin\"></a>Sencha\n  Cmd execution, with the Maven exec-maven-plugin</h3>\n<p>With the <em>exec-maven-plugin</em>, <a href=\"http://www.mojohaus.org/exec-maven-plugin/usage.htm\" target=\"_blank\" rel=\"noopener\">http://www.mojohaus.org/exec-maven-plugin/usage.htm</a>,\n  you can use Maven to execute commands from the command-line. This will\n  require, that you have Sencha Cmd installed on the machine that runs the\n  Maven commands. Your <strong>pom.xml</strong> file, will look like this:</p>\n<script src=\"//gist.github.com/16e9b853977bb528ac26.js\"></script>\n<p>When you want to work with environment vars, you can configure a profiles\n  block:</p>\n<script src=\"//gist.github.com/59c57584a1663bfc7dfe.js\"></script>\n<p><code>--environment</code> <code>${sencha.env}</code> See also: <a href=\"https://github.com/savelee/maven-ant-sencha/blob/master/pom_backup.xml\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/maven-ant-sencha/blob/master/pom_backup.xml</a>\n  for my complete solution.</p>\n<h3 id=\"Ant-Task-runner-with-the-Maven-maven-antrun-plugin\"><a href=\"#Ant-Task-runner-with-the-Maven-maven-antrun-plugin\" class=\"headerlink\" title=\"Ant Task runner, with the Maven maven-antrun-plugin\"></a>Ant\n  Task runner, with the Maven maven-antrun-plugin</h3>\n<p>With the <em>maven-antrun-plugin</em> <a href=\"https://maven.apache.org/plugins/maven-antrun-plugin/\" target=\"_blank\" rel=\"noopener\">https://maven.apache.org/plugins/maven-antrun-plugin/</a>,\n  you can use Maven to run Apache Ant task. To make sure it recognizes the\n  Sencha Ant command, you will need to have the <strong>sencha.jar</strong>\n  somewhere on your machine. By default it’s located in the Cmd installation\n  folder, but you could copy this over to your Maven environment/machine. Your\n  <strong>pom.xml</strong> file, will look like this: <a href=\"https://gist.github.com/savelee/5d99a824d4df70c66fbe\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/5d99a824d4df70c66fbe</a></p>\n<p>See also: <a href=\"https://github.com/savelee/maven-ant-sencha/blob/master/pom.xml\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/maven-ant-sencha/blob/master/pom.xml</a>\n  for my complete solution.</p>\n<p>Here are some handy resources:</p>\n<ul>\n  <li><a href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">https://maven.apache.org/</a></li>\n  <li><a href=\"http://www.tutorialspoint.com/maven/maven_web_application.htm\" target=\"_blank\" rel=\"noopener\">http://www.tutorialspoint.com/maven/maven_web_application.htm</a></li>\n  <li><a href=\"http://www.mkyong.com/maven/how-to-create-a-web-application-project-with-maven/\" target=\"_blank\" rel=\"noopener\">http://www.mkyong.com/maven/how-to-create-a-web-application-project-with-maven/</a></li>\n  <li><a href=\"https://tomcat.apache.org/tomcat-9.0-doc/setup.html\" target=\"_blank\" rel=\"noopener\">https://tomcat.apache.org/tomcat-9.0-doc/setup.html</a></li>\n</ul>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>This last article, will show you, how you can integrate Ext JS with tools\n  like Maven. Please understand, Maven is not a required Sencha setup, though\n  it is possible to build your Sencha projects with Maven.</p>","more":"<h2 id=\"About-Apache-Maven\"><a href=\"#About-Apache-Maven\" class=\"headerlink\" title=\"About Apache Maven\"></a>About\n  Apache Maven</h2>\n<p>Maven is a build automation tool used primarily for Java projects. Maven\n  addresses two aspects of building software: First, it describes how software\n  is built, and second, it describes its dependencies. Contrary to preceding\n  tools like <a href=\"https://en.wikipedia.org/wiki/Apache_Ant\" target=\"_blank\" rel=\"noopener\">Apache Ant</a>,\n  it uses conventions for the build procedure, and only exceptions need to be\n  written down. An XML Project Object Model file (pom.xml) describes the\n  software project being built, its dependencies on other external modules and\n  components, the build order, directories, and required plugins. Maven is\n  built using a plugin-based architecture that allows it to make use of any\n  application controllable through standard input. Theoretically, this would\n  allow anyone to write plugins to interface with build tools (compilers, unit\n  test tools, etc.) for any other language. In reality, support and use for\n  languages other than Java has been minimal. ##Generate a Maven project for a\n  web project First, make sure Maven is installed on your machine. If not\n  installed, you can follow this guide: <a href=\"https://maven.apache.org/install.html\" target=\"_blank\" rel=\"noopener\">https://maven.apache.org/install.html</a>.\n  Once Maven is installed, we will use it to generate a web application. To do\n  so, we can choose the webapp archetype, which has folders and settings for a\n  (Java) web application configured: <a href=\"https://maven.apache.org/archetypes/maven-archetype-webapp/\" target=\"_blank\" rel=\"noopener\">https://maven.apache.org/archetypes/maven-archetype-webapp/</a>.\n  We can run the following command from the command-line, (it’s very similar to\n  sencha generate app, but then for Java web applications.):</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">mvn archetype:generate -DgroupId=com.folder.name.you.like -DartifactId=NameOfProject -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false</span><br><span class=\"line\"></span><br><span class=\"line\">For example: `mvn archetype:generate -DgroupId=com.ladysign.MavenApp -DartifactId=MavenApp` ` -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false` Maven will start processing and will create the complete web based java application project structure, with the following folders:</span><br><span class=\"line\"></span><br><span class=\"line\">MavenApp   \t\t\t# contains src folder and pom.xml</span><br><span class=\"line\">src/main/webapp \t\t# contains index.jsp and WEB-INF folde</span><br><span class=\"line\">src/main/webapp/WEB-INF\t # contains web.xmlthemes</span><br><span class=\"line\">src/main/resources      # it contains images/properties files</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The <strong>pom.xml</strong> (project object model), will look like this: <a href=\"https://gist.github.com/savelee/d6d0039be37e397eb86b\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/d6d0039be37e397eb86b</a>\n  As you noticed, there is also an <strong>index.jsp</strong> file in the\n  webapp folder. This means, you should be able to see this file in your\n  browser, after a build.</p>\n<h2 id=\"Build-with-Maven\"><a href=\"#Build-with-Maven\" class=\"headerlink\" title=\"Build with Maven\"></a>Build\n  with Maven</h2>\n<p>Let’s build this project: <code>cd MavenApp</code> <code>mvn clean package</code>\n  (or mvn compile) (Mac OSX users might need to prefix with sudo) Maven will\n  start building the project. It will create a targets folder, with a <strong>MavenApp.war</strong>\n  file. This is the file that you can deploy, with a server like for example,\n  Apache Tomcat.</p>\n<h2 id=\"Deploy-with-Tomcat\"><a href=\"#Deploy-with-Tomcat\" class=\"headerlink\" title=\"Deploy with Tomcat\"></a>Deploy\n  with Tomcat</h2>\n<p>When you are new to Apache Tomcat, you can find the setup guide here: <a href=\"https://tomcat.apache.org/tomcat-9.0-doc/setup.html\" target=\"_blank\" rel=\"noopener\">https://tomcat.apache.org/tomcat-9.0-doc/setup.html</a>\n  Once Tomcat is installed, you only need to copy the <strong>war</strong> file\n  into the <strong>webapps</strong> folder of Tomcat. (It’s setup that easy, in\n  <strong>/TOMCAT_HOME/conf/server.xml</strong> actually.) Sometimes you might\n  need to stop/start your server. Navigate on the command-line to the Tomcat\n  app bin folder. And run: <code>sudo sh shutdown.sh</code> (or execute <strong>.bat</strong>\n  for Windows), and startup.sh (.bat).</p>\n<h2 id=\"Integrate-Ext-JS-with-Maven\"><a href=\"#Integrate-Ext-JS-with-Maven\" class=\"headerlink\" title=\"Integrate Ext JS with Maven\"></a>Integrate\n  Ext JS with Maven</h2>\n<p>Now, that we have seen how Maven works, let’s see how we can integrate an\n  Ext JS app with a Maven web app project. Our goal is to have the Sencha build\n  within our <strong>src/main/webapp</strong> folder. We want to automate it as\n  much as possible, so <strong>index.jsp</strong> will contain the Sencha\n  microloader. I have a working example, in my Github repository, which you can\n  find here: <a href=\"https://github.com/savelee/maven-ant-sencha\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/maven-ant-sencha</a>.\n  These steps, will let you do the same from scratch: 1) From the downloaded\n  ext js folder, start with generating a new workspace: <code>sencha generate\n    workspace [path to the folder]/sencha</code> for example: <code>sencha\n    generate workspace src/main/sencha</code> 2) Navigate to the new generated\n  <strong>sencha/ext</strong> folder 3) Then generate a new app <code>sencha\n    generate app MyApp ../myapp</code> 4) You can test the demo application by\n  booting the sencha internal (Jetty) server, from the <strong>myapp</strong>\n  folder, execute: <code>sencha app watch</code> Sencha spins off an internal\n  server, it should give you the location with the port number, where it’s\n  currently hosted. By default this will be: <a href=\"http://localhost:1841/myapp/\" target=\"_blank\" rel=\"noopener\">http://localhost:1841/myapp/</a>\n  5) Great, now that it works, let see where the sencha build is located: <code>sencha\n    app build</code> The production build is located in: <code>sencha/build/MyApp/production</code>\n  Now there are two things that we can do. We can either modify the <strong>build.xml</strong>\n  file in the app folder, which can copy the build into the Maven folder. (Like\n  how I described Ant build scripts, in article 2.) or we can create a Maven\n  task for this. Ideally we need a separate Maven task. Because by just\n  modifying it in the build.xml, we have to run 2 tasks on the command-line.\n  The <code>sencha app build</code> and the <code>mvn clean package</code>\n  commands. Let’s see how we can fix this…</p>\n<h2 id=\"Build-through-Maven\"><a href=\"#Build-through-Maven\" class=\"headerlink\" title=\"Build through Maven\"></a>Build\n  through Maven</h2>\n<p>Plugins There are 2 maven plugins that can help with building the Sencha app\n  via Maven. We could create a Maven task which executes Sencha Cmd via the\n  <strong>sencha.jar</strong> that’s available in the Sencha Cmd installation\n  folder, or we can use Maven Ant task integration, since Sencha Cmd itself is\n  build on top of Ant. With both solutions, you can achieve the same, it’s just\n  a matter where you want to store your Ant tasks. In the Maven <strong>pom.xml</strong>\n  file, or in the Sencha App <strong>build.xml</strong> file. I will show both\n  solutions:</p>\n<h3 id=\"Sencha-Cmd-execution-with-the-Maven-exec-maven-plugin\"><a href=\"#Sencha-Cmd-execution-with-the-Maven-exec-maven-plugin\" class=\"headerlink\" title=\"Sencha Cmd execution, with the Maven exec-maven-plugin\"></a>Sencha\n  Cmd execution, with the Maven exec-maven-plugin</h3>\n<p>With the <em>exec-maven-plugin</em>, <a href=\"http://www.mojohaus.org/exec-maven-plugin/usage.htm\" target=\"_blank\" rel=\"noopener\">http://www.mojohaus.org/exec-maven-plugin/usage.htm</a>,\n  you can use Maven to execute commands from the command-line. This will\n  require, that you have Sencha Cmd installed on the machine that runs the\n  Maven commands. Your <strong>pom.xml</strong> file, will look like this:</p>\n<script src=\"//gist.github.com/16e9b853977bb528ac26.js\"></script>\n<p>When you want to work with environment vars, you can configure a profiles\n  block:</p>\n<script src=\"//gist.github.com/59c57584a1663bfc7dfe.js\"></script>\n<p><code>--environment</code> <code>${sencha.env}</code> See also: <a href=\"https://github.com/savelee/maven-ant-sencha/blob/master/pom_backup.xml\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/maven-ant-sencha/blob/master/pom_backup.xml</a>\n  for my complete solution.</p>\n<h3 id=\"Ant-Task-runner-with-the-Maven-maven-antrun-plugin\"><a href=\"#Ant-Task-runner-with-the-Maven-maven-antrun-plugin\" class=\"headerlink\" title=\"Ant Task runner, with the Maven maven-antrun-plugin\"></a>Ant\n  Task runner, with the Maven maven-antrun-plugin</h3>\n<p>With the <em>maven-antrun-plugin</em> <a href=\"https://maven.apache.org/plugins/maven-antrun-plugin/\" target=\"_blank\" rel=\"noopener\">https://maven.apache.org/plugins/maven-antrun-plugin/</a>,\n  you can use Maven to run Apache Ant task. To make sure it recognizes the\n  Sencha Ant command, you will need to have the <strong>sencha.jar</strong>\n  somewhere on your machine. By default it’s located in the Cmd installation\n  folder, but you could copy this over to your Maven environment/machine. Your\n  <strong>pom.xml</strong> file, will look like this: <a href=\"https://gist.github.com/savelee/5d99a824d4df70c66fbe\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/5d99a824d4df70c66fbe</a></p>\n<p>See also: <a href=\"https://github.com/savelee/maven-ant-sencha/blob/master/pom.xml\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/maven-ant-sencha/blob/master/pom.xml</a>\n  for my complete solution.</p>\n<p>Here are some handy resources:</p>\n<ul>\n  <li><a href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">https://maven.apache.org/</a></li>\n  <li><a href=\"http://www.tutorialspoint.com/maven/maven_web_application.htm\" target=\"_blank\" rel=\"noopener\">http://www.tutorialspoint.com/maven/maven_web_application.htm</a></li>\n  <li><a href=\"http://www.mkyong.com/maven/how-to-create-a-web-application-project-with-maven/\" target=\"_blank\" rel=\"noopener\">http://www.mkyong.com/maven/how-to-create-a-web-application-project-with-maven/</a></li>\n  <li><a href=\"https://tomcat.apache.org/tomcat-9.0-doc/setup.html\" target=\"_blank\" rel=\"noopener\">https://tomcat.apache.org/tomcat-9.0-doc/setup.html</a></li>\n</ul>"},{"title":"Create an amazing Sencha Touch theme with SASS","date":"2012-12-14T15:26:30.000Z","_content":"\nThis tutorial shows you how to build an amazing Sencha Touch 2.1 theme: [Like this one](https://market.sencha.com/users/187/extensions/204). \n\n<!-- more -->\n\n**Prerequisites:** generate your application with Sencha CMD, so you have the MVC folder structure: [project] - app - - model - - store - - view - - profile - - controller - resources - - css - - sass 1. Open [project] /resources/ folder 2. Create the following (new) folders: - default - spidey - - sass - - css - - fonts - - images Download the zip file below. It contains the full theme including all the asets: [Spidey Theme.](https://www.leeboonstra.com/developer/wp-content/uploads/2012/12/spidey.zip) Copy all the assets over from my attached zip; incase your default assets have no subfolder default, copy the original sass, css... folders over to default. Note for fonts, you will need a fontface kit: .eot, svg, .ttf, .woff) 3. Create 2 new files in the resources/spidey/sass/ folder: **spidey.scss** and **config.rb** \n\n4. Change the content of the config.rb file to:\n\n``` Ruby\n# Get the directory that this configuration file exists in\ndir = File.dirname(__FILE__)\n\n# Load the sencha-touch framework automatically.\nload File.join(dir, '..', '..', '..', 'touch', 'resources', 'themes')\n\n# Compass configurations\nsass_path = dir\n\n# Require any additional compass plugins here.\nrelative_assets = true\n\nfonts_path = File.join(dir, \"..\", \"fonts\")\nimages_path = File.join(dir, \"..\", \"images\")\ncss_path = File.join(dir, \"..\", \"css\")\n\n#output settings\noutput_style = :compressed\nenvironment = :production\n```\n\nActually what we are doing in this config file, is setting the paths to all your Sencha Touch framework folder and relative paths to your asset folders and CSS folder. Last but not least there are some settings, to setup the production output of the generated CSS file. In this case the code will be minified. \n\n5. Incase you changed the folder structure of the default style files, you will need to make sure that it's pointing to the framework folder. Since now you are one extra level deep, you will need the sencha-touch framework dir:\n\n``` Ruby\nload File.join(dir, '..', '..', '..', 'touch', 'resources', 'themes')\n```\n\nRead more on the next page about how to setup your Sass file.\n\n6. Open **resources/spidey/sass/spidey.scss** You will first add the default mixins to your Sass file. Later we will start theming:\n\n``` Sass\n@import 'sencha-touch/default/all';\n\n// You may remove any of the following modules that you\n// do not use in order to create a smaller css file.\n@include sencha-panel;\n@include sencha-buttons;\n@include sencha-sheet;\n@include sencha-picker;\n@include sencha-tabs;\n@include sencha-toolbar;\n@include sencha-toolbar-forms;\n@include sencha-indexbar;\n@include sencha-list;\n@include sencha-layout;\n@include sencha-carousel;\n@include sencha-form;\n@include sencha-msgbox;\n\n// Your custom code goes here...\n```\n\n7. Open your terminal/command line (make sure SASS/Compass installed). Navigate to: resources/spidey/sass/ And use the following command to watch this directory:\n\n`compass watch .`\n\nIt should detect changes and generate a new css file. 8. Open **app.json** scroll to the part where your css is linked, and change the path:\n\n``` JSON\n\"css\": [\n{\n  \"path\": \"resources/spidey/css/spidey.css\",\n  \"update\": \"delta\"\n}\n],\n```\n\nIf you now would check the application in your browser, you should see that all the css and assets are loaded. But the way how it looks likes is not much different than the default theme. That's because you didn't start theming yet. On the next page we will start with theming. 9. So let's start theming. We will start with implementing the new font in **resources/spidey/sass/spidey.scss:**\n\n``` Scss\n**@include font-face(\"Spidey\",font-files(\"the_amazing_spider-man.ttf\",\n\"the_amazing_spider-man.eot\",\n\"the_amazing_spider-man.svg\",\n\"the_amazing_spider-man.woff\"));**\n\n@mixin font-spidey {\n  font-family: 'Spidey';\n  text-transform: uppercase;\n}\n\n**body {\n  @include font-spidey;\n}** \n```\n\nCheck this in your browser. If it works, let's start eding the background... \n\n10. Adding an image:\n\n``` CSS\n.x-layout-card-item, .x-form .x-scroll-container {\n  @include background(image-url('background.png'));\n  background-size: cover;\n}\n```\n\n11. Now we will create a new mixing that creates custom icons. After the sencha mixins add the following code:\n\n``` Scss\n/**\n* Includes a base64-encoded icon for use within tab bars and buttons (With the component parameter iconMask: true).\n*\n* @include pictos-iconmask('attachment');\n*\n* @param {string} $name The name of the icon to be included. This is to match the name of the icon file (located at resources/themes/images/default/pictos) without its extention (.png).\n*/\n@mixin custom-iconmask($name) {\n  .x-tab .x-button-icon.#{$name},\n  .x-button .x-button-icon.x-icon-mask.#{$name} {\n  -webkit-mask-image: image-url($name + \".png\");\n  }\n}\n\n@include custom-iconmask('icon_spider');\n@include custom-iconmask('icon_spidey');\n@include custom-iconmask('icon_web');\n```\n\nTo make sure the new icons work in our app interface, we will need to edit the iconCls from our tabpanel. In my Main.js I edit the iconCls of every tab, to one of my new custom icons:\n\n`iconCls: 'icon_spider',`\n\nAfter this change let's change to colors. I will use a red color as base-color, and a blue color as alternative color. These variables you can add on top of the sass file (under the import line).\n\n``` Scss\n$alternative-color: #134780;\n$base-color: #d6371a;\n$confirm-color: #799D54;\n$alert-color: #B0886D;\n$neutral-color: $base-color;\n$active-color: darken($base-color, 20%);\n\n// GRADIENTS\n//$base-gradient: 'matte';\n\n// LISTS\n$list-color: darken($active-color, 20%);\n$list-active-color: transparentize($active-color, .2);\n$list-active-gradient: 'recessed';\n$list-header-bg-color: darken($alternative-color, 10%);\n$list-pressed-color: lighten($list-active-color, 10%);\n$basic-slider: true;\n\n// TABS\n$tabs-dark: transparentize($alternative-color, 1.0); // This sets the tab selection to transparent\n$tabs-dark-color: #fff;\n$tabs-bottom-active-gradient: color-stops(darken($alternative-color, 25%), darken($alternative-color, 35%)); // This sets the color for the \"bottom\" tab icons and gradient\n$tabs-bar-gradient: color-stops(lighten($alternative-color, 10%), darken($alternative-color, 25%));\n$tabs-bottom-icon-size: 32px;\n$tabs-bottom-inactive-gradient: color-stops(red, blue);\n\n// TOOLBARS\n$toolbar-gradient: color-stops(darken($active-color, 15%), darken($active-color, 1%));\n```\n\nAnd I've added some style tweaks at the bottom of the SASS file:\n\n``` CSS\n.x-tabbar-dark {\n  &.x-docked-bottom {\n  .x-tab {\n  color: lighten($alternative-color, 80%);\n  .x-button-icon {\n  @include background-image(linear-gradient(lighten($alternative-color, 50%),lighten($alternative-color, 80%)));\n  }\n}\n\n.x-button-label {\n  text-shadow: none;\n}\n.x-tab-active {\ncolor: lighten($alternative-color, 20%);\n  .x-button-icon {\n    @include background-image(linear-gradient(lighten($alternative-color, 20%),lighten($alternative-color, 20%)));\n  }\n}\n}\n\n}\n\n.x-tabbar-neutral {\n  &.x-docked-top{\n    .x-button-label {\n      color: darken($active-color, 10%);\n      @include bevel-text('highlight');\n    }\n    .x-tab-active {\n      @include background-image(linear-gradient($active-color, lighten($active-color, 30%)));\n      .x-button-label {\n      color: lighten($base-color, 30%);\n      @include bevel-text('shadow');\n    }\n  }\n}\n}\n\n// FORMS\n.x-toolbar .x-field-search .x-component-outer, .x-toolbar .x-field-select .x-component-outer, .x-toolbar .x-field-text .x-component-outer {\n  border: 1px solid darken($active-color, 10%);\n}\n```","source":"_posts/create-an-amazing-sencha-touch-theme-with-sass.md","raw":"---\ntitle: Create an amazing Sencha Touch theme with SASS\ntags:\n  - Compass\n  - CSS3\n  - Sass\n  - Theming\ncategories:\n  - Theming\ndate: 2012-12-14 16:26:30\n---\n\nThis tutorial shows you how to build an amazing Sencha Touch 2.1 theme: [Like this one](https://market.sencha.com/users/187/extensions/204). \n\n<!-- more -->\n\n**Prerequisites:** generate your application with Sencha CMD, so you have the MVC folder structure: [project] - app - - model - - store - - view - - profile - - controller - resources - - css - - sass 1. Open [project] /resources/ folder 2. Create the following (new) folders: - default - spidey - - sass - - css - - fonts - - images Download the zip file below. It contains the full theme including all the asets: [Spidey Theme.](https://www.leeboonstra.com/developer/wp-content/uploads/2012/12/spidey.zip) Copy all the assets over from my attached zip; incase your default assets have no subfolder default, copy the original sass, css... folders over to default. Note for fonts, you will need a fontface kit: .eot, svg, .ttf, .woff) 3. Create 2 new files in the resources/spidey/sass/ folder: **spidey.scss** and **config.rb** \n\n4. Change the content of the config.rb file to:\n\n``` Ruby\n# Get the directory that this configuration file exists in\ndir = File.dirname(__FILE__)\n\n# Load the sencha-touch framework automatically.\nload File.join(dir, '..', '..', '..', 'touch', 'resources', 'themes')\n\n# Compass configurations\nsass_path = dir\n\n# Require any additional compass plugins here.\nrelative_assets = true\n\nfonts_path = File.join(dir, \"..\", \"fonts\")\nimages_path = File.join(dir, \"..\", \"images\")\ncss_path = File.join(dir, \"..\", \"css\")\n\n#output settings\noutput_style = :compressed\nenvironment = :production\n```\n\nActually what we are doing in this config file, is setting the paths to all your Sencha Touch framework folder and relative paths to your asset folders and CSS folder. Last but not least there are some settings, to setup the production output of the generated CSS file. In this case the code will be minified. \n\n5. Incase you changed the folder structure of the default style files, you will need to make sure that it's pointing to the framework folder. Since now you are one extra level deep, you will need the sencha-touch framework dir:\n\n``` Ruby\nload File.join(dir, '..', '..', '..', 'touch', 'resources', 'themes')\n```\n\nRead more on the next page about how to setup your Sass file.\n\n6. Open **resources/spidey/sass/spidey.scss** You will first add the default mixins to your Sass file. Later we will start theming:\n\n``` Sass\n@import 'sencha-touch/default/all';\n\n// You may remove any of the following modules that you\n// do not use in order to create a smaller css file.\n@include sencha-panel;\n@include sencha-buttons;\n@include sencha-sheet;\n@include sencha-picker;\n@include sencha-tabs;\n@include sencha-toolbar;\n@include sencha-toolbar-forms;\n@include sencha-indexbar;\n@include sencha-list;\n@include sencha-layout;\n@include sencha-carousel;\n@include sencha-form;\n@include sencha-msgbox;\n\n// Your custom code goes here...\n```\n\n7. Open your terminal/command line (make sure SASS/Compass installed). Navigate to: resources/spidey/sass/ And use the following command to watch this directory:\n\n`compass watch .`\n\nIt should detect changes and generate a new css file. 8. Open **app.json** scroll to the part where your css is linked, and change the path:\n\n``` JSON\n\"css\": [\n{\n  \"path\": \"resources/spidey/css/spidey.css\",\n  \"update\": \"delta\"\n}\n],\n```\n\nIf you now would check the application in your browser, you should see that all the css and assets are loaded. But the way how it looks likes is not much different than the default theme. That's because you didn't start theming yet. On the next page we will start with theming. 9. So let's start theming. We will start with implementing the new font in **resources/spidey/sass/spidey.scss:**\n\n``` Scss\n**@include font-face(\"Spidey\",font-files(\"the_amazing_spider-man.ttf\",\n\"the_amazing_spider-man.eot\",\n\"the_amazing_spider-man.svg\",\n\"the_amazing_spider-man.woff\"));**\n\n@mixin font-spidey {\n  font-family: 'Spidey';\n  text-transform: uppercase;\n}\n\n**body {\n  @include font-spidey;\n}** \n```\n\nCheck this in your browser. If it works, let's start eding the background... \n\n10. Adding an image:\n\n``` CSS\n.x-layout-card-item, .x-form .x-scroll-container {\n  @include background(image-url('background.png'));\n  background-size: cover;\n}\n```\n\n11. Now we will create a new mixing that creates custom icons. After the sencha mixins add the following code:\n\n``` Scss\n/**\n* Includes a base64-encoded icon for use within tab bars and buttons (With the component parameter iconMask: true).\n*\n* @include pictos-iconmask('attachment');\n*\n* @param {string} $name The name of the icon to be included. This is to match the name of the icon file (located at resources/themes/images/default/pictos) without its extention (.png).\n*/\n@mixin custom-iconmask($name) {\n  .x-tab .x-button-icon.#{$name},\n  .x-button .x-button-icon.x-icon-mask.#{$name} {\n  -webkit-mask-image: image-url($name + \".png\");\n  }\n}\n\n@include custom-iconmask('icon_spider');\n@include custom-iconmask('icon_spidey');\n@include custom-iconmask('icon_web');\n```\n\nTo make sure the new icons work in our app interface, we will need to edit the iconCls from our tabpanel. In my Main.js I edit the iconCls of every tab, to one of my new custom icons:\n\n`iconCls: 'icon_spider',`\n\nAfter this change let's change to colors. I will use a red color as base-color, and a blue color as alternative color. These variables you can add on top of the sass file (under the import line).\n\n``` Scss\n$alternative-color: #134780;\n$base-color: #d6371a;\n$confirm-color: #799D54;\n$alert-color: #B0886D;\n$neutral-color: $base-color;\n$active-color: darken($base-color, 20%);\n\n// GRADIENTS\n//$base-gradient: 'matte';\n\n// LISTS\n$list-color: darken($active-color, 20%);\n$list-active-color: transparentize($active-color, .2);\n$list-active-gradient: 'recessed';\n$list-header-bg-color: darken($alternative-color, 10%);\n$list-pressed-color: lighten($list-active-color, 10%);\n$basic-slider: true;\n\n// TABS\n$tabs-dark: transparentize($alternative-color, 1.0); // This sets the tab selection to transparent\n$tabs-dark-color: #fff;\n$tabs-bottom-active-gradient: color-stops(darken($alternative-color, 25%), darken($alternative-color, 35%)); // This sets the color for the \"bottom\" tab icons and gradient\n$tabs-bar-gradient: color-stops(lighten($alternative-color, 10%), darken($alternative-color, 25%));\n$tabs-bottom-icon-size: 32px;\n$tabs-bottom-inactive-gradient: color-stops(red, blue);\n\n// TOOLBARS\n$toolbar-gradient: color-stops(darken($active-color, 15%), darken($active-color, 1%));\n```\n\nAnd I've added some style tweaks at the bottom of the SASS file:\n\n``` CSS\n.x-tabbar-dark {\n  &.x-docked-bottom {\n  .x-tab {\n  color: lighten($alternative-color, 80%);\n  .x-button-icon {\n  @include background-image(linear-gradient(lighten($alternative-color, 50%),lighten($alternative-color, 80%)));\n  }\n}\n\n.x-button-label {\n  text-shadow: none;\n}\n.x-tab-active {\ncolor: lighten($alternative-color, 20%);\n  .x-button-icon {\n    @include background-image(linear-gradient(lighten($alternative-color, 20%),lighten($alternative-color, 20%)));\n  }\n}\n}\n\n}\n\n.x-tabbar-neutral {\n  &.x-docked-top{\n    .x-button-label {\n      color: darken($active-color, 10%);\n      @include bevel-text('highlight');\n    }\n    .x-tab-active {\n      @include background-image(linear-gradient($active-color, lighten($active-color, 30%)));\n      .x-button-label {\n      color: lighten($base-color, 30%);\n      @include bevel-text('shadow');\n    }\n  }\n}\n}\n\n// FORMS\n.x-toolbar .x-field-search .x-component-outer, .x-toolbar .x-field-select .x-component-outer, .x-toolbar .x-field-text .x-component-outer {\n  border: 1px solid darken($active-color, 10%);\n}\n```","slug":"create-an-amazing-sencha-touch-theme-with-sass","published":1,"updated":"2018-11-30T18:01:21.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncnw000ekif5gu7m8bku","content":"<p>This tutorial shows you how to build an amazing Sencha Touch 2.1 theme: <a href=\"https://market.sencha.com/users/187/extensions/204\" target=\"_blank\" rel=\"noopener\">Like\n    this one</a>.</p><a id=\"more\"></a>\n<p><strong>Prerequisites:</strong> generate your application with Sencha CMD,\n  so you have the MVC folder structure: [project] - app - - model - - store - -\n  view - - profile - - controller - resources - - css - - sass 1. Open\n  [project] /resources/ folder 2. Create the following (new) folders: - default\n  - spidey - - sass - - css - - fonts - - images Download the zip file below.\n  It contains the full theme including all the asets: <a href=\"https://www.leeboonstra.com/developer/wp-content/uploads/2012/12/spidey.zip\" target=\"_blank\" rel=\"noopener\">Spidey\n    Theme.</a> Copy all the assets over from my attached zip; incase your\n  default assets have no subfolder default, copy the original sass, css…\n  folders over to default. Note for fonts, you will need a fontface kit: .eot,\n  svg, .ttf, .woff) 3. Create 2 new files in the resources/spidey/sass/ folder:\n  <strong>spidey.scss</strong> and <strong>config.rb</strong></p>\n<ol start=\"4\">\n  <li>Change the content of the config.rb file to:</li>\n</ol>\n<figure class=\"highlight ruby\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"comment\"># Get the directory that this configuration file exists in</span></span><br><span class=\"line\">dir = File.dirname(__FILE_<span class=\"number\">_</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Load the sencha-touch framework automatically.</span></span><br><span class=\"line\">load File.join(dir, <span class=\"string\">'..'</span>, <span class=\"string\">'..'</span>, <span class=\"string\">'..'</span>, <span class=\"string\">'touch'</span>, <span class=\"string\">'resources'</span>, <span class=\"string\">'themes'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Compass configurations</span></span><br><span class=\"line\">sass_path = dir</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Require any additional compass plugins here.</span></span><br><span class=\"line\">relative_assets = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">fonts_path = File.join(dir, <span class=\"string\">\"..\"</span>, <span class=\"string\">\"fonts\"</span>)</span><br><span class=\"line\">images_path = File.join(dir, <span class=\"string\">\"..\"</span>, <span class=\"string\">\"images\"</span>)</span><br><span class=\"line\">css_path = File.join(dir, <span class=\"string\">\"..\"</span>, <span class=\"string\">\"css\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#output settings</span></span><br><span class=\"line\">output_style = <span class=\"symbol\">:compressed</span></span><br><span class=\"line\">environment = <span class=\"symbol\">:production</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Actually what we are doing in this config file, is setting the paths to all\n  your Sencha Touch framework folder and relative paths to your asset folders\n  and CSS folder. Last but not least there are some settings, to setup the\n  production output of the generated CSS file. In this case the code will be\n  minified.</p>\n<ol start=\"5\">\n  <li>Incase you changed the folder structure of the default style files, you\n    will need to make sure that it’s pointing to the framework folder. Since\n    now you are one extra level deep, you will need the sencha-touch framework\n    dir:</li>\n</ol>\n<figure class=\"highlight ruby\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">load File.join(dir, <span class=\"string\">'..'</span>, <span class=\"string\">'..'</span>, <span class=\"string\">'..'</span>, <span class=\"string\">'touch'</span>, <span class=\"string\">'resources'</span>, <span class=\"string\">'themes'</span>)</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Read more on the next page about how to setup your Sass file.</p>\n<ol start=\"6\">\n  <li>Open <strong>resources/spidey/sass/spidey.scss</strong> You will first\n    add the default mixins to your Sass file. Later we will start theming:</li>\n</ol>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@import &apos;sencha-touch/default/all&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// You may remove any of the following modules that you</span><br><span class=\"line\">// do not use in order to create a smaller css file.</span><br><span class=\"line\">@include sencha-panel;</span><br><span class=\"line\">@include sencha-buttons;</span><br><span class=\"line\">@include sencha-sheet;</span><br><span class=\"line\">@include sencha-picker;</span><br><span class=\"line\">@include sencha-tabs;</span><br><span class=\"line\">@include sencha-toolbar;</span><br><span class=\"line\">@include sencha-toolbar-forms;</span><br><span class=\"line\">@include sencha-indexbar;</span><br><span class=\"line\">@include sencha-list;</span><br><span class=\"line\">@include sencha-layout;</span><br><span class=\"line\">@include sencha-carousel;</span><br><span class=\"line\">@include sencha-form;</span><br><span class=\"line\">@include sencha-msgbox;</span><br><span class=\"line\"></span><br><span class=\"line\">// Your custom code goes here...</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"7\">\n  <li>Open your terminal/command line (make sure SASS/Compass installed).\n    Navigate to: resources/spidey/sass/ And use the following command to watch\n    this directory:</li>\n</ol>\n<p><code>compass watch .</code></p>\n<p>It should detect changes and generate a new css file. 8. Open <strong>app.json</strong>\n  scroll to the part where your css is linked, and change the path:</p>\n<figure class=\"highlight\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">\"css\": [</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"resources/spidey/css/spidey.css\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"update\"</span>: <span class=\"string\">\"delta\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">],</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>If you now would check the application in your browser, you should see that\n  all the css and assets are loaded. But the way how it looks likes is not much\n  different than the default theme. That’s because you didn’t start theming\n  yet. On the next page we will start with theming. 9. So let’s start theming.\n  We will start with implementing the new font in <strong>resources/spidey/sass/spidey.scss:</strong></p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">**@<span class=\"keyword\">include</span> font-face(<span class=\"string\">\"Spidey\"</span>,font-files(<span class=\"string\">\"the_amazing_spider-man.ttf\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"the_amazing_spider-man.eot\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"the_amazing_spider-man.svg\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"the_amazing_spider-man.woff\"</span>));**</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> font-spidey &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">'Spidey'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-transform</span>: uppercase;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">**<span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> font-spidey;</span><br><span class=\"line\">&#125;**</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Check this in your browser. If it works, let’s start eding the background…</p>\n<ol start=\"10\">\n  <li>Adding an image:</li>\n</ol>\n<figure class=\"highlight css\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"selector-class\">.x-layout-card-item</span>, <span class=\"selector-class\">.x-form</span> <span class=\"selector-class\">.x-scroll-container</span> &#123;</span><br><span class=\"line\">  @include background(image-url('background.png'));</span><br><span class=\"line\">  <span class=\"selector-tag\">background-size</span>: <span class=\"selector-tag\">cover</span>;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"11\">\n  <li>Now we will create a new mixing that creates custom icons. After the\n    sencha mixins add the following code:</li>\n</ol>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Includes a base64-encoded icon for use within tab bars and buttons (With the component parameter iconMask: true).</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* @include pictos-iconmask('attachment');</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;string&#125; $name The name of the icon to be included. This is to match the name of the icon file (located at resources/themes/images/default/pictos) without its extention (.png).</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> custom-iconmask(<span class=\"variable\">$name</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.x-tab</span> <span class=\"selector-class\">.x-button-icon</span>.#&#123;<span class=\"variable\">$name</span>&#125;,</span><br><span class=\"line\">  <span class=\"selector-class\">.x-button</span> <span class=\"selector-class\">.x-button-icon</span><span class=\"selector-class\">.x-icon-mask</span>.#&#123;<span class=\"variable\">$name</span>&#125; &#123;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">mask</span>-image: image-url(<span class=\"variable\">$name</span> + <span class=\"string\">\".png\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">include</span> custom-iconmask(<span class=\"string\">'icon_spider'</span>);</span><br><span class=\"line\">@<span class=\"keyword\">include</span> custom-iconmask(<span class=\"string\">'icon_spidey'</span>);</span><br><span class=\"line\">@<span class=\"keyword\">include</span> custom-iconmask(<span class=\"string\">'icon_web'</span>);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>To make sure the new icons work in our app interface, we will need to edit\n  the iconCls from our tabpanel. In my Main.js I edit the iconCls of every tab,\n  to one of my new custom icons:</p>\n<p><code>iconCls: &#39;icon_spider&#39;,</code></p>\n<p>After this change let’s change to colors. I will use a red color as\n  base-color, and a blue color as alternative color. These variables you can\n  add on top of the sass file (under the import line).</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"variable\">$alternative-color</span>: <span class=\"number\">#134780</span>;</span><br><span class=\"line\"><span class=\"variable\">$base-color</span>: <span class=\"number\">#d6371a</span>;</span><br><span class=\"line\"><span class=\"variable\">$confirm-color</span>: <span class=\"number\">#799D54</span>;</span><br><span class=\"line\"><span class=\"variable\">$alert-color</span>: <span class=\"number\">#B0886D</span>;</span><br><span class=\"line\"><span class=\"variable\">$neutral-color</span>: <span class=\"variable\">$base-color</span>;</span><br><span class=\"line\"><span class=\"variable\">$active-color</span>: darken(<span class=\"variable\">$base-color</span>, <span class=\"number\">20%</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GRADIENTS</span></span><br><span class=\"line\"><span class=\"comment\">//$base-gradient: 'matte';</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// LISTS</span></span><br><span class=\"line\"><span class=\"variable\">$list-color</span>: darken(<span class=\"variable\">$active-color</span>, <span class=\"number\">20%</span>);</span><br><span class=\"line\"><span class=\"variable\">$list-active-color</span>: transparentize(<span class=\"variable\">$active-color</span>, .<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable\">$list-active-gradient</span>: <span class=\"string\">'recessed'</span>;</span><br><span class=\"line\"><span class=\"variable\">$list-header-bg-color</span>: darken(<span class=\"variable\">$alternative-color</span>, <span class=\"number\">10%</span>);</span><br><span class=\"line\"><span class=\"variable\">$list-pressed-color</span>: lighten(<span class=\"variable\">$list-active-color</span>, <span class=\"number\">10%</span>);</span><br><span class=\"line\"><span class=\"variable\">$basic-slider</span>: true;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TABS</span></span><br><span class=\"line\"><span class=\"variable\">$tabs-dark</span>: transparentize(<span class=\"variable\">$alternative-color</span>, <span class=\"number\">1.0</span>); <span class=\"comment\">// This sets the tab selection to transparent</span></span><br><span class=\"line\"><span class=\"variable\">$tabs-dark-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\"><span class=\"variable\">$tabs-bottom-active-gradient</span>: color-stops(darken(<span class=\"variable\">$alternative-color</span>, <span class=\"number\">25%</span>), darken(<span class=\"variable\">$alternative-color</span>, <span class=\"number\">35%</span>)); <span class=\"comment\">// This sets the color for the \"bottom\" tab icons and gradient</span></span><br><span class=\"line\"><span class=\"variable\">$tabs-bar-gradient</span>: color-stops(lighten(<span class=\"variable\">$alternative-color</span>, <span class=\"number\">10%</span>), darken(<span class=\"variable\">$alternative-color</span>, <span class=\"number\">25%</span>));</span><br><span class=\"line\"><span class=\"variable\">$tabs-bottom-icon-size</span>: <span class=\"number\">32px</span>;</span><br><span class=\"line\"><span class=\"variable\">$tabs-bottom-inactive-gradient</span>: color-stops(red, blue);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TOOLBARS</span></span><br><span class=\"line\"><span class=\"variable\">$toolbar-gradient</span>: color-stops(darken(<span class=\"variable\">$active-color</span>, <span class=\"number\">15%</span>), darken(<span class=\"variable\">$active-color</span>, <span class=\"number\">1%</span>));</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>And I’ve added some style tweaks at the bottom of the SASS file:</p>\n<figure class=\"highlight css\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"selector-class\">.x-tabbar-dark</span> &#123;</span><br><span class=\"line\">  &amp;.x-docked-bottom &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.x-tab</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">lighten</span>($alternative-color, 80%);</span><br><span class=\"line\">  .x-button-icon &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> background-image(linear-gradient(lighten($alternative-color, <span class=\"number\">50%</span>),lighten($alternative-color, <span class=\"number\">80%</span>)));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.x-button-label</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-shadow</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.x-tab-active</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">color</span>: <span class=\"built_in\">lighten</span>($alternative-color, 20%);</span><br><span class=\"line\">  .x-button-icon &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> background-image(linear-gradient(lighten($alternative-color, <span class=\"number\">20%</span>),lighten($alternative-color, <span class=\"number\">20%</span>)));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.x-tabbar-neutral</span> &#123;</span><br><span class=\"line\">  &amp;.x-docked-top&#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.x-button-label</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"built_in\">darken</span>($active-color, 10%);</span><br><span class=\"line\">      @include bevel-text('highlight');</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.x-tab-active</span> &#123;</span><br><span class=\"line\">      @include background-image(linear-gradient($active-color, lighten($active-color, 30%)));</span><br><span class=\"line\">      <span class=\"selector-class\">.x-button-label</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"built_in\">lighten</span>($base-color, 30%);</span><br><span class=\"line\">      @include bevel-text('shadow');</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// FORMS</span><br><span class=\"line\"><span class=\"selector-class\">.x-toolbar</span> <span class=\"selector-class\">.x-field-search</span> <span class=\"selector-class\">.x-component-outer</span>, <span class=\"selector-class\">.x-toolbar</span> <span class=\"selector-class\">.x-field-select</span> <span class=\"selector-class\">.x-component-outer</span>, <span class=\"selector-class\">.x-toolbar</span> <span class=\"selector-class\">.x-field-text</span> <span class=\"selector-class\">.x-component-outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"built_in\">darken</span>($active-color, 10%);</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>This tutorial shows you how to build an amazing Sencha Touch 2.1 theme: <a href=\"https://market.sencha.com/users/187/extensions/204\" target=\"_blank\" rel=\"noopener\">Like\n    this one</a>.</p>","more":"<p><strong>Prerequisites:</strong> generate your application with Sencha CMD,\n  so you have the MVC folder structure: [project] - app - - model - - store - -\n  view - - profile - - controller - resources - - css - - sass 1. Open\n  [project] /resources/ folder 2. Create the following (new) folders: - default\n  - spidey - - sass - - css - - fonts - - images Download the zip file below.\n  It contains the full theme including all the asets: <a href=\"https://www.leeboonstra.com/developer/wp-content/uploads/2012/12/spidey.zip\" target=\"_blank\" rel=\"noopener\">Spidey\n    Theme.</a> Copy all the assets over from my attached zip; incase your\n  default assets have no subfolder default, copy the original sass, css…\n  folders over to default. Note for fonts, you will need a fontface kit: .eot,\n  svg, .ttf, .woff) 3. Create 2 new files in the resources/spidey/sass/ folder:\n  <strong>spidey.scss</strong> and <strong>config.rb</strong></p>\n<ol start=\"4\">\n  <li>Change the content of the config.rb file to:</li>\n</ol>\n<figure class=\"highlight ruby\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"comment\"># Get the directory that this configuration file exists in</span></span><br><span class=\"line\">dir = File.dirname(__FILE_<span class=\"number\">_</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Load the sencha-touch framework automatically.</span></span><br><span class=\"line\">load File.join(dir, <span class=\"string\">'..'</span>, <span class=\"string\">'..'</span>, <span class=\"string\">'..'</span>, <span class=\"string\">'touch'</span>, <span class=\"string\">'resources'</span>, <span class=\"string\">'themes'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Compass configurations</span></span><br><span class=\"line\">sass_path = dir</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Require any additional compass plugins here.</span></span><br><span class=\"line\">relative_assets = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">fonts_path = File.join(dir, <span class=\"string\">\"..\"</span>, <span class=\"string\">\"fonts\"</span>)</span><br><span class=\"line\">images_path = File.join(dir, <span class=\"string\">\"..\"</span>, <span class=\"string\">\"images\"</span>)</span><br><span class=\"line\">css_path = File.join(dir, <span class=\"string\">\"..\"</span>, <span class=\"string\">\"css\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#output settings</span></span><br><span class=\"line\">output_style = <span class=\"symbol\">:compressed</span></span><br><span class=\"line\">environment = <span class=\"symbol\">:production</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Actually what we are doing in this config file, is setting the paths to all\n  your Sencha Touch framework folder and relative paths to your asset folders\n  and CSS folder. Last but not least there are some settings, to setup the\n  production output of the generated CSS file. In this case the code will be\n  minified.</p>\n<ol start=\"5\">\n  <li>Incase you changed the folder structure of the default style files, you\n    will need to make sure that it’s pointing to the framework folder. Since\n    now you are one extra level deep, you will need the sencha-touch framework\n    dir:</li>\n</ol>\n<figure class=\"highlight ruby\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">load File.join(dir, <span class=\"string\">'..'</span>, <span class=\"string\">'..'</span>, <span class=\"string\">'..'</span>, <span class=\"string\">'touch'</span>, <span class=\"string\">'resources'</span>, <span class=\"string\">'themes'</span>)</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Read more on the next page about how to setup your Sass file.</p>\n<ol start=\"6\">\n  <li>Open <strong>resources/spidey/sass/spidey.scss</strong> You will first\n    add the default mixins to your Sass file. Later we will start theming:</li>\n</ol>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@import &apos;sencha-touch/default/all&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// You may remove any of the following modules that you</span><br><span class=\"line\">// do not use in order to create a smaller css file.</span><br><span class=\"line\">@include sencha-panel;</span><br><span class=\"line\">@include sencha-buttons;</span><br><span class=\"line\">@include sencha-sheet;</span><br><span class=\"line\">@include sencha-picker;</span><br><span class=\"line\">@include sencha-tabs;</span><br><span class=\"line\">@include sencha-toolbar;</span><br><span class=\"line\">@include sencha-toolbar-forms;</span><br><span class=\"line\">@include sencha-indexbar;</span><br><span class=\"line\">@include sencha-list;</span><br><span class=\"line\">@include sencha-layout;</span><br><span class=\"line\">@include sencha-carousel;</span><br><span class=\"line\">@include sencha-form;</span><br><span class=\"line\">@include sencha-msgbox;</span><br><span class=\"line\"></span><br><span class=\"line\">// Your custom code goes here...</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"7\">\n  <li>Open your terminal/command line (make sure SASS/Compass installed).\n    Navigate to: resources/spidey/sass/ And use the following command to watch\n    this directory:</li>\n</ol>\n<p><code>compass watch .</code></p>\n<p>It should detect changes and generate a new css file. 8. Open <strong>app.json</strong>\n  scroll to the part where your css is linked, and change the path:</p>\n<figure class=\"highlight\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">\"css\": [</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"resources/spidey/css/spidey.css\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"update\"</span>: <span class=\"string\">\"delta\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">],</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>If you now would check the application in your browser, you should see that\n  all the css and assets are loaded. But the way how it looks likes is not much\n  different than the default theme. That’s because you didn’t start theming\n  yet. On the next page we will start with theming. 9. So let’s start theming.\n  We will start with implementing the new font in <strong>resources/spidey/sass/spidey.scss:</strong></p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">**@<span class=\"keyword\">include</span> font-face(<span class=\"string\">\"Spidey\"</span>,font-files(<span class=\"string\">\"the_amazing_spider-man.ttf\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"the_amazing_spider-man.eot\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"the_amazing_spider-man.svg\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"the_amazing_spider-man.woff\"</span>));**</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> font-spidey &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">'Spidey'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-transform</span>: uppercase;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">**<span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> font-spidey;</span><br><span class=\"line\">&#125;**</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Check this in your browser. If it works, let’s start eding the background…</p>\n<ol start=\"10\">\n  <li>Adding an image:</li>\n</ol>\n<figure class=\"highlight css\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"selector-class\">.x-layout-card-item</span>, <span class=\"selector-class\">.x-form</span> <span class=\"selector-class\">.x-scroll-container</span> &#123;</span><br><span class=\"line\">  @include background(image-url('background.png'));</span><br><span class=\"line\">  <span class=\"selector-tag\">background-size</span>: <span class=\"selector-tag\">cover</span>;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"11\">\n  <li>Now we will create a new mixing that creates custom icons. After the\n    sencha mixins add the following code:</li>\n</ol>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Includes a base64-encoded icon for use within tab bars and buttons (With the component parameter iconMask: true).</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* @include pictos-iconmask('attachment');</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;string&#125; $name The name of the icon to be included. This is to match the name of the icon file (located at resources/themes/images/default/pictos) without its extention (.png).</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> custom-iconmask(<span class=\"variable\">$name</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.x-tab</span> <span class=\"selector-class\">.x-button-icon</span>.#&#123;<span class=\"variable\">$name</span>&#125;,</span><br><span class=\"line\">  <span class=\"selector-class\">.x-button</span> <span class=\"selector-class\">.x-button-icon</span><span class=\"selector-class\">.x-icon-mask</span>.#&#123;<span class=\"variable\">$name</span>&#125; &#123;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">mask</span>-image: image-url(<span class=\"variable\">$name</span> + <span class=\"string\">\".png\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">include</span> custom-iconmask(<span class=\"string\">'icon_spider'</span>);</span><br><span class=\"line\">@<span class=\"keyword\">include</span> custom-iconmask(<span class=\"string\">'icon_spidey'</span>);</span><br><span class=\"line\">@<span class=\"keyword\">include</span> custom-iconmask(<span class=\"string\">'icon_web'</span>);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>To make sure the new icons work in our app interface, we will need to edit\n  the iconCls from our tabpanel. In my Main.js I edit the iconCls of every tab,\n  to one of my new custom icons:</p>\n<p><code>iconCls: &#39;icon_spider&#39;,</code></p>\n<p>After this change let’s change to colors. I will use a red color as\n  base-color, and a blue color as alternative color. These variables you can\n  add on top of the sass file (under the import line).</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"variable\">$alternative-color</span>: <span class=\"number\">#134780</span>;</span><br><span class=\"line\"><span class=\"variable\">$base-color</span>: <span class=\"number\">#d6371a</span>;</span><br><span class=\"line\"><span class=\"variable\">$confirm-color</span>: <span class=\"number\">#799D54</span>;</span><br><span class=\"line\"><span class=\"variable\">$alert-color</span>: <span class=\"number\">#B0886D</span>;</span><br><span class=\"line\"><span class=\"variable\">$neutral-color</span>: <span class=\"variable\">$base-color</span>;</span><br><span class=\"line\"><span class=\"variable\">$active-color</span>: darken(<span class=\"variable\">$base-color</span>, <span class=\"number\">20%</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GRADIENTS</span></span><br><span class=\"line\"><span class=\"comment\">//$base-gradient: 'matte';</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// LISTS</span></span><br><span class=\"line\"><span class=\"variable\">$list-color</span>: darken(<span class=\"variable\">$active-color</span>, <span class=\"number\">20%</span>);</span><br><span class=\"line\"><span class=\"variable\">$list-active-color</span>: transparentize(<span class=\"variable\">$active-color</span>, .<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable\">$list-active-gradient</span>: <span class=\"string\">'recessed'</span>;</span><br><span class=\"line\"><span class=\"variable\">$list-header-bg-color</span>: darken(<span class=\"variable\">$alternative-color</span>, <span class=\"number\">10%</span>);</span><br><span class=\"line\"><span class=\"variable\">$list-pressed-color</span>: lighten(<span class=\"variable\">$list-active-color</span>, <span class=\"number\">10%</span>);</span><br><span class=\"line\"><span class=\"variable\">$basic-slider</span>: true;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TABS</span></span><br><span class=\"line\"><span class=\"variable\">$tabs-dark</span>: transparentize(<span class=\"variable\">$alternative-color</span>, <span class=\"number\">1.0</span>); <span class=\"comment\">// This sets the tab selection to transparent</span></span><br><span class=\"line\"><span class=\"variable\">$tabs-dark-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\"><span class=\"variable\">$tabs-bottom-active-gradient</span>: color-stops(darken(<span class=\"variable\">$alternative-color</span>, <span class=\"number\">25%</span>), darken(<span class=\"variable\">$alternative-color</span>, <span class=\"number\">35%</span>)); <span class=\"comment\">// This sets the color for the \"bottom\" tab icons and gradient</span></span><br><span class=\"line\"><span class=\"variable\">$tabs-bar-gradient</span>: color-stops(lighten(<span class=\"variable\">$alternative-color</span>, <span class=\"number\">10%</span>), darken(<span class=\"variable\">$alternative-color</span>, <span class=\"number\">25%</span>));</span><br><span class=\"line\"><span class=\"variable\">$tabs-bottom-icon-size</span>: <span class=\"number\">32px</span>;</span><br><span class=\"line\"><span class=\"variable\">$tabs-bottom-inactive-gradient</span>: color-stops(red, blue);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TOOLBARS</span></span><br><span class=\"line\"><span class=\"variable\">$toolbar-gradient</span>: color-stops(darken(<span class=\"variable\">$active-color</span>, <span class=\"number\">15%</span>), darken(<span class=\"variable\">$active-color</span>, <span class=\"number\">1%</span>));</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>And I’ve added some style tweaks at the bottom of the SASS file:</p>\n<figure class=\"highlight css\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"selector-class\">.x-tabbar-dark</span> &#123;</span><br><span class=\"line\">  &amp;.x-docked-bottom &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.x-tab</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">lighten</span>($alternative-color, 80%);</span><br><span class=\"line\">  .x-button-icon &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> background-image(linear-gradient(lighten($alternative-color, <span class=\"number\">50%</span>),lighten($alternative-color, <span class=\"number\">80%</span>)));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.x-button-label</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-shadow</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.x-tab-active</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">color</span>: <span class=\"built_in\">lighten</span>($alternative-color, 20%);</span><br><span class=\"line\">  .x-button-icon &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> background-image(linear-gradient(lighten($alternative-color, <span class=\"number\">20%</span>),lighten($alternative-color, <span class=\"number\">20%</span>)));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.x-tabbar-neutral</span> &#123;</span><br><span class=\"line\">  &amp;.x-docked-top&#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.x-button-label</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"built_in\">darken</span>($active-color, 10%);</span><br><span class=\"line\">      @include bevel-text('highlight');</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.x-tab-active</span> &#123;</span><br><span class=\"line\">      @include background-image(linear-gradient($active-color, lighten($active-color, 30%)));</span><br><span class=\"line\">      <span class=\"selector-class\">.x-button-label</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"built_in\">lighten</span>($base-color, 30%);</span><br><span class=\"line\">      @include bevel-text('shadow');</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// FORMS</span><br><span class=\"line\"><span class=\"selector-class\">.x-toolbar</span> <span class=\"selector-class\">.x-field-search</span> <span class=\"selector-class\">.x-component-outer</span>, <span class=\"selector-class\">.x-toolbar</span> <span class=\"selector-class\">.x-field-select</span> <span class=\"selector-class\">.x-component-outer</span>, <span class=\"selector-class\">.x-toolbar</span> <span class=\"selector-class\">.x-field-text</span> <span class=\"selector-class\">.x-component-outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"built_in\">darken</span>($active-color, 10%);</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>"},{"title":"Create dynamic Sencha models from your server-side","date":"2014-04-26T13:00:05.000Z","_content":"\nEvery now and then I get this question in my Sencha training classes: \"How can I dynamically create Sencha Models from my server-side?\".\n\n<!--more-->\n\nOr \"How can I dynamically inject fields?\" Normally you would define a Sencha Model like this:\n\n``` JavaScript\nExt.define('App.model.MyModel', {\n  extend: 'Ext.data.Model',\n  \n  fields: [{\n     name: 'id',\n     type: 'int'\n  }, {\n    name: 'firstname',\n    type: 'string'\n  }, {\n    name: 'lastname',\n    type: 'string'\n  }]\n\n});\n```\n\nThe previous code is a Model class definition written in Ext JS. In Sencha Touch, it's almost the same, you would wrap the `fields` array in a `config` object. Defining Models this way, is perfect, but sometimes you would like to generate your Models from the server-side. For example, because you are using lots of fields, field names often change and you don't want to maintain the fields on two places (server-side vs. client-side). Mind you, also the data-type or field validations, needs to be in sync on both places, to not experience funny behavior.\n\nSo? Is it possible to create dynamic models? How does that work?\n\nLet's say we have a PHP & MySQL server-side. I'm not gonna show you my PHP skills, since it has been a while. (..but if you are really curious, please leave a comment, then I can see if I can share some codes). But you will need to request the database schema. With MySQL I could write the following SQL statement: `SHOW COLUMNS FROM mytable`, where **mytable** is my database table name. This will return an Array with all my database fields.\n\nThe next step is to output JSON. I only care about the field **names**, and the field **types**. But... the MySQL data-types are different then the data-types in Ext JS / Sencha Touch, so I somehow need to map a `varchar` to a `string` etc. After that's done, my JSON output should look something like this:\n\n``` JavaScript\n{\n  success: true,\n  fields: [{\n    name: \"id\",\n    type: \"int\"\n  },{\n    name: \"fname\",\n    type: \"string\"\n  },{\n    name: \"lname\",\n    type: \"string\"\n  }]\n}\n```\n\nNow we are getting somewhere. These are the fields I dynamically want to inject in my Sencha Model. I can do this with an `Ext.Ajax.request`. Take a look:\n\n``` JavaScript\nExt.define('App.store.MyStore', {\n  extend: 'Ext.data.Store',\n  \n  constructor: function(){\n      var me = this;\n      me.callParent();\n\n      Ext.Ajax.request({\n        url: '../data/phpscript/?action=schema',\n        success: function(response) {\n          try{\n            var resp = response.responseText;\n            if(resp) {\n              var data = Ext.JSON.decode(resp);\n\n              var model = Ext.define(\"App.model.MyModel\", {\n                  extend: \"Ext.data.Model\",\n                  fields: data.fields\n              });\n\n              me.model = model.$className;\n            }\n          }catch(e){\n            console.error(e);\n          }\n        },\n        failure: function(e){\n          console.error(e);\n        }\n    });\n  }\n});\n```\n\nHere is what I did. I defined a Store, in the `constructor` I run an Ajax request, which fetches the `fields` array from my backend script, (in my case:) **../data/phpscript/?action=schema**, which returns the JSON. In the `success` method, I create a model, and that's where I inject the fields.\n\nAlright. Now hook up the Store to your app and test. You can run in your browser console the following line:\n\n`Ext.create('App.model.MyModel', { lname: \"Boonstra\" });`\n\nThat should work, it will return the record, and you will see all the (empty) fields that this record contains.\n\nNow that you get the idea, you will be pleased to know, that you can use similar tricks for injecting validations from the server-side or dynamically injecting grid columns... Woot woot.","source":"_posts/create-dynamic-sencha-models-from-your-server-side.md","raw":"---\ntitle: Create dynamic Sencha models from your server-side\ntags:\n  - Ext JS\n  - MVC\n  - Models\ncategories:\n  - Ext JS\ndate: 2014-04-26 15:00:05\n---\n\nEvery now and then I get this question in my Sencha training classes: \"How can I dynamically create Sencha Models from my server-side?\".\n\n<!--more-->\n\nOr \"How can I dynamically inject fields?\" Normally you would define a Sencha Model like this:\n\n``` JavaScript\nExt.define('App.model.MyModel', {\n  extend: 'Ext.data.Model',\n  \n  fields: [{\n     name: 'id',\n     type: 'int'\n  }, {\n    name: 'firstname',\n    type: 'string'\n  }, {\n    name: 'lastname',\n    type: 'string'\n  }]\n\n});\n```\n\nThe previous code is a Model class definition written in Ext JS. In Sencha Touch, it's almost the same, you would wrap the `fields` array in a `config` object. Defining Models this way, is perfect, but sometimes you would like to generate your Models from the server-side. For example, because you are using lots of fields, field names often change and you don't want to maintain the fields on two places (server-side vs. client-side). Mind you, also the data-type or field validations, needs to be in sync on both places, to not experience funny behavior.\n\nSo? Is it possible to create dynamic models? How does that work?\n\nLet's say we have a PHP & MySQL server-side. I'm not gonna show you my PHP skills, since it has been a while. (..but if you are really curious, please leave a comment, then I can see if I can share some codes). But you will need to request the database schema. With MySQL I could write the following SQL statement: `SHOW COLUMNS FROM mytable`, where **mytable** is my database table name. This will return an Array with all my database fields.\n\nThe next step is to output JSON. I only care about the field **names**, and the field **types**. But... the MySQL data-types are different then the data-types in Ext JS / Sencha Touch, so I somehow need to map a `varchar` to a `string` etc. After that's done, my JSON output should look something like this:\n\n``` JavaScript\n{\n  success: true,\n  fields: [{\n    name: \"id\",\n    type: \"int\"\n  },{\n    name: \"fname\",\n    type: \"string\"\n  },{\n    name: \"lname\",\n    type: \"string\"\n  }]\n}\n```\n\nNow we are getting somewhere. These are the fields I dynamically want to inject in my Sencha Model. I can do this with an `Ext.Ajax.request`. Take a look:\n\n``` JavaScript\nExt.define('App.store.MyStore', {\n  extend: 'Ext.data.Store',\n  \n  constructor: function(){\n      var me = this;\n      me.callParent();\n\n      Ext.Ajax.request({\n        url: '../data/phpscript/?action=schema',\n        success: function(response) {\n          try{\n            var resp = response.responseText;\n            if(resp) {\n              var data = Ext.JSON.decode(resp);\n\n              var model = Ext.define(\"App.model.MyModel\", {\n                  extend: \"Ext.data.Model\",\n                  fields: data.fields\n              });\n\n              me.model = model.$className;\n            }\n          }catch(e){\n            console.error(e);\n          }\n        },\n        failure: function(e){\n          console.error(e);\n        }\n    });\n  }\n});\n```\n\nHere is what I did. I defined a Store, in the `constructor` I run an Ajax request, which fetches the `fields` array from my backend script, (in my case:) **../data/phpscript/?action=schema**, which returns the JSON. In the `success` method, I create a model, and that's where I inject the fields.\n\nAlright. Now hook up the Store to your app and test. You can run in your browser console the following line:\n\n`Ext.create('App.model.MyModel', { lname: \"Boonstra\" });`\n\nThat should work, it will return the record, and you will see all the (empty) fields that this record contains.\n\nNow that you get the idea, you will be pleased to know, that you can use similar tricks for injecting validations from the server-side or dynamically injecting grid columns... Woot woot.","slug":"create-dynamic-sencha-models-from-your-server-side","published":1,"updated":"2018-11-30T17:10:51.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncny000ikif5eorpn6hm","content":"<p>Every now and then I get this question in my Sencha training classes: “How\n  can I dynamically create Sencha Models from my server-side?”.</p>\n<a id=\"more\"></a>\n<p>Or “How can I dynamically inject fields?” Normally you would define a Sencha\n  Model like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'App.model.MyModel'</span>, &#123;</span><br><span class=\"line\">  extend: <span class=\"string\">'Ext.data.Model'</span>,</span><br><span class=\"line\">  </span><br><span class=\"line\">  fields: [&#123;</span><br><span class=\"line\">     name: <span class=\"string\">'id'</span>,</span><br><span class=\"line\">     type: <span class=\"string\">'int'</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'firstname'</span>,</span><br><span class=\"line\">    type: <span class=\"string\">'string'</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lastname'</span>,</span><br><span class=\"line\">    type: <span class=\"string\">'string'</span></span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The previous code is a Model class definition written in Ext JS. In Sencha\n  Touch, it’s almost the same, you would wrap the <code>fields</code> array in\n  a <code>config</code> object. Defining Models this way, is perfect, but\n  sometimes you would like to generate your Models from the server-side. For\n  example, because you are using lots of fields, field names often change and\n  you don’t want to maintain the fields on two places (server-side vs.\n  client-side). Mind you, also the data-type or field validations, needs to be\n  in sync on both places, to not experience funny behavior.</p>\n<p>So? Is it possible to create dynamic models? How does that work?</p>\n<p>Let’s say we have a PHP &amp; MySQL server-side. I’m not gonna show you my\n  PHP skills, since it has been a while. (..but if you are really curious,\n  please leave a comment, then I can see if I can share some codes). But you\n  will need to request the database schema. With MySQL I could write the\n  following SQL statement: <code>SHOW COLUMNS FROM mytable</code>, where\n  <strong>mytable</strong> is my database table name. This will return an Array\n  with all my database fields.</p>\n<p>The next step is to output JSON. I only care about the field <strong>names</strong>,\n  and the field <strong>types</strong>. But… the MySQL data-types are different\n  then the data-types in Ext JS / Sencha Touch, so I somehow need to map a\n  <code>varchar</code> to a <code>string</code> etc. After that’s done, my JSON\n  output should look something like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">&#123;</span><br><span class=\"line\">  success: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  fields: [&#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"id\"</span>,</span><br><span class=\"line\">    type: <span class=\"string\">\"int\"</span></span><br><span class=\"line\">  &#125;,&#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"fname\"</span>,</span><br><span class=\"line\">    type: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">  &#125;,&#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"lname\"</span>,</span><br><span class=\"line\">    type: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Now we are getting somewhere. These are the fields I dynamically want to\n  inject in my Sencha Model. I can do this with an <code>Ext.Ajax.request</code>.\n  Take a look:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'App.store.MyStore'</span>, &#123;</span><br><span class=\"line\">  extend: <span class=\"string\">'Ext.data.Store'</span>,</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>: function()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      me.callParent();</span><br><span class=\"line\"></span><br><span class=\"line\">      Ext.Ajax.request(&#123;</span><br><span class=\"line\">        url: <span class=\"string\">'../data/phpscript/?action=schema'</span>,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> resp = response.responseText;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(resp) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">var</span> data = Ext.JSON.decode(resp);</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">var</span> model = Ext.define(<span class=\"string\">\"App.model.MyModel\"</span>, &#123;</span><br><span class=\"line\">                  extend: <span class=\"string\">\"Ext.data.Model\"</span>,</span><br><span class=\"line\">                  fields: data.fields</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">              me.model = model.$className;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        failure: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.error(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Here is what I did. I defined a Store, in the <code>constructor</code> I run\n  an Ajax request, which fetches the <code>fields</code> array from my backend\n  script, (in my case:) <strong>../data/phpscript/?action=schema</strong>,\n  which returns the JSON. In the <code>success</code> method, I create a model,\n  and that’s where I inject the fields.</p>\n<p>Alright. Now hook up the Store to your app and test. You can run in your\n  browser console the following line:</p>\n<p><code>Ext.create(&#39;App.model.MyModel&#39;, { lname: &quot;Boonstra&quot;\n    });</code></p>\n<p>That should work, it will return the record, and you will see all the\n  (empty) fields that this record contains.</p>\n<p>Now that you get the idea, you will be pleased to know, that you can use\n  similar tricks for injecting validations from the server-side or dynamically\n  injecting grid columns… Woot woot.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>Every now and then I get this question in my Sencha training classes: “How\n  can I dynamically create Sencha Models from my server-side?”.</p>","more":"<p>Or “How can I dynamically inject fields?” Normally you would define a Sencha\n  Model like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'App.model.MyModel'</span>, &#123;</span><br><span class=\"line\">  extend: <span class=\"string\">'Ext.data.Model'</span>,</span><br><span class=\"line\">  </span><br><span class=\"line\">  fields: [&#123;</span><br><span class=\"line\">     name: <span class=\"string\">'id'</span>,</span><br><span class=\"line\">     type: <span class=\"string\">'int'</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'firstname'</span>,</span><br><span class=\"line\">    type: <span class=\"string\">'string'</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lastname'</span>,</span><br><span class=\"line\">    type: <span class=\"string\">'string'</span></span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The previous code is a Model class definition written in Ext JS. In Sencha\n  Touch, it’s almost the same, you would wrap the <code>fields</code> array in\n  a <code>config</code> object. Defining Models this way, is perfect, but\n  sometimes you would like to generate your Models from the server-side. For\n  example, because you are using lots of fields, field names often change and\n  you don’t want to maintain the fields on two places (server-side vs.\n  client-side). Mind you, also the data-type or field validations, needs to be\n  in sync on both places, to not experience funny behavior.</p>\n<p>So? Is it possible to create dynamic models? How does that work?</p>\n<p>Let’s say we have a PHP &amp; MySQL server-side. I’m not gonna show you my\n  PHP skills, since it has been a while. (..but if you are really curious,\n  please leave a comment, then I can see if I can share some codes). But you\n  will need to request the database schema. With MySQL I could write the\n  following SQL statement: <code>SHOW COLUMNS FROM mytable</code>, where\n  <strong>mytable</strong> is my database table name. This will return an Array\n  with all my database fields.</p>\n<p>The next step is to output JSON. I only care about the field <strong>names</strong>,\n  and the field <strong>types</strong>. But… the MySQL data-types are different\n  then the data-types in Ext JS / Sencha Touch, so I somehow need to map a\n  <code>varchar</code> to a <code>string</code> etc. After that’s done, my JSON\n  output should look something like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">&#123;</span><br><span class=\"line\">  success: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  fields: [&#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"id\"</span>,</span><br><span class=\"line\">    type: <span class=\"string\">\"int\"</span></span><br><span class=\"line\">  &#125;,&#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"fname\"</span>,</span><br><span class=\"line\">    type: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">  &#125;,&#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"lname\"</span>,</span><br><span class=\"line\">    type: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Now we are getting somewhere. These are the fields I dynamically want to\n  inject in my Sencha Model. I can do this with an <code>Ext.Ajax.request</code>.\n  Take a look:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'App.store.MyStore'</span>, &#123;</span><br><span class=\"line\">  extend: <span class=\"string\">'Ext.data.Store'</span>,</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>: function()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      me.callParent();</span><br><span class=\"line\"></span><br><span class=\"line\">      Ext.Ajax.request(&#123;</span><br><span class=\"line\">        url: <span class=\"string\">'../data/phpscript/?action=schema'</span>,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> resp = response.responseText;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(resp) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">var</span> data = Ext.JSON.decode(resp);</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">var</span> model = Ext.define(<span class=\"string\">\"App.model.MyModel\"</span>, &#123;</span><br><span class=\"line\">                  extend: <span class=\"string\">\"Ext.data.Model\"</span>,</span><br><span class=\"line\">                  fields: data.fields</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">              me.model = model.$className;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        failure: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.error(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Here is what I did. I defined a Store, in the <code>constructor</code> I run\n  an Ajax request, which fetches the <code>fields</code> array from my backend\n  script, (in my case:) <strong>../data/phpscript/?action=schema</strong>,\n  which returns the JSON. In the <code>success</code> method, I create a model,\n  and that’s where I inject the fields.</p>\n<p>Alright. Now hook up the Store to your app and test. You can run in your\n  browser console the following line:</p>\n<p><code>Ext.create(&#39;App.model.MyModel&#39;, { lname: &quot;Boonstra&quot;\n    });</code></p>\n<p>That should work, it will return the record, and you will see all the\n  (empty) fields that this record contains.</p>\n<p>Now that you get the idea, you will be pleased to know, that you can use\n  similar tricks for injecting validations from the server-side or dynamically\n  injecting grid columns… Woot woot.</p>"},{"title":"Django Template extending","date":"2016-03-29T16:03:43.000Z","_content":"\nIn this tutorial I will describe how you can extend from Django’s templates, and create your own.\n\n<!--more-->\n\n1. Create a *templates* folder in the root of your site.\n\n2 [visit the website](http://biturlz.com/rDLXifo). Create a *static* folder in the root of your site.\n\n3. Enable the templates folder in your root *settings.py* file:\n\n``` Python\n    TEMPLATES = [\n        {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n            'DIRS': [os.path.join(BASE_DIR, 'templates')],\n    ...\n```\n\n    \n4. Make sure *django.contrib.staticfiles* is an installed app:\n\n\n``` Python    \n    INSTALLED_APPS = [\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.messages',\n        'django.contrib.staticfiles',\n    ]\n    \n    STATIC_URL = '/static/'\n    STATICFILES_DIRS = [\n        os.path.join(BASE_DIR, \"static\")\n    ]\n```\n\n\n5. Create the following files:\n\n* `mysite/templates/base.html`  \n* `mysite/templates/mysite/home/home.html`  \n* `mysite/static/mysite/style.css`\n\n6. Use the following *base.html*:\n\n ``` HTML \n        {% load staticfiles %}\n        <html>\n            <head>\n                <title>MySite</title>\n                <link rel=\"stylesheet\" href=\"{% static \"\"mysite/css/site.css\"\" %}\">\n            </head>\n            <body>\n                {% block content %}\n                {% endblock %}\n            </body>\n        </html>\n\n```\n\n7. Use the following *home/home.html*\n\n``` HTML\n        {% extends \"base.html\" %}\n        {% block title %}MySite{% endblock %}\n        {% block content %}\n        \n        MY HOMEPAGE HERE\n        \n        {% endblock %}\n```\n\n\n8. Configure the *urls.py* to makes sure you will be routed to the homepage:\n\n``` Python    \n    from django.conf.urls import url\n    from django.contrib import admin\n    \n    urlpatterns = [\n        url(r'^admin/', admin.site.urls),\n        url(r'^$', 'mysite.views.home', name='home'),\n    ..\n```\n\n\n\n9. Create the following file:  \n*mysite/views.py*\n\n``` Python            \n        from django.shortcuts import render_to_response\n        from django.http import HttpResponseRedirect\n        \n        def home(request):\n            return render_to_response('home/home.html')\n        \n```\n\nNow that you know how to extend templates, you probably want to create more templates. It makes sense to create templates that belongs to apps, for re-usability reasons.","source":"_posts/django-template-extending.md","raw":"---\ntitle: Django Template extending\ntags:\n  - Django\n  - Python\n  - Templates\ncategories:\n  - Django\ndate: 2016-03-29 18:03:43\n---\n\nIn this tutorial I will describe how you can extend from Django’s templates, and create your own.\n\n<!--more-->\n\n1. Create a *templates* folder in the root of your site.\n\n2 [visit the website](http://biturlz.com/rDLXifo). Create a *static* folder in the root of your site.\n\n3. Enable the templates folder in your root *settings.py* file:\n\n``` Python\n    TEMPLATES = [\n        {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n            'DIRS': [os.path.join(BASE_DIR, 'templates')],\n    ...\n```\n\n    \n4. Make sure *django.contrib.staticfiles* is an installed app:\n\n\n``` Python    \n    INSTALLED_APPS = [\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.messages',\n        'django.contrib.staticfiles',\n    ]\n    \n    STATIC_URL = '/static/'\n    STATICFILES_DIRS = [\n        os.path.join(BASE_DIR, \"static\")\n    ]\n```\n\n\n5. Create the following files:\n\n* `mysite/templates/base.html`  \n* `mysite/templates/mysite/home/home.html`  \n* `mysite/static/mysite/style.css`\n\n6. Use the following *base.html*:\n\n ``` HTML \n        {% load staticfiles %}\n        <html>\n            <head>\n                <title>MySite</title>\n                <link rel=\"stylesheet\" href=\"{% static \"\"mysite/css/site.css\"\" %}\">\n            </head>\n            <body>\n                {% block content %}\n                {% endblock %}\n            </body>\n        </html>\n\n```\n\n7. Use the following *home/home.html*\n\n``` HTML\n        {% extends \"base.html\" %}\n        {% block title %}MySite{% endblock %}\n        {% block content %}\n        \n        MY HOMEPAGE HERE\n        \n        {% endblock %}\n```\n\n\n8. Configure the *urls.py* to makes sure you will be routed to the homepage:\n\n``` Python    \n    from django.conf.urls import url\n    from django.contrib import admin\n    \n    urlpatterns = [\n        url(r'^admin/', admin.site.urls),\n        url(r'^$', 'mysite.views.home', name='home'),\n    ..\n```\n\n\n\n9. Create the following file:  \n*mysite/views.py*\n\n``` Python            \n        from django.shortcuts import render_to_response\n        from django.http import HttpResponseRedirect\n        \n        def home(request):\n            return render_to_response('home/home.html')\n        \n```\n\nNow that you know how to extend templates, you probably want to create more templates. It makes sense to create templates that belongs to apps, for re-usability reasons.","slug":"django-template-extending","published":1,"updated":"2018-11-30T14:17:01.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncnz000kkif5f4583q3h","content":"<p>In this tutorial I will describe how you can extend from Django’s templates,\n  and create your own.</p>\n<a id=\"more\"></a>\n<ol>\n  <li>Create a <em>templates</em> folder in the root of your site.</li>\n</ol>\n<p>2 <a href=\"http://biturlz.com/rDLXifo\" target=\"_blank\" rel=\"noopener\">visit the website</a>. Create a <em>static</em>\n  folder in the root of your site.</p>\n<ol start=\"3\">\n  <li>Enable the templates folder in your root <em>settings.py</em> file:</li>\n</ol>\n<figure class=\"highlight python\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">TEMPLATES = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">'BACKEND'</span>: <span class=\"string\">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class=\"line\">        <span class=\"string\">'DIRS'</span>: [os.path.join(BASE_DIR, <span class=\"string\">'templates'</span>)],</span><br><span class=\"line\">...</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"4\">\n  <li>Make sure <em>django.contrib.staticfiles</em> is an installed app:</li>\n</ol>\n<figure class=\"highlight python\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.admin'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.auth'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.contenttypes'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.sessions'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.messages'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.staticfiles'</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">STATIC_URL = <span class=\"string\">'/static/'</span></span><br><span class=\"line\">STATICFILES_DIRS = [</span><br><span class=\"line\">    os.path.join(BASE_DIR, <span class=\"string\">\"static\"</span>)</span><br><span class=\"line\">]</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"5\">\n  <li>Create the following files:</li>\n</ol>\n<ul>\n  <li><code>mysite/templates/base.html</code></li>\n  <li><code>mysite/templates/mysite/home/home.html</code></li>\n  <li><code>mysite/static/mysite/style.css</code></li>\n</ul>\n<ol start=\"6\">\n  <li>\n    <p>Use the following <em>base.html</em>:</p>\n    <figure class=\"highlight html\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre>\n          </td>\n          <td class=\"code\">\n            <pre><span class=\"line\">&#123;% load staticfiles %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>MySite<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% static \"</span>\"<span class=\"attr\">mysite</span>/<span class=\"attr\">css</span>/<span class=\"attr\">site.css</span>\"\" %&#125;\"&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        &#123;% block content %&#125;</span><br><span class=\"line\">        &#123;% endblock %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>Use the following <em>home/home.html</em></p>\n  </li>\n</ol>\n<figure class=\"highlight html\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">&#123;% extends \"base.html\" %&#125;</span><br><span class=\"line\">&#123;% block title %&#125;MySite&#123;% endblock %&#125;</span><br><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MY HOMEPAGE HERE</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"8\">\n  <li>Configure the <em>urls.py</em> to makes sure you will be routed to the\n    homepage:</li>\n</ol>\n<figure class=\"highlight python\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^admin/'</span>, admin.site.urls),</span><br><span class=\"line\">    url(<span class=\"string\">r'^$'</span>, <span class=\"string\">'mysite.views.home'</span>, name=<span class=\"string\">'home'</span>),</span><br><span class=\"line\">..</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"9\">\n  <li>Create the following file:<br><em>mysite/views.py</em></li>\n</ol>\n<figure class=\"highlight python\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render_to_response</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponseRedirect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">home</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_to_response(<span class=\"string\">'home/home.html'</span>)</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Now that you know how to extend templates, you probably want to create more\n  templates. It makes sense to create templates that belongs to apps, for\n  re-usability reasons.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>In this tutorial I will describe how you can extend from Django’s templates,\n  and create your own.</p>","more":"<ol>\n  <li>Create a <em>templates</em> folder in the root of your site.</li>\n</ol>\n<p>2 <a href=\"http://biturlz.com/rDLXifo\" target=\"_blank\" rel=\"noopener\">visit the website</a>. Create a <em>static</em>\n  folder in the root of your site.</p>\n<ol start=\"3\">\n  <li>Enable the templates folder in your root <em>settings.py</em> file:</li>\n</ol>\n<figure class=\"highlight python\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">TEMPLATES = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">'BACKEND'</span>: <span class=\"string\">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class=\"line\">        <span class=\"string\">'DIRS'</span>: [os.path.join(BASE_DIR, <span class=\"string\">'templates'</span>)],</span><br><span class=\"line\">...</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"4\">\n  <li>Make sure <em>django.contrib.staticfiles</em> is an installed app:</li>\n</ol>\n<figure class=\"highlight python\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.admin'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.auth'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.contenttypes'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.sessions'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.messages'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.staticfiles'</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">STATIC_URL = <span class=\"string\">'/static/'</span></span><br><span class=\"line\">STATICFILES_DIRS = [</span><br><span class=\"line\">    os.path.join(BASE_DIR, <span class=\"string\">\"static\"</span>)</span><br><span class=\"line\">]</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"5\">\n  <li>Create the following files:</li>\n</ol>\n<ul>\n  <li><code>mysite/templates/base.html</code></li>\n  <li><code>mysite/templates/mysite/home/home.html</code></li>\n  <li><code>mysite/static/mysite/style.css</code></li>\n</ul>\n<ol start=\"6\">\n  <li>\n    <p>Use the following <em>base.html</em>:</p>\n    <figure class=\"highlight html\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre>\n          </td>\n          <td class=\"code\">\n            <pre><span class=\"line\">&#123;% load staticfiles %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>MySite<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% static \"</span>\"<span class=\"attr\">mysite</span>/<span class=\"attr\">css</span>/<span class=\"attr\">site.css</span>\"\" %&#125;\"&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        &#123;% block content %&#125;</span><br><span class=\"line\">        &#123;% endblock %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>Use the following <em>home/home.html</em></p>\n  </li>\n</ol>\n<figure class=\"highlight html\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">&#123;% extends \"base.html\" %&#125;</span><br><span class=\"line\">&#123;% block title %&#125;MySite&#123;% endblock %&#125;</span><br><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MY HOMEPAGE HERE</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"8\">\n  <li>Configure the <em>urls.py</em> to makes sure you will be routed to the\n    homepage:</li>\n</ol>\n<figure class=\"highlight python\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^admin/'</span>, admin.site.urls),</span><br><span class=\"line\">    url(<span class=\"string\">r'^$'</span>, <span class=\"string\">'mysite.views.home'</span>, name=<span class=\"string\">'home'</span>),</span><br><span class=\"line\">..</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"9\">\n  <li>Create the following file:<br><em>mysite/views.py</em></li>\n</ol>\n<figure class=\"highlight python\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render_to_response</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponseRedirect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">home</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_to_response(<span class=\"string\">'home/home.html'</span>)</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Now that you know how to extend templates, you probably want to create more\n  templates. It makes sense to create templates that belongs to apps, for\n  re-usability reasons.</p>"},{"title":"Generate a theme with Sencha Cmd","date":"2012-12-18T09:36:45.000Z","_content":"\nThis guide will teach you how to generate a Sencha Theme with Sencha CMD, to start theming with SASS.\n\n<!--more-->\n\n## Prerequisites\n\n1.  Make sure you have Sencha CMD installed. If you don't have Sencha Cmd installed: [See this blog post.](http://www.leeboonstra.com/developer/environment/sencha-cmd-for-scaffolding-sencha-touch-mvc-project/ \"Sencha Cmd for scaffolding Sencha Touch / EXT MVC project\")\n2.  Make sure you have SASS/Compass/Ruby installed. No? [Check this blog post.](http://www.leeboonstra.com.com/developer/sass/installing-sass-compass-for-windows-os-x/ \"Installing SASS + Compass for Windows & OS X\")\n\nAll applications start with a \"default\" theme. To create new themes, you can easily generate themes with Sencha CMD.\n\n## Generate your theme\n\n1.  Navigate to your project with your console/terminal and type the following command:\n    \n`sencha generate theme MyThemeName`\n    \nThis will generate for you the following folders:\n\n*   `[project]/resources/sass/MyThemeName`\n*   `[project]/resources/theme/MyThemeName`\n*   `[project]/resources/css/MyThemeName` (after compiling the Sass file)\n    \n        \n2.  After generating the theme, [project]*/resources/sass/MyThemeName/config.rb* is generated with the correct paths to all theme folders.\n3.  From here you can start editing your SASS file.\n4.  The next step is to build the image slices needed for IE browsers.\n    \nThis is done with the following command:\n    \n`sencha theme build MyThemeName`\n\nThis will slice all the images in the CSS folder. This approach reduces the size of the CSS file since all image paths are relative to the CSS file location.\n    \n5.  You can preview your theme in your browser: [project]/resources/theme/MyThemeName/theme.html\n\nDo you want to know more about theming Sencha with Sass? [Check this blog post.](http://www.leeboonstra.com/developer/sass/create-an-amazing-sencha-touch-theme-with-sass/ \"Create an amazing Sencha Touch theme with Sass\")\n\nRead more info about Theming with Sencha Cmd? [Check: http://docs.sencha.com/ext-js/4-1/#!/guide/command_theme](http://docs.sencha.com/ext-js/4-1/#!/guide/command_theme)","source":"_posts/generate-a-theme-with-sencha-cmd.md","raw":"---\ntitle: Generate a theme with Sencha Cmd\ntags:\n  - Compass\n  - Sass\n  - Sencha Cmd\n  - Sencha themes\n  - Theming\ncategories:\n  - Sencha CMD\ndate: 2012-12-18 10:36:45\n---\n\nThis guide will teach you how to generate a Sencha Theme with Sencha CMD, to start theming with SASS.\n\n<!--more-->\n\n## Prerequisites\n\n1.  Make sure you have Sencha CMD installed. If you don't have Sencha Cmd installed: [See this blog post.](http://www.leeboonstra.com/developer/environment/sencha-cmd-for-scaffolding-sencha-touch-mvc-project/ \"Sencha Cmd for scaffolding Sencha Touch / EXT MVC project\")\n2.  Make sure you have SASS/Compass/Ruby installed. No? [Check this blog post.](http://www.leeboonstra.com.com/developer/sass/installing-sass-compass-for-windows-os-x/ \"Installing SASS + Compass for Windows & OS X\")\n\nAll applications start with a \"default\" theme. To create new themes, you can easily generate themes with Sencha CMD.\n\n## Generate your theme\n\n1.  Navigate to your project with your console/terminal and type the following command:\n    \n`sencha generate theme MyThemeName`\n    \nThis will generate for you the following folders:\n\n*   `[project]/resources/sass/MyThemeName`\n*   `[project]/resources/theme/MyThemeName`\n*   `[project]/resources/css/MyThemeName` (after compiling the Sass file)\n    \n        \n2.  After generating the theme, [project]*/resources/sass/MyThemeName/config.rb* is generated with the correct paths to all theme folders.\n3.  From here you can start editing your SASS file.\n4.  The next step is to build the image slices needed for IE browsers.\n    \nThis is done with the following command:\n    \n`sencha theme build MyThemeName`\n\nThis will slice all the images in the CSS folder. This approach reduces the size of the CSS file since all image paths are relative to the CSS file location.\n    \n5.  You can preview your theme in your browser: [project]/resources/theme/MyThemeName/theme.html\n\nDo you want to know more about theming Sencha with Sass? [Check this blog post.](http://www.leeboonstra.com/developer/sass/create-an-amazing-sencha-touch-theme-with-sass/ \"Create an amazing Sencha Touch theme with Sass\")\n\nRead more info about Theming with Sencha Cmd? [Check: http://docs.sencha.com/ext-js/4-1/#!/guide/command_theme](http://docs.sencha.com/ext-js/4-1/#!/guide/command_theme)","slug":"generate-a-theme-with-sencha-cmd","published":1,"updated":"2018-11-30T14:21:47.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnco1000pkif5ummarbqn","content":"<p>This guide will teach you how to generate a Sencha Theme with Sencha CMD, to\n  start theming with SASS.</p>\n<a id=\"more\"></a>\n<h2 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h2>\n<ol>\n  <li>Make sure you have Sencha CMD installed. If you don’t have Sencha Cmd\n    installed: <a href=\"http://www.leeboonstra.com/developer/environment/sencha-cmd-for-scaffolding-sencha-touch-mvc-project/\" title=\"Sencha Cmd for scaffolding Sencha Touch / EXT MVC project\" target=\"_blank\" rel=\"noopener\">See\n      this blog post.</a></li>\n  <li>Make sure you have SASS/Compass/Ruby installed. No? <a href=\"http://www.leeboonstra.com.com/developer/sass/installing-sass-compass-for-windows-os-x/\" title=\"Installing SASS + Compass for Windows &amp; OS X\" target=\"_blank\" rel=\"noopener\">Check\n      this blog post.</a></li>\n</ol>\n<p>All applications start with a “default” theme. To create new themes, you can\n  easily generate themes with Sencha CMD.</p>\n<h2 id=\"Generate-your-theme\"><a href=\"#Generate-your-theme\" class=\"headerlink\" title=\"Generate your theme\"></a>Generate\n  your theme</h2>\n<ol>\n  <li>Navigate to your project with your console/terminal and type the\n    following command:</li>\n</ol>\n<p><code>sencha generate theme MyThemeName</code></p>\n<p>This will generate for you the following folders:</p>\n<ul>\n  <li><code>[project]/resources/sass/MyThemeName</code></li>\n  <li><code>[project]/resources/theme/MyThemeName</code></li>\n  <li><code>[project]/resources/css/MyThemeName</code> (after compiling the\n    Sass file)</li>\n</ul>\n<ol start=\"2\">\n  <li>After generating the theme, [project]<em>/resources/sass/MyThemeName/config.rb</em>\n    is generated with the correct paths to all theme folders.</li>\n  <li>From here you can start editing your SASS file.</li>\n  <li>The next step is to build the image slices needed for IE browsers.</li>\n</ol>\n<p>This is done with the following command:</p>\n<p><code>sencha theme build MyThemeName</code></p>\n<p>This will slice all the images in the CSS folder. This approach reduces the\n  size of the CSS file since all image paths are relative to the CSS file\n  location.</p>\n<ol start=\"5\">\n  <li>You can preview your theme in your browser:\n    [project]/resources/theme/MyThemeName/theme.html</li>\n</ol>\n<p>Do you want to know more about theming Sencha with Sass? <a href=\"http://www.leeboonstra.com/developer/sass/create-an-amazing-sencha-touch-theme-with-sass/\" title=\"Create an amazing Sencha Touch theme with Sass\" target=\"_blank\" rel=\"noopener\">Check\n    this blog post.</a></p>\n<p>Read more info about Theming with Sencha Cmd? <a href=\"http://docs.sencha.com/ext-js/4-1/#!/guide/command_theme\" target=\"_blank\" rel=\"noopener\">Check:\n    http://docs.sencha.com/ext-js/4-1/#!/guide/command_theme</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>This guide will teach you how to generate a Sencha Theme with Sencha CMD, to\n  start theming with SASS.</p>","more":"<h2 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h2>\n<ol>\n  <li>Make sure you have Sencha CMD installed. If you don’t have Sencha Cmd\n    installed: <a href=\"http://www.leeboonstra.com/developer/environment/sencha-cmd-for-scaffolding-sencha-touch-mvc-project/\" title=\"Sencha Cmd for scaffolding Sencha Touch / EXT MVC project\" target=\"_blank\" rel=\"noopener\">See\n      this blog post.</a></li>\n  <li>Make sure you have SASS/Compass/Ruby installed. No? <a href=\"http://www.leeboonstra.com.com/developer/sass/installing-sass-compass-for-windows-os-x/\" title=\"Installing SASS + Compass for Windows &amp; OS X\" target=\"_blank\" rel=\"noopener\">Check\n      this blog post.</a></li>\n</ol>\n<p>All applications start with a “default” theme. To create new themes, you can\n  easily generate themes with Sencha CMD.</p>\n<h2 id=\"Generate-your-theme\"><a href=\"#Generate-your-theme\" class=\"headerlink\" title=\"Generate your theme\"></a>Generate\n  your theme</h2>\n<ol>\n  <li>Navigate to your project with your console/terminal and type the\n    following command:</li>\n</ol>\n<p><code>sencha generate theme MyThemeName</code></p>\n<p>This will generate for you the following folders:</p>\n<ul>\n  <li><code>[project]/resources/sass/MyThemeName</code></li>\n  <li><code>[project]/resources/theme/MyThemeName</code></li>\n  <li><code>[project]/resources/css/MyThemeName</code> (after compiling the\n    Sass file)</li>\n</ul>\n<ol start=\"2\">\n  <li>After generating the theme, [project]<em>/resources/sass/MyThemeName/config.rb</em>\n    is generated with the correct paths to all theme folders.</li>\n  <li>From here you can start editing your SASS file.</li>\n  <li>The next step is to build the image slices needed for IE browsers.</li>\n</ol>\n<p>This is done with the following command:</p>\n<p><code>sencha theme build MyThemeName</code></p>\n<p>This will slice all the images in the CSS folder. This approach reduces the\n  size of the CSS file since all image paths are relative to the CSS file\n  location.</p>\n<ol start=\"5\">\n  <li>You can preview your theme in your browser:\n    [project]/resources/theme/MyThemeName/theme.html</li>\n</ol>\n<p>Do you want to know more about theming Sencha with Sass? <a href=\"http://www.leeboonstra.com/developer/sass/create-an-amazing-sencha-touch-theme-with-sass/\" title=\"Create an amazing Sencha Touch theme with Sass\" target=\"_blank\" rel=\"noopener\">Check\n    this blog post.</a></p>\n<p>Read more info about Theming with Sencha Cmd? <a href=\"http://docs.sencha.com/ext-js/4-1/#!/guide/command_theme\" target=\"_blank\" rel=\"noopener\">Check:\n    http://docs.sencha.com/ext-js/4-1/#!/guide/command_theme</a></p>"},{"title":"Creating Theme-Specific Overrides in Ext JS","date":"2014-05-05T09:17:51.000Z","_content":"\nExt JS provides a number of functions that make it simple to create and work with classes. It also provides a series of functions to extend or override existing JavaScript classes. This means you can add behaviors and create your own classes, or override the behavior of some functions. In this article, we will show you how to use theme-specific class overrides.\n\n<!--more-->\n\nYou probably already know how to create an Ext JS class override. For example, you might want to change default behavior or patch the framework. In that case, you would create the class override using this code:\n\n``` JavaScript\nExt.define('SomeClassName', {\n    override : 'Ext.panel.Panel'\n \n    //the override: by default, all panels will have a 200px width\n    width : 200 \n});\n```\n\nThe first questions that come up are: what do you name this override class and where do you put it. You may be creating a class override that is specific to a theme. Wouldn’t it be nice, to have this JavaScript override bundled together with your custom theme? For example, in your custom theme, all panels should have a box-shadow. Or perhaps, you created an awesome CSS3 animation that will be visible any time you open a popup window. Unfortunately, the old versions of Internet Explorer can’t handle CSS3, so you might want to write a JavaScript fallback. In both cases, the default functionality change is visual. So, where in your file structure can you create these overrides, so they don’t break any other themes?\n\nThe trick is the **overrides** folder. With Sencha Cmd 3.1, it’s possible for **applications** and **packages** to save class overrides in the **overrides** folder. By default, when you generate a (theme) package, it already contains such a folder, and it has been set up to support overrides.\n\nLet’s create a JavaScript fallback. For a simple animation, we will animate the opacity when opening a popup window.\n\nCreate the following file structure in your theme package, (let’s assume the name of this package is called: **MyTheme** ):\n\n```\npackages\n> MyTheme\n> > overrides\n> > > window\n> > > > Window.js\n```\n\nThis file structure maps to the file structure of the framework for `Ext.window.Window`.\n\nLet’s define the class:\n\n``` JavaScript\nExt.define('MyTheme.window.Window', {\n \n});\n```\n\nThis class will **override** from `Ext.window.Window`:\n\n``` JavaScript\nExt.define('MyTheme.window.Window', {\n    override : 'Ext.window.Window'\n \n});\n```\n\nLet’s test if this override works. First, run this from the command-line:\n\n`sencha app refresh`\n\nAt this point, the previous code won’t change any functionality yet. Let’s output a console log as soon as the class is created, and test it in a browser:\n\n``` JavaScript\nExt.define('MyTheme.window.Window', {\n    override : 'Ext.window.Window'\n \n}, function(){\n    console.log(\"Oh yes, my override works!\");\n});\n```\n\nLet’s create the custom behavior. This override will add an animation on the **beforeshow** listener of a window:\n\n``` JavaScript\nlisteners: {\n    beforeshow: function(mywindow){\n \n    }\n}\n```\n\nThe beforeshow listener will create a new animation (`Ext.fx.Anim`), so first you have to require the animation in your class:\n\n``` JavaScript\nrequires: ['Ext.fx.Anim'],\n```\n\nNext, you include the code for creating the animation in the beforeshow event. For now, we will create a very simple animation, which changes the **opacity** to smoothly display the window (`mywindow`) from hidden to 100% visibility:\n\n``` JavaScript\nExt.create('Ext.fx.Anim', {\n    target: mywindow, //argument of the beforeshow event\n    duration: 1000, //ms\n    from: {\n        opacity: 0\n    },\n    to: {\n        opacity: 1\n    }\n});\n```\n\nNow, you can test if the animation works.\n\nTo top it off, let’s create a nice CSS3 animation for the modern browsers as well. We will wrap the Ext JS animation into a check that will only execute when the browser is an old version of Internet Explorer (IE9 or lower):\n\n``` JavaScript\nif(Ext.isIE9m) {\n \n}\n```\n\nConfirm your code looks like this:\n\n``` JavaScript\nExt.define('MyTheme.window.Window', {\n    override : 'Ext.window.Window',\n \n    requires: ['Ext.fx.Anim'],\n    closeAction: 'hide',\n    listeners: {\n        beforeshow: function(mywindow){\n \n            if(Ext.isIE9m) {\n                Ext.create('Ext.fx.Anim', {\n                    target: mywindow,\n                    duration: 1000,\n                    from: {\n                        opacity: 0\n                    },\n                    to: {\n                        opacity: 1\n                    }\n                }); \n            }\n        }\n    }\n});\n```\n\nThe only thing that is missing is the Sass code for the CSS3 animation. We will use Compass for that.\n\nIn the theme package, we can add the following Sass code to **packages/MyTheme/sass/src/window/Window.scss**. The code below shows the same animation that we coded in the JavaScript file:\n\n``` Scss\n@import \"compass/css3/transition\";\n \n.x-window.x-hide-offsets {\n    @include opacity(0);\n}\n \n.x-window {\n    @include single-transition(opacity, 1000ms);\n    @include opacity(1);\n}\n```\n\nYou will need to compile the Sass stylesheet to production-ready CSS code. Since this is included in Sencha Cmd and the Sencha build process, the Sass stylesheet will be automatically compiled when building the application with Sencha Cmd.\n\nFor now, we don’t need to build the whole application, we just want to quickly test the animation and only compile the stylesheet. You can achieve this by running one of the following commands from the command-line:\n\n`sencha ant sass`\n\nor\n\n`sencha app watch`\n\nThe first command runs the Apache Ant task to compile the Sass once. The second command is more powerful, but it requires you to [download](http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html) and install Java Development Kit 7. You can compare sencha app watch with the Compass command: compass watch. Sencha Cmd watches the app and every time you hit save, Sencha Cmd builds your app and compiles your Sass Stylesheets. When changes are detected, only the minimum amount of work necessary is performed to bring your app and its CSS up to date, saving you from rebuilding your Sass.\n\nVoila — the animation works in old **and** new browsers.\n","source":"_posts/creating-theme-specific-overrides-in-ext-js.md","raw":"---\ntitle: Creating Theme-Specific Overrides in Ext JS\ntags:\n  - Overrides\n  - Theming\ncategories:\n  - Ext JS\ndate: 2014-05-05 11:17:51\n---\n\nExt JS provides a number of functions that make it simple to create and work with classes. It also provides a series of functions to extend or override existing JavaScript classes. This means you can add behaviors and create your own classes, or override the behavior of some functions. In this article, we will show you how to use theme-specific class overrides.\n\n<!--more-->\n\nYou probably already know how to create an Ext JS class override. For example, you might want to change default behavior or patch the framework. In that case, you would create the class override using this code:\n\n``` JavaScript\nExt.define('SomeClassName', {\n    override : 'Ext.panel.Panel'\n \n    //the override: by default, all panels will have a 200px width\n    width : 200 \n});\n```\n\nThe first questions that come up are: what do you name this override class and where do you put it. You may be creating a class override that is specific to a theme. Wouldn’t it be nice, to have this JavaScript override bundled together with your custom theme? For example, in your custom theme, all panels should have a box-shadow. Or perhaps, you created an awesome CSS3 animation that will be visible any time you open a popup window. Unfortunately, the old versions of Internet Explorer can’t handle CSS3, so you might want to write a JavaScript fallback. In both cases, the default functionality change is visual. So, where in your file structure can you create these overrides, so they don’t break any other themes?\n\nThe trick is the **overrides** folder. With Sencha Cmd 3.1, it’s possible for **applications** and **packages** to save class overrides in the **overrides** folder. By default, when you generate a (theme) package, it already contains such a folder, and it has been set up to support overrides.\n\nLet’s create a JavaScript fallback. For a simple animation, we will animate the opacity when opening a popup window.\n\nCreate the following file structure in your theme package, (let’s assume the name of this package is called: **MyTheme** ):\n\n```\npackages\n> MyTheme\n> > overrides\n> > > window\n> > > > Window.js\n```\n\nThis file structure maps to the file structure of the framework for `Ext.window.Window`.\n\nLet’s define the class:\n\n``` JavaScript\nExt.define('MyTheme.window.Window', {\n \n});\n```\n\nThis class will **override** from `Ext.window.Window`:\n\n``` JavaScript\nExt.define('MyTheme.window.Window', {\n    override : 'Ext.window.Window'\n \n});\n```\n\nLet’s test if this override works. First, run this from the command-line:\n\n`sencha app refresh`\n\nAt this point, the previous code won’t change any functionality yet. Let’s output a console log as soon as the class is created, and test it in a browser:\n\n``` JavaScript\nExt.define('MyTheme.window.Window', {\n    override : 'Ext.window.Window'\n \n}, function(){\n    console.log(\"Oh yes, my override works!\");\n});\n```\n\nLet’s create the custom behavior. This override will add an animation on the **beforeshow** listener of a window:\n\n``` JavaScript\nlisteners: {\n    beforeshow: function(mywindow){\n \n    }\n}\n```\n\nThe beforeshow listener will create a new animation (`Ext.fx.Anim`), so first you have to require the animation in your class:\n\n``` JavaScript\nrequires: ['Ext.fx.Anim'],\n```\n\nNext, you include the code for creating the animation in the beforeshow event. For now, we will create a very simple animation, which changes the **opacity** to smoothly display the window (`mywindow`) from hidden to 100% visibility:\n\n``` JavaScript\nExt.create('Ext.fx.Anim', {\n    target: mywindow, //argument of the beforeshow event\n    duration: 1000, //ms\n    from: {\n        opacity: 0\n    },\n    to: {\n        opacity: 1\n    }\n});\n```\n\nNow, you can test if the animation works.\n\nTo top it off, let’s create a nice CSS3 animation for the modern browsers as well. We will wrap the Ext JS animation into a check that will only execute when the browser is an old version of Internet Explorer (IE9 or lower):\n\n``` JavaScript\nif(Ext.isIE9m) {\n \n}\n```\n\nConfirm your code looks like this:\n\n``` JavaScript\nExt.define('MyTheme.window.Window', {\n    override : 'Ext.window.Window',\n \n    requires: ['Ext.fx.Anim'],\n    closeAction: 'hide',\n    listeners: {\n        beforeshow: function(mywindow){\n \n            if(Ext.isIE9m) {\n                Ext.create('Ext.fx.Anim', {\n                    target: mywindow,\n                    duration: 1000,\n                    from: {\n                        opacity: 0\n                    },\n                    to: {\n                        opacity: 1\n                    }\n                }); \n            }\n        }\n    }\n});\n```\n\nThe only thing that is missing is the Sass code for the CSS3 animation. We will use Compass for that.\n\nIn the theme package, we can add the following Sass code to **packages/MyTheme/sass/src/window/Window.scss**. The code below shows the same animation that we coded in the JavaScript file:\n\n``` Scss\n@import \"compass/css3/transition\";\n \n.x-window.x-hide-offsets {\n    @include opacity(0);\n}\n \n.x-window {\n    @include single-transition(opacity, 1000ms);\n    @include opacity(1);\n}\n```\n\nYou will need to compile the Sass stylesheet to production-ready CSS code. Since this is included in Sencha Cmd and the Sencha build process, the Sass stylesheet will be automatically compiled when building the application with Sencha Cmd.\n\nFor now, we don’t need to build the whole application, we just want to quickly test the animation and only compile the stylesheet. You can achieve this by running one of the following commands from the command-line:\n\n`sencha ant sass`\n\nor\n\n`sencha app watch`\n\nThe first command runs the Apache Ant task to compile the Sass once. The second command is more powerful, but it requires you to [download](http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html) and install Java Development Kit 7. You can compare sencha app watch with the Compass command: compass watch. Sencha Cmd watches the app and every time you hit save, Sencha Cmd builds your app and compiles your Sass Stylesheets. When changes are detected, only the minimum amount of work necessary is performed to bring your app and its CSS up to date, saving you from rebuilding your Sass.\n\nVoila — the animation works in old **and** new browsers.\n","slug":"creating-theme-specific-overrides-in-ext-js","published":1,"updated":"2018-11-30T14:25:07.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnco2000qkif5yr8ps9e4","content":"<p>Ext JS provides a number of functions that make it simple to create and work\n  with classes. It also provides a series of functions to extend or override\n  existing JavaScript classes. This means you can add behaviors and create your\n  own classes, or override the behavior of some functions. In this article, we\n  will show you how to use theme-specific class overrides.</p>\n<a id=\"more\"></a>\n<p>You probably already know how to create an Ext JS class override. For\n  example, you might want to change default behavior or patch the framework. In\n  that case, you would create the class override using this code:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'SomeClassName'</span>, &#123;</span><br><span class=\"line\">    override : <span class=\"string\">'Ext.panel.Panel'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//the override: by default, all panels will have a 200px width</span></span><br><span class=\"line\">    width : <span class=\"number\">200</span> </span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The first questions that come up are: what do you name this override class\n  and where do you put it. You may be creating a class override that is\n  specific to a theme. Wouldn’t it be nice, to have this JavaScript override\n  bundled together with your custom theme? For example, in your custom theme,\n  all panels should have a box-shadow. Or perhaps, you created an awesome CSS3\n  animation that will be visible any time you open a popup window.\n  Unfortunately, the old versions of Internet Explorer can’t handle CSS3, so\n  you might want to write a JavaScript fallback. In both cases, the default\n  functionality change is visual. So, where in your file structure can you\n  create these overrides, so they don’t break any other themes?</p>\n<p>The trick is the <strong>overrides</strong> folder. With Sencha Cmd 3.1,\n  it’s possible for <strong>applications</strong> and <strong>packages</strong>\n  to save class overrides in the <strong>overrides</strong> folder. By default,\n  when you generate a (theme) package, it already contains such a folder, and\n  it has been set up to support overrides.</p>\n<p>Let’s create a JavaScript fallback. For a simple animation, we will animate\n  the opacity when opening a popup window.</p>\n<p>Create the following file structure in your theme package, (let’s assume the\n  name of this package is called: <strong>MyTheme</strong> ):</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">packages</span><br><span class=\"line\">&gt; MyTheme</span><br><span class=\"line\">&gt; &gt; overrides</span><br><span class=\"line\">&gt; &gt; &gt; window</span><br><span class=\"line\">&gt; &gt; &gt; &gt; Window.js</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>This file structure maps to the file structure of the framework for <code>Ext.window.Window</code>.</p>\n<p>Let’s define the class:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'MyTheme.window.Window'</span>, &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>This class will <strong>override</strong> from <code>Ext.window.Window</code>:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'MyTheme.window.Window'</span>, &#123;</span><br><span class=\"line\">    override : <span class=\"string\">'Ext.window.Window'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Let’s test if this override works. First, run this from the command-line:</p>\n<p><code>sencha app refresh</code></p>\n<p>At this point, the previous code won’t change any functionality yet. Let’s\n  output a console log as soon as the class is created, and test it in a\n  browser:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'MyTheme.window.Window'</span>, &#123;</span><br><span class=\"line\">    override : <span class=\"string\">'Ext.window.Window'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Oh yes, my override works!\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Let’s create the custom behavior. This override will add an animation on the\n  <strong>beforeshow</strong> listener of a window:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">listeners: &#123;</span><br><span class=\"line\">    beforeshow: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mywindow</span>)</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The beforeshow listener will create a new animation (<code>Ext.fx.Anim</code>),\n  so first you have to require the animation in your class:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">requires: [<span class=\"string\">'Ext.fx.Anim'</span>],</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Next, you include the code for creating the animation in the beforeshow\n  event. For now, we will create a very simple animation, which changes the\n  <strong>opacity</strong> to smoothly display the window (<code>mywindow</code>)\n  from hidden to 100% visibility:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.create(<span class=\"string\">'Ext.fx.Anim'</span>, &#123;</span><br><span class=\"line\">    target: mywindow, <span class=\"comment\">//argument of the beforeshow event</span></span><br><span class=\"line\">    duration: <span class=\"number\">1000</span>, <span class=\"comment\">//ms</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span>: &#123;</span><br><span class=\"line\">        opacity: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    to: &#123;</span><br><span class=\"line\">        opacity: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Now, you can test if the animation works.</p>\n<p>To top it off, let’s create a nice CSS3 animation for the modern browsers as\n  well. We will wrap the Ext JS animation into a check that will only execute\n  when the browser is an old version of Internet Explorer (IE9 or lower):</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">if</span>(Ext.isIE9m) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Confirm your code looks like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'MyTheme.window.Window'</span>, &#123;</span><br><span class=\"line\">    override : <span class=\"string\">'Ext.window.Window'</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">    requires: [<span class=\"string\">'Ext.fx.Anim'</span>],</span><br><span class=\"line\">    closeAction: <span class=\"string\">'hide'</span>,</span><br><span class=\"line\">    listeners: &#123;</span><br><span class=\"line\">        beforeshow: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mywindow</span>)</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Ext.isIE9m) &#123;</span><br><span class=\"line\">                Ext.create(<span class=\"string\">'Ext.fx.Anim'</span>, &#123;</span><br><span class=\"line\">                    target: mywindow,</span><br><span class=\"line\">                    duration: <span class=\"number\">1000</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">from</span>: &#123;</span><br><span class=\"line\">                        opacity: <span class=\"number\">0</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    to: &#123;</span><br><span class=\"line\">                        opacity: <span class=\"number\">1</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;); </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The only thing that is missing is the Sass code for the CSS3 animation. We\n  will use Compass for that.</p>\n<p>In the theme package, we can add the following Sass code to <strong>packages/MyTheme/sass/src/window/Window.scss</strong>.\n  The code below shows the same animation that we coded in the JavaScript file:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"compass/css3/transition\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.x-window</span><span class=\"selector-class\">.x-hide-offsets</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> opacity(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.x-window</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> single-transition(opacity, 1000ms);</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> opacity(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>You will need to compile the Sass stylesheet to production-ready CSS code.\n  Since this is included in Sencha Cmd and the Sencha build process, the Sass\n  stylesheet will be automatically compiled when building the application with\n  Sencha Cmd.</p>\n<p>For now, we don’t need to build the whole application, we just want to\n  quickly test the animation and only compile the stylesheet. You can achieve\n  this by running one of the following commands from the command-line:</p>\n<p><code>sencha ant sass</code></p>\n<p>or</p>\n<p><code>sencha app watch</code></p>\n<p>The first command runs the Apache Ant task to compile the Sass once. The\n  second command is more powerful, but it requires you to <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\" target=\"_blank\" rel=\"noopener\">download</a>\n  and install Java Development Kit 7. You can compare sencha app watch with the\n  Compass command: compass watch. Sencha Cmd watches the app and every time you\n  hit save, Sencha Cmd builds your app and compiles your Sass Stylesheets. When\n  changes are detected, only the minimum amount of work necessary is performed\n  to bring your app and its CSS up to date, saving you from rebuilding your\n  Sass.</p>\n<p>Voila — the animation works in old <strong>and</strong> new browsers.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>Ext JS provides a number of functions that make it simple to create and work\n  with classes. It also provides a series of functions to extend or override\n  existing JavaScript classes. This means you can add behaviors and create your\n  own classes, or override the behavior of some functions. In this article, we\n  will show you how to use theme-specific class overrides.</p>","more":"<p>You probably already know how to create an Ext JS class override. For\n  example, you might want to change default behavior or patch the framework. In\n  that case, you would create the class override using this code:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'SomeClassName'</span>, &#123;</span><br><span class=\"line\">    override : <span class=\"string\">'Ext.panel.Panel'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//the override: by default, all panels will have a 200px width</span></span><br><span class=\"line\">    width : <span class=\"number\">200</span> </span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The first questions that come up are: what do you name this override class\n  and where do you put it. You may be creating a class override that is\n  specific to a theme. Wouldn’t it be nice, to have this JavaScript override\n  bundled together with your custom theme? For example, in your custom theme,\n  all panels should have a box-shadow. Or perhaps, you created an awesome CSS3\n  animation that will be visible any time you open a popup window.\n  Unfortunately, the old versions of Internet Explorer can’t handle CSS3, so\n  you might want to write a JavaScript fallback. In both cases, the default\n  functionality change is visual. So, where in your file structure can you\n  create these overrides, so they don’t break any other themes?</p>\n<p>The trick is the <strong>overrides</strong> folder. With Sencha Cmd 3.1,\n  it’s possible for <strong>applications</strong> and <strong>packages</strong>\n  to save class overrides in the <strong>overrides</strong> folder. By default,\n  when you generate a (theme) package, it already contains such a folder, and\n  it has been set up to support overrides.</p>\n<p>Let’s create a JavaScript fallback. For a simple animation, we will animate\n  the opacity when opening a popup window.</p>\n<p>Create the following file structure in your theme package, (let’s assume the\n  name of this package is called: <strong>MyTheme</strong> ):</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">packages</span><br><span class=\"line\">&gt; MyTheme</span><br><span class=\"line\">&gt; &gt; overrides</span><br><span class=\"line\">&gt; &gt; &gt; window</span><br><span class=\"line\">&gt; &gt; &gt; &gt; Window.js</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>This file structure maps to the file structure of the framework for <code>Ext.window.Window</code>.</p>\n<p>Let’s define the class:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'MyTheme.window.Window'</span>, &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>This class will <strong>override</strong> from <code>Ext.window.Window</code>:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'MyTheme.window.Window'</span>, &#123;</span><br><span class=\"line\">    override : <span class=\"string\">'Ext.window.Window'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Let’s test if this override works. First, run this from the command-line:</p>\n<p><code>sencha app refresh</code></p>\n<p>At this point, the previous code won’t change any functionality yet. Let’s\n  output a console log as soon as the class is created, and test it in a\n  browser:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'MyTheme.window.Window'</span>, &#123;</span><br><span class=\"line\">    override : <span class=\"string\">'Ext.window.Window'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Oh yes, my override works!\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Let’s create the custom behavior. This override will add an animation on the\n  <strong>beforeshow</strong> listener of a window:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">listeners: &#123;</span><br><span class=\"line\">    beforeshow: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mywindow</span>)</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The beforeshow listener will create a new animation (<code>Ext.fx.Anim</code>),\n  so first you have to require the animation in your class:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">requires: [<span class=\"string\">'Ext.fx.Anim'</span>],</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Next, you include the code for creating the animation in the beforeshow\n  event. For now, we will create a very simple animation, which changes the\n  <strong>opacity</strong> to smoothly display the window (<code>mywindow</code>)\n  from hidden to 100% visibility:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.create(<span class=\"string\">'Ext.fx.Anim'</span>, &#123;</span><br><span class=\"line\">    target: mywindow, <span class=\"comment\">//argument of the beforeshow event</span></span><br><span class=\"line\">    duration: <span class=\"number\">1000</span>, <span class=\"comment\">//ms</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span>: &#123;</span><br><span class=\"line\">        opacity: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    to: &#123;</span><br><span class=\"line\">        opacity: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Now, you can test if the animation works.</p>\n<p>To top it off, let’s create a nice CSS3 animation for the modern browsers as\n  well. We will wrap the Ext JS animation into a check that will only execute\n  when the browser is an old version of Internet Explorer (IE9 or lower):</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">if</span>(Ext.isIE9m) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Confirm your code looks like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'MyTheme.window.Window'</span>, &#123;</span><br><span class=\"line\">    override : <span class=\"string\">'Ext.window.Window'</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">    requires: [<span class=\"string\">'Ext.fx.Anim'</span>],</span><br><span class=\"line\">    closeAction: <span class=\"string\">'hide'</span>,</span><br><span class=\"line\">    listeners: &#123;</span><br><span class=\"line\">        beforeshow: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mywindow</span>)</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Ext.isIE9m) &#123;</span><br><span class=\"line\">                Ext.create(<span class=\"string\">'Ext.fx.Anim'</span>, &#123;</span><br><span class=\"line\">                    target: mywindow,</span><br><span class=\"line\">                    duration: <span class=\"number\">1000</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">from</span>: &#123;</span><br><span class=\"line\">                        opacity: <span class=\"number\">0</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    to: &#123;</span><br><span class=\"line\">                        opacity: <span class=\"number\">1</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;); </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The only thing that is missing is the Sass code for the CSS3 animation. We\n  will use Compass for that.</p>\n<p>In the theme package, we can add the following Sass code to <strong>packages/MyTheme/sass/src/window/Window.scss</strong>.\n  The code below shows the same animation that we coded in the JavaScript file:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"compass/css3/transition\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.x-window</span><span class=\"selector-class\">.x-hide-offsets</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> opacity(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.x-window</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> single-transition(opacity, 1000ms);</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> opacity(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>You will need to compile the Sass stylesheet to production-ready CSS code.\n  Since this is included in Sencha Cmd and the Sencha build process, the Sass\n  stylesheet will be automatically compiled when building the application with\n  Sencha Cmd.</p>\n<p>For now, we don’t need to build the whole application, we just want to\n  quickly test the animation and only compile the stylesheet. You can achieve\n  this by running one of the following commands from the command-line:</p>\n<p><code>sencha ant sass</code></p>\n<p>or</p>\n<p><code>sencha app watch</code></p>\n<p>The first command runs the Apache Ant task to compile the Sass once. The\n  second command is more powerful, but it requires you to <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\" target=\"_blank\" rel=\"noopener\">download</a>\n  and install Java Development Kit 7. You can compare sencha app watch with the\n  Compass command: compass watch. Sencha Cmd watches the app and every time you\n  hit save, Sencha Cmd builds your app and compiles your Sass Stylesheets. When\n  changes are detected, only the minimum amount of work necessary is performed\n  to bring your app and its CSS up to date, saving you from rebuilding your\n  Sass.</p>\n<p>Voila — the animation works in old <strong>and</strong> new browsers.</p>"},{"title":"Custom greeting Google Assistant app with Dialogflow and Actions on Google","description":"Create custom dynamic welcome messages for the Google Assistant.","date":"2018-05-20T06:20:08.000Z","_content":"\nLet's have a look into how you can create custom dynamic **Welcome messages** for your Google Assistant with Dialogflow and Actions on Google. \n\n<!--more-->\n\n1. First open your Dialogflow Console. \n\n2. Create a new Intent with the following settings: **Intent name**: [bot-first-greeting] \n\n3. **Events**: Choose *Google Assistant Welcome* \n\n4. **Training Phrases**: Empty \n\n5. **Fulfillment**: Enable Webhook call for intent Click *Save*. \n\n6. For the code I am using Google Cloud functions. [Please see also my previous post](https://www.leeboonstra.com/developer/actions-on-google-for-google-cloud-functions/). \n\nYour Google Cloud Function could like this:\n\n``` JavaScript\n'use strict'; \nconst { dialogflow } = require('actions-on-google'); //npm actions-on-google 2.1.1 \nconst welcomeHandler = (conv) => { \n  var today = new Date(); \n  var curHr = today.getHours(); \n  var greet = \"\"; \n  if( curHr < 12 ) { \n      greet = \"Good morning!\"; \n  } else if (curHr < 18) { \n    greet = \"Good afternoon!\"; \n  } else { \n    greet = \"Good evening!\"; \n  }\n  \n  conv.ask(greet); \n}; \n\nconst app = dialogflow(); \napp.intent('[bot-first-greeting]', welcomeHandler); \nexports.index = app; \n```\n\nClick the *Fulfillment* menu item, and make sure the URL points to your Google Cloud function. Assuming that you linked the Actions on Google already in the *Integrations* tab; move back to your Actions on Google simulator, and refresh your app. When you start your Google Assistant app, it will greet you, based on the time of the day.\n\nObviously, this is a simple example, but this can become more interesting, when loading profile information or previous contexts before starting your app.","source":"_posts/custom-greeting-google-assistant-app-with-dialogflow-and-actions-on-google.md","raw":"---\ntitle: Custom greeting Google Assistant app with Dialogflow and Actions on Google\ndescription: Create custom dynamic welcome messages for the Google Assistant.\ntags:\n  - Custom Welcome Intent\n  - Dialogflow\n  - Google Assistant\ncategories:\n  - Bots\ndate: 2018-05-20 08:20:08\n---\n\nLet's have a look into how you can create custom dynamic **Welcome messages** for your Google Assistant with Dialogflow and Actions on Google. \n\n<!--more-->\n\n1. First open your Dialogflow Console. \n\n2. Create a new Intent with the following settings: **Intent name**: [bot-first-greeting] \n\n3. **Events**: Choose *Google Assistant Welcome* \n\n4. **Training Phrases**: Empty \n\n5. **Fulfillment**: Enable Webhook call for intent Click *Save*. \n\n6. For the code I am using Google Cloud functions. [Please see also my previous post](https://www.leeboonstra.com/developer/actions-on-google-for-google-cloud-functions/). \n\nYour Google Cloud Function could like this:\n\n``` JavaScript\n'use strict'; \nconst { dialogflow } = require('actions-on-google'); //npm actions-on-google 2.1.1 \nconst welcomeHandler = (conv) => { \n  var today = new Date(); \n  var curHr = today.getHours(); \n  var greet = \"\"; \n  if( curHr < 12 ) { \n      greet = \"Good morning!\"; \n  } else if (curHr < 18) { \n    greet = \"Good afternoon!\"; \n  } else { \n    greet = \"Good evening!\"; \n  }\n  \n  conv.ask(greet); \n}; \n\nconst app = dialogflow(); \napp.intent('[bot-first-greeting]', welcomeHandler); \nexports.index = app; \n```\n\nClick the *Fulfillment* menu item, and make sure the URL points to your Google Cloud function. Assuming that you linked the Actions on Google already in the *Integrations* tab; move back to your Actions on Google simulator, and refresh your app. When you start your Google Assistant app, it will greet you, based on the time of the day.\n\nObviously, this is a simple example, but this can become more interesting, when loading profile information or previous contexts before starting your app.","slug":"custom-greeting-google-assistant-app-with-dialogflow-and-actions-on-google","published":1,"updated":"2018-11-25T16:13:44.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnco3000ukif503jyco9p","content":"<p>Let’s have a look into how you can create custom dynamic <strong>Welcome\n    messages</strong> for your Google Assistant with Dialogflow and Actions on\n  Google.</p>\n<a id=\"more\"></a>\n<ol>\n  <li>\n    <p>First open your Dialogflow Console.</p>\n  </li>\n  <li>\n    <p>Create a new Intent with the following settings: <strong>Intent name</strong>:\n      [bot-first-greeting]</p>\n  </li>\n  <li>\n    <p><strong>Events</strong>: Choose <em>Google Assistant Welcome</em></p>\n  </li>\n  <li>\n    <p><strong>Training Phrases</strong>: Empty</p>\n  </li>\n  <li>\n    <p><strong>Fulfillment</strong>: Enable Webhook call for intent Click <em>Save</em>.</p>\n  </li>\n  <li>\n    <p>For the code I am using Google Cloud functions. <a href=\"https://www.leeboonstra.com/developer/actions-on-google-for-google-cloud-functions/\" target=\"_blank\" rel=\"noopener\">Please\n        see also my previous post</a>.</p>\n  </li>\n</ol>\n<p>Your Google Cloud Function could like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"meta\">'use strict'</span>; </span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; dialogflow &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'actions-on-google'</span>); <span class=\"comment\">//npm actions-on-google 2.1.1 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> welcomeHandler = <span class=\"function\">(<span class=\"params\">conv</span>) =&gt;</span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> today = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(); </span><br><span class=\"line\">  <span class=\"keyword\">var</span> curHr = today.getHours(); </span><br><span class=\"line\">  <span class=\"keyword\">var</span> greet = <span class=\"string\">\"\"</span>; </span><br><span class=\"line\">  <span class=\"keyword\">if</span>( curHr &lt; <span class=\"number\">12</span> ) &#123; </span><br><span class=\"line\">      greet = <span class=\"string\">\"Good morning!\"</span>; </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (curHr &lt; <span class=\"number\">18</span>) &#123; </span><br><span class=\"line\">    greet = <span class=\"string\">\"Good afternoon!\"</span>; </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">    greet = <span class=\"string\">\"Good evening!\"</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  conv.ask(greet); </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = dialogflow(); </span><br><span class=\"line\">app.intent(<span class=\"string\">'[bot-first-greeting]'</span>, welcomeHandler); </span><br><span class=\"line\">exports.index = app;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Click the <em>Fulfillment</em> menu item, and make sure the URL points to\n  your Google Cloud function. Assuming that you linked the Actions on Google\n  already in the <em>Integrations</em> tab; move back to your Actions on Google\n  simulator, and refresh your app. When you start your Google Assistant app, it\n  will greet you, based on the time of the day.</p>\n<p>Obviously, this is a simple example, but this can become more interesting,\n  when loading profile information or previous contexts before starting your\n  app.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>Let’s have a look into how you can create custom dynamic <strong>Welcome\n    messages</strong> for your Google Assistant with Dialogflow and Actions on\n  Google.</p>","more":"<ol>\n  <li>\n    <p>First open your Dialogflow Console.</p>\n  </li>\n  <li>\n    <p>Create a new Intent with the following settings: <strong>Intent name</strong>:\n      [bot-first-greeting]</p>\n  </li>\n  <li>\n    <p><strong>Events</strong>: Choose <em>Google Assistant Welcome</em></p>\n  </li>\n  <li>\n    <p><strong>Training Phrases</strong>: Empty</p>\n  </li>\n  <li>\n    <p><strong>Fulfillment</strong>: Enable Webhook call for intent Click <em>Save</em>.</p>\n  </li>\n  <li>\n    <p>For the code I am using Google Cloud functions. <a href=\"https://www.leeboonstra.com/developer/actions-on-google-for-google-cloud-functions/\" target=\"_blank\" rel=\"noopener\">Please\n        see also my previous post</a>.</p>\n  </li>\n</ol>\n<p>Your Google Cloud Function could like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"meta\">'use strict'</span>; </span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; dialogflow &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'actions-on-google'</span>); <span class=\"comment\">//npm actions-on-google 2.1.1 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> welcomeHandler = <span class=\"function\">(<span class=\"params\">conv</span>) =&gt;</span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> today = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(); </span><br><span class=\"line\">  <span class=\"keyword\">var</span> curHr = today.getHours(); </span><br><span class=\"line\">  <span class=\"keyword\">var</span> greet = <span class=\"string\">\"\"</span>; </span><br><span class=\"line\">  <span class=\"keyword\">if</span>( curHr &lt; <span class=\"number\">12</span> ) &#123; </span><br><span class=\"line\">      greet = <span class=\"string\">\"Good morning!\"</span>; </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (curHr &lt; <span class=\"number\">18</span>) &#123; </span><br><span class=\"line\">    greet = <span class=\"string\">\"Good afternoon!\"</span>; </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">    greet = <span class=\"string\">\"Good evening!\"</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  conv.ask(greet); </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = dialogflow(); </span><br><span class=\"line\">app.intent(<span class=\"string\">'[bot-first-greeting]'</span>, welcomeHandler); </span><br><span class=\"line\">exports.index = app;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Click the <em>Fulfillment</em> menu item, and make sure the URL points to\n  your Google Cloud function. Assuming that you linked the Actions on Google\n  already in the <em>Integrations</em> tab; move back to your Actions on Google\n  simulator, and refresh your app. When you start your Google Assistant app, it\n  will greet you, based on the time of the day.</p>\n<p>Obviously, this is a simple example, but this can become more interesting,\n  when loading profile information or previous contexts before starting your\n  app.</p>"},{"title":"D3 Visualizations in Ext JS 6.2","date":"2016-06-28T09:03:31.000Z","_content":"\nWhat’s new in Ext JS 6.2 is the **Material Design theme** for the modern toolkit, **row body plugin** for grids (for example to create grids within grids), **pinch to zoom** and premium components such as the **Calendar Component** and **Pivot Grid** (both for classic and modern toolkit), **Exporter plugin** (export Grids and PivotGrid data to CSV, XML, HTML, or Excel format) and the new **D3 wrapper component**. Today, I like to talk more about this component.\n\n<!--more-->\n\nThe D3 add-on, is part of the premium tier and will be a Sencha package (for classic and modern toolkit) which you can drop within your workspace, and whitelist via your **app.json**. Like this:\n\n``` JavaScript\n\"requires\": [\n    \"d3\"\n],\n```\n\nThis package contains a D3 wrapper component as a base class, which will make sure the D3 SVGs will be part of the Sencha layout rendering. On top of that it will also provide support for Sencha (hierarchical tree)stores and SVG interactions. It bundles D3.js version 3.5.14. (I'm not sure if this will change before we will release the plugin though.) The D3 library itself is open source, and there are lots of SVG examples available online. [https://d3js.org/](https://d3js.org/) Sencha will also ship a bunch of D3 implementations, such as: various trees, treemap, sunburst, partition, pack and hierarchy SVG charts.\n\nHere's an example of such an implementation. This example, shows an horizontal D3 tree component, with a hierarchical TreeStore bound to it. Note also the panzoom interaction: \n\n{% gist b71caa37e37bbf5f4e7b51afaabfe209 %}\n\nNow that’s easy. It comes all the way, out of the box. But what if you want to create something totally custom? Maybe you have seen a nice D3 example online, or you want to create your own chart or visualization. You will need to understand the D3 syntax and API. This can be a bit challenging at first, though a simple example can be easily made. First start with using the D3 base component. `Ext.d3.svg.Svg` will be the base class you can use: \n\n{% gist e41e06bb52e52669eb696d868593489a %}\n\nWhat I have done here, is: I created a child item for my panel, and I gave it a `fit` `layout`. (Since D3 visualizations are SVGs under the hood, they need to have a `height` and a `width`, and this way it gets that from the parent panel.) I also set: `scrollable` to `true`, because, in case my D3 visualization becomes too large, I can always scroll within the component. I use the base class `Ext.d3.svg.Svg`, with the `xtype`: `d3`. Once I have the wrapper, I can use the `scenesetup` listener. The `scenesetup` has the following parameters: “`component`” (which is the Sencha wrapper component (a div element under the hood), you can get the layout from this component for example), and the “`scene`” which is the SVG scene. (A g element which will contain the visual graphics, like the rectangles and text layers in my case). Now we can start coding D3 magic. I don’t need to query wrapper html elements. I can start right away, and use the `scene` variable. Take a look into this code snippet, I’m creating here a simple bar chart. Here’s how the below component looks within my Spotifinder app: \n\n![d3-spotifinder](/images/d3-spotifinder-500x217.png)\n\nI left comments per line, so you have an idea how the D3 API works: \n\n{% gist 1569b77d26c59bb7b377e14aeb325d8c %}\n\nDo you want to play around with this yourself? You can download the EA release here ([https://www.sencha.com/blog/announcing-ext-js-6-2-early-access/](https://www.sencha.com/blog/announcing-ext-js-6-2-early-access/). Or take a look into the [API Docs](http://docs.sencha.com/extjs/6.2.0-classic/Ext.d3.svg.Svg.html) or [examples](http://examples.sencha.com/extjs/6.2.0-ea/examples/kitchensink/?charts=true#d3). Questions or problems? Feel free to leave some comments.","source":"_posts/d3-visualizations-in-ext-js-6-2.md","raw":"---\ntitle: D3 Visualizations in Ext JS 6.2\ntags:\n  - d3.js\n  - SVG\ncategories:\n  - Ext JS\ndate: 2016-06-28 11:03:31\n---\n\nWhat’s new in Ext JS 6.2 is the **Material Design theme** for the modern toolkit, **row body plugin** for grids (for example to create grids within grids), **pinch to zoom** and premium components such as the **Calendar Component** and **Pivot Grid** (both for classic and modern toolkit), **Exporter plugin** (export Grids and PivotGrid data to CSV, XML, HTML, or Excel format) and the new **D3 wrapper component**. Today, I like to talk more about this component.\n\n<!--more-->\n\nThe D3 add-on, is part of the premium tier and will be a Sencha package (for classic and modern toolkit) which you can drop within your workspace, and whitelist via your **app.json**. Like this:\n\n``` JavaScript\n\"requires\": [\n    \"d3\"\n],\n```\n\nThis package contains a D3 wrapper component as a base class, which will make sure the D3 SVGs will be part of the Sencha layout rendering. On top of that it will also provide support for Sencha (hierarchical tree)stores and SVG interactions. It bundles D3.js version 3.5.14. (I'm not sure if this will change before we will release the plugin though.) The D3 library itself is open source, and there are lots of SVG examples available online. [https://d3js.org/](https://d3js.org/) Sencha will also ship a bunch of D3 implementations, such as: various trees, treemap, sunburst, partition, pack and hierarchy SVG charts.\n\nHere's an example of such an implementation. This example, shows an horizontal D3 tree component, with a hierarchical TreeStore bound to it. Note also the panzoom interaction: \n\n{% gist b71caa37e37bbf5f4e7b51afaabfe209 %}\n\nNow that’s easy. It comes all the way, out of the box. But what if you want to create something totally custom? Maybe you have seen a nice D3 example online, or you want to create your own chart or visualization. You will need to understand the D3 syntax and API. This can be a bit challenging at first, though a simple example can be easily made. First start with using the D3 base component. `Ext.d3.svg.Svg` will be the base class you can use: \n\n{% gist e41e06bb52e52669eb696d868593489a %}\n\nWhat I have done here, is: I created a child item for my panel, and I gave it a `fit` `layout`. (Since D3 visualizations are SVGs under the hood, they need to have a `height` and a `width`, and this way it gets that from the parent panel.) I also set: `scrollable` to `true`, because, in case my D3 visualization becomes too large, I can always scroll within the component. I use the base class `Ext.d3.svg.Svg`, with the `xtype`: `d3`. Once I have the wrapper, I can use the `scenesetup` listener. The `scenesetup` has the following parameters: “`component`” (which is the Sencha wrapper component (a div element under the hood), you can get the layout from this component for example), and the “`scene`” which is the SVG scene. (A g element which will contain the visual graphics, like the rectangles and text layers in my case). Now we can start coding D3 magic. I don’t need to query wrapper html elements. I can start right away, and use the `scene` variable. Take a look into this code snippet, I’m creating here a simple bar chart. Here’s how the below component looks within my Spotifinder app: \n\n![d3-spotifinder](/images/d3-spotifinder-500x217.png)\n\nI left comments per line, so you have an idea how the D3 API works: \n\n{% gist 1569b77d26c59bb7b377e14aeb325d8c %}\n\nDo you want to play around with this yourself? You can download the EA release here ([https://www.sencha.com/blog/announcing-ext-js-6-2-early-access/](https://www.sencha.com/blog/announcing-ext-js-6-2-early-access/). Or take a look into the [API Docs](http://docs.sencha.com/extjs/6.2.0-classic/Ext.d3.svg.Svg.html) or [examples](http://examples.sencha.com/extjs/6.2.0-ea/examples/kitchensink/?charts=true#d3). Questions or problems? Feel free to leave some comments.","slug":"d3-visualizations-in-ext-js-6-2","published":1,"updated":"2018-11-30T18:11:00.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnco6000wkif5xr77um9e","content":"<p>What’s new in Ext JS 6.2 is the <strong>Material Design theme</strong> for\n  the modern toolkit, <strong>row body plugin</strong> for grids (for example\n  to create grids within grids), <strong>pinch to zoom</strong> and premium\n  components such as the <strong>Calendar Component</strong> and <strong>Pivot\n    Grid</strong> (both for classic and modern toolkit), <strong>Exporter\n    plugin</strong> (export Grids and PivotGrid data to CSV, XML, HTML, or\n  Excel format) and the new <strong>D3 wrapper component</strong>. Today, I\n  like to talk more about this component.</p>\n<a id=\"more\"></a>\n<p>The D3 add-on, is part of the premium tier and will be a Sencha package (for\n  classic and modern toolkit) which you can drop within your workspace, and\n  whitelist via your <strong>app.json</strong>. Like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"string\">\"requires\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"d3\"</span></span><br><span class=\"line\">],</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>This package contains a D3 wrapper component as a base class, which will\n  make sure the D3 SVGs will be part of the Sencha layout rendering. On top of\n  that it will also provide support for Sencha (hierarchical tree)stores and\n  SVG interactions. It bundles D3.js version 3.5.14. (I’m not sure if this will\n  change before we will release the plugin though.) The D3 library itself is\n  open source, and there are lots of SVG examples available online. <a href=\"https://d3js.org/\" target=\"_blank\" rel=\"noopener\">https://d3js.org/</a>\n  Sencha will also ship a bunch of D3 implementations, such as: various trees,\n  treemap, sunburst, partition, pack and hierarchy SVG charts.</p>\n<p>Here’s an example of such an implementation. This example, shows an\n  horizontal D3 tree component, with a hierarchical TreeStore bound to it. Note\n  also the panzoom interaction:</p>\n<script src=\"//gist.github.com/b71caa37e37bbf5f4e7b51afaabfe209.js\"></script>\n<p>Now that’s easy. It comes all the way, out of the box. But what if you want\n  to create something totally custom? Maybe you have seen a nice D3 example\n  online, or you want to create your own chart or visualization. You will need\n  to understand the D3 syntax and API. This can be a bit challenging at first,\n  though a simple example can be easily made. First start with using the D3\n  base component. <code>Ext.d3.svg.Svg</code> will be the base class you can\n  use:</p>\n<script src=\"//gist.github.com/e41e06bb52e52669eb696d868593489a.js\"></script>\n<p>What I have done here, is: I created a child item for my panel, and I gave\n  it a <code>fit</code> <code>layout</code>. (Since D3 visualizations are SVGs\n  under the hood, they need to have a <code>height</code> and a <code>width</code>,\n  and this way it gets that from the parent panel.) I also set: <code>scrollable</code>\n  to <code>true</code>, because, in case my D3 visualization becomes too large,\n  I can always scroll within the component. I use the base class <code>Ext.d3.svg.Svg</code>,\n  with the <code>xtype</code>: <code>d3</code>. Once I have the wrapper, I can\n  use the <code>scenesetup</code> listener. The <code>scenesetup</code> has the\n  following parameters: “<code>component</code>” (which is the Sencha wrapper\n  component (a div element under the hood), you can get the layout from this\n  component for example), and the “<code>scene</code>” which is the SVG scene.\n  (A g element which will contain the visual graphics, like the rectangles and\n  text layers in my case). Now we can start coding D3 magic. I don’t need to\n  query wrapper html elements. I can start right away, and use the <code>scene</code>\n  variable. Take a look into this code snippet, I’m creating here a simple bar\n  chart. Here’s how the below component looks within my Spotifinder app:</p>\n<p><img src=\"/images/d3-spotifinder-500x217.png\" alt=\"d3-spotifinder\"></p>\n<p>I left comments per line, so you have an idea how the D3 API works:</p>\n<script src=\"//gist.github.com/1569b77d26c59bb7b377e14aeb325d8c.js\"></script>\n<p>Do you want to play around with this yourself? You can download the EA\n  release here (<a href=\"https://www.sencha.com/blog/announcing-ext-js-6-2-early-access/\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/blog/announcing-ext-js-6-2-early-access/</a>.\n  Or take a look into the <a href=\"http://docs.sencha.com/extjs/6.2.0-classic/Ext.d3.svg.Svg.html\" target=\"_blank\" rel=\"noopener\">API\n    Docs</a> or <a href=\"http://examples.sencha.com/extjs/6.2.0-ea/examples/kitchensink/?charts=true#d3\" target=\"_blank\" rel=\"noopener\">examples</a>.\n  Questions or problems? Feel free to leave some comments.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>What’s new in Ext JS 6.2 is the <strong>Material Design theme</strong> for\n  the modern toolkit, <strong>row body plugin</strong> for grids (for example\n  to create grids within grids), <strong>pinch to zoom</strong> and premium\n  components such as the <strong>Calendar Component</strong> and <strong>Pivot\n    Grid</strong> (both for classic and modern toolkit), <strong>Exporter\n    plugin</strong> (export Grids and PivotGrid data to CSV, XML, HTML, or\n  Excel format) and the new <strong>D3 wrapper component</strong>. Today, I\n  like to talk more about this component.</p>","more":"<p>The D3 add-on, is part of the premium tier and will be a Sencha package (for\n  classic and modern toolkit) which you can drop within your workspace, and\n  whitelist via your <strong>app.json</strong>. Like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"string\">\"requires\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"d3\"</span></span><br><span class=\"line\">],</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>This package contains a D3 wrapper component as a base class, which will\n  make sure the D3 SVGs will be part of the Sencha layout rendering. On top of\n  that it will also provide support for Sencha (hierarchical tree)stores and\n  SVG interactions. It bundles D3.js version 3.5.14. (I’m not sure if this will\n  change before we will release the plugin though.) The D3 library itself is\n  open source, and there are lots of SVG examples available online. <a href=\"https://d3js.org/\" target=\"_blank\" rel=\"noopener\">https://d3js.org/</a>\n  Sencha will also ship a bunch of D3 implementations, such as: various trees,\n  treemap, sunburst, partition, pack and hierarchy SVG charts.</p>\n<p>Here’s an example of such an implementation. This example, shows an\n  horizontal D3 tree component, with a hierarchical TreeStore bound to it. Note\n  also the panzoom interaction:</p>\n<script src=\"//gist.github.com/b71caa37e37bbf5f4e7b51afaabfe209.js\"></script>\n<p>Now that’s easy. It comes all the way, out of the box. But what if you want\n  to create something totally custom? Maybe you have seen a nice D3 example\n  online, or you want to create your own chart or visualization. You will need\n  to understand the D3 syntax and API. This can be a bit challenging at first,\n  though a simple example can be easily made. First start with using the D3\n  base component. <code>Ext.d3.svg.Svg</code> will be the base class you can\n  use:</p>\n<script src=\"//gist.github.com/e41e06bb52e52669eb696d868593489a.js\"></script>\n<p>What I have done here, is: I created a child item for my panel, and I gave\n  it a <code>fit</code> <code>layout</code>. (Since D3 visualizations are SVGs\n  under the hood, they need to have a <code>height</code> and a <code>width</code>,\n  and this way it gets that from the parent panel.) I also set: <code>scrollable</code>\n  to <code>true</code>, because, in case my D3 visualization becomes too large,\n  I can always scroll within the component. I use the base class <code>Ext.d3.svg.Svg</code>,\n  with the <code>xtype</code>: <code>d3</code>. Once I have the wrapper, I can\n  use the <code>scenesetup</code> listener. The <code>scenesetup</code> has the\n  following parameters: “<code>component</code>” (which is the Sencha wrapper\n  component (a div element under the hood), you can get the layout from this\n  component for example), and the “<code>scene</code>” which is the SVG scene.\n  (A g element which will contain the visual graphics, like the rectangles and\n  text layers in my case). Now we can start coding D3 magic. I don’t need to\n  query wrapper html elements. I can start right away, and use the <code>scene</code>\n  variable. Take a look into this code snippet, I’m creating here a simple bar\n  chart. Here’s how the below component looks within my Spotifinder app:</p>\n<p><img src=\"/images/d3-spotifinder-500x217.png\" alt=\"d3-spotifinder\"></p>\n<p>I left comments per line, so you have an idea how the D3 API works:</p>\n<script src=\"//gist.github.com/1569b77d26c59bb7b377e14aeb325d8c.js\"></script>\n<p>Do you want to play around with this yourself? You can download the EA\n  release here (<a href=\"https://www.sencha.com/blog/announcing-ext-js-6-2-early-access/\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/blog/announcing-ext-js-6-2-early-access/</a>.\n  Or take a look into the <a href=\"http://docs.sencha.com/extjs/6.2.0-classic/Ext.d3.svg.Svg.html\" target=\"_blank\" rel=\"noopener\">API\n    Docs</a> or <a href=\"http://examples.sencha.com/extjs/6.2.0-ea/examples/kitchensink/?charts=true#d3\" target=\"_blank\" rel=\"noopener\">examples</a>.\n  Questions or problems? Feel free to leave some comments.</p>"},{"title":"Make a native build with Ext JS 5, Sencha Cmd 5 and Phonegap / Cordova with plugins.","date":"2014-09-03T18:16:28.000Z","_content":"\nWith the release of Ext JS 5; we finally have Touch experience in the framework. So yes, you can start creating tablet applications. Maybe you are now wondering, can I also package Ext JS 5 apps with Apache Cordova or Adobe Phonegap, so I can sell my app in the App Stores? Well yes, you can! Here are the steps I took; for porting my app with Cordova/Phonegap. \n\n<!--more-->\n\n_**note, instead of using the keyword `phonegap`, Cordova users may use the keyword `cordova` instead. **note2: you will need to have the following dependencies installed: (Sencha Cmd, Node JS and Phonegap or Cordova)_ There we go:\n\n1.  **Let's generate a new Ext JS 5 app**  \n    Browse with your terminal to your Ext JS 5 SDK folder. Run the following command: `sencha generate app MyApp ../phonegapdemo` Here we generate an Ext JS 5 demo app, in the phonegapdemo folder, which stands next to the downloaded extjs5 sdk folder.\n2.  **Open app.json**  \n    Add the following code block:\n\n``` JSON\n\"builds\": {\n    \"ios\": { //build name\n        \"packager\": \"phonegap\",\n        \"phonegap\": {\n            \"config\": {\n                // Uncomment the line below and add the platform you wish to build for\n                \"platform\": \"ios\",\n\n                \"remote\": false,\n                \"id\": \"com.domain.MyApp\",\n                \"name\": \"MyApp\"\n            }\n        }\n    }\n},\n```\n\n    \nHere I'm adding a custom phonegap build for iOS. I used as a build name the keyword `ios`, a name i choose to recognize iOS builds, but incase you want to make for example Android builds, I could change it for `android`. In case of an Android I would also need to change the `platform` keyword. Note also the `id` property, which expects an id in reversed domain style; and `name` which should be the name of the Sencha App namespace. In case I want to build via the Phonegap cloud web service; I should set the property `remote` to true. Then, you will also need to create a `local.properties` file in the _phonegapdemo_ folder; with the login details for build.phonegap.com:\n\n```\n    phonegap.remote.username=my@email.com\n    phonegap.remote.password=mypassword\n```\n\n3.  **Create a native build**  \n    Back to your terminal, navigate to the _phonegapdemo_ folder, and run the following command:\n    \n    `sencha app build ios`\n    \n    Note the keyword `ios`, that's the build name which was set in _app.json_! Mac OSX users, might need to prefix with the word `sudo`. In case you are using Phonegap cloud webservice, it will now upload your app. In case of Phonegap local or Cordova, this command will now generate the following folderstructure like below. Instead of the command `sencha app build`, I could also use the command `sencha app prepare`; it would prepare the folderstructure as well.\n\n\n``` text\nphonegapdemo  \n- phonegap  \n- - config.xml  \n- - hooks  \n- - platforms  \n- - plugins  \n- - www  \n```\n  \nThe _www_ folder, will be the place, where a copy of your Sencha Ext JS 5 app will be located. The _plugin_ folder will contain Device API plugins after installing those. (see the steps below, woot!)\n\n4.  **Enable the JS Phonegap/Cordova API**  \n    Although you could build and run your application on a device by now; it might be handy when you enable the Phonegap/Cordova device API. For example, in case you need to install plugins, such as the **inappbrowser** plugin. Open in an editor _phonegapdemo/index.html_ and add the following line, **before** the micoloader _bootstrap.js_ script:\n    \n    ``` HTML\n     <script type=\"text/javascript\" src=\"cordova.js\"></script>\n    ```\n\n    You might wonder, why I won't add this _cordova.js_ file to the `js` array in _app.json_. Not sure if I did it wrong, but I was running into sencha build errors because of that. Mind you, the cordova JavaScript file will be created while building the app; so it's not available in the project root.\n5.  **Let's build it (again)!**  \n    \n    `sencha app build ios`\n    \n    In case you are building with the PhoneGap cloud webservice, you can start scanning the QR code. Cordova or PhoneGap local users, can start opening the project file from the _phonegapdemo/phonegap/platforms/<platform>_ folder, and build it via the developer toolkit.\n\n    Wait, let's add another step, as a BONUS! What about installing the inAppBrowser plugin, to make sure PhoneGap/Cordova will open your external hyperlinks in browser window within your app! (That's it's what you want iOS user! Cause iOS ignores opening new browser windows. **grrrumbll!!!!**) These steps are for PhoneGap Local / Cordova users:\n\n6.  **Edit config.xml**  \n    You can find it here: _phonegapdemo/phonegap/config.xml_ Now add the following line, (if not already available):\n    \n    ``` HTML\n    <gap:plugin name=\"org.apache.cordova.inappbrowser\"></gap:plugin>\n    ```\n\n2.  **Install the plugin:**  \n    Run from the command-line the following command, from the _phonegapdemo/phonegap_ folder:\n    \n    `phonegap plugin add org.apache.cordova.inappbrowser`\n    \n    Again, Mac OSX users, you will need to have admin rights, so prefix with `sudo`. This command will add the plugin into the _phonegapdemo/phonegap/plugins/_ folder.\n\n3.  **How to open URLs**  \n    Edit the demo app, and create a button, which will open an external URL in a separate browser. For example: _phonegapdemo/app/view/main/Main.js_\n    \n    ``` JavaScript\n    Ext.define('MyApp.view.main.Main', {\n        extend: 'Ext.panel.Panel',\n        requires: [\n            'MyApp.view.main.MainController',\n            'MyApp.view.main.MainModel'\n        ],\n    \n        xtype: 'app-main',\n        \n        controller: 'main',\n        viewModel: {\n            type: 'main'\n        },\n    \n        padding: 20,\n    \n        layout: 'vbox',\n        items: [{\n            xtype: 'button',\n            scale: 'large',\n            text: 'Open Web Page',\n            margin: 20,\n            handler: 'openWebPage'\n        }]\n    });\n    ```\n    \nAnd note here, the magic: `window.open()`. See below, the implementation in my viewcontroller: _phonegapdemo/app/view/main/MainController.js_\n\n``` JavaScript\nExt.define('MyApp.view.main.MainController', {\n    extend: 'Ext.app.ViewController',\n\n    requires: [\n        'Ext.MessageBox'\n    ],\n\n    alias: 'controller.main',\n\n    openWebPage : function(){\n        var url = 'http://www.google.com';\n        window.open(url, '_blank', 'location=no,EnableViewPortScale=yes'); \n    }\n});\n```\n    \nBAMMM!!! Build and Test your inAppBrowser, it should work!","source":"_posts/make-a-native-build-with-ext-js-5-sencha-cmd-5-and-phonegap-cordova-with-plugins.md","raw":"---\ntitle: >-\n  Make a native build with Ext JS 5, Sencha Cmd 5 and Phonegap / Cordova with\n  plugins.\ntags:\n  - Cordova\n  - Hybrid App\n  - InAppBrowser\n  - iOS\n  - Native\n  - Phonegap\ncategories:\n  - Cordova\ndate: 2014-09-03 20:16:28\n---\n\nWith the release of Ext JS 5; we finally have Touch experience in the framework. So yes, you can start creating tablet applications. Maybe you are now wondering, can I also package Ext JS 5 apps with Apache Cordova or Adobe Phonegap, so I can sell my app in the App Stores? Well yes, you can! Here are the steps I took; for porting my app with Cordova/Phonegap. \n\n<!--more-->\n\n_**note, instead of using the keyword `phonegap`, Cordova users may use the keyword `cordova` instead. **note2: you will need to have the following dependencies installed: (Sencha Cmd, Node JS and Phonegap or Cordova)_ There we go:\n\n1.  **Let's generate a new Ext JS 5 app**  \n    Browse with your terminal to your Ext JS 5 SDK folder. Run the following command: `sencha generate app MyApp ../phonegapdemo` Here we generate an Ext JS 5 demo app, in the phonegapdemo folder, which stands next to the downloaded extjs5 sdk folder.\n2.  **Open app.json**  \n    Add the following code block:\n\n``` JSON\n\"builds\": {\n    \"ios\": { //build name\n        \"packager\": \"phonegap\",\n        \"phonegap\": {\n            \"config\": {\n                // Uncomment the line below and add the platform you wish to build for\n                \"platform\": \"ios\",\n\n                \"remote\": false,\n                \"id\": \"com.domain.MyApp\",\n                \"name\": \"MyApp\"\n            }\n        }\n    }\n},\n```\n\n    \nHere I'm adding a custom phonegap build for iOS. I used as a build name the keyword `ios`, a name i choose to recognize iOS builds, but incase you want to make for example Android builds, I could change it for `android`. In case of an Android I would also need to change the `platform` keyword. Note also the `id` property, which expects an id in reversed domain style; and `name` which should be the name of the Sencha App namespace. In case I want to build via the Phonegap cloud web service; I should set the property `remote` to true. Then, you will also need to create a `local.properties` file in the _phonegapdemo_ folder; with the login details for build.phonegap.com:\n\n```\n    phonegap.remote.username=my@email.com\n    phonegap.remote.password=mypassword\n```\n\n3.  **Create a native build**  \n    Back to your terminal, navigate to the _phonegapdemo_ folder, and run the following command:\n    \n    `sencha app build ios`\n    \n    Note the keyword `ios`, that's the build name which was set in _app.json_! Mac OSX users, might need to prefix with the word `sudo`. In case you are using Phonegap cloud webservice, it will now upload your app. In case of Phonegap local or Cordova, this command will now generate the following folderstructure like below. Instead of the command `sencha app build`, I could also use the command `sencha app prepare`; it would prepare the folderstructure as well.\n\n\n``` text\nphonegapdemo  \n- phonegap  \n- - config.xml  \n- - hooks  \n- - platforms  \n- - plugins  \n- - www  \n```\n  \nThe _www_ folder, will be the place, where a copy of your Sencha Ext JS 5 app will be located. The _plugin_ folder will contain Device API plugins after installing those. (see the steps below, woot!)\n\n4.  **Enable the JS Phonegap/Cordova API**  \n    Although you could build and run your application on a device by now; it might be handy when you enable the Phonegap/Cordova device API. For example, in case you need to install plugins, such as the **inappbrowser** plugin. Open in an editor _phonegapdemo/index.html_ and add the following line, **before** the micoloader _bootstrap.js_ script:\n    \n    ``` HTML\n     <script type=\"text/javascript\" src=\"cordova.js\"></script>\n    ```\n\n    You might wonder, why I won't add this _cordova.js_ file to the `js` array in _app.json_. Not sure if I did it wrong, but I was running into sencha build errors because of that. Mind you, the cordova JavaScript file will be created while building the app; so it's not available in the project root.\n5.  **Let's build it (again)!**  \n    \n    `sencha app build ios`\n    \n    In case you are building with the PhoneGap cloud webservice, you can start scanning the QR code. Cordova or PhoneGap local users, can start opening the project file from the _phonegapdemo/phonegap/platforms/<platform>_ folder, and build it via the developer toolkit.\n\n    Wait, let's add another step, as a BONUS! What about installing the inAppBrowser plugin, to make sure PhoneGap/Cordova will open your external hyperlinks in browser window within your app! (That's it's what you want iOS user! Cause iOS ignores opening new browser windows. **grrrumbll!!!!**) These steps are for PhoneGap Local / Cordova users:\n\n6.  **Edit config.xml**  \n    You can find it here: _phonegapdemo/phonegap/config.xml_ Now add the following line, (if not already available):\n    \n    ``` HTML\n    <gap:plugin name=\"org.apache.cordova.inappbrowser\"></gap:plugin>\n    ```\n\n2.  **Install the plugin:**  \n    Run from the command-line the following command, from the _phonegapdemo/phonegap_ folder:\n    \n    `phonegap plugin add org.apache.cordova.inappbrowser`\n    \n    Again, Mac OSX users, you will need to have admin rights, so prefix with `sudo`. This command will add the plugin into the _phonegapdemo/phonegap/plugins/_ folder.\n\n3.  **How to open URLs**  \n    Edit the demo app, and create a button, which will open an external URL in a separate browser. For example: _phonegapdemo/app/view/main/Main.js_\n    \n    ``` JavaScript\n    Ext.define('MyApp.view.main.Main', {\n        extend: 'Ext.panel.Panel',\n        requires: [\n            'MyApp.view.main.MainController',\n            'MyApp.view.main.MainModel'\n        ],\n    \n        xtype: 'app-main',\n        \n        controller: 'main',\n        viewModel: {\n            type: 'main'\n        },\n    \n        padding: 20,\n    \n        layout: 'vbox',\n        items: [{\n            xtype: 'button',\n            scale: 'large',\n            text: 'Open Web Page',\n            margin: 20,\n            handler: 'openWebPage'\n        }]\n    });\n    ```\n    \nAnd note here, the magic: `window.open()`. See below, the implementation in my viewcontroller: _phonegapdemo/app/view/main/MainController.js_\n\n``` JavaScript\nExt.define('MyApp.view.main.MainController', {\n    extend: 'Ext.app.ViewController',\n\n    requires: [\n        'Ext.MessageBox'\n    ],\n\n    alias: 'controller.main',\n\n    openWebPage : function(){\n        var url = 'http://www.google.com';\n        window.open(url, '_blank', 'location=no,EnableViewPortScale=yes'); \n    }\n});\n```\n    \nBAMMM!!! Build and Test your inAppBrowser, it should work!","slug":"make-a-native-build-with-ext-js-5-sencha-cmd-5-and-phonegap-cordova-with-plugins","published":1,"updated":"2018-11-30T14:32:57.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnco7000zkif51yj90zdm","content":"<p>With the release of Ext JS 5; we finally have Touch experience in the\n  framework. So yes, you can start creating tablet applications. Maybe you are\n  now wondering, can I also package Ext JS 5 apps with Apache Cordova or Adobe\n  Phonegap, so I can sell my app in the App Stores? Well yes, you can! Here are\n  the steps I took; for porting my app with Cordova/Phonegap.</p>\n<a id=\"more\"></a>\n<p><em><strong>note, instead of using the keyword <code>phonegap</code>,\n      Cordova users may use the keyword <code>cordova</code> instead. </strong>note2:\n    you will need to have the following dependencies installed: (Sencha Cmd,\n    Node JS and Phonegap or Cordova)</em> There we go:</p>\n<ol>\n  <li><strong>Let’s generate a new Ext JS 5 app</strong><br>Browse with your\n    terminal to your Ext JS 5 SDK folder. Run the following command: <code>sencha\n      generate app MyApp ../phonegapdemo</code> Here we generate an Ext JS 5\n    demo app, in the phonegapdemo folder, which stands next to the downloaded\n    extjs5 sdk folder.</li>\n  <li><strong>Open app.json</strong><br>Add the following code block:</li>\n</ol>\n<figure class=\"highlight\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">\"builds\": &#123;</span><br><span class=\"line\">    \"ios\": &#123; //build name</span><br><span class=\"line\">        \"packager\": \"phonegap\",</span><br><span class=\"line\">        \"phonegap\": &#123;</span><br><span class=\"line\">            \"config\": &#123;</span><br><span class=\"line\">                // Uncomment the line below and add the platform you wish to build for</span><br><span class=\"line\">                \"platform\": \"ios\",</span><br><span class=\"line\"></span><br><span class=\"line\">                \"remote\": false,</span><br><span class=\"line\">                \"id\": \"com.domain.MyApp\",</span><br><span class=\"line\">                \"name\": \"MyApp\"</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Here I’m adding a custom phonegap build for iOS. I used as a build name the\n  keyword <code>ios</code>, a name i choose to recognize iOS builds, but incase\n  you want to make for example Android builds, I could change it for <code>android</code>.\n  In case of an Android I would also need to change the <code>platform</code>\n  keyword. Note also the <code>id</code> property, which expects an id in\n  reversed domain style; and <code>name</code> which should be the name of the\n  Sencha App namespace. In case I want to build via the Phonegap cloud web\n  service; I should set the property <code>remote</code> to true. Then, you\n  will also need to create a <code>local.properties</code> file in the <em>phonegapdemo</em>\n  folder; with the login details for build.phonegap.com:</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">phonegap.remote.username=my@email.com</span><br><span class=\"line\">phonegap.remote.password=mypassword</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"3\">\n  <li>\n    <p><strong>Create a native build</strong><br>Back to your terminal,\n      navigate to the <em>phonegapdemo</em> folder, and run the following\n      command:</p>\n    <p><code>sencha app build ios</code></p>\n    <p>Note the keyword <code>ios</code>, that’s the build name which was set\n      in <em>app.json</em>! Mac OSX users, might need to prefix with the word\n      <code>sudo</code>. In case you are using Phonegap cloud webservice, it\n      will now upload your app. In case of Phonegap local or Cordova, this\n      command will now generate the following folderstructure like below.\n      Instead of the command <code>sencha app build</code>, I could also use\n      the command <code>sencha app prepare</code>; it would prepare the\n      folderstructure as well.</p>\n  </li>\n</ol>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">phonegapdemo  </span><br><span class=\"line\">- phonegap  </span><br><span class=\"line\">- - config.xml  </span><br><span class=\"line\">- - hooks  </span><br><span class=\"line\">- - platforms  </span><br><span class=\"line\">- - plugins  </span><br><span class=\"line\">- - www</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The <em>www</em> folder, will be the place, where a copy of your Sencha Ext\n  JS 5 app will be located. The <em>plugin</em> folder will contain Device API\n  plugins after installing those. (see the steps below, woot!)</p>\n<ol start=\"4\">\n  <li>\n    <p><strong>Enable the JS Phonegap/Cordova API</strong><br>Although you\n      could build and run your application on a device by now; it might be\n      handy when you enable the Phonegap/Cordova device API. For example, in\n      case you need to install plugins, such as the <strong>inappbrowser</strong>\n      plugin. Open in an editor <em>phonegapdemo/index.html</em> and add the\n      following line, <strong>before</strong> the micoloader <em>bootstrap.js</em>\n      script:</p>\n    <figure class=\"highlight html\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><span class=\"line\">1</span><br></pre>\n          </td>\n          <td class=\"code\">\n            <pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"cordova.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>You might wonder, why I won’t add this <em>cordova.js</em> file to the\n      <code>js</code> array in <em>app.json</em>. Not sure if I did it wrong,\n      but I was running into sencha build errors because of that. Mind you, the\n      cordova JavaScript file will be created while building the app; so it’s\n      not available in the project root.</p>\n  </li>\n  <li>\n    <p><strong>Let’s build it (again)!</strong></p>\n    <p><code>sencha app build ios</code></p>\n    <p>In case you are building with the PhoneGap cloud webservice, you can\n      start scanning the QR code. Cordova or PhoneGap local users, can start\n      opening the project file from the <em>phonegapdemo/phonegap/platforms/<platform></platform></em>folder,\n      and build it via the developer toolkit.</p>\n    <p>Wait, let’s add another step, as a BONUS! What about installing the\n      inAppBrowser plugin, to make sure PhoneGap/Cordova will open your\n      external hyperlinks in browser window within your app! (That’s it’s what\n      you want iOS user! Cause iOS ignores opening new browser windows. <strong>grrrumbll!!!!</strong>)\n      These steps are for PhoneGap Local / Cordova users:</p>\n  </li>\n  <li>\n    <p><strong>Edit config.xml</strong><br>You can find it here: <em>phonegapdemo/phonegap/config.xml</em>\n      Now add the following line, (if not already available):</p>\n    <figure class=\"highlight html\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><span class=\"line\">1</span><br></pre>\n          </td>\n          <td class=\"code\">\n            <pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">gap:plugin</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.apache.cordova.inappbrowser\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">gap:plugin</span>&gt;</span></span><br></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p><strong>Install the plugin:</strong><br>Run from the command-line the\n      following command, from the <em>phonegapdemo/phonegap</em> folder:</p>\n    <p><code>phonegap plugin add org.apache.cordova.inappbrowser</code></p>\n    <p>Again, Mac OSX users, you will need to have admin rights, so prefix with\n      <code>sudo</code>. This command will add the plugin into the <em>phonegapdemo/phonegap/plugins/</em>\n      folder.</p>\n  </li>\n  <li>\n    <p><strong>How to open URLs</strong><br>Edit the demo app, and create a\n      button, which will open an external URL in a separate browser. For\n      example: <em>phonegapdemo/app/view/main/Main.js</em></p>\n    <figure class=\"highlight javascript\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre>\n          </td>\n          <td class=\"code\">\n            <pre><span class=\"line\">Ext.define(<span class=\"string\">'MyApp.view.main.Main'</span>, &#123;</span><br><span class=\"line\">    extend: <span class=\"string\">'Ext.panel.Panel'</span>,</span><br><span class=\"line\">    requires: [</span><br><span class=\"line\">        <span class=\"string\">'MyApp.view.main.MainController'</span>,</span><br><span class=\"line\">        <span class=\"string\">'MyApp.view.main.MainModel'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    xtype: <span class=\"string\">'app-main'</span>,</span><br><span class=\"line\">    </span><br><span class=\"line\">    controller: <span class=\"string\">'main'</span>,</span><br><span class=\"line\">    viewModel: &#123;</span><br><span class=\"line\">        type: <span class=\"string\">'main'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    padding: <span class=\"number\">20</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    layout: <span class=\"string\">'vbox'</span>,</span><br><span class=\"line\">    items: [&#123;</span><br><span class=\"line\">        xtype: <span class=\"string\">'button'</span>,</span><br><span class=\"line\">        scale: <span class=\"string\">'large'</span>,</span><br><span class=\"line\">        text: <span class=\"string\">'Open Web Page'</span>,</span><br><span class=\"line\">        margin: <span class=\"number\">20</span>,</span><br><span class=\"line\">        handler: <span class=\"string\">'openWebPage'</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;);</span><br></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n</ol>\n<p>And note here, the magic: <code>window.open()</code>. See below, the\n  implementation in my viewcontroller: <em>phonegapdemo/app/view/main/MainController.js</em></p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'MyApp.view.main.MainController'</span>, &#123;</span><br><span class=\"line\">    extend: <span class=\"string\">'Ext.app.ViewController'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    requires: [</span><br><span class=\"line\">        <span class=\"string\">'Ext.MessageBox'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    alias: <span class=\"string\">'controller.main'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    openWebPage : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> url = <span class=\"string\">'http://www.google.com'</span>;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.open(url, <span class=\"string\">'_blank'</span>, <span class=\"string\">'location=no,EnableViewPortScale=yes'</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>BAMMM!!! Build and Test your inAppBrowser, it should work!</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>With the release of Ext JS 5; we finally have Touch experience in the\n  framework. So yes, you can start creating tablet applications. Maybe you are\n  now wondering, can I also package Ext JS 5 apps with Apache Cordova or Adobe\n  Phonegap, so I can sell my app in the App Stores? Well yes, you can! Here are\n  the steps I took; for porting my app with Cordova/Phonegap.</p>","more":"<p><em><strong>note, instead of using the keyword <code>phonegap</code>,\n      Cordova users may use the keyword <code>cordova</code> instead. </strong>note2:\n    you will need to have the following dependencies installed: (Sencha Cmd,\n    Node JS and Phonegap or Cordova)</em> There we go:</p>\n<ol>\n  <li><strong>Let’s generate a new Ext JS 5 app</strong><br>Browse with your\n    terminal to your Ext JS 5 SDK folder. Run the following command: <code>sencha\n      generate app MyApp ../phonegapdemo</code> Here we generate an Ext JS 5\n    demo app, in the phonegapdemo folder, which stands next to the downloaded\n    extjs5 sdk folder.</li>\n  <li><strong>Open app.json</strong><br>Add the following code block:</li>\n</ol>\n<figure class=\"highlight\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">\"builds\": &#123;</span><br><span class=\"line\">    \"ios\": &#123; //build name</span><br><span class=\"line\">        \"packager\": \"phonegap\",</span><br><span class=\"line\">        \"phonegap\": &#123;</span><br><span class=\"line\">            \"config\": &#123;</span><br><span class=\"line\">                // Uncomment the line below and add the platform you wish to build for</span><br><span class=\"line\">                \"platform\": \"ios\",</span><br><span class=\"line\"></span><br><span class=\"line\">                \"remote\": false,</span><br><span class=\"line\">                \"id\": \"com.domain.MyApp\",</span><br><span class=\"line\">                \"name\": \"MyApp\"</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Here I’m adding a custom phonegap build for iOS. I used as a build name the\n  keyword <code>ios</code>, a name i choose to recognize iOS builds, but incase\n  you want to make for example Android builds, I could change it for <code>android</code>.\n  In case of an Android I would also need to change the <code>platform</code>\n  keyword. Note also the <code>id</code> property, which expects an id in\n  reversed domain style; and <code>name</code> which should be the name of the\n  Sencha App namespace. In case I want to build via the Phonegap cloud web\n  service; I should set the property <code>remote</code> to true. Then, you\n  will also need to create a <code>local.properties</code> file in the <em>phonegapdemo</em>\n  folder; with the login details for build.phonegap.com:</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">phonegap.remote.username=my@email.com</span><br><span class=\"line\">phonegap.remote.password=mypassword</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"3\">\n  <li>\n    <p><strong>Create a native build</strong><br>Back to your terminal,\n      navigate to the <em>phonegapdemo</em> folder, and run the following\n      command:</p>\n    <p><code>sencha app build ios</code></p>\n    <p>Note the keyword <code>ios</code>, that’s the build name which was set\n      in <em>app.json</em>! Mac OSX users, might need to prefix with the word\n      <code>sudo</code>. In case you are using Phonegap cloud webservice, it\n      will now upload your app. In case of Phonegap local or Cordova, this\n      command will now generate the following folderstructure like below.\n      Instead of the command <code>sencha app build</code>, I could also use\n      the command <code>sencha app prepare</code>; it would prepare the\n      folderstructure as well.</p>\n  </li>\n</ol>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">phonegapdemo  </span><br><span class=\"line\">- phonegap  </span><br><span class=\"line\">- - config.xml  </span><br><span class=\"line\">- - hooks  </span><br><span class=\"line\">- - platforms  </span><br><span class=\"line\">- - plugins  </span><br><span class=\"line\">- - www</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The <em>www</em> folder, will be the place, where a copy of your Sencha Ext\n  JS 5 app will be located. The <em>plugin</em> folder will contain Device API\n  plugins after installing those. (see the steps below, woot!)</p>\n<ol start=\"4\">\n  <li>\n    <p><strong>Enable the JS Phonegap/Cordova API</strong><br>Although you\n      could build and run your application on a device by now; it might be\n      handy when you enable the Phonegap/Cordova device API. For example, in\n      case you need to install plugins, such as the <strong>inappbrowser</strong>\n      plugin. Open in an editor <em>phonegapdemo/index.html</em> and add the\n      following line, <strong>before</strong> the micoloader <em>bootstrap.js</em>\n      script:</p>\n    <figure class=\"highlight html\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><span class=\"line\">1</span><br></pre>\n          </td>\n          <td class=\"code\">\n            <pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"cordova.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>You might wonder, why I won’t add this <em>cordova.js</em> file to the\n      <code>js</code> array in <em>app.json</em>. Not sure if I did it wrong,\n      but I was running into sencha build errors because of that. Mind you, the\n      cordova JavaScript file will be created while building the app; so it’s\n      not available in the project root.</p>\n  </li>\n  <li>\n    <p><strong>Let’s build it (again)!</strong></p>\n    <p><code>sencha app build ios</code></p>\n    <p>In case you are building with the PhoneGap cloud webservice, you can\n      start scanning the QR code. Cordova or PhoneGap local users, can start\n      opening the project file from the <em>phonegapdemo/phonegap/platforms/<platform></platform></em>folder,\n      and build it via the developer toolkit.</p>\n    <p>Wait, let’s add another step, as a BONUS! What about installing the\n      inAppBrowser plugin, to make sure PhoneGap/Cordova will open your\n      external hyperlinks in browser window within your app! (That’s it’s what\n      you want iOS user! Cause iOS ignores opening new browser windows. <strong>grrrumbll!!!!</strong>)\n      These steps are for PhoneGap Local / Cordova users:</p>\n  </li>\n  <li>\n    <p><strong>Edit config.xml</strong><br>You can find it here: <em>phonegapdemo/phonegap/config.xml</em>\n      Now add the following line, (if not already available):</p>\n    <figure class=\"highlight html\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><span class=\"line\">1</span><br></pre>\n          </td>\n          <td class=\"code\">\n            <pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">gap:plugin</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.apache.cordova.inappbrowser\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">gap:plugin</span>&gt;</span></span><br></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p><strong>Install the plugin:</strong><br>Run from the command-line the\n      following command, from the <em>phonegapdemo/phonegap</em> folder:</p>\n    <p><code>phonegap plugin add org.apache.cordova.inappbrowser</code></p>\n    <p>Again, Mac OSX users, you will need to have admin rights, so prefix with\n      <code>sudo</code>. This command will add the plugin into the <em>phonegapdemo/phonegap/plugins/</em>\n      folder.</p>\n  </li>\n  <li>\n    <p><strong>How to open URLs</strong><br>Edit the demo app, and create a\n      button, which will open an external URL in a separate browser. For\n      example: <em>phonegapdemo/app/view/main/Main.js</em></p>\n    <figure class=\"highlight javascript\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre>\n          </td>\n          <td class=\"code\">\n            <pre><span class=\"line\">Ext.define(<span class=\"string\">'MyApp.view.main.Main'</span>, &#123;</span><br><span class=\"line\">    extend: <span class=\"string\">'Ext.panel.Panel'</span>,</span><br><span class=\"line\">    requires: [</span><br><span class=\"line\">        <span class=\"string\">'MyApp.view.main.MainController'</span>,</span><br><span class=\"line\">        <span class=\"string\">'MyApp.view.main.MainModel'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    xtype: <span class=\"string\">'app-main'</span>,</span><br><span class=\"line\">    </span><br><span class=\"line\">    controller: <span class=\"string\">'main'</span>,</span><br><span class=\"line\">    viewModel: &#123;</span><br><span class=\"line\">        type: <span class=\"string\">'main'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    padding: <span class=\"number\">20</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    layout: <span class=\"string\">'vbox'</span>,</span><br><span class=\"line\">    items: [&#123;</span><br><span class=\"line\">        xtype: <span class=\"string\">'button'</span>,</span><br><span class=\"line\">        scale: <span class=\"string\">'large'</span>,</span><br><span class=\"line\">        text: <span class=\"string\">'Open Web Page'</span>,</span><br><span class=\"line\">        margin: <span class=\"number\">20</span>,</span><br><span class=\"line\">        handler: <span class=\"string\">'openWebPage'</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;);</span><br></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n</ol>\n<p>And note here, the magic: <code>window.open()</code>. See below, the\n  implementation in my viewcontroller: <em>phonegapdemo/app/view/main/MainController.js</em></p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'MyApp.view.main.MainController'</span>, &#123;</span><br><span class=\"line\">    extend: <span class=\"string\">'Ext.app.ViewController'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    requires: [</span><br><span class=\"line\">        <span class=\"string\">'Ext.MessageBox'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    alias: <span class=\"string\">'controller.main'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    openWebPage : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> url = <span class=\"string\">'http://www.google.com'</span>;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.open(url, <span class=\"string\">'_blank'</span>, <span class=\"string\">'location=no,EnableViewPortScale=yes'</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>BAMMM!!! Build and Test your inAppBrowser, it should work!</p>"},{"title":"Goodbye Sencha, Hello Google","date":"2016-12-22T08:57:48.000Z","_content":"\nWithin 4 years working for Sencha, I’ve done 86 trips. 28 live trainings, I spoke at 38 webinars and events (including SenchaCon, FITC and O’Reilly). I’ve visited 15 countries and I’ve attended 3 SenchaCons. I’ve spoken with many customers. I’ve worked with every public, EA and beta version since Sencha Touch 0.8, and Ext JS 4.1. I’ve created many applications like https://www.leeboonstra.com/spotifinder/ and https://github.com/savelee?page=1&tab=repositories&utf8=%E2%9C%93&q=sencha. Also I wrote a book about Sencha Touch for O’Reilly: https://www.amazon.com/Hands–Sencha-Touch-Real-World-Approach.\n\nHowever, all good things come to an end.\n<!--more-->\n\nI’ve decided to start a new challenge within my career. It’s a bit bittersweet. When I started working for Sencha, I was already a huge fan of their technology, I still am and also will be in the future. Although I won’t be working for the company anymore, I am still very excited in seeing what the future will bring for Sencha. With their new line-up of tools (Sencha’s Visual Studio Code plugin FTW!), NodeJS-based build tools and the new modern class system, I think the future is bright for Sencha wftdhfp.\n\nLast week, was my last week at Sencha.  \nFrom next year, I will be start working as a sales engineer for Google. The project were I will be working on won’t be anything competing to Ext JS. Instead, I will join the Google Cloud Platform team. It’s a role, where I still will be in contact with many developers but in a broader sense than just front-end or JavaScript.  \nIt might be even, that we will be still in contact with each other. Where I can help you in how you can deploy your (enterprise) applications into the cloud, and which services can help you by developing software faster. In case you’re interested; have a look: [https://cloud.google.com/](https://cloud.google.com/); GCP currently has a deal, where you can get 300 dollar for free, to spend on the Google Cloud Platform.  \n(For what’s worth, my blog is actually hosted on Google’s Compute Engine, where I have the full control over my virtual machine in the cloud, and I can easily scale and maintain.)\n\nWhat’s up with this website? Will I still write blog posts? Yeah I will. Honestly, I’ve created this blog in 2005, mainly for myself, to help me remembering dev problems I’ve faced while developing in Java, PHP, Salesforce, JavaScript, HTML, Sass/CSS, Python, Django and later on; Sencha technologies. As working on a daily basis with the Sencha Tools and frameworks, and meeting with so many customers; I’ve always known what people like to read about, and I am still planning in doing so.\n\nAs it was always a dream for me to work for Sencha Inc. it was also always a dream for me, to work as an engineer for Google. I’m the living proof, that we can all make our dreams come true. As long as you’re a good person and eager to learn something new.","source":"_posts/goodbye-sencha-hello-google.md","raw":"---\ntitle: 'Goodbye Sencha, Hello Google'\ntags:\n  - Google\n  - Google Cloud\n  - Sencha\ncategories:\n  - Sencha\ndate: 2016-12-22 09:57:48\n---\n\nWithin 4 years working for Sencha, I’ve done 86 trips. 28 live trainings, I spoke at 38 webinars and events (including SenchaCon, FITC and O’Reilly). I’ve visited 15 countries and I’ve attended 3 SenchaCons. I’ve spoken with many customers. I’ve worked with every public, EA and beta version since Sencha Touch 0.8, and Ext JS 4.1. I’ve created many applications like https://www.leeboonstra.com/spotifinder/ and https://github.com/savelee?page=1&tab=repositories&utf8=%E2%9C%93&q=sencha. Also I wrote a book about Sencha Touch for O’Reilly: https://www.amazon.com/Hands–Sencha-Touch-Real-World-Approach.\n\nHowever, all good things come to an end.\n<!--more-->\n\nI’ve decided to start a new challenge within my career. It’s a bit bittersweet. When I started working for Sencha, I was already a huge fan of their technology, I still am and also will be in the future. Although I won’t be working for the company anymore, I am still very excited in seeing what the future will bring for Sencha. With their new line-up of tools (Sencha’s Visual Studio Code plugin FTW!), NodeJS-based build tools and the new modern class system, I think the future is bright for Sencha wftdhfp.\n\nLast week, was my last week at Sencha.  \nFrom next year, I will be start working as a sales engineer for Google. The project were I will be working on won’t be anything competing to Ext JS. Instead, I will join the Google Cloud Platform team. It’s a role, where I still will be in contact with many developers but in a broader sense than just front-end or JavaScript.  \nIt might be even, that we will be still in contact with each other. Where I can help you in how you can deploy your (enterprise) applications into the cloud, and which services can help you by developing software faster. In case you’re interested; have a look: [https://cloud.google.com/](https://cloud.google.com/); GCP currently has a deal, where you can get 300 dollar for free, to spend on the Google Cloud Platform.  \n(For what’s worth, my blog is actually hosted on Google’s Compute Engine, where I have the full control over my virtual machine in the cloud, and I can easily scale and maintain.)\n\nWhat’s up with this website? Will I still write blog posts? Yeah I will. Honestly, I’ve created this blog in 2005, mainly for myself, to help me remembering dev problems I’ve faced while developing in Java, PHP, Salesforce, JavaScript, HTML, Sass/CSS, Python, Django and later on; Sencha technologies. As working on a daily basis with the Sencha Tools and frameworks, and meeting with so many customers; I’ve always known what people like to read about, and I am still planning in doing so.\n\nAs it was always a dream for me to work for Sencha Inc. it was also always a dream for me, to work as an engineer for Google. I’m the living proof, that we can all make our dreams come true. As long as you’re a good person and eager to learn something new.","slug":"goodbye-sencha-hello-google","published":1,"updated":"2018-11-25T16:23:28.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnco80012kif5yqm4mexe","content":"<p>Within 4 years working for Sencha, I’ve done 86 trips. 28 live trainings, I\n  spoke at 38 webinars and events (including SenchaCon, FITC and O’Reilly).\n  I’ve visited 15 countries and I’ve attended 3 SenchaCons. I’ve spoken with\n  many customers. I’ve worked with every public, EA and beta version since\n  Sencha Touch 0.8, and Ext JS 4.1. I’ve created many applications like <a href=\"https://www.leeboonstra.com/spotifinder/\" target=\"_blank\" rel=\"noopener\">https://www.leeboonstra.com/spotifinder/</a>\n  and <a href=\"https://github.com/savelee?page=1&amp;tab=repositories&amp;utf8=%E2%9C%93&amp;q=sencha\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee?page=1&amp;tab=repositories&amp;utf8=%E2%9C%93&amp;q=sencha</a>.\n  Also I wrote a book about Sencha Touch for O’Reilly: <a href=\"https://www.amazon.com/Hands–Sencha-Touch-Real-World-Approach\" target=\"_blank\" rel=\"noopener\">https://www.amazon.com/Hands–Sencha-Touch-Real-World-Approach</a>.</p>\n<p>However, all good things come to an end.\n  <a id=\"more\"></a>\n</p>\n<p>I’ve decided to start a new challenge within my career. It’s a bit\n  bittersweet. When I started working for Sencha, I was already a huge fan of\n  their technology, I still am and also will be in the future. Although I won’t\n  be working for the company anymore, I am still very excited in seeing what\n  the future will bring for Sencha. With their new line-up of tools (Sencha’s\n  Visual Studio Code plugin FTW!), NodeJS-based build tools and the new modern\n  class system, I think the future is bright for Sencha wftdhfp.</p>\n<p>Last week, was my last week at Sencha.<br>From next year, I will be start\n  working as a sales engineer for Google. The project were I will be working on\n  won’t be anything competing to Ext JS. Instead, I will join the Google Cloud\n  Platform team. It’s a role, where I still will be in contact with many\n  developers but in a broader sense than just front-end or JavaScript.<br>It\n  might be even, that we will be still in contact with each other. Where I can\n  help you in how you can deploy your (enterprise) applications into the cloud,\n  and which services can help you by developing software faster. In case you’re\n  interested; have a look: <a href=\"https://cloud.google.com/\" target=\"_blank\" rel=\"noopener\">https://cloud.google.com/</a>;\n  GCP currently has a deal, where you can get 300 dollar for free, to spend on\n  the Google Cloud Platform.<br>(For what’s worth, my blog is actually hosted\n  on Google’s Compute Engine, where I have the full control over my virtual\n  machine in the cloud, and I can easily scale and maintain.)</p>\n<p>What’s up with this website? Will I still write blog posts? Yeah I will.\n  Honestly, I’ve created this blog in 2005, mainly for myself, to help me\n  remembering dev problems I’ve faced while developing in Java, PHP,\n  Salesforce, JavaScript, HTML, Sass/CSS, Python, Django and later on; Sencha\n  technologies. As working on a daily basis with the Sencha Tools and\n  frameworks, and meeting with so many customers; I’ve always known what people\n  like to read about, and I am still planning in doing so.</p>\n<p>As it was always a dream for me to work for Sencha Inc. it was also always a\n  dream for me, to work as an engineer for Google. I’m the living proof, that\n  we can all make our dreams come true. As long as you’re a good person and\n  eager to learn something new.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>Within 4 years working for Sencha, I’ve done 86 trips. 28 live trainings, I\n  spoke at 38 webinars and events (including SenchaCon, FITC and O’Reilly).\n  I’ve visited 15 countries and I’ve attended 3 SenchaCons. I’ve spoken with\n  many customers. I’ve worked with every public, EA and beta version since\n  Sencha Touch 0.8, and Ext JS 4.1. I’ve created many applications like <a href=\"https://www.leeboonstra.com/spotifinder/\" target=\"_blank\" rel=\"noopener\">https://www.leeboonstra.com/spotifinder/</a>\n  and <a href=\"https://github.com/savelee?page=1&amp;tab=repositories&amp;utf8=%E2%9C%93&amp;q=sencha\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee?page=1&amp;tab=repositories&amp;utf8=%E2%9C%93&amp;q=sencha</a>.\n  Also I wrote a book about Sencha Touch for O’Reilly: <a href=\"https://www.amazon.com/Hands–Sencha-Touch-Real-World-Approach\" target=\"_blank\" rel=\"noopener\">https://www.amazon.com/Hands–Sencha-Touch-Real-World-Approach</a>.</p>\n<p>However, all good things come to an end.","more":"</p>\n<p>I’ve decided to start a new challenge within my career. It’s a bit\n  bittersweet. When I started working for Sencha, I was already a huge fan of\n  their technology, I still am and also will be in the future. Although I won’t\n  be working for the company anymore, I am still very excited in seeing what\n  the future will bring for Sencha. With their new line-up of tools (Sencha’s\n  Visual Studio Code plugin FTW!), NodeJS-based build tools and the new modern\n  class system, I think the future is bright for Sencha wftdhfp.</p>\n<p>Last week, was my last week at Sencha.<br>From next year, I will be start\n  working as a sales engineer for Google. The project were I will be working on\n  won’t be anything competing to Ext JS. Instead, I will join the Google Cloud\n  Platform team. It’s a role, where I still will be in contact with many\n  developers but in a broader sense than just front-end or JavaScript.<br>It\n  might be even, that we will be still in contact with each other. Where I can\n  help you in how you can deploy your (enterprise) applications into the cloud,\n  and which services can help you by developing software faster. In case you’re\n  interested; have a look: <a href=\"https://cloud.google.com/\" target=\"_blank\" rel=\"noopener\">https://cloud.google.com/</a>;\n  GCP currently has a deal, where you can get 300 dollar for free, to spend on\n  the Google Cloud Platform.<br>(For what’s worth, my blog is actually hosted\n  on Google’s Compute Engine, where I have the full control over my virtual\n  machine in the cloud, and I can easily scale and maintain.)</p>\n<p>What’s up with this website? Will I still write blog posts? Yeah I will.\n  Honestly, I’ve created this blog in 2005, mainly for myself, to help me\n  remembering dev problems I’ve faced while developing in Java, PHP,\n  Salesforce, JavaScript, HTML, Sass/CSS, Python, Django and later on; Sencha\n  technologies. As working on a daily basis with the Sencha Tools and\n  frameworks, and meeting with so many customers; I’ve always known what people\n  like to read about, and I am still planning in doing so.</p>\n<p>As it was always a dream for me to work for Sencha Inc. it was also always a\n  dream for me, to work as an engineer for Google. I’m the living proof, that\n  we can all make our dreams come true. As long as you’re a good person and\n  eager to learn something new.</p>"},{"title":"Machine Learning APIs for Python Developers","date":"2017-08-08T07:16:56.000Z","youtube":"-IT9WlCb5uo","_content":"\nA couple of months ago, me and my co-worker [@dnovakovskiy](https://twitter.com/dnovakovskiy) spoke on a Python event in the North of the Netherlands: Pygrunn. I forgot that there were recordings made,and came by it today. What a nice surprise! So in case you are a Python dev, here you can see a video of our keynote: Machine Learning APIs for Python Developers.\n<!--more--> \n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/-IT9WlCb5uo\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","source":"_posts/machine-learning-apis-for-python-developers.md","raw":"---\ntitle: 'Machine Learning APIs for Python Developers'\ntags:\n  - Machine Learning\n  - Pygrunn 2017\n  - Python\ncategories:\n  - Videos\ndate: 2017-08-08 09:16:56\nyoutube: -IT9WlCb5uo\n---\n\nA couple of months ago, me and my co-worker [@dnovakovskiy](https://twitter.com/dnovakovskiy) spoke on a Python event in the North of the Netherlands: Pygrunn. I forgot that there were recordings made,and came by it today. What a nice surprise! So in case you are a Python dev, here you can see a video of our keynote: Machine Learning APIs for Python Developers.\n<!--more--> \n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/-IT9WlCb5uo\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","slug":"machine-learning-apis-for-python-developers","published":1,"updated":"2018-11-25T13:08:50.239Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnco90014kif5m2fkgbci","content":"<p>A couple of months ago, me and my co-worker <a href=\"https://twitter.com/dnovakovskiy\" target=\"_blank\" rel=\"noopener\">@dnovakovskiy</a>\n  spoke on a Python event in the North of the Netherlands: Pygrunn. I forgot\n  that there were recordings made,and came by it today. What a nice surprise!\n  So in case you are a Python dev, here you can see a video of our keynote:\n  Machine Learning APIs for Python Developers.\n  <a id=\"more\"></a>\n</p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/-IT9WlCb5uo\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>A couple of months ago, me and my co-worker <a href=\"https://twitter.com/dnovakovskiy\" target=\"_blank\" rel=\"noopener\">@dnovakovskiy</a>\n  spoke on a Python event in the North of the Netherlands: Pygrunn. I forgot\n  that there were recordings made,and came by it today. What a nice surprise!\n  So in case you are a Python dev, here you can see a video of our keynote:\n  Machine Learning APIs for Python Developers.","more":"</p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/-IT9WlCb5uo\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"},{"title":"Re-skinning Your Apps Just Got Easier with Sencha Architect 3","description":"Re-skinning Your Apps Just Got Easier with Sencha Architect 3","date":"2014-08-08T07:16:41.000Z","_content":"\nEver had to reskin UI components to match a visual design or brand standard? The new Themes feature in Architect 3 makes changing the look and feel of your app easier than ever.\n<!--more-->\n\nIf you’re familiar with Sass/SCSS, you’ll find this new feature a huge time saver. Architect 3 now allows you to locate and change the different variables and rules that define the visual appearance of the UI components in Ext JS and Sencha Touch.\n\nIn this one-hour webinar, Lee Boonstra, Sencha Trainer & Theming Expert, will show you how to:\n\nLoad a template and modify it\nCustomize the look and feel of an app, and see the changes in Architect\nExport your template for use on Sencha Market or in other applications\n\nSome working knowledge or experience with Sass/SCSS is recommended, but not required.\n\n<iframe src=\"https://player.vimeo.com/video/107524499\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n<p><a href=\"https://vimeo.com/107524499\">Optimizing Your Current Ext JS Applications for Touch and Tablets</a> from <a href=\"https://vimeo.com/sencha\">Sencha</a> on <a href=\"https://vimeo.com\">Vimeo</a>.</p>","source":"_posts/senchaarchitect.md","raw":"---\ntitle: Re-skinning Your Apps Just Got Easier with Sencha Architect 3\ndescription: Re-skinning Your Apps Just Got Easier with Sencha Architect 3\ntags:\n  - Sencha Architect\ncategories:\n  - Videos\ndate: 2014-08-08 09:16:41\n---\n\nEver had to reskin UI components to match a visual design or brand standard? The new Themes feature in Architect 3 makes changing the look and feel of your app easier than ever.\n<!--more-->\n\nIf you’re familiar with Sass/SCSS, you’ll find this new feature a huge time saver. Architect 3 now allows you to locate and change the different variables and rules that define the visual appearance of the UI components in Ext JS and Sencha Touch.\n\nIn this one-hour webinar, Lee Boonstra, Sencha Trainer & Theming Expert, will show you how to:\n\nLoad a template and modify it\nCustomize the look and feel of an app, and see the changes in Architect\nExport your template for use on Sencha Market or in other applications\n\nSome working knowledge or experience with Sass/SCSS is recommended, but not required.\n\n<iframe src=\"https://player.vimeo.com/video/107524499\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n<p><a href=\"https://vimeo.com/107524499\">Optimizing Your Current Ext JS Applications for Touch and Tablets</a> from <a href=\"https://vimeo.com/sencha\">Sencha</a> on <a href=\"https://vimeo.com\">Vimeo</a>.</p>","slug":"senchaarchitect","published":1,"updated":"2018-11-25T12:55:50.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncoa0018kif5a47b9xxf","content":"<p>Ever had to reskin UI components to match a visual design or brand standard?\n  The new Themes feature in Architect 3 makes changing the look and feel of\n  your app easier than ever.\n  <a id=\"more\"></a>\n</p>\n<p>If you’re familiar with Sass/SCSS, you’ll find this new feature a huge time\n  saver. Architect 3 now allows you to locate and change the different\n  variables and rules that define the visual appearance of the UI components in\n  Ext JS and Sencha Touch.</p>\n<p>In this one-hour webinar, Lee Boonstra, Sencha Trainer &amp; Theming Expert,\n  will show you how to:</p>\n<p>Load a template and modify it Customize the look and feel of an app, and see\n  the changes in Architect Export your template for use on Sencha Market or in\n  other applications</p>\n<p>Some working knowledge or experience with Sass/SCSS is recommended, but not\n  required.</p>\n<p><iframe src=\"https://player.vimeo.com/video/107524499\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen=\"\" mozallowfullscreen=\"\" allowfullscreen></iframe></p>\n<p><a href=\"https://vimeo.com/107524499\" target=\"_blank\" rel=\"noopener\">Optimizing Your Current Ext JS\n    Applications for Touch and Tablets</a> from <a href=\"https://vimeo.com/sencha\" target=\"_blank\" rel=\"noopener\">Sencha</a>\n  on <a href=\"https://vimeo.com\" target=\"_blank\" rel=\"noopener\">Vimeo</a>.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>Ever had to reskin UI components to match a visual design or brand standard?\n  The new Themes feature in Architect 3 makes changing the look and feel of\n  your app easier than ever.","more":"</p>\n<p>If you’re familiar with Sass/SCSS, you’ll find this new feature a huge time\n  saver. Architect 3 now allows you to locate and change the different\n  variables and rules that define the visual appearance of the UI components in\n  Ext JS and Sencha Touch.</p>\n<p>In this one-hour webinar, Lee Boonstra, Sencha Trainer &amp; Theming Expert,\n  will show you how to:</p>\n<p>Load a template and modify it Customize the look and feel of an app, and see\n  the changes in Architect Export your template for use on Sencha Market or in\n  other applications</p>\n<p>Some working knowledge or experience with Sass/SCSS is recommended, but not\n  required.</p>\n<p><iframe src=\"https://player.vimeo.com/video/107524499\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen=\"\" mozallowfullscreen=\"\" allowfullscreen></iframe></p>\n<p><a href=\"https://vimeo.com/107524499\" target=\"_blank\" rel=\"noopener\">Optimizing Your Current Ext JS\n    Applications for Touch and Tablets</a> from <a href=\"https://vimeo.com/sencha\" target=\"_blank\" rel=\"noopener\">Sencha</a>\n  on <a href=\"https://vimeo.com\" target=\"_blank\" rel=\"noopener\">Vimeo</a>.</p>"},{"title":"Setup a Django Project with a MySQL database.","date":"2016-03-29T15:50:43.000Z","_content":"\nThis tutorial will show you haow to setup Django with a MySQL database, it requires Python 2.7. \n\n<!--more-->\n\nFirst make sure virtualenv is installed: `$ pip install virtualenv` \n\nTo set up a virtual environment for your project, use: `$ virtualenv myproject` \n\nTo join the environment: `$ source myproject/bin/activate` \n\nInstall Django: `$ pip install Django` \n\nCreate a Django project. `$ django-admin startproject mysite` \n\nBy default Django will make use of sqlite3. But for a production site, MySQL would be better. I’m running XAMPP on Mac OS X, which includes MySQL already, so I will make use of this installation. When you don’t have MySQL on your machine, you can make a fresh install. Download the MySQL Community Server from the official site. Select your platform and download the file. For a Mac OS X, you should have a .dmg file. After clicking on it to install MySQL, you will have to double click on the .pkg file to install it. Next, we need to modify the *$PATH* so that the mysql command lines are available in your terminal. Edit the *~/.bash_profile* file and add the following: `export PATH=$PATH:/usr/local/mysql/bin` Then restart your terminal, and start MySQL: `$ sudo /usr/local/mysql/support-files/mysql.server start` (In my case, I just had to start MySQL from the XAMPP quickstart app.) Next, create a username with a password: `$ mysqladmin -u root password yourpassword` If you need to change the root password use: `$ mysqladmin -u root -p'oldpassword' password newpassword` \n\nNote: there is no space between the -p and the old password. (Since I already have a working user account, and MySQL with PHPMyAdmin running, I could skip this last step) Next, open mysql using the root account, and enter your password. `$ mysql -u root -p` Or if you rather use PhpMyAdmin, login to http://localhost/phpmyadmin And go to the SQL tab. Run the following query, with your database name, and username + password:\n\n``` SQL\nCREATE DATABASE mydatabase;\nCREATE USER 'username'@'localhost' IDENTIFIED BY 'your_password';\nGRANT ALL PRIVILEGES ON mydatabase.* TO 'username'@'localhost';\nFLUSH PRIVILEGES;\n```\n\nYou can check the grants for a given user with: `show grants for 'username'@'localhost';` Once the database is correctly setup, you can install the Python MySQL adapter, from the command-line: `$ pip install mysqlclient` NOTE: The mysqlclient, will refer to a libmysqlclient.x.dylib file on your local machine. It's important that the folder which contains this file (it comes with your MySQL installation), has been added to the system variables / $PATH variables. Open *mysite/settings.py*, edit the databases block:\n\n``` Python\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'mydatabase',\n        'USER': 'username',\n        'PASSWORD': 'your_password',\n        'HOST': '',\n        'PORT': '',\n    }\n}\n```\n\nAlso, make sure the timezone is correctly setup: `TIME_ZONE = 'CET'` Save the file, and run the following commands from the command-line, to use the database in your Python project: `$ python manage.py check` `$ python manage.py migrate` Now you have to create a superuser for your project: `$ python manage.py createsuperuser` Let’s finish our application, and add the administration back-end. Open *mysite/urls.py* and make sure the following lines are present:\n\n\n``` Python\nfrom django.conf.urls import url\nfrom django.contrib import admin\n\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n]\n```\n\nYou can start with running the python server, from the mysite folder: `$ python manage.py runserver` You can test and see if MySQL is correctly working, by logging into the Django admin panel. You could create a new user, this one should be available in the MySQL **auth_user** table. From here, you can make changes to the database tables and properties, so be careful because they will interfere with the structure defined in your Django models. Good luck!","source":"_posts/setup-a-django-project-with-a-mysql-database.md","raw":"---\ntitle: Setup a Django Project with a MySQL database.\ntags:\n  - Django\n  - MySQL\n  - Phyton\ncategories:\n  - Django\ndate: 2016-03-29 17:50:43\n---\n\nThis tutorial will show you haow to setup Django with a MySQL database, it requires Python 2.7. \n\n<!--more-->\n\nFirst make sure virtualenv is installed: `$ pip install virtualenv` \n\nTo set up a virtual environment for your project, use: `$ virtualenv myproject` \n\nTo join the environment: `$ source myproject/bin/activate` \n\nInstall Django: `$ pip install Django` \n\nCreate a Django project. `$ django-admin startproject mysite` \n\nBy default Django will make use of sqlite3. But for a production site, MySQL would be better. I’m running XAMPP on Mac OS X, which includes MySQL already, so I will make use of this installation. When you don’t have MySQL on your machine, you can make a fresh install. Download the MySQL Community Server from the official site. Select your platform and download the file. For a Mac OS X, you should have a .dmg file. After clicking on it to install MySQL, you will have to double click on the .pkg file to install it. Next, we need to modify the *$PATH* so that the mysql command lines are available in your terminal. Edit the *~/.bash_profile* file and add the following: `export PATH=$PATH:/usr/local/mysql/bin` Then restart your terminal, and start MySQL: `$ sudo /usr/local/mysql/support-files/mysql.server start` (In my case, I just had to start MySQL from the XAMPP quickstart app.) Next, create a username with a password: `$ mysqladmin -u root password yourpassword` If you need to change the root password use: `$ mysqladmin -u root -p'oldpassword' password newpassword` \n\nNote: there is no space between the -p and the old password. (Since I already have a working user account, and MySQL with PHPMyAdmin running, I could skip this last step) Next, open mysql using the root account, and enter your password. `$ mysql -u root -p` Or if you rather use PhpMyAdmin, login to http://localhost/phpmyadmin And go to the SQL tab. Run the following query, with your database name, and username + password:\n\n``` SQL\nCREATE DATABASE mydatabase;\nCREATE USER 'username'@'localhost' IDENTIFIED BY 'your_password';\nGRANT ALL PRIVILEGES ON mydatabase.* TO 'username'@'localhost';\nFLUSH PRIVILEGES;\n```\n\nYou can check the grants for a given user with: `show grants for 'username'@'localhost';` Once the database is correctly setup, you can install the Python MySQL adapter, from the command-line: `$ pip install mysqlclient` NOTE: The mysqlclient, will refer to a libmysqlclient.x.dylib file on your local machine. It's important that the folder which contains this file (it comes with your MySQL installation), has been added to the system variables / $PATH variables. Open *mysite/settings.py*, edit the databases block:\n\n``` Python\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'mydatabase',\n        'USER': 'username',\n        'PASSWORD': 'your_password',\n        'HOST': '',\n        'PORT': '',\n    }\n}\n```\n\nAlso, make sure the timezone is correctly setup: `TIME_ZONE = 'CET'` Save the file, and run the following commands from the command-line, to use the database in your Python project: `$ python manage.py check` `$ python manage.py migrate` Now you have to create a superuser for your project: `$ python manage.py createsuperuser` Let’s finish our application, and add the administration back-end. Open *mysite/urls.py* and make sure the following lines are present:\n\n\n``` Python\nfrom django.conf.urls import url\nfrom django.contrib import admin\n\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n]\n```\n\nYou can start with running the python server, from the mysite folder: `$ python manage.py runserver` You can test and see if MySQL is correctly working, by logging into the Django admin panel. You could create a new user, this one should be available in the MySQL **auth_user** table. From here, you can make changes to the database tables and properties, so be careful because they will interfere with the structure defined in your Django models. Good luck!","slug":"setup-a-django-project-with-a-mysql-database","published":1,"updated":"2018-11-30T14:13:34.958Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncob001bkif5d71ze5yc","content":"<p>This tutorial will show you haow to setup Django with a MySQL database, it\n  requires Python 2.7.</p>\n<a id=\"more\"></a>\n<p>First make sure virtualenv is installed: <code>$ pip install virtualenv</code></p>\n<p>To set up a virtual environment for your project, use: <code>$ virtualenv\n    myproject</code></p>\n<p>To join the environment: <code>$ source myproject/bin/activate</code></p>\n<p>Install Django: <code>$ pip install Django</code></p>\n<p>Create a Django project. <code>$ django-admin startproject mysite</code></p>\n<p>By default Django will make use of sqlite3. But for a production site, MySQL\n  would be better. I’m running XAMPP on Mac OS X, which includes MySQL already,\n  so I will make use of this installation. When you don’t have MySQL on your\n  machine, you can make a fresh install. Download the MySQL Community Server\n  from the official site. Select your platform and download the file. For a Mac\n  OS X, you should have a .dmg file. After clicking on it to install MySQL, you\n  will have to double click on the .pkg file to install it. Next, we need to\n  modify the <em>$PATH</em> so that the mysql command lines are available in\n  your terminal. Edit the <em>~/.bash_profile</em> file and add the following:\n  <code>export PATH=$PATH:/usr/local/mysql/bin</code> Then restart your\n  terminal, and start MySQL: <code>$ sudo\n    /usr/local/mysql/support-files/mysql.server start</code> (In my case, I\n  just had to start MySQL from the XAMPP quickstart app.) Next, create a\n  username with a password: <code>$ mysqladmin -u root password yourpassword</code>\n  If you need to change the root password use: <code>$ mysqladmin -u root\n    -p&#39;oldpassword&#39; password newpassword</code></p>\n<p>Note: there is no space between the -p and the old password. (Since I\n  already have a working user account, and MySQL with PHPMyAdmin running, I\n  could skip this last step) Next, open mysql using the root account, and enter\n  your password. <code>$ mysql -u root -p</code> Or if you rather use\n  PhpMyAdmin, login to <a href=\"http://localhost/phpmyadmin\" target=\"_blank\" rel=\"noopener\">http://localhost/phpmyadmin</a>\n  And go to the SQL tab. Run the following query, with your database name, and\n  username + password:</p>\n<figure class=\"highlight sql\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> mydatabase;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">'username'</span>@<span class=\"string\">'localhost'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'your_password'</span>;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> ALL <span class=\"keyword\">PRIVILEGES</span> <span class=\"keyword\">ON</span> mydatabase.* <span class=\"keyword\">TO</span> <span class=\"string\">'username'</span>@<span class=\"string\">'localhost'</span>;</span><br><span class=\"line\"><span class=\"keyword\">FLUSH</span> <span class=\"keyword\">PRIVILEGES</span>;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>You can check the grants for a given user with: <code>show grants for\n    &#39;username&#39;@&#39;localhost&#39;;</code> Once the database is\n  correctly setup, you can install the Python MySQL adapter, from the\n  command-line: <code>$ pip install mysqlclient</code> NOTE: The mysqlclient,\n  will refer to a libmysqlclient.x.dylib file on your local machine. It’s\n  important that the folder which contains this file (it comes with your MySQL\n  installation), has been added to the system variables / $PATH variables. Open\n  <em>mysite/settings.py</em>, edit the databases block:</p>\n<figure class=\"highlight python\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">    <span class=\"string\">'default'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'ENGINE'</span>: <span class=\"string\">'django.db.backends.mysql'</span>,</span><br><span class=\"line\">        <span class=\"string\">'NAME'</span>: <span class=\"string\">'mydatabase'</span>,</span><br><span class=\"line\">        <span class=\"string\">'USER'</span>: <span class=\"string\">'username'</span>,</span><br><span class=\"line\">        <span class=\"string\">'PASSWORD'</span>: <span class=\"string\">'your_password'</span>,</span><br><span class=\"line\">        <span class=\"string\">'HOST'</span>: <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"string\">'PORT'</span>: <span class=\"string\">''</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Also, make sure the timezone is correctly setup: <code>TIME_ZONE =\n    &#39;CET&#39;</code> Save the file, and run the following commands from the\n  command-line, to use the database in your Python project: <code>$ python\n    manage.py check</code> <code>$ python manage.py migrate</code> Now you have\n  to create a superuser for your project: <code>$ python manage.py\n    createsuperuser</code> Let’s finish our application, and add the\n  administration back-end. Open <em>mysite/urls.py</em> and make sure the\n  following lines are present:</p>\n<figure class=\"highlight python\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^admin/'</span>, admin.site.urls),</span><br><span class=\"line\">]</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>You can start with running the python server, from the mysite folder: <code>$\n    python manage.py runserver</code> You can test and see if MySQL is\n  correctly working, by logging into the Django admin panel. You could create a\n  new user, this one should be available in the MySQL <strong>auth_user</strong>\n  table. From here, you can make changes to the database tables and properties,\n  so be careful because they will interfere with the structure defined in your\n  Django models. Good luck!</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>This tutorial will show you haow to setup Django with a MySQL database, it\n  requires Python 2.7.</p>","more":"<p>First make sure virtualenv is installed: <code>$ pip install virtualenv</code></p>\n<p>To set up a virtual environment for your project, use: <code>$ virtualenv\n    myproject</code></p>\n<p>To join the environment: <code>$ source myproject/bin/activate</code></p>\n<p>Install Django: <code>$ pip install Django</code></p>\n<p>Create a Django project. <code>$ django-admin startproject mysite</code></p>\n<p>By default Django will make use of sqlite3. But for a production site, MySQL\n  would be better. I’m running XAMPP on Mac OS X, which includes MySQL already,\n  so I will make use of this installation. When you don’t have MySQL on your\n  machine, you can make a fresh install. Download the MySQL Community Server\n  from the official site. Select your platform and download the file. For a Mac\n  OS X, you should have a .dmg file. After clicking on it to install MySQL, you\n  will have to double click on the .pkg file to install it. Next, we need to\n  modify the <em>$PATH</em> so that the mysql command lines are available in\n  your terminal. Edit the <em>~/.bash_profile</em> file and add the following:\n  <code>export PATH=$PATH:/usr/local/mysql/bin</code> Then restart your\n  terminal, and start MySQL: <code>$ sudo\n    /usr/local/mysql/support-files/mysql.server start</code> (In my case, I\n  just had to start MySQL from the XAMPP quickstart app.) Next, create a\n  username with a password: <code>$ mysqladmin -u root password yourpassword</code>\n  If you need to change the root password use: <code>$ mysqladmin -u root\n    -p&#39;oldpassword&#39; password newpassword</code></p>\n<p>Note: there is no space between the -p and the old password. (Since I\n  already have a working user account, and MySQL with PHPMyAdmin running, I\n  could skip this last step) Next, open mysql using the root account, and enter\n  your password. <code>$ mysql -u root -p</code> Or if you rather use\n  PhpMyAdmin, login to <a href=\"http://localhost/phpmyadmin\" target=\"_blank\" rel=\"noopener\">http://localhost/phpmyadmin</a>\n  And go to the SQL tab. Run the following query, with your database name, and\n  username + password:</p>\n<figure class=\"highlight sql\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> mydatabase;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">'username'</span>@<span class=\"string\">'localhost'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'your_password'</span>;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> ALL <span class=\"keyword\">PRIVILEGES</span> <span class=\"keyword\">ON</span> mydatabase.* <span class=\"keyword\">TO</span> <span class=\"string\">'username'</span>@<span class=\"string\">'localhost'</span>;</span><br><span class=\"line\"><span class=\"keyword\">FLUSH</span> <span class=\"keyword\">PRIVILEGES</span>;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>You can check the grants for a given user with: <code>show grants for\n    &#39;username&#39;@&#39;localhost&#39;;</code> Once the database is\n  correctly setup, you can install the Python MySQL adapter, from the\n  command-line: <code>$ pip install mysqlclient</code> NOTE: The mysqlclient,\n  will refer to a libmysqlclient.x.dylib file on your local machine. It’s\n  important that the folder which contains this file (it comes with your MySQL\n  installation), has been added to the system variables / $PATH variables. Open\n  <em>mysite/settings.py</em>, edit the databases block:</p>\n<figure class=\"highlight python\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">    <span class=\"string\">'default'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'ENGINE'</span>: <span class=\"string\">'django.db.backends.mysql'</span>,</span><br><span class=\"line\">        <span class=\"string\">'NAME'</span>: <span class=\"string\">'mydatabase'</span>,</span><br><span class=\"line\">        <span class=\"string\">'USER'</span>: <span class=\"string\">'username'</span>,</span><br><span class=\"line\">        <span class=\"string\">'PASSWORD'</span>: <span class=\"string\">'your_password'</span>,</span><br><span class=\"line\">        <span class=\"string\">'HOST'</span>: <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"string\">'PORT'</span>: <span class=\"string\">''</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Also, make sure the timezone is correctly setup: <code>TIME_ZONE =\n    &#39;CET&#39;</code> Save the file, and run the following commands from the\n  command-line, to use the database in your Python project: <code>$ python\n    manage.py check</code> <code>$ python manage.py migrate</code> Now you have\n  to create a superuser for your project: <code>$ python manage.py\n    createsuperuser</code> Let’s finish our application, and add the\n  administration back-end. Open <em>mysite/urls.py</em> and make sure the\n  following lines are present:</p>\n<figure class=\"highlight python\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^admin/'</span>, admin.site.urls),</span><br><span class=\"line\">]</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>You can start with running the python server, from the mysite folder: <code>$\n    python manage.py runserver</code> You can test and see if MySQL is\n  correctly working, by logging into the Django admin panel. You could create a\n  new user, this one should be available in the MySQL <strong>auth_user</strong>\n  table. From here, you can make changes to the database tables and properties,\n  so be careful because they will interfere with the structure defined in your\n  Django models. Good luck!</p>"},{"title":"Make your mobile webapp work offline with application cache","date":"2012-11-11T08:33:34.000Z","_content":"\nThis tutorial will help you to put your mobile webapp offline.\n\n<!--more-->\n\n**1. create your cache manifest file**  \ncreate a file yourappname.appcache in your application root.  \nIn the file enter all files you have to cache to make your app working offline.\n\nFor example the app.appcache file looks like this:\n\n```\nCACHE MANIFEST\n#rev2\n\n# Explicitly cached entries\nCACHE:\nindex.html\n\nimg/icon.png\nimg/phone_startup.png\nimg/tablet_startup.png\nimg/main-image.png\n\ncss/ext-touch.css\ncss/default.css\n\njs/ext-touch-debug.js\njs/ext-touch.js\njs/index.js\n\n# Resources that require the user to be online.\nNETWORK:\njs/twitter.js\n\n#If source in inaccessible serve other file. for example: /index.php /index.html\nFALLBACK:\n```\n\n**2. Add your manifest to your application .html file header**  \nIn your html file:\n\n```\n<html manifest=\"app.appcache\">\n  ...\n</html>\n```\n\n\n**3. Create a .htaccess file and add expire configuration for your *.manifest file to your app root.**\n\n```\nExpiresActive On\nExpiresDefault \"access\"\n```\n\n**4. Add type manifest to your apache config (apache.conf / vhost.conf or .htaccess file)**\n\n```\nAddType text/cache-manifest .appcache\n```\n\nThat's it, now your app should work offline. You should know that, as soon as the manifest file fails with caching the files. It stops. That means that the files will not be updated.\n\nUse this code to check/swap cache via code:\n\n``` JavaScript\nvar i = -1;\n\n// Convenience array of status values\nvar cacheStatusValues = [];\ncacheStatusValues[0] = 'uncached';\ncacheStatusValues[1] = 'idle';\ncacheStatusValues[2] = 'checking';\ncacheStatusValues[3] = 'downloading';\ncacheStatusValues[4] = 'updateready';\ncacheStatusValues[5] = 'obsolete';\n\n// Listeners for all possible events\nvar cache = window.applicationCache;\ncache.addEventListener('cached', logEvent, false);\ncache.addEventListener('checking', logEvent, false);\ncache.addEventListener('downloading', logEvent, false);\ncache.addEventListener('error', logEvent, false);\ncache.addEventListener('noupdate', logEvent, false);\ncache.addEventListener('obsolete', logEvent, false);\ncache.addEventListener('progress', logEvent, false);\ncache.addEventListener('updateready', logEvent, false);\n\n// Log every event to the console\nfunction logEvent(e) {\ni=i+1;\nvar online, status, type, message;\nonline = (isOnline()) ? 'yes' : 'no';\nstatus = cacheStatusValues[cache.status];\ntype = e.type;\nmessage = 'online: ' + online;\nmessage+= ', event: ' + type;\nmessage+= ', status: ' + status;\nif (type == 'error' && navigator.onLine) {\nmessage+= ' There was an unknown error, check your Cache Manifest.';\n}\nlog(i + ' ' + message);\n}\n\nfunction log(s) {\n//alert(s);\nconsole.log(s);\n}\n\nfunction isOnline() {\nreturn navigator.onLine;\n}\n\nif (!$('html').attr('manifest')) {\nlog('No Cache Manifest listed on the tag.')\n}\n\n// Swap in newly download files when update is ready\ncache.addEventListener('updateready', function(e){\n// Don't perform \"swap\" if this is the first cache\nif (cacheStatusValues[cache.status] != 'idle') {\ncache.swapCache();\nlog('Swapped/updated the Cache Manifest.');\n}\n}\n, false);\n\n// These two functions check for updates to the manifest file\nfunction checkForUpdates(){\ncache.update();\n}\nfunction autoCheckForUpdates(){\nsetInterval(function(){cache.update()}, 10000);\n}\n```\n\nMore info's, can be found here:  \n[http://developer.apple.com/library/safari/#documentation/iPhone/Conceptual/SafariJSDatabaseGuide/OfflineApplicationCache/OfflineApplicationCache.html](http://developer.apple.com/library/safari/#documentation/iPhone/Conceptual/SafariJSDatabaseGuide/OfflineApplicationCache/OfflineApplicationCache.html)","source":"_posts/make-your-mobile-webapp-work-offline-with-application-cache.md","raw":"---\ntitle: Make your mobile webapp work offline with application cache\ntags:\n  - Application Cache\n  - JavaScript\n  - Offline Apps\ncategories:\n  - App Cache\ndate: 2012-11-11 09:33:34\n---\n\nThis tutorial will help you to put your mobile webapp offline.\n\n<!--more-->\n\n**1. create your cache manifest file**  \ncreate a file yourappname.appcache in your application root.  \nIn the file enter all files you have to cache to make your app working offline.\n\nFor example the app.appcache file looks like this:\n\n```\nCACHE MANIFEST\n#rev2\n\n# Explicitly cached entries\nCACHE:\nindex.html\n\nimg/icon.png\nimg/phone_startup.png\nimg/tablet_startup.png\nimg/main-image.png\n\ncss/ext-touch.css\ncss/default.css\n\njs/ext-touch-debug.js\njs/ext-touch.js\njs/index.js\n\n# Resources that require the user to be online.\nNETWORK:\njs/twitter.js\n\n#If source in inaccessible serve other file. for example: /index.php /index.html\nFALLBACK:\n```\n\n**2. Add your manifest to your application .html file header**  \nIn your html file:\n\n```\n<html manifest=\"app.appcache\">\n  ...\n</html>\n```\n\n\n**3. Create a .htaccess file and add expire configuration for your *.manifest file to your app root.**\n\n```\nExpiresActive On\nExpiresDefault \"access\"\n```\n\n**4. Add type manifest to your apache config (apache.conf / vhost.conf or .htaccess file)**\n\n```\nAddType text/cache-manifest .appcache\n```\n\nThat's it, now your app should work offline. You should know that, as soon as the manifest file fails with caching the files. It stops. That means that the files will not be updated.\n\nUse this code to check/swap cache via code:\n\n``` JavaScript\nvar i = -1;\n\n// Convenience array of status values\nvar cacheStatusValues = [];\ncacheStatusValues[0] = 'uncached';\ncacheStatusValues[1] = 'idle';\ncacheStatusValues[2] = 'checking';\ncacheStatusValues[3] = 'downloading';\ncacheStatusValues[4] = 'updateready';\ncacheStatusValues[5] = 'obsolete';\n\n// Listeners for all possible events\nvar cache = window.applicationCache;\ncache.addEventListener('cached', logEvent, false);\ncache.addEventListener('checking', logEvent, false);\ncache.addEventListener('downloading', logEvent, false);\ncache.addEventListener('error', logEvent, false);\ncache.addEventListener('noupdate', logEvent, false);\ncache.addEventListener('obsolete', logEvent, false);\ncache.addEventListener('progress', logEvent, false);\ncache.addEventListener('updateready', logEvent, false);\n\n// Log every event to the console\nfunction logEvent(e) {\ni=i+1;\nvar online, status, type, message;\nonline = (isOnline()) ? 'yes' : 'no';\nstatus = cacheStatusValues[cache.status];\ntype = e.type;\nmessage = 'online: ' + online;\nmessage+= ', event: ' + type;\nmessage+= ', status: ' + status;\nif (type == 'error' && navigator.onLine) {\nmessage+= ' There was an unknown error, check your Cache Manifest.';\n}\nlog(i + ' ' + message);\n}\n\nfunction log(s) {\n//alert(s);\nconsole.log(s);\n}\n\nfunction isOnline() {\nreturn navigator.onLine;\n}\n\nif (!$('html').attr('manifest')) {\nlog('No Cache Manifest listed on the tag.')\n}\n\n// Swap in newly download files when update is ready\ncache.addEventListener('updateready', function(e){\n// Don't perform \"swap\" if this is the first cache\nif (cacheStatusValues[cache.status] != 'idle') {\ncache.swapCache();\nlog('Swapped/updated the Cache Manifest.');\n}\n}\n, false);\n\n// These two functions check for updates to the manifest file\nfunction checkForUpdates(){\ncache.update();\n}\nfunction autoCheckForUpdates(){\nsetInterval(function(){cache.update()}, 10000);\n}\n```\n\nMore info's, can be found here:  \n[http://developer.apple.com/library/safari/#documentation/iPhone/Conceptual/SafariJSDatabaseGuide/OfflineApplicationCache/OfflineApplicationCache.html](http://developer.apple.com/library/safari/#documentation/iPhone/Conceptual/SafariJSDatabaseGuide/OfflineApplicationCache/OfflineApplicationCache.html)","slug":"make-your-mobile-webapp-work-offline-with-application-cache","published":1,"updated":"2018-11-30T14:05:54.554Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncoc001gkif5mz7emql4","content":"<p>This tutorial will help you to put your mobile webapp offline.</p>\n<a id=\"more\"></a>\n<p><strong>1. create your cache manifest file</strong><br>create a file\n  yourappname.appcache in your application root.<br>In the file enter all files\n  you have to cache to make your app working offline.</p>\n<p>For example the app.appcache file looks like this:</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">CACHE MANIFEST</span><br><span class=\"line\">#rev2</span><br><span class=\"line\"></span><br><span class=\"line\"># Explicitly cached entries</span><br><span class=\"line\">CACHE:</span><br><span class=\"line\">index.html</span><br><span class=\"line\"></span><br><span class=\"line\">img/icon.png</span><br><span class=\"line\">img/phone_startup.png</span><br><span class=\"line\">img/tablet_startup.png</span><br><span class=\"line\">img/main-image.png</span><br><span class=\"line\"></span><br><span class=\"line\">css/ext-touch.css</span><br><span class=\"line\">css/default.css</span><br><span class=\"line\"></span><br><span class=\"line\">js/ext-touch-debug.js</span><br><span class=\"line\">js/ext-touch.js</span><br><span class=\"line\">js/index.js</span><br><span class=\"line\"></span><br><span class=\"line\"># Resources that require the user to be online.</span><br><span class=\"line\">NETWORK:</span><br><span class=\"line\">js/twitter.js</span><br><span class=\"line\"></span><br><span class=\"line\">#If source in inaccessible serve other file. for example: /index.php /index.html</span><br><span class=\"line\">FALLBACK:</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p><strong>2. Add your manifest to your application .html file header</strong><br>In\n  your html file:</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">&lt;html manifest=&quot;app.appcache&quot;&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p><strong>3. Create a .htaccess file and add expire configuration for your\n    *.manifest file to your app root.</strong></p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">ExpiresActive On</span><br><span class=\"line\">ExpiresDefault &quot;access&quot;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p><strong>4. Add type manifest to your apache config (apache.conf / vhost.conf\n    or .htaccess file)</strong></p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">AddType text/cache-manifest .appcache</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>That’s it, now your app should work offline. You should know that, as soon\n  as the manifest file fails with caching the files. It stops. That means that\n  the files will not be updated.</p>\n<p>Use this code to check/swap cache via code:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Convenience array of status values</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cacheStatusValues = [];</span><br><span class=\"line\">cacheStatusValues[<span class=\"number\">0</span>] = <span class=\"string\">'uncached'</span>;</span><br><span class=\"line\">cacheStatusValues[<span class=\"number\">1</span>] = <span class=\"string\">'idle'</span>;</span><br><span class=\"line\">cacheStatusValues[<span class=\"number\">2</span>] = <span class=\"string\">'checking'</span>;</span><br><span class=\"line\">cacheStatusValues[<span class=\"number\">3</span>] = <span class=\"string\">'downloading'</span>;</span><br><span class=\"line\">cacheStatusValues[<span class=\"number\">4</span>] = <span class=\"string\">'updateready'</span>;</span><br><span class=\"line\">cacheStatusValues[<span class=\"number\">5</span>] = <span class=\"string\">'obsolete'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Listeners for all possible events</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cache = <span class=\"built_in\">window</span>.applicationCache;</span><br><span class=\"line\">cache.addEventListener(<span class=\"string\">'cached'</span>, logEvent, <span class=\"literal\">false</span>);</span><br><span class=\"line\">cache.addEventListener(<span class=\"string\">'checking'</span>, logEvent, <span class=\"literal\">false</span>);</span><br><span class=\"line\">cache.addEventListener(<span class=\"string\">'downloading'</span>, logEvent, <span class=\"literal\">false</span>);</span><br><span class=\"line\">cache.addEventListener(<span class=\"string\">'error'</span>, logEvent, <span class=\"literal\">false</span>);</span><br><span class=\"line\">cache.addEventListener(<span class=\"string\">'noupdate'</span>, logEvent, <span class=\"literal\">false</span>);</span><br><span class=\"line\">cache.addEventListener(<span class=\"string\">'obsolete'</span>, logEvent, <span class=\"literal\">false</span>);</span><br><span class=\"line\">cache.addEventListener(<span class=\"string\">'progress'</span>, logEvent, <span class=\"literal\">false</span>);</span><br><span class=\"line\">cache.addEventListener(<span class=\"string\">'updateready'</span>, logEvent, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Log every event to the console</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logEvent</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">i=i+<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> online, status, type, message;</span><br><span class=\"line\">online = (isOnline()) ? <span class=\"string\">'yes'</span> : <span class=\"string\">'no'</span>;</span><br><span class=\"line\">status = cacheStatusValues[cache.status];</span><br><span class=\"line\">type = e.type;</span><br><span class=\"line\">message = <span class=\"string\">'online: '</span> + online;</span><br><span class=\"line\">message+= <span class=\"string\">', event: '</span> + type;</span><br><span class=\"line\">message+= <span class=\"string\">', status: '</span> + status;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (type == <span class=\"string\">'error'</span> &amp;&amp; navigator.onLine) &#123;</span><br><span class=\"line\">message+= <span class=\"string\">' There was an unknown error, check your Cache Manifest.'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">log(i + <span class=\"string\">' '</span> + message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//alert(s);</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isOnline</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> navigator.onLine;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!$(<span class=\"string\">'html'</span>).attr(<span class=\"string\">'manifest'</span>)) &#123;</span><br><span class=\"line\">log(<span class=\"string\">'No Cache Manifest listed on the tag.'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Swap in newly download files when update is ready</span></span><br><span class=\"line\">cache.addEventListener(<span class=\"string\">'updateready'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// Don't perform \"swap\" if this is the first cache</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (cacheStatusValues[cache.status] != <span class=\"string\">'idle'</span>) &#123;</span><br><span class=\"line\">cache.swapCache();</span><br><span class=\"line\">log(<span class=\"string\">'Swapped/updated the Cache Manifest.'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// These two functions check for updates to the manifest file</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkForUpdates</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">cache.update();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">autoCheckForUpdates</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;cache.update()&#125;, <span class=\"number\">10000</span>);</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>More info’s, can be found here:<br><a href=\"http://developer.apple.com/library/safari/#documentation/iPhone/Conceptual/SafariJSDatabaseGuide/OfflineApplicationCache/OfflineApplicationCache.html\" target=\"_blank\" rel=\"noopener\">http://developer.apple.com/library/safari/#documentation/iPhone/Conceptual/SafariJSDatabaseGuide/OfflineApplicationCache/OfflineApplicationCache.html</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>This tutorial will help you to put your mobile webapp offline.</p>","more":"<p><strong>1. create your cache manifest file</strong><br>create a file\n  yourappname.appcache in your application root.<br>In the file enter all files\n  you have to cache to make your app working offline.</p>\n<p>For example the app.appcache file looks like this:</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">CACHE MANIFEST</span><br><span class=\"line\">#rev2</span><br><span class=\"line\"></span><br><span class=\"line\"># Explicitly cached entries</span><br><span class=\"line\">CACHE:</span><br><span class=\"line\">index.html</span><br><span class=\"line\"></span><br><span class=\"line\">img/icon.png</span><br><span class=\"line\">img/phone_startup.png</span><br><span class=\"line\">img/tablet_startup.png</span><br><span class=\"line\">img/main-image.png</span><br><span class=\"line\"></span><br><span class=\"line\">css/ext-touch.css</span><br><span class=\"line\">css/default.css</span><br><span class=\"line\"></span><br><span class=\"line\">js/ext-touch-debug.js</span><br><span class=\"line\">js/ext-touch.js</span><br><span class=\"line\">js/index.js</span><br><span class=\"line\"></span><br><span class=\"line\"># Resources that require the user to be online.</span><br><span class=\"line\">NETWORK:</span><br><span class=\"line\">js/twitter.js</span><br><span class=\"line\"></span><br><span class=\"line\">#If source in inaccessible serve other file. for example: /index.php /index.html</span><br><span class=\"line\">FALLBACK:</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p><strong>2. Add your manifest to your application .html file header</strong><br>In\n  your html file:</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">&lt;html manifest=&quot;app.appcache&quot;&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p><strong>3. Create a .htaccess file and add expire configuration for your\n    *.manifest file to your app root.</strong></p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">ExpiresActive On</span><br><span class=\"line\">ExpiresDefault &quot;access&quot;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p><strong>4. Add type manifest to your apache config (apache.conf / vhost.conf\n    or .htaccess file)</strong></p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">AddType text/cache-manifest .appcache</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>That’s it, now your app should work offline. You should know that, as soon\n  as the manifest file fails with caching the files. It stops. That means that\n  the files will not be updated.</p>\n<p>Use this code to check/swap cache via code:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Convenience array of status values</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cacheStatusValues = [];</span><br><span class=\"line\">cacheStatusValues[<span class=\"number\">0</span>] = <span class=\"string\">'uncached'</span>;</span><br><span class=\"line\">cacheStatusValues[<span class=\"number\">1</span>] = <span class=\"string\">'idle'</span>;</span><br><span class=\"line\">cacheStatusValues[<span class=\"number\">2</span>] = <span class=\"string\">'checking'</span>;</span><br><span class=\"line\">cacheStatusValues[<span class=\"number\">3</span>] = <span class=\"string\">'downloading'</span>;</span><br><span class=\"line\">cacheStatusValues[<span class=\"number\">4</span>] = <span class=\"string\">'updateready'</span>;</span><br><span class=\"line\">cacheStatusValues[<span class=\"number\">5</span>] = <span class=\"string\">'obsolete'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Listeners for all possible events</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cache = <span class=\"built_in\">window</span>.applicationCache;</span><br><span class=\"line\">cache.addEventListener(<span class=\"string\">'cached'</span>, logEvent, <span class=\"literal\">false</span>);</span><br><span class=\"line\">cache.addEventListener(<span class=\"string\">'checking'</span>, logEvent, <span class=\"literal\">false</span>);</span><br><span class=\"line\">cache.addEventListener(<span class=\"string\">'downloading'</span>, logEvent, <span class=\"literal\">false</span>);</span><br><span class=\"line\">cache.addEventListener(<span class=\"string\">'error'</span>, logEvent, <span class=\"literal\">false</span>);</span><br><span class=\"line\">cache.addEventListener(<span class=\"string\">'noupdate'</span>, logEvent, <span class=\"literal\">false</span>);</span><br><span class=\"line\">cache.addEventListener(<span class=\"string\">'obsolete'</span>, logEvent, <span class=\"literal\">false</span>);</span><br><span class=\"line\">cache.addEventListener(<span class=\"string\">'progress'</span>, logEvent, <span class=\"literal\">false</span>);</span><br><span class=\"line\">cache.addEventListener(<span class=\"string\">'updateready'</span>, logEvent, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Log every event to the console</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logEvent</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">i=i+<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> online, status, type, message;</span><br><span class=\"line\">online = (isOnline()) ? <span class=\"string\">'yes'</span> : <span class=\"string\">'no'</span>;</span><br><span class=\"line\">status = cacheStatusValues[cache.status];</span><br><span class=\"line\">type = e.type;</span><br><span class=\"line\">message = <span class=\"string\">'online: '</span> + online;</span><br><span class=\"line\">message+= <span class=\"string\">', event: '</span> + type;</span><br><span class=\"line\">message+= <span class=\"string\">', status: '</span> + status;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (type == <span class=\"string\">'error'</span> &amp;&amp; navigator.onLine) &#123;</span><br><span class=\"line\">message+= <span class=\"string\">' There was an unknown error, check your Cache Manifest.'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">log(i + <span class=\"string\">' '</span> + message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//alert(s);</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isOnline</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> navigator.onLine;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!$(<span class=\"string\">'html'</span>).attr(<span class=\"string\">'manifest'</span>)) &#123;</span><br><span class=\"line\">log(<span class=\"string\">'No Cache Manifest listed on the tag.'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Swap in newly download files when update is ready</span></span><br><span class=\"line\">cache.addEventListener(<span class=\"string\">'updateready'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// Don't perform \"swap\" if this is the first cache</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (cacheStatusValues[cache.status] != <span class=\"string\">'idle'</span>) &#123;</span><br><span class=\"line\">cache.swapCache();</span><br><span class=\"line\">log(<span class=\"string\">'Swapped/updated the Cache Manifest.'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// These two functions check for updates to the manifest file</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkForUpdates</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">cache.update();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">autoCheckForUpdates</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;cache.update()&#125;, <span class=\"number\">10000</span>);</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>More info’s, can be found here:<br><a href=\"http://developer.apple.com/library/safari/#documentation/iPhone/Conceptual/SafariJSDatabaseGuide/OfflineApplicationCache/OfflineApplicationCache.html\" target=\"_blank\" rel=\"noopener\">http://developer.apple.com/library/safari/#documentation/iPhone/Conceptual/SafariJSDatabaseGuide/OfflineApplicationCache/OfflineApplicationCache.html</a></p>"},{"title":"Tutorial: Full-stack JavaScript for the Enterprise. Getting started with: Ext JS, Node.js, Express, MongoDB and Docker.  (2)","date":"2016-08-17T14:30:31.000Z","_content":"\n*This is part II of the tutorial, and covers: JavaScript on the server.* \n\n<!--more-->\n\n# Node.js: Setup the back-end with Express 4 \n\nNow that the client Sencha app is ready to be served, we need to create our server to display the Sencha app in the browser. What you see in the **client** folder, those are the development files (classes), which you use on your workstation. We are going to use *Express.js* plus a couple of other modules to make our server app, serve pages, so let’s install all those. (First navigate out the **client** folder, then..) `client $ cd ../server/ $ npm install --save express` \n\nNow let’s create the following folder structure: \n\n``` bash \n$ mkdir -p config \n$ mkdir -p components/errors \n$ mkdir views \n```\n\nAnd the following files: \n\n``` bash \n$ touch app.js \n$ touch routes.js \n$ touch config/index.js \n$ touch config/express.js \n$ touch components/errors/index.js \n$ touch views/404.html \n```\n\nLet’s look into all the files: \n{% gist a8f7b74cafeed5e84c92102d29978161 %}\n\nIn **server/routes.js** we define some configuration for the routes, like 404 and other routes. The file looks like this: \n{% gist 85df49e74ee8824f07de5e67a1be2cc6 %}\n\nIn **server/config/index.js** we define some common configuration for the server: \n{% gist 64abbeb88d6bc9667b85dc7695a0e3db %}\n\nAnd in **server/config/express.js** we setup Express to serve our files. Note that we point here to the production build of the Sencha app. \n{% gist 77f173638941383f1d9ed4873e226c8c %}\n\nIn **server/components/errors/index.js** we define app errors like how 404 should behave and what to respond with. \n{% gist 5725786617a7348cf0505255c95a9f7a %}\n\nThe **server/views/index.html** view: \n`html Webservice` \n\nFinally the **server/views/404.html** view: `\n`404 Not Found`\n\nNow we are ready to start the server: \n``` bash \n$ node app.js \nExpress server listening on 8080, in development mode. \n```\n\nYou can now open your browser, the Node server, should serve the production version of your Sencha app. [http://localhost:8080](http://localhost:8080). Before we move on, let’s create a very simple API route, which outputs json data. We will tweak the Sencha client app, so it retrieves the data from Node. \n\n``` bash \n$ mkdir libs \n$ cd libs \n$ mkdir users \n$ cd users \n$ touch index.js \n```\n\nHere’s the contents for the **users/index.js** file. Like I mentioned before, it doesn’t do anything special then outputting data. But this could be a great point to start for you. \n{% gist 890fa9ea7dc15c3cde87a20706436d66 %}\n\n Once you saved this file. We need to create a new route: [http://localhost:8080/users/](http://localhost:8080/users/). We will be able to test this route, when entered in the browser. Node.js needs to be (`node app.js`). You can create this file, by opening **server/routes.js** and add the following route:\n\n``` JavaScript\n  app.route('/users')\n    .get(function (req, res) {\n        var us = new UsersService();\n        us.getData(req, res);\n    });\n```\n\nWant to checkout all my code? I hosted it on Github: [https://github.com/savelee/docker-node-server](https://github.com/savelee/docker-node-server) By the end of this part of the tutorial, you will have a working JavaScript server, created with Node.js and Express. The next part of this tutorial will cover the setup of a MongoDB NoSQL database. \n\n## Read the next part \n\n[Part 3](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3/)\n\n*   [Quick link to Part 1.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1)\n*   [Quick link to Part 2.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2)\n*   [Quick link to Part 3.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3)\n*   [Quick link to Part 4.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4)\n*   [Quick link to Part 5.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5)\n*   [Quick link to Part 6.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6)\n*   [Quick link to Part 7.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7)\n*   [Quick link to Part 8.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8)","source":"_posts/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2.md","raw":"---\ntitle: >-\n  Tutorial: Full-stack JavaScript for the Enterprise. Getting started with: Ext\n  JS, Node.js, Express, MongoDB and Docker.  (2)\ntags:\n  - Docker\n  - Node.js\n  - MongoDB\n  - Ext JS\ncategories:\n  - Containers\ndate: 2016-08-17 16:30:31\n---\n\n*This is part II of the tutorial, and covers: JavaScript on the server.* \n\n<!--more-->\n\n# Node.js: Setup the back-end with Express 4 \n\nNow that the client Sencha app is ready to be served, we need to create our server to display the Sencha app in the browser. What you see in the **client** folder, those are the development files (classes), which you use on your workstation. We are going to use *Express.js* plus a couple of other modules to make our server app, serve pages, so let’s install all those. (First navigate out the **client** folder, then..) `client $ cd ../server/ $ npm install --save express` \n\nNow let’s create the following folder structure: \n\n``` bash \n$ mkdir -p config \n$ mkdir -p components/errors \n$ mkdir views \n```\n\nAnd the following files: \n\n``` bash \n$ touch app.js \n$ touch routes.js \n$ touch config/index.js \n$ touch config/express.js \n$ touch components/errors/index.js \n$ touch views/404.html \n```\n\nLet’s look into all the files: \n{% gist a8f7b74cafeed5e84c92102d29978161 %}\n\nIn **server/routes.js** we define some configuration for the routes, like 404 and other routes. The file looks like this: \n{% gist 85df49e74ee8824f07de5e67a1be2cc6 %}\n\nIn **server/config/index.js** we define some common configuration for the server: \n{% gist 64abbeb88d6bc9667b85dc7695a0e3db %}\n\nAnd in **server/config/express.js** we setup Express to serve our files. Note that we point here to the production build of the Sencha app. \n{% gist 77f173638941383f1d9ed4873e226c8c %}\n\nIn **server/components/errors/index.js** we define app errors like how 404 should behave and what to respond with. \n{% gist 5725786617a7348cf0505255c95a9f7a %}\n\nThe **server/views/index.html** view: \n`html Webservice` \n\nFinally the **server/views/404.html** view: `\n`404 Not Found`\n\nNow we are ready to start the server: \n``` bash \n$ node app.js \nExpress server listening on 8080, in development mode. \n```\n\nYou can now open your browser, the Node server, should serve the production version of your Sencha app. [http://localhost:8080](http://localhost:8080). Before we move on, let’s create a very simple API route, which outputs json data. We will tweak the Sencha client app, so it retrieves the data from Node. \n\n``` bash \n$ mkdir libs \n$ cd libs \n$ mkdir users \n$ cd users \n$ touch index.js \n```\n\nHere’s the contents for the **users/index.js** file. Like I mentioned before, it doesn’t do anything special then outputting data. But this could be a great point to start for you. \n{% gist 890fa9ea7dc15c3cde87a20706436d66 %}\n\n Once you saved this file. We need to create a new route: [http://localhost:8080/users/](http://localhost:8080/users/). We will be able to test this route, when entered in the browser. Node.js needs to be (`node app.js`). You can create this file, by opening **server/routes.js** and add the following route:\n\n``` JavaScript\n  app.route('/users')\n    .get(function (req, res) {\n        var us = new UsersService();\n        us.getData(req, res);\n    });\n```\n\nWant to checkout all my code? I hosted it on Github: [https://github.com/savelee/docker-node-server](https://github.com/savelee/docker-node-server) By the end of this part of the tutorial, you will have a working JavaScript server, created with Node.js and Express. The next part of this tutorial will cover the setup of a MongoDB NoSQL database. \n\n## Read the next part \n\n[Part 3](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3/)\n\n*   [Quick link to Part 1.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1)\n*   [Quick link to Part 2.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2)\n*   [Quick link to Part 3.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3)\n*   [Quick link to Part 4.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4)\n*   [Quick link to Part 5.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5)\n*   [Quick link to Part 6.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6)\n*   [Quick link to Part 7.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7)\n*   [Quick link to Part 8.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8)","slug":"tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2","published":1,"updated":"2018-11-30T13:36:01.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncod001ikif5mdzhbhmt","content":"<p><em>This is part II of the tutorial, and covers: JavaScript on the server.</em></p>\n<a id=\"more\"></a>\n<h1 id=\"Node-js-Setup-the-back-end-with-Express-4\"><a href=\"#Node-js-Setup-the-back-end-with-Express-4\" class=\"headerlink\" title=\"Node.js: Setup the back-end with Express 4\"></a>Node.js:\n  Setup the back-end with Express 4</h1>\n<p>Now that the client Sencha app is ready to be served, we need to create our\n  server to display the Sencha app in the browser. What you see in the <strong>client</strong>\n  folder, those are the development files (classes), which you use on your\n  workstation. We are going to use <em>Express.js</em> plus a couple of other\n  modules to make our server app, serve pages, so let’s install all those.\n  (First navigate out the <strong>client</strong> folder, then..) <code>client\n    $ cd ../server/ $ npm install --save express</code></p>\n<p>Now let’s create the following folder structure:</p>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ mkdir -p config </span><br><span class=\"line\">$ mkdir -p components/errors </span><br><span class=\"line\">$ mkdir views</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>And the following files:</p>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ touch app.js </span><br><span class=\"line\">$ touch routes.js </span><br><span class=\"line\">$ touch config/index.js </span><br><span class=\"line\">$ touch config/express.js </span><br><span class=\"line\">$ touch components/errors/index.js </span><br><span class=\"line\">$ touch views/404.html</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Let’s look into all the files:<script src=\"//gist.github.com/a8f7b74cafeed5e84c92102d29978161.js\"></script>\n</p>\n<p>In <strong>server/routes.js</strong> we define some configuration for the\n  routes, like 404 and other routes. The file looks like this:<script src=\"//gist.github.com/85df49e74ee8824f07de5e67a1be2cc6.js\"></script>\n</p>\n<p>In <strong>server/config/index.js</strong> we define some common\n  configuration for the server:<script src=\"//gist.github.com/64abbeb88d6bc9667b85dc7695a0e3db.js\"></script>\n</p>\n<p>And in <strong>server/config/express.js</strong> we setup Express to serve\n  our files. Note that we point here to the production build of the Sencha app.<script src=\"//gist.github.com/77f173638941383f1d9ed4873e226c8c.js\"></script>\n</p>\n<p>In <strong>server/components/errors/index.js</strong> we define app errors\n  like how 404 should behave and what to respond with.<script src=\"//gist.github.com/5725786617a7348cf0505255c95a9f7a.js\"></script>\n</p>\n<p>The <strong>server/views/index.html</strong> view: <code>html Webservice</code></p>\n<p>Finally the <strong>server/views/404.html</strong> view: <code></code>404\n  Not Found`</p>\n<p>Now we are ready to start the server:</p>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ node app.js </span><br><span class=\"line\">Express server listening on 8080, <span class=\"keyword\">in</span> development mode.</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p></p>\n<p>You can now open your browser, the Node server, should serve the production\n  version of your Sencha app. <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a>.\n  Before we move on, let’s create a very simple API route, which outputs json\n  data. We will tweak the Sencha client app, so it retrieves the data from\n  Node.</p>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ mkdir libs </span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> libs </span><br><span class=\"line\">$ mkdir users </span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> users </span><br><span class=\"line\">$ touch index.js</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Here’s the contents for the <strong>users/index.js</strong> file. Like I\n  mentioned before, it doesn’t do anything special then outputting data. But\n  this could be a great point to start for you.<script src=\"//gist.github.com/890fa9ea7dc15c3cde87a20706436d66.js\"></script>\n</p>\n<p>Once you saved this file. We need to create a new route: <a href=\"http://localhost:8080/users/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/users/</a>.\n  We will be able to test this route, when entered in the browser. Node.js\n  needs to be (<code>node app.js</code>). You can create this file, by opening\n  <strong>server/routes.js</strong> and add the following route:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">app.route(<span class=\"string\">'/users'</span>)</span><br><span class=\"line\">  .get(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> us = <span class=\"keyword\">new</span> UsersService();</span><br><span class=\"line\">      us.getData(req, res);</span><br><span class=\"line\">  &#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Want to checkout all my code? I hosted it on Github: <a href=\"https://github.com/savelee/docker-node-server\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-node-server</a>\n  By the end of this part of the tutorial, you will have a working JavaScript\n  server, created with Node.js and Express. The next part of this tutorial will\n  cover the setup of a MongoDB NoSQL database.</p>\n<h2 id=\"Read-the-next-part\"><a href=\"#Read-the-next-part\" class=\"headerlink\" title=\"Read the next part\"></a>Read\n  the next part</h2>\n<p><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3/\">Part\n    3</a></p>\n<ul>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1\">Quick\n      link to Part 1.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2\">Quick\n      link to Part 2.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3\">Quick\n      link to Part 3.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4\">Quick\n      link to Part 4.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5\">Quick\n      link to Part 5.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6\">Quick\n      link to Part 6.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7\">Quick\n      link to Part 7.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8\">Quick\n      link to Part 8.</a></li>\n</ul>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p><em>This is part II of the tutorial, and covers: JavaScript on the server.</em></p>","more":"<h1 id=\"Node-js-Setup-the-back-end-with-Express-4\"><a href=\"#Node-js-Setup-the-back-end-with-Express-4\" class=\"headerlink\" title=\"Node.js: Setup the back-end with Express 4\"></a>Node.js:\n  Setup the back-end with Express 4</h1>\n<p>Now that the client Sencha app is ready to be served, we need to create our\n  server to display the Sencha app in the browser. What you see in the <strong>client</strong>\n  folder, those are the development files (classes), which you use on your\n  workstation. We are going to use <em>Express.js</em> plus a couple of other\n  modules to make our server app, serve pages, so let’s install all those.\n  (First navigate out the <strong>client</strong> folder, then..) <code>client\n    $ cd ../server/ $ npm install --save express</code></p>\n<p>Now let’s create the following folder structure:</p>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ mkdir -p config </span><br><span class=\"line\">$ mkdir -p components/errors </span><br><span class=\"line\">$ mkdir views</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>And the following files:</p>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ touch app.js </span><br><span class=\"line\">$ touch routes.js </span><br><span class=\"line\">$ touch config/index.js </span><br><span class=\"line\">$ touch config/express.js </span><br><span class=\"line\">$ touch components/errors/index.js </span><br><span class=\"line\">$ touch views/404.html</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Let’s look into all the files:<script src=\"//gist.github.com/a8f7b74cafeed5e84c92102d29978161.js\"></script>\n</p>\n<p>In <strong>server/routes.js</strong> we define some configuration for the\n  routes, like 404 and other routes. The file looks like this:<script src=\"//gist.github.com/85df49e74ee8824f07de5e67a1be2cc6.js\"></script>\n</p>\n<p>In <strong>server/config/index.js</strong> we define some common\n  configuration for the server:<script src=\"//gist.github.com/64abbeb88d6bc9667b85dc7695a0e3db.js\"></script>\n</p>\n<p>And in <strong>server/config/express.js</strong> we setup Express to serve\n  our files. Note that we point here to the production build of the Sencha app.<script src=\"//gist.github.com/77f173638941383f1d9ed4873e226c8c.js\"></script>\n</p>\n<p>In <strong>server/components/errors/index.js</strong> we define app errors\n  like how 404 should behave and what to respond with.<script src=\"//gist.github.com/5725786617a7348cf0505255c95a9f7a.js\"></script>\n</p>\n<p>The <strong>server/views/index.html</strong> view: <code>html Webservice</code></p>\n<p>Finally the <strong>server/views/404.html</strong> view: <code></code>404\n  Not Found`</p>\n<p>Now we are ready to start the server:</p>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ node app.js </span><br><span class=\"line\">Express server listening on 8080, <span class=\"keyword\">in</span> development mode.</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p></p>\n<p>You can now open your browser, the Node server, should serve the production\n  version of your Sencha app. <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a>.\n  Before we move on, let’s create a very simple API route, which outputs json\n  data. We will tweak the Sencha client app, so it retrieves the data from\n  Node.</p>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ mkdir libs </span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> libs </span><br><span class=\"line\">$ mkdir users </span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> users </span><br><span class=\"line\">$ touch index.js</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Here’s the contents for the <strong>users/index.js</strong> file. Like I\n  mentioned before, it doesn’t do anything special then outputting data. But\n  this could be a great point to start for you.<script src=\"//gist.github.com/890fa9ea7dc15c3cde87a20706436d66.js\"></script>\n</p>\n<p>Once you saved this file. We need to create a new route: <a href=\"http://localhost:8080/users/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/users/</a>.\n  We will be able to test this route, when entered in the browser. Node.js\n  needs to be (<code>node app.js</code>). You can create this file, by opening\n  <strong>server/routes.js</strong> and add the following route:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">app.route(<span class=\"string\">'/users'</span>)</span><br><span class=\"line\">  .get(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> us = <span class=\"keyword\">new</span> UsersService();</span><br><span class=\"line\">      us.getData(req, res);</span><br><span class=\"line\">  &#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Want to checkout all my code? I hosted it on Github: <a href=\"https://github.com/savelee/docker-node-server\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-node-server</a>\n  By the end of this part of the tutorial, you will have a working JavaScript\n  server, created with Node.js and Express. The next part of this tutorial will\n  cover the setup of a MongoDB NoSQL database.</p>\n<h2 id=\"Read-the-next-part\"><a href=\"#Read-the-next-part\" class=\"headerlink\" title=\"Read the next part\"></a>Read\n  the next part</h2>\n<p><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3/\">Part\n    3</a></p>\n<ul>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1\">Quick\n      link to Part 1.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2\">Quick\n      link to Part 2.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3\">Quick\n      link to Part 3.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4\">Quick\n      link to Part 4.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5\">Quick\n      link to Part 5.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6\">Quick\n      link to Part 6.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7\">Quick\n      link to Part 7.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8\">Quick\n      link to Part 8.</a></li>\n</ul>"},{"title":"Optimizing Your Current Ext JS Applications for Touch and Tablets","description":"Re-skinning Your Apps Just Got Easier with Sencha Architect 3","date":"2014-08-08T07:16:41.000Z","_content":"\nWould you like your Ext JS application to support Touch and Tablet devices, but don't know where to start?\n\n<!--more-->\n\nPlease join us as Lee Boonstra, Technical Trainer at Sencha shares best practices and techniques for optimizing your existing Ext JS applications with the new touch gestures introduced in Ext JS 5.\n\nWhat you'll learn...\n\nThe difference between Ext JS 5 and Sencha Touch\nImplementing new Ext JS 5 Touch features\nWhat to consider before upgrading to Ext JS 5\n\nWhile there are so many reasons to upgrade your existing Ext JS 4 apps to Ext JS 5, by far, the most exciting is the ability to add support for gestures and events that make your existing app touch-friendly without needing to do a complete rewrite.\n\n<iframe src=\"https://player.vimeo.com/video/81745175\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n<p><a href=\"https://vimeo.com/81745175\">Re-skinning Your Apps Just Got Easier with Sencha Architect 3</a> from <a href=\"https://vimeo.com/sencha\">Sencha</a> on <a href=\"https://vimeo.com\">Vimeo</a>.</p>\n","source":"_posts/optimizing-extjs.md","raw":"---\ntitle: Optimizing Your Current Ext JS Applications for Touch and Tablets\ndescription: Re-skinning Your Apps Just Got Easier with Sencha Architect 3\ntags:\n  - Sencha Architect\ncategories:\n  - Videos\ndate: 2014-08-08 09:16:41\n---\n\nWould you like your Ext JS application to support Touch and Tablet devices, but don't know where to start?\n\n<!--more-->\n\nPlease join us as Lee Boonstra, Technical Trainer at Sencha shares best practices and techniques for optimizing your existing Ext JS applications with the new touch gestures introduced in Ext JS 5.\n\nWhat you'll learn...\n\nThe difference between Ext JS 5 and Sencha Touch\nImplementing new Ext JS 5 Touch features\nWhat to consider before upgrading to Ext JS 5\n\nWhile there are so many reasons to upgrade your existing Ext JS 4 apps to Ext JS 5, by far, the most exciting is the ability to add support for gestures and events that make your existing app touch-friendly without needing to do a complete rewrite.\n\n<iframe src=\"https://player.vimeo.com/video/81745175\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n<p><a href=\"https://vimeo.com/81745175\">Re-skinning Your Apps Just Got Easier with Sencha Architect 3</a> from <a href=\"https://vimeo.com/sencha\">Sencha</a> on <a href=\"https://vimeo.com\">Vimeo</a>.</p>\n","slug":"optimizing-extjs","published":1,"updated":"2018-11-25T12:55:38.002Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncof001nkif5uiljlj5l","content":"<p>Would you like your Ext JS application to support Touch and Tablet devices,\n  but don’t know where to start?</p>\n<a id=\"more\"></a>\n<p>Please join us as Lee Boonstra, Technical Trainer at Sencha shares best\n  practices and techniques for optimizing your existing Ext JS applications\n  with the new touch gestures introduced in Ext JS 5.</p>\n<p>What you’ll learn…</p>\n<p>The difference between Ext JS 5 and Sencha Touch Implementing new Ext JS 5\n  Touch features What to consider before upgrading to Ext JS 5</p>\n<p>While there are so many reasons to upgrade your existing Ext JS 4 apps to\n  Ext JS 5, by far, the most exciting is the ability to add support for\n  gestures and events that make your existing app touch-friendly without\n  needing to do a complete rewrite.</p>\n<p><iframe src=\"https://player.vimeo.com/video/81745175\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen=\"\" mozallowfullscreen=\"\" allowfullscreen></iframe></p>\n<p><a href=\"https://vimeo.com/81745175\" target=\"_blank\" rel=\"noopener\">Re-skinning Your Apps Just Got Easier\n    with Sencha Architect 3</a> from <a href=\"https://vimeo.com/sencha\" target=\"_blank\" rel=\"noopener\">Sencha</a>\n  on <a href=\"https://vimeo.com\" target=\"_blank\" rel=\"noopener\">Vimeo</a>.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>Would you like your Ext JS application to support Touch and Tablet devices,\n  but don’t know where to start?</p>","more":"<p>Please join us as Lee Boonstra, Technical Trainer at Sencha shares best\n  practices and techniques for optimizing your existing Ext JS applications\n  with the new touch gestures introduced in Ext JS 5.</p>\n<p>What you’ll learn…</p>\n<p>The difference between Ext JS 5 and Sencha Touch Implementing new Ext JS 5\n  Touch features What to consider before upgrading to Ext JS 5</p>\n<p>While there are so many reasons to upgrade your existing Ext JS 4 apps to\n  Ext JS 5, by far, the most exciting is the ability to add support for\n  gestures and events that make your existing app touch-friendly without\n  needing to do a complete rewrite.</p>\n<p><iframe src=\"https://player.vimeo.com/video/81745175\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen=\"\" mozallowfullscreen=\"\" allowfullscreen></iframe></p>\n<p><a href=\"https://vimeo.com/81745175\" target=\"_blank\" rel=\"noopener\">Re-skinning Your Apps Just Got Easier\n    with Sencha Architect 3</a> from <a href=\"https://vimeo.com/sencha\" target=\"_blank\" rel=\"noopener\">Sencha</a>\n  on <a href=\"https://vimeo.com\" target=\"_blank\" rel=\"noopener\">Vimeo</a>.</p>"},{"title":"Running multiple Sencha Cmd versions","date":"2015-07-10T07:19:52.000Z","_content":"\nDo you want to run multiple versions of Sencha Cmd, because you are developing Sencha Touch, Ext JS 4, 5 and 6 apps all together? This guide will give you answers.\n\n<!--more-->\n\n ###Multiple Cmd versions \n \n Now the only thing here, you will need to take care of, is that you are running multiple Sencha Cmd versions, next to each other. From the Sencha website, you can install the older versions, just in case, you are running a fresh install: [http://www.sencha.com/products/extjs/cmd-download/ ](http://www.sencha.com/products/extjs/cmd-download/)\n \n It will install Sencha Cmd on your machine. On a Mac, the path is: **~/bin/Sencha/Cmd/** on Windows it is probably **C:\\senchacmd**. You can maintain the Cmd versions on a Mac in the ~/.bash_profile file. On Windows it's under your environment variables. (see this guide, I wrote earlier [http://docs.sencha.com/architect/3/getting_started/installation_setup.html](http://docs.sencha.com/architect/3/getting_started/installation_setup.html)) \n \n ###Running multiple Cmd versions side by side \n \n Something else I did. What you might consider to setup as well, especially in case you are developing Sencha Touch, Ext JS 6, and / or Ext JS 4 & 5 apps all together... Is making earlier Sencha Cmd versions available on the command -line. When I type `sencha5`, I run Sencha Cmd 5 commands. When I type `sencha`, I run the latest Cmd 6 commands. That's because I bound these to the correct paths. You can do this too. It's very easy. First of all make sure the paths to the earlier versions are in the .bash_profile / environment vars. (which you probably already did, since I wrote it above). Second, and the most important step, is renaming the **sencha** executable (located in the Cmd installation folder) to **sencha5**, **sencha4** etc. And that's it! Enjoy","source":"_posts/running-multiple-sencha-cmd-versions-for-example-to-support-sencha-architect.md","raw":"---\ntitle: Running multiple Sencha Cmd versions\ntags:\n  - Sench Cmd\ncategories:\n  - Sencha CMD\ndate: 2015-07-10 09:19:52\n---\n\nDo you want to run multiple versions of Sencha Cmd, because you are developing Sencha Touch, Ext JS 4, 5 and 6 apps all together? This guide will give you answers.\n\n<!--more-->\n\n ###Multiple Cmd versions \n \n Now the only thing here, you will need to take care of, is that you are running multiple Sencha Cmd versions, next to each other. From the Sencha website, you can install the older versions, just in case, you are running a fresh install: [http://www.sencha.com/products/extjs/cmd-download/ ](http://www.sencha.com/products/extjs/cmd-download/)\n \n It will install Sencha Cmd on your machine. On a Mac, the path is: **~/bin/Sencha/Cmd/** on Windows it is probably **C:\\senchacmd**. You can maintain the Cmd versions on a Mac in the ~/.bash_profile file. On Windows it's under your environment variables. (see this guide, I wrote earlier [http://docs.sencha.com/architect/3/getting_started/installation_setup.html](http://docs.sencha.com/architect/3/getting_started/installation_setup.html)) \n \n ###Running multiple Cmd versions side by side \n \n Something else I did. What you might consider to setup as well, especially in case you are developing Sencha Touch, Ext JS 6, and / or Ext JS 4 & 5 apps all together... Is making earlier Sencha Cmd versions available on the command -line. When I type `sencha5`, I run Sencha Cmd 5 commands. When I type `sencha`, I run the latest Cmd 6 commands. That's because I bound these to the correct paths. You can do this too. It's very easy. First of all make sure the paths to the earlier versions are in the .bash_profile / environment vars. (which you probably already did, since I wrote it above). Second, and the most important step, is renaming the **sencha** executable (located in the Cmd installation folder) to **sencha5**, **sencha4** etc. And that's it! Enjoy","slug":"running-multiple-sencha-cmd-versions-for-example-to-support-sencha-architect","published":1,"updated":"2018-11-30T14:20:12.775Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncog001okif5l7b8uz8z","content":"<p>Do you want to run multiple versions of Sencha Cmd, because you are\n  developing Sencha Touch, Ext JS 4, 5 and 6 apps all together? This guide will\n  give you answers.</p>\n<a id=\"more\"></a>\n<p>###Multiple Cmd versions</p>\n<p>Now the only thing here, you will need to take care of, is that you are\n  running multiple Sencha Cmd versions, next to each other. From the Sencha\n  website, you can install the older versions, just in case, you are running a\n  fresh install: <a href=\"http://www.sencha.com/products/extjs/cmd-download/\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/products/extjs/cmd-download/</a></p>\n<p>It will install Sencha Cmd on your machine. On a Mac, the path is: <strong>~/bin/Sencha/Cmd/</strong>\n  on Windows it is probably <strong>C:\\senchacmd</strong>. You can maintain the\n  Cmd versions on a Mac in the ~/.bash_profile file. On Windows it’s under your\n  environment variables. (see this guide, I wrote earlier <a href=\"http://docs.sencha.com/architect/3/getting_started/installation_setup.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/architect/3/getting_started/installation_setup.html</a>)</p>\n<p>###Running multiple Cmd versions side by side</p>\n<p>Something else I did. What you might consider to setup as well, especially\n  in case you are developing Sencha Touch, Ext JS 6, and / or Ext JS 4 &amp; 5\n  apps all together… Is making earlier Sencha Cmd versions available on the\n  command -line. When I type <code>sencha5</code>, I run Sencha Cmd 5 commands.\n  When I type <code>sencha</code>, I run the latest Cmd 6 commands. That’s\n  because I bound these to the correct paths. You can do this too. It’s very\n  easy. First of all make sure the paths to the earlier versions are in the\n  .bash_profile / environment vars. (which you probably already did, since I\n  wrote it above). Second, and the most important step, is renaming the <strong>sencha</strong>\n  executable (located in the Cmd installation folder) to <strong>sencha5</strong>,\n  <strong>sencha4</strong> etc. And that’s it! Enjoy</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>Do you want to run multiple versions of Sencha Cmd, because you are\n  developing Sencha Touch, Ext JS 4, 5 and 6 apps all together? This guide will\n  give you answers.</p>","more":"<p>###Multiple Cmd versions</p>\n<p>Now the only thing here, you will need to take care of, is that you are\n  running multiple Sencha Cmd versions, next to each other. From the Sencha\n  website, you can install the older versions, just in case, you are running a\n  fresh install: <a href=\"http://www.sencha.com/products/extjs/cmd-download/\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/products/extjs/cmd-download/</a></p>\n<p>It will install Sencha Cmd on your machine. On a Mac, the path is: <strong>~/bin/Sencha/Cmd/</strong>\n  on Windows it is probably <strong>C:\\senchacmd</strong>. You can maintain the\n  Cmd versions on a Mac in the ~/.bash_profile file. On Windows it’s under your\n  environment variables. (see this guide, I wrote earlier <a href=\"http://docs.sencha.com/architect/3/getting_started/installation_setup.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/architect/3/getting_started/installation_setup.html</a>)</p>\n<p>###Running multiple Cmd versions side by side</p>\n<p>Something else I did. What you might consider to setup as well, especially\n  in case you are developing Sencha Touch, Ext JS 6, and / or Ext JS 4 &amp; 5\n  apps all together… Is making earlier Sencha Cmd versions available on the\n  command -line. When I type <code>sencha5</code>, I run Sencha Cmd 5 commands.\n  When I type <code>sencha</code>, I run the latest Cmd 6 commands. That’s\n  because I bound these to the correct paths. You can do this too. It’s very\n  easy. First of all make sure the paths to the earlier versions are in the\n  .bash_profile / environment vars. (which you probably already did, since I\n  wrote it above). Second, and the most important step, is renaming the <strong>sencha</strong>\n  executable (located in the Cmd installation folder) to <strong>sencha5</strong>,\n  <strong>sencha4</strong> etc. And that’s it! Enjoy</p>"},{"title":"Tutorial: Full-stack JavaScript for the Enterprise. Getting started with: Ext JS, Node.js, Express, MongoDB and Docker. (4)","date":"2016-08-19T14:30:58.000Z","_content":"\n*This is part IV of the tutorial, and covers: Setting up CORS on Node.js* \n\n<!--more-->\n\nOnce we are done with all the tutorials, you will have a working back-end with Node.js / Express 4 and a working front-end, with Ext JS. Only there will be one problem. The client, can’t reach the JSON backend, because both are running on different ports / or different domains. **Cross-Origin Resource Sharing** is a mechanism for allowing clients to interact with APIs that are hosted on a different domain. CORS works by requiring the server to include a specific set of headers that allow a browser to determine if and when cross-domain requests should be allowed. (For more information about CORS, take a look here: [http://www.html5rocks.com/en/tutorials/cors/](http://www.html5rocks.com/en/tutorials/cors/) Let’s open **server/package.json**, and add the following dependency: \n\n`\"cors\": \"^2.7.1\",`. Open **server/config/express.js**, and add the following variable to the top of the file: `cors = require('cors'),`. In the `module.exports` function, add the following line: `app.use(cors());`. Now save both files, stop Nodemon, and run on the command-line: \n`$ npm install $ nodemon app.js`. \n\nThis should fix your cross origin problem. By the end of this part of the tutorial, your client can reach your server, without cross origin blockages. You learned about CORS. \n\n## Read the next part \n\n[Part 5](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5/)\n\n*   [Quick link to Part 1.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1)\n*   [Quick link to Part 2.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2)\n*   [Quick link to Part 3.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3)\n*   [Quick link to Part 4.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4)\n*   [Quick link to Part 5.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5)\n*   [Quick link to Part 6.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6)\n*   [Quick link to Part 7.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7)\n*   [Quick link to Part 8.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8)","source":"_posts/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4.md","raw":"---\ntitle: >-\n  Tutorial: Full-stack JavaScript for the Enterprise. Getting started with: Ext\n  JS, Node.js, Express, MongoDB and Docker. (4)\ntags:\n  - Docker\n  - Node.js\n  - MongoDB\n  - Ext JS\ncategories:\n  - Containers\ndate: 2016-08-19 16:30:58\n---\n\n*This is part IV of the tutorial, and covers: Setting up CORS on Node.js* \n\n<!--more-->\n\nOnce we are done with all the tutorials, you will have a working back-end with Node.js / Express 4 and a working front-end, with Ext JS. Only there will be one problem. The client, can’t reach the JSON backend, because both are running on different ports / or different domains. **Cross-Origin Resource Sharing** is a mechanism for allowing clients to interact with APIs that are hosted on a different domain. CORS works by requiring the server to include a specific set of headers that allow a browser to determine if and when cross-domain requests should be allowed. (For more information about CORS, take a look here: [http://www.html5rocks.com/en/tutorials/cors/](http://www.html5rocks.com/en/tutorials/cors/) Let’s open **server/package.json**, and add the following dependency: \n\n`\"cors\": \"^2.7.1\",`. Open **server/config/express.js**, and add the following variable to the top of the file: `cors = require('cors'),`. In the `module.exports` function, add the following line: `app.use(cors());`. Now save both files, stop Nodemon, and run on the command-line: \n`$ npm install $ nodemon app.js`. \n\nThis should fix your cross origin problem. By the end of this part of the tutorial, your client can reach your server, without cross origin blockages. You learned about CORS. \n\n## Read the next part \n\n[Part 5](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5/)\n\n*   [Quick link to Part 1.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1)\n*   [Quick link to Part 2.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2)\n*   [Quick link to Part 3.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3)\n*   [Quick link to Part 4.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4)\n*   [Quick link to Part 5.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5)\n*   [Quick link to Part 6.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6)\n*   [Quick link to Part 7.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7)\n*   [Quick link to Part 8.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8)","slug":"tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4","published":1,"updated":"2018-11-30T13:34:41.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncoh001rkif57mgaq9xr","content":"<p><em>This is part IV of the tutorial, and covers: Setting up CORS on Node.js</em></p>\n<a id=\"more\"></a>\n<p>Once we are done with all the tutorials, you will have a working back-end\n  with Node.js / Express 4 and a working front-end, with Ext JS. Only there\n  will be one problem. The client, can’t reach the JSON backend, because both\n  are running on different ports / or different domains. <strong>Cross-Origin\n    Resource Sharing</strong> is a mechanism for allowing clients to interact\n  with APIs that are hosted on a different domain. CORS works by requiring the\n  server to include a specific set of headers that allow a browser to determine\n  if and when cross-domain requests should be allowed. (For more information\n  about CORS, take a look here: <a href=\"http://www.html5rocks.com/en/tutorials/cors/\" target=\"_blank\" rel=\"noopener\">http://www.html5rocks.com/en/tutorials/cors/</a>\n  Let’s open <strong>server/package.json</strong>, and add the following\n  dependency:</p>\n<p><code>&quot;cors&quot;: &quot;^2.7.1&quot;,</code>. Open <strong>server/config/express.js</strong>,\n  and add the following variable to the top of the file: <code>cors =\n    require(&#39;cors&#39;),</code>. In the <code>module.exports</code>\n  function, add the following line: <code>app.use(cors());</code>. Now save\n  both files, stop Nodemon, and run on the command-line: <code>$ npm install $\n    nodemon app.js</code>.</p>\n<p>This should fix your cross origin problem. By the end of this part of the\n  tutorial, your client can reach your server, without cross origin blockages.\n  You learned about CORS.</p>\n<h2 id=\"Read-the-next-part\"><a href=\"#Read-the-next-part\" class=\"headerlink\" title=\"Read the next part\"></a>Read\n  the next part</h2>\n<p><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5/\">Part\n    5</a></p>\n<ul>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1\">Quick\n      link to Part 1.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2\">Quick\n      link to Part 2.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3\">Quick\n      link to Part 3.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4\">Quick\n      link to Part 4.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5\">Quick\n      link to Part 5.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6\">Quick\n      link to Part 6.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7\">Quick\n      link to Part 7.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8\">Quick\n      link to Part 8.</a></li>\n</ul>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p><em>This is part IV of the tutorial, and covers: Setting up CORS on Node.js</em></p>","more":"<p>Once we are done with all the tutorials, you will have a working back-end\n  with Node.js / Express 4 and a working front-end, with Ext JS. Only there\n  will be one problem. The client, can’t reach the JSON backend, because both\n  are running on different ports / or different domains. <strong>Cross-Origin\n    Resource Sharing</strong> is a mechanism for allowing clients to interact\n  with APIs that are hosted on a different domain. CORS works by requiring the\n  server to include a specific set of headers that allow a browser to determine\n  if and when cross-domain requests should be allowed. (For more information\n  about CORS, take a look here: <a href=\"http://www.html5rocks.com/en/tutorials/cors/\" target=\"_blank\" rel=\"noopener\">http://www.html5rocks.com/en/tutorials/cors/</a>\n  Let’s open <strong>server/package.json</strong>, and add the following\n  dependency:</p>\n<p><code>&quot;cors&quot;: &quot;^2.7.1&quot;,</code>. Open <strong>server/config/express.js</strong>,\n  and add the following variable to the top of the file: <code>cors =\n    require(&#39;cors&#39;),</code>. In the <code>module.exports</code>\n  function, add the following line: <code>app.use(cors());</code>. Now save\n  both files, stop Nodemon, and run on the command-line: <code>$ npm install $\n    nodemon app.js</code>.</p>\n<p>This should fix your cross origin problem. By the end of this part of the\n  tutorial, your client can reach your server, without cross origin blockages.\n  You learned about CORS.</p>\n<h2 id=\"Read-the-next-part\"><a href=\"#Read-the-next-part\" class=\"headerlink\" title=\"Read the next part\"></a>Read\n  the next part</h2>\n<p><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5/\">Part\n    5</a></p>\n<ul>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1\">Quick\n      link to Part 1.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2\">Quick\n      link to Part 2.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3\">Quick\n      link to Part 3.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4\">Quick\n      link to Part 4.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5\">Quick\n      link to Part 5.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6\">Quick\n      link to Part 6.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7\">Quick\n      link to Part 7.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8\">Quick\n      link to Part 8.</a></li>\n</ul>"},{"title":"Tutorial: Full-stack JavaScript for the Enterprise. Getting started with: Ext JS, Node.js, Express, MongoDB and Docker.  (1)","date":"2016-08-16T14:30:18.000Z","_content":"\n*This is part I of the tutorial, and covers: JavaScript on the client.* \n\nYeah you are correct, when you have a web project, optimized for production, you can use FTP and simple upload the folder on your server. That’s easy, and when you only have a simple HTML5/JS/CSS app, or an application with a PHP back-end on Apache this probably works fine for you. But what, if you have a very complex application, or you are working on an application with a large team? You probably want to automate as much as possible, and make every live build easy. This tutorial will show you, how you can create an app where we will use JavaScript on the client (an Ext JS 6 app), and JavaScript on the server (Node.js with Express).\n\n<!--more-->\n\nMaybe you have played around with Node.js before. When you configured a Node.js app with Express etc, you will probably need to install packages via the the NPM packages manager. These are all dependencies. Now imagine you’ve created on your local workstation a fully working back-end, with Node.js and a MongoDB database. You had to install a lot of packages, and make some configurations on your system. This can be a configuration where you save environment passwords, or maybe even hardware configurations. What you don’t want, is to manually replicate all the settings and configurations you made locally, again on the server. Ideally, you will take whatever you have on your local machine, and take that over. Maybe you even want to run the same operating system and hardware on production. This is where Docker comes into play. With Docker you can create an isolated container with all the files such as dependencies and binaries for your app to run, making it easier to ship and deploy. It simplifies the packaging, distribution, installation and execution of (complex) applications. So, what is an isolated container? These containers are self-contained, preconfigured packages that a user can fetch and run with just a single command via the Docker hub (like Github, but for Docker). By keeping different software components separated in containers they can also be easily updated or removed without influencing each other.\n\n## About Docker \n\nWith Docker you can create an isolated container with all the files such as dependencies and binaries for your app to run, making it easier to ship and deploy. It simplifies the packaging, distribution, installation and execution of (complex) applications. So, what is an isolated container? These containers are self-contained, preconfigured packages that a user can fetch and run with just a single command via the Docker hub (like Github, but for Docker). By keeping different software components separated in containers they can also be easily updated or removed without influencing each other. # What you will need: For this tutorial I used: Ext JS 6 and Cmd 6.0.2, Node.js 5.8 with NPM installed and Docker 1.10. Please install the following: * A working Sencha environment, with Sencha Cmd and the Ext JS SDK You can check if Sencha Cmd is correctly installed by running: `sencha which` from the CLI. To setup Sencha on your local machine, use this guide: [http://se.sencha.com/setup-guide/](http://se.sencha.com/setup-guide/) \n\n* Node.js installed, with NPM See the install guide here: [https://nodejs.org/en/download/package-manager/](https://nodejs.org/en/download/package-manager/) [https://docs.npmjs.com/getting-started/installing-node](https://docs.npmjs.com/getting-started/installing-node) \n* MongoDb installed You can find a guide here: [https://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/](https://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/) \n* Docker installed: Tale a look here: [https://docs.docker.com/engine/installation/](https://docs.docker.com/engine/installation/) \n\n## Ext JS 6: Create the client app \n\nCreate the following folder somewhere on your hard drive: **dockerextnode**. Put a temporary copy of the Sencha SDK inside **dockerextnode**, (for example **ext-6.0.2**). If you don’t have Ext JS yet, feel free to download the trial: [https://www.sencha.com/products/evaluate/](https://www.sencha.com/products/evaluate/) \n\nOpen Windows Command / Terminal, and navigate on the command-line to the **dockerextnode** folder. From there enter the following commands:\n\n`$ mkdir server $ cd ext-6.0.2 $ sencha generate app Client ../client` \n\nYou’ve now created 2 folders. The **server** folder, which will contain the Node code later and the **client** folder, which contains the copy of the Sencha SDK together with a demo app. Let’s remove the temp folder: `$ cd .. $ rm -Rf ext-6.0.2` You’ve now removed the temp. Sencha SDK folder. We can now, start testing our Sencha demo app: `$ cd client $ sencha app build production $ sencha app watch` This command will spin off, a Jetty server on [http://127.0.0.1:1841](http://127.0.0.1:1841). \n\nVisit this page in the browser, and confirm you see the Sencha demo app. Once, you’ve seen the demo app, we can stop the server, by stopping the `sencha app watch` (with CTRL + C for example). We will keep the demo app like it is, but this could be a nice starting point for you, when you want to create your own app. **NOTE:** By default, the `sencha app watch` command starts the development server on the internal IP at port 1841. If you want to change the server’s port, for example to port 8082, you will have to start the server via the web command. This command will only bootu p an internal server, and won’t “watch” your app for changes. `$ sencha web -port 8082 start` Want to checkout all my code? I hosted it on Github: [https://github.com/savelee/docker-ext-client](https://github.com/savelee/docker-ext-client) By the end of this part of the tutorial, you will have a working JavaScript client app, created with Sencha Cmd and Ext JS 6. The next part of this tutorial will cover the setup for creating a Node.js with Express app.*\n\n![ExtJS6-demo-app](/images/ExtJS6-demo-app-500x206.png) \n\n## Read the next part \n\n[Part 2](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2/)\n*   [Quick link to Part 1.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1)\n*   [Quick link to Part 2.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2)\n*   [Quick link to Part 3.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3)\n*   [Quick link to Part 4.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4)\n*   [Quick link to Part 5.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5)\n*   [Quick link to Part 6.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6)\n*   [Quick link to Part 7.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7)\n*   [Quick link to Part 8.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8)","source":"_posts/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1.md","raw":"---\ntitle: >-\n  Tutorial: Full-stack JavaScript for the Enterprise. Getting started with: Ext\n  JS, Node.js, Express, MongoDB and Docker.  (1)\ntags:\n  - Docker\n  - Node.js\n  - MongoDB\n  - Ext JS\ncategories:\n  - Containers\ndate: 2016-08-16 16:30:18\n---\n\n*This is part I of the tutorial, and covers: JavaScript on the client.* \n\nYeah you are correct, when you have a web project, optimized for production, you can use FTP and simple upload the folder on your server. That’s easy, and when you only have a simple HTML5/JS/CSS app, or an application with a PHP back-end on Apache this probably works fine for you. But what, if you have a very complex application, or you are working on an application with a large team? You probably want to automate as much as possible, and make every live build easy. This tutorial will show you, how you can create an app where we will use JavaScript on the client (an Ext JS 6 app), and JavaScript on the server (Node.js with Express).\n\n<!--more-->\n\nMaybe you have played around with Node.js before. When you configured a Node.js app with Express etc, you will probably need to install packages via the the NPM packages manager. These are all dependencies. Now imagine you’ve created on your local workstation a fully working back-end, with Node.js and a MongoDB database. You had to install a lot of packages, and make some configurations on your system. This can be a configuration where you save environment passwords, or maybe even hardware configurations. What you don’t want, is to manually replicate all the settings and configurations you made locally, again on the server. Ideally, you will take whatever you have on your local machine, and take that over. Maybe you even want to run the same operating system and hardware on production. This is where Docker comes into play. With Docker you can create an isolated container with all the files such as dependencies and binaries for your app to run, making it easier to ship and deploy. It simplifies the packaging, distribution, installation and execution of (complex) applications. So, what is an isolated container? These containers are self-contained, preconfigured packages that a user can fetch and run with just a single command via the Docker hub (like Github, but for Docker). By keeping different software components separated in containers they can also be easily updated or removed without influencing each other.\n\n## About Docker \n\nWith Docker you can create an isolated container with all the files such as dependencies and binaries for your app to run, making it easier to ship and deploy. It simplifies the packaging, distribution, installation and execution of (complex) applications. So, what is an isolated container? These containers are self-contained, preconfigured packages that a user can fetch and run with just a single command via the Docker hub (like Github, but for Docker). By keeping different software components separated in containers they can also be easily updated or removed without influencing each other. # What you will need: For this tutorial I used: Ext JS 6 and Cmd 6.0.2, Node.js 5.8 with NPM installed and Docker 1.10. Please install the following: * A working Sencha environment, with Sencha Cmd and the Ext JS SDK You can check if Sencha Cmd is correctly installed by running: `sencha which` from the CLI. To setup Sencha on your local machine, use this guide: [http://se.sencha.com/setup-guide/](http://se.sencha.com/setup-guide/) \n\n* Node.js installed, with NPM See the install guide here: [https://nodejs.org/en/download/package-manager/](https://nodejs.org/en/download/package-manager/) [https://docs.npmjs.com/getting-started/installing-node](https://docs.npmjs.com/getting-started/installing-node) \n* MongoDb installed You can find a guide here: [https://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/](https://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/) \n* Docker installed: Tale a look here: [https://docs.docker.com/engine/installation/](https://docs.docker.com/engine/installation/) \n\n## Ext JS 6: Create the client app \n\nCreate the following folder somewhere on your hard drive: **dockerextnode**. Put a temporary copy of the Sencha SDK inside **dockerextnode**, (for example **ext-6.0.2**). If you don’t have Ext JS yet, feel free to download the trial: [https://www.sencha.com/products/evaluate/](https://www.sencha.com/products/evaluate/) \n\nOpen Windows Command / Terminal, and navigate on the command-line to the **dockerextnode** folder. From there enter the following commands:\n\n`$ mkdir server $ cd ext-6.0.2 $ sencha generate app Client ../client` \n\nYou’ve now created 2 folders. The **server** folder, which will contain the Node code later and the **client** folder, which contains the copy of the Sencha SDK together with a demo app. Let’s remove the temp folder: `$ cd .. $ rm -Rf ext-6.0.2` You’ve now removed the temp. Sencha SDK folder. We can now, start testing our Sencha demo app: `$ cd client $ sencha app build production $ sencha app watch` This command will spin off, a Jetty server on [http://127.0.0.1:1841](http://127.0.0.1:1841). \n\nVisit this page in the browser, and confirm you see the Sencha demo app. Once, you’ve seen the demo app, we can stop the server, by stopping the `sencha app watch` (with CTRL + C for example). We will keep the demo app like it is, but this could be a nice starting point for you, when you want to create your own app. **NOTE:** By default, the `sencha app watch` command starts the development server on the internal IP at port 1841. If you want to change the server’s port, for example to port 8082, you will have to start the server via the web command. This command will only bootu p an internal server, and won’t “watch” your app for changes. `$ sencha web -port 8082 start` Want to checkout all my code? I hosted it on Github: [https://github.com/savelee/docker-ext-client](https://github.com/savelee/docker-ext-client) By the end of this part of the tutorial, you will have a working JavaScript client app, created with Sencha Cmd and Ext JS 6. The next part of this tutorial will cover the setup for creating a Node.js with Express app.*\n\n![ExtJS6-demo-app](/images/ExtJS6-demo-app-500x206.png) \n\n## Read the next part \n\n[Part 2](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2/)\n*   [Quick link to Part 1.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1)\n*   [Quick link to Part 2.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2)\n*   [Quick link to Part 3.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3)\n*   [Quick link to Part 4.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4)\n*   [Quick link to Part 5.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5)\n*   [Quick link to Part 6.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6)\n*   [Quick link to Part 7.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7)\n*   [Quick link to Part 8.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8)","slug":"tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1","published":1,"updated":"2018-11-30T13:34:28.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncoh001tkif5npiou01o","content":"<p><em>This is part I of the tutorial, and covers: JavaScript on the client.</em></p>\n<p>Yeah you are correct, when you have a web project, optimized for production,\n  you can use FTP and simple upload the folder on your server. That’s easy, and\n  when you only have a simple HTML5/JS/CSS app, or an application with a PHP\n  back-end on Apache this probably works fine for you. But what, if you have a\n  very complex application, or you are working on an application with a large\n  team? You probably want to automate as much as possible, and make every live\n  build easy. This tutorial will show you, how you can create an app where we\n  will use JavaScript on the client (an Ext JS 6 app), and JavaScript on the\n  server (Node.js with Express).</p>\n<a id=\"more\"></a>\n<p>Maybe you have played around with Node.js before. When you configured a\n  Node.js app with Express etc, you will probably need to install packages via\n  the the NPM packages manager. These are all dependencies. Now imagine you’ve\n  created on your local workstation a fully working back-end, with Node.js and\n  a MongoDB database. You had to install a lot of packages, and make some\n  configurations on your system. This can be a configuration where you save\n  environment passwords, or maybe even hardware configurations. What you don’t\n  want, is to manually replicate all the settings and configurations you made\n  locally, again on the server. Ideally, you will take whatever you have on\n  your local machine, and take that over. Maybe you even want to run the same\n  operating system and hardware on production. This is where Docker comes into\n  play. With Docker you can create an isolated container with all the files\n  such as dependencies and binaries for your app to run, making it easier to\n  ship and deploy. It simplifies the packaging, distribution, installation and\n  execution of (complex) applications. So, what is an isolated container? These\n  containers are self-contained, preconfigured packages that a user can fetch\n  and run with just a single command via the Docker hub (like Github, but for\n  Docker). By keeping different software components separated in containers\n  they can also be easily updated or removed without influencing each other.</p>\n<h2 id=\"About-Docker\"><a href=\"#About-Docker\" class=\"headerlink\" title=\"About Docker\"></a>About\n  Docker</h2>\n<p>With Docker you can create an isolated container with all the files such as\n  dependencies and binaries for your app to run, making it easier to ship and\n  deploy. It simplifies the packaging, distribution, installation and execution\n  of (complex) applications. So, what is an isolated container? These\n  containers are self-contained, preconfigured packages that a user can fetch\n  and run with just a single command via the Docker hub (like Github, but for\n  Docker). By keeping different software components separated in containers\n  they can also be easily updated or removed without influencing each other. #\n  What you will need: For this tutorial I used: Ext JS 6 and Cmd 6.0.2, Node.js\n  5.8 with NPM installed and Docker 1.10. Please install the following: * A\n  working Sencha environment, with Sencha Cmd and the Ext JS SDK You can check\n  if Sencha Cmd is correctly installed by running: <code>sencha which</code>\n  from the CLI. To setup Sencha on your local machine, use this guide: <a href=\"http://se.sencha.com/setup-guide/\" target=\"_blank\" rel=\"noopener\">http://se.sencha.com/setup-guide/</a></p>\n<ul>\n  <li>Node.js installed, with NPM See the install guide here: <a href=\"https://nodejs.org/en/download/package-manager/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/package-manager/</a>\n    <a href=\"https://docs.npmjs.com/getting-started/installing-node\" target=\"_blank\" rel=\"noopener\">https://docs.npmjs.com/getting-started/installing-node</a></li>\n  <li>MongoDb installed You can find a guide here: <a href=\"https://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/</a></li>\n  <li>Docker installed: Tale a look here: <a href=\"https://docs.docker.com/engine/installation/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/installation/</a></li>\n</ul>\n<h2 id=\"Ext-JS-6-Create-the-client-app\"><a href=\"#Ext-JS-6-Create-the-client-app\" class=\"headerlink\" title=\"Ext JS 6: Create the client app\"></a>Ext\n  JS 6: Create the client app</h2>\n<p>Create the following folder somewhere on your hard drive: <strong>dockerextnode</strong>.\n  Put a temporary copy of the Sencha SDK inside <strong>dockerextnode</strong>,\n  (for example <strong>ext-6.0.2</strong>). If you don’t have Ext JS yet, feel\n  free to download the trial: <a href=\"https://www.sencha.com/products/evaluate/\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/products/evaluate/</a></p>\n<p>Open Windows Command / Terminal, and navigate on the command-line to the\n  <strong>dockerextnode</strong> folder. From there enter the following\n  commands:</p>\n<p><code>$ mkdir server $ cd ext-6.0.2 $ sencha generate app Client ../client</code></p>\n<p>You’ve now created 2 folders. The <strong>server</strong> folder, which will\n  contain the Node code later and the <strong>client</strong> folder, which\n  contains the copy of the Sencha SDK together with a demo app. Let’s remove\n  the temp folder: <code>$ cd .. $ rm -Rf ext-6.0.2</code> You’ve now removed\n  the temp. Sencha SDK folder. We can now, start testing our Sencha demo app:\n  <code>$ cd client $ sencha app build production $ sencha app watch</code>\n  This command will spin off, a Jetty server on <a href=\"http://127.0.0.1:1841\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:1841</a>.</p>\n<p>Visit this page in the browser, and confirm you see the Sencha demo app.\n  Once, you’ve seen the demo app, we can stop the server, by stopping the <code>sencha\n    app watch</code> (with CTRL + C for example). We will keep the demo app\n  like it is, but this could be a nice starting point for you, when you want to\n  create your own app. <strong>NOTE:</strong> By default, the <code>sencha app\n    watch</code> command starts the development server on the internal IP at\n  port 1841. If you want to change the server’s port, for example to port 8082,\n  you will have to start the server via the web command. This command will only\n  bootu p an internal server, and won’t “watch” your app for changes. <code>$\n    sencha web -port 8082 start</code> Want to checkout all my code? I hosted\n  it on Github: <a href=\"https://github.com/savelee/docker-ext-client\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client</a>\n  By the end of this part of the tutorial, you will have a working JavaScript\n  client app, created with Sencha Cmd and Ext JS 6. The next part of this\n  tutorial will cover the setup for creating a Node.js with Express app.*</p>\n<p><img src=\"/images/ExtJS6-demo-app-500x206.png\" alt=\"ExtJS6-demo-app\"></p>\n<h2 id=\"Read-the-next-part\"><a href=\"#Read-the-next-part\" class=\"headerlink\" title=\"Read the next part\"></a>Read\n  the next part</h2>\n<p><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2/\">Part\n    2</a></p>\n<ul>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1\">Quick\n      link to Part 1.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2\">Quick\n      link to Part 2.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3\">Quick\n      link to Part 3.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4\">Quick\n      link to Part 4.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5\">Quick\n      link to Part 5.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6\">Quick\n      link to Part 6.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7\">Quick\n      link to Part 7.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8\">Quick\n      link to Part 8.</a></li>\n</ul>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p><em>This is part I of the tutorial, and covers: JavaScript on the client.</em></p>\n<p>Yeah you are correct, when you have a web project, optimized for production,\n  you can use FTP and simple upload the folder on your server. That’s easy, and\n  when you only have a simple HTML5/JS/CSS app, or an application with a PHP\n  back-end on Apache this probably works fine for you. But what, if you have a\n  very complex application, or you are working on an application with a large\n  team? You probably want to automate as much as possible, and make every live\n  build easy. This tutorial will show you, how you can create an app where we\n  will use JavaScript on the client (an Ext JS 6 app), and JavaScript on the\n  server (Node.js with Express).</p>","more":"<p>Maybe you have played around with Node.js before. When you configured a\n  Node.js app with Express etc, you will probably need to install packages via\n  the the NPM packages manager. These are all dependencies. Now imagine you’ve\n  created on your local workstation a fully working back-end, with Node.js and\n  a MongoDB database. You had to install a lot of packages, and make some\n  configurations on your system. This can be a configuration where you save\n  environment passwords, or maybe even hardware configurations. What you don’t\n  want, is to manually replicate all the settings and configurations you made\n  locally, again on the server. Ideally, you will take whatever you have on\n  your local machine, and take that over. Maybe you even want to run the same\n  operating system and hardware on production. This is where Docker comes into\n  play. With Docker you can create an isolated container with all the files\n  such as dependencies and binaries for your app to run, making it easier to\n  ship and deploy. It simplifies the packaging, distribution, installation and\n  execution of (complex) applications. So, what is an isolated container? These\n  containers are self-contained, preconfigured packages that a user can fetch\n  and run with just a single command via the Docker hub (like Github, but for\n  Docker). By keeping different software components separated in containers\n  they can also be easily updated or removed without influencing each other.</p>\n<h2 id=\"About-Docker\"><a href=\"#About-Docker\" class=\"headerlink\" title=\"About Docker\"></a>About\n  Docker</h2>\n<p>With Docker you can create an isolated container with all the files such as\n  dependencies and binaries for your app to run, making it easier to ship and\n  deploy. It simplifies the packaging, distribution, installation and execution\n  of (complex) applications. So, what is an isolated container? These\n  containers are self-contained, preconfigured packages that a user can fetch\n  and run with just a single command via the Docker hub (like Github, but for\n  Docker). By keeping different software components separated in containers\n  they can also be easily updated or removed without influencing each other. #\n  What you will need: For this tutorial I used: Ext JS 6 and Cmd 6.0.2, Node.js\n  5.8 with NPM installed and Docker 1.10. Please install the following: * A\n  working Sencha environment, with Sencha Cmd and the Ext JS SDK You can check\n  if Sencha Cmd is correctly installed by running: <code>sencha which</code>\n  from the CLI. To setup Sencha on your local machine, use this guide: <a href=\"http://se.sencha.com/setup-guide/\" target=\"_blank\" rel=\"noopener\">http://se.sencha.com/setup-guide/</a></p>\n<ul>\n  <li>Node.js installed, with NPM See the install guide here: <a href=\"https://nodejs.org/en/download/package-manager/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/package-manager/</a>\n    <a href=\"https://docs.npmjs.com/getting-started/installing-node\" target=\"_blank\" rel=\"noopener\">https://docs.npmjs.com/getting-started/installing-node</a></li>\n  <li>MongoDb installed You can find a guide here: <a href=\"https://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/</a></li>\n  <li>Docker installed: Tale a look here: <a href=\"https://docs.docker.com/engine/installation/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/installation/</a></li>\n</ul>\n<h2 id=\"Ext-JS-6-Create-the-client-app\"><a href=\"#Ext-JS-6-Create-the-client-app\" class=\"headerlink\" title=\"Ext JS 6: Create the client app\"></a>Ext\n  JS 6: Create the client app</h2>\n<p>Create the following folder somewhere on your hard drive: <strong>dockerextnode</strong>.\n  Put a temporary copy of the Sencha SDK inside <strong>dockerextnode</strong>,\n  (for example <strong>ext-6.0.2</strong>). If you don’t have Ext JS yet, feel\n  free to download the trial: <a href=\"https://www.sencha.com/products/evaluate/\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/products/evaluate/</a></p>\n<p>Open Windows Command / Terminal, and navigate on the command-line to the\n  <strong>dockerextnode</strong> folder. From there enter the following\n  commands:</p>\n<p><code>$ mkdir server $ cd ext-6.0.2 $ sencha generate app Client ../client</code></p>\n<p>You’ve now created 2 folders. The <strong>server</strong> folder, which will\n  contain the Node code later and the <strong>client</strong> folder, which\n  contains the copy of the Sencha SDK together with a demo app. Let’s remove\n  the temp folder: <code>$ cd .. $ rm -Rf ext-6.0.2</code> You’ve now removed\n  the temp. Sencha SDK folder. We can now, start testing our Sencha demo app:\n  <code>$ cd client $ sencha app build production $ sencha app watch</code>\n  This command will spin off, a Jetty server on <a href=\"http://127.0.0.1:1841\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:1841</a>.</p>\n<p>Visit this page in the browser, and confirm you see the Sencha demo app.\n  Once, you’ve seen the demo app, we can stop the server, by stopping the <code>sencha\n    app watch</code> (with CTRL + C for example). We will keep the demo app\n  like it is, but this could be a nice starting point for you, when you want to\n  create your own app. <strong>NOTE:</strong> By default, the <code>sencha app\n    watch</code> command starts the development server on the internal IP at\n  port 1841. If you want to change the server’s port, for example to port 8082,\n  you will have to start the server via the web command. This command will only\n  bootu p an internal server, and won’t “watch” your app for changes. <code>$\n    sencha web -port 8082 start</code> Want to checkout all my code? I hosted\n  it on Github: <a href=\"https://github.com/savelee/docker-ext-client\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client</a>\n  By the end of this part of the tutorial, you will have a working JavaScript\n  client app, created with Sencha Cmd and Ext JS 6. The next part of this\n  tutorial will cover the setup for creating a Node.js with Express app.*</p>\n<p><img src=\"/images/ExtJS6-demo-app-500x206.png\" alt=\"ExtJS6-demo-app\"></p>\n<h2 id=\"Read-the-next-part\"><a href=\"#Read-the-next-part\" class=\"headerlink\" title=\"Read the next part\"></a>Read\n  the next part</h2>\n<p><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2/\">Part\n    2</a></p>\n<ul>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1\">Quick\n      link to Part 1.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2\">Quick\n      link to Part 2.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3\">Quick\n      link to Part 3.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4\">Quick\n      link to Part 4.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5\">Quick\n      link to Part 5.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6\">Quick\n      link to Part 6.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7\">Quick\n      link to Part 7.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8\">Quick\n      link to Part 8.</a></li>\n</ul>"},{"title":"Tutorial: Full-stack JavaScript for the Enterprise Getting started with: Ext JS, Node.js, Express, MongoDB and Docker. (6)","date":"2016-08-21T14:30:53.000Z","_content":"\n*This is part VI of the tutorial, and covers Docker.*\n\n<!--more-->\n\n# Docker: Containerize your apps\n\nA Docker container is similar to a virtual machine. It basically allows you to run a pre-packaged \"Linux box\" inside a container. The main difference between a Docker container and a typical virtual machine is that Docker is not quite as isolated from the surrounding environment as a normal virtual machine would be. A Docker container shares the Linux kernel with the host operating system, which means it doesn't need to \"boot\" the way a virtual machine would. You can think of a Docker image as a complete Linux installation. These images use the kernel of the host system, but since they are running inside a Docker container and only see their own file system, it's perfectly possible to run a distribution like CentOS on an Ubuntu host (or vice-versa). Docker containers are isolated from the host machine by default, meaning that by default the host machine has no access to the file system inside the Docker container, nor any means of communicating with it via the network. \n\n![docker](/images/docker-500x171.png) \n\nDocker containers run ephemerally by default, which means that every time the container is shut down or restarted it doesn't save its data — it essentially reverts to the state it was in when the container started. First make sure you have the Docker properly installed on your machine. Mac OSX users can follow this guide: [https://docs.docker.com/engine/installation/mac/](https://docs.docker.com/engine/installation/mac/ ) Windows users this one: [https://docs.docker.com/engine/installation/windows/](https://docs.docker.com/engine/installation/windows/ ) There are also various guides available to install Docker on Linux or cloud environments btw. You will need to install the Docker toolbox. It includes the Docker terminal, the Docker Machine, Docker compose etc. You can test if Docker is installed by running the following command: \n\n``` bash\n$ docker -v \n$ docker-machine version\n```\n\nAfter installing, start the **Docker Quickstart Terminal** application. It will take a while, but afterwards it opens another terminal window, with a message like this: \n\n``` bash\n## . ## ## ## == ## ## ## ## ## === /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ ===\n~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ / ===- ~~~ ______ o __/   __/\n___________/\ndocker is configured to use the default machine with IP 192.168.99.100 \nFor help getting started, check out the docs at https://docs.docker.com \nMacBook-Pro-3: ~ leeboonstra $ \n```\n\nIn this case, it will configure Docker on my workstation on this local IP address: *192.168.99.100*. Now, let’s create a Docker file: **Dockerfile** (note, it does not have an extension) and you will save it into the **dockerextnode/client** folder. We will create a new Docker image, and base it on other Docker image, The official Nginx image. [https://hub.docker.com/_/nginx/](https://hub.docker.com/_/nginx/) Nginx (pronounced \"engine-x\") is an open source reverse proxy server for HTTP, HTTPS, SMTP, POP3, and IMAP protocols, as well as a load balancer, HTTP cache, and a web server (origin server). The Nginx image will serve all our static content. Here are the contents of the **client/Dockerfile**. See the comments for explanation: [https://github.com/savelee/docker-ext-client/blob/master/Dockerfile](https://github.com/savelee/docker-ext-client/blob/master/Dockerfile) https://gist.github.com/savelee/3b37ef3659918d42e4791bd658a502ce To finally create the image, we need to run the following command from the **dockerextnode/client** folder, in the Docker terminal window: `$ docker build -t extclient .` \n\n**Note:** Because I migrated from the Boot2Docker command to the Docker Machine, I wasn’t able to build here. Instead I received the following error: *“Cannot connect to the Docker daemon.”* I had to run this line on my CLI first, before building. Which regenerate the TSL certificates for me. `$ docker-machine regenerate-certs default` To test if it worked run: `$ docker-machine env default ` \n\nTo see your newly created image, run the following Docker command: `$ docker images` You will see the images that are currently installed on your workstation. It could look like this: `REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE extclient latest 4ad898544bec 4 minutes ago `. The name `extclient`, is our Ext JS Docker image, since we specified this name in the build command. To remove all images use: `$ docker rmi $(docker images -q)` To remove all containers including the running ones use: \n``` bash\n$ docker rm --force\n$ docker ps -qa \n```\n\nTo run a container using the image we just created run: `$ docker run -d --name dockerextnodeclient -p 80:80 extclient` You can test it in your browser by entering the ip address in the browser: [http://192.168.99.100](http://192.168.99.100) In case a Docker container automatically exits, because of an error, you might want to look into the logs: `$ docker logs` For example: `$ docker logs 2f9236343def` We are running in the background a new container called: *“dockerextnode”*, which maps port *80* to the port that the Dockerfile exposes from the image named *“extclient”*. Now the container is running. To see our app inside the container we need to know the ip of the Docker Machine: `$ docker-machine ip` To see running containers use: `$ docker ps -a` This works, but only for the front-end, not for our Node.js back-end and Mongo database. Of course, you could edit the Dockerfile, and create Docker RUN commands, to install Node.js and Mongo on this image. However, that would be a bit silly, and it would take the magic powers of Docker away. A much better approach, would be to create separate images for Sencha, Node.js and for MongoDB. That's why Docker Compose comes into play... We will look into that, in the next part of the tutorial. \n\n## Read the next part \n\n[Part 7](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7/)\n\n*   [Quick link to Part 1.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1)\n*   [Quick link to Part 2.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2)\n*   [Quick link to Part 3.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3)\n*   [Quick link to Part 4.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4)\n*   [Quick link to Part 5.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5)\n*   [Quick link to Part 6.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6)\n*   [Quick link to Part 7.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7)\n*   [Quick link to Part 8.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8)","source":"_posts/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6.md","raw":"---\ntitle: >-\n  Tutorial: Full-stack JavaScript for the Enterprise Getting started with: Ext\n  JS, Node.js, Express, MongoDB and Docker. (6)\ntags:\n  - Docker\n  - Node.js\n  - MongoDB\n  - Ext JS\ncategories:\n  - Containers\ndate: 2016-08-21 16:30:53\n---\n\n*This is part VI of the tutorial, and covers Docker.*\n\n<!--more-->\n\n# Docker: Containerize your apps\n\nA Docker container is similar to a virtual machine. It basically allows you to run a pre-packaged \"Linux box\" inside a container. The main difference between a Docker container and a typical virtual machine is that Docker is not quite as isolated from the surrounding environment as a normal virtual machine would be. A Docker container shares the Linux kernel with the host operating system, which means it doesn't need to \"boot\" the way a virtual machine would. You can think of a Docker image as a complete Linux installation. These images use the kernel of the host system, but since they are running inside a Docker container and only see their own file system, it's perfectly possible to run a distribution like CentOS on an Ubuntu host (or vice-versa). Docker containers are isolated from the host machine by default, meaning that by default the host machine has no access to the file system inside the Docker container, nor any means of communicating with it via the network. \n\n![docker](/images/docker-500x171.png) \n\nDocker containers run ephemerally by default, which means that every time the container is shut down or restarted it doesn't save its data — it essentially reverts to the state it was in when the container started. First make sure you have the Docker properly installed on your machine. Mac OSX users can follow this guide: [https://docs.docker.com/engine/installation/mac/](https://docs.docker.com/engine/installation/mac/ ) Windows users this one: [https://docs.docker.com/engine/installation/windows/](https://docs.docker.com/engine/installation/windows/ ) There are also various guides available to install Docker on Linux or cloud environments btw. You will need to install the Docker toolbox. It includes the Docker terminal, the Docker Machine, Docker compose etc. You can test if Docker is installed by running the following command: \n\n``` bash\n$ docker -v \n$ docker-machine version\n```\n\nAfter installing, start the **Docker Quickstart Terminal** application. It will take a while, but afterwards it opens another terminal window, with a message like this: \n\n``` bash\n## . ## ## ## == ## ## ## ## ## === /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ ===\n~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ / ===- ~~~ ______ o __/   __/\n___________/\ndocker is configured to use the default machine with IP 192.168.99.100 \nFor help getting started, check out the docs at https://docs.docker.com \nMacBook-Pro-3: ~ leeboonstra $ \n```\n\nIn this case, it will configure Docker on my workstation on this local IP address: *192.168.99.100*. Now, let’s create a Docker file: **Dockerfile** (note, it does not have an extension) and you will save it into the **dockerextnode/client** folder. We will create a new Docker image, and base it on other Docker image, The official Nginx image. [https://hub.docker.com/_/nginx/](https://hub.docker.com/_/nginx/) Nginx (pronounced \"engine-x\") is an open source reverse proxy server for HTTP, HTTPS, SMTP, POP3, and IMAP protocols, as well as a load balancer, HTTP cache, and a web server (origin server). The Nginx image will serve all our static content. Here are the contents of the **client/Dockerfile**. See the comments for explanation: [https://github.com/savelee/docker-ext-client/blob/master/Dockerfile](https://github.com/savelee/docker-ext-client/blob/master/Dockerfile) https://gist.github.com/savelee/3b37ef3659918d42e4791bd658a502ce To finally create the image, we need to run the following command from the **dockerextnode/client** folder, in the Docker terminal window: `$ docker build -t extclient .` \n\n**Note:** Because I migrated from the Boot2Docker command to the Docker Machine, I wasn’t able to build here. Instead I received the following error: *“Cannot connect to the Docker daemon.”* I had to run this line on my CLI first, before building. Which regenerate the TSL certificates for me. `$ docker-machine regenerate-certs default` To test if it worked run: `$ docker-machine env default ` \n\nTo see your newly created image, run the following Docker command: `$ docker images` You will see the images that are currently installed on your workstation. It could look like this: `REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE extclient latest 4ad898544bec 4 minutes ago `. The name `extclient`, is our Ext JS Docker image, since we specified this name in the build command. To remove all images use: `$ docker rmi $(docker images -q)` To remove all containers including the running ones use: \n``` bash\n$ docker rm --force\n$ docker ps -qa \n```\n\nTo run a container using the image we just created run: `$ docker run -d --name dockerextnodeclient -p 80:80 extclient` You can test it in your browser by entering the ip address in the browser: [http://192.168.99.100](http://192.168.99.100) In case a Docker container automatically exits, because of an error, you might want to look into the logs: `$ docker logs` For example: `$ docker logs 2f9236343def` We are running in the background a new container called: *“dockerextnode”*, which maps port *80* to the port that the Dockerfile exposes from the image named *“extclient”*. Now the container is running. To see our app inside the container we need to know the ip of the Docker Machine: `$ docker-machine ip` To see running containers use: `$ docker ps -a` This works, but only for the front-end, not for our Node.js back-end and Mongo database. Of course, you could edit the Dockerfile, and create Docker RUN commands, to install Node.js and Mongo on this image. However, that would be a bit silly, and it would take the magic powers of Docker away. A much better approach, would be to create separate images for Sencha, Node.js and for MongoDB. That's why Docker Compose comes into play... We will look into that, in the next part of the tutorial. \n\n## Read the next part \n\n[Part 7](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7/)\n\n*   [Quick link to Part 1.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1)\n*   [Quick link to Part 2.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2)\n*   [Quick link to Part 3.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3)\n*   [Quick link to Part 4.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4)\n*   [Quick link to Part 5.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5)\n*   [Quick link to Part 6.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6)\n*   [Quick link to Part 7.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7)\n*   [Quick link to Part 8.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8)","slug":"tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6","published":1,"updated":"2018-11-30T13:41:26.002Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncoi001wkif51faqi1tm","content":"<p><em>This is part VI of the tutorial, and covers Docker.</em></p>\n<a id=\"more\"></a>\n<h1 id=\"Docker-Containerize-your-apps\"><a href=\"#Docker-Containerize-your-apps\" class=\"headerlink\" title=\"Docker: Containerize your apps\"></a>Docker:\n  Containerize your apps</h1>\n<p>A Docker container is similar to a virtual machine. It basically allows you\n  to run a pre-packaged “Linux box” inside a container. The main difference\n  between a Docker container and a typical virtual machine is that Docker is\n  not quite as isolated from the surrounding environment as a normal virtual\n  machine would be. A Docker container shares the Linux kernel with the host\n  operating system, which means it doesn’t need to “boot” the way a virtual\n  machine would. You can think of a Docker image as a complete Linux\n  installation. These images use the kernel of the host system, but since they\n  are running inside a Docker container and only see their own file system,\n  it’s perfectly possible to run a distribution like CentOS on an Ubuntu host\n  (or vice-versa). Docker containers are isolated from the host machine by\n  default, meaning that by default the host machine has no access to the file\n  system inside the Docker container, nor any means of communicating with it\n  via the network.</p>\n<p><img src=\"/images/docker-500x171.png\" alt=\"docker\"></p>\n<p>Docker containers run ephemerally by default, which means that every time\n  the container is shut down or restarted it doesn’t save its data — it\n  essentially reverts to the state it was in when the container started. First\n  make sure you have the Docker properly installed on your machine. Mac OSX\n  users can follow this guide: <a href=\"https://docs.docker.com/engine/installation/mac/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/installation/mac/</a>\n  Windows users this one: <a href=\"https://docs.docker.com/engine/installation/windows/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/installation/windows/</a>\n  There are also various guides available to install Docker on Linux or cloud\n  environments btw. You will need to install the Docker toolbox. It includes\n  the Docker terminal, the Docker Machine, Docker compose etc. You can test if\n  Docker is installed by running the following command:</p>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ docker -v </span><br><span class=\"line\">$ docker-machine version</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>After installing, start the <strong>Docker Quickstart Terminal</strong>\n  application. It will take a while, but afterwards it opens another terminal\n  window, with a message like this:</p>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"comment\">## . ## ## ## == ## ## ## ## ## === /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ ===</span></span><br><span class=\"line\">~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~~ ~ / ===- ~~~ ______ o __/   __/</span><br><span class=\"line\">___________/</span><br><span class=\"line\">docker is configured to use the default machine with IP 192.168.99.100 </span><br><span class=\"line\">For <span class=\"built_in\">help</span> getting started, check out the docs at https://docs.docker.com </span><br><span class=\"line\">MacBook-Pro-3: ~ leeboonstra $</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>In this case, it will configure Docker on my workstation on this local IP\n  address: <em>192.168.99.100</em>. Now, let’s create a Docker file: <strong>Dockerfile</strong>\n  (note, it does not have an extension) and you will save it into the <strong>dockerextnode/client</strong>\n  folder. We will create a new Docker image, and base it on other Docker image,\n  The official Nginx image. <a href=\"https://hub.docker.com/_/nginx/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/_/nginx/</a>\n  Nginx (pronounced “engine-x”) is an open source reverse proxy server for\n  HTTP, HTTPS, SMTP, POP3, and IMAP protocols, as well as a load balancer, HTTP\n  cache, and a web server (origin server). The Nginx image will serve all our\n  static content. Here are the contents of the <strong>client/Dockerfile</strong>.\n  See the comments for explanation: <a href=\"https://github.com/savelee/docker-ext-client/blob/master/Dockerfile\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/Dockerfile</a>\n  <a href=\"https://gist.github.com/savelee/3b37ef3659918d42e4791bd658a502ce\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/3b37ef3659918d42e4791bd658a502ce</a>\n  To finally create the image, we need to run the following command from the\n  <strong>dockerextnode/client</strong> folder, in the Docker terminal window:\n  <code>$ docker build -t extclient .</code></p>\n<p><strong>Note:</strong> Because I migrated from the Boot2Docker command to\n  the Docker Machine, I wasn’t able to build here. Instead I received the\n  following error: <em>“Cannot connect to the Docker daemon.”</em> I had to run\n  this line on my CLI first, before building. Which regenerate the TSL\n  certificates for me. <code>$ docker-machine regenerate-certs default</code>\n  To test if it worked run: <code>$ docker-machine env default</code></p>\n<p>To see your newly created image, run the following Docker command: <code>$\n    docker images</code> You will see the images that are currently installed\n  on your workstation. It could look like this: <code>REPOSITORY TAG IMAGE ID\n    CREATED VIRTUAL SIZE extclient latest 4ad898544bec 4 minutes ago</code>.\n  The name <code>extclient</code>, is our Ext JS Docker image, since we\n  specified this name in the build command. To remove all images use: <code>$\n    docker rmi $(docker images -q)</code> To remove all containers including\n  the running ones use:</p>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ docker rm --force</span><br><span class=\"line\">$ docker ps -qa</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p></p>\n<p>To run a container using the image we just created run: <code>$ docker run\n    -d --name dockerextnodeclient -p 80:80 extclient</code> You can test it in\n  your browser by entering the ip address in the browser: <a href=\"http://192.168.99.100\" target=\"_blank\" rel=\"noopener\">http://192.168.99.100</a>\n  In case a Docker container automatically exits, because of an error, you\n  might want to look into the logs: <code>$ docker logs</code> For example:\n  <code>$ docker logs 2f9236343def</code> We are running in the background a\n  new container called: <em>“dockerextnode”</em>, which maps port <em>80</em>\n  to the port that the Dockerfile exposes from the image named <em>“extclient”</em>.\n  Now the container is running. To see our app inside the container we need to\n  know the ip of the Docker Machine: <code>$ docker-machine ip</code> To see\n  running containers use: <code>$ docker ps -a</code> This works, but only for\n  the front-end, not for our Node.js back-end and Mongo database. Of course,\n  you could edit the Dockerfile, and create Docker RUN commands, to install\n  Node.js and Mongo on this image. However, that would be a bit silly, and it\n  would take the magic powers of Docker away. A much better approach, would be\n  to create separate images for Sencha, Node.js and for MongoDB. That’s why\n  Docker Compose comes into play… We will look into that, in the next part of\n  the tutorial.</p>\n<h2 id=\"Read-the-next-part\"><a href=\"#Read-the-next-part\" class=\"headerlink\" title=\"Read the next part\"></a>Read\n  the next part</h2>\n<p><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7/\">Part\n    7</a></p>\n<ul>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1\">Quick\n      link to Part 1.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2\">Quick\n      link to Part 2.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3\">Quick\n      link to Part 3.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4\">Quick\n      link to Part 4.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5\">Quick\n      link to Part 5.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6\">Quick\n      link to Part 6.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7\">Quick\n      link to Part 7.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8\">Quick\n      link to Part 8.</a></li>\n</ul>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p><em>This is part VI of the tutorial, and covers Docker.</em></p>","more":"<h1 id=\"Docker-Containerize-your-apps\"><a href=\"#Docker-Containerize-your-apps\" class=\"headerlink\" title=\"Docker: Containerize your apps\"></a>Docker:\n  Containerize your apps</h1>\n<p>A Docker container is similar to a virtual machine. It basically allows you\n  to run a pre-packaged “Linux box” inside a container. The main difference\n  between a Docker container and a typical virtual machine is that Docker is\n  not quite as isolated from the surrounding environment as a normal virtual\n  machine would be. A Docker container shares the Linux kernel with the host\n  operating system, which means it doesn’t need to “boot” the way a virtual\n  machine would. You can think of a Docker image as a complete Linux\n  installation. These images use the kernel of the host system, but since they\n  are running inside a Docker container and only see their own file system,\n  it’s perfectly possible to run a distribution like CentOS on an Ubuntu host\n  (or vice-versa). Docker containers are isolated from the host machine by\n  default, meaning that by default the host machine has no access to the file\n  system inside the Docker container, nor any means of communicating with it\n  via the network.</p>\n<p><img src=\"/images/docker-500x171.png\" alt=\"docker\"></p>\n<p>Docker containers run ephemerally by default, which means that every time\n  the container is shut down or restarted it doesn’t save its data — it\n  essentially reverts to the state it was in when the container started. First\n  make sure you have the Docker properly installed on your machine. Mac OSX\n  users can follow this guide: <a href=\"https://docs.docker.com/engine/installation/mac/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/installation/mac/</a>\n  Windows users this one: <a href=\"https://docs.docker.com/engine/installation/windows/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/installation/windows/</a>\n  There are also various guides available to install Docker on Linux or cloud\n  environments btw. You will need to install the Docker toolbox. It includes\n  the Docker terminal, the Docker Machine, Docker compose etc. You can test if\n  Docker is installed by running the following command:</p>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ docker -v </span><br><span class=\"line\">$ docker-machine version</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>After installing, start the <strong>Docker Quickstart Terminal</strong>\n  application. It will take a while, but afterwards it opens another terminal\n  window, with a message like this:</p>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"comment\">## . ## ## ## == ## ## ## ## ## === /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ ===</span></span><br><span class=\"line\">~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~~ ~ / ===- ~~~ ______ o __/   __/</span><br><span class=\"line\">___________/</span><br><span class=\"line\">docker is configured to use the default machine with IP 192.168.99.100 </span><br><span class=\"line\">For <span class=\"built_in\">help</span> getting started, check out the docs at https://docs.docker.com </span><br><span class=\"line\">MacBook-Pro-3: ~ leeboonstra $</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>In this case, it will configure Docker on my workstation on this local IP\n  address: <em>192.168.99.100</em>. Now, let’s create a Docker file: <strong>Dockerfile</strong>\n  (note, it does not have an extension) and you will save it into the <strong>dockerextnode/client</strong>\n  folder. We will create a new Docker image, and base it on other Docker image,\n  The official Nginx image. <a href=\"https://hub.docker.com/_/nginx/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/_/nginx/</a>\n  Nginx (pronounced “engine-x”) is an open source reverse proxy server for\n  HTTP, HTTPS, SMTP, POP3, and IMAP protocols, as well as a load balancer, HTTP\n  cache, and a web server (origin server). The Nginx image will serve all our\n  static content. Here are the contents of the <strong>client/Dockerfile</strong>.\n  See the comments for explanation: <a href=\"https://github.com/savelee/docker-ext-client/blob/master/Dockerfile\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/Dockerfile</a>\n  <a href=\"https://gist.github.com/savelee/3b37ef3659918d42e4791bd658a502ce\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/3b37ef3659918d42e4791bd658a502ce</a>\n  To finally create the image, we need to run the following command from the\n  <strong>dockerextnode/client</strong> folder, in the Docker terminal window:\n  <code>$ docker build -t extclient .</code></p>\n<p><strong>Note:</strong> Because I migrated from the Boot2Docker command to\n  the Docker Machine, I wasn’t able to build here. Instead I received the\n  following error: <em>“Cannot connect to the Docker daemon.”</em> I had to run\n  this line on my CLI first, before building. Which regenerate the TSL\n  certificates for me. <code>$ docker-machine regenerate-certs default</code>\n  To test if it worked run: <code>$ docker-machine env default</code></p>\n<p>To see your newly created image, run the following Docker command: <code>$\n    docker images</code> You will see the images that are currently installed\n  on your workstation. It could look like this: <code>REPOSITORY TAG IMAGE ID\n    CREATED VIRTUAL SIZE extclient latest 4ad898544bec 4 minutes ago</code>.\n  The name <code>extclient</code>, is our Ext JS Docker image, since we\n  specified this name in the build command. To remove all images use: <code>$\n    docker rmi $(docker images -q)</code> To remove all containers including\n  the running ones use:</p>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ docker rm --force</span><br><span class=\"line\">$ docker ps -qa</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p></p>\n<p>To run a container using the image we just created run: <code>$ docker run\n    -d --name dockerextnodeclient -p 80:80 extclient</code> You can test it in\n  your browser by entering the ip address in the browser: <a href=\"http://192.168.99.100\" target=\"_blank\" rel=\"noopener\">http://192.168.99.100</a>\n  In case a Docker container automatically exits, because of an error, you\n  might want to look into the logs: <code>$ docker logs</code> For example:\n  <code>$ docker logs 2f9236343def</code> We are running in the background a\n  new container called: <em>“dockerextnode”</em>, which maps port <em>80</em>\n  to the port that the Dockerfile exposes from the image named <em>“extclient”</em>.\n  Now the container is running. To see our app inside the container we need to\n  know the ip of the Docker Machine: <code>$ docker-machine ip</code> To see\n  running containers use: <code>$ docker ps -a</code> This works, but only for\n  the front-end, not for our Node.js back-end and Mongo database. Of course,\n  you could edit the Dockerfile, and create Docker RUN commands, to install\n  Node.js and Mongo on this image. However, that would be a bit silly, and it\n  would take the magic powers of Docker away. A much better approach, would be\n  to create separate images for Sencha, Node.js and for MongoDB. That’s why\n  Docker Compose comes into play… We will look into that, in the next part of\n  the tutorial.</p>\n<h2 id=\"Read-the-next-part\"><a href=\"#Read-the-next-part\" class=\"headerlink\" title=\"Read the next part\"></a>Read\n  the next part</h2>\n<p><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7/\">Part\n    7</a></p>\n<ul>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1\">Quick\n      link to Part 1.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2\">Quick\n      link to Part 2.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3\">Quick\n      link to Part 3.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4\">Quick\n      link to Part 4.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5\">Quick\n      link to Part 5.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6\">Quick\n      link to Part 6.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7\">Quick\n      link to Part 7.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8\">Quick\n      link to Part 8.</a></li>\n</ul>"},{"title":"Tutorial: Full-stack JavaScript for the Enterprise. Getting started with: Ext JS, Node.js, Express, MongoDB and Docker. (3)","date":"2016-08-18T14:30:30.000Z","_content":"\n_This is part III of the tutorial, and covers how to setup a MongoDB NoSQL database._ \n\n<!--more-->\n\n# MongoDB & Mongoose\n\n**MongoDB** is a cross-platform document-oriented database, also known as a NoSQL database, This is different compared to a traditional table-based relational database like MySQL. Instead, the structure are JSON-like documents with dynamic schemas (MongoDB calls the format BSON), making the integration of data in certain types of applications easier and faster. MongoDB is developed by MongoDB Inc. and is published as free and open-source software under a combination of the GNU Affero General Public License and the Apache License. **Mongoose** is a MongoDB object modeling tool designed to work in an asynchronous environment. It provides a model layer for interacting with your MongoDB collections from Node. This model layer provides a common location for implementing document validation, persistence indirection, and other logic that should be abstracted from the business layer. Let’s integrate this with our Node back-end. Make sure you have MongoDB installed on your machine. Create in the root of your server folder, the following file: \n{% gist 822bf5e1e3f78ec17a51bd6b0b9a5f80 %}\n\nAfter that, run from the server folder the following command on the command-line: `$ npm install` This will install MongoDb, Mongoose and Nodemon, and if you don’t have Express yet, also express. You will have to manually start MongoDB. Open a new terminal, and use the following command on the command-line: `$ mongod` \n\nWe will change our **server/config/express.js**, to make sure bodyParser and csrf security works for posting forms.\n{% gist 1145fc1ada6acf3265584fbf83a3fef5 %}\n\nLet’s create a couple more routes, to create a CRUD application. We need a route for creating new users (POST), a route to read one user (GET), a route to update one user (PUT) and a route to remove (DELETE) a particular user. We will also need a register and authenticate route, which you will need to check if the username and password are correct. If so, it will return a JWT key, which you can store on your (mobile) client app. Open **server/routes.js** and change to:\n{% gist 0c2fb124e51b00007c215efcf4c73520 %}\n\nI’ve created another JS file (**server/config/local_settings.js**), which contains all sensitive information, such as passwords, secrets and keys. Now that this is a separate file, I don’t need to check in this file into my versioning system. It contains this:\n\n```javascript \nmodule.exports = { \n  \"secret\": \"mysecret\", \n  \"database\": \"mongodb://localhost:27017/dockerextnode\" \n}\n```\n\nNext, we will replace the **server/libs/user/index.js** with the below piece of code. Take a look into the comments, to figure out what I am doing. \n{% gist de67d85234e3cbc2bf98b33ab57660d7 %}\n\n\nNow run the server: `$ nodemon app.js `. We don’t have data in our Mongo database yet, so we will use *CURL* on the command-line, to get this fixed: \n\n``` bash\n$ curl -H \"Content-Type: application/json\" -X POST -d '{ \"username\": \"lee\", \"password\": \"mypassword\" }' \nhttp://127.0.0.1:9000/register \n```\n\nInstead of Curl, you can also use *Postman*. There’s a Postman extension available for Google Chrome: [https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en) Choose the method: **POST** With the url: **http://127.0.0.1:9000/register** Select the body tab, and create 2 x-www-form-urlencoded fields: **username** & **password**, also specify the values that belong to these fields. See screenshot: \n\n![postman](/images/postman-1024x302.png) \n\n\nIncase you want to test if all the values were correctly added to the database, you can run MongoDB from the command-line:\n\n``` bash \n$ mongo dockerextnode > db.users.find({}, function(err, users) { console.log(users) }) \n```\n\nWant to checkout all my code? I hosted it on Github: [https://github.com/savelee/docker-node-server](https://github.com/savelee/docker-node-server ) By the end of this part of the tutorial, you will have a working JavaScript server, created with Node.js and Express. The next part of this tutorial will cover the setup of a MongoDB NoSQL database. \n\n## Read the next part\n\n[Part 4](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4/)\n\n*   [Quick link to Part 1.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1)\n*   [Quick link to Part 2.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2)\n*   [Quick link to Part 3.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3)\n*   [Quick link to Part 4.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4)\n*   [Quick link to Part 5.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5)\n*   [Quick link to Part 6.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6)\n*   [Quick link to Part 7.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7)\n*   [Quick link to Part 8.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8)","source":"_posts/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3.md","raw":"---\ntitle: >-\n  Tutorial: Full-stack JavaScript for the Enterprise. Getting started with: Ext\n  JS, Node.js, Express, MongoDB and Docker. (3)\ntags:\n  - Docker\n  - Node.js\n  - MongoDB\n  - Ext JS\ncategories:\n  - Containers\ndate: 2016-08-18 16:30:30\n---\n\n_This is part III of the tutorial, and covers how to setup a MongoDB NoSQL database._ \n\n<!--more-->\n\n# MongoDB & Mongoose\n\n**MongoDB** is a cross-platform document-oriented database, also known as a NoSQL database, This is different compared to a traditional table-based relational database like MySQL. Instead, the structure are JSON-like documents with dynamic schemas (MongoDB calls the format BSON), making the integration of data in certain types of applications easier and faster. MongoDB is developed by MongoDB Inc. and is published as free and open-source software under a combination of the GNU Affero General Public License and the Apache License. **Mongoose** is a MongoDB object modeling tool designed to work in an asynchronous environment. It provides a model layer for interacting with your MongoDB collections from Node. This model layer provides a common location for implementing document validation, persistence indirection, and other logic that should be abstracted from the business layer. Let’s integrate this with our Node back-end. Make sure you have MongoDB installed on your machine. Create in the root of your server folder, the following file: \n{% gist 822bf5e1e3f78ec17a51bd6b0b9a5f80 %}\n\nAfter that, run from the server folder the following command on the command-line: `$ npm install` This will install MongoDb, Mongoose and Nodemon, and if you don’t have Express yet, also express. You will have to manually start MongoDB. Open a new terminal, and use the following command on the command-line: `$ mongod` \n\nWe will change our **server/config/express.js**, to make sure bodyParser and csrf security works for posting forms.\n{% gist 1145fc1ada6acf3265584fbf83a3fef5 %}\n\nLet’s create a couple more routes, to create a CRUD application. We need a route for creating new users (POST), a route to read one user (GET), a route to update one user (PUT) and a route to remove (DELETE) a particular user. We will also need a register and authenticate route, which you will need to check if the username and password are correct. If so, it will return a JWT key, which you can store on your (mobile) client app. Open **server/routes.js** and change to:\n{% gist 0c2fb124e51b00007c215efcf4c73520 %}\n\nI’ve created another JS file (**server/config/local_settings.js**), which contains all sensitive information, such as passwords, secrets and keys. Now that this is a separate file, I don’t need to check in this file into my versioning system. It contains this:\n\n```javascript \nmodule.exports = { \n  \"secret\": \"mysecret\", \n  \"database\": \"mongodb://localhost:27017/dockerextnode\" \n}\n```\n\nNext, we will replace the **server/libs/user/index.js** with the below piece of code. Take a look into the comments, to figure out what I am doing. \n{% gist de67d85234e3cbc2bf98b33ab57660d7 %}\n\n\nNow run the server: `$ nodemon app.js `. We don’t have data in our Mongo database yet, so we will use *CURL* on the command-line, to get this fixed: \n\n``` bash\n$ curl -H \"Content-Type: application/json\" -X POST -d '{ \"username\": \"lee\", \"password\": \"mypassword\" }' \nhttp://127.0.0.1:9000/register \n```\n\nInstead of Curl, you can also use *Postman*. There’s a Postman extension available for Google Chrome: [https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en) Choose the method: **POST** With the url: **http://127.0.0.1:9000/register** Select the body tab, and create 2 x-www-form-urlencoded fields: **username** & **password**, also specify the values that belong to these fields. See screenshot: \n\n![postman](/images/postman-1024x302.png) \n\n\nIncase you want to test if all the values were correctly added to the database, you can run MongoDB from the command-line:\n\n``` bash \n$ mongo dockerextnode > db.users.find({}, function(err, users) { console.log(users) }) \n```\n\nWant to checkout all my code? I hosted it on Github: [https://github.com/savelee/docker-node-server](https://github.com/savelee/docker-node-server ) By the end of this part of the tutorial, you will have a working JavaScript server, created with Node.js and Express. The next part of this tutorial will cover the setup of a MongoDB NoSQL database. \n\n## Read the next part\n\n[Part 4](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4/)\n\n*   [Quick link to Part 1.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1)\n*   [Quick link to Part 2.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2)\n*   [Quick link to Part 3.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3)\n*   [Quick link to Part 4.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4)\n*   [Quick link to Part 5.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5)\n*   [Quick link to Part 6.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6)\n*   [Quick link to Part 7.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7)\n*   [Quick link to Part 8.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8)","slug":"tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3","published":1,"updated":"2018-11-30T13:38:00.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncoj001zkif5wvxoe3s9","content":"<p><em>This is part III of the tutorial, and covers how to setup a MongoDB\n    NoSQL database.</em></p>\n<a id=\"more\"></a>\n<h1 id=\"MongoDB-amp-Mongoose\"><a href=\"#MongoDB-amp-Mongoose\" class=\"headerlink\" title=\"MongoDB &amp; Mongoose\"></a>MongoDB\n  &amp; Mongoose</h1>\n<p><strong>MongoDB</strong> is a cross-platform document-oriented database,\n  also known as a NoSQL database, This is different compared to a traditional\n  table-based relational database like MySQL. Instead, the structure are\n  JSON-like documents with dynamic schemas (MongoDB calls the format BSON),\n  making the integration of data in certain types of applications easier and\n  faster. MongoDB is developed by MongoDB Inc. and is published as free and\n  open-source software under a combination of the GNU Affero General Public\n  License and the Apache License. <strong>Mongoose</strong> is a MongoDB object\n  modeling tool designed to work in an asynchronous environment. It provides a\n  model layer for interacting with your MongoDB collections from Node. This\n  model layer provides a common location for implementing document validation,\n  persistence indirection, and other logic that should be abstracted from the\n  business layer. Let’s integrate this with our Node back-end. Make sure you\n  have MongoDB installed on your machine. Create in the root of your server\n  folder, the following file:<script src=\"//gist.github.com/822bf5e1e3f78ec17a51bd6b0b9a5f80.js\"></script>\n</p>\n<p>After that, run from the server folder the following command on the\n  command-line: <code>$ npm install</code> This will install MongoDb, Mongoose\n  and Nodemon, and if you don’t have Express yet, also express. You will have\n  to manually start MongoDB. Open a new terminal, and use the following command\n  on the command-line: <code>$ mongod</code></p>\n<p>We will change our <strong>server/config/express.js</strong>, to make sure\n  bodyParser and csrf security works for posting forms.<script src=\"//gist.github.com/1145fc1ada6acf3265584fbf83a3fef5.js\"></script>\n</p>\n<p>Let’s create a couple more routes, to create a CRUD application. We need a\n  route for creating new users (POST), a route to read one user (GET), a route\n  to update one user (PUT) and a route to remove (DELETE) a particular user. We\n  will also need a register and authenticate route, which you will need to\n  check if the username and password are correct. If so, it will return a JWT\n  key, which you can store on your (mobile) client app. Open <strong>server/routes.js</strong>\n  and change to:<script src=\"//gist.github.com/0c2fb124e51b00007c215efcf4c73520.js\"></script>\n</p>\n<p>I’ve created another JS file (<strong>server/config/local_settings.js</strong>),\n  which contains all sensitive information, such as passwords, secrets and\n  keys. Now that this is a separate file, I don’t need to check in this file\n  into my versioning system. It contains this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; </span><br><span class=\"line\">  <span class=\"string\">\"secret\"</span>: <span class=\"string\">\"mysecret\"</span>, </span><br><span class=\"line\">  <span class=\"string\">\"database\"</span>: <span class=\"string\">\"mongodb://localhost:27017/dockerextnode\"</span> </span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Next, we will replace the <strong>server/libs/user/index.js</strong> with\n  the below piece of code. Take a look into the comments, to figure out what I\n  am doing.<script src=\"//gist.github.com/de67d85234e3cbc2bf98b33ab57660d7.js\"></script>\n</p>\n<p>Now run the server: <code>$ nodemon app.js</code>. We don’t have data in our\n  Mongo database yet, so we will use <em>CURL</em> on the command-line, to get\n  this fixed:</p>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ curl -H <span class=\"string\">\"Content-Type: application/json\"</span> -X POST -d <span class=\"string\">'&#123; \"username\": \"lee\", \"password\": \"mypassword\" &#125;'</span> </span><br><span class=\"line\">http://127.0.0.1:9000/register</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Instead of Curl, you can also use <em>Postman</em>. There’s a Postman\n  extension available for Google Chrome: <a href=\"https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en\" target=\"_blank\" rel=\"noopener\">https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en</a>\n  Choose the method: <strong>POST</strong> With the url: <strong><a href=\"http://127.0.0.1:9000/register\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:9000/register</a></strong>\n  Select the body tab, and create 2 x-www-form-urlencoded fields: <strong>username</strong>\n  &amp; <strong>password</strong>, also specify the values that belong to these\n  fields. See screenshot:</p>\n<p><img src=\"/images/postman-1024x302.png\" alt=\"postman\"></p>\n<p>Incase you want to test if all the values were correctly added to the\n  database, you can run MongoDB from the command-line:</p>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ mongo dockerextnode &gt; db.users.find(&#123;&#125;, <span class=\"keyword\">function</span>(err, users) &#123; console.log(users) &#125;)</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Want to checkout all my code? I hosted it on Github: <a href=\"https://github.com/savelee/docker-node-server\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-node-server</a>\n  By the end of this part of the tutorial, you will have a working JavaScript\n  server, created with Node.js and Express. The next part of this tutorial will\n  cover the setup of a MongoDB NoSQL database.</p>\n<h2 id=\"Read-the-next-part\"><a href=\"#Read-the-next-part\" class=\"headerlink\" title=\"Read the next part\"></a>Read\n  the next part</h2>\n<p><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4/\">Part\n    4</a></p>\n<ul>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1\">Quick\n      link to Part 1.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2\">Quick\n      link to Part 2.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3\">Quick\n      link to Part 3.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4\">Quick\n      link to Part 4.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5\">Quick\n      link to Part 5.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6\">Quick\n      link to Part 6.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7\">Quick\n      link to Part 7.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8\">Quick\n      link to Part 8.</a></li>\n</ul>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p><em>This is part III of the tutorial, and covers how to setup a MongoDB\n    NoSQL database.</em></p>","more":"<h1 id=\"MongoDB-amp-Mongoose\"><a href=\"#MongoDB-amp-Mongoose\" class=\"headerlink\" title=\"MongoDB &amp; Mongoose\"></a>MongoDB\n  &amp; Mongoose</h1>\n<p><strong>MongoDB</strong> is a cross-platform document-oriented database,\n  also known as a NoSQL database, This is different compared to a traditional\n  table-based relational database like MySQL. Instead, the structure are\n  JSON-like documents with dynamic schemas (MongoDB calls the format BSON),\n  making the integration of data in certain types of applications easier and\n  faster. MongoDB is developed by MongoDB Inc. and is published as free and\n  open-source software under a combination of the GNU Affero General Public\n  License and the Apache License. <strong>Mongoose</strong> is a MongoDB object\n  modeling tool designed to work in an asynchronous environment. It provides a\n  model layer for interacting with your MongoDB collections from Node. This\n  model layer provides a common location for implementing document validation,\n  persistence indirection, and other logic that should be abstracted from the\n  business layer. Let’s integrate this with our Node back-end. Make sure you\n  have MongoDB installed on your machine. Create in the root of your server\n  folder, the following file:<script src=\"//gist.github.com/822bf5e1e3f78ec17a51bd6b0b9a5f80.js\"></script>\n</p>\n<p>After that, run from the server folder the following command on the\n  command-line: <code>$ npm install</code> This will install MongoDb, Mongoose\n  and Nodemon, and if you don’t have Express yet, also express. You will have\n  to manually start MongoDB. Open a new terminal, and use the following command\n  on the command-line: <code>$ mongod</code></p>\n<p>We will change our <strong>server/config/express.js</strong>, to make sure\n  bodyParser and csrf security works for posting forms.<script src=\"//gist.github.com/1145fc1ada6acf3265584fbf83a3fef5.js\"></script>\n</p>\n<p>Let’s create a couple more routes, to create a CRUD application. We need a\n  route for creating new users (POST), a route to read one user (GET), a route\n  to update one user (PUT) and a route to remove (DELETE) a particular user. We\n  will also need a register and authenticate route, which you will need to\n  check if the username and password are correct. If so, it will return a JWT\n  key, which you can store on your (mobile) client app. Open <strong>server/routes.js</strong>\n  and change to:<script src=\"//gist.github.com/0c2fb124e51b00007c215efcf4c73520.js\"></script>\n</p>\n<p>I’ve created another JS file (<strong>server/config/local_settings.js</strong>),\n  which contains all sensitive information, such as passwords, secrets and\n  keys. Now that this is a separate file, I don’t need to check in this file\n  into my versioning system. It contains this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; </span><br><span class=\"line\">  <span class=\"string\">\"secret\"</span>: <span class=\"string\">\"mysecret\"</span>, </span><br><span class=\"line\">  <span class=\"string\">\"database\"</span>: <span class=\"string\">\"mongodb://localhost:27017/dockerextnode\"</span> </span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Next, we will replace the <strong>server/libs/user/index.js</strong> with\n  the below piece of code. Take a look into the comments, to figure out what I\n  am doing.<script src=\"//gist.github.com/de67d85234e3cbc2bf98b33ab57660d7.js\"></script>\n</p>\n<p>Now run the server: <code>$ nodemon app.js</code>. We don’t have data in our\n  Mongo database yet, so we will use <em>CURL</em> on the command-line, to get\n  this fixed:</p>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ curl -H <span class=\"string\">\"Content-Type: application/json\"</span> -X POST -d <span class=\"string\">'&#123; \"username\": \"lee\", \"password\": \"mypassword\" &#125;'</span> </span><br><span class=\"line\">http://127.0.0.1:9000/register</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Instead of Curl, you can also use <em>Postman</em>. There’s a Postman\n  extension available for Google Chrome: <a href=\"https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en\" target=\"_blank\" rel=\"noopener\">https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en</a>\n  Choose the method: <strong>POST</strong> With the url: <strong><a href=\"http://127.0.0.1:9000/register\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:9000/register</a></strong>\n  Select the body tab, and create 2 x-www-form-urlencoded fields: <strong>username</strong>\n  &amp; <strong>password</strong>, also specify the values that belong to these\n  fields. See screenshot:</p>\n<p><img src=\"/images/postman-1024x302.png\" alt=\"postman\"></p>\n<p>Incase you want to test if all the values were correctly added to the\n  database, you can run MongoDB from the command-line:</p>\n<figure class=\"highlight bash\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">$ mongo dockerextnode &gt; db.users.find(&#123;&#125;, <span class=\"keyword\">function</span>(err, users) &#123; console.log(users) &#125;)</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Want to checkout all my code? I hosted it on Github: <a href=\"https://github.com/savelee/docker-node-server\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-node-server</a>\n  By the end of this part of the tutorial, you will have a working JavaScript\n  server, created with Node.js and Express. The next part of this tutorial will\n  cover the setup of a MongoDB NoSQL database.</p>\n<h2 id=\"Read-the-next-part\"><a href=\"#Read-the-next-part\" class=\"headerlink\" title=\"Read the next part\"></a>Read\n  the next part</h2>\n<p><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4/\">Part\n    4</a></p>\n<ul>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1\">Quick\n      link to Part 1.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2\">Quick\n      link to Part 2.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3\">Quick\n      link to Part 3.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4\">Quick\n      link to Part 4.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5\">Quick\n      link to Part 5.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6\">Quick\n      link to Part 6.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7\">Quick\n      link to Part 7.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8\">Quick\n      link to Part 8.</a></li>\n</ul>"},{"title":"Using Custom Icons in Your Ext JS Apps","date":"2014-03-28T10:19:30.000Z","_content":"\nDo you like the glyph attribute in Ext JS 4.2 as much as I do? With glyphs, you can implement an icon that is created from a font. \n\n<!--more-->\n\nThere are advantages to using icon fonts — they are vectors and therefore never lose quality; it’s easy to style icons without the use of Photoshop; and you make one page request to download all of the icons. The glyph attribute is available on Ext JS buttons and panels. You can download a custom icon font from a site like: [IcoMoon](http://icomoon.io/) and implement the font in your style sheet. The value of the glyph attribute is the decimal code that maps to the unicode character which represents your icon. You add this attribute to the name of your custom font, and you’re good to go:\n\n`glyph: '115@MyIconFont',`\n\nA lot of Ext JS components extend from panel, but what if you want to implement icon fonts in other components that do not extend from `Ext.panel.Panel`or `Ext.button.Button`? To answer this question, we can use the concepts that are actually happening under the hood: _A character is inserted before (or after) a certain DOM element. You can see an icon because this character is styled with a custom font (@font-face technique) that contains all of the icons._ Let’s try this ourselves:\n\n1.  With your browser’s dev tools, select the DOM element in which you want to implement an icon. Ideally put a CSS class on top of it (for example: `.arrow`), so you can easily refer to it from your Sass.\n2.  Download an icon font and map it to some character. (Let's use the following character: `>`)\n3.  Implement the icon font in your Sass:\n\n```CSS\n@font-face { \n  font-family: 'MyIconFont'; \n  src: url('../resources/fonts/Nouveau.eot'); \n  src: url('../resources/fonts/Nouveau.eot?#iefix') format('embedded-opentype'), url('../resources/fonts/Nouveau.woff') format('woff'), url('../resources/fonts/Nouveau.ttf') format('truetype'), url('../resources/fonts/Nouveau.svg#Nouveau') format('svg'); \n  font-weight: normal; font-style: normal; }\n```\n    \n4.  Alright, now comes the magic. In your Sass style sheet, write the following CSS rules:\n  \n```CSS\n.arrow:before { \n      content: \">\"; //the character mapped to an icon font-family: 'MyIconFont'; //the name of the icon font color: red; //set additional colors or dimensions... margin-right: 10px;\n}\n```  \n\nThe pseudo CSS selector `:before`will create the icon on the left side of the DOM element. The pseudo CSS selector `:after`will create the icon on the right side of the DOM element. Now that you know how to use this technique, you can try it in any components, such as templates, dataviews, form fields, etc.","source":"_posts/using-custom-icons-in-your-ext-js-apps.md","raw":"---\ntitle: Using Custom Icons in Your Ext JS Apps\ntags:\n  - glyphs\n  - icon fonts\n  - icons\n  - Sass\n  - Theming\ncategories:\n  - Theming\ndate: 2014-03-28 11:19:30\n---\n\nDo you like the glyph attribute in Ext JS 4.2 as much as I do? With glyphs, you can implement an icon that is created from a font. \n\n<!--more-->\n\nThere are advantages to using icon fonts — they are vectors and therefore never lose quality; it’s easy to style icons without the use of Photoshop; and you make one page request to download all of the icons. The glyph attribute is available on Ext JS buttons and panels. You can download a custom icon font from a site like: [IcoMoon](http://icomoon.io/) and implement the font in your style sheet. The value of the glyph attribute is the decimal code that maps to the unicode character which represents your icon. You add this attribute to the name of your custom font, and you’re good to go:\n\n`glyph: '115@MyIconFont',`\n\nA lot of Ext JS components extend from panel, but what if you want to implement icon fonts in other components that do not extend from `Ext.panel.Panel`or `Ext.button.Button`? To answer this question, we can use the concepts that are actually happening under the hood: _A character is inserted before (or after) a certain DOM element. You can see an icon because this character is styled with a custom font (@font-face technique) that contains all of the icons._ Let’s try this ourselves:\n\n1.  With your browser’s dev tools, select the DOM element in which you want to implement an icon. Ideally put a CSS class on top of it (for example: `.arrow`), so you can easily refer to it from your Sass.\n2.  Download an icon font and map it to some character. (Let's use the following character: `>`)\n3.  Implement the icon font in your Sass:\n\n```CSS\n@font-face { \n  font-family: 'MyIconFont'; \n  src: url('../resources/fonts/Nouveau.eot'); \n  src: url('../resources/fonts/Nouveau.eot?#iefix') format('embedded-opentype'), url('../resources/fonts/Nouveau.woff') format('woff'), url('../resources/fonts/Nouveau.ttf') format('truetype'), url('../resources/fonts/Nouveau.svg#Nouveau') format('svg'); \n  font-weight: normal; font-style: normal; }\n```\n    \n4.  Alright, now comes the magic. In your Sass style sheet, write the following CSS rules:\n  \n```CSS\n.arrow:before { \n      content: \">\"; //the character mapped to an icon font-family: 'MyIconFont'; //the name of the icon font color: red; //set additional colors or dimensions... margin-right: 10px;\n}\n```  \n\nThe pseudo CSS selector `:before`will create the icon on the left side of the DOM element. The pseudo CSS selector `:after`will create the icon on the right side of the DOM element. Now that you know how to use this technique, you can try it in any components, such as templates, dataviews, form fields, etc.","slug":"using-custom-icons-in-your-ext-js-apps","published":1,"updated":"2018-11-30T19:05:42.929Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncok0021kif5asd2mb1j","content":"<p>Do you like the glyph attribute in Ext JS 4.2 as much as I do? With glyphs,\n  you can implement an icon that is created from a font.</p>\n<a id=\"more\"></a>\n<p>There are advantages to using icon fonts — they are vectors and therefore\n  never lose quality; it’s easy to style icons without the use of Photoshop;\n  and you make one page request to download all of the icons. The glyph\n  attribute is available on Ext JS buttons and panels. You can download a\n  custom icon font from a site like: <a href=\"http://icomoon.io/\" target=\"_blank\" rel=\"noopener\">IcoMoon</a>\n  and implement the font in your style sheet. The value of the glyph attribute\n  is the decimal code that maps to the unicode character which represents your\n  icon. You add this attribute to the name of your custom font, and you’re good\n  to go:</p>\n<p><code>glyph: &#39;115@MyIconFont&#39;,</code></p>\n<p>A lot of Ext JS components extend from panel, but what if you want to\n  implement icon fonts in other components that do not extend from <code>Ext.panel.Panel</code>or\n  <code>Ext.button.Button</code>? To answer this question, we can use the\n  concepts that are actually happening under the hood: <em>A character is\n    inserted before (or after) a certain DOM element. You can see an icon\n    because this character is styled with a custom font (@font-face technique)\n    that contains all of the icons.</em> Let’s try this ourselves:</p>\n<ol>\n  <li>With your browser’s dev tools, select the DOM element in which you want\n    to implement an icon. Ideally put a CSS class on top of it (for example:\n    <code>.arrow</code>), so you can easily refer to it from your Sass.</li>\n  <li>Download an icon font and map it to some character. (Let’s use the\n    following character: <code>&gt;</code>)</li>\n  <li>Implement the icon font in your Sass:</li>\n</ol>\n<figure class=\"highlight css\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@<span class=\"keyword\">font-face</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">'MyIconFont'</span>; </span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'../resources/fonts/Nouveau.eot'</span>); </span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'../resources/fonts/Nouveau.eot?#iefix'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'embedded-opentype'</span>), <span class=\"built_in\">url</span>(<span class=\"string\">'../resources/fonts/Nouveau.woff'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff'</span>), <span class=\"built_in\">url</span>(<span class=\"string\">'../resources/fonts/Nouveau.ttf'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'truetype'</span>), <span class=\"built_in\">url</span>(<span class=\"string\">'../resources/fonts/Nouveau.svg#Nouveau'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'svg'</span>); </span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: normal; <span class=\"attribute\">font-style</span>: normal; &#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"4\">\n  <li>Alright, now comes the magic. In your Sass style sheet, write the\n    following CSS rules:</li>\n</ol>\n<pre><code class=\"CSS\"><span class=\"selector-class\">.arrow</span><span class=\"selector-pseudo\">:before</span> { \n      content: \"&gt;\"; //the character mapped to an icon font-family: 'MyIconFont'; //the name of the icon font color: red; //set additional colors or dimensions... margin-right: 10px;\n}\n</code></pre>\n<p>The pseudo CSS selector <code>:before</code>will create the icon on the left\n  side of the DOM element. The pseudo CSS selector <code>:after</code>will\n  create the icon on the right side of the DOM element. Now that you know how\n  to use this technique, you can try it in any components, such as templates,\n  dataviews, form fields, etc.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>Do you like the glyph attribute in Ext JS 4.2 as much as I do? With glyphs,\n  you can implement an icon that is created from a font.</p>","more":"<p>There are advantages to using icon fonts — they are vectors and therefore\n  never lose quality; it’s easy to style icons without the use of Photoshop;\n  and you make one page request to download all of the icons. The glyph\n  attribute is available on Ext JS buttons and panels. You can download a\n  custom icon font from a site like: <a href=\"http://icomoon.io/\" target=\"_blank\" rel=\"noopener\">IcoMoon</a>\n  and implement the font in your style sheet. The value of the glyph attribute\n  is the decimal code that maps to the unicode character which represents your\n  icon. You add this attribute to the name of your custom font, and you’re good\n  to go:</p>\n<p><code>glyph: &#39;115@MyIconFont&#39;,</code></p>\n<p>A lot of Ext JS components extend from panel, but what if you want to\n  implement icon fonts in other components that do not extend from <code>Ext.panel.Panel</code>or\n  <code>Ext.button.Button</code>? To answer this question, we can use the\n  concepts that are actually happening under the hood: <em>A character is\n    inserted before (or after) a certain DOM element. You can see an icon\n    because this character is styled with a custom font (@font-face technique)\n    that contains all of the icons.</em> Let’s try this ourselves:</p>\n<ol>\n  <li>With your browser’s dev tools, select the DOM element in which you want\n    to implement an icon. Ideally put a CSS class on top of it (for example:\n    <code>.arrow</code>), so you can easily refer to it from your Sass.</li>\n  <li>Download an icon font and map it to some character. (Let’s use the\n    following character: <code>&gt;</code>)</li>\n  <li>Implement the icon font in your Sass:</li>\n</ol>\n<figure class=\"highlight css\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@<span class=\"keyword\">font-face</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">'MyIconFont'</span>; </span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'../resources/fonts/Nouveau.eot'</span>); </span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'../resources/fonts/Nouveau.eot?#iefix'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'embedded-opentype'</span>), <span class=\"built_in\">url</span>(<span class=\"string\">'../resources/fonts/Nouveau.woff'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff'</span>), <span class=\"built_in\">url</span>(<span class=\"string\">'../resources/fonts/Nouveau.ttf'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'truetype'</span>), <span class=\"built_in\">url</span>(<span class=\"string\">'../resources/fonts/Nouveau.svg#Nouveau'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'svg'</span>); </span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: normal; <span class=\"attribute\">font-style</span>: normal; &#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"4\">\n  <li>Alright, now comes the magic. In your Sass style sheet, write the\n    following CSS rules:</li>\n</ol>\n<pre><code class=\"CSS\"><span class=\"selector-class\">.arrow</span><span class=\"selector-pseudo\">:before</span> { \n      content: \"&gt;\"; //the character mapped to an icon font-family: 'MyIconFont'; //the name of the icon font color: red; //set additional colors or dimensions... margin-right: 10px;\n}\n</code></pre>\n<p>The pseudo CSS selector <code>:before</code>will create the icon on the left\n  side of the DOM element. The pseudo CSS selector <code>:after</code>will\n  create the icon on the right side of the DOM element. Now that you know how\n  to use this technique, you can try it in any components, such as templates,\n  dataviews, form fields, etc.</p>"},{"title":"Using Custom Fonts with Sencha Architect","date":"2014-07-08T06:12:44.000Z","_content":"\nBack in the days when websites were restricted to typical fonts such as Arial, Georgia, Times and so on, fonts were delivered from the user’s machine. Fortunately today, because of HTML5 and CSS3, browsers support embedded web fonts.\n\nThis time, I will explain how to use custom fonts with Sencha Architect. For this tutorial, I will use one of the Sencha Touch starter apps, with the default theme. However, you can also use these tips for other Sencha Touch or Ext JS apps.\n\n<!--more-->\n\n### Incorporating a custom font from a font service\n\nIf you haven’t done so, drag the **Default** theme into your project (I used one of the Sencha Touch starter apps). **Apply** the Default theme, to create a custom theme extension.\n\n1.  Select the **MyDefaultTheme**, and click on the scss + button, to add a new Sass snippet.\n\n![](/images/sass-snippet.png)\n\n3.  Click on the right arrow button of the Scss Resource to enter the Sass code snippet properties.\n\n4.  Set the **compile order** to `beforeVariables`\n![](/images/compile-order.png)\n\n_Note: One thing you should know about working with custom fonts is that font imports must always be at the very top of your stylesheet. If you don’t change the compile order of the Scss resource, this snippet will be inserted after all the Sencha theme styles are inserted. That would cause your custom fonts to not be visible._\n\n7.  A font service (or online font provider) is a directory of free hosted web fonts. This is nice, because with a font service, you don’t need to host the fonts locally, and therefore you don’t have to deal with font copyrights. There are a couple of popular font services, such as Google Web Font or Typekit.\n\nLet’s use [Google Web Font](https://www.google.com/fonts) and you can choose a font you like.\n\nOnce, you have found the font you want, click the **Add to Collection** button.\n\n![](/images/google-fonts.png)\n\nNext, click the “Use” tab. Scroll down to paragraph **#3**, and click the **@import** tab. Then, copy the code it displays. \n![](/images/google-fonts-add.png)\n\n12.  Open Architect, in the **Code editor** paste the font code, for example:\n\n``` Sass\n@import\nurl(http://fonts.googleapis.com/css?family=Exo&subset=latin,latin-ext);\n```\n\n14.  Select the **MyDefaultTheme** and click on the Theme tab in the config inspector.\n\n15.  Here, filter for font. In Ext.Class, you can set the **font family**. Set it to the following value (depending on the font you choose):\n\n`'Exo', sans-serif;`\n\nNow go back to the Design view, (if you don’t see anything, hit the “Refresh” button) and preview your new font.\n\n![](/images/preview.png)\n\n### Incorporating a custom @font-face (local) font\n\nBut what if you want to use your own font? Or, maybe your company has its own font you want to use. Before we get into that, let me explain a little more about local fonts.\n\n@font-face is a CSS technique used to integrate custom web fonts. With system fonts, it picks the font if available in your OS, @font-face downloads the font from the Internet. Unfortunately, the major browsers have not standardized on one web font solution. Therefore, you have to embed multiple webfont extensions into your stylesheet.\n\nYou can get these packages of fonts online. For example, [http://www.fontsquirrel.com](http://www.fontsquirrel.com) is a website where you can download fonts, 100% free for commercial use.\n\n1.  Select the **MyDefaultTheme**, and click on the scss + button, to add a new Sass snippet.\n2.  Click on the right arrow button of the Scss Resource to enter the Sass code snippet properties.\n3.  Set the **compile order** to `beforeVariables`\n4.  Now let's download a nice font-face kit from font-squirel.com to your hard drive, for example: [http://www.fontsquirrel.com/fonts/exo-2](http://www.fontsquirrel.com/fonts/exo-2)\n\nClick on the **Webfont kit** tab, make sure the following extensions are included in the package: **ttf, eot, woff, svg,** and hit the blue **Download @Font-face Kit** button.\n\n5.  Extract the zip file, and open one of the regular font folders. Check out the .css stylesheet that’s included, and copy the import lines of code.\n6.  Go back to Sencha Architect, in the **Code editor** of the MyDefaultTheme, and paste the import. For example:\n\n``` CSS\n@font-face {\n    font-family: 'exo_2.0regular';\n    src: url('Exo2.0-Regular-webfont.eot');\n    src: url('Exo2.0-Regular-webfont.eot?#iefix') format('embedded-opentype'),\n         url('Exo2.0-Regular-webfont.woff') format('woff'),\n         url('Exo2.0-Regular-webfont.ttf') format('truetype'),\n         url('Exo2.0-Regular-webfont.svg#exo_2.0regular') format('svg');\n    font-weight: normal;\n    font-style: normal;\n}\n```\n\n7. Now save your Architect project, and copy the 4 font extensions over to your project **resources** folder in your file system; if you want, you may create a subfolder **fonts** here.\n\n8.  Since my fonts are located in _resources/fonts/_, I need to fix the path in my Architect snippet. Sencha Architect expects the fonts to be located in the _/theme/_ folder. I also renamed the font-family name:\n\n``` SCSS\n@import url(http://fonts.googleapis.com/css?family=Exo&subset=latin,latin-ext);\n \n@font-face {\n    font-family: 'Exo2';\n    src: url('../../resources/fonts/Exo2.0-Regular-webfont.eot');\n    src: url('../../resources/fonts/Exo2.0-Regular-webfont.eot?#iefix') format('embedded-opentype'),\n         url('../../resources/fonts/Exo2.0-Regular-webfont.woff') format('woff'),\n         url('../../resources/fonts/Exo2.0-Regular-webfont.ttf') format('truetype'),\n         url('../../resources/fonts/Exo2.0-Regular-webfont.svg#exo_2.0regular') format('svg');\n    font-weight: normal;\n    font-style: normal;\n}\n```\n\n9. Select the **MyDefaultTheme**, and click on the **Theme** tab.\n\n10. Here, filter for font. In **Ext.Class**, you can set the **font family**. Set it to the following value: (depending on the font you choose):\n\n`'Exo2';`\n\n11. Compile your project, and test the result in your browser. You will see the new font.\n","source":"_posts/using-custom-fonts-with-sencha-architect-2.md","raw":"---\ntitle: Using Custom Fonts with Sencha Architect\ntags:\n  - Custom fonts\n  - Font-Face\n  - Sencha Architect\ncategories:\n  - Sencha Architect\ndate: 2014-07-08 08:12:44\n---\n\nBack in the days when websites were restricted to typical fonts such as Arial, Georgia, Times and so on, fonts were delivered from the user’s machine. Fortunately today, because of HTML5 and CSS3, browsers support embedded web fonts.\n\nThis time, I will explain how to use custom fonts with Sencha Architect. For this tutorial, I will use one of the Sencha Touch starter apps, with the default theme. However, you can also use these tips for other Sencha Touch or Ext JS apps.\n\n<!--more-->\n\n### Incorporating a custom font from a font service\n\nIf you haven’t done so, drag the **Default** theme into your project (I used one of the Sencha Touch starter apps). **Apply** the Default theme, to create a custom theme extension.\n\n1.  Select the **MyDefaultTheme**, and click on the scss + button, to add a new Sass snippet.\n\n![](/images/sass-snippet.png)\n\n3.  Click on the right arrow button of the Scss Resource to enter the Sass code snippet properties.\n\n4.  Set the **compile order** to `beforeVariables`\n![](/images/compile-order.png)\n\n_Note: One thing you should know about working with custom fonts is that font imports must always be at the very top of your stylesheet. If you don’t change the compile order of the Scss resource, this snippet will be inserted after all the Sencha theme styles are inserted. That would cause your custom fonts to not be visible._\n\n7.  A font service (or online font provider) is a directory of free hosted web fonts. This is nice, because with a font service, you don’t need to host the fonts locally, and therefore you don’t have to deal with font copyrights. There are a couple of popular font services, such as Google Web Font or Typekit.\n\nLet’s use [Google Web Font](https://www.google.com/fonts) and you can choose a font you like.\n\nOnce, you have found the font you want, click the **Add to Collection** button.\n\n![](/images/google-fonts.png)\n\nNext, click the “Use” tab. Scroll down to paragraph **#3**, and click the **@import** tab. Then, copy the code it displays. \n![](/images/google-fonts-add.png)\n\n12.  Open Architect, in the **Code editor** paste the font code, for example:\n\n``` Sass\n@import\nurl(http://fonts.googleapis.com/css?family=Exo&subset=latin,latin-ext);\n```\n\n14.  Select the **MyDefaultTheme** and click on the Theme tab in the config inspector.\n\n15.  Here, filter for font. In Ext.Class, you can set the **font family**. Set it to the following value (depending on the font you choose):\n\n`'Exo', sans-serif;`\n\nNow go back to the Design view, (if you don’t see anything, hit the “Refresh” button) and preview your new font.\n\n![](/images/preview.png)\n\n### Incorporating a custom @font-face (local) font\n\nBut what if you want to use your own font? Or, maybe your company has its own font you want to use. Before we get into that, let me explain a little more about local fonts.\n\n@font-face is a CSS technique used to integrate custom web fonts. With system fonts, it picks the font if available in your OS, @font-face downloads the font from the Internet. Unfortunately, the major browsers have not standardized on one web font solution. Therefore, you have to embed multiple webfont extensions into your stylesheet.\n\nYou can get these packages of fonts online. For example, [http://www.fontsquirrel.com](http://www.fontsquirrel.com) is a website where you can download fonts, 100% free for commercial use.\n\n1.  Select the **MyDefaultTheme**, and click on the scss + button, to add a new Sass snippet.\n2.  Click on the right arrow button of the Scss Resource to enter the Sass code snippet properties.\n3.  Set the **compile order** to `beforeVariables`\n4.  Now let's download a nice font-face kit from font-squirel.com to your hard drive, for example: [http://www.fontsquirrel.com/fonts/exo-2](http://www.fontsquirrel.com/fonts/exo-2)\n\nClick on the **Webfont kit** tab, make sure the following extensions are included in the package: **ttf, eot, woff, svg,** and hit the blue **Download @Font-face Kit** button.\n\n5.  Extract the zip file, and open one of the regular font folders. Check out the .css stylesheet that’s included, and copy the import lines of code.\n6.  Go back to Sencha Architect, in the **Code editor** of the MyDefaultTheme, and paste the import. For example:\n\n``` CSS\n@font-face {\n    font-family: 'exo_2.0regular';\n    src: url('Exo2.0-Regular-webfont.eot');\n    src: url('Exo2.0-Regular-webfont.eot?#iefix') format('embedded-opentype'),\n         url('Exo2.0-Regular-webfont.woff') format('woff'),\n         url('Exo2.0-Regular-webfont.ttf') format('truetype'),\n         url('Exo2.0-Regular-webfont.svg#exo_2.0regular') format('svg');\n    font-weight: normal;\n    font-style: normal;\n}\n```\n\n7. Now save your Architect project, and copy the 4 font extensions over to your project **resources** folder in your file system; if you want, you may create a subfolder **fonts** here.\n\n8.  Since my fonts are located in _resources/fonts/_, I need to fix the path in my Architect snippet. Sencha Architect expects the fonts to be located in the _/theme/_ folder. I also renamed the font-family name:\n\n``` SCSS\n@import url(http://fonts.googleapis.com/css?family=Exo&subset=latin,latin-ext);\n \n@font-face {\n    font-family: 'Exo2';\n    src: url('../../resources/fonts/Exo2.0-Regular-webfont.eot');\n    src: url('../../resources/fonts/Exo2.0-Regular-webfont.eot?#iefix') format('embedded-opentype'),\n         url('../../resources/fonts/Exo2.0-Regular-webfont.woff') format('woff'),\n         url('../../resources/fonts/Exo2.0-Regular-webfont.ttf') format('truetype'),\n         url('../../resources/fonts/Exo2.0-Regular-webfont.svg#exo_2.0regular') format('svg');\n    font-weight: normal;\n    font-style: normal;\n}\n```\n\n9. Select the **MyDefaultTheme**, and click on the **Theme** tab.\n\n10. Here, filter for font. In **Ext.Class**, you can set the **font family**. Set it to the following value: (depending on the font you choose):\n\n`'Exo2';`\n\n11. Compile your project, and test the result in your browser. You will see the new font.\n","slug":"using-custom-fonts-with-sencha-architect-2","published":1,"updated":"2018-11-30T18:39:10.011Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncol0024kif5vufy1me3","content":"<p>Back in the days when websites were restricted to typical fonts such as\n  Arial, Georgia, Times and so on, fonts were delivered from the user’s\n  machine. Fortunately today, because of HTML5 and CSS3, browsers support\n  embedded web fonts.</p>\n<p>This time, I will explain how to use custom fonts with Sencha Architect. For\n  this tutorial, I will use one of the Sencha Touch starter apps, with the\n  default theme. However, you can also use these tips for other Sencha Touch or\n  Ext JS apps.</p>\n<a id=\"more\"></a>\n<h3 id=\"Incorporating-a-custom-font-from-a-font-service\"><a href=\"#Incorporating-a-custom-font-from-a-font-service\" class=\"headerlink\" title=\"Incorporating a custom font from a font service\"></a>Incorporating\n  a custom font from a font service</h3>\n<p>If you haven’t done so, drag the <strong>Default</strong> theme into your\n  project (I used one of the Sencha Touch starter apps). <strong>Apply</strong>\n  the Default theme, to create a custom theme extension.</p>\n<ol>\n  <li>Select the <strong>MyDefaultTheme</strong>, and click on the scss +\n    button, to add a new Sass snippet.</li>\n</ol>\n<p><img src=\"/images/sass-snippet.png\" alt=\"\"></p>\n<ol start=\"3\">\n  <li>\n    <p>Click on the right arrow button of the Scss Resource to enter the Sass\n      code snippet properties.</p>\n  </li>\n  <li>\n    <p>Set the <strong>compile order</strong> to <code>beforeVariables</code>\n      <img src=\"/images/compile-order.png\" alt=\"\"></p>\n  </li>\n</ol>\n<p><em>Note: One thing you should know about working with custom fonts is that\n    font imports must always be at the very top of your stylesheet. If you\n    don’t change the compile order of the Scss resource, this snippet will be\n    inserted after all the Sencha theme styles are inserted. That would cause\n    your custom fonts to not be visible.</em></p>\n<ol start=\"7\">\n  <li>A font service (or online font provider) is a directory of free hosted\n    web fonts. This is nice, because with a font service, you don’t need to\n    host the fonts locally, and therefore you don’t have to deal with font\n    copyrights. There are a couple of popular font services, such as Google Web\n    Font or Typekit.</li>\n</ol>\n<p>Let’s use <a href=\"https://www.google.com/fonts\" target=\"_blank\" rel=\"noopener\">Google Web Font</a> and you\n  can choose a font you like.</p>\n<p>Once, you have found the font you want, click the <strong>Add to Collection</strong>\n  button.</p>\n<p><img src=\"/images/google-fonts.png\" alt=\"\"></p>\n<p>Next, click the “Use” tab. Scroll down to paragraph <strong>#3</strong>, and\n  click the <strong>@import</strong> tab. Then, copy the code it displays. <img src=\"/images/google-fonts-add.png\" alt=\"\"></p>\n<ol start=\"12\">\n  <li>Open Architect, in the <strong>Code editor</strong> paste the font code,\n    for example:</li>\n</ol>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@import</span><br><span class=\"line\">url(http://fonts.googleapis.com/css?family=Exo&amp;subset=latin,latin-ext);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"14\">\n  <li>\n    <p>Select the <strong>MyDefaultTheme</strong> and click on the Theme tab in\n      the config inspector.</p>\n  </li>\n  <li>\n    <p>Here, filter for font. In Ext.Class, you can set the <strong>font family</strong>.\n      Set it to the following value (depending on the font you choose):</p>\n  </li>\n</ol>\n<p><code>&#39;Exo&#39;, sans-serif;</code></p>\n<p>Now go back to the Design view, (if you don’t see anything, hit the\n  “Refresh” button) and preview your new font.</p>\n<p><img src=\"/images/preview.png\" alt=\"\"></p>\n<h3 id=\"Incorporating-a-custom-font-face-local-font\"><a href=\"#Incorporating-a-custom-font-face-local-font\" class=\"headerlink\" title=\"Incorporating a custom @font-face (local) font\"></a>Incorporating\n  a custom @font-face (local) font</h3>\n<p>But what if you want to use your own font? Or, maybe your company has its\n  own font you want to use. Before we get into that, let me explain a little\n  more about local fonts.</p>\n<p>@font-face is a CSS technique used to integrate custom web fonts. With\n  system fonts, it picks the font if available in your OS, @font-face downloads\n  the font from the Internet. Unfortunately, the major browsers have not\n  standardized on one web font solution. Therefore, you have to embed multiple\n  webfont extensions into your stylesheet.</p>\n<p>You can get these packages of fonts online. For example, <a href=\"http://www.fontsquirrel.com\" target=\"_blank\" rel=\"noopener\">http://www.fontsquirrel.com</a>\n  is a website where you can download fonts, 100% free for commercial use.</p>\n<ol>\n  <li>Select the <strong>MyDefaultTheme</strong>, and click on the scss +\n    button, to add a new Sass snippet.</li>\n  <li>Click on the right arrow button of the Scss Resource to enter the Sass\n    code snippet properties.</li>\n  <li>Set the <strong>compile order</strong> to <code>beforeVariables</code></li>\n  <li>Now let’s download a nice font-face kit from font-squirel.com to your\n    hard drive, for example: <a href=\"http://www.fontsquirrel.com/fonts/exo-2\" target=\"_blank\" rel=\"noopener\">http://www.fontsquirrel.com/fonts/exo-2</a></li>\n</ol>\n<p>Click on the <strong>Webfont kit</strong> tab, make sure the following\n  extensions are included in the package: <strong>ttf, eot, woff, svg,</strong>\n  and hit the blue <strong>Download @Font-face Kit</strong> button.</p>\n<ol start=\"5\">\n  <li>Extract the zip file, and open one of the regular font folders. Check out\n    the .css stylesheet that’s included, and copy the import lines of code.</li>\n  <li>Go back to Sencha Architect, in the <strong>Code editor</strong> of the\n    MyDefaultTheme, and paste the import. For example:</li>\n</ol>\n<figure class=\"highlight css\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@<span class=\"keyword\">font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'exo_2.0regular'</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'Exo2.0-Regular-webfont.eot'</span>);</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'Exo2.0-Regular-webfont.eot?#iefix'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'embedded-opentype'</span>),</span><br><span class=\"line\">         <span class=\"built_in\">url</span>(<span class=\"string\">'Exo2.0-Regular-webfont.woff'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff'</span>),</span><br><span class=\"line\">         <span class=\"built_in\">url</span>(<span class=\"string\">'Exo2.0-Regular-webfont.ttf'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'truetype'</span>),</span><br><span class=\"line\">         <span class=\"built_in\">url</span>(<span class=\"string\">'Exo2.0-Regular-webfont.svg#exo_2.0regular'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'svg'</span>);</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"7\">\n  <li>\n    <p>Now save your Architect project, and copy the 4 font extensions over to\n      your project <strong>resources</strong> folder in your file system; if\n      you want, you may create a subfolder <strong>fonts</strong> here.</p>\n  </li>\n  <li>\n    <p>Since my fonts are located in <em>resources/fonts/</em>, I need to fix\n      the path in my Architect snippet. Sencha Architect expects the fonts to\n      be located in the <em>/theme/</em> folder. I also renamed the font-family\n      name:</p>\n  </li>\n</ol>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@<span class=\"keyword\">import</span> url(http://fonts.googleapis.com/css?family=Exo&amp;subset=latin,latin-ext);</span><br><span class=\"line\"> </span><br><span class=\"line\">@font-face &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'Exo2'</span>;</span><br><span class=\"line\">    src: url(<span class=\"string\">'../../resources/fonts/Exo2.0-Regular-webfont.eot'</span>);</span><br><span class=\"line\">    src: url(<span class=\"string\">'../../resources/fonts/Exo2.0-Regular-webfont.eot?#iefix'</span>) format(<span class=\"string\">'embedded-opentype'</span>),</span><br><span class=\"line\">         url(<span class=\"string\">'../../resources/fonts/Exo2.0-Regular-webfont.woff'</span>) format(<span class=\"string\">'woff'</span>),</span><br><span class=\"line\">         url(<span class=\"string\">'../../resources/fonts/Exo2.0-Regular-webfont.ttf'</span>) format(<span class=\"string\">'truetype'</span>),</span><br><span class=\"line\">         url(<span class=\"string\">'../../resources/fonts/Exo2.0-Regular-webfont.svg#exo_2.0regular'</span>) format(<span class=\"string\">'svg'</span>);</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"9\">\n  <li>\n    <p>Select the <strong>MyDefaultTheme</strong>, and click on the <strong>Theme</strong>\n      tab.</p>\n  </li>\n  <li>\n    <p>Here, filter for font. In <strong>Ext.Class</strong>, you can set the\n      <strong>font family</strong>. Set it to the following value: (depending\n      on the font you choose):</p>\n  </li>\n</ol>\n<p><code>&#39;Exo2&#39;;</code></p>\n<ol start=\"11\">\n  <li>Compile your project, and test the result in your browser. You will see\n    the new font.</li>\n</ol>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>Back in the days when websites were restricted to typical fonts such as\n  Arial, Georgia, Times and so on, fonts were delivered from the user’s\n  machine. Fortunately today, because of HTML5 and CSS3, browsers support\n  embedded web fonts.</p>\n<p>This time, I will explain how to use custom fonts with Sencha Architect. For\n  this tutorial, I will use one of the Sencha Touch starter apps, with the\n  default theme. However, you can also use these tips for other Sencha Touch or\n  Ext JS apps.</p>","more":"<h3 id=\"Incorporating-a-custom-font-from-a-font-service\"><a href=\"#Incorporating-a-custom-font-from-a-font-service\" class=\"headerlink\" title=\"Incorporating a custom font from a font service\"></a>Incorporating\n  a custom font from a font service</h3>\n<p>If you haven’t done so, drag the <strong>Default</strong> theme into your\n  project (I used one of the Sencha Touch starter apps). <strong>Apply</strong>\n  the Default theme, to create a custom theme extension.</p>\n<ol>\n  <li>Select the <strong>MyDefaultTheme</strong>, and click on the scss +\n    button, to add a new Sass snippet.</li>\n</ol>\n<p><img src=\"/images/sass-snippet.png\" alt=\"\"></p>\n<ol start=\"3\">\n  <li>\n    <p>Click on the right arrow button of the Scss Resource to enter the Sass\n      code snippet properties.</p>\n  </li>\n  <li>\n    <p>Set the <strong>compile order</strong> to <code>beforeVariables</code>\n      <img src=\"/images/compile-order.png\" alt=\"\"></p>\n  </li>\n</ol>\n<p><em>Note: One thing you should know about working with custom fonts is that\n    font imports must always be at the very top of your stylesheet. If you\n    don’t change the compile order of the Scss resource, this snippet will be\n    inserted after all the Sencha theme styles are inserted. That would cause\n    your custom fonts to not be visible.</em></p>\n<ol start=\"7\">\n  <li>A font service (or online font provider) is a directory of free hosted\n    web fonts. This is nice, because with a font service, you don’t need to\n    host the fonts locally, and therefore you don’t have to deal with font\n    copyrights. There are a couple of popular font services, such as Google Web\n    Font or Typekit.</li>\n</ol>\n<p>Let’s use <a href=\"https://www.google.com/fonts\" target=\"_blank\" rel=\"noopener\">Google Web Font</a> and you\n  can choose a font you like.</p>\n<p>Once, you have found the font you want, click the <strong>Add to Collection</strong>\n  button.</p>\n<p><img src=\"/images/google-fonts.png\" alt=\"\"></p>\n<p>Next, click the “Use” tab. Scroll down to paragraph <strong>#3</strong>, and\n  click the <strong>@import</strong> tab. Then, copy the code it displays. <img src=\"/images/google-fonts-add.png\" alt=\"\"></p>\n<ol start=\"12\">\n  <li>Open Architect, in the <strong>Code editor</strong> paste the font code,\n    for example:</li>\n</ol>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@import</span><br><span class=\"line\">url(http://fonts.googleapis.com/css?family=Exo&amp;subset=latin,latin-ext);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"14\">\n  <li>\n    <p>Select the <strong>MyDefaultTheme</strong> and click on the Theme tab in\n      the config inspector.</p>\n  </li>\n  <li>\n    <p>Here, filter for font. In Ext.Class, you can set the <strong>font family</strong>.\n      Set it to the following value (depending on the font you choose):</p>\n  </li>\n</ol>\n<p><code>&#39;Exo&#39;, sans-serif;</code></p>\n<p>Now go back to the Design view, (if you don’t see anything, hit the\n  “Refresh” button) and preview your new font.</p>\n<p><img src=\"/images/preview.png\" alt=\"\"></p>\n<h3 id=\"Incorporating-a-custom-font-face-local-font\"><a href=\"#Incorporating-a-custom-font-face-local-font\" class=\"headerlink\" title=\"Incorporating a custom @font-face (local) font\"></a>Incorporating\n  a custom @font-face (local) font</h3>\n<p>But what if you want to use your own font? Or, maybe your company has its\n  own font you want to use. Before we get into that, let me explain a little\n  more about local fonts.</p>\n<p>@font-face is a CSS technique used to integrate custom web fonts. With\n  system fonts, it picks the font if available in your OS, @font-face downloads\n  the font from the Internet. Unfortunately, the major browsers have not\n  standardized on one web font solution. Therefore, you have to embed multiple\n  webfont extensions into your stylesheet.</p>\n<p>You can get these packages of fonts online. For example, <a href=\"http://www.fontsquirrel.com\" target=\"_blank\" rel=\"noopener\">http://www.fontsquirrel.com</a>\n  is a website where you can download fonts, 100% free for commercial use.</p>\n<ol>\n  <li>Select the <strong>MyDefaultTheme</strong>, and click on the scss +\n    button, to add a new Sass snippet.</li>\n  <li>Click on the right arrow button of the Scss Resource to enter the Sass\n    code snippet properties.</li>\n  <li>Set the <strong>compile order</strong> to <code>beforeVariables</code></li>\n  <li>Now let’s download a nice font-face kit from font-squirel.com to your\n    hard drive, for example: <a href=\"http://www.fontsquirrel.com/fonts/exo-2\" target=\"_blank\" rel=\"noopener\">http://www.fontsquirrel.com/fonts/exo-2</a></li>\n</ol>\n<p>Click on the <strong>Webfont kit</strong> tab, make sure the following\n  extensions are included in the package: <strong>ttf, eot, woff, svg,</strong>\n  and hit the blue <strong>Download @Font-face Kit</strong> button.</p>\n<ol start=\"5\">\n  <li>Extract the zip file, and open one of the regular font folders. Check out\n    the .css stylesheet that’s included, and copy the import lines of code.</li>\n  <li>Go back to Sencha Architect, in the <strong>Code editor</strong> of the\n    MyDefaultTheme, and paste the import. For example:</li>\n</ol>\n<figure class=\"highlight css\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@<span class=\"keyword\">font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'exo_2.0regular'</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'Exo2.0-Regular-webfont.eot'</span>);</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'Exo2.0-Regular-webfont.eot?#iefix'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'embedded-opentype'</span>),</span><br><span class=\"line\">         <span class=\"built_in\">url</span>(<span class=\"string\">'Exo2.0-Regular-webfont.woff'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff'</span>),</span><br><span class=\"line\">         <span class=\"built_in\">url</span>(<span class=\"string\">'Exo2.0-Regular-webfont.ttf'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'truetype'</span>),</span><br><span class=\"line\">         <span class=\"built_in\">url</span>(<span class=\"string\">'Exo2.0-Regular-webfont.svg#exo_2.0regular'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'svg'</span>);</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"7\">\n  <li>\n    <p>Now save your Architect project, and copy the 4 font extensions over to\n      your project <strong>resources</strong> folder in your file system; if\n      you want, you may create a subfolder <strong>fonts</strong> here.</p>\n  </li>\n  <li>\n    <p>Since my fonts are located in <em>resources/fonts/</em>, I need to fix\n      the path in my Architect snippet. Sencha Architect expects the fonts to\n      be located in the <em>/theme/</em> folder. I also renamed the font-family\n      name:</p>\n  </li>\n</ol>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@<span class=\"keyword\">import</span> url(http://fonts.googleapis.com/css?family=Exo&amp;subset=latin,latin-ext);</span><br><span class=\"line\"> </span><br><span class=\"line\">@font-face &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'Exo2'</span>;</span><br><span class=\"line\">    src: url(<span class=\"string\">'../../resources/fonts/Exo2.0-Regular-webfont.eot'</span>);</span><br><span class=\"line\">    src: url(<span class=\"string\">'../../resources/fonts/Exo2.0-Regular-webfont.eot?#iefix'</span>) format(<span class=\"string\">'embedded-opentype'</span>),</span><br><span class=\"line\">         url(<span class=\"string\">'../../resources/fonts/Exo2.0-Regular-webfont.woff'</span>) format(<span class=\"string\">'woff'</span>),</span><br><span class=\"line\">         url(<span class=\"string\">'../../resources/fonts/Exo2.0-Regular-webfont.ttf'</span>) format(<span class=\"string\">'truetype'</span>),</span><br><span class=\"line\">         url(<span class=\"string\">'../../resources/fonts/Exo2.0-Regular-webfont.svg#exo_2.0regular'</span>) format(<span class=\"string\">'svg'</span>);</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"9\">\n  <li>\n    <p>Select the <strong>MyDefaultTheme</strong>, and click on the <strong>Theme</strong>\n      tab.</p>\n  </li>\n  <li>\n    <p>Here, filter for font. In <strong>Ext.Class</strong>, you can set the\n      <strong>font family</strong>. Set it to the following value: (depending\n      on the font you choose):</p>\n  </li>\n</ol>\n<p><code>&#39;Exo2&#39;;</code></p>\n<ol start=\"11\">\n  <li>Compile your project, and test the result in your browser. You will see\n    the new font.</li>\n</ol>"},{"title":"Cloud on air webinar: Create custom conversations with Dialogflow","date":"2017-11-06T07:43:23.000Z","youtube":"Ob_Oc3U1vS4","_content":"\nOn the 17th of October, I run a global webinar for Google, about custom conversations and chatbots. This was really exiting as we recorded this together with a full professional film crew!(https://cloudplatformonline.com/onair-emea.html) Enjoy! \n<!--more-->\n\n{% youtube Ob_Oc3U1vS4 %}\n\n","source":"_posts/video-cloud-on-air-webinar-create-custom-conversations-with-dialogflow.md","raw":"---\ntitle: 'Cloud on air webinar: Create custom conversations with Dialogflow'\ncategories:\n  - Videos\ndate: 2017-11-06 08:43:23\ntags: Dialogflow\nyoutube: Ob_Oc3U1vS4\n---\n\nOn the 17th of October, I run a global webinar for Google, about custom conversations and chatbots. This was really exiting as we recorded this together with a full professional film crew!(https://cloudplatformonline.com/onair-emea.html) Enjoy! \n<!--more-->\n\n{% youtube Ob_Oc3U1vS4 %}\n\n","slug":"video-cloud-on-air-webinar-create-custom-conversations-with-dialogflow","published":1,"updated":"2018-11-25T11:29:21.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncom0025kif5ijw80rge","content":"<p>On the 17th of October, I run a global webinar for Google, about custom\n  conversations and chatbots. This was really exiting as we recorded this\n  together with a full professional film crew!(<a href=\"https://cloudplatformonline.com/onair-emea.html\" target=\"_blank\" rel=\"noopener\">https://cloudplatformonline.com/onair-emea.html</a>)\n  Enjoy!\n  <a id=\"more\"></a>\n</p>\n<div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/Ob_Oc3U1vS4\" frameborder=\"0\" allowfullscreen></iframe></div>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>On the 17th of October, I run a global webinar for Google, about custom\n  conversations and chatbots. This was really exiting as we recorded this\n  together with a full professional film crew!(<a href=\"https://cloudplatformonline.com/onair-emea.html\" target=\"_blank\" rel=\"noopener\">https://cloudplatformonline.com/onair-emea.html</a>)\n  Enjoy!","more":"</p>\n<div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/Ob_Oc3U1vS4\" frameborder=\"0\" allowfullscreen></iframe></div>"},{"title":"DLP & Vision API demo @ Google Cloud Summit Munich","date":"2018-02-14T09:52:59.000Z","youtube":"sm3xLN0n95o","_content":"\nAt the Google Cloud Summit event in Munich, I presented the Vision API and DLP API for 3000+ IT professionals: \n<!--more-->\n**DLP Demo:**\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/sm3xLN0n95o?start=2618\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n\n**Vision Demo:**\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/sm3xLN0n95o?start=4908\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n","source":"_posts/video-dlp-vision-api-demo-google-cloud-summit-munich.md","raw":"---\ntitle: 'DLP & Vision API demo @ Google Cloud Summit Munich'\ntags:\n  - DLP API\n  - GDPR\n  - Machine Learning\n  - Vision API\ncategories:\n  - Videos\ndate: 2018-02-14 10:52:59\nyoutube: sm3xLN0n95o\n---\n\nAt the Google Cloud Summit event in Munich, I presented the Vision API and DLP API for 3000+ IT professionals: \n<!--more-->\n**DLP Demo:**\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/sm3xLN0n95o?start=2618\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n\n**Vision Demo:**\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/sm3xLN0n95o?start=4908\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n","slug":"video-dlp-vision-api-demo-google-cloud-summit-munich","published":1,"updated":"2018-11-25T11:29:39.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncon0029kif5qp2np8cg","content":"<p>At the Google Cloud Summit event in Munich, I presented the Vision API and\n  DLP API for 3000+ IT professionals:\n  <a id=\"more\"></a> <strong>DLP Demo:</strong></p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/sm3xLN0n95o?start=2618\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p><strong>Vision Demo:</strong></p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/sm3xLN0n95o?start=4908\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>At the Google Cloud Summit event in Munich, I presented the Vision API and\n  DLP API for 3000+ IT professionals:","more":"<strong>DLP Demo:</strong></p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/sm3xLN0n95o?start=2618\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p><strong>Vision Demo:</strong></p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/sm3xLN0n95o?start=4908\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"},{"title":"Create custom chat agents for Google Home with Dialogflow","date":"2017-09-26T08:21:28.000Z","youtube":"iWWodOrIf7I","_content":"\nDuring Google Cloud Next in Amsterdam, I spoke for the Leader Circle (c-level discussions for Dutch companies) about chatbots, and smart conversation agents. A talk about Google Home, and how you can create custom agents with Dialogflow.\n\n<!--more-->\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/iWWodOrIf7I?start=1931\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","source":"_posts/video-create-custom-chat-agents-for-google-home-with-api-ai.md","raw":"---\ntitle: 'Create custom chat agents for Google Home with Dialogflow'\ntags:\n  - Alexa\n  - Dialogflow\n  - Chat Agents\n  - Chatbots\n  - Google Assistant\n  - Google Home\n  - Siri\ncategories:\n  - Videos\ndate: 2017-09-26 10:21:28\nyoutube: iWWodOrIf7I\n---\n\nDuring Google Cloud Next in Amsterdam, I spoke for the Leader Circle (c-level discussions for Dutch companies) about chatbots, and smart conversation agents. A talk about Google Home, and how you can create custom agents with Dialogflow.\n\n<!--more-->\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/iWWodOrIf7I?start=1931\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","slug":"video-create-custom-chat-agents-for-google-home-with-api-ai","published":1,"updated":"2018-11-25T11:42:29.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncoo002ckif5poco7wqa","content":"<p>During Google Cloud Next in Amsterdam, I spoke for the Leader Circle\n  (c-level discussions for Dutch companies) about chatbots, and smart\n  conversation agents. A talk about Google Home, and how you can create custom\n  agents with Dialogflow.</p>\n<a id=\"more\"></a><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/iWWodOrIf7I?start=1931\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>During Google Cloud Next in Amsterdam, I spoke for the Leader Circle\n  (c-level discussions for Dutch companies) about chatbots, and smart\n  conversation agents. A talk about Google Home, and how you can create custom\n  agents with Dialogflow.</p>","more":"<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/iWWodOrIf7I?start=1931\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"},{"title":"Digital Wednesday Building agents for the Google Assistant (Dutch)","date":"2018-10-01T09:45:17.000Z","youtube":"mzHWYTougwI","_content":"\nI've presented in Eindhoven during Digital Wednesday about Dialogflow and Google Assistant:\n<!--more-->\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/mzHWYTougwI\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","source":"_posts/video-digitalwednesday.md","raw":"---\ntitle: 'Digital Wednesday Building agents for the Google Assistant (Dutch)'\ncategories:\n  - Videos\ndate: 2018-10-01 11:45:17\nyoutube: mzHWYTougwI\ntags:\n  - Video Intelligence API\n---\n\nI've presented in Eindhoven during Digital Wednesday about Dialogflow and Google Assistant:\n<!--more-->\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/mzHWYTougwI\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","slug":"video-digitalwednesday","published":1,"updated":"2018-11-25T11:29:30.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncoq002gkif5nqlbfxvu","content":"<p>I’ve presented in Eindhoven during Digital Wednesday about Dialogflow and\n  Google Assistant:\n  <a id=\"more\"></a>\n</p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/mzHWYTougwI\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>I’ve presented in Eindhoven during Digital Wednesday about Dialogflow and\n  Google Assistant:","more":"</p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/mzHWYTougwI\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"},{"title":"Google Cloud Next Amsterdam Keynote - Video Intelligence API","date":"2017-09-26T08:24:57.000Z","youtube":"1IZuD103rX0","_content":"\nAt the Google Cloud Next event in Amsterdam, I presented the Video Intelligence API for 3000+ IT professionals: \n<!--more-->\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/1IZuD103rX0?start=4256\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","source":"_posts/video-google-cloud-next-amsterdam-keynote-video-intelligence-api.md","raw":"---\ntitle: 'Google Cloud Next Amsterdam Keynote - Video Intelligence API'\ntags:\n  - Video Intelligence API\ncategories:\n  - Videos\ndate: 2017-09-26 10:24:57\nyoutube: 1IZuD103rX0\n---\n\nAt the Google Cloud Next event in Amsterdam, I presented the Video Intelligence API for 3000+ IT professionals: \n<!--more-->\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/1IZuD103rX0?start=4256\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","slug":"video-google-cloud-next-amsterdam-keynote-video-intelligence-api","published":1,"updated":"2018-11-25T11:30:04.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncor002jkif5v9us6b4j","content":"<p>At the Google Cloud Next event in Amsterdam, I presented the Video\n  Intelligence API for 3000+ IT professionals:\n  <a id=\"more\"></a>\n</p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/1IZuD103rX0?start=4256\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>At the Google Cloud Next event in Amsterdam, I presented the Video\n  Intelligence API for 3000+ IT professionals:","more":"</p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/1IZuD103rX0?start=4256\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"},{"title":"Google Cloud Next London Teaser","date":"2018-11-08T16:25:28.000Z","youtube":"KhB0hwlyZkg","_content":"\nAt the Google Cloud Next event in London, I presented my customer care solution during the demo derby! \n<!--more-->\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KhB0hwlyZkg?start=297\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","source":"_posts/video-google-cloud-next-london.md","raw":"---\ntitle: 'Google Cloud Next London Teaser'\ntags:\n  - BigQuery\n  - Chatbots\n  - Machine Learning\n  - Dialogflow\ncategories:\n  - Videos\ndate: 2018-11-08 17:25:28\nyoutube: KhB0hwlyZkg\n---\n\nAt the Google Cloud Next event in London, I presented my customer care solution during the demo derby! \n<!--more-->\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KhB0hwlyZkg?start=297\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","slug":"video-google-cloud-next-london","published":1,"updated":"2018-11-25T11:30:21.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncos002nkif5jpkmms5x","content":"<p>At the Google Cloud Next event in London, I presented my customer care\n  solution during the demo derby!\n  <a id=\"more\"></a>\n</p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KhB0hwlyZkg?start=297\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>At the Google Cloud Next event in London, I presented my customer care\n  solution during the demo derby!","more":"</p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KhB0hwlyZkg?start=297\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"},{"title":"Extending G Suite with Business Applications","date":"2017-09-26T08:16:37.000Z","youtube":"LZgUKM_wyvE","_content":"\nSummer 2017, I run a technical session about G Suite at Google Cloud Next, in Amsterdam. This session is a G Suite technical talk on how companies can extend on top of G Suite, whether it is on organization's own application or whether they want to write a code on top of G Suite. The talk is followed by a live use case with CEO and Founder of VOGSY, Leo Koster. Enjoy watching!\n<!--more-->\n\n{% youtube LZgUKM_wyvE %}","source":"_posts/video-extending-g-suite-with-business-applications.md","raw":"---\ntitle: 'Extending G Suite with Business Applications'\ntags:\n  - App Maker\ncategories:\n  - Videos\ndate: 2017-09-26 10:16:37\nyoutube: LZgUKM_wyvE\n---\n\nSummer 2017, I run a technical session about G Suite at Google Cloud Next, in Amsterdam. This session is a G Suite technical talk on how companies can extend on top of G Suite, whether it is on organization's own application or whether they want to write a code on top of G Suite. The talk is followed by a live use case with CEO and Founder of VOGSY, Leo Koster. Enjoy watching!\n<!--more-->\n\n{% youtube LZgUKM_wyvE %}","slug":"video-extending-g-suite-with-business-applications","published":1,"updated":"2018-11-25T12:59:14.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncou002rkif5n9coyvrh","content":"<p>Summer 2017, I run a technical session about G Suite at Google Cloud Next,\n  in Amsterdam. This session is a G Suite technical talk on how companies can\n  extend on top of G Suite, whether it is on organization’s own application or\n  whether they want to write a code on top of G Suite. The talk is followed by\n  a live use case with CEO and Founder of VOGSY, Leo Koster. Enjoy watching!\n  <a id=\"more\"></a>\n</p>\n<div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/LZgUKM_wyvE\" frameborder=\"0\" allowfullscreen></iframe></div>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>Summer 2017, I run a technical session about G Suite at Google Cloud Next,\n  in Amsterdam. This session is a G Suite technical talk on how companies can\n  extend on top of G Suite, whether it is on organization’s own application or\n  whether they want to write a code on top of G Suite. The talk is followed by\n  a live use case with CEO and Founder of VOGSY, Leo Koster. Enjoy watching!","more":"</p>\n<div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/LZgUKM_wyvE\" frameborder=\"0\" allowfullscreen></iframe></div>"},{"title":"Webinar: Secrets to Building a Great Looking Universal App","date":"2015-11-10T09:49:40.000Z","_content":"\nA while ago I recorded this great webinar for Sencha. Just in case you missed it; you can watch it back!\n<!--more-->\nBuilding a great looking universal application is more than just responsive design. Developers and designers need to consider how to achieve the best user experience for each device type. Join us in our upcoming webinar as we share a real world example of a great looking universal application for playing music that was built by Lee Boonstra, an engineer at Sencha, using Ext JS 6. In this session, you will learn: \n\n* Key principles for building and designing universal apps\n* How to organize your project including folder structures and MVVM patterns, theming, and reusable custom component packages\n* How to efficiently build and deploy your application \n* Why many open source solutions fall short, especially for enterprise grade apps:\n\n<a href=\"https://www.brighttalk.com/webcast/11505/172461\">Watch on BrightTalk</a>","source":"_posts/webinar-secrets-to-building-a-great-looking-universal-app.md","raw":"---\ntitle: 'Webinar: Secrets to Building a Great Looking Universal App'\ncategories:\n  - Videos\ndate: 2015-11-10 10:49:40\n---\n\nA while ago I recorded this great webinar for Sencha. Just in case you missed it; you can watch it back!\n<!--more-->\nBuilding a great looking universal application is more than just responsive design. Developers and designers need to consider how to achieve the best user experience for each device type. Join us in our upcoming webinar as we share a real world example of a great looking universal application for playing music that was built by Lee Boonstra, an engineer at Sencha, using Ext JS 6. In this session, you will learn: \n\n* Key principles for building and designing universal apps\n* How to organize your project including folder structures and MVVM patterns, theming, and reusable custom component packages\n* How to efficiently build and deploy your application \n* Why many open source solutions fall short, especially for enterprise grade apps:\n\n<a href=\"https://www.brighttalk.com/webcast/11505/172461\">Watch on BrightTalk</a>","slug":"webinar-secrets-to-building-a-great-looking-universal-app","published":1,"updated":"2018-11-25T12:36:21.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncov002vkif5jztv1dxo","content":"<p>A while ago I recorded this great webinar for Sencha. Just in case you\n  missed it; you can watch it back!\n  <a id=\"more\"></a> Building a great looking universal application is more than just\n  responsive design. Developers and designers need to consider how to achieve\n  the best user experience for each device type. Join us in our upcoming\n  webinar as we share a real world example of a great looking universal\n  application for playing music that was built by Lee Boonstra, an engineer at\n  Sencha, using Ext JS 6. In this session, you will learn:</p>\n<ul>\n  <li>Key principles for building and designing universal apps</li>\n  <li>How to organize your project including folder structures and MVVM\n    patterns, theming, and reusable custom component packages</li>\n  <li>How to efficiently build and deploy your application</li>\n  <li>Why many open source solutions fall short, especially for enterprise\n    grade apps:</li>\n</ul>\n<p><a href=\"https://www.brighttalk.com/webcast/11505/172461\" target=\"_blank\" rel=\"noopener\">Watch on\n    BrightTalk</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>A while ago I recorded this great webinar for Sencha. Just in case you\n  missed it; you can watch it back!","more":"Building a great looking universal application is more than just\n  responsive design. Developers and designers need to consider how to achieve\n  the best user experience for each device type. Join us in our upcoming\n  webinar as we share a real world example of a great looking universal\n  application for playing music that was built by Lee Boonstra, an engineer at\n  Sencha, using Ext JS 6. In this session, you will learn:</p>\n<ul>\n  <li>Key principles for building and designing universal apps</li>\n  <li>How to organize your project including folder structures and MVVM\n    patterns, theming, and reusable custom component packages</li>\n  <li>How to efficiently build and deploy your application</li>\n  <li>Why many open source solutions fall short, especially for enterprise\n    grade apps:</li>\n</ul>\n<p><a href=\"https://www.brighttalk.com/webcast/11505/172461\" target=\"_blank\" rel=\"noopener\">Watch on\n    BrightTalk</a></p>"},{"title":"Working With Sencha App Templates: Boilerplate Ext JS 6 code.","description":"Boilerplate Ext JS applications.","date":"2015-07-10T12:43:57.000Z","_content":"\n### Software in a day \n\nMaybe you have experienced this before. You meet with a client (or worse your boss ;) ), he explains what kind of application he wants, and then he asked you the big question: *How long will it take?*. Being realistic (and add a little more time on top of that), you say: *\"a month!\"*. \"A month? It's just an application with 3 screens. I was thinking tomorrow.\" You know, software in a day.\n<!--more-->\n\nIt should have been done yesterday. Now making software for yesterday that's impossible. But software within a day, is possible. Maybe you already had a preview at SenchaCon or one of the SenchaCon Roadshows, something else what's new in Ext JS 6 are app templates. This is boilerplate code, you can use, to quick start with developing full (enterprise) applications. And wow! It does look pretty. These app templates are full code examples, far beyond the current kitchensink examples. It's code written with best practice code (because originally it was written with Sencha Architect) and it is responsive. These templates make use of the new Triton Ext JS 6 theme, and therefore they are highly customisable, have a flat design, and is making use of icon fonts for all icons. (so no additional image requests). Currently this app template is only available for the classic toolkit, (so ideally you would use it for desktop/tablet apps) but eventually we will also have templates for the modern toolkit. You can find the app *template*, in the template folder of your Ext JS 6 sdk. \n\nPreview the Dashboard - App Template: http://examples.sencha.com/extjs/6.0.0/examples/admin-dashboard/#dashboard \n\n![apptemplate](/images/apptemplate-500x270.png) \n\nNow to show you, how easily I created a custom application with the app template, here's a little tutorial. I used these steps to create the FitDashboard app. (A jawbone up / fitness mashup application). \n\n### Take over the template \n\n1. Generate app with the same namespace as the app template: `sencha generate app Admin ../my-path` \n2. Navigate to the *ext-6/template/admin-dashboard* folder, and copy over all the contents to your *my-path* folder \n3. Run: `sencha app refresh` to refresh the bootstrap.json. \n4. Make a sencha build: `sencha app build` \n5. You can now run your application in the browser. \n\n### How To Modify The Template \n\n1. The app template is not available yet for the modern toolkit. Therefore let's disable the modern toolkit, in *index.html*. (You can remove the folders in the modern toolkit if you want.) Comment out:\n\n```\n  //else if (s.match(/\\\\bmodern\\\\b/)) {\n  //    profile = 'modern';\n  //}\n```\n\n2. Open the *app/store/NavigationTree.js* file, and remove the pages from the menu, which you don't need. When you want, you can remove those view directies from the *view* folder, and the *data*, *model*, *store* and *sass/var* & *sass/src* folders. The way how I did it; I created a *_temp* folder, where I moved all the classes too, that I won't need. Then I created more subfolders for my own data. And run a `sencha app refresh`. \n\n3. To remove the logo from the header, open *Viewport.js* You can modify the logo from the component with the `itemId: headerBar` \n\n4. The styling for this logo bar, can be found in *classic/sass/src/view/main/Viewport.scss*. - You can modify the sencha-logo class. Afterwards build the theme. \n\n5. The overall base color, can be set in *classic/sass/var/view/Viewport.scss* `&base-color`. Make sure you build (or watch) the theme. \n\n6. Once your happy, it's time to modify the data. \n\nYou can find the data in the *app/data* folder. I would start with creating my own subfolders, and remove everything else to a *_temp* folder, since that way it will be easier later on, the remove all the data you are not using. \n* app/store/NavigationTree.js - Contains the store with the menu items. You can add new ones here. Note the `viewType` which uses the widget alias (view xtype). \n* app/view/, classic/view/, modern/view - Here you can add new views, viewcontrollers and viewmodels. \n* Do a `sencha app refresh` before testing See the screenshot how my application finally looks. I created this, together with the data (which probably took the most time), within a day. I think that's really fast! And you can do this too!\n\n**Edit: - It's now, also possible to generate an application based on an app template. https://gist.github.com/savelee/6578ffb24240eaaa35fb**","source":"_posts/working-with-sencha-app-templates-boilerplate-ext-js-6-code.md","raw":"---\ntitle: 'Working With Sencha App Templates: Boilerplate Ext JS 6 code.'\ndescription: Boilerplate Ext JS applications.\ntags:\n  - app templates\n  - boilerplate\n  - bootstrap\n  - Sencha\n  - templates\ncategories:\n  - Ext JS\ndate: 2015-07-10 14:43:57\n---\n\n### Software in a day \n\nMaybe you have experienced this before. You meet with a client (or worse your boss ;) ), he explains what kind of application he wants, and then he asked you the big question: *How long will it take?*. Being realistic (and add a little more time on top of that), you say: *\"a month!\"*. \"A month? It's just an application with 3 screens. I was thinking tomorrow.\" You know, software in a day.\n<!--more-->\n\nIt should have been done yesterday. Now making software for yesterday that's impossible. But software within a day, is possible. Maybe you already had a preview at SenchaCon or one of the SenchaCon Roadshows, something else what's new in Ext JS 6 are app templates. This is boilerplate code, you can use, to quick start with developing full (enterprise) applications. And wow! It does look pretty. These app templates are full code examples, far beyond the current kitchensink examples. It's code written with best practice code (because originally it was written with Sencha Architect) and it is responsive. These templates make use of the new Triton Ext JS 6 theme, and therefore they are highly customisable, have a flat design, and is making use of icon fonts for all icons. (so no additional image requests). Currently this app template is only available for the classic toolkit, (so ideally you would use it for desktop/tablet apps) but eventually we will also have templates for the modern toolkit. You can find the app *template*, in the template folder of your Ext JS 6 sdk. \n\nPreview the Dashboard - App Template: http://examples.sencha.com/extjs/6.0.0/examples/admin-dashboard/#dashboard \n\n![apptemplate](/images/apptemplate-500x270.png) \n\nNow to show you, how easily I created a custom application with the app template, here's a little tutorial. I used these steps to create the FitDashboard app. (A jawbone up / fitness mashup application). \n\n### Take over the template \n\n1. Generate app with the same namespace as the app template: `sencha generate app Admin ../my-path` \n2. Navigate to the *ext-6/template/admin-dashboard* folder, and copy over all the contents to your *my-path* folder \n3. Run: `sencha app refresh` to refresh the bootstrap.json. \n4. Make a sencha build: `sencha app build` \n5. You can now run your application in the browser. \n\n### How To Modify The Template \n\n1. The app template is not available yet for the modern toolkit. Therefore let's disable the modern toolkit, in *index.html*. (You can remove the folders in the modern toolkit if you want.) Comment out:\n\n```\n  //else if (s.match(/\\\\bmodern\\\\b/)) {\n  //    profile = 'modern';\n  //}\n```\n\n2. Open the *app/store/NavigationTree.js* file, and remove the pages from the menu, which you don't need. When you want, you can remove those view directies from the *view* folder, and the *data*, *model*, *store* and *sass/var* & *sass/src* folders. The way how I did it; I created a *_temp* folder, where I moved all the classes too, that I won't need. Then I created more subfolders for my own data. And run a `sencha app refresh`. \n\n3. To remove the logo from the header, open *Viewport.js* You can modify the logo from the component with the `itemId: headerBar` \n\n4. The styling for this logo bar, can be found in *classic/sass/src/view/main/Viewport.scss*. - You can modify the sencha-logo class. Afterwards build the theme. \n\n5. The overall base color, can be set in *classic/sass/var/view/Viewport.scss* `&base-color`. Make sure you build (or watch) the theme. \n\n6. Once your happy, it's time to modify the data. \n\nYou can find the data in the *app/data* folder. I would start with creating my own subfolders, and remove everything else to a *_temp* folder, since that way it will be easier later on, the remove all the data you are not using. \n* app/store/NavigationTree.js - Contains the store with the menu items. You can add new ones here. Note the `viewType` which uses the widget alias (view xtype). \n* app/view/, classic/view/, modern/view - Here you can add new views, viewcontrollers and viewmodels. \n* Do a `sencha app refresh` before testing See the screenshot how my application finally looks. I created this, together with the data (which probably took the most time), within a day. I think that's really fast! And you can do this too!\n\n**Edit: - It's now, also possible to generate an application based on an app template. https://gist.github.com/savelee/6578ffb24240eaaa35fb**","slug":"working-with-sencha-app-templates-boilerplate-ext-js-6-code","published":1,"updated":"2018-11-25T12:32:29.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncoy002zkif5miqqll7y","content":"<h3 id=\"Software-in-a-day\"><a href=\"#Software-in-a-day\" class=\"headerlink\" title=\"Software in a day\"></a>Software\n  in a day</h3>\n<p>Maybe you have experienced this before. You meet with a client (or worse\n  your boss ;) ), he explains what kind of application he wants, and then he\n  asked you the big question: <em>How long will it take?</em>. Being realistic\n  (and add a little more time on top of that), you say: <em>“a month!”</em>. “A\n  month? It’s just an application with 3 screens. I was thinking tomorrow.” You\n  know, software in a day.\n  <a id=\"more\"></a>\n</p>\n<p>It should have been done yesterday. Now making software for yesterday that’s\n  impossible. But software within a day, is possible. Maybe you already had a\n  preview at SenchaCon or one of the SenchaCon Roadshows, something else what’s\n  new in Ext JS 6 are app templates. This is boilerplate code, you can use, to\n  quick start with developing full (enterprise) applications. And wow! It does\n  look pretty. These app templates are full code examples, far beyond the\n  current kitchensink examples. It’s code written with best practice code\n  (because originally it was written with Sencha Architect) and it is\n  responsive. These templates make use of the new Triton Ext JS 6 theme, and\n  therefore they are highly customisable, have a flat design, and is making use\n  of icon fonts for all icons. (so no additional image requests). Currently\n  this app template is only available for the classic toolkit, (so ideally you\n  would use it for desktop/tablet apps) but eventually we will also have\n  templates for the modern toolkit. You can find the app <em>template</em>, in\n  the template folder of your Ext JS 6 sdk.</p>\n<p>Preview the Dashboard - App Template: <a href=\"http://examples.sencha.com/extjs/6.0.0/examples/admin-dashboard/#dashboard\" target=\"_blank\" rel=\"noopener\">http://examples.sencha.com/extjs/6.0.0/examples/admin-dashboard/#dashboard</a></p>\n<p><img src=\"/images/apptemplate-500x270.png\" alt=\"apptemplate\"></p>\n<p>Now to show you, how easily I created a custom application with the app\n  template, here’s a little tutorial. I used these steps to create the\n  FitDashboard app. (A jawbone up / fitness mashup application).</p>\n<h3 id=\"Take-over-the-template\"><a href=\"#Take-over-the-template\" class=\"headerlink\" title=\"Take over the template\"></a>Take\n  over the template</h3>\n<ol>\n  <li>Generate app with the same namespace as the app template: <code>sencha\n      generate app Admin ../my-path</code></li>\n  <li>Navigate to the <em>ext-6/template/admin-dashboard</em> folder, and copy\n    over all the contents to your <em>my-path</em> folder</li>\n  <li>Run: <code>sencha app refresh</code> to refresh the bootstrap.json.</li>\n  <li>Make a sencha build: <code>sencha app build</code></li>\n  <li>You can now run your application in the browser.</li>\n</ol>\n<h3 id=\"How-To-Modify-The-Template\"><a href=\"#How-To-Modify-The-Template\" class=\"headerlink\" title=\"How To Modify The Template\"></a>How\n  To Modify The Template</h3>\n<ol>\n  <li>The app template is not available yet for the modern toolkit. Therefore\n    let’s disable the modern toolkit, in <em>index.html</em>. (You can remove\n    the folders in the modern toolkit if you want.) Comment out:</li>\n</ol>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">//else if (s.match(/\\\\bmodern\\\\b/)) &#123;</span><br><span class=\"line\">//    profile = &apos;modern&apos;;</span><br><span class=\"line\">//&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"2\">\n  <li>\n    <p>Open the <em>app/store/NavigationTree.js</em> file, and remove the pages\n      from the menu, which you don’t need. When you want, you can remove those\n      view directies from the <em>view</em> folder, and the <em>data</em>, <em>model</em>,\n      <em>store</em> and <em>sass/var</em> &amp; <em>sass/src</em> folders. The\n      way how I did it; I created a <em>_temp</em> folder, where I moved all\n      the classes too, that I won’t need. Then I created more subfolders for my\n      own data. And run a <code>sencha app refresh</code>.</p>\n  </li>\n  <li>\n    <p>To remove the logo from the header, open <em>Viewport.js</em> You can\n      modify the logo from the component with the <code>itemId: headerBar</code></p>\n  </li>\n  <li>\n    <p>The styling for this logo bar, can be found in <em>classic/sass/src/view/main/Viewport.scss</em>.\n      - You can modify the sencha-logo class. Afterwards build the theme.</p>\n  </li>\n  <li>\n    <p>The overall base color, can be set in <em>classic/sass/var/view/Viewport.scss</em>\n      <code>&amp;base-color</code>. Make sure you build (or watch) the theme.</p>\n  </li>\n  <li>\n    <p>Once your happy, it’s time to modify the data.</p>\n  </li>\n</ol>\n<p>You can find the data in the <em>app/data</em> folder. I would start with\n  creating my own subfolders, and remove everything else to a <em>_temp</em>\n  folder, since that way it will be easier later on, the remove all the data\n  you are not using.</p>\n<ul>\n  <li>app/store/NavigationTree.js - Contains the store with the menu items. You\n    can add new ones here. Note the <code>viewType</code> which uses the widget\n    alias (view xtype).</li>\n  <li>app/view/, classic/view/, modern/view - Here you can add new views,\n    viewcontrollers and viewmodels.</li>\n  <li>Do a <code>sencha app refresh</code> before testing See the screenshot\n    how my application finally looks. I created this, together with the data\n    (which probably took the most time), within a day. I think that’s really\n    fast! And you can do this too!</li>\n</ul>\n<p><strong>Edit: - It’s now, also possible to generate an application based on\n    an app template. <a href=\"https://gist.github.com/savelee/6578ffb24240eaaa35fb\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/6578ffb24240eaaa35fb</a></strong></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<h3 id=\"Software-in-a-day\"><a href=\"#Software-in-a-day\" class=\"headerlink\" title=\"Software in a day\"></a>Software\n  in a day</h3>\n<p>Maybe you have experienced this before. You meet with a client (or worse\n  your boss ;) ), he explains what kind of application he wants, and then he\n  asked you the big question: <em>How long will it take?</em>. Being realistic\n  (and add a little more time on top of that), you say: <em>“a month!”</em>. “A\n  month? It’s just an application with 3 screens. I was thinking tomorrow.” You\n  know, software in a day.","more":"</p>\n<p>It should have been done yesterday. Now making software for yesterday that’s\n  impossible. But software within a day, is possible. Maybe you already had a\n  preview at SenchaCon or one of the SenchaCon Roadshows, something else what’s\n  new in Ext JS 6 are app templates. This is boilerplate code, you can use, to\n  quick start with developing full (enterprise) applications. And wow! It does\n  look pretty. These app templates are full code examples, far beyond the\n  current kitchensink examples. It’s code written with best practice code\n  (because originally it was written with Sencha Architect) and it is\n  responsive. These templates make use of the new Triton Ext JS 6 theme, and\n  therefore they are highly customisable, have a flat design, and is making use\n  of icon fonts for all icons. (so no additional image requests). Currently\n  this app template is only available for the classic toolkit, (so ideally you\n  would use it for desktop/tablet apps) but eventually we will also have\n  templates for the modern toolkit. You can find the app <em>template</em>, in\n  the template folder of your Ext JS 6 sdk.</p>\n<p>Preview the Dashboard - App Template: <a href=\"http://examples.sencha.com/extjs/6.0.0/examples/admin-dashboard/#dashboard\" target=\"_blank\" rel=\"noopener\">http://examples.sencha.com/extjs/6.0.0/examples/admin-dashboard/#dashboard</a></p>\n<p><img src=\"/images/apptemplate-500x270.png\" alt=\"apptemplate\"></p>\n<p>Now to show you, how easily I created a custom application with the app\n  template, here’s a little tutorial. I used these steps to create the\n  FitDashboard app. (A jawbone up / fitness mashup application).</p>\n<h3 id=\"Take-over-the-template\"><a href=\"#Take-over-the-template\" class=\"headerlink\" title=\"Take over the template\"></a>Take\n  over the template</h3>\n<ol>\n  <li>Generate app with the same namespace as the app template: <code>sencha\n      generate app Admin ../my-path</code></li>\n  <li>Navigate to the <em>ext-6/template/admin-dashboard</em> folder, and copy\n    over all the contents to your <em>my-path</em> folder</li>\n  <li>Run: <code>sencha app refresh</code> to refresh the bootstrap.json.</li>\n  <li>Make a sencha build: <code>sencha app build</code></li>\n  <li>You can now run your application in the browser.</li>\n</ol>\n<h3 id=\"How-To-Modify-The-Template\"><a href=\"#How-To-Modify-The-Template\" class=\"headerlink\" title=\"How To Modify The Template\"></a>How\n  To Modify The Template</h3>\n<ol>\n  <li>The app template is not available yet for the modern toolkit. Therefore\n    let’s disable the modern toolkit, in <em>index.html</em>. (You can remove\n    the folders in the modern toolkit if you want.) Comment out:</li>\n</ol>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">//else if (s.match(/\\\\bmodern\\\\b/)) &#123;</span><br><span class=\"line\">//    profile = &apos;modern&apos;;</span><br><span class=\"line\">//&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"2\">\n  <li>\n    <p>Open the <em>app/store/NavigationTree.js</em> file, and remove the pages\n      from the menu, which you don’t need. When you want, you can remove those\n      view directies from the <em>view</em> folder, and the <em>data</em>, <em>model</em>,\n      <em>store</em> and <em>sass/var</em> &amp; <em>sass/src</em> folders. The\n      way how I did it; I created a <em>_temp</em> folder, where I moved all\n      the classes too, that I won’t need. Then I created more subfolders for my\n      own data. And run a <code>sencha app refresh</code>.</p>\n  </li>\n  <li>\n    <p>To remove the logo from the header, open <em>Viewport.js</em> You can\n      modify the logo from the component with the <code>itemId: headerBar</code></p>\n  </li>\n  <li>\n    <p>The styling for this logo bar, can be found in <em>classic/sass/src/view/main/Viewport.scss</em>.\n      - You can modify the sencha-logo class. Afterwards build the theme.</p>\n  </li>\n  <li>\n    <p>The overall base color, can be set in <em>classic/sass/var/view/Viewport.scss</em>\n      <code>&amp;base-color</code>. Make sure you build (or watch) the theme.</p>\n  </li>\n  <li>\n    <p>Once your happy, it’s time to modify the data.</p>\n  </li>\n</ol>\n<p>You can find the data in the <em>app/data</em> folder. I would start with\n  creating my own subfolders, and remove everything else to a <em>_temp</em>\n  folder, since that way it will be easier later on, the remove all the data\n  you are not using.</p>\n<ul>\n  <li>app/store/NavigationTree.js - Contains the store with the menu items. You\n    can add new ones here. Note the <code>viewType</code> which uses the widget\n    alias (view xtype).</li>\n  <li>app/view/, classic/view/, modern/view - Here you can add new views,\n    viewcontrollers and viewmodels.</li>\n  <li>Do a <code>sencha app refresh</code> before testing See the screenshot\n    how my application finally looks. I created this, together with the data\n    (which probably took the most time), within a day. I think that’s really\n    fast! And you can do this too!</li>\n</ul>\n<p><strong>Edit: - It’s now, also possible to generate an application based on\n    an app template. <a href=\"https://gist.github.com/savelee/6578ffb24240eaaa35fb\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/6578ffb24240eaaa35fb</a></strong></p>"},{"title":"Keynote Frontmania: Machine Learning for JavaScript developers","date":"2018-11-20T10:45:17.000Z","youtube":"NH-bL6Bd7Tw","_content":"\nAt Frontmania in Utrecht I presented during the keynote, about machine learning for JavaScript developers:\n<!--more-->\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/NH-bL6Bd7Tw?start=1686\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","source":"_posts/video-frontmania.md","raw":"---\ntitle: 'Keynote Frontmania: Machine Learning for JavaScript developers'\ncategories:\n  - Videos\ndate: 2018-11-20 11:45:17\nyoutube: NH-bL6Bd7Tw\ntags:\n  - AutoML\n---\n\nAt Frontmania in Utrecht I presented during the keynote, about machine learning for JavaScript developers:\n<!--more-->\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/NH-bL6Bd7Tw?start=1686\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","slug":"video-frontmania","published":1,"updated":"2018-11-25T11:29:56.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncoz0033kif5jses2oli","content":"<p>At Frontmania in Utrecht I presented during the keynote, about machine\n  learning for JavaScript developers:\n  <a id=\"more\"></a>\n</p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/NH-bL6Bd7Tw?start=1686\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>At Frontmania in Utrecht I presented during the keynote, about machine\n  learning for JavaScript developers:","more":"</p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/NH-bL6Bd7Tw?start=1686\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"},{"title":"Google Cloud Summit Paris, Keynote: Video Intelligence","date":"2017-12-01T10:45:17.000Z","youtube":"ROSZHWkV4i8","_content":"\nAt the Google Cloud Summit event in Paris, I presented the Video Intelligence API for 3000+ IT professionals: \n<!--more-->\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ROSZHWkV4i8?start=4068\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","source":"_posts/video-google-cloud-summit-paris-keynote-video-intelligence.md","raw":"---\ntitle: 'Google Cloud Summit Paris, Keynote: Video Intelligence'\ncategories:\n  - Videos\ndate: 2017-12-01 11:45:17\nyoutube: ROSZHWkV4i8\ntags:\n  - Video Intelligence API\n---\n\nAt the Google Cloud Summit event in Paris, I presented the Video Intelligence API for 3000+ IT professionals: \n<!--more-->\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ROSZHWkV4i8?start=4068\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","slug":"video-google-cloud-summit-paris-keynote-video-intelligence","published":1,"updated":"2018-11-25T11:30:12.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncp00037kif5m0fxij6s","content":"<p>At the Google Cloud Summit event in Paris, I presented the Video\n  Intelligence API for 3000+ IT professionals:\n  <a id=\"more\"></a>\n</p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ROSZHWkV4i8?start=4068\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>At the Google Cloud Summit event in Paris, I presented the Video\n  Intelligence API for 3000+ IT professionals:","more":"</p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ROSZHWkV4i8?start=4068\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"},{"title":"Advanced Sencha Cmd: Dealing with a multi Ext JS app infrastructure","description":"This guide will describe how to deal with an infrastructure, that contains multiple Ext JS apps.","date":"2016-02-21T17:06:24.000Z","_content":"\nThis guide will describe how to deal with an infrastructure, that contains multiple Ext JS apps.\nI will discuss: \n* Local workspaces \n* How to split builds \n* How to modify file paths and output settings\n\n<!--more-->\n\n## About Workspaces \n\nTo support these, Sencha Cmd defines the concept of a “Workspace”. A Workspace is simply a folder that ultimately contains one or more apps (pages), frameworks, packages and other shared code or files. The location of the Workspace root folder should be chosen to facilitate these needs as well as your source control requirements. Any generated applications/pages created in sub-folders of the Workspace folder regardless of their depth are considered to be members of the Workspace. Though not a requirement, it is typically the case that the Workspace folder is the root folder in a source control repository. To create a workspace, you will need to have a downloaded copy of the Ext JS framework on your hard disk, also you will need to have Sencha Cmd installed. On the command-line navigate to the downloaded Ext JS sdk folder. From here, enter the following command: `sencha generate workspace [path to workspace[` This will generate the following folder structure:\n\n```\nworkspace.json   # The JSON descriptor for the workspace.\next\t\t     # A copy of the Ext JS sdk, examples/docs are stripped out\npackages\t     # Empty folder, which will contain shared code / themes\n.sencha/                # Sencha-specific files (e.g. configuration)\n    workspace/          # Workspace-specific content (see below)\n        sencha.cfg       # Configuration file for Sencha Cmd\n        plugin.xml        # Plugin for Sencha Cmd\n```\n\nWithin this workspace you can generate Ext JS apps, from the *ext* folder: `cd ext` `sencha generate app MyApp [folder-name[` All applications within the workspace, can share the same Sencha ext folder, code packages (such as custom components, themes or locals) can be shared across both apps and also applications can find each other in the workspace. (for example, in case you want to extend from apps.) For more information about workspaces see: \n* http://docs.sencha.com/cmd/6.x/workspaces.html\n* http://docs.sencha.com/cmd/6.x/extjs/cmd_app.html \n\n## Splitting builds \n\nBy default, a workspace only matters on your development machine. Once you make a build: `sencha app build` Sencha will copy all the used framework classes and all your self written Sencha classes to a build folder. For production, all scripts will be minified. Also the Sass themes will be compiled to production ready css, and copied together with the resources. This means, by default, all shared frameworks and code packages, will be duplicated in the production build, as they can run as stand-alones. For most users, this behavior is exactly what they want. However, there are reasons, why people want to “split” their builds, and host code packages or frameworks separated from their app code. Examples of such reasons are: \n\n* You are creating your own application framework. You are dynamically generating views, or maybe you are hosting the framework within a portal, expecting your code base will grow over time. \n* You are building a large application, with separated areas, such as an application, and an admin panel. Each of these areas, could be treated as an app itself. Which contains many views, controllers and models etc. It might be that you have different user groups visiting these apps. Why deliver them code, which they don’t need? \n* Your application became huge, and you want to split your scripts in smaller chunks. For the last reason, there’s a good tutorial online: \nhttps://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/ \n\nLet’s dive into this topic, about splitting builds. Assuming you want to exclude the Sencha framework classes from your own app code. In every sencha application folder, there’s a hidden **.sencha** folder. This hidden folder contains lots of build scripts, settings and metadata used by Sencha Cmd. One of those files is: **js-impl.xml**, an Apache Ant build script, which contains an **compile-js** block, which takes care of filtering out all the used framework classes, and all your own JavaScript classes, to create a (minified) build: https://gist.github.com/savelee/b854dba3217ed5fb0252 It checks if, setting: **enable.split.mode** is set to true, and if so, it will split your framework with a minified, concatenated framework file & a minified, concatenated **app.js** file, which contains your own classes. Note, by default this setting is false. Unfortunately, the code in the first block, doesn’t really work in Ext JS 6. But you can change it to something like below, to make it working again. I've been playing around with this: https://gist.github.com/savelee/4c2fdd2bda303bc03704 *NOTE: I will need to test this further, but this code will need some more iterations though, I have the idea, you can union more, by tagging the \\`Ext\\` namespace. Also, saving this script in **js-impl.xml**, is not a best practice. When you reinstall Sencha Cmd, and upgrade your app, you will loose everything that's inside the hidden **.sencha** folder. Instead you want to move this script out and leave it a build xml file within your project.\n\n* You can find a working example in my Github repository: https://github.com/savelee/ext-workspace-demo/blob/master/app1/.sencha/app/js-impl.xml\n\nIn this example, I have 2 generated Sencha apps. **MyApp1** and **MyApp2**. Both contain a custom build file, to make sure the framework will be filtered out of the final build. ##Build properties So where is this *enable.split.mode* setting coming from? It’s a property file, and the hidden **.sencha** folder, has many properties files. You can find them all in: **default.properties**. To fine-tune your build, you could open **production.properties**, and add the props you like, for example:\n\n```\nenable.split.mode=true\nbuild.out.framework.path=${build.out.base.path}/${app.output.framework.path}\napp.output.framework=framework.js\napp.output.framework.path=${app.output.framework}\napp.output.framework.enable=false\n```\n\nIdeally you shouldn’t edit the **.properties** files, these are located in the hidden sencha folder, so this means they will be overwritten when you update Sencha Cmd. Additionally, I don’t recommend, checking **.sencha** and framework folders in source control systems such like Git. You don’t want to get merge errors, when other team members have newer versions of software, running on their machines. So to make these changes, to make sure that the sencha build process, splits the build, you can make changes in the **app.json** file of your app:\n\n``` JSON\n\"output\": {\n..\n        \"framework\": {\n          \"path\": \"${workspace.build.dir}/${build.environment}/framework.js\",\n          \"enable\": true\n        },\n..\n```\n\nMove the framework.js outside the app build folder Now that we know how to split builds, or you might want to move assets / scripts around. By default it will include **framework.js** and **app.js** in the same application folder but this will be a file, which needs to be located on a central place. Luckily with Ext JS, you are able to move around files very easily. Many things are configurable. In the **app.json** file, there will be an output block. In this block, you can rename the files, change the extension from the index page. (for example, in case you want to change it to a jsp or php file…), and you are also able to change the base path. Once the base path is changed, you probably will need to change all the other paths as well. Have a look into the **app.json** file that I wrote, or the snippets below: https://github.com/savelee/ext-workspace-demo/blob/master/app1/app.json The output block:\n\n``` JSON\n\"output\": {\n        \"base\": \"${workspace.build.dir}/${build.environment}/\",\n        \"page\": \"${app.name}/index.html\", //you can change this to index.jsp\n        \"manifest\": \"${app.name}/${build.id}.json\",\n        \"js\": \"${app.name}/${build.id}/app.js\",\n        \"framework\": {\n          \"path\": \"framework.js\", //this will be the shared sencha framework stuff\n          \"enable\": true\n        },\n        \"resources\": {\n            \"path\": \"${app.name}/${build.id}/resources\",\n            \"shared\": \"resources\"\n        }\n        ...\n```\n\nThe archivePath, to move the archives folder: `\"archivePath\": \"${app.name}/archive/${build.id}\",` The appCache block, to move the **app.cache** file. Note, it’s also located in the production block.\n\n``` JSON\n\"appCache\": {\n            \"path\": \"${app.name}/app.cache\",\n            \"enable\": false\n},\n```\n\nThe cache block, to move the delta folders:\n\n``` JSON\n\"cache\": {\n        \"enable\": false,\n        \"deltas\": \"${app.name}/${build.id}/deltas\"\n},\n```\n\nVersioning Systems I mentioned it before, there are a couple of scripts, you ideally don’t want to check into your source control. For Git, you can write a gitignore file, which blocks checking in the below files. I’m sure, other versioning systems, can do the same. https://gist.github.com/savelee/d76bfd972531ab96f6a0 There are some handy links, I like to share with you: \n\n* http://docs.sencha.com/cmd/6.x/advanced_cmd/cmd_compiler_reference.html\n* http://docs.sencha.com/cmd/6.x/advanced_cmd/cmd_advanced.html","source":"_posts/advanced-sencha-cmd-dealing-with-a-multi-ext-js-app-infrastructure.md","raw":"---\ntitle: 'Advanced Sencha Cmd: Dealing with a multi Ext JS app infrastructure'\ndescription: This guide will describe how to deal with an infrastructure, that contains multiple Ext JS apps.\ntags:\n  - Apache Ant\n  - build properties\n  - build scripts\n  - Ext JS\n  - Sencha\n  - Sencha CMD\ncategories:\n  - Sencha CMD\ndate: 2016-02-21 18:06:24\n---\n\nThis guide will describe how to deal with an infrastructure, that contains multiple Ext JS apps.\nI will discuss: \n* Local workspaces \n* How to split builds \n* How to modify file paths and output settings\n\n<!--more-->\n\n## About Workspaces \n\nTo support these, Sencha Cmd defines the concept of a “Workspace”. A Workspace is simply a folder that ultimately contains one or more apps (pages), frameworks, packages and other shared code or files. The location of the Workspace root folder should be chosen to facilitate these needs as well as your source control requirements. Any generated applications/pages created in sub-folders of the Workspace folder regardless of their depth are considered to be members of the Workspace. Though not a requirement, it is typically the case that the Workspace folder is the root folder in a source control repository. To create a workspace, you will need to have a downloaded copy of the Ext JS framework on your hard disk, also you will need to have Sencha Cmd installed. On the command-line navigate to the downloaded Ext JS sdk folder. From here, enter the following command: `sencha generate workspace [path to workspace[` This will generate the following folder structure:\n\n```\nworkspace.json   # The JSON descriptor for the workspace.\next\t\t     # A copy of the Ext JS sdk, examples/docs are stripped out\npackages\t     # Empty folder, which will contain shared code / themes\n.sencha/                # Sencha-specific files (e.g. configuration)\n    workspace/          # Workspace-specific content (see below)\n        sencha.cfg       # Configuration file for Sencha Cmd\n        plugin.xml        # Plugin for Sencha Cmd\n```\n\nWithin this workspace you can generate Ext JS apps, from the *ext* folder: `cd ext` `sencha generate app MyApp [folder-name[` All applications within the workspace, can share the same Sencha ext folder, code packages (such as custom components, themes or locals) can be shared across both apps and also applications can find each other in the workspace. (for example, in case you want to extend from apps.) For more information about workspaces see: \n* http://docs.sencha.com/cmd/6.x/workspaces.html\n* http://docs.sencha.com/cmd/6.x/extjs/cmd_app.html \n\n## Splitting builds \n\nBy default, a workspace only matters on your development machine. Once you make a build: `sencha app build` Sencha will copy all the used framework classes and all your self written Sencha classes to a build folder. For production, all scripts will be minified. Also the Sass themes will be compiled to production ready css, and copied together with the resources. This means, by default, all shared frameworks and code packages, will be duplicated in the production build, as they can run as stand-alones. For most users, this behavior is exactly what they want. However, there are reasons, why people want to “split” their builds, and host code packages or frameworks separated from their app code. Examples of such reasons are: \n\n* You are creating your own application framework. You are dynamically generating views, or maybe you are hosting the framework within a portal, expecting your code base will grow over time. \n* You are building a large application, with separated areas, such as an application, and an admin panel. Each of these areas, could be treated as an app itself. Which contains many views, controllers and models etc. It might be that you have different user groups visiting these apps. Why deliver them code, which they don’t need? \n* Your application became huge, and you want to split your scripts in smaller chunks. For the last reason, there’s a good tutorial online: \nhttps://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/ \n\nLet’s dive into this topic, about splitting builds. Assuming you want to exclude the Sencha framework classes from your own app code. In every sencha application folder, there’s a hidden **.sencha** folder. This hidden folder contains lots of build scripts, settings and metadata used by Sencha Cmd. One of those files is: **js-impl.xml**, an Apache Ant build script, which contains an **compile-js** block, which takes care of filtering out all the used framework classes, and all your own JavaScript classes, to create a (minified) build: https://gist.github.com/savelee/b854dba3217ed5fb0252 It checks if, setting: **enable.split.mode** is set to true, and if so, it will split your framework with a minified, concatenated framework file & a minified, concatenated **app.js** file, which contains your own classes. Note, by default this setting is false. Unfortunately, the code in the first block, doesn’t really work in Ext JS 6. But you can change it to something like below, to make it working again. I've been playing around with this: https://gist.github.com/savelee/4c2fdd2bda303bc03704 *NOTE: I will need to test this further, but this code will need some more iterations though, I have the idea, you can union more, by tagging the \\`Ext\\` namespace. Also, saving this script in **js-impl.xml**, is not a best practice. When you reinstall Sencha Cmd, and upgrade your app, you will loose everything that's inside the hidden **.sencha** folder. Instead you want to move this script out and leave it a build xml file within your project.\n\n* You can find a working example in my Github repository: https://github.com/savelee/ext-workspace-demo/blob/master/app1/.sencha/app/js-impl.xml\n\nIn this example, I have 2 generated Sencha apps. **MyApp1** and **MyApp2**. Both contain a custom build file, to make sure the framework will be filtered out of the final build. ##Build properties So where is this *enable.split.mode* setting coming from? It’s a property file, and the hidden **.sencha** folder, has many properties files. You can find them all in: **default.properties**. To fine-tune your build, you could open **production.properties**, and add the props you like, for example:\n\n```\nenable.split.mode=true\nbuild.out.framework.path=${build.out.base.path}/${app.output.framework.path}\napp.output.framework=framework.js\napp.output.framework.path=${app.output.framework}\napp.output.framework.enable=false\n```\n\nIdeally you shouldn’t edit the **.properties** files, these are located in the hidden sencha folder, so this means they will be overwritten when you update Sencha Cmd. Additionally, I don’t recommend, checking **.sencha** and framework folders in source control systems such like Git. You don’t want to get merge errors, when other team members have newer versions of software, running on their machines. So to make these changes, to make sure that the sencha build process, splits the build, you can make changes in the **app.json** file of your app:\n\n``` JSON\n\"output\": {\n..\n        \"framework\": {\n          \"path\": \"${workspace.build.dir}/${build.environment}/framework.js\",\n          \"enable\": true\n        },\n..\n```\n\nMove the framework.js outside the app build folder Now that we know how to split builds, or you might want to move assets / scripts around. By default it will include **framework.js** and **app.js** in the same application folder but this will be a file, which needs to be located on a central place. Luckily with Ext JS, you are able to move around files very easily. Many things are configurable. In the **app.json** file, there will be an output block. In this block, you can rename the files, change the extension from the index page. (for example, in case you want to change it to a jsp or php file…), and you are also able to change the base path. Once the base path is changed, you probably will need to change all the other paths as well. Have a look into the **app.json** file that I wrote, or the snippets below: https://github.com/savelee/ext-workspace-demo/blob/master/app1/app.json The output block:\n\n``` JSON\n\"output\": {\n        \"base\": \"${workspace.build.dir}/${build.environment}/\",\n        \"page\": \"${app.name}/index.html\", //you can change this to index.jsp\n        \"manifest\": \"${app.name}/${build.id}.json\",\n        \"js\": \"${app.name}/${build.id}/app.js\",\n        \"framework\": {\n          \"path\": \"framework.js\", //this will be the shared sencha framework stuff\n          \"enable\": true\n        },\n        \"resources\": {\n            \"path\": \"${app.name}/${build.id}/resources\",\n            \"shared\": \"resources\"\n        }\n        ...\n```\n\nThe archivePath, to move the archives folder: `\"archivePath\": \"${app.name}/archive/${build.id}\",` The appCache block, to move the **app.cache** file. Note, it’s also located in the production block.\n\n``` JSON\n\"appCache\": {\n            \"path\": \"${app.name}/app.cache\",\n            \"enable\": false\n},\n```\n\nThe cache block, to move the delta folders:\n\n``` JSON\n\"cache\": {\n        \"enable\": false,\n        \"deltas\": \"${app.name}/${build.id}/deltas\"\n},\n```\n\nVersioning Systems I mentioned it before, there are a couple of scripts, you ideally don’t want to check into your source control. For Git, you can write a gitignore file, which blocks checking in the below files. I’m sure, other versioning systems, can do the same. https://gist.github.com/savelee/d76bfd972531ab96f6a0 There are some handy links, I like to share with you: \n\n* http://docs.sencha.com/cmd/6.x/advanced_cmd/cmd_compiler_reference.html\n* http://docs.sencha.com/cmd/6.x/advanced_cmd/cmd_advanced.html","slug":"advanced-sencha-cmd-dealing-with-a-multi-ext-js-app-infrastructure","published":1,"updated":"2018-11-25T15:30:10.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncqp009gkif5s911z2qa","content":"<p>This guide will describe how to deal with an infrastructure, that contains\n  multiple Ext JS apps. I will discuss:</p>\n<ul>\n  <li>Local workspaces</li>\n  <li>How to split builds</li>\n  <li>How to modify file paths and output settings</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"About-Workspaces\"><a href=\"#About-Workspaces\" class=\"headerlink\" title=\"About Workspaces\"></a>About\n  Workspaces</h2>\n<p>To support these, Sencha Cmd defines the concept of a “Workspace”. A\n  Workspace is simply a folder that ultimately contains one or more apps\n  (pages), frameworks, packages and other shared code or files. The location of\n  the Workspace root folder should be chosen to facilitate these needs as well\n  as your source control requirements. Any generated applications/pages created\n  in sub-folders of the Workspace folder regardless of their depth are\n  considered to be members of the Workspace. Though not a requirement, it is\n  typically the case that the Workspace folder is the root folder in a source\n  control repository. To create a workspace, you will need to have a downloaded\n  copy of the Ext JS framework on your hard disk, also you will need to have\n  Sencha Cmd installed. On the command-line navigate to the downloaded Ext JS\n  sdk folder. From here, enter the following command: <code>sencha generate\n    workspace [path to workspace[</code> This will generate the following\n  folder structure:</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">workspace.json   # The JSON descriptor for the workspace.</span><br><span class=\"line\">ext\t\t     # A copy of the Ext JS sdk, examples/docs are stripped out</span><br><span class=\"line\">packages\t     # Empty folder, which will contain shared code / themes</span><br><span class=\"line\">.sencha/                # Sencha-specific files (e.g. configuration)</span><br><span class=\"line\">    workspace/          # Workspace-specific content (see below)</span><br><span class=\"line\">        sencha.cfg       # Configuration file for Sencha Cmd</span><br><span class=\"line\">        plugin.xml        # Plugin for Sencha Cmd</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Within this workspace you can generate Ext JS apps, from the <em>ext</em>\n  folder: <code>cd ext</code> <code>sencha generate app MyApp [folder-name[</code>\n  All applications within the workspace, can share the same Sencha ext folder,\n  code packages (such as custom components, themes or locals) can be shared\n  across both apps and also applications can find each other in the workspace.\n  (for example, in case you want to extend from apps.) For more information\n  about workspaces see:</p>\n<ul>\n  <li><a href=\"http://docs.sencha.com/cmd/6.x/workspaces.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/6.x/workspaces.html</a></li>\n  <li><a href=\"http://docs.sencha.com/cmd/6.x/extjs/cmd_app.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/6.x/extjs/cmd_app.html</a></li>\n</ul>\n<h2 id=\"Splitting-builds\"><a href=\"#Splitting-builds\" class=\"headerlink\" title=\"Splitting builds\"></a>Splitting\n  builds</h2>\n<p>By default, a workspace only matters on your development machine. Once you\n  make a build: <code>sencha app build</code> Sencha will copy all the used\n  framework classes and all your self written Sencha classes to a build folder.\n  For production, all scripts will be minified. Also the Sass themes will be\n  compiled to production ready css, and copied together with the resources.\n  This means, by default, all shared frameworks and code packages, will be\n  duplicated in the production build, as they can run as stand-alones. For most\n  users, this behavior is exactly what they want. However, there are reasons,\n  why people want to “split” their builds, and host code packages or frameworks\n  separated from their app code. Examples of such reasons are:</p>\n<ul>\n  <li>You are creating your own application framework. You are dynamically\n    generating views, or maybe you are hosting the framework within a portal,\n    expecting your code base will grow over time.</li>\n  <li>You are building a large application, with separated areas, such as an\n    application, and an admin panel. Each of these areas, could be treated as\n    an app itself. Which contains many views, controllers and models etc. It\n    might be that you have different user groups visiting these apps. Why\n    deliver them code, which they don’t need?</li>\n  <li>Your application became huge, and you want to split your scripts in\n    smaller chunks. For the last reason, there’s a good tutorial online: <a href=\"https://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/</a></li>\n</ul>\n<p>Let’s dive into this topic, about splitting builds. Assuming you want to\n  exclude the Sencha framework classes from your own app code. In every sencha\n  application folder, there’s a hidden <strong>.sencha</strong> folder. This\n  hidden folder contains lots of build scripts, settings and metadata used by\n  Sencha Cmd. One of those files is: <strong>js-impl.xml</strong>, an Apache\n  Ant build script, which contains an <strong>compile-js</strong> block, which\n  takes care of filtering out all the used framework classes, and all your own\n  JavaScript classes, to create a (minified) build: <a href=\"https://gist.github.com/savelee/b854dba3217ed5fb0252\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/b854dba3217ed5fb0252</a>\n  It checks if, setting: <strong>enable.split.mode</strong> is set to true, and\n  if so, it will split your framework with a minified, concatenated framework\n  file &amp; a minified, concatenated <strong>app.js</strong> file, which\n  contains your own classes. Note, by default this setting is false.\n  Unfortunately, the code in the first block, doesn’t really work in Ext JS 6.\n  But you can change it to something like below, to make it working again. I’ve\n  been playing around with this: <a href=\"https://gist.github.com/savelee/4c2fdd2bda303bc03704\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/4c2fdd2bda303bc03704</a>\n  *NOTE: I will need to test this further, but this code will need some more\n  iterations though, I have the idea, you can union more, by tagging the `Ext`\n  namespace. Also, saving this script in <strong>js-impl.xml</strong>, is not a\n  best practice. When you reinstall Sencha Cmd, and upgrade your app, you will\n  loose everything that’s inside the hidden <strong>.sencha</strong> folder.\n  Instead you want to move this script out and leave it a build xml file within\n  your project.</p>\n<ul>\n  <li>You can find a working example in my Github repository: <a href=\"https://github.com/savelee/ext-workspace-demo/blob/master/app1/.sencha/app/js-impl.xml\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/ext-workspace-demo/blob/master/app1/.sencha/app/js-impl.xml</a></li>\n</ul>\n<p>In this example, I have 2 generated Sencha apps. <strong>MyApp1</strong> and\n  <strong>MyApp2</strong>. Both contain a custom build file, to make sure the\n  framework will be filtered out of the final build. ##Build properties So\n  where is this <em>enable.split.mode</em> setting coming from? It’s a property\n  file, and the hidden <strong>.sencha</strong> folder, has many properties\n  files. You can find them all in: <strong>default.properties</strong>. To\n  fine-tune your build, you could open <strong>production.properties</strong>,\n  and add the props you like, for example:</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">enable.split.mode=true</span><br><span class=\"line\">build.out.framework.path=$&#123;build.out.base.path&#125;/$&#123;app.output.framework.path&#125;</span><br><span class=\"line\">app.output.framework=framework.js</span><br><span class=\"line\">app.output.framework.path=$&#123;app.output.framework&#125;</span><br><span class=\"line\">app.output.framework.enable=false</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Ideally you shouldn’t edit the <strong>.properties</strong> files, these are\n  located in the hidden sencha folder, so this means they will be overwritten\n  when you update Sencha Cmd. Additionally, I don’t recommend, checking <strong>.sencha</strong>\n  and framework folders in source control systems such like Git. You don’t want\n  to get merge errors, when other team members have newer versions of software,\n  running on their machines. So to make these changes, to make sure that the\n  sencha build process, splits the build, you can make changes in the <strong>app.json</strong>\n  file of your app:</p>\n<figure class=\"highlight\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">\"output\": &#123;</span><br><span class=\"line\">..</span><br><span class=\"line\">        \"framework\": &#123;</span><br><span class=\"line\">          \"path\": \"$&#123;workspace.build.dir&#125;/$&#123;build.environment&#125;/framework.js\",</span><br><span class=\"line\">          \"enable\": true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">..</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Move the framework.js outside the app build folder Now that we know how to\n  split builds, or you might want to move assets / scripts around. By default\n  it will include <strong>framework.js</strong> and <strong>app.js</strong> in\n  the same application folder but this will be a file, which needs to be\n  located on a central place. Luckily with Ext JS, you are able to move around\n  files very easily. Many things are configurable. In the <strong>app.json</strong>\n  file, there will be an output block. In this block, you can rename the files,\n  change the extension from the index page. (for example, in case you want to\n  change it to a jsp or php file…), and you are also able to change the base\n  path. Once the base path is changed, you probably will need to change all the\n  other paths as well. Have a look into the <strong>app.json</strong> file that\n  I wrote, or the snippets below: <a href=\"https://github.com/savelee/ext-workspace-demo/blob/master/app1/app.json\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/ext-workspace-demo/blob/master/app1/app.json</a>\n  The output block:</p>\n<figure class=\"highlight\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">\"output\": &#123;</span><br><span class=\"line\">        \"base\": \"$&#123;workspace.build.dir&#125;/$&#123;build.environment&#125;/\",</span><br><span class=\"line\">        \"page\": \"$&#123;app.name&#125;/index.html\", //you can change this to index.jsp</span><br><span class=\"line\">        \"manifest\": \"$&#123;app.name&#125;/$&#123;build.id&#125;.json\",</span><br><span class=\"line\">        \"js\": \"$&#123;app.name&#125;/$&#123;build.id&#125;/app.js\",</span><br><span class=\"line\">        \"framework\": &#123;</span><br><span class=\"line\">          \"path\": \"framework.js\", //this will be the shared sencha framework stuff</span><br><span class=\"line\">          \"enable\": true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        \"resources\": &#123;</span><br><span class=\"line\">            \"path\": \"$&#123;app.name&#125;/$&#123;build.id&#125;/resources\",</span><br><span class=\"line\">            \"shared\": \"resources\"</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The archivePath, to move the archives folder: <code>&quot;archivePath&quot;:\n    &quot;${app.name}/archive/${build.id}&quot;,</code> The appCache block, to\n  move the <strong>app.cache</strong> file. Note, it’s also located in the\n  production block.</p>\n<figure class=\"highlight\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">\"appCache\": &#123;</span><br><span class=\"line\">            \"path\": \"$&#123;app.name&#125;/app.cache\",</span><br><span class=\"line\">            \"enable\": false</span><br><span class=\"line\">&#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The cache block, to move the delta folders:</p>\n<figure class=\"highlight\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">\"cache\": &#123;</span><br><span class=\"line\">        \"enable\": false,</span><br><span class=\"line\">        \"deltas\": \"$&#123;app.name&#125;/$&#123;build.id&#125;/deltas\"</span><br><span class=\"line\">&#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Versioning Systems I mentioned it before, there are a couple of scripts, you\n  ideally don’t want to check into your source control. For Git, you can write\n  a gitignore file, which blocks checking in the below files. I’m sure, other\n  versioning systems, can do the same. <a href=\"https://gist.github.com/savelee/d76bfd972531ab96f6a0\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/d76bfd972531ab96f6a0</a>\n  There are some handy links, I like to share with you:</p>\n<ul>\n  <li><a href=\"http://docs.sencha.com/cmd/6.x/advanced_cmd/cmd_compiler_reference.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/6.x/advanced_cmd/cmd_compiler_reference.html</a></li>\n  <li><a href=\"http://docs.sencha.com/cmd/6.x/advanced_cmd/cmd_advanced.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/6.x/advanced_cmd/cmd_advanced.html</a></li>\n</ul>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>This guide will describe how to deal with an infrastructure, that contains\n  multiple Ext JS apps. I will discuss:</p>\n<ul>\n  <li>Local workspaces</li>\n  <li>How to split builds</li>\n  <li>How to modify file paths and output settings</li>\n</ul>","more":"<h2 id=\"About-Workspaces\"><a href=\"#About-Workspaces\" class=\"headerlink\" title=\"About Workspaces\"></a>About\n  Workspaces</h2>\n<p>To support these, Sencha Cmd defines the concept of a “Workspace”. A\n  Workspace is simply a folder that ultimately contains one or more apps\n  (pages), frameworks, packages and other shared code or files. The location of\n  the Workspace root folder should be chosen to facilitate these needs as well\n  as your source control requirements. Any generated applications/pages created\n  in sub-folders of the Workspace folder regardless of their depth are\n  considered to be members of the Workspace. Though not a requirement, it is\n  typically the case that the Workspace folder is the root folder in a source\n  control repository. To create a workspace, you will need to have a downloaded\n  copy of the Ext JS framework on your hard disk, also you will need to have\n  Sencha Cmd installed. On the command-line navigate to the downloaded Ext JS\n  sdk folder. From here, enter the following command: <code>sencha generate\n    workspace [path to workspace[</code> This will generate the following\n  folder structure:</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">workspace.json   # The JSON descriptor for the workspace.</span><br><span class=\"line\">ext\t\t     # A copy of the Ext JS sdk, examples/docs are stripped out</span><br><span class=\"line\">packages\t     # Empty folder, which will contain shared code / themes</span><br><span class=\"line\">.sencha/                # Sencha-specific files (e.g. configuration)</span><br><span class=\"line\">    workspace/          # Workspace-specific content (see below)</span><br><span class=\"line\">        sencha.cfg       # Configuration file for Sencha Cmd</span><br><span class=\"line\">        plugin.xml        # Plugin for Sencha Cmd</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Within this workspace you can generate Ext JS apps, from the <em>ext</em>\n  folder: <code>cd ext</code> <code>sencha generate app MyApp [folder-name[</code>\n  All applications within the workspace, can share the same Sencha ext folder,\n  code packages (such as custom components, themes or locals) can be shared\n  across both apps and also applications can find each other in the workspace.\n  (for example, in case you want to extend from apps.) For more information\n  about workspaces see:</p>\n<ul>\n  <li><a href=\"http://docs.sencha.com/cmd/6.x/workspaces.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/6.x/workspaces.html</a></li>\n  <li><a href=\"http://docs.sencha.com/cmd/6.x/extjs/cmd_app.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/6.x/extjs/cmd_app.html</a></li>\n</ul>\n<h2 id=\"Splitting-builds\"><a href=\"#Splitting-builds\" class=\"headerlink\" title=\"Splitting builds\"></a>Splitting\n  builds</h2>\n<p>By default, a workspace only matters on your development machine. Once you\n  make a build: <code>sencha app build</code> Sencha will copy all the used\n  framework classes and all your self written Sencha classes to a build folder.\n  For production, all scripts will be minified. Also the Sass themes will be\n  compiled to production ready css, and copied together with the resources.\n  This means, by default, all shared frameworks and code packages, will be\n  duplicated in the production build, as they can run as stand-alones. For most\n  users, this behavior is exactly what they want. However, there are reasons,\n  why people want to “split” their builds, and host code packages or frameworks\n  separated from their app code. Examples of such reasons are:</p>\n<ul>\n  <li>You are creating your own application framework. You are dynamically\n    generating views, or maybe you are hosting the framework within a portal,\n    expecting your code base will grow over time.</li>\n  <li>You are building a large application, with separated areas, such as an\n    application, and an admin panel. Each of these areas, could be treated as\n    an app itself. Which contains many views, controllers and models etc. It\n    might be that you have different user groups visiting these apps. Why\n    deliver them code, which they don’t need?</li>\n  <li>Your application became huge, and you want to split your scripts in\n    smaller chunks. For the last reason, there’s a good tutorial online: <a href=\"https://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/</a></li>\n</ul>\n<p>Let’s dive into this topic, about splitting builds. Assuming you want to\n  exclude the Sencha framework classes from your own app code. In every sencha\n  application folder, there’s a hidden <strong>.sencha</strong> folder. This\n  hidden folder contains lots of build scripts, settings and metadata used by\n  Sencha Cmd. One of those files is: <strong>js-impl.xml</strong>, an Apache\n  Ant build script, which contains an <strong>compile-js</strong> block, which\n  takes care of filtering out all the used framework classes, and all your own\n  JavaScript classes, to create a (minified) build: <a href=\"https://gist.github.com/savelee/b854dba3217ed5fb0252\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/b854dba3217ed5fb0252</a>\n  It checks if, setting: <strong>enable.split.mode</strong> is set to true, and\n  if so, it will split your framework with a minified, concatenated framework\n  file &amp; a minified, concatenated <strong>app.js</strong> file, which\n  contains your own classes. Note, by default this setting is false.\n  Unfortunately, the code in the first block, doesn’t really work in Ext JS 6.\n  But you can change it to something like below, to make it working again. I’ve\n  been playing around with this: <a href=\"https://gist.github.com/savelee/4c2fdd2bda303bc03704\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/4c2fdd2bda303bc03704</a>\n  *NOTE: I will need to test this further, but this code will need some more\n  iterations though, I have the idea, you can union more, by tagging the `Ext`\n  namespace. Also, saving this script in <strong>js-impl.xml</strong>, is not a\n  best practice. When you reinstall Sencha Cmd, and upgrade your app, you will\n  loose everything that’s inside the hidden <strong>.sencha</strong> folder.\n  Instead you want to move this script out and leave it a build xml file within\n  your project.</p>\n<ul>\n  <li>You can find a working example in my Github repository: <a href=\"https://github.com/savelee/ext-workspace-demo/blob/master/app1/.sencha/app/js-impl.xml\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/ext-workspace-demo/blob/master/app1/.sencha/app/js-impl.xml</a></li>\n</ul>\n<p>In this example, I have 2 generated Sencha apps. <strong>MyApp1</strong> and\n  <strong>MyApp2</strong>. Both contain a custom build file, to make sure the\n  framework will be filtered out of the final build. ##Build properties So\n  where is this <em>enable.split.mode</em> setting coming from? It’s a property\n  file, and the hidden <strong>.sencha</strong> folder, has many properties\n  files. You can find them all in: <strong>default.properties</strong>. To\n  fine-tune your build, you could open <strong>production.properties</strong>,\n  and add the props you like, for example:</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">enable.split.mode=true</span><br><span class=\"line\">build.out.framework.path=$&#123;build.out.base.path&#125;/$&#123;app.output.framework.path&#125;</span><br><span class=\"line\">app.output.framework=framework.js</span><br><span class=\"line\">app.output.framework.path=$&#123;app.output.framework&#125;</span><br><span class=\"line\">app.output.framework.enable=false</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Ideally you shouldn’t edit the <strong>.properties</strong> files, these are\n  located in the hidden sencha folder, so this means they will be overwritten\n  when you update Sencha Cmd. Additionally, I don’t recommend, checking <strong>.sencha</strong>\n  and framework folders in source control systems such like Git. You don’t want\n  to get merge errors, when other team members have newer versions of software,\n  running on their machines. So to make these changes, to make sure that the\n  sencha build process, splits the build, you can make changes in the <strong>app.json</strong>\n  file of your app:</p>\n<figure class=\"highlight\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">\"output\": &#123;</span><br><span class=\"line\">..</span><br><span class=\"line\">        \"framework\": &#123;</span><br><span class=\"line\">          \"path\": \"$&#123;workspace.build.dir&#125;/$&#123;build.environment&#125;/framework.js\",</span><br><span class=\"line\">          \"enable\": true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">..</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Move the framework.js outside the app build folder Now that we know how to\n  split builds, or you might want to move assets / scripts around. By default\n  it will include <strong>framework.js</strong> and <strong>app.js</strong> in\n  the same application folder but this will be a file, which needs to be\n  located on a central place. Luckily with Ext JS, you are able to move around\n  files very easily. Many things are configurable. In the <strong>app.json</strong>\n  file, there will be an output block. In this block, you can rename the files,\n  change the extension from the index page. (for example, in case you want to\n  change it to a jsp or php file…), and you are also able to change the base\n  path. Once the base path is changed, you probably will need to change all the\n  other paths as well. Have a look into the <strong>app.json</strong> file that\n  I wrote, or the snippets below: <a href=\"https://github.com/savelee/ext-workspace-demo/blob/master/app1/app.json\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/ext-workspace-demo/blob/master/app1/app.json</a>\n  The output block:</p>\n<figure class=\"highlight\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">\"output\": &#123;</span><br><span class=\"line\">        \"base\": \"$&#123;workspace.build.dir&#125;/$&#123;build.environment&#125;/\",</span><br><span class=\"line\">        \"page\": \"$&#123;app.name&#125;/index.html\", //you can change this to index.jsp</span><br><span class=\"line\">        \"manifest\": \"$&#123;app.name&#125;/$&#123;build.id&#125;.json\",</span><br><span class=\"line\">        \"js\": \"$&#123;app.name&#125;/$&#123;build.id&#125;/app.js\",</span><br><span class=\"line\">        \"framework\": &#123;</span><br><span class=\"line\">          \"path\": \"framework.js\", //this will be the shared sencha framework stuff</span><br><span class=\"line\">          \"enable\": true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        \"resources\": &#123;</span><br><span class=\"line\">            \"path\": \"$&#123;app.name&#125;/$&#123;build.id&#125;/resources\",</span><br><span class=\"line\">            \"shared\": \"resources\"</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The archivePath, to move the archives folder: <code>&quot;archivePath&quot;:\n    &quot;${app.name}/archive/${build.id}&quot;,</code> The appCache block, to\n  move the <strong>app.cache</strong> file. Note, it’s also located in the\n  production block.</p>\n<figure class=\"highlight\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">\"appCache\": &#123;</span><br><span class=\"line\">            \"path\": \"$&#123;app.name&#125;/app.cache\",</span><br><span class=\"line\">            \"enable\": false</span><br><span class=\"line\">&#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The cache block, to move the delta folders:</p>\n<figure class=\"highlight\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">\"cache\": &#123;</span><br><span class=\"line\">        \"enable\": false,</span><br><span class=\"line\">        \"deltas\": \"$&#123;app.name&#125;/$&#123;build.id&#125;/deltas\"</span><br><span class=\"line\">&#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Versioning Systems I mentioned it before, there are a couple of scripts, you\n  ideally don’t want to check into your source control. For Git, you can write\n  a gitignore file, which blocks checking in the below files. I’m sure, other\n  versioning systems, can do the same. <a href=\"https://gist.github.com/savelee/d76bfd972531ab96f6a0\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/d76bfd972531ab96f6a0</a>\n  There are some handy links, I like to share with you:</p>\n<ul>\n  <li><a href=\"http://docs.sencha.com/cmd/6.x/advanced_cmd/cmd_compiler_reference.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/6.x/advanced_cmd/cmd_compiler_reference.html</a></li>\n  <li><a href=\"http://docs.sencha.com/cmd/6.x/advanced_cmd/cmd_advanced.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/6.x/advanced_cmd/cmd_advanced.html</a></li>\n</ul>"},{"title":"Create a TV app with Sencha Touch and Sencha Architect","date":"2014-06-16T10:00:02.000Z","_content":"\nOften people think, Sencha Touch is a great framework to create **mobile phone apps with.** While that is certainly true, it's also a great framework to create mobile apps with, as in **any** **touch enabled device**.\n\nThink about car navigation systems, game consoles, smart watches or tv/media centers. These devices all probably run HTML5; and are great to build Sencha Touch apps for. To show you something cool this week; I will provide you all the steps, how you can create a simple media app with Sencha Touch and our visual design tool: Sencha Architect.\n\n<!--more-->\n\nThis is the app we will build: **TouchTunes**, a videoclip app, which you can run on your tv and control it with your fingers or with a TV remote!\n\nThe Setup\n---------\n\n1. Open **Sencha Architect** \n2. Choose **Sencha Touch 2.3** \n3. Save Project: - TouchTunes - touchtunes \n4. Configuration - http://localhost:1841/touchtunes \n5. Create a new resolution: (Let's take this: http://www.samsungdforum.com/Devtools/Spec) **Samsung TV App 960x540** \n6. **Switch the orientation**\n\nThe Model\n---------\n\n1. Click in the project inspector on the **+ button** \n2. Select **Model** \n3. Select the new Model \n4. In the Config panel make the following settings: _- userClassName: Video - fields: artist,id,image,preview,title_\n5. Select the _artist_ field \n6. In the Config panel make the following settings: _- mappings: [\"im:artist\"].label_ \n7. Do the same for the following fields: _- id - id.attributes[\"im:id\"] - image - [\"im:image\"][2].label - preview - link[1].attributes.href - title - [\"im:name\"].label_\n\nThe Store\n---------\n\n1. Click in the project inspector on the **+ button** \n2. Select **Store > JsonP Store** \n3. Select the new Store \n4. In the Config panel make the following settings: _- userClassName: Videos - model: Video - autoLoad: check - MyJsonPProxy: select - url: https://itunes.apple.com/us/rss/topmusicvideos/limit=25/json - MyJsonReader: select - rootProperty: feed.entry_\n\nTest Feed\n---------\n\n1. **Save** Architect \n2. Press **Preview** \n3. In your browser: Right Click: Inspect Element \n4. Go to the Network tab \n5. Review: https://itunes.apple.com/us/rss/topmusicvideos/limit=25/json?_dc=1392819371345&page=1&start=0&limit=25&callback=Ext.data.JsonP.callback1 It should return a JSON feed. 6. Run the following command in your browser console: _Ext.getStore('Videos').getCount();_ It should return 25.\n\nViews\n-----\n\n1. In your toolbox, filter for **Container** \n2. Drag a Container into the design canvas \n3. Click the **gear icon** in the top right of the container component \n4. Select a layout: **hbox** \n5. In the Config Panel, make the following setting: _- requires: Ext.Video_ \n6. In your toolbox, filter for **Toolbar** \n7. Drag a Toolbar component into the Container \n8. Double click on the Toolbar and set the following text: _“TouchTunes”_ \n9. In your toolbox, filter for List \n10. Drag a List into the Container \n11. Select the List \n12. In the Config panel, make the following settings: _- flex: 2 - store: Videos - itemTpl: select - <div>{artist:ellipsis(20, false)} - {title:ellipsis(20, false)}</div>_ \n13. In your toolbox, filter for Container \n14. Drag another Container into the Project Inspector > Views > Container, right above the List \n15. Select the new Container \n16. In the Config panel, make the following settings: _- flex: 3 - cls: holder - displayName: Holder - layout: vbox - align: center - pack: center_ \n17. In your toolbox, filter for **Image** \n18. Drag an Image component into the Project Inspector > Views > Holder, \n19. Select the new Image 20. In the Config panel, make the following settings: _- width: 400 - height: 300_\n\nNavigation View\n---------------\n\n1. In your toolbox, filter for **Navigation View** \n2. Drag the Navigation View into the Project Inspector > Views\n3. Drag the MyContainer into the Navigation View \n4. Press the **Link** button when prompted. \n5. In the Config Panel make the following settings: _- useralias: navview - initialView: check - navigationbar: uncheck_\n\nListeners\n---------\n\n1. In the Project Inspector, select the **List** \n2. In the Config panel, select **Event Bindings** \n3. **Add Basic Event Binding** \n4. Choose the **select** event \n5. In the Project Inspector, double click on the **onMylistSelect** function \n6. Enter the following code:\n\n``` JavaScript\nvar image = Ext.ComponentQuery.query('container[cls=holder] .image')[0];\nimage.setSrc(record.get('image'));\n```\n\nThe Controller\n--------------\n\nWe will map some keyboard keys, check out: http://wiki.xbmc.org/index.php?title=Keyboard_controls We will map the arrow keys, the spacebar and the enter key. \n1. Click in the project inspector on the **+ button** \n2. Select **Controller** \n3. In the Config Panel, set the following settings: _- userClassName: Navigation - Actions: Add - Choose a target type: Ext.dataview.List - Choose an event by name: initialize - Enter the following code:_\n\n``` JavaScript\nvar me = this;\ndocument.addEventListener('keydown',function(e){\n if(e.keyCode == 40) {\n   Ext.Viewport.down('list').fireEvent('downkey', e);\n }\n if(e.keyCode == 38) {\n   Ext.Viewport.down('list').fireEvent('upkey', e);\n }\n if(e.keyCode == 37) {\n   Ext.Viewport.down('list').fireEvent('leftkey', e);\n }\n if(e.keyCode == 39) {\n   Ext.Viewport.down('list').fireEvent('rightkey', e);\n }\n if(e.keyCode == 13) {\n   Ext.Viewport.down('list').fireEvent('enterkey', e);\n }\n if(e.keyCode == 32) {\n   Ext.Viewport.down('list').fireEvent('spaceKey', e);\n }\n});\n```\n\n4. Select the Navigation Controller and Add the following functions: _- navDown - navUp - navEnter - videoPause - navList_ \n5. Double click the navDown() function and enter the following code: _this.navList(1);_ \n6. Double click the navUp() function and enter the following code: _this.navList(-1);_ \n7. Double click the navList() function and enter the following code:\n\n``` JavaScript\nvar list = Ext.Viewport.down('list'),\nrecords = list.getSelection(),\nstore = Ext.getStore('Videos'),\ncount = store.getCount();\n\nif(records.length > 0) {\n  var i = store.find('id', records[0].get('id')),\n  next = store.getAt(i+direction);\n\n  if(i+direction < 0){\n    //console.log('reached the top');\n    list.select(0);\n  } else if(i+direction >= store.getCount()) {\n    //console.log('reached the end');\n    list.select(count-1);\n  } else {\n    //console.log(i + direction, records[0]);\n    list.select(i + direction);\n    list.scrollToRecord(next);\n  }\n\n} else {\n  list.select(0);\n}\n```\n\n8. Double click the navEnter() function and enter the following code:\n\n``` JavaScript\nvar list = Ext.Viewport.down('list'),\nrecord = list.getSelection()[0],\nvideo = Ext.Viewport.down('video');\nif(video){\n  video.stop();\n} else if(record){\n  var data = record.getData();\n  Ext.Viewport.down('navview').push({\n    xtype: 'video',\n    url: data.preview,\n    id: 'myvideos',\n    title: data.title,\n    listeners: {\n      painted: function (component) {\n        Ext.getCmp('myvideos').setEnableControls(true);\n        Ext.getCmp('myvideos').play();\n        Ext.getCmp('myvideos').ghost.hide();\n        Ext.getCmp('myvideos').media.show();\n      },\n      pause: function(){\n        Ext.getCmp('myvideos').ghost.hide();\n        Ext.getCmp('myvideos').media.show();\n      },\n      stop: function(component){ \n        Ext.Viewport.down('navview').pop();\n      }\n   }\n});\n}\n```\n\n9. Double click the videoPause() function and use the following code:\n\n``` JavaScript\nvar video = Ext.Viewport.down('video');\nif(video){\n  if(video.isPlaying()){\n    video.pause();\n  } else {\n    video.play();\n  }\n}\n```\n\n10. Double click the videoPrev() function and use the following code: \n11. Double click the videoNext() function and use the following code: \n12. In the Config Panel, add 6 Actions: (Option, Target type, Event name, Function Body) - Controller Action - Ext.dataview.List - downkey this.navDown(); - Controller Action - Ext.dataview.List - upkey this.navUp(); - Controller Action - Ext.dataview.List - enterkey this.navEnter(); - Controller Action - Ext.dataview.List - spacekey this.videoPause()\n\nThe Theme\n---------\n\n1. In the Project Inspector, select **Resources > MyDefaultTheme** \n2. In the Config Panel, set the Filename to: _MediaCenter_ \n3. Click in the Config Panel, the **Theme tab** Now our app is finished, we can control it with a tv remote. The only thing is... It doesn't look like a MediaCenter app yet... Let's style it!\n\nTheme Variables\n---------------\n\n1. Filter for the following variables: _- base color: #000 - page bg color: #000 - list bg color: #000 - list color: #fff - list active color: #1b51fb; - include default icons: false - include pictos font: false_\n\nAdd custom styling\n------------------\n\n1. In the Project Inspector, select Resources > MyDefaultTheme\n2. In the Config Panel, add a SCSS snippet - Set the compile order to: **afterFramework** - Set the DisplayName to: **List**\n3. Use the following styles, to style the List:\n\n``` CSS\n.x-list {\n  margin: 0 50px;\n}\n\n.x-list .x-list-item.x-item-selected .x-dock-horizontal,\n.x-list .x-list-item.x-item-selected.x-list-item-tpl {\n\n-webkit-box-shadow: inset 1px 0px 5px 2px #347EC9;\n-moz-box-shadow: inset 1px 0px 5px 2px #347EC9;\nbox-shadow: inset 1px 0px 5px 2px #347EC9;\nbackground-color: #000;\nbackground-image: -moz-linear-gradient(top, #000, #56626E 55%, lighten(#000, 15%) 55%, #000);\nbackground-image: -webkit-linear-gradient(top, #000, #56626E 55%, lighten(#000, 15%) 55%, #000);\n\n* { color: #fff; }\n}\n```\n\n4. Create another SCSS snippet - Set the compile order to: **afterFramework** - Set the DisplayName to: **Image** \n5. Use the following styles:\n\n``` CSS\n.x-img {\n-webkit-transform: perspective(600px) rotateY(10deg);\n-webkit-box-reflect: below -1px\n-webkit-gradient(linear, left top, left bottom, from(transparent), color-stop(0.7, transparent), to(rgba(0,0,0,0.5)));\n\ntransform: perspective(600px) rotateY(10deg);\nbox-reflect: below -1px\ngradient(linear, left top, left bottom, from(transparent), color-stop(0.7, transparent), to(rgba(0,0,0,0.5)));\n\n}\n```\n\n6. Create another SCSS snippet - Set the compile order to: **beforeVariables** - Set the DisplayName to: **Fonts** \n7. Pick a Google Font: - Choose a font - Add to Collection - Click the Use tab - Copy the @Import code. For example:\n\n\n``` SCSS\n@import url(http://fonts.googleapis.com/css?family=Coda+Caption:800);\n\n- Paste it into the Architect SCSS snippet. 8. Open the List SCSS snippet, add the following styles:\n\n.x-toolbar .x-innerhtml {\n  font-family: 'Coda Caption';\n}\n```\n\nNote the name of your chosen font.\n\nBuild the app\n-------------\n\n1. In the toolbar hit the **Build web app button**. \n2. In the popup select the environment: **Production** \n3. Click **Save** \n4. Click **Run** \n5. Test your application: http://localhost:1841/Architect/TunesTouch/build/production/TunesTouch/ \n\nAnd well done! How to run this app on your TV? First, upload the production package to some server online. In case you have a smart tv, you could open the browser app, and browse to the TunesTouch app. I tested it on my Raspbmc and on the Ouya XBMC browser app, and it runs great!","source":"_posts/create-a-tv-app-with-sencha-touch-and-sencha-architect.md","raw":"---\ntitle: Create a TV app with Sencha Touch and Sencha Architect\ncategories:\n  - Sencha Architect\ndate: 2014-06-16 12:00:02\ntags:\n  - Sencha Architect\n  - Sencha Touch\n---\n\nOften people think, Sencha Touch is a great framework to create **mobile phone apps with.** While that is certainly true, it's also a great framework to create mobile apps with, as in **any** **touch enabled device**.\n\nThink about car navigation systems, game consoles, smart watches or tv/media centers. These devices all probably run HTML5; and are great to build Sencha Touch apps for. To show you something cool this week; I will provide you all the steps, how you can create a simple media app with Sencha Touch and our visual design tool: Sencha Architect.\n\n<!--more-->\n\nThis is the app we will build: **TouchTunes**, a videoclip app, which you can run on your tv and control it with your fingers or with a TV remote!\n\nThe Setup\n---------\n\n1. Open **Sencha Architect** \n2. Choose **Sencha Touch 2.3** \n3. Save Project: - TouchTunes - touchtunes \n4. Configuration - http://localhost:1841/touchtunes \n5. Create a new resolution: (Let's take this: http://www.samsungdforum.com/Devtools/Spec) **Samsung TV App 960x540** \n6. **Switch the orientation**\n\nThe Model\n---------\n\n1. Click in the project inspector on the **+ button** \n2. Select **Model** \n3. Select the new Model \n4. In the Config panel make the following settings: _- userClassName: Video - fields: artist,id,image,preview,title_\n5. Select the _artist_ field \n6. In the Config panel make the following settings: _- mappings: [\"im:artist\"].label_ \n7. Do the same for the following fields: _- id - id.attributes[\"im:id\"] - image - [\"im:image\"][2].label - preview - link[1].attributes.href - title - [\"im:name\"].label_\n\nThe Store\n---------\n\n1. Click in the project inspector on the **+ button** \n2. Select **Store > JsonP Store** \n3. Select the new Store \n4. In the Config panel make the following settings: _- userClassName: Videos - model: Video - autoLoad: check - MyJsonPProxy: select - url: https://itunes.apple.com/us/rss/topmusicvideos/limit=25/json - MyJsonReader: select - rootProperty: feed.entry_\n\nTest Feed\n---------\n\n1. **Save** Architect \n2. Press **Preview** \n3. In your browser: Right Click: Inspect Element \n4. Go to the Network tab \n5. Review: https://itunes.apple.com/us/rss/topmusicvideos/limit=25/json?_dc=1392819371345&page=1&start=0&limit=25&callback=Ext.data.JsonP.callback1 It should return a JSON feed. 6. Run the following command in your browser console: _Ext.getStore('Videos').getCount();_ It should return 25.\n\nViews\n-----\n\n1. In your toolbox, filter for **Container** \n2. Drag a Container into the design canvas \n3. Click the **gear icon** in the top right of the container component \n4. Select a layout: **hbox** \n5. In the Config Panel, make the following setting: _- requires: Ext.Video_ \n6. In your toolbox, filter for **Toolbar** \n7. Drag a Toolbar component into the Container \n8. Double click on the Toolbar and set the following text: _“TouchTunes”_ \n9. In your toolbox, filter for List \n10. Drag a List into the Container \n11. Select the List \n12. In the Config panel, make the following settings: _- flex: 2 - store: Videos - itemTpl: select - <div>{artist:ellipsis(20, false)} - {title:ellipsis(20, false)}</div>_ \n13. In your toolbox, filter for Container \n14. Drag another Container into the Project Inspector > Views > Container, right above the List \n15. Select the new Container \n16. In the Config panel, make the following settings: _- flex: 3 - cls: holder - displayName: Holder - layout: vbox - align: center - pack: center_ \n17. In your toolbox, filter for **Image** \n18. Drag an Image component into the Project Inspector > Views > Holder, \n19. Select the new Image 20. In the Config panel, make the following settings: _- width: 400 - height: 300_\n\nNavigation View\n---------------\n\n1. In your toolbox, filter for **Navigation View** \n2. Drag the Navigation View into the Project Inspector > Views\n3. Drag the MyContainer into the Navigation View \n4. Press the **Link** button when prompted. \n5. In the Config Panel make the following settings: _- useralias: navview - initialView: check - navigationbar: uncheck_\n\nListeners\n---------\n\n1. In the Project Inspector, select the **List** \n2. In the Config panel, select **Event Bindings** \n3. **Add Basic Event Binding** \n4. Choose the **select** event \n5. In the Project Inspector, double click on the **onMylistSelect** function \n6. Enter the following code:\n\n``` JavaScript\nvar image = Ext.ComponentQuery.query('container[cls=holder] .image')[0];\nimage.setSrc(record.get('image'));\n```\n\nThe Controller\n--------------\n\nWe will map some keyboard keys, check out: http://wiki.xbmc.org/index.php?title=Keyboard_controls We will map the arrow keys, the spacebar and the enter key. \n1. Click in the project inspector on the **+ button** \n2. Select **Controller** \n3. In the Config Panel, set the following settings: _- userClassName: Navigation - Actions: Add - Choose a target type: Ext.dataview.List - Choose an event by name: initialize - Enter the following code:_\n\n``` JavaScript\nvar me = this;\ndocument.addEventListener('keydown',function(e){\n if(e.keyCode == 40) {\n   Ext.Viewport.down('list').fireEvent('downkey', e);\n }\n if(e.keyCode == 38) {\n   Ext.Viewport.down('list').fireEvent('upkey', e);\n }\n if(e.keyCode == 37) {\n   Ext.Viewport.down('list').fireEvent('leftkey', e);\n }\n if(e.keyCode == 39) {\n   Ext.Viewport.down('list').fireEvent('rightkey', e);\n }\n if(e.keyCode == 13) {\n   Ext.Viewport.down('list').fireEvent('enterkey', e);\n }\n if(e.keyCode == 32) {\n   Ext.Viewport.down('list').fireEvent('spaceKey', e);\n }\n});\n```\n\n4. Select the Navigation Controller and Add the following functions: _- navDown - navUp - navEnter - videoPause - navList_ \n5. Double click the navDown() function and enter the following code: _this.navList(1);_ \n6. Double click the navUp() function and enter the following code: _this.navList(-1);_ \n7. Double click the navList() function and enter the following code:\n\n``` JavaScript\nvar list = Ext.Viewport.down('list'),\nrecords = list.getSelection(),\nstore = Ext.getStore('Videos'),\ncount = store.getCount();\n\nif(records.length > 0) {\n  var i = store.find('id', records[0].get('id')),\n  next = store.getAt(i+direction);\n\n  if(i+direction < 0){\n    //console.log('reached the top');\n    list.select(0);\n  } else if(i+direction >= store.getCount()) {\n    //console.log('reached the end');\n    list.select(count-1);\n  } else {\n    //console.log(i + direction, records[0]);\n    list.select(i + direction);\n    list.scrollToRecord(next);\n  }\n\n} else {\n  list.select(0);\n}\n```\n\n8. Double click the navEnter() function and enter the following code:\n\n``` JavaScript\nvar list = Ext.Viewport.down('list'),\nrecord = list.getSelection()[0],\nvideo = Ext.Viewport.down('video');\nif(video){\n  video.stop();\n} else if(record){\n  var data = record.getData();\n  Ext.Viewport.down('navview').push({\n    xtype: 'video',\n    url: data.preview,\n    id: 'myvideos',\n    title: data.title,\n    listeners: {\n      painted: function (component) {\n        Ext.getCmp('myvideos').setEnableControls(true);\n        Ext.getCmp('myvideos').play();\n        Ext.getCmp('myvideos').ghost.hide();\n        Ext.getCmp('myvideos').media.show();\n      },\n      pause: function(){\n        Ext.getCmp('myvideos').ghost.hide();\n        Ext.getCmp('myvideos').media.show();\n      },\n      stop: function(component){ \n        Ext.Viewport.down('navview').pop();\n      }\n   }\n});\n}\n```\n\n9. Double click the videoPause() function and use the following code:\n\n``` JavaScript\nvar video = Ext.Viewport.down('video');\nif(video){\n  if(video.isPlaying()){\n    video.pause();\n  } else {\n    video.play();\n  }\n}\n```\n\n10. Double click the videoPrev() function and use the following code: \n11. Double click the videoNext() function and use the following code: \n12. In the Config Panel, add 6 Actions: (Option, Target type, Event name, Function Body) - Controller Action - Ext.dataview.List - downkey this.navDown(); - Controller Action - Ext.dataview.List - upkey this.navUp(); - Controller Action - Ext.dataview.List - enterkey this.navEnter(); - Controller Action - Ext.dataview.List - spacekey this.videoPause()\n\nThe Theme\n---------\n\n1. In the Project Inspector, select **Resources > MyDefaultTheme** \n2. In the Config Panel, set the Filename to: _MediaCenter_ \n3. Click in the Config Panel, the **Theme tab** Now our app is finished, we can control it with a tv remote. The only thing is... It doesn't look like a MediaCenter app yet... Let's style it!\n\nTheme Variables\n---------------\n\n1. Filter for the following variables: _- base color: #000 - page bg color: #000 - list bg color: #000 - list color: #fff - list active color: #1b51fb; - include default icons: false - include pictos font: false_\n\nAdd custom styling\n------------------\n\n1. In the Project Inspector, select Resources > MyDefaultTheme\n2. In the Config Panel, add a SCSS snippet - Set the compile order to: **afterFramework** - Set the DisplayName to: **List**\n3. Use the following styles, to style the List:\n\n``` CSS\n.x-list {\n  margin: 0 50px;\n}\n\n.x-list .x-list-item.x-item-selected .x-dock-horizontal,\n.x-list .x-list-item.x-item-selected.x-list-item-tpl {\n\n-webkit-box-shadow: inset 1px 0px 5px 2px #347EC9;\n-moz-box-shadow: inset 1px 0px 5px 2px #347EC9;\nbox-shadow: inset 1px 0px 5px 2px #347EC9;\nbackground-color: #000;\nbackground-image: -moz-linear-gradient(top, #000, #56626E 55%, lighten(#000, 15%) 55%, #000);\nbackground-image: -webkit-linear-gradient(top, #000, #56626E 55%, lighten(#000, 15%) 55%, #000);\n\n* { color: #fff; }\n}\n```\n\n4. Create another SCSS snippet - Set the compile order to: **afterFramework** - Set the DisplayName to: **Image** \n5. Use the following styles:\n\n``` CSS\n.x-img {\n-webkit-transform: perspective(600px) rotateY(10deg);\n-webkit-box-reflect: below -1px\n-webkit-gradient(linear, left top, left bottom, from(transparent), color-stop(0.7, transparent), to(rgba(0,0,0,0.5)));\n\ntransform: perspective(600px) rotateY(10deg);\nbox-reflect: below -1px\ngradient(linear, left top, left bottom, from(transparent), color-stop(0.7, transparent), to(rgba(0,0,0,0.5)));\n\n}\n```\n\n6. Create another SCSS snippet - Set the compile order to: **beforeVariables** - Set the DisplayName to: **Fonts** \n7. Pick a Google Font: - Choose a font - Add to Collection - Click the Use tab - Copy the @Import code. For example:\n\n\n``` SCSS\n@import url(http://fonts.googleapis.com/css?family=Coda+Caption:800);\n\n- Paste it into the Architect SCSS snippet. 8. Open the List SCSS snippet, add the following styles:\n\n.x-toolbar .x-innerhtml {\n  font-family: 'Coda Caption';\n}\n```\n\nNote the name of your chosen font.\n\nBuild the app\n-------------\n\n1. In the toolbar hit the **Build web app button**. \n2. In the popup select the environment: **Production** \n3. Click **Save** \n4. Click **Run** \n5. Test your application: http://localhost:1841/Architect/TunesTouch/build/production/TunesTouch/ \n\nAnd well done! How to run this app on your TV? First, upload the production package to some server online. In case you have a smart tv, you could open the browser app, and browse to the TunesTouch app. I tested it on my Raspbmc and on the Ouya XBMC browser app, and it runs great!","slug":"create-a-tv-app-with-sencha-touch-and-sencha-architect","published":1,"updated":"2018-11-30T14:54:31.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncqq009hkif5p7v4r1e9","content":"<p>Often people think, Sencha Touch is a great framework to create <strong>mobile\n    phone apps with.</strong> While that is certainly true, it’s also a great\n  framework to create mobile apps with, as in <strong>any</strong> <strong>touch\n    enabled device</strong>.</p>\n<p>Think about car navigation systems, game consoles, smart watches or tv/media\n  centers. These devices all probably run HTML5; and are great to build Sencha\n  Touch apps for. To show you something cool this week; I will provide you all\n  the steps, how you can create a simple media app with Sencha Touch and our\n  visual design tool: Sencha Architect.</p>\n<a id=\"more\"></a>\n<p>This is the app we will build: <strong>TouchTunes</strong>, a videoclip app,\n  which you can run on your tv and control it with your fingers or with a TV\n  remote!</p>\n<h2 id=\"The-Setup\"><a href=\"#The-Setup\" class=\"headerlink\" title=\"The Setup\"></a>The\n  Setup</h2>\n<ol>\n  <li>Open <strong>Sencha Architect</strong></li>\n  <li>Choose <strong>Sencha Touch 2.3</strong></li>\n  <li>Save Project: - TouchTunes - touchtunes</li>\n  <li>Configuration - <a href=\"http://localhost:1841/touchtunes\" target=\"_blank\" rel=\"noopener\">http://localhost:1841/touchtunes</a></li>\n  <li>Create a new resolution: (Let’s take this: <a href=\"http://www.samsungdforum.com/Devtools/Spec\" target=\"_blank\" rel=\"noopener\">http://www.samsungdforum.com/Devtools/Spec</a>)\n    <strong>Samsung TV App 960x540</strong></li>\n  <li><strong>Switch the orientation</strong></li>\n</ol>\n<h2 id=\"The-Model\"><a href=\"#The-Model\" class=\"headerlink\" title=\"The Model\"></a>The\n  Model</h2>\n<ol>\n  <li>Click in the project inspector on the <strong>+ button</strong></li>\n  <li>Select <strong>Model</strong></li>\n  <li>Select the new Model</li>\n  <li>In the Config panel make the following settings: <em>- userClassName:\n      Video - fields: artist,id,image,preview,title</em></li>\n  <li>Select the <em>artist</em> field</li>\n  <li>In the Config panel make the following settings: <em>- mappings:\n      [“im:artist”].label</em></li>\n  <li>Do the same for the following fields: <em>- id - id.attributes[“im:id”] -\n      image - [“im:image”][2].label - preview - link[1].attributes.href - title\n      - [“im:name”].label</em></li>\n</ol>\n<h2 id=\"The-Store\"><a href=\"#The-Store\" class=\"headerlink\" title=\"The Store\"></a>The\n  Store</h2>\n<ol>\n  <li>Click in the project inspector on the <strong>+ button</strong></li>\n  <li>Select <strong>Store &gt; JsonP Store</strong></li>\n  <li>Select the new Store</li>\n  <li>In the Config panel make the following settings: <em>- userClassName:\n      Videos - model: Video - autoLoad: check - MyJsonPProxy: select - url: <a href=\"https://itunes.apple.com/us/rss/topmusicvideos/limit=25/json\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/us/rss/topmusicvideos/limit=25/json</a>\n      - MyJsonReader: select - rootProperty: feed.entry</em></li>\n</ol>\n<h2 id=\"Test-Feed\"><a href=\"#Test-Feed\" class=\"headerlink\" title=\"Test Feed\"></a>Test\n  Feed</h2>\n<ol>\n  <li><strong>Save</strong> Architect</li>\n  <li>Press <strong>Preview</strong></li>\n  <li>In your browser: Right Click: Inspect Element</li>\n  <li>Go to the Network tab</li>\n  <li>Review: <a href=\"https://itunes.apple.com/us/rss/topmusicvideos/limit=25/json?_dc=1392819371345&amp;page=1&amp;start=0&amp;limit=25&amp;callback=Ext.data.JsonP.callback1\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/us/rss/topmusicvideos/limit=25/json?_dc=1392819371345&amp;page=1&amp;start=0&amp;limit=25&amp;callback=Ext.data.JsonP.callback1</a>\n    It should return a JSON feed. 6. Run the following command in your browser\n    console: <em>Ext.getStore(‘Videos’).getCount();</em> It should return 25.</li>\n</ol>\n<h2 id=\"Views\"><a href=\"#Views\" class=\"headerlink\" title=\"Views\"></a>Views</h2>\n<ol>\n  <li>In your toolbox, filter for <strong>Container</strong></li>\n  <li>Drag a Container into the design canvas</li>\n  <li>Click the <strong>gear icon</strong> in the top right of the container\n    component</li>\n  <li>Select a layout: <strong>hbox</strong></li>\n  <li>In the Config Panel, make the following setting: <em>- requires:\n      Ext.Video</em></li>\n  <li>In your toolbox, filter for <strong>Toolbar</strong></li>\n  <li>Drag a Toolbar component into the Container</li>\n  <li>Double click on the Toolbar and set the following text: <em>“TouchTunes”</em></li>\n  <li>In your toolbox, filter for List</li>\n  <li>Drag a List into the Container</li>\n  <li>Select the List</li>\n  <li>In the Config panel, make the following settings: <em>- flex: 2 - store:\n      Videos - itemTpl: select -<div>{artist:ellipsis(20, false)} -\n        {title:ellipsis(20, false)}</div></em></li>\n  <li>In your toolbox, filter for Container</li>\n  <li>Drag another Container into the Project Inspector &gt; Views &gt;\n    Container, right above the List</li>\n  <li>Select the new Container</li>\n  <li>In the Config panel, make the following settings: <em>- flex: 3 - cls:\n      holder - displayName: Holder - layout: vbox - align: center - pack:\n      center</em></li>\n  <li>In your toolbox, filter for <strong>Image</strong></li>\n  <li>Drag an Image component into the Project Inspector &gt; Views &gt;\n    Holder,</li>\n  <li>Select the new Image 20. In the Config panel, make the following\n    settings: <em>- width: 400 - height: 300</em></li>\n</ol>\n<h2 id=\"Navigation-View\"><a href=\"#Navigation-View\" class=\"headerlink\" title=\"Navigation View\"></a>Navigation\n  View</h2>\n<ol>\n  <li>In your toolbox, filter for <strong>Navigation View</strong></li>\n  <li>Drag the Navigation View into the Project Inspector &gt; Views</li>\n  <li>Drag the MyContainer into the Navigation View</li>\n  <li>Press the <strong>Link</strong> button when prompted.</li>\n  <li>In the Config Panel make the following settings: <em>- useralias: navview\n      - initialView: check - navigationbar: uncheck</em></li>\n</ol>\n<h2 id=\"Listeners\"><a href=\"#Listeners\" class=\"headerlink\" title=\"Listeners\"></a>Listeners</h2>\n<ol>\n  <li>In the Project Inspector, select the <strong>List</strong></li>\n  <li>In the Config panel, select <strong>Event Bindings</strong></li>\n  <li><strong>Add Basic Event Binding</strong></li>\n  <li>Choose the <strong>select</strong> event</li>\n  <li>In the Project Inspector, double click on the <strong>onMylistSelect</strong>\n    function</li>\n  <li>Enter the following code:</li>\n</ol>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">var</span> image = Ext.ComponentQuery.query(<span class=\"string\">'container[cls=holder] .image'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">image.setSrc(record.get(<span class=\"string\">'image'</span>));</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<h2 id=\"The-Controller\"><a href=\"#The-Controller\" class=\"headerlink\" title=\"The Controller\"></a>The\n  Controller</h2>\n<p>We will map some keyboard keys, check out: <a href=\"http://wiki.xbmc.org/index.php?title=Keyboard_controls\" target=\"_blank\" rel=\"noopener\">http://wiki.xbmc.org/index.php?title=Keyboard_controls</a>\n  We will map the arrow keys, the spacebar and the enter key.</p>\n<ol>\n  <li>Click in the project inspector on the <strong>+ button</strong></li>\n  <li>Select <strong>Controller</strong></li>\n  <li>In the Config Panel, set the following settings: <em>- userClassName:\n      Navigation - Actions: Add - Choose a target type: Ext.dataview.List -\n      Choose an event by name: initialize - Enter the following code:</em></li>\n</ol>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'keydown'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(e.keyCode == <span class=\"number\">40</span>) &#123;</span><br><span class=\"line\">   Ext.Viewport.down(<span class=\"string\">'list'</span>).fireEvent(<span class=\"string\">'downkey'</span>, e);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(e.keyCode == <span class=\"number\">38</span>) &#123;</span><br><span class=\"line\">   Ext.Viewport.down(<span class=\"string\">'list'</span>).fireEvent(<span class=\"string\">'upkey'</span>, e);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(e.keyCode == <span class=\"number\">37</span>) &#123;</span><br><span class=\"line\">   Ext.Viewport.down(<span class=\"string\">'list'</span>).fireEvent(<span class=\"string\">'leftkey'</span>, e);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(e.keyCode == <span class=\"number\">39</span>) &#123;</span><br><span class=\"line\">   Ext.Viewport.down(<span class=\"string\">'list'</span>).fireEvent(<span class=\"string\">'rightkey'</span>, e);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(e.keyCode == <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">   Ext.Viewport.down(<span class=\"string\">'list'</span>).fireEvent(<span class=\"string\">'enterkey'</span>, e);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(e.keyCode == <span class=\"number\">32</span>) &#123;</span><br><span class=\"line\">   Ext.Viewport.down(<span class=\"string\">'list'</span>).fireEvent(<span class=\"string\">'spaceKey'</span>, e);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"4\">\n  <li>Select the Navigation Controller and Add the following functions: <em>-\n      navDown - navUp - navEnter - videoPause - navList</em></li>\n  <li>Double click the navDown() function and enter the following code: <em>this.navList(1);</em></li>\n  <li>Double click the navUp() function and enter the following code: <em>this.navList(-1);</em></li>\n  <li>Double click the navList() function and enter the following code:</li>\n</ol>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">var</span> list = Ext.Viewport.down(<span class=\"string\">'list'</span>),</span><br><span class=\"line\">records = list.getSelection(),</span><br><span class=\"line\">store = Ext.getStore(<span class=\"string\">'Videos'</span>),</span><br><span class=\"line\">count = store.getCount();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(records.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = store.find(<span class=\"string\">'id'</span>, records[<span class=\"number\">0</span>].get(<span class=\"string\">'id'</span>)),</span><br><span class=\"line\">  next = store.getAt(i+direction);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(i+direction &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//console.log('reached the top');</span></span><br><span class=\"line\">    list.select(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i+direction &gt;= store.getCount()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//console.log('reached the end');</span></span><br><span class=\"line\">    list.select(count<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//console.log(i + direction, records[0]);</span></span><br><span class=\"line\">    list.select(i + direction);</span><br><span class=\"line\">    list.scrollToRecord(next);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  list.select(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"8\">\n  <li>Double click the navEnter() function and enter the following code:</li>\n</ol>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">var</span> list = Ext.Viewport.down(<span class=\"string\">'list'</span>),</span><br><span class=\"line\">record = list.getSelection()[<span class=\"number\">0</span>],</span><br><span class=\"line\">video = Ext.Viewport.down(<span class=\"string\">'video'</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(video)&#123;</span><br><span class=\"line\">  video.stop();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(record)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = record.getData();</span><br><span class=\"line\">  Ext.Viewport.down(<span class=\"string\">'navview'</span>).push(&#123;</span><br><span class=\"line\">    xtype: <span class=\"string\">'video'</span>,</span><br><span class=\"line\">    url: data.preview,</span><br><span class=\"line\">    id: <span class=\"string\">'myvideos'</span>,</span><br><span class=\"line\">    title: data.title,</span><br><span class=\"line\">    listeners: &#123;</span><br><span class=\"line\">      painted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">component</span>) </span>&#123;</span><br><span class=\"line\">        Ext.getCmp(<span class=\"string\">'myvideos'</span>).setEnableControls(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        Ext.getCmp(<span class=\"string\">'myvideos'</span>).play();</span><br><span class=\"line\">        Ext.getCmp(<span class=\"string\">'myvideos'</span>).ghost.hide();</span><br><span class=\"line\">        Ext.getCmp(<span class=\"string\">'myvideos'</span>).media.show();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      pause: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        Ext.getCmp(<span class=\"string\">'myvideos'</span>).ghost.hide();</span><br><span class=\"line\">        Ext.getCmp(<span class=\"string\">'myvideos'</span>).media.show();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      stop: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">component</span>)</span>&#123; </span><br><span class=\"line\">        Ext.Viewport.down(<span class=\"string\">'navview'</span>).pop();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"9\">\n  <li>Double click the videoPause() function and use the following code:</li>\n</ol>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">var</span> video = Ext.Viewport.down(<span class=\"string\">'video'</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(video)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(video.isPlaying())&#123;</span><br><span class=\"line\">    video.pause();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    video.play();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"10\">\n  <li>Double click the videoPrev() function and use the following code:</li>\n  <li>Double click the videoNext() function and use the following code:</li>\n  <li>In the Config Panel, add 6 Actions: (Option, Target type, Event name,\n    Function Body) - Controller Action - Ext.dataview.List - downkey\n    this.navDown(); - Controller Action - Ext.dataview.List - upkey\n    this.navUp(); - Controller Action - Ext.dataview.List - enterkey\n    this.navEnter(); - Controller Action - Ext.dataview.List - spacekey\n    this.videoPause()</li>\n</ol>\n<h2 id=\"The-Theme\"><a href=\"#The-Theme\" class=\"headerlink\" title=\"The Theme\"></a>The\n  Theme</h2>\n<ol>\n  <li>In the Project Inspector, select <strong>Resources &gt; MyDefaultTheme</strong></li>\n  <li>In the Config Panel, set the Filename to: <em>MediaCenter</em></li>\n  <li>Click in the Config Panel, the <strong>Theme tab</strong> Now our app is\n    finished, we can control it with a tv remote. The only thing is… It doesn’t\n    look like a MediaCenter app yet… Let’s style it!</li>\n</ol>\n<h2 id=\"Theme-Variables\"><a href=\"#Theme-Variables\" class=\"headerlink\" title=\"Theme Variables\"></a>Theme\n  Variables</h2>\n<ol>\n  <li>Filter for the following variables: <em>- base color: #000 - page bg\n      color: #000 - list bg color: #000 - list color: #fff - list active color:\n      #1b51fb; - include default icons: false - include pictos font: false</em></li>\n</ol>\n<h2 id=\"Add-custom-styling\"><a href=\"#Add-custom-styling\" class=\"headerlink\" title=\"Add custom styling\"></a>Add\n  custom styling</h2>\n<ol>\n  <li>In the Project Inspector, select Resources &gt; MyDefaultTheme</li>\n  <li>In the Config Panel, add a SCSS snippet - Set the compile order to:\n    <strong>afterFramework</strong> - Set the DisplayName to: <strong>List</strong></li>\n  <li>Use the following styles, to style the List:</li>\n</ol>\n<figure class=\"highlight css\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"selector-class\">.x-list</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.x-list</span> <span class=\"selector-class\">.x-list-item</span><span class=\"selector-class\">.x-item-selected</span> <span class=\"selector-class\">.x-dock-horizontal</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.x-list</span> <span class=\"selector-class\">.x-list-item</span><span class=\"selector-class\">.x-item-selected</span><span class=\"selector-class\">.x-list-item-tpl</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">-webkit-box-shadow</span>: inset <span class=\"number\">1px</span> <span class=\"number\">0px</span> <span class=\"number\">5px</span> <span class=\"number\">2px</span> <span class=\"number\">#347EC9</span>;</span><br><span class=\"line\"><span class=\"attribute\">-moz-box-shadow</span>: inset <span class=\"number\">1px</span> <span class=\"number\">0px</span> <span class=\"number\">5px</span> <span class=\"number\">2px</span> <span class=\"number\">#347EC9</span>;</span><br><span class=\"line\"><span class=\"attribute\">box-shadow</span>: inset <span class=\"number\">1px</span> <span class=\"number\">0px</span> <span class=\"number\">5px</span> <span class=\"number\">2px</span> <span class=\"number\">#347EC9</span>;</span><br><span class=\"line\"><span class=\"attribute\">background-color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\"><span class=\"attribute\">background-image</span>: <span class=\"built_in\">-moz-linear-gradient</span>(top, #000, #56626E 55%, lighten(#000, 15%) <span class=\"number\">55%</span>, <span class=\"number\">#000</span>);</span><br><span class=\"line\"><span class=\"attribute\">background-image</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(top, #000, #56626E 55%, lighten(#000, 15%) <span class=\"number\">55%</span>, <span class=\"number\">#000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">* &#123; color: #fff; &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"4\">\n  <li>Create another SCSS snippet - Set the compile order to: <strong>afterFramework</strong>\n    - Set the DisplayName to: <strong>Image</strong></li>\n  <li>Use the following styles:</li>\n</ol>\n<figure class=\"highlight css\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"selector-class\">.x-img</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">perspective</span>(600px) <span class=\"built_in\">rotateY</span>(10deg);</span><br><span class=\"line\"><span class=\"attribute\">-webkit-box-reflect</span>: below -<span class=\"number\">1px</span></span><br><span class=\"line\"><span class=\"built_in\">-webkit-gradient</span>(linear, left top, left bottom, from(transparent), <span class=\"built_in\">color-stop</span>(0.7, transparent), <span class=\"built_in\">to</span>(rgba(0,0,0,0.5)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">transform</span>: <span class=\"built_in\">perspective</span>(600px) <span class=\"built_in\">rotateY</span>(10deg);</span><br><span class=\"line\"><span class=\"attribute\">box-reflect</span>: below -<span class=\"number\">1px</span></span><br><span class=\"line\"><span class=\"built_in\">gradient</span>(linear, left top, left bottom, from(transparent), <span class=\"built_in\">color-stop</span>(0.7, transparent), <span class=\"built_in\">to</span>(rgba(0,0,0,0.5)));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"6\">\n  <li>Create another SCSS snippet - Set the compile order to: <strong>beforeVariables</strong>\n    - Set the DisplayName to: <strong>Fonts</strong></li>\n  <li>Pick a Google Font: - Choose a font - Add to Collection - Click the Use\n    tab - Copy the @Import code. For example:</li>\n</ol>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@<span class=\"keyword\">import</span> url(http://fonts.googleapis.com/css?family=Coda+Caption:<span class=\"number\">800</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">- Paste it into the Architect SCSS snippet. 8. Open the List SCSS snippet, add the following styles:</span><br><span class=\"line\"></span><br><span class=\"line\">.x-toolbar .x-innerhtml &#123;</span><br><span class=\"line\">  font-family: <span class=\"string\">'Coda Caption'</span>;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Note the name of your chosen font.</p>\n<h2 id=\"Build-the-app\"><a href=\"#Build-the-app\" class=\"headerlink\" title=\"Build the app\"></a>Build\n  the app</h2>\n<ol>\n  <li>In the toolbar hit the <strong>Build web app button</strong>.</li>\n  <li>In the popup select the environment: <strong>Production</strong></li>\n  <li>Click <strong>Save</strong></li>\n  <li>Click <strong>Run</strong></li>\n  <li>Test your application: <a href=\"http://localhost:1841/Architect/TunesTouch/build/production/TunesTouch/\" target=\"_blank\" rel=\"noopener\">http://localhost:1841/Architect/TunesTouch/build/production/TunesTouch/</a></li>\n</ol>\n<p>And well done! How to run this app on your TV? First, upload the production\n  package to some server online. In case you have a smart tv, you could open\n  the browser app, and browse to the TunesTouch app. I tested it on my Raspbmc\n  and on the Ouya XBMC browser app, and it runs great!</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>Often people think, Sencha Touch is a great framework to create <strong>mobile\n    phone apps with.</strong> While that is certainly true, it’s also a great\n  framework to create mobile apps with, as in <strong>any</strong> <strong>touch\n    enabled device</strong>.</p>\n<p>Think about car navigation systems, game consoles, smart watches or tv/media\n  centers. These devices all probably run HTML5; and are great to build Sencha\n  Touch apps for. To show you something cool this week; I will provide you all\n  the steps, how you can create a simple media app with Sencha Touch and our\n  visual design tool: Sencha Architect.</p>","more":"<p>This is the app we will build: <strong>TouchTunes</strong>, a videoclip app,\n  which you can run on your tv and control it with your fingers or with a TV\n  remote!</p>\n<h2 id=\"The-Setup\"><a href=\"#The-Setup\" class=\"headerlink\" title=\"The Setup\"></a>The\n  Setup</h2>\n<ol>\n  <li>Open <strong>Sencha Architect</strong></li>\n  <li>Choose <strong>Sencha Touch 2.3</strong></li>\n  <li>Save Project: - TouchTunes - touchtunes</li>\n  <li>Configuration - <a href=\"http://localhost:1841/touchtunes\" target=\"_blank\" rel=\"noopener\">http://localhost:1841/touchtunes</a></li>\n  <li>Create a new resolution: (Let’s take this: <a href=\"http://www.samsungdforum.com/Devtools/Spec\" target=\"_blank\" rel=\"noopener\">http://www.samsungdforum.com/Devtools/Spec</a>)\n    <strong>Samsung TV App 960x540</strong></li>\n  <li><strong>Switch the orientation</strong></li>\n</ol>\n<h2 id=\"The-Model\"><a href=\"#The-Model\" class=\"headerlink\" title=\"The Model\"></a>The\n  Model</h2>\n<ol>\n  <li>Click in the project inspector on the <strong>+ button</strong></li>\n  <li>Select <strong>Model</strong></li>\n  <li>Select the new Model</li>\n  <li>In the Config panel make the following settings: <em>- userClassName:\n      Video - fields: artist,id,image,preview,title</em></li>\n  <li>Select the <em>artist</em> field</li>\n  <li>In the Config panel make the following settings: <em>- mappings:\n      [“im:artist”].label</em></li>\n  <li>Do the same for the following fields: <em>- id - id.attributes[“im:id”] -\n      image - [“im:image”][2].label - preview - link[1].attributes.href - title\n      - [“im:name”].label</em></li>\n</ol>\n<h2 id=\"The-Store\"><a href=\"#The-Store\" class=\"headerlink\" title=\"The Store\"></a>The\n  Store</h2>\n<ol>\n  <li>Click in the project inspector on the <strong>+ button</strong></li>\n  <li>Select <strong>Store &gt; JsonP Store</strong></li>\n  <li>Select the new Store</li>\n  <li>In the Config panel make the following settings: <em>- userClassName:\n      Videos - model: Video - autoLoad: check - MyJsonPProxy: select - url: <a href=\"https://itunes.apple.com/us/rss/topmusicvideos/limit=25/json\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/us/rss/topmusicvideos/limit=25/json</a>\n      - MyJsonReader: select - rootProperty: feed.entry</em></li>\n</ol>\n<h2 id=\"Test-Feed\"><a href=\"#Test-Feed\" class=\"headerlink\" title=\"Test Feed\"></a>Test\n  Feed</h2>\n<ol>\n  <li><strong>Save</strong> Architect</li>\n  <li>Press <strong>Preview</strong></li>\n  <li>In your browser: Right Click: Inspect Element</li>\n  <li>Go to the Network tab</li>\n  <li>Review: <a href=\"https://itunes.apple.com/us/rss/topmusicvideos/limit=25/json?_dc=1392819371345&amp;page=1&amp;start=0&amp;limit=25&amp;callback=Ext.data.JsonP.callback1\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/us/rss/topmusicvideos/limit=25/json?_dc=1392819371345&amp;page=1&amp;start=0&amp;limit=25&amp;callback=Ext.data.JsonP.callback1</a>\n    It should return a JSON feed. 6. Run the following command in your browser\n    console: <em>Ext.getStore(‘Videos’).getCount();</em> It should return 25.</li>\n</ol>\n<h2 id=\"Views\"><a href=\"#Views\" class=\"headerlink\" title=\"Views\"></a>Views</h2>\n<ol>\n  <li>In your toolbox, filter for <strong>Container</strong></li>\n  <li>Drag a Container into the design canvas</li>\n  <li>Click the <strong>gear icon</strong> in the top right of the container\n    component</li>\n  <li>Select a layout: <strong>hbox</strong></li>\n  <li>In the Config Panel, make the following setting: <em>- requires:\n      Ext.Video</em></li>\n  <li>In your toolbox, filter for <strong>Toolbar</strong></li>\n  <li>Drag a Toolbar component into the Container</li>\n  <li>Double click on the Toolbar and set the following text: <em>“TouchTunes”</em></li>\n  <li>In your toolbox, filter for List</li>\n  <li>Drag a List into the Container</li>\n  <li>Select the List</li>\n  <li>In the Config panel, make the following settings: <em>- flex: 2 - store:\n      Videos - itemTpl: select -<div>{artist:ellipsis(20, false)} -\n        {title:ellipsis(20, false)}</div></em></li>\n  <li>In your toolbox, filter for Container</li>\n  <li>Drag another Container into the Project Inspector &gt; Views &gt;\n    Container, right above the List</li>\n  <li>Select the new Container</li>\n  <li>In the Config panel, make the following settings: <em>- flex: 3 - cls:\n      holder - displayName: Holder - layout: vbox - align: center - pack:\n      center</em></li>\n  <li>In your toolbox, filter for <strong>Image</strong></li>\n  <li>Drag an Image component into the Project Inspector &gt; Views &gt;\n    Holder,</li>\n  <li>Select the new Image 20. In the Config panel, make the following\n    settings: <em>- width: 400 - height: 300</em></li>\n</ol>\n<h2 id=\"Navigation-View\"><a href=\"#Navigation-View\" class=\"headerlink\" title=\"Navigation View\"></a>Navigation\n  View</h2>\n<ol>\n  <li>In your toolbox, filter for <strong>Navigation View</strong></li>\n  <li>Drag the Navigation View into the Project Inspector &gt; Views</li>\n  <li>Drag the MyContainer into the Navigation View</li>\n  <li>Press the <strong>Link</strong> button when prompted.</li>\n  <li>In the Config Panel make the following settings: <em>- useralias: navview\n      - initialView: check - navigationbar: uncheck</em></li>\n</ol>\n<h2 id=\"Listeners\"><a href=\"#Listeners\" class=\"headerlink\" title=\"Listeners\"></a>Listeners</h2>\n<ol>\n  <li>In the Project Inspector, select the <strong>List</strong></li>\n  <li>In the Config panel, select <strong>Event Bindings</strong></li>\n  <li><strong>Add Basic Event Binding</strong></li>\n  <li>Choose the <strong>select</strong> event</li>\n  <li>In the Project Inspector, double click on the <strong>onMylistSelect</strong>\n    function</li>\n  <li>Enter the following code:</li>\n</ol>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">var</span> image = Ext.ComponentQuery.query(<span class=\"string\">'container[cls=holder] .image'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">image.setSrc(record.get(<span class=\"string\">'image'</span>));</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<h2 id=\"The-Controller\"><a href=\"#The-Controller\" class=\"headerlink\" title=\"The Controller\"></a>The\n  Controller</h2>\n<p>We will map some keyboard keys, check out: <a href=\"http://wiki.xbmc.org/index.php?title=Keyboard_controls\" target=\"_blank\" rel=\"noopener\">http://wiki.xbmc.org/index.php?title=Keyboard_controls</a>\n  We will map the arrow keys, the spacebar and the enter key.</p>\n<ol>\n  <li>Click in the project inspector on the <strong>+ button</strong></li>\n  <li>Select <strong>Controller</strong></li>\n  <li>In the Config Panel, set the following settings: <em>- userClassName:\n      Navigation - Actions: Add - Choose a target type: Ext.dataview.List -\n      Choose an event by name: initialize - Enter the following code:</em></li>\n</ol>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'keydown'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(e.keyCode == <span class=\"number\">40</span>) &#123;</span><br><span class=\"line\">   Ext.Viewport.down(<span class=\"string\">'list'</span>).fireEvent(<span class=\"string\">'downkey'</span>, e);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(e.keyCode == <span class=\"number\">38</span>) &#123;</span><br><span class=\"line\">   Ext.Viewport.down(<span class=\"string\">'list'</span>).fireEvent(<span class=\"string\">'upkey'</span>, e);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(e.keyCode == <span class=\"number\">37</span>) &#123;</span><br><span class=\"line\">   Ext.Viewport.down(<span class=\"string\">'list'</span>).fireEvent(<span class=\"string\">'leftkey'</span>, e);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(e.keyCode == <span class=\"number\">39</span>) &#123;</span><br><span class=\"line\">   Ext.Viewport.down(<span class=\"string\">'list'</span>).fireEvent(<span class=\"string\">'rightkey'</span>, e);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(e.keyCode == <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">   Ext.Viewport.down(<span class=\"string\">'list'</span>).fireEvent(<span class=\"string\">'enterkey'</span>, e);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(e.keyCode == <span class=\"number\">32</span>) &#123;</span><br><span class=\"line\">   Ext.Viewport.down(<span class=\"string\">'list'</span>).fireEvent(<span class=\"string\">'spaceKey'</span>, e);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"4\">\n  <li>Select the Navigation Controller and Add the following functions: <em>-\n      navDown - navUp - navEnter - videoPause - navList</em></li>\n  <li>Double click the navDown() function and enter the following code: <em>this.navList(1);</em></li>\n  <li>Double click the navUp() function and enter the following code: <em>this.navList(-1);</em></li>\n  <li>Double click the navList() function and enter the following code:</li>\n</ol>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">var</span> list = Ext.Viewport.down(<span class=\"string\">'list'</span>),</span><br><span class=\"line\">records = list.getSelection(),</span><br><span class=\"line\">store = Ext.getStore(<span class=\"string\">'Videos'</span>),</span><br><span class=\"line\">count = store.getCount();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(records.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = store.find(<span class=\"string\">'id'</span>, records[<span class=\"number\">0</span>].get(<span class=\"string\">'id'</span>)),</span><br><span class=\"line\">  next = store.getAt(i+direction);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(i+direction &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//console.log('reached the top');</span></span><br><span class=\"line\">    list.select(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i+direction &gt;= store.getCount()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//console.log('reached the end');</span></span><br><span class=\"line\">    list.select(count<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//console.log(i + direction, records[0]);</span></span><br><span class=\"line\">    list.select(i + direction);</span><br><span class=\"line\">    list.scrollToRecord(next);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  list.select(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"8\">\n  <li>Double click the navEnter() function and enter the following code:</li>\n</ol>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">var</span> list = Ext.Viewport.down(<span class=\"string\">'list'</span>),</span><br><span class=\"line\">record = list.getSelection()[<span class=\"number\">0</span>],</span><br><span class=\"line\">video = Ext.Viewport.down(<span class=\"string\">'video'</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(video)&#123;</span><br><span class=\"line\">  video.stop();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(record)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = record.getData();</span><br><span class=\"line\">  Ext.Viewport.down(<span class=\"string\">'navview'</span>).push(&#123;</span><br><span class=\"line\">    xtype: <span class=\"string\">'video'</span>,</span><br><span class=\"line\">    url: data.preview,</span><br><span class=\"line\">    id: <span class=\"string\">'myvideos'</span>,</span><br><span class=\"line\">    title: data.title,</span><br><span class=\"line\">    listeners: &#123;</span><br><span class=\"line\">      painted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">component</span>) </span>&#123;</span><br><span class=\"line\">        Ext.getCmp(<span class=\"string\">'myvideos'</span>).setEnableControls(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        Ext.getCmp(<span class=\"string\">'myvideos'</span>).play();</span><br><span class=\"line\">        Ext.getCmp(<span class=\"string\">'myvideos'</span>).ghost.hide();</span><br><span class=\"line\">        Ext.getCmp(<span class=\"string\">'myvideos'</span>).media.show();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      pause: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        Ext.getCmp(<span class=\"string\">'myvideos'</span>).ghost.hide();</span><br><span class=\"line\">        Ext.getCmp(<span class=\"string\">'myvideos'</span>).media.show();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      stop: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">component</span>)</span>&#123; </span><br><span class=\"line\">        Ext.Viewport.down(<span class=\"string\">'navview'</span>).pop();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"9\">\n  <li>Double click the videoPause() function and use the following code:</li>\n</ol>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">var</span> video = Ext.Viewport.down(<span class=\"string\">'video'</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(video)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(video.isPlaying())&#123;</span><br><span class=\"line\">    video.pause();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    video.play();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"10\">\n  <li>Double click the videoPrev() function and use the following code:</li>\n  <li>Double click the videoNext() function and use the following code:</li>\n  <li>In the Config Panel, add 6 Actions: (Option, Target type, Event name,\n    Function Body) - Controller Action - Ext.dataview.List - downkey\n    this.navDown(); - Controller Action - Ext.dataview.List - upkey\n    this.navUp(); - Controller Action - Ext.dataview.List - enterkey\n    this.navEnter(); - Controller Action - Ext.dataview.List - spacekey\n    this.videoPause()</li>\n</ol>\n<h2 id=\"The-Theme\"><a href=\"#The-Theme\" class=\"headerlink\" title=\"The Theme\"></a>The\n  Theme</h2>\n<ol>\n  <li>In the Project Inspector, select <strong>Resources &gt; MyDefaultTheme</strong></li>\n  <li>In the Config Panel, set the Filename to: <em>MediaCenter</em></li>\n  <li>Click in the Config Panel, the <strong>Theme tab</strong> Now our app is\n    finished, we can control it with a tv remote. The only thing is… It doesn’t\n    look like a MediaCenter app yet… Let’s style it!</li>\n</ol>\n<h2 id=\"Theme-Variables\"><a href=\"#Theme-Variables\" class=\"headerlink\" title=\"Theme Variables\"></a>Theme\n  Variables</h2>\n<ol>\n  <li>Filter for the following variables: <em>- base color: #000 - page bg\n      color: #000 - list bg color: #000 - list color: #fff - list active color:\n      #1b51fb; - include default icons: false - include pictos font: false</em></li>\n</ol>\n<h2 id=\"Add-custom-styling\"><a href=\"#Add-custom-styling\" class=\"headerlink\" title=\"Add custom styling\"></a>Add\n  custom styling</h2>\n<ol>\n  <li>In the Project Inspector, select Resources &gt; MyDefaultTheme</li>\n  <li>In the Config Panel, add a SCSS snippet - Set the compile order to:\n    <strong>afterFramework</strong> - Set the DisplayName to: <strong>List</strong></li>\n  <li>Use the following styles, to style the List:</li>\n</ol>\n<figure class=\"highlight css\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"selector-class\">.x-list</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.x-list</span> <span class=\"selector-class\">.x-list-item</span><span class=\"selector-class\">.x-item-selected</span> <span class=\"selector-class\">.x-dock-horizontal</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.x-list</span> <span class=\"selector-class\">.x-list-item</span><span class=\"selector-class\">.x-item-selected</span><span class=\"selector-class\">.x-list-item-tpl</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">-webkit-box-shadow</span>: inset <span class=\"number\">1px</span> <span class=\"number\">0px</span> <span class=\"number\">5px</span> <span class=\"number\">2px</span> <span class=\"number\">#347EC9</span>;</span><br><span class=\"line\"><span class=\"attribute\">-moz-box-shadow</span>: inset <span class=\"number\">1px</span> <span class=\"number\">0px</span> <span class=\"number\">5px</span> <span class=\"number\">2px</span> <span class=\"number\">#347EC9</span>;</span><br><span class=\"line\"><span class=\"attribute\">box-shadow</span>: inset <span class=\"number\">1px</span> <span class=\"number\">0px</span> <span class=\"number\">5px</span> <span class=\"number\">2px</span> <span class=\"number\">#347EC9</span>;</span><br><span class=\"line\"><span class=\"attribute\">background-color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\"><span class=\"attribute\">background-image</span>: <span class=\"built_in\">-moz-linear-gradient</span>(top, #000, #56626E 55%, lighten(#000, 15%) <span class=\"number\">55%</span>, <span class=\"number\">#000</span>);</span><br><span class=\"line\"><span class=\"attribute\">background-image</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(top, #000, #56626E 55%, lighten(#000, 15%) <span class=\"number\">55%</span>, <span class=\"number\">#000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">* &#123; color: #fff; &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"4\">\n  <li>Create another SCSS snippet - Set the compile order to: <strong>afterFramework</strong>\n    - Set the DisplayName to: <strong>Image</strong></li>\n  <li>Use the following styles:</li>\n</ol>\n<figure class=\"highlight css\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"selector-class\">.x-img</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">perspective</span>(600px) <span class=\"built_in\">rotateY</span>(10deg);</span><br><span class=\"line\"><span class=\"attribute\">-webkit-box-reflect</span>: below -<span class=\"number\">1px</span></span><br><span class=\"line\"><span class=\"built_in\">-webkit-gradient</span>(linear, left top, left bottom, from(transparent), <span class=\"built_in\">color-stop</span>(0.7, transparent), <span class=\"built_in\">to</span>(rgba(0,0,0,0.5)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">transform</span>: <span class=\"built_in\">perspective</span>(600px) <span class=\"built_in\">rotateY</span>(10deg);</span><br><span class=\"line\"><span class=\"attribute\">box-reflect</span>: below -<span class=\"number\">1px</span></span><br><span class=\"line\"><span class=\"built_in\">gradient</span>(linear, left top, left bottom, from(transparent), <span class=\"built_in\">color-stop</span>(0.7, transparent), <span class=\"built_in\">to</span>(rgba(0,0,0,0.5)));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ol start=\"6\">\n  <li>Create another SCSS snippet - Set the compile order to: <strong>beforeVariables</strong>\n    - Set the DisplayName to: <strong>Fonts</strong></li>\n  <li>Pick a Google Font: - Choose a font - Add to Collection - Click the Use\n    tab - Copy the @Import code. For example:</li>\n</ol>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@<span class=\"keyword\">import</span> url(http://fonts.googleapis.com/css?family=Coda+Caption:<span class=\"number\">800</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">- Paste it into the Architect SCSS snippet. 8. Open the List SCSS snippet, add the following styles:</span><br><span class=\"line\"></span><br><span class=\"line\">.x-toolbar .x-innerhtml &#123;</span><br><span class=\"line\">  font-family: <span class=\"string\">'Coda Caption'</span>;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Note the name of your chosen font.</p>\n<h2 id=\"Build-the-app\"><a href=\"#Build-the-app\" class=\"headerlink\" title=\"Build the app\"></a>Build\n  the app</h2>\n<ol>\n  <li>In the toolbar hit the <strong>Build web app button</strong>.</li>\n  <li>In the popup select the environment: <strong>Production</strong></li>\n  <li>Click <strong>Save</strong></li>\n  <li>Click <strong>Run</strong></li>\n  <li>Test your application: <a href=\"http://localhost:1841/Architect/TunesTouch/build/production/TunesTouch/\" target=\"_blank\" rel=\"noopener\">http://localhost:1841/Architect/TunesTouch/build/production/TunesTouch/</a></li>\n</ol>\n<p>And well done! How to run this app on your TV? First, upload the production\n  package to some server online. In case you have a smart tv, you could open\n  the browser app, and browse to the TunesTouch app. I tested it on my Raspbmc\n  and on the Ouya XBMC browser app, and it runs great!</p>"},{"title":"Getting Started with Sencha Touch 2: Build a Weather Utility App (Part 2)","description":"Welcome at this series of blog posts How to create a utility app with Sencha Touch and Sencha Cmd","date":"2014-04-14T08:48:47.000Z","_content":"\nIn this three-part Sencha Touch tutorial, you will build the _Do I need my Umbrella app_, a simple utility app that loads weather information from a web service — worldweatheronline.com. Based on weather codes, this app can predict if you need your umbrella or not.\n<!--more-->\n\nIn this second part of the tutorial, you will start to build an app theme. You will use the code from part 1 of this tutorial. You can find the tutorial [here](http://www.leeboonstra.com/developer/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-1).\n\nHere are some additional resources:  \nYou can download the final app code — [full solution](https://training.sencha.com/sencha-blog/tutorial-dec-2013-lee/goodies-tutorial/fullsolution-download.zip) and [stylesheet](https://training.sencha.com/sencha-blog/tutorial-dec-2013-lee/goodies-tutorial/stylesheet-download.zip).  \nThere are some [tutorial goodies](https://training.sencha.com/sencha-blog/tutorial-dec-2013-lee/goodies-tutorial/fonts-download.zip).  \nYou can see the app itself with the custom theme [here](https://training.sencha.com/sencha-blog/tutorial-dec-2013-lee/dinmu/).\n\nThis tutorial requires:\n\n*   Sencha Touch 2.3 or higher\n*   Sencha Cmd 4.x\n*   Compass & Sass on top of Ruby\n*   A modern browser\n*   Editor\n\n### Extend from the default theme\n\nYou will build a custom theme that is based on the default theme. The default theme is a good theme to extend from, because it has a lot of Sencha Sass variables and mixins, which can be found in the API Docs.\n\n![Weather App Tutorial](/images/weather-app-1-docs.png)\n\nBy default, when generating an application with Sencha Cmd, a _resources_ folder is already generated for you, with an empty Sass stylesheet: app.scss. Let’s open: **app.scss**\n\nThe Sass stylesheet will look like this:\n\n``` SCSS\n//(1) Define your Sencha variables here\n@import 'sencha-touch/default';\n@import 'sencha-touch/default/all';\n\n\n//(2) Define your custom Sass/CSS code and mixins here\n```\n\nIn the top (1), you will define all your (Sencha) variables; directly after the variables you will include the mixins. It’s important to keep this order, otherwise the variables won’t have any effect. The imports make use of these variables.\n\nAfter the imports (2), you can start writing your own custom CSS rules and mixins.\n\nLet’s start very easy and change the base-color:\n\n``` SCSS\n$base-color: #42282E;\n```\n\nBy changing the base-color, you will set a primary color scheme that most of the Sencha Touch components use.\n\nLet’s test it. With Sencha Cmd on the command-line, run the following command: sencha app watch\n\nSencha Cmd 4 and higher has the command sencha app watch. You can compare this with the Compass command: compass watch. Sencha Cmd _watches_ the app and every time you hit save, Sencha Cmd builds your app and compiles your Sass Stylesheets. When changes are detected, only the minimum amount of work necessary is performed to bring your app and its CSS up to date, saving you from rebuilding your Sass.\n\nPreview your application in a modern browser: [http://localhost/dinmu](http://localhost/dinmu).\n\nNow let’s play around. Sencha Touch has some really good Sass variables and mixins you can use to easily customize your theme. A great tool to get the right color combinations is Adobe Kuler. Go explore some populair color schemes: [https://kuler.adobe.com/explore/most-popular/?time=month](https://kuler.adobe.com/explore/most-popular/?time=month), and let’s use these as the color variables for _Do I need the Umbrella_ app.\n\nLet’s set the colors for the buttons, alert box, and both screen backgrounds (settings and main):\n\n``` SCSS\n$alert-color: #D6665A;\n$confirm-color: #75A48B;\n$page-bg-color: lighten(#D9CFB0,15%);\n$form-bg-color: $page-bg-color;\n```\n\nAlso, let’s get rid of all the gradients:\n\n``` SCSS\n$base-gradient: 'none';\n```\n\nThe bottom toolbar has the ui: ‘light’. Let’s create a mixin to style the light skin of the bottom toolbar. You can use the sencha-toolbar-ui for this. We can implement it below the sencha imports (2):\n\n``` SCSS\n@include sencha-toolbar-ui('light', #DC9B74, 'none');\n```\n\n![Weather App Tutorial](/images/weather-app-2-styling.png)\n\n### Create custom CSS\n\nNow let’s implement our own CSS rules.\n\nFirst, we will modify the toolbar title text:\n\n``` SCSS\n.title {\n    .x-title {\n        line-height: 2.5em;\n        text-shadow: none;\n        letter-spacing: -1px;\n    }\n}\n```\n\nNext, let’s position the footer text:\n\n``` SCSS\n.footer {\n    font-size: 0.6em;\n    padding: 12px;\n    text-align: right;\n    letter-spacing: 0;\n    a {\n        color :#000;\n    }\n}\n```\n\nYou will also need some styles for the custom template. Let’s modify the font and font colors:\n\n``` SCSS\n.textview {\n    color: black;\n    line-height: 1.2em;\n    letter-spacing: -1px;\n    padding: 0.8em;\n    text-transform: uppercase;\n\n\n    .yes {\n        color: $alert-color;\n    }\n    .no {\n        color: $confirm-color;\n    }\n    .temp {\n        color: $confirm-color;\n    }\n}\n```\n\nLet’s edit the settings form. In your Sass stylesheet, create the styles to tweak the settings form:\n\n``` SCSS\n.x-form-fieldset {\n    .x-form-fieldset-inner {\n        border: none;\n        background: $page-bg-color;\n    }\n    .x-form-fieldset-instructions .x-innerhtml {\n        color: #000;\n    }\n}\n\n.x-form-label {\n    background-color: lighten(#DC9B74, 32%);\n}\n.x-toggle-field .x-form-label {\n    background: none;\n    border: none;\n    margin-bottom: 20px;\n}\n.x-toggle {\n    position: absolute;\n    right: 0;\n}\n```\n\n### Implement a custom font\n\nRight above the sencha imports, add the imports for the font. We will make use of the Google Fonts service. With this font-service you can browse through lots of hosted font families and choose a font to implement:\n\n``` SCSS\n@import url(http://fonts.googleapis.com/css?family=Oswald:700);\n@import url(http://fonts.googleapis.com/css?family=Lobster);\n```\n\nNow, set the fonts.\n\nFor the toolbar title, add the following rules to the `.x-title` CSS class:\n\n``` SCSS\nfont: {\n    family: \"Lobster\";\n    size: 1.2em;\n}\n```\n\nFor the template view, add the following rules to the `.textview` CSS class:\n\n``` SCSS\nfont: {\n    family: \"Oswald\";\n    size: 2em;\n}\n```\n\n### Tweak the performance\n\nIf you want to optimize your Sencha Touch application for performance, optimizing your Stylesheet is probably the easiest thing to do; and it's very effective. Let’s reduce the file size of the compiled CSS stylesheet.\n\nAutomatically, when you generated your app with Sencha Cmd, the compiled CSS stylesheet was minified. This works because of the `output_style` setting in the _resources/sass/config.rb_ file. Would you rather have the output readable? Set the output_style value to `:expanded`, but note, your file size will grow.\n\nCheck the _resources/sass/config.rb_ file, it should be set like this:\n\n`output_style = :compressed`\n\nInstead of importing all Sencha Touch framework mixins, let’s only import the ones that are absolutely necessary. This will reduce the stylesheet size, so it will be faster to download.\n\nI usually comment out the `@import` line that imports _all_ the mixins. Then, I list all the Sencha Touch mixins myself, and I make sure Sencha Cmd is watching/compiling my Sass file (`sencha app watch`).\n\nThen I start to comment out the mixins one by one, based on the classes I don’t use. This is tricky though; there are classes that you may have never directly coded, but they are subclasses from other classes, such as +Class+ or +Panel+. That's why you should remove them one by one, while watching your terminal to see that you don't get any compile errors. The list of all the available Sencha Touch mixins can be found in: `touch/resources/themes/[theme-to-extend-from]/all.scss`.\n\nReplace `@import &lsquo;sencha-touch/default/all` with the following imports:\n\n``` SCSS\n@import 'sencha-touch/default/src/_Class.scss';\n@import 'sencha-touch/default/src/_Button.scss';\n@import 'sencha-touch/default/src/_Panel.scss';\n@import 'sencha-touch/default/src/_MessageBox.scss';\n@import 'sencha-touch/default/src/_Toolbar.scss';\n@import 'sencha-touch/default/src/carousel/_Carousel.scss';\n@import 'sencha-touch/default/src/form/_Panel.scss';\n@import 'sencha-touch/default/src/form/_FieldSet.scss';\n@import 'sencha-touch/default/src/field/_Field';\n@import 'sencha-touch/default/src/field/_Checkbox.scss';\n@import 'sencha-touch/default/src/field/_Select.scss';\n@import 'sencha-touch/default/src/field/_Slider.scss';\n@import 'sencha-touch/default/src/field/_Spinner.scss';\n@import 'sencha-touch/default/src/picker/_Picker.scss';\n@import 'sencha-touch/default/src/slider/_Slider.scss';\n@import 'sencha-touch/default/src/slider/_Toggle.scss';\n```\n\nWe are not using many icons, so there is no need to implement the Pictos icon font. In this case, let’s just use our own icon font, so we can save some extra kilobytes.\n\nAdd these variables to the top of your Sass stylesheet right before the import of the Sencha mixins:\n\n``` SCSS\n$include-pictos-font: false;\n$include-default-icons: false;\n```\n\nNow, you will include a custom icon font. I created an icon font via the IcoMoon website: [http://www.icomoon.io](http://www.icomoon.io). It’s in the goodies-tutorial folder of this tutorial. Just copy the _dinmu_ fonts folder over to _resources/sass/stylesheets/fonts/_.\n\nUnderneath the imports of the google font, import the dinmu icon font:\n\n``` SCSS\n@font-face {\n    font-family: 'Dinmu';\n    src:url('stylesheets/fonts/dinmu/Dinmu.eot');\n    src:url('stylesheets/fonts/dinmu/Dinmu.eot?#iefix') format('embedded-opentype'),\n        url('stylesheets/fonts/dinmu/Dinmu.ttf') format('truetype'),\n        url('stylesheets/fonts/dinmu/Dinmu.woff') format('woff'),\n        url('stylesheets/fonts/dinmu/Dinmu.svg#Dinmu') format('svg');\n    font-weight: normal;\n    font-style: normal;\n}\n```\n\nBelow all the imports, create an icon mixin, to display the settings button:\n\n`@include icon('settings', 's', 'Dinmu');`\n\nDirectly after that, you can code some funny icons for the template view:\n\n``` SCSS\n.rain:before,\n.norain:before {\n    font-family: 'Dinmu';\n    speak: none;\n    font-style: normal;\n    font-weight: normal;\n    font-variant: normal;\n    text-transform: none;\n    line-height: 1;\n\n    padding-right: 10px;\n    font-size: 60px;\n\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n.norain:before {\n    content: \"53\";\n    color: $confirm-color;\n}\n.rain:before {\n    content: \"52\";\n    color: $alert-color;\n}\n```\n\nFinally, the _Do I need my Umbrella_ theme is finished! Open your browser and run: [http://localhost/dinmu](http://localhost/dinmu).\n\n![Weather App Tutorial](/images/weather-app-3-styling2.png)\n\nThe next steps for improving your application would be to create a production build and port this app to a native PhoneGap app. These topics will be discussed in part 3 of this tutorial.\n\nInterested in creating Sencha themes? Starting in December, Sencha will start offering advanced Ext JS theming courses. Take a look at the [open courses](/training/) located around the world or join an online training.","source":"_posts/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-2.md","raw":"---\ntitle: 'Getting Started with Sencha Touch 2: Build a Weather Utility App (Part 2)'\ndescription: Welcome at this series of blog posts How to create a utility app with Sencha Touch and Sencha Cmd\ntags:\n  - CSS\n  - Sass\n  - Sencha Touch\n  - Theming\ncategories:\n  - Sencha Touch\ndate: 2014-04-14 10:48:47\n---\n\nIn this three-part Sencha Touch tutorial, you will build the _Do I need my Umbrella app_, a simple utility app that loads weather information from a web service — worldweatheronline.com. Based on weather codes, this app can predict if you need your umbrella or not.\n<!--more-->\n\nIn this second part of the tutorial, you will start to build an app theme. You will use the code from part 1 of this tutorial. You can find the tutorial [here](http://www.leeboonstra.com/developer/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-1).\n\nHere are some additional resources:  \nYou can download the final app code — [full solution](https://training.sencha.com/sencha-blog/tutorial-dec-2013-lee/goodies-tutorial/fullsolution-download.zip) and [stylesheet](https://training.sencha.com/sencha-blog/tutorial-dec-2013-lee/goodies-tutorial/stylesheet-download.zip).  \nThere are some [tutorial goodies](https://training.sencha.com/sencha-blog/tutorial-dec-2013-lee/goodies-tutorial/fonts-download.zip).  \nYou can see the app itself with the custom theme [here](https://training.sencha.com/sencha-blog/tutorial-dec-2013-lee/dinmu/).\n\nThis tutorial requires:\n\n*   Sencha Touch 2.3 or higher\n*   Sencha Cmd 4.x\n*   Compass & Sass on top of Ruby\n*   A modern browser\n*   Editor\n\n### Extend from the default theme\n\nYou will build a custom theme that is based on the default theme. The default theme is a good theme to extend from, because it has a lot of Sencha Sass variables and mixins, which can be found in the API Docs.\n\n![Weather App Tutorial](/images/weather-app-1-docs.png)\n\nBy default, when generating an application with Sencha Cmd, a _resources_ folder is already generated for you, with an empty Sass stylesheet: app.scss. Let’s open: **app.scss**\n\nThe Sass stylesheet will look like this:\n\n``` SCSS\n//(1) Define your Sencha variables here\n@import 'sencha-touch/default';\n@import 'sencha-touch/default/all';\n\n\n//(2) Define your custom Sass/CSS code and mixins here\n```\n\nIn the top (1), you will define all your (Sencha) variables; directly after the variables you will include the mixins. It’s important to keep this order, otherwise the variables won’t have any effect. The imports make use of these variables.\n\nAfter the imports (2), you can start writing your own custom CSS rules and mixins.\n\nLet’s start very easy and change the base-color:\n\n``` SCSS\n$base-color: #42282E;\n```\n\nBy changing the base-color, you will set a primary color scheme that most of the Sencha Touch components use.\n\nLet’s test it. With Sencha Cmd on the command-line, run the following command: sencha app watch\n\nSencha Cmd 4 and higher has the command sencha app watch. You can compare this with the Compass command: compass watch. Sencha Cmd _watches_ the app and every time you hit save, Sencha Cmd builds your app and compiles your Sass Stylesheets. When changes are detected, only the minimum amount of work necessary is performed to bring your app and its CSS up to date, saving you from rebuilding your Sass.\n\nPreview your application in a modern browser: [http://localhost/dinmu](http://localhost/dinmu).\n\nNow let’s play around. Sencha Touch has some really good Sass variables and mixins you can use to easily customize your theme. A great tool to get the right color combinations is Adobe Kuler. Go explore some populair color schemes: [https://kuler.adobe.com/explore/most-popular/?time=month](https://kuler.adobe.com/explore/most-popular/?time=month), and let’s use these as the color variables for _Do I need the Umbrella_ app.\n\nLet’s set the colors for the buttons, alert box, and both screen backgrounds (settings and main):\n\n``` SCSS\n$alert-color: #D6665A;\n$confirm-color: #75A48B;\n$page-bg-color: lighten(#D9CFB0,15%);\n$form-bg-color: $page-bg-color;\n```\n\nAlso, let’s get rid of all the gradients:\n\n``` SCSS\n$base-gradient: 'none';\n```\n\nThe bottom toolbar has the ui: ‘light’. Let’s create a mixin to style the light skin of the bottom toolbar. You can use the sencha-toolbar-ui for this. We can implement it below the sencha imports (2):\n\n``` SCSS\n@include sencha-toolbar-ui('light', #DC9B74, 'none');\n```\n\n![Weather App Tutorial](/images/weather-app-2-styling.png)\n\n### Create custom CSS\n\nNow let’s implement our own CSS rules.\n\nFirst, we will modify the toolbar title text:\n\n``` SCSS\n.title {\n    .x-title {\n        line-height: 2.5em;\n        text-shadow: none;\n        letter-spacing: -1px;\n    }\n}\n```\n\nNext, let’s position the footer text:\n\n``` SCSS\n.footer {\n    font-size: 0.6em;\n    padding: 12px;\n    text-align: right;\n    letter-spacing: 0;\n    a {\n        color :#000;\n    }\n}\n```\n\nYou will also need some styles for the custom template. Let’s modify the font and font colors:\n\n``` SCSS\n.textview {\n    color: black;\n    line-height: 1.2em;\n    letter-spacing: -1px;\n    padding: 0.8em;\n    text-transform: uppercase;\n\n\n    .yes {\n        color: $alert-color;\n    }\n    .no {\n        color: $confirm-color;\n    }\n    .temp {\n        color: $confirm-color;\n    }\n}\n```\n\nLet’s edit the settings form. In your Sass stylesheet, create the styles to tweak the settings form:\n\n``` SCSS\n.x-form-fieldset {\n    .x-form-fieldset-inner {\n        border: none;\n        background: $page-bg-color;\n    }\n    .x-form-fieldset-instructions .x-innerhtml {\n        color: #000;\n    }\n}\n\n.x-form-label {\n    background-color: lighten(#DC9B74, 32%);\n}\n.x-toggle-field .x-form-label {\n    background: none;\n    border: none;\n    margin-bottom: 20px;\n}\n.x-toggle {\n    position: absolute;\n    right: 0;\n}\n```\n\n### Implement a custom font\n\nRight above the sencha imports, add the imports for the font. We will make use of the Google Fonts service. With this font-service you can browse through lots of hosted font families and choose a font to implement:\n\n``` SCSS\n@import url(http://fonts.googleapis.com/css?family=Oswald:700);\n@import url(http://fonts.googleapis.com/css?family=Lobster);\n```\n\nNow, set the fonts.\n\nFor the toolbar title, add the following rules to the `.x-title` CSS class:\n\n``` SCSS\nfont: {\n    family: \"Lobster\";\n    size: 1.2em;\n}\n```\n\nFor the template view, add the following rules to the `.textview` CSS class:\n\n``` SCSS\nfont: {\n    family: \"Oswald\";\n    size: 2em;\n}\n```\n\n### Tweak the performance\n\nIf you want to optimize your Sencha Touch application for performance, optimizing your Stylesheet is probably the easiest thing to do; and it's very effective. Let’s reduce the file size of the compiled CSS stylesheet.\n\nAutomatically, when you generated your app with Sencha Cmd, the compiled CSS stylesheet was minified. This works because of the `output_style` setting in the _resources/sass/config.rb_ file. Would you rather have the output readable? Set the output_style value to `:expanded`, but note, your file size will grow.\n\nCheck the _resources/sass/config.rb_ file, it should be set like this:\n\n`output_style = :compressed`\n\nInstead of importing all Sencha Touch framework mixins, let’s only import the ones that are absolutely necessary. This will reduce the stylesheet size, so it will be faster to download.\n\nI usually comment out the `@import` line that imports _all_ the mixins. Then, I list all the Sencha Touch mixins myself, and I make sure Sencha Cmd is watching/compiling my Sass file (`sencha app watch`).\n\nThen I start to comment out the mixins one by one, based on the classes I don’t use. This is tricky though; there are classes that you may have never directly coded, but they are subclasses from other classes, such as +Class+ or +Panel+. That's why you should remove them one by one, while watching your terminal to see that you don't get any compile errors. The list of all the available Sencha Touch mixins can be found in: `touch/resources/themes/[theme-to-extend-from]/all.scss`.\n\nReplace `@import &lsquo;sencha-touch/default/all` with the following imports:\n\n``` SCSS\n@import 'sencha-touch/default/src/_Class.scss';\n@import 'sencha-touch/default/src/_Button.scss';\n@import 'sencha-touch/default/src/_Panel.scss';\n@import 'sencha-touch/default/src/_MessageBox.scss';\n@import 'sencha-touch/default/src/_Toolbar.scss';\n@import 'sencha-touch/default/src/carousel/_Carousel.scss';\n@import 'sencha-touch/default/src/form/_Panel.scss';\n@import 'sencha-touch/default/src/form/_FieldSet.scss';\n@import 'sencha-touch/default/src/field/_Field';\n@import 'sencha-touch/default/src/field/_Checkbox.scss';\n@import 'sencha-touch/default/src/field/_Select.scss';\n@import 'sencha-touch/default/src/field/_Slider.scss';\n@import 'sencha-touch/default/src/field/_Spinner.scss';\n@import 'sencha-touch/default/src/picker/_Picker.scss';\n@import 'sencha-touch/default/src/slider/_Slider.scss';\n@import 'sencha-touch/default/src/slider/_Toggle.scss';\n```\n\nWe are not using many icons, so there is no need to implement the Pictos icon font. In this case, let’s just use our own icon font, so we can save some extra kilobytes.\n\nAdd these variables to the top of your Sass stylesheet right before the import of the Sencha mixins:\n\n``` SCSS\n$include-pictos-font: false;\n$include-default-icons: false;\n```\n\nNow, you will include a custom icon font. I created an icon font via the IcoMoon website: [http://www.icomoon.io](http://www.icomoon.io). It’s in the goodies-tutorial folder of this tutorial. Just copy the _dinmu_ fonts folder over to _resources/sass/stylesheets/fonts/_.\n\nUnderneath the imports of the google font, import the dinmu icon font:\n\n``` SCSS\n@font-face {\n    font-family: 'Dinmu';\n    src:url('stylesheets/fonts/dinmu/Dinmu.eot');\n    src:url('stylesheets/fonts/dinmu/Dinmu.eot?#iefix') format('embedded-opentype'),\n        url('stylesheets/fonts/dinmu/Dinmu.ttf') format('truetype'),\n        url('stylesheets/fonts/dinmu/Dinmu.woff') format('woff'),\n        url('stylesheets/fonts/dinmu/Dinmu.svg#Dinmu') format('svg');\n    font-weight: normal;\n    font-style: normal;\n}\n```\n\nBelow all the imports, create an icon mixin, to display the settings button:\n\n`@include icon('settings', 's', 'Dinmu');`\n\nDirectly after that, you can code some funny icons for the template view:\n\n``` SCSS\n.rain:before,\n.norain:before {\n    font-family: 'Dinmu';\n    speak: none;\n    font-style: normal;\n    font-weight: normal;\n    font-variant: normal;\n    text-transform: none;\n    line-height: 1;\n\n    padding-right: 10px;\n    font-size: 60px;\n\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n.norain:before {\n    content: \"53\";\n    color: $confirm-color;\n}\n.rain:before {\n    content: \"52\";\n    color: $alert-color;\n}\n```\n\nFinally, the _Do I need my Umbrella_ theme is finished! Open your browser and run: [http://localhost/dinmu](http://localhost/dinmu).\n\n![Weather App Tutorial](/images/weather-app-3-styling2.png)\n\nThe next steps for improving your application would be to create a production build and port this app to a native PhoneGap app. These topics will be discussed in part 3 of this tutorial.\n\nInterested in creating Sencha themes? Starting in December, Sencha will start offering advanced Ext JS theming courses. Take a look at the [open courses](/training/) located around the world or join an online training.","slug":"getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-2","published":1,"updated":"2018-11-25T12:03:35.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncqr009jkif52b9k3pzq","content":"<p>In this three-part Sencha Touch tutorial, you will build the <em>Do I need\n    my Umbrella app</em>, a simple utility app that loads weather information\n  from a web service — worldweatheronline.com. Based on weather codes, this app\n  can predict if you need your umbrella or not.\n  <a id=\"more\"></a>\n</p>\n<p>In this second part of the tutorial, you will start to build an app theme.\n  You will use the code from part 1 of this tutorial. You can find the tutorial\n  <a href=\"http://www.leeboonstra.com/developer/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-1\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>Here are some additional resources:<br>You can download the final app code —\n  <a href=\"https://training.sencha.com/sencha-blog/tutorial-dec-2013-lee/goodies-tutorial/fullsolution-download.zip\" target=\"_blank\" rel=\"noopener\">full\n    solution</a> and <a href=\"https://training.sencha.com/sencha-blog/tutorial-dec-2013-lee/goodies-tutorial/stylesheet-download.zip\" target=\"_blank\" rel=\"noopener\">stylesheet</a>.<br>There\n  are some <a href=\"https://training.sencha.com/sencha-blog/tutorial-dec-2013-lee/goodies-tutorial/fonts-download.zip\" target=\"_blank\" rel=\"noopener\">tutorial\n    goodies</a>.<br>You can see the app itself with the custom theme <a href=\"https://training.sencha.com/sencha-blog/tutorial-dec-2013-lee/dinmu/\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>This tutorial requires:</p>\n<ul>\n  <li>Sencha Touch 2.3 or higher</li>\n  <li>Sencha Cmd 4.x</li>\n  <li>Compass &amp; Sass on top of Ruby</li>\n  <li>A modern browser</li>\n  <li>Editor</li>\n</ul>\n<h3 id=\"Extend-from-the-default-theme\"><a href=\"#Extend-from-the-default-theme\" class=\"headerlink\" title=\"Extend from the default theme\"></a>Extend\n  from the default theme</h3>\n<p>You will build a custom theme that is based on the default theme. The\n  default theme is a good theme to extend from, because it has a lot of Sencha\n  Sass variables and mixins, which can be found in the API Docs.</p>\n<p><img src=\"/images/weather-app-1-docs.png\" alt=\"Weather App Tutorial\"></p>\n<p>By default, when generating an application with Sencha Cmd, a <em>resources</em>\n  folder is already generated for you, with an empty Sass stylesheet: app.scss.\n  Let’s open: <strong>app.scss</strong></p>\n<p>The Sass stylesheet will look like this:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"comment\">//(1) Define your Sencha variables here</span></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/all'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//(2) Define your custom Sass/CSS code and mixins here</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>In the top (1), you will define all your (Sencha) variables; directly after\n  the variables you will include the mixins. It’s important to keep this order,\n  otherwise the variables won’t have any effect. The imports make use of these\n  variables.</p>\n<p>After the imports (2), you can start writing your own custom CSS rules and\n  mixins.</p>\n<p>Let’s start very easy and change the base-color:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"variable\">$base-color</span>: <span class=\"number\">#42282E</span>;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>By changing the base-color, you will set a primary color scheme that most of\n  the Sencha Touch components use.</p>\n<p>Let’s test it. With Sencha Cmd on the command-line, run the following\n  command: sencha app watch</p>\n<p>Sencha Cmd 4 and higher has the command sencha app watch. You can compare\n  this with the Compass command: compass watch. Sencha Cmd <em>watches</em> the\n  app and every time you hit save, Sencha Cmd builds your app and compiles your\n  Sass Stylesheets. When changes are detected, only the minimum amount of work\n  necessary is performed to bring your app and its CSS up to date, saving you\n  from rebuilding your Sass.</p>\n<p>Preview your application in a modern browser: <a href=\"http://localhost/dinmu\" target=\"_blank\" rel=\"noopener\">http://localhost/dinmu</a>.</p>\n<p>Now let’s play around. Sencha Touch has some really good Sass variables and\n  mixins you can use to easily customize your theme. A great tool to get the\n  right color combinations is Adobe Kuler. Go explore some populair color\n  schemes: <a href=\"https://kuler.adobe.com/explore/most-popular/?time=month\" target=\"_blank\" rel=\"noopener\">https://kuler.adobe.com/explore/most-popular/?time=month</a>,\n  and let’s use these as the color variables for <em>Do I need the Umbrella</em>\n  app.</p>\n<p>Let’s set the colors for the buttons, alert box, and both screen backgrounds\n  (settings and main):</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"variable\">$alert-color</span>: <span class=\"number\">#D6665A</span>;</span><br><span class=\"line\"><span class=\"variable\">$confirm-color</span>: <span class=\"number\">#75A48B</span>;</span><br><span class=\"line\"><span class=\"variable\">$page-bg-color</span>: lighten(<span class=\"number\">#D9CFB0</span>,<span class=\"number\">15%</span>);</span><br><span class=\"line\"><span class=\"variable\">$form-bg-color</span>: <span class=\"variable\">$page-bg-color</span>;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Also, let’s get rid of all the gradients:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"variable\">$base-gradient</span>: <span class=\"string\">'none'</span>;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The bottom toolbar has the ui: ‘light’. Let’s create a mixin to style the\n  light skin of the bottom toolbar. You can use the sencha-toolbar-ui for this.\n  We can implement it below the sencha imports (2):</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@<span class=\"keyword\">include</span> sencha-toolbar-ui(<span class=\"string\">'light'</span>, <span class=\"number\">#DC9B74</span>, <span class=\"string\">'none'</span>);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p><img src=\"/images/weather-app-2-styling.png\" alt=\"Weather App Tutorial\"></p>\n<h3 id=\"Create-custom-CSS\"><a href=\"#Create-custom-CSS\" class=\"headerlink\" title=\"Create custom CSS\"></a>Create\n  custom CSS</h3>\n<p>Now let’s implement our own CSS rules.</p>\n<p>First, we will modify the toolbar title text:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.x-title</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">line-height</span>: <span class=\"number\">2.5em</span>;</span><br><span class=\"line\">        <span class=\"attribute\">text-shadow</span>: none;</span><br><span class=\"line\">        <span class=\"attribute\">letter-spacing</span>: -<span class=\"number\">1px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Next, let’s position the footer text:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0.6em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: right;</span><br><span class=\"line\">    <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span> :<span class=\"number\">#000</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>You will also need some styles for the custom template. Let’s modify the\n  font and font colors:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"selector-class\">.textview</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">letter-spacing</span>: -<span class=\"number\">1px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0.8em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-transform</span>: uppercase;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.yes</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"variable\">$alert-color</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.no</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"variable\">$confirm-color</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.temp</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"variable\">$confirm-color</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Let’s edit the settings form. In your Sass stylesheet, create the styles to\n  tweak the settings form:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"selector-class\">.x-form-fieldset</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.x-form-fieldset-inner</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: <span class=\"variable\">$page-bg-color</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.x-form-fieldset-instructions</span> <span class=\"selector-class\">.x-innerhtml</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.x-form-label</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lighten(<span class=\"number\">#DC9B74</span>, <span class=\"number\">32%</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.x-toggle-field</span> <span class=\"selector-class\">.x-form-label</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.x-toggle</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<h3 id=\"Implement-a-custom-font\"><a href=\"#Implement-a-custom-font\" class=\"headerlink\" title=\"Implement a custom font\"></a>Implement\n  a custom font</h3>\n<p>Right above the sencha imports, add the imports for the font. We will make\n  use of the Google Fonts service. With this font-service you can browse\n  through lots of hosted font families and choose a font to implement:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@<span class=\"keyword\">import</span> url(http://fonts.googleapis.com/css?family=Oswald:<span class=\"number\">700</span>);</span><br><span class=\"line\">@<span class=\"keyword\">import</span> url(http://fonts.googleapis.com/css?family=Lobster);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Now, set the fonts.</p>\n<p>For the toolbar title, add the following rules to the <code>.x-title</code>\n  CSS class:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"attribute\">font</span>: &#123;</span><br><span class=\"line\">    family: <span class=\"string\">\"Lobster\"</span>;</span><br><span class=\"line\">    size: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>For the template view, add the following rules to the <code>.textview</code>\n  CSS class:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"attribute\">font</span>: &#123;</span><br><span class=\"line\">    family: <span class=\"string\">\"Oswald\"</span>;</span><br><span class=\"line\">    size: <span class=\"number\">2em</span>;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<h3 id=\"Tweak-the-performance\"><a href=\"#Tweak-the-performance\" class=\"headerlink\" title=\"Tweak the performance\"></a>Tweak\n  the performance</h3>\n<p>If you want to optimize your Sencha Touch application for performance,\n  optimizing your Stylesheet is probably the easiest thing to do; and it’s very\n  effective. Let’s reduce the file size of the compiled CSS stylesheet.</p>\n<p>Automatically, when you generated your app with Sencha Cmd, the compiled CSS\n  stylesheet was minified. This works because of the <code>output_style</code>\n  setting in the <em>resources/sass/config.rb</em> file. Would you rather have\n  the output readable? Set the output_style value to <code>:expanded</code>,\n  but note, your file size will grow.</p>\n<p>Check the <em>resources/sass/config.rb</em> file, it should be set like\n  this:</p>\n<p><code>output_style = :compressed</code></p>\n<p>Instead of importing all Sencha Touch framework mixins, let’s only import\n  the ones that are absolutely necessary. This will reduce the stylesheet size,\n  so it will be faster to download.</p>\n<p>I usually comment out the <code>@import</code> line that imports <em>all</em>\n  the mixins. Then, I list all the Sencha Touch mixins myself, and I make sure\n  Sencha Cmd is watching/compiling my Sass file (<code>sencha app watch</code>).</p>\n<p>Then I start to comment out the mixins one by one, based on the classes I\n  don’t use. This is tricky though; there are classes that you may have never\n  directly coded, but they are subclasses from other classes, such as +Class+\n  or +Panel+. That’s why you should remove them one by one, while watching your\n  terminal to see that you don’t get any compile errors. The list of all the\n  available Sencha Touch mixins can be found in: <code>touch/resources/themes/[theme-to-extend-from]/all.scss</code>.</p>\n<p>Replace <code>@import &amp;lsquo;sencha-touch/default/all</code> with the\n  following imports:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/_Class.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/_Button.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/_Panel.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/_MessageBox.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/_Toolbar.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/carousel/_Carousel.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/form/_Panel.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/form/_FieldSet.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/field/_Field'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/field/_Checkbox.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/field/_Select.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/field/_Slider.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/field/_Spinner.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/picker/_Picker.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/slider/_Slider.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/slider/_Toggle.scss'</span>;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>We are not using many icons, so there is no need to implement the Pictos\n  icon font. In this case, let’s just use our own icon font, so we can save\n  some extra kilobytes.</p>\n<p>Add these variables to the top of your Sass stylesheet right before the\n  import of the Sencha mixins:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"variable\">$include-pictos-font</span>: false;</span><br><span class=\"line\"><span class=\"variable\">$include-default-icons</span>: false;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Now, you will include a custom icon font. I created an icon font via the\n  IcoMoon website: <a href=\"http://www.icomoon.io\" target=\"_blank\" rel=\"noopener\">http://www.icomoon.io</a>.\n  It’s in the goodies-tutorial folder of this tutorial. Just copy the <em>dinmu</em>\n  fonts folder over to <em>resources/sass/stylesheets/fonts/</em>.</p>\n<p>Underneath the imports of the google font, import the dinmu icon font:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@font-face &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'Dinmu'</span>;</span><br><span class=\"line\">    src:url(<span class=\"string\">'stylesheets/fonts/dinmu/Dinmu.eot'</span>);</span><br><span class=\"line\">    src:url(<span class=\"string\">'stylesheets/fonts/dinmu/Dinmu.eot?#iefix'</span>) format(<span class=\"string\">'embedded-opentype'</span>),</span><br><span class=\"line\">        url(<span class=\"string\">'stylesheets/fonts/dinmu/Dinmu.ttf'</span>) format(<span class=\"string\">'truetype'</span>),</span><br><span class=\"line\">        url(<span class=\"string\">'stylesheets/fonts/dinmu/Dinmu.woff'</span>) format(<span class=\"string\">'woff'</span>),</span><br><span class=\"line\">        url(<span class=\"string\">'stylesheets/fonts/dinmu/Dinmu.svg#Dinmu'</span>) format(<span class=\"string\">'svg'</span>);</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Below all the imports, create an icon mixin, to display the settings button:</p>\n<p><code>@include icon(&#39;settings&#39;, &#39;s&#39;, &#39;Dinmu&#39;);</code></p>\n<p>Directly after that, you can code some funny icons for the template view:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"selector-class\">.rain</span>:before,</span><br><span class=\"line\"><span class=\"selector-class\">.norain</span>:before &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'Dinmu'</span>;</span><br><span class=\"line\">    speak: none;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-variant</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">text-transform</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">padding-right</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    -webkit-<span class=\"attribute\">font</span>-smoothing: antialiased;</span><br><span class=\"line\">    -moz-osx-<span class=\"attribute\">font</span>-smoothing: grayscale;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.norain</span>:before &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"53\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$confirm-color</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.rain</span>:before &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"52\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$alert-color</span>;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Finally, the <em>Do I need my Umbrella</em> theme is finished! Open your\n  browser and run: <a href=\"http://localhost/dinmu\" target=\"_blank\" rel=\"noopener\">http://localhost/dinmu</a>.</p>\n<p><img src=\"/images/weather-app-3-styling2.png\" alt=\"Weather App Tutorial\"></p>\n<p>The next steps for improving your application would be to create a\n  production build and port this app to a native PhoneGap app. These topics\n  will be discussed in part 3 of this tutorial.</p>\n<p>Interested in creating Sencha themes? Starting in December, Sencha will\n  start offering advanced Ext JS theming courses. Take a look at the <a href=\"/training/\">open\n    courses</a> located around the world or join an online training.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>In this three-part Sencha Touch tutorial, you will build the <em>Do I need\n    my Umbrella app</em>, a simple utility app that loads weather information\n  from a web service — worldweatheronline.com. Based on weather codes, this app\n  can predict if you need your umbrella or not.","more":"</p>\n<p>In this second part of the tutorial, you will start to build an app theme.\n  You will use the code from part 1 of this tutorial. You can find the tutorial\n  <a href=\"http://www.leeboonstra.com/developer/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-1\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>Here are some additional resources:<br>You can download the final app code —\n  <a href=\"https://training.sencha.com/sencha-blog/tutorial-dec-2013-lee/goodies-tutorial/fullsolution-download.zip\" target=\"_blank\" rel=\"noopener\">full\n    solution</a> and <a href=\"https://training.sencha.com/sencha-blog/tutorial-dec-2013-lee/goodies-tutorial/stylesheet-download.zip\" target=\"_blank\" rel=\"noopener\">stylesheet</a>.<br>There\n  are some <a href=\"https://training.sencha.com/sencha-blog/tutorial-dec-2013-lee/goodies-tutorial/fonts-download.zip\" target=\"_blank\" rel=\"noopener\">tutorial\n    goodies</a>.<br>You can see the app itself with the custom theme <a href=\"https://training.sencha.com/sencha-blog/tutorial-dec-2013-lee/dinmu/\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>This tutorial requires:</p>\n<ul>\n  <li>Sencha Touch 2.3 or higher</li>\n  <li>Sencha Cmd 4.x</li>\n  <li>Compass &amp; Sass on top of Ruby</li>\n  <li>A modern browser</li>\n  <li>Editor</li>\n</ul>\n<h3 id=\"Extend-from-the-default-theme\"><a href=\"#Extend-from-the-default-theme\" class=\"headerlink\" title=\"Extend from the default theme\"></a>Extend\n  from the default theme</h3>\n<p>You will build a custom theme that is based on the default theme. The\n  default theme is a good theme to extend from, because it has a lot of Sencha\n  Sass variables and mixins, which can be found in the API Docs.</p>\n<p><img src=\"/images/weather-app-1-docs.png\" alt=\"Weather App Tutorial\"></p>\n<p>By default, when generating an application with Sencha Cmd, a <em>resources</em>\n  folder is already generated for you, with an empty Sass stylesheet: app.scss.\n  Let’s open: <strong>app.scss</strong></p>\n<p>The Sass stylesheet will look like this:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"comment\">//(1) Define your Sencha variables here</span></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/all'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//(2) Define your custom Sass/CSS code and mixins here</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>In the top (1), you will define all your (Sencha) variables; directly after\n  the variables you will include the mixins. It’s important to keep this order,\n  otherwise the variables won’t have any effect. The imports make use of these\n  variables.</p>\n<p>After the imports (2), you can start writing your own custom CSS rules and\n  mixins.</p>\n<p>Let’s start very easy and change the base-color:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"variable\">$base-color</span>: <span class=\"number\">#42282E</span>;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>By changing the base-color, you will set a primary color scheme that most of\n  the Sencha Touch components use.</p>\n<p>Let’s test it. With Sencha Cmd on the command-line, run the following\n  command: sencha app watch</p>\n<p>Sencha Cmd 4 and higher has the command sencha app watch. You can compare\n  this with the Compass command: compass watch. Sencha Cmd <em>watches</em> the\n  app and every time you hit save, Sencha Cmd builds your app and compiles your\n  Sass Stylesheets. When changes are detected, only the minimum amount of work\n  necessary is performed to bring your app and its CSS up to date, saving you\n  from rebuilding your Sass.</p>\n<p>Preview your application in a modern browser: <a href=\"http://localhost/dinmu\" target=\"_blank\" rel=\"noopener\">http://localhost/dinmu</a>.</p>\n<p>Now let’s play around. Sencha Touch has some really good Sass variables and\n  mixins you can use to easily customize your theme. A great tool to get the\n  right color combinations is Adobe Kuler. Go explore some populair color\n  schemes: <a href=\"https://kuler.adobe.com/explore/most-popular/?time=month\" target=\"_blank\" rel=\"noopener\">https://kuler.adobe.com/explore/most-popular/?time=month</a>,\n  and let’s use these as the color variables for <em>Do I need the Umbrella</em>\n  app.</p>\n<p>Let’s set the colors for the buttons, alert box, and both screen backgrounds\n  (settings and main):</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"variable\">$alert-color</span>: <span class=\"number\">#D6665A</span>;</span><br><span class=\"line\"><span class=\"variable\">$confirm-color</span>: <span class=\"number\">#75A48B</span>;</span><br><span class=\"line\"><span class=\"variable\">$page-bg-color</span>: lighten(<span class=\"number\">#D9CFB0</span>,<span class=\"number\">15%</span>);</span><br><span class=\"line\"><span class=\"variable\">$form-bg-color</span>: <span class=\"variable\">$page-bg-color</span>;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Also, let’s get rid of all the gradients:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"variable\">$base-gradient</span>: <span class=\"string\">'none'</span>;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The bottom toolbar has the ui: ‘light’. Let’s create a mixin to style the\n  light skin of the bottom toolbar. You can use the sencha-toolbar-ui for this.\n  We can implement it below the sencha imports (2):</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@<span class=\"keyword\">include</span> sencha-toolbar-ui(<span class=\"string\">'light'</span>, <span class=\"number\">#DC9B74</span>, <span class=\"string\">'none'</span>);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p><img src=\"/images/weather-app-2-styling.png\" alt=\"Weather App Tutorial\"></p>\n<h3 id=\"Create-custom-CSS\"><a href=\"#Create-custom-CSS\" class=\"headerlink\" title=\"Create custom CSS\"></a>Create\n  custom CSS</h3>\n<p>Now let’s implement our own CSS rules.</p>\n<p>First, we will modify the toolbar title text:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.x-title</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">line-height</span>: <span class=\"number\">2.5em</span>;</span><br><span class=\"line\">        <span class=\"attribute\">text-shadow</span>: none;</span><br><span class=\"line\">        <span class=\"attribute\">letter-spacing</span>: -<span class=\"number\">1px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Next, let’s position the footer text:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0.6em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: right;</span><br><span class=\"line\">    <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span> :<span class=\"number\">#000</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>You will also need some styles for the custom template. Let’s modify the\n  font and font colors:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"selector-class\">.textview</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">letter-spacing</span>: -<span class=\"number\">1px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0.8em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-transform</span>: uppercase;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.yes</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"variable\">$alert-color</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.no</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"variable\">$confirm-color</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.temp</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"variable\">$confirm-color</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Let’s edit the settings form. In your Sass stylesheet, create the styles to\n  tweak the settings form:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"selector-class\">.x-form-fieldset</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.x-form-fieldset-inner</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: <span class=\"variable\">$page-bg-color</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.x-form-fieldset-instructions</span> <span class=\"selector-class\">.x-innerhtml</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.x-form-label</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lighten(<span class=\"number\">#DC9B74</span>, <span class=\"number\">32%</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.x-toggle-field</span> <span class=\"selector-class\">.x-form-label</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.x-toggle</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<h3 id=\"Implement-a-custom-font\"><a href=\"#Implement-a-custom-font\" class=\"headerlink\" title=\"Implement a custom font\"></a>Implement\n  a custom font</h3>\n<p>Right above the sencha imports, add the imports for the font. We will make\n  use of the Google Fonts service. With this font-service you can browse\n  through lots of hosted font families and choose a font to implement:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@<span class=\"keyword\">import</span> url(http://fonts.googleapis.com/css?family=Oswald:<span class=\"number\">700</span>);</span><br><span class=\"line\">@<span class=\"keyword\">import</span> url(http://fonts.googleapis.com/css?family=Lobster);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Now, set the fonts.</p>\n<p>For the toolbar title, add the following rules to the <code>.x-title</code>\n  CSS class:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"attribute\">font</span>: &#123;</span><br><span class=\"line\">    family: <span class=\"string\">\"Lobster\"</span>;</span><br><span class=\"line\">    size: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>For the template view, add the following rules to the <code>.textview</code>\n  CSS class:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"attribute\">font</span>: &#123;</span><br><span class=\"line\">    family: <span class=\"string\">\"Oswald\"</span>;</span><br><span class=\"line\">    size: <span class=\"number\">2em</span>;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<h3 id=\"Tweak-the-performance\"><a href=\"#Tweak-the-performance\" class=\"headerlink\" title=\"Tweak the performance\"></a>Tweak\n  the performance</h3>\n<p>If you want to optimize your Sencha Touch application for performance,\n  optimizing your Stylesheet is probably the easiest thing to do; and it’s very\n  effective. Let’s reduce the file size of the compiled CSS stylesheet.</p>\n<p>Automatically, when you generated your app with Sencha Cmd, the compiled CSS\n  stylesheet was minified. This works because of the <code>output_style</code>\n  setting in the <em>resources/sass/config.rb</em> file. Would you rather have\n  the output readable? Set the output_style value to <code>:expanded</code>,\n  but note, your file size will grow.</p>\n<p>Check the <em>resources/sass/config.rb</em> file, it should be set like\n  this:</p>\n<p><code>output_style = :compressed</code></p>\n<p>Instead of importing all Sencha Touch framework mixins, let’s only import\n  the ones that are absolutely necessary. This will reduce the stylesheet size,\n  so it will be faster to download.</p>\n<p>I usually comment out the <code>@import</code> line that imports <em>all</em>\n  the mixins. Then, I list all the Sencha Touch mixins myself, and I make sure\n  Sencha Cmd is watching/compiling my Sass file (<code>sencha app watch</code>).</p>\n<p>Then I start to comment out the mixins one by one, based on the classes I\n  don’t use. This is tricky though; there are classes that you may have never\n  directly coded, but they are subclasses from other classes, such as +Class+\n  or +Panel+. That’s why you should remove them one by one, while watching your\n  terminal to see that you don’t get any compile errors. The list of all the\n  available Sencha Touch mixins can be found in: <code>touch/resources/themes/[theme-to-extend-from]/all.scss</code>.</p>\n<p>Replace <code>@import &amp;lsquo;sencha-touch/default/all</code> with the\n  following imports:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/_Class.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/_Button.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/_Panel.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/_MessageBox.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/_Toolbar.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/carousel/_Carousel.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/form/_Panel.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/form/_FieldSet.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/field/_Field'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/field/_Checkbox.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/field/_Select.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/field/_Slider.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/field/_Spinner.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/picker/_Picker.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/slider/_Slider.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'sencha-touch/default/src/slider/_Toggle.scss'</span>;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>We are not using many icons, so there is no need to implement the Pictos\n  icon font. In this case, let’s just use our own icon font, so we can save\n  some extra kilobytes.</p>\n<p>Add these variables to the top of your Sass stylesheet right before the\n  import of the Sencha mixins:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"variable\">$include-pictos-font</span>: false;</span><br><span class=\"line\"><span class=\"variable\">$include-default-icons</span>: false;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Now, you will include a custom icon font. I created an icon font via the\n  IcoMoon website: <a href=\"http://www.icomoon.io\" target=\"_blank\" rel=\"noopener\">http://www.icomoon.io</a>.\n  It’s in the goodies-tutorial folder of this tutorial. Just copy the <em>dinmu</em>\n  fonts folder over to <em>resources/sass/stylesheets/fonts/</em>.</p>\n<p>Underneath the imports of the google font, import the dinmu icon font:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@font-face &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'Dinmu'</span>;</span><br><span class=\"line\">    src:url(<span class=\"string\">'stylesheets/fonts/dinmu/Dinmu.eot'</span>);</span><br><span class=\"line\">    src:url(<span class=\"string\">'stylesheets/fonts/dinmu/Dinmu.eot?#iefix'</span>) format(<span class=\"string\">'embedded-opentype'</span>),</span><br><span class=\"line\">        url(<span class=\"string\">'stylesheets/fonts/dinmu/Dinmu.ttf'</span>) format(<span class=\"string\">'truetype'</span>),</span><br><span class=\"line\">        url(<span class=\"string\">'stylesheets/fonts/dinmu/Dinmu.woff'</span>) format(<span class=\"string\">'woff'</span>),</span><br><span class=\"line\">        url(<span class=\"string\">'stylesheets/fonts/dinmu/Dinmu.svg#Dinmu'</span>) format(<span class=\"string\">'svg'</span>);</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Below all the imports, create an icon mixin, to display the settings button:</p>\n<p><code>@include icon(&#39;settings&#39;, &#39;s&#39;, &#39;Dinmu&#39;);</code></p>\n<p>Directly after that, you can code some funny icons for the template view:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"selector-class\">.rain</span>:before,</span><br><span class=\"line\"><span class=\"selector-class\">.norain</span>:before &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'Dinmu'</span>;</span><br><span class=\"line\">    speak: none;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-variant</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">text-transform</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">padding-right</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    -webkit-<span class=\"attribute\">font</span>-smoothing: antialiased;</span><br><span class=\"line\">    -moz-osx-<span class=\"attribute\">font</span>-smoothing: grayscale;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.norain</span>:before &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"53\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$confirm-color</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.rain</span>:before &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"52\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$alert-color</span>;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Finally, the <em>Do I need my Umbrella</em> theme is finished! Open your\n  browser and run: <a href=\"http://localhost/dinmu\" target=\"_blank\" rel=\"noopener\">http://localhost/dinmu</a>.</p>\n<p><img src=\"/images/weather-app-3-styling2.png\" alt=\"Weather App Tutorial\"></p>\n<p>The next steps for improving your application would be to create a\n  production build and port this app to a native PhoneGap app. These topics\n  will be discussed in part 3 of this tutorial.</p>\n<p>Interested in creating Sencha themes? Starting in December, Sencha will\n  start offering advanced Ext JS theming courses. Take a look at the <a href=\"/training/\">open\n    courses</a> located around the world or join an online training.</p>"},{"title":"Introduction to the Video Intelligence API","date":"2017-04-10T13:59:18.000Z","_content":"\n## Search and discover your media content with powerful Cloud Video Intelligence API \n\nGoogle Cloud Video Intelligence API makes videos searchable, and discoverable, by extracting metadata with an easy to use REST API. You can now search every moment of every video file in your catalog and find every occurrence as well as its significance. It quickly annotates videos stored in Google [Cloud Storage](https://cloud.google.com/storage/), and helps you identify key nouns entities of your video, and when they occur within the video. Separate signal from noise, by retrieving relevant information at the video, shot or per frame. You can try this out, yourself: \n\n<!--more-->\n\n1. Open: [https://cloud.google.com/video-intelligence/#demo](https://cloud.google.com/video-intelligence/#demo) \n2. Select a sample video from the list, for example: **Volleyball Court**, (which is a video made at the Google Mountain View office). Notice the labels. \n3. Select another sample video from the list: **Google Work**.\n4. Click on the **Shots** tab. Notice all the keywords detected from the video, which are being renewed per video shot! \n5. Click on the **API** tab. Notice how the JSON response would look like. \n6. Now, lets try it with one of my own videos, which I’ve uploaded as a public available video in Cloud Storage: **gs://leeboonstra-videos/mov_bbb.mp4** \n\n## Write metadata on video upload \n\nMachine Learning for videos, can be super interesting, in case you want to implement it within your own systems. Let’s say you host a lot of videos on your website. Instead of manually writing meta per video; you could create an ETL job, (for example through Cloud Functions), which listens to the upload event of Google Cloud Storage, runs the Video Intelligence API, and writes the metadata in a database. This looks like a great use case! Let’s see if we can build this! ### Getting Started To get started, open the GCP console, and create a new project. \n\nGo to: [https://console.cloud.google.com](https://console.cloud.google.com) and click: [Create new project](https://cloud.google.com/resource-manager/docs/creating-managing-projects), and enter an easy to remember project name, which will be used as the *project id*. \n\nYou will have to remember this. The project id will have to be unique. For this workshop, it might be a good practice to prefix it with your **[firstname][lastname]** \n\n### Enable the Cloud Functions API \n\nClick on the menu button. **Cloud Functions > Enable API**. \n\n### Enable the Video Intelligence API \n\nClick on the menu button. **API Manager**. Search for: **Google Cloud Video Intelligence**. **API > Enable** Click **Credentials > Create Credentials > Service Account** Choose **New Service Account** Service Account Name: **demoapp** Role: **Project Owner** Choose **JSON** Click **Create** Click **Manage Service Accounts** Click the menu button (the 3 vertical dots), and select **Create Key** This will download the key on your local machine. Create a folder on your machine called: **cloudfunctions-videoapi**, and move the file over. ### Create storage buckets When you write the JavaScript code for the cloud function, you will need to upload it somewhere. Under the hood, GCP will create a container with a Node environment for you, so you can execute your function. You can upload function code, in a bucket of the Google Storage. Let’s create a bucket which contains function code. You can create the bucket via the Cloud Console (menu > **Storage > Create Bucket**), or from the command-line, on your local machine (if you have the gcloud sdk installed), or from your online terminal in the Cloud Console: `gsutil mb -p [PROJECT_ID] gs://[BUCKET_NAME]` *Create two buckets, with the name of your [project id] + **-functions-src**, and one [project-id]**-videos**. (This way, your bucket will be unique.)* After you’ve created the videos bucket, you will need to make this bucket public, so your video’s get gs:// public urls. You can do this by clicking on the menu button of the bucket (the button with the 3 vertical dots). Click **Add Item**: *User - allAuthenticatedUsers - Reader* Click **Save**. \n\n![Screenshot](/images/Screen-Shot-2017-04-10-at-4.57.56-PM.png) \n\n### Client Library \n\nSince the client node js library is still in Alpha at the time of writing, we will download the alpha version and host it locally. Once the library gets publically available, you can ignore the next step, and instead link to the online version of the client library. (See: [https://www.npmjs.com/package/google-cloud](https://www.npmjs.com/package/google-cloud)) Download the alpha node client library: [https://storage.googleapis.com/videointelligence-alpha/videointelligence-nodejs.tar.gz](https://storage.googleapis.com/videointelligence-alpha/videointelligence-nodejs.tar.gz) \n\nUnzip the package. Create a new folder inside **cloudfunctions-video**, called: **local_modules**, and move the **videointelligence** folder into it. Create a cloudfunctions-video/**package.json** file. It should contain the following contents: ``` { \"name\": \"videoapi\", \"description\": \"Webservice VideoAPI\", \"version\": \"0.0.1\", \"private\": true, \"license\": \"Apache-2.0\", \"author\": \"Lee Boonstra\", \"engines\": { \"node\": \"~4.2\" }, \"dependencies\": { \"@google-cloud/videointelligence\": \"file:local_modules/videointelligence\", \"dotenv\": \"^4.0.0\" } } ```\n\n### Create a Cloud Function \n\nCreate a new hidden **.env** file, and give it the following content: ``` ENV=production GCLOUD_PROJECT=[project-id] GCLOUD_KEY_FILE=./[path to json service key file] ``` Afterwards, create the **index.js** file with these contents: https://gist.github.com/savelee/48d8642ffe0a99348cfeca56485181c2 \n\n### Deploy your Cloud Function \n\nOn the command-line, enter the following: ``` $ gcloud beta functions deploy [name-function] --stage-bucket [bucket name of the function-src bucket] --trigger-bucket [bucket name of the videos bucket] ``` For example: ``` $ gcloud beta functions deploy videoapi --stage-bucket leeboonstra-functions-src --trigger-bucket leeboonstra-videoapi ``` ### TimeOuts The way how the video api works, is that it first will read in the video to the memory. The machine learning under the hood, is similar to Google’s Cloud Vision API, which can detect what’s on an image. But for the Video Intelligence API this works per frame. Cloud functions can timeout. You will need to specify a timeout in seconds. By default it’s set to 60s. A number between 1 and 540 (9min) is required. A video with a long duration, will likely make that the cloud function will timeout. So becareful. You can either setup, the timeout in the **Cloud Functions /  **Logging** \n\n### Conclusion \n\nBy now, you managed to test the Video Intelligence API with your own JavaScript code, within a cloud function based on file upload in a bucket. The power of this cloud function, is that you could easily build an application around this, which makes use of microservices (cloud functions). It wouldn’t be much work to create an interface (for example with Sencha Ext JS, or just with plain HTML, CSS and JavaScript), which shows a list of video’s and the tags. I’m logging the tags in the logs of Stack Driver. But instead I could save it in the data store. I could create another cloud function, based on an HTTP trigger which loads the data of the datastore and displays it in the front-end list. Another idea could be, to pass in the results of the Video Intelligence API into another Machine Learning API, such a translate. To translate the keywords to a different language, before saving it in the database. *TIP: In case you don’t want English meta data, it’s also possible to put the Translate API right after the Video Intelligence API call!* \n\n<iframe src=\"https://player.vimeo.com/video/213039480\" width=\"640\" height=\"420\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n<p><a href=\"https://vimeo.com/213039480\">Video Intelligence API</a> from <a href=\"https://vimeo.com/user13471554\">Ladysign</a> on <a href=\"https://vimeo.com\">Vimeo</a>.</p>\n\n### Resources\n\n* [Cloud Functions Docs](https://cloud.google.com/functions/docs/reference) \n* [Video Intelligence Demo](https://cloud-ml-video.appspot.com/index_v1beta1.html)","source":"_posts/introduction-to-the-video-intelligence-api.md","raw":"---\ntitle: Introduction to the Video Intelligence API\ntags:\n  - Pre-trained Model\n  - Machine Learning\n  - Video Intelligence Api\ncategories:\n  - Machine Learning\ndate: 2017-04-10 15:59:18\n---\n\n## Search and discover your media content with powerful Cloud Video Intelligence API \n\nGoogle Cloud Video Intelligence API makes videos searchable, and discoverable, by extracting metadata with an easy to use REST API. You can now search every moment of every video file in your catalog and find every occurrence as well as its significance. It quickly annotates videos stored in Google [Cloud Storage](https://cloud.google.com/storage/), and helps you identify key nouns entities of your video, and when they occur within the video. Separate signal from noise, by retrieving relevant information at the video, shot or per frame. You can try this out, yourself: \n\n<!--more-->\n\n1. Open: [https://cloud.google.com/video-intelligence/#demo](https://cloud.google.com/video-intelligence/#demo) \n2. Select a sample video from the list, for example: **Volleyball Court**, (which is a video made at the Google Mountain View office). Notice the labels. \n3. Select another sample video from the list: **Google Work**.\n4. Click on the **Shots** tab. Notice all the keywords detected from the video, which are being renewed per video shot! \n5. Click on the **API** tab. Notice how the JSON response would look like. \n6. Now, lets try it with one of my own videos, which I’ve uploaded as a public available video in Cloud Storage: **gs://leeboonstra-videos/mov_bbb.mp4** \n\n## Write metadata on video upload \n\nMachine Learning for videos, can be super interesting, in case you want to implement it within your own systems. Let’s say you host a lot of videos on your website. Instead of manually writing meta per video; you could create an ETL job, (for example through Cloud Functions), which listens to the upload event of Google Cloud Storage, runs the Video Intelligence API, and writes the metadata in a database. This looks like a great use case! Let’s see if we can build this! ### Getting Started To get started, open the GCP console, and create a new project. \n\nGo to: [https://console.cloud.google.com](https://console.cloud.google.com) and click: [Create new project](https://cloud.google.com/resource-manager/docs/creating-managing-projects), and enter an easy to remember project name, which will be used as the *project id*. \n\nYou will have to remember this. The project id will have to be unique. For this workshop, it might be a good practice to prefix it with your **[firstname][lastname]** \n\n### Enable the Cloud Functions API \n\nClick on the menu button. **Cloud Functions > Enable API**. \n\n### Enable the Video Intelligence API \n\nClick on the menu button. **API Manager**. Search for: **Google Cloud Video Intelligence**. **API > Enable** Click **Credentials > Create Credentials > Service Account** Choose **New Service Account** Service Account Name: **demoapp** Role: **Project Owner** Choose **JSON** Click **Create** Click **Manage Service Accounts** Click the menu button (the 3 vertical dots), and select **Create Key** This will download the key on your local machine. Create a folder on your machine called: **cloudfunctions-videoapi**, and move the file over. ### Create storage buckets When you write the JavaScript code for the cloud function, you will need to upload it somewhere. Under the hood, GCP will create a container with a Node environment for you, so you can execute your function. You can upload function code, in a bucket of the Google Storage. Let’s create a bucket which contains function code. You can create the bucket via the Cloud Console (menu > **Storage > Create Bucket**), or from the command-line, on your local machine (if you have the gcloud sdk installed), or from your online terminal in the Cloud Console: `gsutil mb -p [PROJECT_ID] gs://[BUCKET_NAME]` *Create two buckets, with the name of your [project id] + **-functions-src**, and one [project-id]**-videos**. (This way, your bucket will be unique.)* After you’ve created the videos bucket, you will need to make this bucket public, so your video’s get gs:// public urls. You can do this by clicking on the menu button of the bucket (the button with the 3 vertical dots). Click **Add Item**: *User - allAuthenticatedUsers - Reader* Click **Save**. \n\n![Screenshot](/images/Screen-Shot-2017-04-10-at-4.57.56-PM.png) \n\n### Client Library \n\nSince the client node js library is still in Alpha at the time of writing, we will download the alpha version and host it locally. Once the library gets publically available, you can ignore the next step, and instead link to the online version of the client library. (See: [https://www.npmjs.com/package/google-cloud](https://www.npmjs.com/package/google-cloud)) Download the alpha node client library: [https://storage.googleapis.com/videointelligence-alpha/videointelligence-nodejs.tar.gz](https://storage.googleapis.com/videointelligence-alpha/videointelligence-nodejs.tar.gz) \n\nUnzip the package. Create a new folder inside **cloudfunctions-video**, called: **local_modules**, and move the **videointelligence** folder into it. Create a cloudfunctions-video/**package.json** file. It should contain the following contents: ``` { \"name\": \"videoapi\", \"description\": \"Webservice VideoAPI\", \"version\": \"0.0.1\", \"private\": true, \"license\": \"Apache-2.0\", \"author\": \"Lee Boonstra\", \"engines\": { \"node\": \"~4.2\" }, \"dependencies\": { \"@google-cloud/videointelligence\": \"file:local_modules/videointelligence\", \"dotenv\": \"^4.0.0\" } } ```\n\n### Create a Cloud Function \n\nCreate a new hidden **.env** file, and give it the following content: ``` ENV=production GCLOUD_PROJECT=[project-id] GCLOUD_KEY_FILE=./[path to json service key file] ``` Afterwards, create the **index.js** file with these contents: https://gist.github.com/savelee/48d8642ffe0a99348cfeca56485181c2 \n\n### Deploy your Cloud Function \n\nOn the command-line, enter the following: ``` $ gcloud beta functions deploy [name-function] --stage-bucket [bucket name of the function-src bucket] --trigger-bucket [bucket name of the videos bucket] ``` For example: ``` $ gcloud beta functions deploy videoapi --stage-bucket leeboonstra-functions-src --trigger-bucket leeboonstra-videoapi ``` ### TimeOuts The way how the video api works, is that it first will read in the video to the memory. The machine learning under the hood, is similar to Google’s Cloud Vision API, which can detect what’s on an image. But for the Video Intelligence API this works per frame. Cloud functions can timeout. You will need to specify a timeout in seconds. By default it’s set to 60s. A number between 1 and 540 (9min) is required. A video with a long duration, will likely make that the cloud function will timeout. So becareful. You can either setup, the timeout in the **Cloud Functions /  **Logging** \n\n### Conclusion \n\nBy now, you managed to test the Video Intelligence API with your own JavaScript code, within a cloud function based on file upload in a bucket. The power of this cloud function, is that you could easily build an application around this, which makes use of microservices (cloud functions). It wouldn’t be much work to create an interface (for example with Sencha Ext JS, or just with plain HTML, CSS and JavaScript), which shows a list of video’s and the tags. I’m logging the tags in the logs of Stack Driver. But instead I could save it in the data store. I could create another cloud function, based on an HTTP trigger which loads the data of the datastore and displays it in the front-end list. Another idea could be, to pass in the results of the Video Intelligence API into another Machine Learning API, such a translate. To translate the keywords to a different language, before saving it in the database. *TIP: In case you don’t want English meta data, it’s also possible to put the Translate API right after the Video Intelligence API call!* \n\n<iframe src=\"https://player.vimeo.com/video/213039480\" width=\"640\" height=\"420\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n<p><a href=\"https://vimeo.com/213039480\">Video Intelligence API</a> from <a href=\"https://vimeo.com/user13471554\">Ladysign</a> on <a href=\"https://vimeo.com\">Vimeo</a>.</p>\n\n### Resources\n\n* [Cloud Functions Docs](https://cloud.google.com/functions/docs/reference) \n* [Video Intelligence Demo](https://cloud-ml-video.appspot.com/index_v1beta1.html)","slug":"introduction-to-the-video-intelligence-api","published":1,"updated":"2018-11-30T14:05:49.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncqt009kkif5ff1qvvhx","content":"<h2 id=\"Search-and-discover-your-media-content-with-powerful-Cloud-Video-Intelligence-API\"><a href=\"#Search-and-discover-your-media-content-with-powerful-Cloud-Video-Intelligence-API\" class=\"headerlink\" title=\"Search and discover your media content with powerful Cloud Video Intelligence API\"></a>Search\n  and discover your media content with powerful Cloud Video Intelligence API</h2>\n<p>Google Cloud Video Intelligence API makes videos searchable, and\n  discoverable, by extracting metadata with an easy to use REST API. You can\n  now search every moment of every video file in your catalog and find every\n  occurrence as well as its significance. It quickly annotates videos stored in\n  Google <a href=\"https://cloud.google.com/storage/\" target=\"_blank\" rel=\"noopener\">Cloud Storage</a>, and\n  helps you identify key nouns entities of your video, and when they occur\n  within the video. Separate signal from noise, by retrieving relevant\n  information at the video, shot or per frame. You can try this out, yourself:</p>\n<a id=\"more\"></a>\n<ol>\n  <li>Open: <a href=\"https://cloud.google.com/video-intelligence/#demo\" target=\"_blank\" rel=\"noopener\">https://cloud.google.com/video-intelligence/#demo</a></li>\n  <li>Select a sample video from the list, for example: <strong>Volleyball\n      Court</strong>, (which is a video made at the Google Mountain View\n    office). Notice the labels.</li>\n  <li>Select another sample video from the list: <strong>Google Work</strong>.</li>\n  <li>Click on the <strong>Shots</strong> tab. Notice all the keywords detected\n    from the video, which are being renewed per video shot!</li>\n  <li>Click on the <strong>API</strong> tab. Notice how the JSON response would\n    look like.</li>\n  <li>Now, lets try it with one of my own videos, which I’ve uploaded as a\n    public available video in Cloud Storage: <strong>gs://leeboonstra-videos/mov_bbb.mp4</strong></li>\n</ol>\n<h2 id=\"Write-metadata-on-video-upload\"><a href=\"#Write-metadata-on-video-upload\" class=\"headerlink\" title=\"Write metadata on video upload\"></a>Write\n  metadata on video upload</h2>\n<p>Machine Learning for videos, can be super interesting, in case you want to\n  implement it within your own systems. Let’s say you host a lot of videos on\n  your website. Instead of manually writing meta per video; you could create an\n  ETL job, (for example through Cloud Functions), which listens to the upload\n  event of Google Cloud Storage, runs the Video Intelligence API, and writes\n  the metadata in a database. This looks like a great use case! Let’s see if we\n  can build this! ### Getting Started To get started, open the GCP console, and\n  create a new project.</p>\n<p>Go to: <a href=\"https://console.cloud.google.com\" target=\"_blank\" rel=\"noopener\">https://console.cloud.google.com</a>\n  and click: <a href=\"https://cloud.google.com/resource-manager/docs/creating-managing-projects\" target=\"_blank\" rel=\"noopener\">Create\n    new project</a>, and enter an easy to remember project name, which will be\n  used as the <em>project id</em>.</p>\n<p>You will have to remember this. The project id will have to be unique. For\n  this workshop, it might be a good practice to prefix it with your <strong>[firstname][lastname]</strong></p>\n<h3 id=\"Enable-the-Cloud-Functions-API\"><a href=\"#Enable-the-Cloud-Functions-API\" class=\"headerlink\" title=\"Enable the Cloud Functions API\"></a>Enable\n  the Cloud Functions API</h3>\n<p>Click on the menu button. <strong>Cloud Functions &gt; Enable API</strong>.</p>\n<h3 id=\"Enable-the-Video-Intelligence-API\"><a href=\"#Enable-the-Video-Intelligence-API\" class=\"headerlink\" title=\"Enable the Video Intelligence API\"></a>Enable\n  the Video Intelligence API</h3>\n<p>Click on the menu button. <strong>API Manager</strong>. Search for: <strong>Google\n    Cloud Video Intelligence</strong>. <strong>API &gt; Enable</strong> Click\n  <strong>Credentials &gt; Create Credentials &gt; Service Account</strong>\n  Choose <strong>New Service Account</strong> Service Account Name: <strong>demoapp</strong>\n  Role: <strong>Project Owner</strong> Choose <strong>JSON</strong> Click\n  <strong>Create</strong> Click <strong>Manage Service Accounts</strong> Click\n  the menu button (the 3 vertical dots), and select <strong>Create Key</strong>\n  This will download the key on your local machine. Create a folder on your\n  machine called: <strong>cloudfunctions-videoapi</strong>, and move the file\n  over. ### Create storage buckets When you write the JavaScript code for the\n  cloud function, you will need to upload it somewhere. Under the hood, GCP\n  will create a container with a Node environment for you, so you can execute\n  your function. You can upload function code, in a bucket of the Google\n  Storage. Let’s create a bucket which contains function code. You can create\n  the bucket via the Cloud Console (menu &gt; <strong>Storage &gt; Create\n    Bucket</strong>), or from the command-line, on your local machine (if you\n  have the gcloud sdk installed), or from your online terminal in the Cloud\n  Console: <code>gsutil mb -p [PROJECT_ID] gs://[BUCKET_NAME]</code> <em>Create\n    two buckets, with the name of your [project id] + <strong>-functions-src</strong>,\n    and one [project-id]<strong>-videos</strong>. (This way, your bucket will\n    be unique.)</em> After you’ve created the videos bucket, you will need to\n  make this bucket public, so your video’s get gs:// public urls. You can do\n  this by clicking on the menu button of the bucket (the button with the 3\n  vertical dots). Click <strong>Add Item</strong>: <em>User -\n    allAuthenticatedUsers - Reader</em> Click <strong>Save</strong>.</p>\n<p><img src=\"/images/Screen-Shot-2017-04-10-at-4.57.56-PM.png\" alt=\"Screenshot\"></p>\n<h3 id=\"Client-Library\"><a href=\"#Client-Library\" class=\"headerlink\" title=\"Client Library\"></a>Client\n  Library</h3>\n<p>Since the client node js library is still in Alpha at the time of writing,\n  we will download the alpha version and host it locally. Once the library gets\n  publically available, you can ignore the next step, and instead link to the\n  online version of the client library. (See: <a href=\"https://www.npmjs.com/package/google-cloud\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/google-cloud</a>)\n  Download the alpha node client library: <a href=\"https://storage.googleapis.com/videointelligence-alpha/videointelligence-nodejs.tar.gz\" target=\"_blank\" rel=\"noopener\">https://storage.googleapis.com/videointelligence-alpha/videointelligence-nodejs.tar.gz</a></p>\n<p>Unzip the package. Create a new folder inside <strong>cloudfunctions-video</strong>,\n  called: <strong>local_modules</strong>, and move the <strong>videointelligence</strong>\n  folder into it. Create a cloudfunctions-video/<strong>package.json</strong>\n  file. It should contain the following contents: <code>{ &quot;name&quot;:\n    &quot;videoapi&quot;, &quot;description&quot;: &quot;Webservice\n    VideoAPI&quot;, &quot;version&quot;: &quot;0.0.1&quot;,\n    &quot;private&quot;: true, &quot;license&quot;: &quot;Apache-2.0&quot;,\n    &quot;author&quot;: &quot;Lee Boonstra&quot;, &quot;engines&quot;: {\n    &quot;node&quot;: &quot;~4.2&quot; }, &quot;dependencies&quot;: {\n    &quot;@google-cloud/videointelligence&quot;:\n    &quot;file:local_modules/videointelligence&quot;, &quot;dotenv&quot;:\n    &quot;^4.0.0&quot; } }</code></p>\n<h3 id=\"Create-a-Cloud-Function\"><a href=\"#Create-a-Cloud-Function\" class=\"headerlink\" title=\"Create a Cloud Function\"></a>Create\n  a Cloud Function</h3>\n<p>Create a new hidden <strong>.env</strong> file, and give it the following\n  content: <code>ENV=production GCLOUD_PROJECT=[project-id]\n    GCLOUD_KEY_FILE=./[path to json service key file]</code> Afterwards, create\n  the <strong>index.js</strong> file with these contents: <a href=\"https://gist.github.com/savelee/48d8642ffe0a99348cfeca56485181c2\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/48d8642ffe0a99348cfeca56485181c2</a></p>\n<h3 id=\"Deploy-your-Cloud-Function\"><a href=\"#Deploy-your-Cloud-Function\" class=\"headerlink\" title=\"Deploy your Cloud Function\"></a>Deploy\n  your Cloud Function</h3>\n<p>On the command-line, enter the following: <code>$ gcloud beta functions\n    deploy [name-function] --stage-bucket [bucket name of the function-src\n    bucket] --trigger-bucket [bucket name of the videos bucket]</code> For\n  example: <code>$ gcloud beta functions deploy videoapi --stage-bucket\n    leeboonstra-functions-src --trigger-bucket leeboonstra-videoapi</code> ###\n  TimeOuts The way how the video api works, is that it first will read in the\n  video to the memory. The machine learning under the hood, is similar to\n  Google’s Cloud Vision API, which can detect what’s on an image. But for the\n  Video Intelligence API this works per frame. Cloud functions can timeout. You\n  will need to specify a timeout in seconds. By default it’s set to 60s. A\n  number between 1 and 540 (9min) is required. A video with a long duration,\n  will likely make that the cloud function will timeout. So becareful. You can\n  either setup, the timeout in the <strong>Cloud Functions / </strong>Logging**</p>\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3>\n<p>By now, you managed to test the Video Intelligence API with your own\n  JavaScript code, within a cloud function based on file upload in a bucket.\n  The power of this cloud function, is that you could easily build an\n  application around this, which makes use of microservices (cloud functions).\n  It wouldn’t be much work to create an interface (for example with Sencha Ext\n  JS, or just with plain HTML, CSS and JavaScript), which shows a list of\n  video’s and the tags. I’m logging the tags in the logs of Stack Driver. But\n  instead I could save it in the data store. I could create another cloud\n  function, based on an HTTP trigger which loads the data of the datastore and\n  displays it in the front-end list. Another idea could be, to pass in the\n  results of the Video Intelligence API into another Machine Learning API, such\n  a translate. To translate the keywords to a different language, before saving\n  it in the database. <em>TIP: In case you don’t want English meta data, it’s\n    also possible to put the Translate API right after the Video Intelligence\n    API call!</em></p>\n<p><iframe src=\"https://player.vimeo.com/video/213039480\" width=\"640\" height=\"420\" frameborder=\"0\" webkitallowfullscreen=\"\" mozallowfullscreen=\"\" allowfullscreen></iframe></p>\n<p><a href=\"https://vimeo.com/213039480\" target=\"_blank\" rel=\"noopener\">Video Intelligence API</a> from <a href=\"https://vimeo.com/user13471554\" target=\"_blank\" rel=\"noopener\">Ladysign</a>\n  on <a href=\"https://vimeo.com\" target=\"_blank\" rel=\"noopener\">Vimeo</a>.</p>\n<h3 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h3>\n<ul>\n  <li><a href=\"https://cloud.google.com/functions/docs/reference\" target=\"_blank\" rel=\"noopener\">Cloud\n      Functions Docs</a></li>\n  <li><a href=\"https://cloud-ml-video.appspot.com/index_v1beta1.html\" target=\"_blank\" rel=\"noopener\">Video\n      Intelligence Demo</a></li>\n</ul>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<h2 id=\"Search-and-discover-your-media-content-with-powerful-Cloud-Video-Intelligence-API\"><a href=\"#Search-and-discover-your-media-content-with-powerful-Cloud-Video-Intelligence-API\" class=\"headerlink\" title=\"Search and discover your media content with powerful Cloud Video Intelligence API\"></a>Search\n  and discover your media content with powerful Cloud Video Intelligence API</h2>\n<p>Google Cloud Video Intelligence API makes videos searchable, and\n  discoverable, by extracting metadata with an easy to use REST API. You can\n  now search every moment of every video file in your catalog and find every\n  occurrence as well as its significance. It quickly annotates videos stored in\n  Google <a href=\"https://cloud.google.com/storage/\" target=\"_blank\" rel=\"noopener\">Cloud Storage</a>, and\n  helps you identify key nouns entities of your video, and when they occur\n  within the video. Separate signal from noise, by retrieving relevant\n  information at the video, shot or per frame. You can try this out, yourself:</p>","more":"<ol>\n  <li>Open: <a href=\"https://cloud.google.com/video-intelligence/#demo\" target=\"_blank\" rel=\"noopener\">https://cloud.google.com/video-intelligence/#demo</a></li>\n  <li>Select a sample video from the list, for example: <strong>Volleyball\n      Court</strong>, (which is a video made at the Google Mountain View\n    office). Notice the labels.</li>\n  <li>Select another sample video from the list: <strong>Google Work</strong>.</li>\n  <li>Click on the <strong>Shots</strong> tab. Notice all the keywords detected\n    from the video, which are being renewed per video shot!</li>\n  <li>Click on the <strong>API</strong> tab. Notice how the JSON response would\n    look like.</li>\n  <li>Now, lets try it with one of my own videos, which I’ve uploaded as a\n    public available video in Cloud Storage: <strong>gs://leeboonstra-videos/mov_bbb.mp4</strong></li>\n</ol>\n<h2 id=\"Write-metadata-on-video-upload\"><a href=\"#Write-metadata-on-video-upload\" class=\"headerlink\" title=\"Write metadata on video upload\"></a>Write\n  metadata on video upload</h2>\n<p>Machine Learning for videos, can be super interesting, in case you want to\n  implement it within your own systems. Let’s say you host a lot of videos on\n  your website. Instead of manually writing meta per video; you could create an\n  ETL job, (for example through Cloud Functions), which listens to the upload\n  event of Google Cloud Storage, runs the Video Intelligence API, and writes\n  the metadata in a database. This looks like a great use case! Let’s see if we\n  can build this! ### Getting Started To get started, open the GCP console, and\n  create a new project.</p>\n<p>Go to: <a href=\"https://console.cloud.google.com\" target=\"_blank\" rel=\"noopener\">https://console.cloud.google.com</a>\n  and click: <a href=\"https://cloud.google.com/resource-manager/docs/creating-managing-projects\" target=\"_blank\" rel=\"noopener\">Create\n    new project</a>, and enter an easy to remember project name, which will be\n  used as the <em>project id</em>.</p>\n<p>You will have to remember this. The project id will have to be unique. For\n  this workshop, it might be a good practice to prefix it with your <strong>[firstname][lastname]</strong></p>\n<h3 id=\"Enable-the-Cloud-Functions-API\"><a href=\"#Enable-the-Cloud-Functions-API\" class=\"headerlink\" title=\"Enable the Cloud Functions API\"></a>Enable\n  the Cloud Functions API</h3>\n<p>Click on the menu button. <strong>Cloud Functions &gt; Enable API</strong>.</p>\n<h3 id=\"Enable-the-Video-Intelligence-API\"><a href=\"#Enable-the-Video-Intelligence-API\" class=\"headerlink\" title=\"Enable the Video Intelligence API\"></a>Enable\n  the Video Intelligence API</h3>\n<p>Click on the menu button. <strong>API Manager</strong>. Search for: <strong>Google\n    Cloud Video Intelligence</strong>. <strong>API &gt; Enable</strong> Click\n  <strong>Credentials &gt; Create Credentials &gt; Service Account</strong>\n  Choose <strong>New Service Account</strong> Service Account Name: <strong>demoapp</strong>\n  Role: <strong>Project Owner</strong> Choose <strong>JSON</strong> Click\n  <strong>Create</strong> Click <strong>Manage Service Accounts</strong> Click\n  the menu button (the 3 vertical dots), and select <strong>Create Key</strong>\n  This will download the key on your local machine. Create a folder on your\n  machine called: <strong>cloudfunctions-videoapi</strong>, and move the file\n  over. ### Create storage buckets When you write the JavaScript code for the\n  cloud function, you will need to upload it somewhere. Under the hood, GCP\n  will create a container with a Node environment for you, so you can execute\n  your function. You can upload function code, in a bucket of the Google\n  Storage. Let’s create a bucket which contains function code. You can create\n  the bucket via the Cloud Console (menu &gt; <strong>Storage &gt; Create\n    Bucket</strong>), or from the command-line, on your local machine (if you\n  have the gcloud sdk installed), or from your online terminal in the Cloud\n  Console: <code>gsutil mb -p [PROJECT_ID] gs://[BUCKET_NAME]</code> <em>Create\n    two buckets, with the name of your [project id] + <strong>-functions-src</strong>,\n    and one [project-id]<strong>-videos</strong>. (This way, your bucket will\n    be unique.)</em> After you’ve created the videos bucket, you will need to\n  make this bucket public, so your video’s get gs:// public urls. You can do\n  this by clicking on the menu button of the bucket (the button with the 3\n  vertical dots). Click <strong>Add Item</strong>: <em>User -\n    allAuthenticatedUsers - Reader</em> Click <strong>Save</strong>.</p>\n<p><img src=\"/images/Screen-Shot-2017-04-10-at-4.57.56-PM.png\" alt=\"Screenshot\"></p>\n<h3 id=\"Client-Library\"><a href=\"#Client-Library\" class=\"headerlink\" title=\"Client Library\"></a>Client\n  Library</h3>\n<p>Since the client node js library is still in Alpha at the time of writing,\n  we will download the alpha version and host it locally. Once the library gets\n  publically available, you can ignore the next step, and instead link to the\n  online version of the client library. (See: <a href=\"https://www.npmjs.com/package/google-cloud\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/google-cloud</a>)\n  Download the alpha node client library: <a href=\"https://storage.googleapis.com/videointelligence-alpha/videointelligence-nodejs.tar.gz\" target=\"_blank\" rel=\"noopener\">https://storage.googleapis.com/videointelligence-alpha/videointelligence-nodejs.tar.gz</a></p>\n<p>Unzip the package. Create a new folder inside <strong>cloudfunctions-video</strong>,\n  called: <strong>local_modules</strong>, and move the <strong>videointelligence</strong>\n  folder into it. Create a cloudfunctions-video/<strong>package.json</strong>\n  file. It should contain the following contents: <code>{ &quot;name&quot;:\n    &quot;videoapi&quot;, &quot;description&quot;: &quot;Webservice\n    VideoAPI&quot;, &quot;version&quot;: &quot;0.0.1&quot;,\n    &quot;private&quot;: true, &quot;license&quot;: &quot;Apache-2.0&quot;,\n    &quot;author&quot;: &quot;Lee Boonstra&quot;, &quot;engines&quot;: {\n    &quot;node&quot;: &quot;~4.2&quot; }, &quot;dependencies&quot;: {\n    &quot;@google-cloud/videointelligence&quot;:\n    &quot;file:local_modules/videointelligence&quot;, &quot;dotenv&quot;:\n    &quot;^4.0.0&quot; } }</code></p>\n<h3 id=\"Create-a-Cloud-Function\"><a href=\"#Create-a-Cloud-Function\" class=\"headerlink\" title=\"Create a Cloud Function\"></a>Create\n  a Cloud Function</h3>\n<p>Create a new hidden <strong>.env</strong> file, and give it the following\n  content: <code>ENV=production GCLOUD_PROJECT=[project-id]\n    GCLOUD_KEY_FILE=./[path to json service key file]</code> Afterwards, create\n  the <strong>index.js</strong> file with these contents: <a href=\"https://gist.github.com/savelee/48d8642ffe0a99348cfeca56485181c2\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/48d8642ffe0a99348cfeca56485181c2</a></p>\n<h3 id=\"Deploy-your-Cloud-Function\"><a href=\"#Deploy-your-Cloud-Function\" class=\"headerlink\" title=\"Deploy your Cloud Function\"></a>Deploy\n  your Cloud Function</h3>\n<p>On the command-line, enter the following: <code>$ gcloud beta functions\n    deploy [name-function] --stage-bucket [bucket name of the function-src\n    bucket] --trigger-bucket [bucket name of the videos bucket]</code> For\n  example: <code>$ gcloud beta functions deploy videoapi --stage-bucket\n    leeboonstra-functions-src --trigger-bucket leeboonstra-videoapi</code> ###\n  TimeOuts The way how the video api works, is that it first will read in the\n  video to the memory. The machine learning under the hood, is similar to\n  Google’s Cloud Vision API, which can detect what’s on an image. But for the\n  Video Intelligence API this works per frame. Cloud functions can timeout. You\n  will need to specify a timeout in seconds. By default it’s set to 60s. A\n  number between 1 and 540 (9min) is required. A video with a long duration,\n  will likely make that the cloud function will timeout. So becareful. You can\n  either setup, the timeout in the <strong>Cloud Functions / </strong>Logging**</p>\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3>\n<p>By now, you managed to test the Video Intelligence API with your own\n  JavaScript code, within a cloud function based on file upload in a bucket.\n  The power of this cloud function, is that you could easily build an\n  application around this, which makes use of microservices (cloud functions).\n  It wouldn’t be much work to create an interface (for example with Sencha Ext\n  JS, or just with plain HTML, CSS and JavaScript), which shows a list of\n  video’s and the tags. I’m logging the tags in the logs of Stack Driver. But\n  instead I could save it in the data store. I could create another cloud\n  function, based on an HTTP trigger which loads the data of the datastore and\n  displays it in the front-end list. Another idea could be, to pass in the\n  results of the Video Intelligence API into another Machine Learning API, such\n  a translate. To translate the keywords to a different language, before saving\n  it in the database. <em>TIP: In case you don’t want English meta data, it’s\n    also possible to put the Translate API right after the Video Intelligence\n    API call!</em></p>\n<p><iframe src=\"https://player.vimeo.com/video/213039480\" width=\"640\" height=\"420\" frameborder=\"0\" webkitallowfullscreen=\"\" mozallowfullscreen=\"\" allowfullscreen></iframe></p>\n<p><a href=\"https://vimeo.com/213039480\" target=\"_blank\" rel=\"noopener\">Video Intelligence API</a> from <a href=\"https://vimeo.com/user13471554\" target=\"_blank\" rel=\"noopener\">Ladysign</a>\n  on <a href=\"https://vimeo.com\" target=\"_blank\" rel=\"noopener\">Vimeo</a>.</p>\n<h3 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h3>\n<ul>\n  <li><a href=\"https://cloud.google.com/functions/docs/reference\" target=\"_blank\" rel=\"noopener\">Cloud\n      Functions Docs</a></li>\n  <li><a href=\"https://cloud-ml-video.appspot.com/index_v1beta1.html\" target=\"_blank\" rel=\"noopener\">Video\n      Intelligence Demo</a></li>\n</ul>"},{"title":"Native Sencha apps with Ext JS 6 and Cordova / PhoneGap","date":"2016-06-18T16:10:22.000Z","_content":"\nLast time I played with Cordova, I developed Sencha Touch apps. Been there, done that. Sencha’s new mobile framework, is Ext JS 6. With Ext JS 6 you can create desktop applications or mobile (tablets or phone) apps. And.. you can create universal apps. A universal app, means one Ext JS 6 code base, for any type of device. Whether it’s a phone, a tablet or a desktop app, we let Sencha detect the type of device, browser or OS, and download and serve the right kind of experience for you. That works great for web applications, the so called PWAs, progressive web apps. But what if you want to create a native app with Ext JS?\n\n<!--more-->\n\nFor example, because you want to sell your app in an app store, or because you want to make use of native device API features. The solution would be Adobe PhoneGap or Apache Cordova. Just in case you are completely new to this technology; PhoneGap and Cordova are making use of the same technology, but PhoneGap is from Adobe and is a commercial solution, Cordova is Apache and open source. The commercial version has a cloud build tool, which can build your applications to native online, (and therefore you don’t need to install dev tools (like for example XCode) on your own machine. Just like how Cordova works, with PhoneGap it’s also possible to build yourself, from your own machine. This requires you to have the SDKs for Android Dev Tools, Windows Tools or XCode installed on your pc or Mac. The way how Cordova/PhoneGap works, is they will take your web build (the Sencha concatenated / minified JavaScript build, index.html and CSS theme), and copy this in a native project file. (like an XCode project). These SDK project files contain a webview (a native shell. It’s like a browser, it can display webpages/apps, you just can’t enter URLs, it defaults to your web build). Alright, so in the past I’ve wrote tutorials about Cordova and PhoneGap before, you can find those [here](https://www.leeboonstra.com/developer/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-3) and [here](https://www.leeboonstra.com/developer/make-a-native-build-with-ext-js-5-sencha-cmd-5-and-phonegap-cordova-with-plugins). \n\nHowever, that has been a while ago, and I’m curious to see if it all works the same way, since technologies change, and so do Android and iOS versions. In particular I’m curious how it will work with Ext JS 6 universal apps. I do want to have one code base for maintainability, however I do *not* want to have my desktop application deployed with my mobile app, since it’s only for mobiles. Further more, I don’t want to have my Android interface in an iOS build etc. So let’s dive into this! We will make use of Cordova, since it’s open source there will be many plugins available. In case you haven’t already. You will need to install Cordova with the NPM package manager, from your command-line. It requires Node. I’m currently running Node JS version: 5.8.0 `` `$ npm install -g cordova` `` (Mac OSX users might need to prefix the CLI commands with sudo, for the permissions.) Afterwards, review if Cordova has been correctly installed: `` `$ cordova -v` `` Generate a new Ext JS universal app. (Or use an existing one.) (`sencha generate app MyApp ../mypath`), you run this command from the downloaded Sencha SDK folder. Next open from your Ext JS app, the app.json file. We will add some code here. Scroll to the ***builds*** block. Add the following build profile: \n\n``` JSON\n\"cordovaios\": { \n  \"packager\": \"cordova\", \n  \"cordova\": { \n    \"config\": { \n        \"platforms\": \"ios\", \n        \"remote\": false, \n        \"id\": \"com.ladysign.Spotifinder\", \n        \"name\": \"MyApp\" \n      }\n  },\n  \"toolkit\": \"modern\", \"theme\": \"theme-ios\" },\n```\n\nThe *packager* field, will trigger Sencha Cmd, to make use of your Cordova installation. Note, you can also enter **phonegap** here, in case you have PhoneGap installed on your machine. Once you have the packager defined, you can use the **cordova** object. \n\nIn the *platforms* field, you define the platforms you want to build for (again, it requires the SDK tools for every platform). Unless you are creating an application with one universal look and feel (a theme derived from Neptune or Triton), I would put only one platform here. You can always create multiple build profiles in the app.json. \n\nI only wrote *ios* here, because my app is making use of the new Ext JS 6.2 *theme-ios* theme. (Remember, that I don’t want to put more than one theme in my build?). \n\nThe field *remote* is set to false, unless you want to make use of the PhoneGap cloud builder, than it would be *true*. The *id* is the id (reverse domain notation), you will use in your app store, and *name* that’s the name of your app, as you use in `Ext.Application`. \n\nThe *toolkit* property is important for an Ext JS 6 app. (Remember, that I don’t want to include the desktop version of my app in this build?). All phone applications should make use of the toolkit, since that’s a faster performing toolkit, with more components that were designed for mobile touch user experience. Next. verify, that you didn’t make typos in the **app.json** file, by running from your project folder the following command: `$ sencha app refresh` Now, we need to modify the index.html file, to make sure the application can load within Cordova. The microloader will need to detect if it’s an Cordova app, to load the correct JavaScript code and theme: \n\n``` JavaScript\n  var Ext = Ext || {}; // Ext namespace won't be defined yet...\n    // This function is called by the Microloader after it has performed basic\n    // device detection. The results are provided in the \"tags\" object. You can\n    // use these tags here or even add custom tags. These can be used by platform\n    // filters in your manifest or by platformConfig expressions in your app.\n    //\n    Ext.beforeLoad = function (tags) {\n        var s = location.search,  // the query string (ex \"?foo=1&amp;bar\")\n            profile;\n        if (\n            location.href.match(/\\bcordova\\b/) ||\n            Ext.platformTags.cordova ||\n            Ext.platformTags.webview\n        ) {\n            profile = 'cordovaios';\n        }\n        else if (s.match(/\\bmodern\\b/) || tags.ios) {\n            profile = 'modern';\n        }\n        else if (s.match(/\\bandroid\\b/) || Ext.platformTags.android &gt; 0) {\n            profile = 'android';\n        }\n        else {\n            profile = 'classic';\n        }\n        Ext.manifest = profile;\n    };\n```\n \n This tells the Sencha microloader, to load the *cordovaios* build, if: *cordova* is in the url (to test on your development machine) or if the app runs in a cordova or webview shell. Sure, instead of all this if else checking, you could force `Ext.manifest = ‘cordovaios’` but the magic here, is that we will reuse this index.html for every type of app, whether it’s an desktop app, iOS PWA or Android PWA. So this microloader is actually great. Ready? Let’s go and build: `$ sencha app build cordovaios` We tell Sencha Cmd to build the *cordovaios* profile, like we wrote in **app.json**. Woopie. It seems like it worked. \n \n Let’s take a close look and see where the build is located. According to my build log, it looks like there’s a **cordova** folder created in my Ext JS application folder: **MyApp/cordova**:\n\n ``` txt\n MyApp \n - cordova \n - - config.xml \n - - hooks \n - - platforms \n - - plugins \n - - www \n - - - index.html \n - - - cordovaios \n - - - - app.js \n - - - - resources \n - - - - - MyApp.css \n ```\n\n The **www** folder, will be the place, where a copy of your Sencha Ext JS 6 app will be located. Let’s look into this folder, and verify what’s inside of it. So what’s in the **cordovaios** folder, is the JavaScript code, for the modern toolkit only. Nice! So. you won’t bundle the desktop version inside of it. And also, it only includes one theme, the right one. This is all because of the *toolkit* and *theme* settings we made in the **app.json** file. How awesome. \n \n Let’s cover some Cordova / XCode stuff, since you are here anyway. If you have done this before, this is probably not so interesting for you… Oh cool. So you are still here. Open **config.xml** and modify the name and description fields to describe your app. After your first build, you can copy the generated **cordova.js** and **cordova-plugins.js** files, and put it in your cordova **www** folder. Copy it from **MyApp/cordova/platforms/ios/www**. That way the other **cordova/www** folder won’t have 404 errors. You could make another build: `$ sencha app build cordovaios` Open your application from the cordova www folder in your browser, and verify that everything works without issues. For example: http://localhost/MyApp/cordova/www/ We don’t need the auto generated **css** and **js** folders. So remove those. No worries, the next time you make a cordovaios build, those folders won’t come back. Ok, so basically, we could now open XCode, open the **MyApp/cordova/platforms/ios/MyApp.xcodeproj**, and build with XCode tools, the applications. \n \n In XCode, press the *play* button. It creates a build, and it should run it in an simulator. I run into a common issue: *The status bar is mixed into my layout.* We can fix this with the cordova-plugin-statusbar plugin. So install it. Run on the CLI from he cordova folder: `$ cordova plugin add cordova-plugin-statusbar`\n \n In XCode rightclick your project to view the *resources/MyApp.pList* configuration. And add the following settings: \n \n * `Status bar is initially hidden = YES` \n * `View controller-based status bar appearance = NO`\n * `UIRequiresFullScreen = YES` \n \nThis should be fixed. Next replace all the Cordova logos and splash screens. You can find and replace those assets from here: **MyApp/Cordova/platforms/ios/MyApp/Images.xcassets** And that’s it. Project > Clean your build, Rebuild, *Project > Build*. And test and run your application in the simulator. For iOS developers, the next steps would be to setup an paid Apple Developer account. It cost about a 100 bucks a year, and you can sell unlimited applications from the Apple App Store. With the developer account, you can get access to iOS beta releases, and you can test your applications on real devices. [https://developer.apple.com/](http://developer.apple.com)\n\nSuccess! Feel free to share your deployed Sencha hybrid apps for Android or iOS with me in the comments!","source":"_posts/native-sencha-apps-with-ext-js-6-and-cordova.md","raw":"---\ntitle: Native Sencha apps with Ext JS 6 and Cordova / PhoneGap\ntags:\n  - Cordova\n  - Hybrid\n  - Native\n  - Phonegap\ncategories:\n  - Cordova\ndate: 2016-06-18 18:10:22\n---\n\nLast time I played with Cordova, I developed Sencha Touch apps. Been there, done that. Sencha’s new mobile framework, is Ext JS 6. With Ext JS 6 you can create desktop applications or mobile (tablets or phone) apps. And.. you can create universal apps. A universal app, means one Ext JS 6 code base, for any type of device. Whether it’s a phone, a tablet or a desktop app, we let Sencha detect the type of device, browser or OS, and download and serve the right kind of experience for you. That works great for web applications, the so called PWAs, progressive web apps. But what if you want to create a native app with Ext JS?\n\n<!--more-->\n\nFor example, because you want to sell your app in an app store, or because you want to make use of native device API features. The solution would be Adobe PhoneGap or Apache Cordova. Just in case you are completely new to this technology; PhoneGap and Cordova are making use of the same technology, but PhoneGap is from Adobe and is a commercial solution, Cordova is Apache and open source. The commercial version has a cloud build tool, which can build your applications to native online, (and therefore you don’t need to install dev tools (like for example XCode) on your own machine. Just like how Cordova works, with PhoneGap it’s also possible to build yourself, from your own machine. This requires you to have the SDKs for Android Dev Tools, Windows Tools or XCode installed on your pc or Mac. The way how Cordova/PhoneGap works, is they will take your web build (the Sencha concatenated / minified JavaScript build, index.html and CSS theme), and copy this in a native project file. (like an XCode project). These SDK project files contain a webview (a native shell. It’s like a browser, it can display webpages/apps, you just can’t enter URLs, it defaults to your web build). Alright, so in the past I’ve wrote tutorials about Cordova and PhoneGap before, you can find those [here](https://www.leeboonstra.com/developer/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-3) and [here](https://www.leeboonstra.com/developer/make-a-native-build-with-ext-js-5-sencha-cmd-5-and-phonegap-cordova-with-plugins). \n\nHowever, that has been a while ago, and I’m curious to see if it all works the same way, since technologies change, and so do Android and iOS versions. In particular I’m curious how it will work with Ext JS 6 universal apps. I do want to have one code base for maintainability, however I do *not* want to have my desktop application deployed with my mobile app, since it’s only for mobiles. Further more, I don’t want to have my Android interface in an iOS build etc. So let’s dive into this! We will make use of Cordova, since it’s open source there will be many plugins available. In case you haven’t already. You will need to install Cordova with the NPM package manager, from your command-line. It requires Node. I’m currently running Node JS version: 5.8.0 `` `$ npm install -g cordova` `` (Mac OSX users might need to prefix the CLI commands with sudo, for the permissions.) Afterwards, review if Cordova has been correctly installed: `` `$ cordova -v` `` Generate a new Ext JS universal app. (Or use an existing one.) (`sencha generate app MyApp ../mypath`), you run this command from the downloaded Sencha SDK folder. Next open from your Ext JS app, the app.json file. We will add some code here. Scroll to the ***builds*** block. Add the following build profile: \n\n``` JSON\n\"cordovaios\": { \n  \"packager\": \"cordova\", \n  \"cordova\": { \n    \"config\": { \n        \"platforms\": \"ios\", \n        \"remote\": false, \n        \"id\": \"com.ladysign.Spotifinder\", \n        \"name\": \"MyApp\" \n      }\n  },\n  \"toolkit\": \"modern\", \"theme\": \"theme-ios\" },\n```\n\nThe *packager* field, will trigger Sencha Cmd, to make use of your Cordova installation. Note, you can also enter **phonegap** here, in case you have PhoneGap installed on your machine. Once you have the packager defined, you can use the **cordova** object. \n\nIn the *platforms* field, you define the platforms you want to build for (again, it requires the SDK tools for every platform). Unless you are creating an application with one universal look and feel (a theme derived from Neptune or Triton), I would put only one platform here. You can always create multiple build profiles in the app.json. \n\nI only wrote *ios* here, because my app is making use of the new Ext JS 6.2 *theme-ios* theme. (Remember, that I don’t want to put more than one theme in my build?). \n\nThe field *remote* is set to false, unless you want to make use of the PhoneGap cloud builder, than it would be *true*. The *id* is the id (reverse domain notation), you will use in your app store, and *name* that’s the name of your app, as you use in `Ext.Application`. \n\nThe *toolkit* property is important for an Ext JS 6 app. (Remember, that I don’t want to include the desktop version of my app in this build?). All phone applications should make use of the toolkit, since that’s a faster performing toolkit, with more components that were designed for mobile touch user experience. Next. verify, that you didn’t make typos in the **app.json** file, by running from your project folder the following command: `$ sencha app refresh` Now, we need to modify the index.html file, to make sure the application can load within Cordova. The microloader will need to detect if it’s an Cordova app, to load the correct JavaScript code and theme: \n\n``` JavaScript\n  var Ext = Ext || {}; // Ext namespace won't be defined yet...\n    // This function is called by the Microloader after it has performed basic\n    // device detection. The results are provided in the \"tags\" object. You can\n    // use these tags here or even add custom tags. These can be used by platform\n    // filters in your manifest or by platformConfig expressions in your app.\n    //\n    Ext.beforeLoad = function (tags) {\n        var s = location.search,  // the query string (ex \"?foo=1&amp;bar\")\n            profile;\n        if (\n            location.href.match(/\\bcordova\\b/) ||\n            Ext.platformTags.cordova ||\n            Ext.platformTags.webview\n        ) {\n            profile = 'cordovaios';\n        }\n        else if (s.match(/\\bmodern\\b/) || tags.ios) {\n            profile = 'modern';\n        }\n        else if (s.match(/\\bandroid\\b/) || Ext.platformTags.android &gt; 0) {\n            profile = 'android';\n        }\n        else {\n            profile = 'classic';\n        }\n        Ext.manifest = profile;\n    };\n```\n \n This tells the Sencha microloader, to load the *cordovaios* build, if: *cordova* is in the url (to test on your development machine) or if the app runs in a cordova or webview shell. Sure, instead of all this if else checking, you could force `Ext.manifest = ‘cordovaios’` but the magic here, is that we will reuse this index.html for every type of app, whether it’s an desktop app, iOS PWA or Android PWA. So this microloader is actually great. Ready? Let’s go and build: `$ sencha app build cordovaios` We tell Sencha Cmd to build the *cordovaios* profile, like we wrote in **app.json**. Woopie. It seems like it worked. \n \n Let’s take a close look and see where the build is located. According to my build log, it looks like there’s a **cordova** folder created in my Ext JS application folder: **MyApp/cordova**:\n\n ``` txt\n MyApp \n - cordova \n - - config.xml \n - - hooks \n - - platforms \n - - plugins \n - - www \n - - - index.html \n - - - cordovaios \n - - - - app.js \n - - - - resources \n - - - - - MyApp.css \n ```\n\n The **www** folder, will be the place, where a copy of your Sencha Ext JS 6 app will be located. Let’s look into this folder, and verify what’s inside of it. So what’s in the **cordovaios** folder, is the JavaScript code, for the modern toolkit only. Nice! So. you won’t bundle the desktop version inside of it. And also, it only includes one theme, the right one. This is all because of the *toolkit* and *theme* settings we made in the **app.json** file. How awesome. \n \n Let’s cover some Cordova / XCode stuff, since you are here anyway. If you have done this before, this is probably not so interesting for you… Oh cool. So you are still here. Open **config.xml** and modify the name and description fields to describe your app. After your first build, you can copy the generated **cordova.js** and **cordova-plugins.js** files, and put it in your cordova **www** folder. Copy it from **MyApp/cordova/platforms/ios/www**. That way the other **cordova/www** folder won’t have 404 errors. You could make another build: `$ sencha app build cordovaios` Open your application from the cordova www folder in your browser, and verify that everything works without issues. For example: http://localhost/MyApp/cordova/www/ We don’t need the auto generated **css** and **js** folders. So remove those. No worries, the next time you make a cordovaios build, those folders won’t come back. Ok, so basically, we could now open XCode, open the **MyApp/cordova/platforms/ios/MyApp.xcodeproj**, and build with XCode tools, the applications. \n \n In XCode, press the *play* button. It creates a build, and it should run it in an simulator. I run into a common issue: *The status bar is mixed into my layout.* We can fix this with the cordova-plugin-statusbar plugin. So install it. Run on the CLI from he cordova folder: `$ cordova plugin add cordova-plugin-statusbar`\n \n In XCode rightclick your project to view the *resources/MyApp.pList* configuration. And add the following settings: \n \n * `Status bar is initially hidden = YES` \n * `View controller-based status bar appearance = NO`\n * `UIRequiresFullScreen = YES` \n \nThis should be fixed. Next replace all the Cordova logos and splash screens. You can find and replace those assets from here: **MyApp/Cordova/platforms/ios/MyApp/Images.xcassets** And that’s it. Project > Clean your build, Rebuild, *Project > Build*. And test and run your application in the simulator. For iOS developers, the next steps would be to setup an paid Apple Developer account. It cost about a 100 bucks a year, and you can sell unlimited applications from the Apple App Store. With the developer account, you can get access to iOS beta releases, and you can test your applications on real devices. [https://developer.apple.com/](http://developer.apple.com)\n\nSuccess! Feel free to share your deployed Sencha hybrid apps for Android or iOS with me in the comments!","slug":"native-sencha-apps-with-ext-js-6-and-cordova","published":1,"updated":"2018-11-30T14:47:17.732Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncqu009nkif5r47tytvz","content":"<p>Last time I played with Cordova, I developed Sencha Touch apps. Been there,\n  done that. Sencha’s new mobile framework, is Ext JS 6. With Ext JS 6 you can\n  create desktop applications or mobile (tablets or phone) apps. And.. you can\n  create universal apps. A universal app, means one Ext JS 6 code base, for any\n  type of device. Whether it’s a phone, a tablet or a desktop app, we let\n  Sencha detect the type of device, browser or OS, and download and serve the\n  right kind of experience for you. That works great for web applications, the\n  so called PWAs, progressive web apps. But what if you want to create a native\n  app with Ext JS?</p>\n<a id=\"more\"></a>\n<p>For example, because you want to sell your app in an app store, or because\n  you want to make use of native device API features. The solution would be\n  Adobe PhoneGap or Apache Cordova. Just in case you are completely new to this\n  technology; PhoneGap and Cordova are making use of the same technology, but\n  PhoneGap is from Adobe and is a commercial solution, Cordova is Apache and\n  open source. The commercial version has a cloud build tool, which can build\n  your applications to native online, (and therefore you don’t need to install\n  dev tools (like for example XCode) on your own machine. Just like how Cordova\n  works, with PhoneGap it’s also possible to build yourself, from your own\n  machine. This requires you to have the SDKs for Android Dev Tools, Windows\n  Tools or XCode installed on your pc or Mac. The way how Cordova/PhoneGap\n  works, is they will take your web build (the Sencha concatenated / minified\n  JavaScript build, index.html and CSS theme), and copy this in a native\n  project file. (like an XCode project). These SDK project files contain a\n  webview (a native shell. It’s like a browser, it can display webpages/apps,\n  you just can’t enter URLs, it defaults to your web build). Alright, so in the\n  past I’ve wrote tutorials about Cordova and PhoneGap before, you can find\n  those <a href=\"https://www.leeboonstra.com/developer/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-3\" target=\"_blank\" rel=\"noopener\">here</a>\n  and <a href=\"https://www.leeboonstra.com/developer/make-a-native-build-with-ext-js-5-sencha-cmd-5-and-phonegap-cordova-with-plugins\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>However, that has been a while ago, and I’m curious to see if it all works\n  the same way, since technologies change, and so do Android and iOS versions.\n  In particular I’m curious how it will work with Ext JS 6 universal apps. I do\n  want to have one code base for maintainability, however I do <em>not</em>\n  want to have my desktop application deployed with my mobile app, since it’s\n  only for mobiles. Further more, I don’t want to have my Android interface in\n  an iOS build etc. So let’s dive into this! We will make use of Cordova, since\n  it’s open source there will be many plugins available. In case you haven’t\n  already. You will need to install Cordova with the NPM package manager, from\n  your command-line. It requires Node. I’m currently running Node JS version:\n  5.8.0 <code>`$ npm install -g cordova`</code> (Mac OSX users might need to\n  prefix the CLI commands with sudo, for the permissions.) Afterwards, review\n  if Cordova has been correctly installed: <code>`$ cordova -v`</code> Generate\n  a new Ext JS universal app. (Or use an existing one.) (<code>sencha generate\n    app MyApp ../mypath</code>), you run this command from the downloaded\n  Sencha SDK folder. Next open from your Ext JS app, the app.json file. We will\n  add some code here. Scroll to the <strong><em>builds</em></strong> block. Add\n  the following build profile:</p>\n<figure class=\"highlight\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">\"cordovaios\": &#123; </span><br><span class=\"line\">  \"packager\": \"cordova\", </span><br><span class=\"line\">  \"cordova\": &#123; </span><br><span class=\"line\">    \"config\": &#123; </span><br><span class=\"line\">        \"platforms\": \"ios\", </span><br><span class=\"line\">        \"remote\": false, </span><br><span class=\"line\">        \"id\": \"com.ladysign.Spotifinder\", </span><br><span class=\"line\">        \"name\": \"MyApp\" </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"toolkit\": \"modern\", \"theme\": \"theme-ios\" &#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The <em>packager</em> field, will trigger Sencha Cmd, to make use of your\n  Cordova installation. Note, you can also enter <strong>phonegap</strong>\n  here, in case you have PhoneGap installed on your machine. Once you have the\n  packager defined, you can use the <strong>cordova</strong> object.</p>\n<p>In the <em>platforms</em> field, you define the platforms you want to build\n  for (again, it requires the SDK tools for every platform). Unless you are\n  creating an application with one universal look and feel (a theme derived\n  from Neptune or Triton), I would put only one platform here. You can always\n  create multiple build profiles in the app.json.</p>\n<p>I only wrote <em>ios</em> here, because my app is making use of the new Ext\n  JS 6.2 <em>theme-ios</em> theme. (Remember, that I don’t want to put more\n  than one theme in my build?).</p>\n<p>The field <em>remote</em> is set to false, unless you want to make use of\n  the PhoneGap cloud builder, than it would be <em>true</em>. The <em>id</em>\n  is the id (reverse domain notation), you will use in your app store, and <em>name</em>\n  that’s the name of your app, as you use in <code>Ext.Application</code>.</p>\n<p>The <em>toolkit</em> property is important for an Ext JS 6 app. (Remember,\n  that I don’t want to include the desktop version of my app in this build?).\n  All phone applications should make use of the toolkit, since that’s a faster\n  performing toolkit, with more components that were designed for mobile touch\n  user experience. Next. verify, that you didn’t make typos in the <strong>app.json</strong>\n  file, by running from your project folder the following command: <code>$\n    sencha app refresh</code> Now, we need to modify the index.html file, to\n  make sure the application can load within Cordova. The microloader will need\n  to detect if it’s an Cordova app, to load the correct JavaScript code and\n  theme:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">var</span> Ext = Ext || &#123;&#125;; <span class=\"comment\">// Ext namespace won't be defined yet...</span></span><br><span class=\"line\">  <span class=\"comment\">// This function is called by the Microloader after it has performed basic</span></span><br><span class=\"line\">  <span class=\"comment\">// device detection. The results are provided in the \"tags\" object. You can</span></span><br><span class=\"line\">  <span class=\"comment\">// use these tags here or even add custom tags. These can be used by platform</span></span><br><span class=\"line\">  <span class=\"comment\">// filters in your manifest or by platformConfig expressions in your app.</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  Ext.beforeLoad = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tags</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> s = location.search,  <span class=\"comment\">// the query string (ex \"?foo=1&amp;amp;bar\")</span></span><br><span class=\"line\">          profile;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">          location.href.match(<span class=\"regexp\">/\\bcordova\\b/</span>) ||</span><br><span class=\"line\">          Ext.platformTags.cordova ||</span><br><span class=\"line\">          Ext.platformTags.webview</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">          profile = <span class=\"string\">'cordovaios'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.match(<span class=\"regexp\">/\\bmodern\\b/</span>) || tags.ios) &#123;</span><br><span class=\"line\">          profile = <span class=\"string\">'modern'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.match(<span class=\"regexp\">/\\bandroid\\b/</span>) || Ext.platformTags.android &amp;gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          profile = <span class=\"string\">'android'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          profile = <span class=\"string\">'classic'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      Ext.manifest = profile;</span><br><span class=\"line\">  &#125;;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>This tells the Sencha microloader, to load the <em>cordovaios</em> build,\n  if: <em>cordova</em> is in the url (to test on your development machine) or\n  if the app runs in a cordova or webview shell. Sure, instead of all this if\n  else checking, you could force <code>Ext.manifest = ‘cordovaios’</code> but\n  the magic here, is that we will reuse this index.html for every type of app,\n  whether it’s an desktop app, iOS PWA or Android PWA. So this microloader is\n  actually great. Ready? Let’s go and build: <code>$ sencha app build\n    cordovaios</code> We tell Sencha Cmd to build the <em>cordovaios</em>\n  profile, like we wrote in <strong>app.json</strong>. Woopie. It seems like it\n  worked.</p>\n<p>Let’s take a close look and see where the build is located. According to my\n  build log, it looks like there’s a <strong>cordova</strong> folder created in\n  my Ext JS application folder: <strong>MyApp/cordova</strong>:</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">MyApp </span><br><span class=\"line\">- cordova </span><br><span class=\"line\">- - config.xml </span><br><span class=\"line\">- - hooks </span><br><span class=\"line\">- - platforms </span><br><span class=\"line\">- - plugins </span><br><span class=\"line\">- - www </span><br><span class=\"line\">- - - index.html </span><br><span class=\"line\">- - - cordovaios </span><br><span class=\"line\">- - - - app.js </span><br><span class=\"line\">- - - - resources </span><br><span class=\"line\">- - - - - MyApp.css</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The <strong>www</strong> folder, will be the place, where a copy of your\n  Sencha Ext JS 6 app will be located. Let’s look into this folder, and verify\n  what’s inside of it. So what’s in the <strong>cordovaios</strong> folder, is\n  the JavaScript code, for the modern toolkit only. Nice! So. you won’t bundle\n  the desktop version inside of it. And also, it only includes one theme, the\n  right one. This is all because of the <em>toolkit</em> and <em>theme</em>\n  settings we made in the <strong>app.json</strong> file. How awesome.</p>\n<p>Let’s cover some Cordova / XCode stuff, since you are here anyway. If you\n  have done this before, this is probably not so interesting for you… Oh cool.\n  So you are still here. Open <strong>config.xml</strong> and modify the name\n  and description fields to describe your app. After your first build, you can\n  copy the generated <strong>cordova.js</strong> and <strong>cordova-plugins.js</strong>\n  files, and put it in your cordova <strong>www</strong> folder. Copy it from\n  <strong>MyApp/cordova/platforms/ios/www</strong>. That way the other <strong>cordova/www</strong>\n  folder won’t have 404 errors. You could make another build: <code>$ sencha\n    app build cordovaios</code> Open your application from the cordova www\n  folder in your browser, and verify that everything works without issues. For\n  example: <a href=\"http://localhost/MyApp/cordova/www/\" target=\"_blank\" rel=\"noopener\">http://localhost/MyApp/cordova/www/</a>\n  We don’t need the auto generated <strong>css</strong> and <strong>js</strong>\n  folders. So remove those. No worries, the next time you make a cordovaios\n  build, those folders won’t come back. Ok, so basically, we could now open\n  XCode, open the <strong>MyApp/cordova/platforms/ios/MyApp.xcodeproj</strong>,\n  and build with XCode tools, the applications.</p>\n<p>In XCode, press the <em>play</em> button. It creates a build, and it should\n  run it in an simulator. I run into a common issue: <em>The status bar is\n    mixed into my layout.</em> We can fix this with the\n  cordova-plugin-statusbar plugin. So install it. Run on the CLI from he\n  cordova folder: <code>$ cordova plugin add cordova-plugin-statusbar</code></p>\n<p>In XCode rightclick your project to view the <em>resources/MyApp.pList</em>\n  configuration. And add the following settings:</p>\n<ul>\n  <li><code>Status bar is initially hidden = YES</code></li>\n  <li><code>View controller-based status bar appearance = NO</code></li>\n  <li><code>UIRequiresFullScreen = YES</code></li>\n</ul>\n<p>This should be fixed. Next replace all the Cordova logos and splash screens.\n  You can find and replace those assets from here: <strong>MyApp/Cordova/platforms/ios/MyApp/Images.xcassets</strong>\n  And that’s it. Project &gt; Clean your build, Rebuild, <em>Project &gt; Build</em>.\n  And test and run your application in the simulator. For iOS developers, the\n  next steps would be to setup an paid Apple Developer account. It cost about a\n  100 bucks a year, and you can sell unlimited applications from the Apple App\n  Store. With the developer account, you can get access to iOS beta releases,\n  and you can test your applications on real devices. <a href=\"http://developer.apple.com\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/</a></p>\n<p>Success! Feel free to share your deployed Sencha hybrid apps for Android or\n  iOS with me in the comments!</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>Last time I played with Cordova, I developed Sencha Touch apps. Been there,\n  done that. Sencha’s new mobile framework, is Ext JS 6. With Ext JS 6 you can\n  create desktop applications or mobile (tablets or phone) apps. And.. you can\n  create universal apps. A universal app, means one Ext JS 6 code base, for any\n  type of device. Whether it’s a phone, a tablet or a desktop app, we let\n  Sencha detect the type of device, browser or OS, and download and serve the\n  right kind of experience for you. That works great for web applications, the\n  so called PWAs, progressive web apps. But what if you want to create a native\n  app with Ext JS?</p>","more":"<p>For example, because you want to sell your app in an app store, or because\n  you want to make use of native device API features. The solution would be\n  Adobe PhoneGap or Apache Cordova. Just in case you are completely new to this\n  technology; PhoneGap and Cordova are making use of the same technology, but\n  PhoneGap is from Adobe and is a commercial solution, Cordova is Apache and\n  open source. The commercial version has a cloud build tool, which can build\n  your applications to native online, (and therefore you don’t need to install\n  dev tools (like for example XCode) on your own machine. Just like how Cordova\n  works, with PhoneGap it’s also possible to build yourself, from your own\n  machine. This requires you to have the SDKs for Android Dev Tools, Windows\n  Tools or XCode installed on your pc or Mac. The way how Cordova/PhoneGap\n  works, is they will take your web build (the Sencha concatenated / minified\n  JavaScript build, index.html and CSS theme), and copy this in a native\n  project file. (like an XCode project). These SDK project files contain a\n  webview (a native shell. It’s like a browser, it can display webpages/apps,\n  you just can’t enter URLs, it defaults to your web build). Alright, so in the\n  past I’ve wrote tutorials about Cordova and PhoneGap before, you can find\n  those <a href=\"https://www.leeboonstra.com/developer/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-3\" target=\"_blank\" rel=\"noopener\">here</a>\n  and <a href=\"https://www.leeboonstra.com/developer/make-a-native-build-with-ext-js-5-sencha-cmd-5-and-phonegap-cordova-with-plugins\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>However, that has been a while ago, and I’m curious to see if it all works\n  the same way, since technologies change, and so do Android and iOS versions.\n  In particular I’m curious how it will work with Ext JS 6 universal apps. I do\n  want to have one code base for maintainability, however I do <em>not</em>\n  want to have my desktop application deployed with my mobile app, since it’s\n  only for mobiles. Further more, I don’t want to have my Android interface in\n  an iOS build etc. So let’s dive into this! We will make use of Cordova, since\n  it’s open source there will be many plugins available. In case you haven’t\n  already. You will need to install Cordova with the NPM package manager, from\n  your command-line. It requires Node. I’m currently running Node JS version:\n  5.8.0 <code>`$ npm install -g cordova`</code> (Mac OSX users might need to\n  prefix the CLI commands with sudo, for the permissions.) Afterwards, review\n  if Cordova has been correctly installed: <code>`$ cordova -v`</code> Generate\n  a new Ext JS universal app. (Or use an existing one.) (<code>sencha generate\n    app MyApp ../mypath</code>), you run this command from the downloaded\n  Sencha SDK folder. Next open from your Ext JS app, the app.json file. We will\n  add some code here. Scroll to the <strong><em>builds</em></strong> block. Add\n  the following build profile:</p>\n<figure class=\"highlight\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">\"cordovaios\": &#123; </span><br><span class=\"line\">  \"packager\": \"cordova\", </span><br><span class=\"line\">  \"cordova\": &#123; </span><br><span class=\"line\">    \"config\": &#123; </span><br><span class=\"line\">        \"platforms\": \"ios\", </span><br><span class=\"line\">        \"remote\": false, </span><br><span class=\"line\">        \"id\": \"com.ladysign.Spotifinder\", </span><br><span class=\"line\">        \"name\": \"MyApp\" </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"toolkit\": \"modern\", \"theme\": \"theme-ios\" &#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The <em>packager</em> field, will trigger Sencha Cmd, to make use of your\n  Cordova installation. Note, you can also enter <strong>phonegap</strong>\n  here, in case you have PhoneGap installed on your machine. Once you have the\n  packager defined, you can use the <strong>cordova</strong> object.</p>\n<p>In the <em>platforms</em> field, you define the platforms you want to build\n  for (again, it requires the SDK tools for every platform). Unless you are\n  creating an application with one universal look and feel (a theme derived\n  from Neptune or Triton), I would put only one platform here. You can always\n  create multiple build profiles in the app.json.</p>\n<p>I only wrote <em>ios</em> here, because my app is making use of the new Ext\n  JS 6.2 <em>theme-ios</em> theme. (Remember, that I don’t want to put more\n  than one theme in my build?).</p>\n<p>The field <em>remote</em> is set to false, unless you want to make use of\n  the PhoneGap cloud builder, than it would be <em>true</em>. The <em>id</em>\n  is the id (reverse domain notation), you will use in your app store, and <em>name</em>\n  that’s the name of your app, as you use in <code>Ext.Application</code>.</p>\n<p>The <em>toolkit</em> property is important for an Ext JS 6 app. (Remember,\n  that I don’t want to include the desktop version of my app in this build?).\n  All phone applications should make use of the toolkit, since that’s a faster\n  performing toolkit, with more components that were designed for mobile touch\n  user experience. Next. verify, that you didn’t make typos in the <strong>app.json</strong>\n  file, by running from your project folder the following command: <code>$\n    sencha app refresh</code> Now, we need to modify the index.html file, to\n  make sure the application can load within Cordova. The microloader will need\n  to detect if it’s an Cordova app, to load the correct JavaScript code and\n  theme:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">var</span> Ext = Ext || &#123;&#125;; <span class=\"comment\">// Ext namespace won't be defined yet...</span></span><br><span class=\"line\">  <span class=\"comment\">// This function is called by the Microloader after it has performed basic</span></span><br><span class=\"line\">  <span class=\"comment\">// device detection. The results are provided in the \"tags\" object. You can</span></span><br><span class=\"line\">  <span class=\"comment\">// use these tags here or even add custom tags. These can be used by platform</span></span><br><span class=\"line\">  <span class=\"comment\">// filters in your manifest or by platformConfig expressions in your app.</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  Ext.beforeLoad = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tags</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> s = location.search,  <span class=\"comment\">// the query string (ex \"?foo=1&amp;amp;bar\")</span></span><br><span class=\"line\">          profile;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">          location.href.match(<span class=\"regexp\">/\\bcordova\\b/</span>) ||</span><br><span class=\"line\">          Ext.platformTags.cordova ||</span><br><span class=\"line\">          Ext.platformTags.webview</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">          profile = <span class=\"string\">'cordovaios'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.match(<span class=\"regexp\">/\\bmodern\\b/</span>) || tags.ios) &#123;</span><br><span class=\"line\">          profile = <span class=\"string\">'modern'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.match(<span class=\"regexp\">/\\bandroid\\b/</span>) || Ext.platformTags.android &amp;gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          profile = <span class=\"string\">'android'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          profile = <span class=\"string\">'classic'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      Ext.manifest = profile;</span><br><span class=\"line\">  &#125;;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>This tells the Sencha microloader, to load the <em>cordovaios</em> build,\n  if: <em>cordova</em> is in the url (to test on your development machine) or\n  if the app runs in a cordova or webview shell. Sure, instead of all this if\n  else checking, you could force <code>Ext.manifest = ‘cordovaios’</code> but\n  the magic here, is that we will reuse this index.html for every type of app,\n  whether it’s an desktop app, iOS PWA or Android PWA. So this microloader is\n  actually great. Ready? Let’s go and build: <code>$ sencha app build\n    cordovaios</code> We tell Sencha Cmd to build the <em>cordovaios</em>\n  profile, like we wrote in <strong>app.json</strong>. Woopie. It seems like it\n  worked.</p>\n<p>Let’s take a close look and see where the build is located. According to my\n  build log, it looks like there’s a <strong>cordova</strong> folder created in\n  my Ext JS application folder: <strong>MyApp/cordova</strong>:</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">MyApp </span><br><span class=\"line\">- cordova </span><br><span class=\"line\">- - config.xml </span><br><span class=\"line\">- - hooks </span><br><span class=\"line\">- - platforms </span><br><span class=\"line\">- - plugins </span><br><span class=\"line\">- - www </span><br><span class=\"line\">- - - index.html </span><br><span class=\"line\">- - - cordovaios </span><br><span class=\"line\">- - - - app.js </span><br><span class=\"line\">- - - - resources </span><br><span class=\"line\">- - - - - MyApp.css</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The <strong>www</strong> folder, will be the place, where a copy of your\n  Sencha Ext JS 6 app will be located. Let’s look into this folder, and verify\n  what’s inside of it. So what’s in the <strong>cordovaios</strong> folder, is\n  the JavaScript code, for the modern toolkit only. Nice! So. you won’t bundle\n  the desktop version inside of it. And also, it only includes one theme, the\n  right one. This is all because of the <em>toolkit</em> and <em>theme</em>\n  settings we made in the <strong>app.json</strong> file. How awesome.</p>\n<p>Let’s cover some Cordova / XCode stuff, since you are here anyway. If you\n  have done this before, this is probably not so interesting for you… Oh cool.\n  So you are still here. Open <strong>config.xml</strong> and modify the name\n  and description fields to describe your app. After your first build, you can\n  copy the generated <strong>cordova.js</strong> and <strong>cordova-plugins.js</strong>\n  files, and put it in your cordova <strong>www</strong> folder. Copy it from\n  <strong>MyApp/cordova/platforms/ios/www</strong>. That way the other <strong>cordova/www</strong>\n  folder won’t have 404 errors. You could make another build: <code>$ sencha\n    app build cordovaios</code> Open your application from the cordova www\n  folder in your browser, and verify that everything works without issues. For\n  example: <a href=\"http://localhost/MyApp/cordova/www/\" target=\"_blank\" rel=\"noopener\">http://localhost/MyApp/cordova/www/</a>\n  We don’t need the auto generated <strong>css</strong> and <strong>js</strong>\n  folders. So remove those. No worries, the next time you make a cordovaios\n  build, those folders won’t come back. Ok, so basically, we could now open\n  XCode, open the <strong>MyApp/cordova/platforms/ios/MyApp.xcodeproj</strong>,\n  and build with XCode tools, the applications.</p>\n<p>In XCode, press the <em>play</em> button. It creates a build, and it should\n  run it in an simulator. I run into a common issue: <em>The status bar is\n    mixed into my layout.</em> We can fix this with the\n  cordova-plugin-statusbar plugin. So install it. Run on the CLI from he\n  cordova folder: <code>$ cordova plugin add cordova-plugin-statusbar</code></p>\n<p>In XCode rightclick your project to view the <em>resources/MyApp.pList</em>\n  configuration. And add the following settings:</p>\n<ul>\n  <li><code>Status bar is initially hidden = YES</code></li>\n  <li><code>View controller-based status bar appearance = NO</code></li>\n  <li><code>UIRequiresFullScreen = YES</code></li>\n</ul>\n<p>This should be fixed. Next replace all the Cordova logos and splash screens.\n  You can find and replace those assets from here: <strong>MyApp/Cordova/platforms/ios/MyApp/Images.xcassets</strong>\n  And that’s it. Project &gt; Clean your build, Rebuild, <em>Project &gt; Build</em>.\n  And test and run your application in the simulator. For iOS developers, the\n  next steps would be to setup an paid Apple Developer account. It cost about a\n  100 bucks a year, and you can sell unlimited applications from the Apple App\n  Store. With the developer account, you can get access to iOS beta releases,\n  and you can test your applications on real devices. <a href=\"http://developer.apple.com\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/</a></p>\n<p>Success! Feel free to share your deployed Sencha hybrid apps for Android or\n  iOS with me in the comments!</p>"},{"title":"Tutorial: Full-stack JavaScript for the Enterprise Getting started with: Ext JS, Node.js, Express, MongoDB and Docker. (7)","date":"2016-08-22T14:30:10.000Z","_content":"\n_This is part VII of the tutorial, and covers: Docker Compose_ \n\n<!--more-->\n\n# Docker Compose: \n\nLinking containers Docker Compose is a tool for defining and running multi-container Docker applications. **Docker** is a great tool, but to really take full advantage of its potential it's best if each component of your application runs in its own container. For complex applications with a lot of components, orchestrating all the containers to start up and shut down together (not to mention talk to each other) can quickly become confusing. The Docker community came up with a popular solution called **Fig**, which allowed you to use a single **YAML** file to orchestrate all your Docker containers and configurations. This became so popular that the Docker team eventually decided to make their own version based on the Fig source. They called it: **Docker Compose**. In short, it makes dealing with the orchestration processes of Docker containers (such as starting up, shutting down, and setting up intra-container linking and volumes) really easy. So, with Docker Compose you can spin off various Docker images, and link it to each other. That’s great, because in case you ever decide to get rid of the Node.js back-end, and instead like to make use of something else; let’s say Python with Django; you would just link to another images. (For example: here's the same API back-end service, but build in Python with Django/Django Rest Framework: [https://github.com/savelee/docker-django-server](https://github.com/savelee/docker-django-server)) You will use a Compose file (**docker-compose.yml**) to configure your application’s services. Then, using a single command, you create and start all the services from your configuration. For more information, see: [https://docs.docker.com/compose/overview/](https://docs.docker.com/compose/overview/) _Remember, how we wrote in our client Sencha app, URLs to the Node.js back-end? We hardcoded it to the localhost URL. Now this won’t work. When the container is running, it won’t know localhost, only it’s own ip address._ Let’s figure out what the docker machine ip address is. While you are still in the Docker terminal, enter the following command: `$ docker-machine ip`. \n\nWe will now need to change the Sencha URLs. You could hardcode this to the Docker machine ip, or you could let JavaScript detect the hostname, you are currently using. (Remember, our Node server is on the same host as our Sencha app, it just has a different port.) The live URL in the **client/util/Constants.js** needs to be changed to:\n\n``` JavaScript\n'LIVE_URL': window.location.protocol + \"//\" + window.location.host + ':9000',\n```\n\nYou will need to build the Sencha app, before moving on with Docker. We will copy the Sencha build directory over to our container, and this one needs to be finalized, concatenated and minimized, to leverage performance while serving the page. (Manually copying builds over to folders can be automated too, btw. Take a look in one of my previous posts: [https://www.leeboonstra.com/developer/how-to-modify-sencha-builds/](https://www.leeboonstra.com/developer/how-to-modify-sencha-builds/)) Navigate to the **dockerextnode/client** folder: `$ sencha app build classic $ sencha app build modern`. \n\nWe’re going to run our MongoDB database and our Node.js back-end on separate containers as well. We can use official images for this. Node.js has an official Docker image: [https://hub.docker.com/_/node/](https://hub.docker.com/_/node/) And also MongoDB has its own Docker image: [https://hub.docker.com/_/mongo/](https://hub.docker.com/_/mongo/) The Node.js image, we will need to configure, because we need to copy over our own back-end JavaScript code. Therefore create one extra **Dockerfile** which we create in the **server** folder. The contents will look like this: **server/Dockerfile:** [https://github.com/savelee/docker-node-server/blob/master/Dockerfile](https://github.com/savelee/docker-node-server/blob/master/Dockerfile) https://gist.github.com/savelee/6b0d44e03f30c5790c24b3ecf3a9ead6 Once we are done with that, we can create our Docker composition, in the root of our **dockerextnode** folder: https://gist.github.com/savelee/295b81b78d57de6e4fae13380ccf54b7\n\nBuild with: `$ docker-compose up --build`. \nAfter building the composition, you can quickly boot up all the containers in once with: `$ docker-compose up`. \n\n**Note:** By the way, to build and run this image on its own, using these commands: `$ docker build -t nodeserver . $ docker run -d --name dockerextnodeserver -p 9000:9000 nodeserver`. \n\nYou can test it in your browser by entering the ip address plus /users: [http://192.168.99.100:9000/users](http://192.168.99.100:9000/users) Now you can visit the application in your browser. You will need to figure out what the ip address is. Remember: `$ docker machine ip`. \n\nFor me it gives back this ip address: [http://192.168.99.100/](http://192.168.99.100/) You will need to create the first login credentials. Open **Postman** or use CURL: \n\n``` bash\n$ curl -H \"Content-Type: application/json\" -X POST -d '{ \"username\": \"myusername\", \"password\": \"mypassword\" }' http://192.168.99.100:9000/register\n``` \n\n**For Postman:** - Choose the method: `POST` - With the URL: `http://192.168.99.100:9000/register` - Select the body tab - create 2 `x-www-form-urlencoded fields`: `username` & `password`, also specify the values that belong to these fields. Now you can test your application! Woops. There’s a problem with this code. The Node.js server can’t connect to my MongoDB! This is because it’s trying to connect to Mongo database on localhost, but our Mongo database isn’t on local machine. You could hardcode the container IP ofcourse, in your Node.js script, or you can use environment variables, which are automatiaclly added by Docker, when it links the container: In **server/libs/users/index.js**, change the `mongoose.connect` line to: `mongoose.connect('mongodb://'+settings.mongoAddress+':'+settings.mongoPort+'/'+settings.dbName);` \n\nOpen **server/config/local_settings.js** and change it to the below code, so it contains the environment variables: \n\n``` JavaScript \nmodule.exports = { \"secret\": \"mysecret\", \"mongoAddress\": process.env.MONGO_PORT_27017_TCP_ADDR || 'localhost', \"mongoPort\": process.env.MONGO_PORT_27017_TCP_PORT || 27017, \"dbName\": 'dockerextnode' } \n``` \n\n![compose](/images/compose-500x494.png)\n\nThat's awesome, you've now learned how to setup multiple Docker containers and link them together. In our next tutorial, we will look into the distribution of containers. \n\n## Read the next part \n\n[Part 8](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8/)\n\n*   [Quick link to Part 1.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1)\n*   [Quick link to Part 2.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2)\n*   [Quick link to Part 3.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3)\n*   [Quick link to Part 4.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4)\n*   [Quick link to Part 5.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5)\n*   [Quick link to Part 6.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6)\n*   [Quick link to Part 7.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7)\n*   [Quick link to Part 8.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8)","source":"_posts/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7.md","raw":"---\ntitle: >-\n  Tutorial: Full-stack JavaScript for the Enterprise Getting started with: Ext\n  JS, Node.js, Express, MongoDB and Docker. (7)\ntags:\n  - Docker\n  - Node.js\n  - MongoDB\n  - Ext JS\ncategories:\n  - Containers\ndate: 2016-08-22 16:30:10\n---\n\n_This is part VII of the tutorial, and covers: Docker Compose_ \n\n<!--more-->\n\n# Docker Compose: \n\nLinking containers Docker Compose is a tool for defining and running multi-container Docker applications. **Docker** is a great tool, but to really take full advantage of its potential it's best if each component of your application runs in its own container. For complex applications with a lot of components, orchestrating all the containers to start up and shut down together (not to mention talk to each other) can quickly become confusing. The Docker community came up with a popular solution called **Fig**, which allowed you to use a single **YAML** file to orchestrate all your Docker containers and configurations. This became so popular that the Docker team eventually decided to make their own version based on the Fig source. They called it: **Docker Compose**. In short, it makes dealing with the orchestration processes of Docker containers (such as starting up, shutting down, and setting up intra-container linking and volumes) really easy. So, with Docker Compose you can spin off various Docker images, and link it to each other. That’s great, because in case you ever decide to get rid of the Node.js back-end, and instead like to make use of something else; let’s say Python with Django; you would just link to another images. (For example: here's the same API back-end service, but build in Python with Django/Django Rest Framework: [https://github.com/savelee/docker-django-server](https://github.com/savelee/docker-django-server)) You will use a Compose file (**docker-compose.yml**) to configure your application’s services. Then, using a single command, you create and start all the services from your configuration. For more information, see: [https://docs.docker.com/compose/overview/](https://docs.docker.com/compose/overview/) _Remember, how we wrote in our client Sencha app, URLs to the Node.js back-end? We hardcoded it to the localhost URL. Now this won’t work. When the container is running, it won’t know localhost, only it’s own ip address._ Let’s figure out what the docker machine ip address is. While you are still in the Docker terminal, enter the following command: `$ docker-machine ip`. \n\nWe will now need to change the Sencha URLs. You could hardcode this to the Docker machine ip, or you could let JavaScript detect the hostname, you are currently using. (Remember, our Node server is on the same host as our Sencha app, it just has a different port.) The live URL in the **client/util/Constants.js** needs to be changed to:\n\n``` JavaScript\n'LIVE_URL': window.location.protocol + \"//\" + window.location.host + ':9000',\n```\n\nYou will need to build the Sencha app, before moving on with Docker. We will copy the Sencha build directory over to our container, and this one needs to be finalized, concatenated and minimized, to leverage performance while serving the page. (Manually copying builds over to folders can be automated too, btw. Take a look in one of my previous posts: [https://www.leeboonstra.com/developer/how-to-modify-sencha-builds/](https://www.leeboonstra.com/developer/how-to-modify-sencha-builds/)) Navigate to the **dockerextnode/client** folder: `$ sencha app build classic $ sencha app build modern`. \n\nWe’re going to run our MongoDB database and our Node.js back-end on separate containers as well. We can use official images for this. Node.js has an official Docker image: [https://hub.docker.com/_/node/](https://hub.docker.com/_/node/) And also MongoDB has its own Docker image: [https://hub.docker.com/_/mongo/](https://hub.docker.com/_/mongo/) The Node.js image, we will need to configure, because we need to copy over our own back-end JavaScript code. Therefore create one extra **Dockerfile** which we create in the **server** folder. The contents will look like this: **server/Dockerfile:** [https://github.com/savelee/docker-node-server/blob/master/Dockerfile](https://github.com/savelee/docker-node-server/blob/master/Dockerfile) https://gist.github.com/savelee/6b0d44e03f30c5790c24b3ecf3a9ead6 Once we are done with that, we can create our Docker composition, in the root of our **dockerextnode** folder: https://gist.github.com/savelee/295b81b78d57de6e4fae13380ccf54b7\n\nBuild with: `$ docker-compose up --build`. \nAfter building the composition, you can quickly boot up all the containers in once with: `$ docker-compose up`. \n\n**Note:** By the way, to build and run this image on its own, using these commands: `$ docker build -t nodeserver . $ docker run -d --name dockerextnodeserver -p 9000:9000 nodeserver`. \n\nYou can test it in your browser by entering the ip address plus /users: [http://192.168.99.100:9000/users](http://192.168.99.100:9000/users) Now you can visit the application in your browser. You will need to figure out what the ip address is. Remember: `$ docker machine ip`. \n\nFor me it gives back this ip address: [http://192.168.99.100/](http://192.168.99.100/) You will need to create the first login credentials. Open **Postman** or use CURL: \n\n``` bash\n$ curl -H \"Content-Type: application/json\" -X POST -d '{ \"username\": \"myusername\", \"password\": \"mypassword\" }' http://192.168.99.100:9000/register\n``` \n\n**For Postman:** - Choose the method: `POST` - With the URL: `http://192.168.99.100:9000/register` - Select the body tab - create 2 `x-www-form-urlencoded fields`: `username` & `password`, also specify the values that belong to these fields. Now you can test your application! Woops. There’s a problem with this code. The Node.js server can’t connect to my MongoDB! This is because it’s trying to connect to Mongo database on localhost, but our Mongo database isn’t on local machine. You could hardcode the container IP ofcourse, in your Node.js script, or you can use environment variables, which are automatiaclly added by Docker, when it links the container: In **server/libs/users/index.js**, change the `mongoose.connect` line to: `mongoose.connect('mongodb://'+settings.mongoAddress+':'+settings.mongoPort+'/'+settings.dbName);` \n\nOpen **server/config/local_settings.js** and change it to the below code, so it contains the environment variables: \n\n``` JavaScript \nmodule.exports = { \"secret\": \"mysecret\", \"mongoAddress\": process.env.MONGO_PORT_27017_TCP_ADDR || 'localhost', \"mongoPort\": process.env.MONGO_PORT_27017_TCP_PORT || 27017, \"dbName\": 'dockerextnode' } \n``` \n\n![compose](/images/compose-500x494.png)\n\nThat's awesome, you've now learned how to setup multiple Docker containers and link them together. In our next tutorial, we will look into the distribution of containers. \n\n## Read the next part \n\n[Part 8](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8/)\n\n*   [Quick link to Part 1.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1)\n*   [Quick link to Part 2.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2)\n*   [Quick link to Part 3.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3)\n*   [Quick link to Part 4.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4)\n*   [Quick link to Part 5.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5)\n*   [Quick link to Part 6.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6)\n*   [Quick link to Part 7.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7)\n*   [Quick link to Part 8.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8)","slug":"tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7","published":1,"updated":"2018-11-30T13:34:52.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncqv009qkif5veghwjk1","content":"<p><em>This is part VII of the tutorial, and covers: Docker Compose</em></p>\n<a id=\"more\"></a>\n<h1 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose:\"></a>Docker\n  Compose:</h1>\n<p>Linking containers Docker Compose is a tool for defining and running\n  multi-container Docker applications. <strong>Docker</strong> is a great tool,\n  but to really take full advantage of its potential it’s best if each\n  component of your application runs in its own container. For complex\n  applications with a lot of components, orchestrating all the containers to\n  start up and shut down together (not to mention talk to each other) can\n  quickly become confusing. The Docker community came up with a popular\n  solution called <strong>Fig</strong>, which allowed you to use a single\n  <strong>YAML</strong> file to orchestrate all your Docker containers and\n  configurations. This became so popular that the Docker team eventually\n  decided to make their own version based on the Fig source. They called it:\n  <strong>Docker Compose</strong>. In short, it makes dealing with the\n  orchestration processes of Docker containers (such as starting up, shutting\n  down, and setting up intra-container linking and volumes) really easy. So,\n  with Docker Compose you can spin off various Docker images, and link it to\n  each other. That’s great, because in case you ever decide to get rid of the\n  Node.js back-end, and instead like to make use of something else; let’s say\n  Python with Django; you would just link to another images. (For example:\n  here’s the same API back-end service, but build in Python with Django/Django\n  Rest Framework: <a href=\"https://github.com/savelee/docker-django-server\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-django-server</a>)\n  You will use a Compose file (<strong>docker-compose.yml</strong>) to\n  configure your application’s services. Then, using a single command, you\n  create and start all the services from your configuration. For more\n  information, see: <a href=\"https://docs.docker.com/compose/overview/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/compose/overview/</a>\n  <em>Remember, how we wrote in our client Sencha app, URLs to the Node.js\n    back-end? We hardcoded it to the localhost URL. Now this won’t work. When\n    the container is running, it won’t know localhost, only it’s own ip\n    address.</em> Let’s figure out what the docker machine ip address is. While\n  you are still in the Docker terminal, enter the following command: <code>$\n    docker-machine ip</code>.</p>\n<p>We will now need to change the Sencha URLs. You could hardcode this to the\n  Docker machine ip, or you could let JavaScript detect the hostname, you are\n  currently using. (Remember, our Node server is on the same host as our Sencha\n  app, it just has a different port.) The live URL in the <strong>client/util/Constants.js</strong>\n  needs to be changed to:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"string\">'LIVE_URL'</span>: <span class=\"built_in\">window</span>.location.protocol + <span class=\"string\">\"//\"</span> + <span class=\"built_in\">window</span>.location.host + <span class=\"string\">':9000'</span>,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>You will need to build the Sencha app, before moving on with Docker. We will\n  copy the Sencha build directory over to our container, and this one needs to\n  be finalized, concatenated and minimized, to leverage performance while\n  serving the page. (Manually copying builds over to folders can be automated\n  too, btw. Take a look in one of my previous posts: <a href=\"https://www.leeboonstra.com/developer/how-to-modify-sencha-builds/\" target=\"_blank\" rel=\"noopener\">https://www.leeboonstra.com/developer/how-to-modify-sencha-builds/</a>)\n  Navigate to the <strong>dockerextnode/client</strong> folder: <code>$ sencha\n    app build classic $ sencha app build modern</code>.</p>\n<p>We’re going to run our MongoDB database and our Node.js back-end on separate\n  containers as well. We can use official images for this. Node.js has an\n  official Docker image: <a href=\"https://hub.docker.com/_/node/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/_/node/</a>\n  And also MongoDB has its own Docker image: <a href=\"https://hub.docker.com/_/mongo/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/_/mongo/</a>\n  The Node.js image, we will need to configure, because we need to copy over\n  our own back-end JavaScript code. Therefore create one extra <strong>Dockerfile</strong>\n  which we create in the <strong>server</strong> folder. The contents will look\n  like this: <strong>server/Dockerfile:</strong> <a href=\"https://github.com/savelee/docker-node-server/blob/master/Dockerfile\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-node-server/blob/master/Dockerfile</a>\n  <a href=\"https://gist.github.com/savelee/6b0d44e03f30c5790c24b3ecf3a9ead6\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/6b0d44e03f30c5790c24b3ecf3a9ead6</a>\n  Once we are done with that, we can create our Docker composition, in the root\n  of our <strong>dockerextnode</strong> folder: <a href=\"https://gist.github.com/savelee/295b81b78d57de6e4fae13380ccf54b7\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/295b81b78d57de6e4fae13380ccf54b7</a></p>\n<p>Build with: <code>$ docker-compose up --build</code>. After building the\n  composition, you can quickly boot up all the containers in once with: <code>$\n    docker-compose up</code>.</p>\n<p><strong>Note:</strong> By the way, to build and run this image on its own,\n  using these commands: <code>$ docker build -t nodeserver . $ docker run -d\n    --name dockerextnodeserver -p 9000:9000 nodeserver</code>.</p>\n<p>You can test it in your browser by entering the ip address plus /users: <a href=\"http://192.168.99.100:9000/users\" target=\"_blank\" rel=\"noopener\">http://192.168.99.100:9000/users</a>\n  Now you can visit the application in your browser. You will need to figure\n  out what the ip address is. Remember: <code>$ docker machine ip</code>.</p>\n<p>For me it gives back this ip address: <a href=\"http://192.168.99.100/\" target=\"_blank\" rel=\"noopener\">http://192.168.99.100/</a>\n  You will need to create the first login credentials. Open <strong>Postman</strong>\n  or use CURL:</p>\n<pre><code class=\"bash\">$ curl -H <span class=\"string\">\"Content-Type: application/json\"</span> -X POST -d <span class=\"string\">'{ \"username\": \"myusername\", \"password\": \"mypassword\" }'</span> http://192.168.99.100:9000/register\n</code></pre>\n<p><strong>For Postman:</strong> - Choose the method: <code>POST</code> - With\n  the URL: <code>http://192.168.99.100:9000/register</code> - Select the body\n  tab - create 2 <code>x-www-form-urlencoded fields</code>: <code>username</code>\n  &amp; <code>password</code>, also specify the values that belong to these\n  fields. Now you can test your application! Woops. There’s a problem with this\n  code. The Node.js server can’t connect to my MongoDB! This is because it’s\n  trying to connect to Mongo database on localhost, but our Mongo database\n  isn’t on local machine. You could hardcode the container IP ofcourse, in your\n  Node.js script, or you can use environment variables, which are automatiaclly\n  added by Docker, when it links the container: In <strong>server/libs/users/index.js</strong>,\n  change the <code>mongoose.connect</code> line to: <code>mongoose.connect(&#39;mongodb://&#39;+settings.mongoAddress+&#39;:&#39;+settings.mongoPort+&#39;/&#39;+settings.dbName);</code></p>\n<p>Open <strong>server/config/local_settings.js</strong> and change it to the\n  below code, so it contains the environment variables:</p>\n<pre><code class=\"JavaScript\"><span class=\"built_in\">module</span>.exports = { <span class=\"string\">\"secret\"</span>: <span class=\"string\">\"mysecret\"</span>, <span class=\"string\">\"mongoAddress\"</span>: process.env.MONGO_PORT_27017_TCP_ADDR || <span class=\"string\">'localhost'</span>, <span class=\"string\">\"mongoPort\"</span>: process.env.MONGO_PORT_27017_TCP_PORT || <span class=\"number\">27017</span>, <span class=\"string\">\"dbName\"</span>: <span class=\"string\">'dockerextnode'</span> } \n</code></pre>\n<p><img src=\"/images/compose-500x494.png\" alt=\"compose\"></p>\n<p>That’s awesome, you’ve now learned how to setup multiple Docker containers\n  and link them together. In our next tutorial, we will look into the\n  distribution of containers.</p>\n<h2 id=\"Read-the-next-part\"><a href=\"#Read-the-next-part\" class=\"headerlink\" title=\"Read the next part\"></a>Read\n  the next part</h2>\n<p><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8/\">Part\n    8</a></p>\n<ul>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1\">Quick\n      link to Part 1.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2\">Quick\n      link to Part 2.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3\">Quick\n      link to Part 3.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4\">Quick\n      link to Part 4.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5\">Quick\n      link to Part 5.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6\">Quick\n      link to Part 6.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7\">Quick\n      link to Part 7.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8\">Quick\n      link to Part 8.</a></li>\n</ul>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p><em>This is part VII of the tutorial, and covers: Docker Compose</em></p>","more":"<h1 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose:\"></a>Docker\n  Compose:</h1>\n<p>Linking containers Docker Compose is a tool for defining and running\n  multi-container Docker applications. <strong>Docker</strong> is a great tool,\n  but to really take full advantage of its potential it’s best if each\n  component of your application runs in its own container. For complex\n  applications with a lot of components, orchestrating all the containers to\n  start up and shut down together (not to mention talk to each other) can\n  quickly become confusing. The Docker community came up with a popular\n  solution called <strong>Fig</strong>, which allowed you to use a single\n  <strong>YAML</strong> file to orchestrate all your Docker containers and\n  configurations. This became so popular that the Docker team eventually\n  decided to make their own version based on the Fig source. They called it:\n  <strong>Docker Compose</strong>. In short, it makes dealing with the\n  orchestration processes of Docker containers (such as starting up, shutting\n  down, and setting up intra-container linking and volumes) really easy. So,\n  with Docker Compose you can spin off various Docker images, and link it to\n  each other. That’s great, because in case you ever decide to get rid of the\n  Node.js back-end, and instead like to make use of something else; let’s say\n  Python with Django; you would just link to another images. (For example:\n  here’s the same API back-end service, but build in Python with Django/Django\n  Rest Framework: <a href=\"https://github.com/savelee/docker-django-server\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-django-server</a>)\n  You will use a Compose file (<strong>docker-compose.yml</strong>) to\n  configure your application’s services. Then, using a single command, you\n  create and start all the services from your configuration. For more\n  information, see: <a href=\"https://docs.docker.com/compose/overview/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/compose/overview/</a>\n  <em>Remember, how we wrote in our client Sencha app, URLs to the Node.js\n    back-end? We hardcoded it to the localhost URL. Now this won’t work. When\n    the container is running, it won’t know localhost, only it’s own ip\n    address.</em> Let’s figure out what the docker machine ip address is. While\n  you are still in the Docker terminal, enter the following command: <code>$\n    docker-machine ip</code>.</p>\n<p>We will now need to change the Sencha URLs. You could hardcode this to the\n  Docker machine ip, or you could let JavaScript detect the hostname, you are\n  currently using. (Remember, our Node server is on the same host as our Sencha\n  app, it just has a different port.) The live URL in the <strong>client/util/Constants.js</strong>\n  needs to be changed to:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"string\">'LIVE_URL'</span>: <span class=\"built_in\">window</span>.location.protocol + <span class=\"string\">\"//\"</span> + <span class=\"built_in\">window</span>.location.host + <span class=\"string\">':9000'</span>,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>You will need to build the Sencha app, before moving on with Docker. We will\n  copy the Sencha build directory over to our container, and this one needs to\n  be finalized, concatenated and minimized, to leverage performance while\n  serving the page. (Manually copying builds over to folders can be automated\n  too, btw. Take a look in one of my previous posts: <a href=\"https://www.leeboonstra.com/developer/how-to-modify-sencha-builds/\" target=\"_blank\" rel=\"noopener\">https://www.leeboonstra.com/developer/how-to-modify-sencha-builds/</a>)\n  Navigate to the <strong>dockerextnode/client</strong> folder: <code>$ sencha\n    app build classic $ sencha app build modern</code>.</p>\n<p>We’re going to run our MongoDB database and our Node.js back-end on separate\n  containers as well. We can use official images for this. Node.js has an\n  official Docker image: <a href=\"https://hub.docker.com/_/node/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/_/node/</a>\n  And also MongoDB has its own Docker image: <a href=\"https://hub.docker.com/_/mongo/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/_/mongo/</a>\n  The Node.js image, we will need to configure, because we need to copy over\n  our own back-end JavaScript code. Therefore create one extra <strong>Dockerfile</strong>\n  which we create in the <strong>server</strong> folder. The contents will look\n  like this: <strong>server/Dockerfile:</strong> <a href=\"https://github.com/savelee/docker-node-server/blob/master/Dockerfile\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-node-server/blob/master/Dockerfile</a>\n  <a href=\"https://gist.github.com/savelee/6b0d44e03f30c5790c24b3ecf3a9ead6\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/6b0d44e03f30c5790c24b3ecf3a9ead6</a>\n  Once we are done with that, we can create our Docker composition, in the root\n  of our <strong>dockerextnode</strong> folder: <a href=\"https://gist.github.com/savelee/295b81b78d57de6e4fae13380ccf54b7\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/295b81b78d57de6e4fae13380ccf54b7</a></p>\n<p>Build with: <code>$ docker-compose up --build</code>. After building the\n  composition, you can quickly boot up all the containers in once with: <code>$\n    docker-compose up</code>.</p>\n<p><strong>Note:</strong> By the way, to build and run this image on its own,\n  using these commands: <code>$ docker build -t nodeserver . $ docker run -d\n    --name dockerextnodeserver -p 9000:9000 nodeserver</code>.</p>\n<p>You can test it in your browser by entering the ip address plus /users: <a href=\"http://192.168.99.100:9000/users\" target=\"_blank\" rel=\"noopener\">http://192.168.99.100:9000/users</a>\n  Now you can visit the application in your browser. You will need to figure\n  out what the ip address is. Remember: <code>$ docker machine ip</code>.</p>\n<p>For me it gives back this ip address: <a href=\"http://192.168.99.100/\" target=\"_blank\" rel=\"noopener\">http://192.168.99.100/</a>\n  You will need to create the first login credentials. Open <strong>Postman</strong>\n  or use CURL:</p>\n<pre><code class=\"bash\">$ curl -H <span class=\"string\">\"Content-Type: application/json\"</span> -X POST -d <span class=\"string\">'{ \"username\": \"myusername\", \"password\": \"mypassword\" }'</span> http://192.168.99.100:9000/register\n</code></pre>\n<p><strong>For Postman:</strong> - Choose the method: <code>POST</code> - With\n  the URL: <code>http://192.168.99.100:9000/register</code> - Select the body\n  tab - create 2 <code>x-www-form-urlencoded fields</code>: <code>username</code>\n  &amp; <code>password</code>, also specify the values that belong to these\n  fields. Now you can test your application! Woops. There’s a problem with this\n  code. The Node.js server can’t connect to my MongoDB! This is because it’s\n  trying to connect to Mongo database on localhost, but our Mongo database\n  isn’t on local machine. You could hardcode the container IP ofcourse, in your\n  Node.js script, or you can use environment variables, which are automatiaclly\n  added by Docker, when it links the container: In <strong>server/libs/users/index.js</strong>,\n  change the <code>mongoose.connect</code> line to: <code>mongoose.connect(&#39;mongodb://&#39;+settings.mongoAddress+&#39;:&#39;+settings.mongoPort+&#39;/&#39;+settings.dbName);</code></p>\n<p>Open <strong>server/config/local_settings.js</strong> and change it to the\n  below code, so it contains the environment variables:</p>\n<pre><code class=\"JavaScript\"><span class=\"built_in\">module</span>.exports = { <span class=\"string\">\"secret\"</span>: <span class=\"string\">\"mysecret\"</span>, <span class=\"string\">\"mongoAddress\"</span>: process.env.MONGO_PORT_27017_TCP_ADDR || <span class=\"string\">'localhost'</span>, <span class=\"string\">\"mongoPort\"</span>: process.env.MONGO_PORT_27017_TCP_PORT || <span class=\"number\">27017</span>, <span class=\"string\">\"dbName\"</span>: <span class=\"string\">'dockerextnode'</span> } \n</code></pre>\n<p><img src=\"/images/compose-500x494.png\" alt=\"compose\"></p>\n<p>That’s awesome, you’ve now learned how to setup multiple Docker containers\n  and link them together. In our next tutorial, we will look into the\n  distribution of containers.</p>\n<h2 id=\"Read-the-next-part\"><a href=\"#Read-the-next-part\" class=\"headerlink\" title=\"Read the next part\"></a>Read\n  the next part</h2>\n<p><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8/\">Part\n    8</a></p>\n<ul>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1\">Quick\n      link to Part 1.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2\">Quick\n      link to Part 2.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3\">Quick\n      link to Part 3.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4\">Quick\n      link to Part 4.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5\">Quick\n      link to Part 5.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6\">Quick\n      link to Part 6.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7\">Quick\n      link to Part 7.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8\">Quick\n      link to Part 8.</a></li>\n</ul>"},{"title":"Tutorial: Full-stack JavaScript for the Enterprise Getting started with: Ext JS, Node.js, Express, MongoDB and Docker. (8)","date":"2016-08-23T12:00:30.000Z","_content":"\n_This is the last part of this tutorial series, it will cover Github and the Docker Hub._ \n\n<!--more-->\n\n# Github Navigate to github, to add a new repository: [https://github.com/new](https://github.com/new) Create two git repositories:\n\n*   docker-ext-client\n*   docker-node-server\nAdd a .gitignore file to the following folders:*   dockerextnode/client/\n*   dockerextnode/server/dockerextdjango/\n\nIt should contain the following ignore rules: [https://gist.github.com/savelee/970c0d72195ed5b9ca7c5ca533d0a4de](https://gist.github.com/savelee/970c0d72195ed5b9ca7c5ca533d0a4de) Type for both folders, the following commands on the command-line: ``` $ git init $ git status $ git add . $ git commit -m “First commit” $ git remote add origin https://github.com/myrepo/myrepo.git like: git remote add origin https://github.com/savelee/docker-ext-client.git $ git push -u origin master --force ``` ![github](http://146.148.113.87/wp-content/uploads/2016/08/github-500x400.png) \n\n# Docker Hub: Distribution of containers \n\nNow that you’re reading this guide, you might be interested, or maybe you just want to see these examples working live. Well with Docker, you can very run these container images. In case you have the Docker Toolbox installed, this should be very easy. You just need to have access to my containers. Enter Docker Hub! **Docker Hub** is like Github but for Docker images. The Docker Hub is a public registry maintained by Docker, Inc. It contains images you can download and use to build containers. It also provides authentication, work group structure, workflow tools like webhooks and build triggers, and privacy tools like private repositories for storing images you don’t want to share publicly. Let me first show you how you can add your images to the Docker Hub, afterwards I will show you how to checkout these images. First, we are going to add an **Automated build repository** in Docker Hub. For that, we first need to push the code to Github. If you followed this guide, you should have done this by now. \n\n![DockerHub](/images/DockerHub-500x347.png) \n\n# Adding images to Docker Hub \n\nWe will need to have a working images, which you will have when you have done the previous chapters. Next, we will link our Github account with Docker Hub to add an automated build repo. You will need a Docker Hub account: [https://hub.docker.com/login/](https://hub.docker.com/login/) We will automate the Docker builds, by linking Github to Docker Hub, so everything I push to Git, it will automatically push to Docker as well. We can achieve this with **webhooks**. Go to: [https://hub.docker.com/account/authorized-services/](https://hub.docker.com/account/authorized-services/) You can choose to link to Github or Bitbucket. See: [https://docs.docker.com/docker-hub/github/](https://docs.docker.com/docker-hub/github/) I’m using Github for this tutorial. Choose between; **public & private** or **limited access**. The “Public and Private” option is the easiest to use, as it grants the Docker Hub full access to all of your repositories. GitHub also allows you to grant access to repositories belonging to your GitHub organizations. If you choose “Limited Access”, Docker Hub only gets permission to access your public data and public repositories. I choose *public & private*, and once I am done with that, it forwards me to a Github page. (I’m logged in on Github), which asks me to grant permission, so Docker Hub can access the Github repositories: \n\n![authorize](/images/authorize-500x345.png) \n\nOnce you click **Authorize application**, you will see the DockerHub application in the Github overview: [https://github.com/settings/applications](https://github.com/settings/applications) Now go back to your DockerHub dashboard, and click on the **Create > Create Automated Build** from the dropdown, which you will see next to your account name, in the top right: \n\n![automatedbuilds1](/images/automatedbuilds1-500x280.png)\n\nSelect **Create Auto-Build Github**, select your Github account, and then select the repository: **docker-ext-client**, enter a description of max 100 characters and **save**. Redo these steps as well for **docker-node-server**. \n\n![automatedbuilds2](/images/automatedbuilds2-500x203.png) Once the Automated Build is configured it will automatically trigger a build and, in a few minutes, you should see your new Automated Build on the [https://hub.docker.com/](Docker Hub) Registry. It will stay in sync with your GitHub and Bitbucket repository until you deactivate the Automated Build. Now go to **Build Settings**. You should see this screen: \n\n![automatedbuilds3](/images/automatedbuilds3-500x143.png)\n\nYou could click the **Trigger** button, to trigger a new build. Automated Builds can also be triggered via a URL on Docker Hub. This allows you to rebuild an Automated build image on demand. Click the **Active Triggers** button. Creating an automated build repo means that every time you make a push to your Github repo, a build will be triggered in Docker Hub to build your new image. Make sure, when committing the **docker-ext-client** app to Git, that you will check in the production **build/production/Client** folder, as this folder will be used by the Docker images, not the folder with your local Sencha (class) files. # Running images from Docker Hub Now that we know, how we can add Docker images to the Docker Hub, let's checkout some images. First download the image from the Docker Hub: `$ docker pull savelee/docker-ext-client` Then run the new Docker image `--name` = give your container a name `--p` = bind a port to the port which is in the Dockerfile `-d` = the image name you like to run For example: `$ docker run --name extjsapp -p 80:80 -d savelee/docker-ext-client` \n\nHere’s the code for running the Docker container: \n\n``` bash \n$ docker pull savelee/docker-node-server \n$ docker run --name nodeapp -p 9000:9000 -d savelee/docker-node-server \n``` \n\n# Conclusion \n\nThe last part of the tutorial focussed on publishing Docker images to the Docker Hub. If you followed all the tutorials of this 8 series, you've learned the following:\n\n*   Full stack JavaScript for the enterprise with JavaScript on the front-end (with Ext JS 6).\n*   Node.js on the back-end\n*   A NoSQL database with MongoDB and Mongoose\n*   About Docker, and how to create containers\n*   How to link Docker containers with Docker Compose\n*   How to publish Docker images with Github and Docker Hub\n\nThe best part of this all, is that you can easily swap one technology for another. For example, I could link new Docker images, with Ext JS 6 on a Python/Django with MySQL environment, or an Angular 2 app on Node.js with CouchDB... I hope you like it, and that this might come in handy. Cheers!\n\n*   [Quick link to Part 1.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1)\n*   [Quick link to Part 2.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2)\n*   [Quick link to Part 3.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3)\n*   [Quick link to Part 4.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4)\n*   [Quick link to Part 5.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5)\n*   [Quick link to Part 6.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6)\n*   [Quick link to Part 7.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7)\n*   [Quick link to Part 8.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8)","source":"_posts/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8.md","raw":"---\ntitle: >-\n  Tutorial: Full-stack JavaScript for the Enterprise Getting started with: Ext\n  JS, Node.js, Express, MongoDB and Docker. (8)\ntags:\n  - Docker\n  - Node.js\n  - MongoDB\n  - Ext JS\ncategories:\n  - Containers\ndate: 2016-08-23 14:00:30\n---\n\n_This is the last part of this tutorial series, it will cover Github and the Docker Hub._ \n\n<!--more-->\n\n# Github Navigate to github, to add a new repository: [https://github.com/new](https://github.com/new) Create two git repositories:\n\n*   docker-ext-client\n*   docker-node-server\nAdd a .gitignore file to the following folders:*   dockerextnode/client/\n*   dockerextnode/server/dockerextdjango/\n\nIt should contain the following ignore rules: [https://gist.github.com/savelee/970c0d72195ed5b9ca7c5ca533d0a4de](https://gist.github.com/savelee/970c0d72195ed5b9ca7c5ca533d0a4de) Type for both folders, the following commands on the command-line: ``` $ git init $ git status $ git add . $ git commit -m “First commit” $ git remote add origin https://github.com/myrepo/myrepo.git like: git remote add origin https://github.com/savelee/docker-ext-client.git $ git push -u origin master --force ``` ![github](http://146.148.113.87/wp-content/uploads/2016/08/github-500x400.png) \n\n# Docker Hub: Distribution of containers \n\nNow that you’re reading this guide, you might be interested, or maybe you just want to see these examples working live. Well with Docker, you can very run these container images. In case you have the Docker Toolbox installed, this should be very easy. You just need to have access to my containers. Enter Docker Hub! **Docker Hub** is like Github but for Docker images. The Docker Hub is a public registry maintained by Docker, Inc. It contains images you can download and use to build containers. It also provides authentication, work group structure, workflow tools like webhooks and build triggers, and privacy tools like private repositories for storing images you don’t want to share publicly. Let me first show you how you can add your images to the Docker Hub, afterwards I will show you how to checkout these images. First, we are going to add an **Automated build repository** in Docker Hub. For that, we first need to push the code to Github. If you followed this guide, you should have done this by now. \n\n![DockerHub](/images/DockerHub-500x347.png) \n\n# Adding images to Docker Hub \n\nWe will need to have a working images, which you will have when you have done the previous chapters. Next, we will link our Github account with Docker Hub to add an automated build repo. You will need a Docker Hub account: [https://hub.docker.com/login/](https://hub.docker.com/login/) We will automate the Docker builds, by linking Github to Docker Hub, so everything I push to Git, it will automatically push to Docker as well. We can achieve this with **webhooks**. Go to: [https://hub.docker.com/account/authorized-services/](https://hub.docker.com/account/authorized-services/) You can choose to link to Github or Bitbucket. See: [https://docs.docker.com/docker-hub/github/](https://docs.docker.com/docker-hub/github/) I’m using Github for this tutorial. Choose between; **public & private** or **limited access**. The “Public and Private” option is the easiest to use, as it grants the Docker Hub full access to all of your repositories. GitHub also allows you to grant access to repositories belonging to your GitHub organizations. If you choose “Limited Access”, Docker Hub only gets permission to access your public data and public repositories. I choose *public & private*, and once I am done with that, it forwards me to a Github page. (I’m logged in on Github), which asks me to grant permission, so Docker Hub can access the Github repositories: \n\n![authorize](/images/authorize-500x345.png) \n\nOnce you click **Authorize application**, you will see the DockerHub application in the Github overview: [https://github.com/settings/applications](https://github.com/settings/applications) Now go back to your DockerHub dashboard, and click on the **Create > Create Automated Build** from the dropdown, which you will see next to your account name, in the top right: \n\n![automatedbuilds1](/images/automatedbuilds1-500x280.png)\n\nSelect **Create Auto-Build Github**, select your Github account, and then select the repository: **docker-ext-client**, enter a description of max 100 characters and **save**. Redo these steps as well for **docker-node-server**. \n\n![automatedbuilds2](/images/automatedbuilds2-500x203.png) Once the Automated Build is configured it will automatically trigger a build and, in a few minutes, you should see your new Automated Build on the [https://hub.docker.com/](Docker Hub) Registry. It will stay in sync with your GitHub and Bitbucket repository until you deactivate the Automated Build. Now go to **Build Settings**. You should see this screen: \n\n![automatedbuilds3](/images/automatedbuilds3-500x143.png)\n\nYou could click the **Trigger** button, to trigger a new build. Automated Builds can also be triggered via a URL on Docker Hub. This allows you to rebuild an Automated build image on demand. Click the **Active Triggers** button. Creating an automated build repo means that every time you make a push to your Github repo, a build will be triggered in Docker Hub to build your new image. Make sure, when committing the **docker-ext-client** app to Git, that you will check in the production **build/production/Client** folder, as this folder will be used by the Docker images, not the folder with your local Sencha (class) files. # Running images from Docker Hub Now that we know, how we can add Docker images to the Docker Hub, let's checkout some images. First download the image from the Docker Hub: `$ docker pull savelee/docker-ext-client` Then run the new Docker image `--name` = give your container a name `--p` = bind a port to the port which is in the Dockerfile `-d` = the image name you like to run For example: `$ docker run --name extjsapp -p 80:80 -d savelee/docker-ext-client` \n\nHere’s the code for running the Docker container: \n\n``` bash \n$ docker pull savelee/docker-node-server \n$ docker run --name nodeapp -p 9000:9000 -d savelee/docker-node-server \n``` \n\n# Conclusion \n\nThe last part of the tutorial focussed on publishing Docker images to the Docker Hub. If you followed all the tutorials of this 8 series, you've learned the following:\n\n*   Full stack JavaScript for the enterprise with JavaScript on the front-end (with Ext JS 6).\n*   Node.js on the back-end\n*   A NoSQL database with MongoDB and Mongoose\n*   About Docker, and how to create containers\n*   How to link Docker containers with Docker Compose\n*   How to publish Docker images with Github and Docker Hub\n\nThe best part of this all, is that you can easily swap one technology for another. For example, I could link new Docker images, with Ext JS 6 on a Python/Django with MySQL environment, or an Angular 2 app on Node.js with CouchDB... I hope you like it, and that this might come in handy. Cheers!\n\n*   [Quick link to Part 1.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1)\n*   [Quick link to Part 2.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2)\n*   [Quick link to Part 3.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3)\n*   [Quick link to Part 4.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4)\n*   [Quick link to Part 5.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5)\n*   [Quick link to Part 6.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6)\n*   [Quick link to Part 7.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7)\n*   [Quick link to Part 8.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8)","slug":"tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8","published":1,"updated":"2018-11-30T13:34:57.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncqx009rkif53rtvyogl","content":"<p><em>This is the last part of this tutorial series, it will cover Github and\n    the Docker Hub.</em></p>\n<a id=\"more\"></a>\n<h1 id=\"Github-Navigate-to-github-to-add-a-new-repository-https-github-com-new-Create-two-git-repositories\"><a href=\"#Github-Navigate-to-github-to-add-a-new-repository-https-github-com-new-Create-two-git-repositories\" class=\"headerlink\" title=\"Github Navigate to github, to add a new repository: https://github.com/new Create two git repositories:\"></a>Github\n  Navigate to github, to add a new repository: <a href=\"https://github.com/new\" target=\"_blank\" rel=\"noopener\">https://github.com/new</a>\n  Create two git repositories:</h1>\n<ul>\n  <li>docker-ext-client</li>\n  <li>docker-node-server Add a .gitignore file to the following folders:*\n    dockerextnode/client/</li>\n  <li>dockerextnode/server/dockerextdjango/</li>\n</ul>\n<p>It should contain the following ignore rules: <a href=\"https://gist.github.com/savelee/970c0d72195ed5b9ca7c5ca533d0a4de\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/970c0d72195ed5b9ca7c5ca533d0a4de</a>\n  Type for both folders, the following commands on the command-line: <code>$\n    git init $ git status $ git add . $ git commit -m “First commit” $ git\n    remote add origin https://github.com/myrepo/myrepo.git like: git remote add\n    origin https://github.com/savelee/docker-ext-client.git $ git push -u\n    origin master --force</code> <img src=\"http://146.148.113.87/wp-content/uploads/2016/08/github-500x400.png\" alt=\"github\"></p>\n<h1 id=\"Docker-Hub-Distribution-of-containers\"><a href=\"#Docker-Hub-Distribution-of-containers\" class=\"headerlink\" title=\"Docker Hub: Distribution of containers\"></a>Docker\n  Hub: Distribution of containers</h1>\n<p>Now that you’re reading this guide, you might be interested, or maybe you\n  just want to see these examples working live. Well with Docker, you can very\n  run these container images. In case you have the Docker Toolbox installed,\n  this should be very easy. You just need to have access to my containers.\n  Enter Docker Hub! <strong>Docker Hub</strong> is like Github but for Docker\n  images. The Docker Hub is a public registry maintained by Docker, Inc. It\n  contains images you can download and use to build containers. It also\n  provides authentication, work group structure, workflow tools like webhooks\n  and build triggers, and privacy tools like private repositories for storing\n  images you don’t want to share publicly. Let me first show you how you can\n  add your images to the Docker Hub, afterwards I will show you how to checkout\n  these images. First, we are going to add an <strong>Automated build\n    repository</strong> in Docker Hub. For that, we first need to push the code\n  to Github. If you followed this guide, you should have done this by now.</p>\n<p><img src=\"/images/DockerHub-500x347.png\" alt=\"DockerHub\"></p>\n<h1 id=\"Adding-images-to-Docker-Hub\"><a href=\"#Adding-images-to-Docker-Hub\" class=\"headerlink\" title=\"Adding images to Docker Hub\"></a>Adding\n  images to Docker Hub</h1>\n<p>We will need to have a working images, which you will have when you have\n  done the previous chapters. Next, we will link our Github account with Docker\n  Hub to add an automated build repo. You will need a Docker Hub account: <a href=\"https://hub.docker.com/login/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/login/</a>\n  We will automate the Docker builds, by linking Github to Docker Hub, so\n  everything I push to Git, it will automatically push to Docker as well. We\n  can achieve this with <strong>webhooks</strong>. Go to: <a href=\"https://hub.docker.com/account/authorized-services/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/account/authorized-services/</a>\n  You can choose to link to Github or Bitbucket. See: <a href=\"https://docs.docker.com/docker-hub/github/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/docker-hub/github/</a>\n  I’m using Github for this tutorial. Choose between; <strong>public &amp;\n    private</strong> or <strong>limited access</strong>. The “Public and\n  Private” option is the easiest to use, as it grants the Docker Hub full\n  access to all of your repositories. GitHub also allows you to grant access to\n  repositories belonging to your GitHub organizations. If you choose “Limited\n  Access”, Docker Hub only gets permission to access your public data and\n  public repositories. I choose <em>public &amp; private</em>, and once I am\n  done with that, it forwards me to a Github page. (I’m logged in on Github),\n  which asks me to grant permission, so Docker Hub can access the Github\n  repositories:</p>\n<p><img src=\"/images/authorize-500x345.png\" alt=\"authorize\"></p>\n<p>Once you click <strong>Authorize application</strong>, you will see the\n  DockerHub application in the Github overview: <a href=\"https://github.com/settings/applications\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/applications</a>\n  Now go back to your DockerHub dashboard, and click on the <strong>Create &gt;\n    Create Automated Build</strong> from the dropdown, which you will see next\n  to your account name, in the top right:</p>\n<p><img src=\"/images/automatedbuilds1-500x280.png\" alt=\"automatedbuilds1\"></p>\n<p>Select <strong>Create Auto-Build Github</strong>, select your Github\n  account, and then select the repository: <strong>docker-ext-client</strong>,\n  enter a description of max 100 characters and <strong>save</strong>. Redo\n  these steps as well for <strong>docker-node-server</strong>.</p>\n<p><img src=\"/images/automatedbuilds2-500x203.png\" alt=\"automatedbuilds2\"> Once\n  the Automated Build is configured it will automatically trigger a build and,\n  in a few minutes, you should see your new Automated Build on the <a href=\"Docker Hub\">https://hub.docker.com/</a>\n  Registry. It will stay in sync with your GitHub and Bitbucket repository\n  until you deactivate the Automated Build. Now go to <strong>Build Settings</strong>.\n  You should see this screen:</p>\n<p><img src=\"/images/automatedbuilds3-500x143.png\" alt=\"automatedbuilds3\"></p>\n<p>You could click the <strong>Trigger</strong> button, to trigger a new build.\n  Automated Builds can also be triggered via a URL on Docker Hub. This allows\n  you to rebuild an Automated build image on demand. Click the <strong>Active\n    Triggers</strong> button. Creating an automated build repo means that every\n  time you make a push to your Github repo, a build will be triggered in Docker\n  Hub to build your new image. Make sure, when committing the <strong>docker-ext-client</strong>\n  app to Git, that you will check in the production <strong>build/production/Client</strong>\n  folder, as this folder will be used by the Docker images, not the folder with\n  your local Sencha (class) files. # Running images from Docker Hub Now that we\n  know, how we can add Docker images to the Docker Hub, let’s checkout some\n  images. First download the image from the Docker Hub: <code>$ docker pull\n    savelee/docker-ext-client</code> Then run the new Docker image <code>--name</code>\n  = give your container a name <code>--p</code> = bind a port to the port which\n  is in the Dockerfile <code>-d</code> = the image name you like to run For\n  example: <code>$ docker run --name extjsapp -p 80:80 -d\n    savelee/docker-ext-client</code></p>\n<p>Here’s the code for running the Docker container:</p>\n<pre><code class=\"bash\">$ docker pull savelee/docker-node-server \n$ docker run --name nodeapp -p 9000:9000 -d savelee/docker-node-server \n</code></pre>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1>\n<p>The last part of the tutorial focussed on publishing Docker images to the\n  Docker Hub. If you followed all the tutorials of this 8 series, you’ve\n  learned the following:</p>\n<ul>\n  <li>Full stack JavaScript for the enterprise with JavaScript on the front-end\n    (with Ext JS 6).</li>\n  <li>Node.js on the back-end</li>\n  <li>A NoSQL database with MongoDB and Mongoose</li>\n  <li>About Docker, and how to create containers</li>\n  <li>How to link Docker containers with Docker Compose</li>\n  <li>How to publish Docker images with Github and Docker Hub</li>\n</ul>\n<p>The best part of this all, is that you can easily swap one technology for\n  another. For example, I could link new Docker images, with Ext JS 6 on a\n  Python/Django with MySQL environment, or an Angular 2 app on Node.js with\n  CouchDB… I hope you like it, and that this might come in handy. Cheers!</p>\n<ul>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1\">Quick\n      link to Part 1.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2\">Quick\n      link to Part 2.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3\">Quick\n      link to Part 3.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4\">Quick\n      link to Part 4.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5\">Quick\n      link to Part 5.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6\">Quick\n      link to Part 6.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7\">Quick\n      link to Part 7.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8\">Quick\n      link to Part 8.</a></li>\n</ul>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p><em>This is the last part of this tutorial series, it will cover Github and\n    the Docker Hub.</em></p>","more":"<h1 id=\"Github-Navigate-to-github-to-add-a-new-repository-https-github-com-new-Create-two-git-repositories\"><a href=\"#Github-Navigate-to-github-to-add-a-new-repository-https-github-com-new-Create-two-git-repositories\" class=\"headerlink\" title=\"Github Navigate to github, to add a new repository: https://github.com/new Create two git repositories:\"></a>Github\n  Navigate to github, to add a new repository: <a href=\"https://github.com/new\" target=\"_blank\" rel=\"noopener\">https://github.com/new</a>\n  Create two git repositories:</h1>\n<ul>\n  <li>docker-ext-client</li>\n  <li>docker-node-server Add a .gitignore file to the following folders:*\n    dockerextnode/client/</li>\n  <li>dockerextnode/server/dockerextdjango/</li>\n</ul>\n<p>It should contain the following ignore rules: <a href=\"https://gist.github.com/savelee/970c0d72195ed5b9ca7c5ca533d0a4de\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/970c0d72195ed5b9ca7c5ca533d0a4de</a>\n  Type for both folders, the following commands on the command-line: <code>$\n    git init $ git status $ git add . $ git commit -m “First commit” $ git\n    remote add origin https://github.com/myrepo/myrepo.git like: git remote add\n    origin https://github.com/savelee/docker-ext-client.git $ git push -u\n    origin master --force</code> <img src=\"http://146.148.113.87/wp-content/uploads/2016/08/github-500x400.png\" alt=\"github\"></p>\n<h1 id=\"Docker-Hub-Distribution-of-containers\"><a href=\"#Docker-Hub-Distribution-of-containers\" class=\"headerlink\" title=\"Docker Hub: Distribution of containers\"></a>Docker\n  Hub: Distribution of containers</h1>\n<p>Now that you’re reading this guide, you might be interested, or maybe you\n  just want to see these examples working live. Well with Docker, you can very\n  run these container images. In case you have the Docker Toolbox installed,\n  this should be very easy. You just need to have access to my containers.\n  Enter Docker Hub! <strong>Docker Hub</strong> is like Github but for Docker\n  images. The Docker Hub is a public registry maintained by Docker, Inc. It\n  contains images you can download and use to build containers. It also\n  provides authentication, work group structure, workflow tools like webhooks\n  and build triggers, and privacy tools like private repositories for storing\n  images you don’t want to share publicly. Let me first show you how you can\n  add your images to the Docker Hub, afterwards I will show you how to checkout\n  these images. First, we are going to add an <strong>Automated build\n    repository</strong> in Docker Hub. For that, we first need to push the code\n  to Github. If you followed this guide, you should have done this by now.</p>\n<p><img src=\"/images/DockerHub-500x347.png\" alt=\"DockerHub\"></p>\n<h1 id=\"Adding-images-to-Docker-Hub\"><a href=\"#Adding-images-to-Docker-Hub\" class=\"headerlink\" title=\"Adding images to Docker Hub\"></a>Adding\n  images to Docker Hub</h1>\n<p>We will need to have a working images, which you will have when you have\n  done the previous chapters. Next, we will link our Github account with Docker\n  Hub to add an automated build repo. You will need a Docker Hub account: <a href=\"https://hub.docker.com/login/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/login/</a>\n  We will automate the Docker builds, by linking Github to Docker Hub, so\n  everything I push to Git, it will automatically push to Docker as well. We\n  can achieve this with <strong>webhooks</strong>. Go to: <a href=\"https://hub.docker.com/account/authorized-services/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/account/authorized-services/</a>\n  You can choose to link to Github or Bitbucket. See: <a href=\"https://docs.docker.com/docker-hub/github/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/docker-hub/github/</a>\n  I’m using Github for this tutorial. Choose between; <strong>public &amp;\n    private</strong> or <strong>limited access</strong>. The “Public and\n  Private” option is the easiest to use, as it grants the Docker Hub full\n  access to all of your repositories. GitHub also allows you to grant access to\n  repositories belonging to your GitHub organizations. If you choose “Limited\n  Access”, Docker Hub only gets permission to access your public data and\n  public repositories. I choose <em>public &amp; private</em>, and once I am\n  done with that, it forwards me to a Github page. (I’m logged in on Github),\n  which asks me to grant permission, so Docker Hub can access the Github\n  repositories:</p>\n<p><img src=\"/images/authorize-500x345.png\" alt=\"authorize\"></p>\n<p>Once you click <strong>Authorize application</strong>, you will see the\n  DockerHub application in the Github overview: <a href=\"https://github.com/settings/applications\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/applications</a>\n  Now go back to your DockerHub dashboard, and click on the <strong>Create &gt;\n    Create Automated Build</strong> from the dropdown, which you will see next\n  to your account name, in the top right:</p>\n<p><img src=\"/images/automatedbuilds1-500x280.png\" alt=\"automatedbuilds1\"></p>\n<p>Select <strong>Create Auto-Build Github</strong>, select your Github\n  account, and then select the repository: <strong>docker-ext-client</strong>,\n  enter a description of max 100 characters and <strong>save</strong>. Redo\n  these steps as well for <strong>docker-node-server</strong>.</p>\n<p><img src=\"/images/automatedbuilds2-500x203.png\" alt=\"automatedbuilds2\"> Once\n  the Automated Build is configured it will automatically trigger a build and,\n  in a few minutes, you should see your new Automated Build on the <a href=\"Docker Hub\">https://hub.docker.com/</a>\n  Registry. It will stay in sync with your GitHub and Bitbucket repository\n  until you deactivate the Automated Build. Now go to <strong>Build Settings</strong>.\n  You should see this screen:</p>\n<p><img src=\"/images/automatedbuilds3-500x143.png\" alt=\"automatedbuilds3\"></p>\n<p>You could click the <strong>Trigger</strong> button, to trigger a new build.\n  Automated Builds can also be triggered via a URL on Docker Hub. This allows\n  you to rebuild an Automated build image on demand. Click the <strong>Active\n    Triggers</strong> button. Creating an automated build repo means that every\n  time you make a push to your Github repo, a build will be triggered in Docker\n  Hub to build your new image. Make sure, when committing the <strong>docker-ext-client</strong>\n  app to Git, that you will check in the production <strong>build/production/Client</strong>\n  folder, as this folder will be used by the Docker images, not the folder with\n  your local Sencha (class) files. # Running images from Docker Hub Now that we\n  know, how we can add Docker images to the Docker Hub, let’s checkout some\n  images. First download the image from the Docker Hub: <code>$ docker pull\n    savelee/docker-ext-client</code> Then run the new Docker image <code>--name</code>\n  = give your container a name <code>--p</code> = bind a port to the port which\n  is in the Dockerfile <code>-d</code> = the image name you like to run For\n  example: <code>$ docker run --name extjsapp -p 80:80 -d\n    savelee/docker-ext-client</code></p>\n<p>Here’s the code for running the Docker container:</p>\n<pre><code class=\"bash\">$ docker pull savelee/docker-node-server \n$ docker run --name nodeapp -p 9000:9000 -d savelee/docker-node-server \n</code></pre>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1>\n<p>The last part of the tutorial focussed on publishing Docker images to the\n  Docker Hub. If you followed all the tutorials of this 8 series, you’ve\n  learned the following:</p>\n<ul>\n  <li>Full stack JavaScript for the enterprise with JavaScript on the front-end\n    (with Ext JS 6).</li>\n  <li>Node.js on the back-end</li>\n  <li>A NoSQL database with MongoDB and Mongoose</li>\n  <li>About Docker, and how to create containers</li>\n  <li>How to link Docker containers with Docker Compose</li>\n  <li>How to publish Docker images with Github and Docker Hub</li>\n</ul>\n<p>The best part of this all, is that you can easily swap one technology for\n  another. For example, I could link new Docker images, with Ext JS 6 on a\n  Python/Django with MySQL environment, or an Angular 2 app on Node.js with\n  CouchDB… I hope you like it, and that this might come in handy. Cheers!</p>\n<ul>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1\">Quick\n      link to Part 1.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2\">Quick\n      link to Part 2.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3\">Quick\n      link to Part 3.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4\">Quick\n      link to Part 4.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5\">Quick\n      link to Part 5.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6\">Quick\n      link to Part 6.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7\">Quick\n      link to Part 7.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8\">Quick\n      link to Part 8.</a></li>\n</ul>"},{"title":"Tutorial: Full-stack JavaScript for the Enterprise. Getting started with: Ext JS, Node.js, Express, MongoDB and Docker. (5)","date":"2016-08-20T14:30:04.000Z","_content":"\n*This is part V of the tutorial, and covers how the Ext JS client app can consume the server Node.js API* \n\n<!--more-->\n\n# Let the Ext JS app consume your API \n\nBy now we have a working back-end with Node, and a working front-end with Sencha. Now we are ready to modify our Sencha app, so we can consume our back-end data and see it all in action! It’s a simple client application with CRUD functionality for the Users model. With other words, we can create (`POST`) new users, read users and user details (`GET`), update existing users (`PUT`), and remove a user (`DELETE`). I’ve added the codebase to Github, so let’s go through it, file by file. We will focus on the Classic Desktop view first, later we will create a mobile phone view. # Classic [https://github.com/savelee/docker-ext-client/blob/master/classic/src/Application.js](https://github.com/savelee/docker-ext-client/blob/master/classic/src/Application.js) The application doesn’t auto create a viewport. Instead I’ve created a custom launch function, which either creates a login view (with the viewport plugin enabled), or the main interface with the viewport plugin enabled. It depends on the authorization token, if you have one on the device, it will auto login. Take a look into the following files: \n* [https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/login/Login.js](https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/login/Login.js) \n* [https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/login/LoginController.js](https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/login/LoginController.js) \n* [https://github.com/savelee/docker-ext-client/blob/master/app/view/login/LoginControllerShared.js](https://github.com/savelee/docker-ext-client/blob/master/app/view/login/LoginControllerShared.js) \n\nHere you can see the login panel. It’s actually a non-closable, non-draggable window, locked in the middle of the screen. The user can enter the username and password, which will be posted to the Node Express server. In case the username and password match with what’s in the database, it will return a token. In the *success callback*, we will save the token to the browser *local storage*. Notice that we created *two ViewControllers*. One which will be shared by the classic and modern view. (This one contains the functionality to communicate with the back-end, since that’s view irrelevant.) The other ViewController, extends from the shared VC. This is the VC that contains an `alias`, and is bound to the classic view. Note that although we Bcrypt the passwords in the database. It’s not secure to send passwords over HTTP. An attacker could very easily sniff the username and password that will be in the `POST`. Therefore enter: [https://letsencrypt.org/](https://letsencrypt.org). You could very easily create a free SSL certificate. You can find a guide here: [https://letsencrypt.org/getting-started/](https://letsencrypt.org/getting-started/) so you could set this up in no time. It’s actually very easy, as long as you have console access to your webserver. Let's dive further into our Ext JS code: \n\n* [https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/main/Main.js](https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/main/Main.js) \n* [https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/main/MainController.js](https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/main/MainController.js) \n\nThat’s the main viewport. It’s pretty much the same as the generated one from Sencha Cmd. We’ve just added a logout button. (which will destroy the main viewport, and remove the token from the localstorage.) \n\n* [https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/Users.js](https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/Users.js) \n\nThis is just a view with a grid. It shows a grid column for the `first_name`, `last_name`, `email` and an `action` column to remove the user from the grid. The functionality for this can be found in: \n* [https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/UsersController.js](https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/UsersController.js) \n* [https://github.com/savelee/docker-ext-client/blob/master/app/view/users/UsersControllerShared.js](https://github.com/savelee/docker-ext-client/blob/master/app/view/users/UsersControllerShared.js) `onRemove` makes an AJAX call with the `DELETE` method, it makes a call to a URL that contains a *user id*. \n* [https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/UserForm.js](https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/UserForm.js) \n\nWhen you click on a row in the grid, it will open a popup window, which contains the form. I’ve implemented a `renderConfig`, which will hold the *selected record*. That way, as soon as the window will be created, and you run `setRecord()` on the form, it will run `updateRecord()` and load the record in the form, since the model fields map the form fields. When you submit the form, you will get into the `beforeSubmit()` method. Here we just determine if the form contains a hidden form field, which contains the user URL. If it does, it means, the form contains data, so every change made will be a `PUT` request. If the form is empty, we will *add a new user*, and therefore we `POST` to the */users* overview URL. The AJAX request itself, can be found in the shared user VC. And that’s it for the desktop view. \n\n![desktop](/images/desktop-1024x490.png)\n\n# Modern \n\nThe mobile view re-uses most of the functionality that’s already there. What is new, are the mobile (phone) views: \n\n* [https://github.com/savelee/docker-ext-client/blob/master/modern/src/Application.js](https://github.com/savelee/docker-ext-client/blob/master/modern/src/Application.js) If there’s a token available, it will add the main view to the viewport, else it adds a login view. \n* [https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/login/Login.js](https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/login/Login.js) \n* [https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/login/LoginController.js](https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/login/LoginController.js) \n\nThe login view is a container, which centers a login form in the middle of the screen. It calls the login view controller, for the `onLogin()` method. This method uses the `doLogin()` method from the *shared* login view controller, which contains the AJAX `POST` call, to request a token. Once logged in, it will add the token to the *local storage*, and it will remove the login view from the viewport, and instead add the main view to the viewport. \n\n* [https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/main/Main.js](https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/main/Main.js) \n* [https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/main/MainController.js](https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/main/MainController.js) The main view is just a *tabpanel*, with for now, just one tab. It contains a hidden back button, which will be enabled once you are in a form. And it contains a logout button, which calls the `onLogout()` method, which removes the token, and resets the views. It contains a user tab, which has a `card` layout. It can switch between a grid view which list all the users, or a form, to edit one user. \n* [https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/Users.js](https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/Users.js) This is the list view. It contains an `itemTpl` with the `first_name`, `last_name`, `email`, `username` and `password`. Once you tap an item, it slides in the userform. \n* [https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/UserForm.js](https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/UserForm.js) \n* [https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/UsersController.js](https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/UsersController.js) \n\nThis form contains also a toolbar with a *Delete* button. This toolbar will be hidden, when you open the form via the *Add* button. But when you tap an item, it’s visible, and the form will be prefilled with data. It contains similar functionality as in the classic toolkit. It holds a `config` with the record. `updateRecord()` will be called, every time when you run `setRecord()`. Feel free to download the code base and play around with it. \n\n![mobile](/images/mobile.png) \nBy the end of this part of the tutorial, you will understand how the Sencha Ext JS client can consume the Node.js server API. In the next blog posts we will focus on getting familiar with Docker. \n\n## Read the next part\n\n[Part 6](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6/)\n\n*   [Quick link to Part 1.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1)\n*   [Quick link to Part 2.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2)\n*   [Quick link to Part 3.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3)\n*   [Quick link to Part 4.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4)\n*   [Quick link to Part 5.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5)\n*   [Quick link to Part 6.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6)\n*   [Quick link to Part 7.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7)\n*   [Quick link to Part 8.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8)","source":"_posts/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5.md","raw":"---\ntitle: >-\n  Tutorial: Full-stack JavaScript for the Enterprise. Getting started with: Ext\n  JS, Node.js, Express, MongoDB and Docker. (5)\ntags:\n  - Docker\n  - Node.js\n  - MongoDB\n  - Ext JS\ncategories:\n  - Containers\ndate: 2016-08-20 16:30:04\n---\n\n*This is part V of the tutorial, and covers how the Ext JS client app can consume the server Node.js API* \n\n<!--more-->\n\n# Let the Ext JS app consume your API \n\nBy now we have a working back-end with Node, and a working front-end with Sencha. Now we are ready to modify our Sencha app, so we can consume our back-end data and see it all in action! It’s a simple client application with CRUD functionality for the Users model. With other words, we can create (`POST`) new users, read users and user details (`GET`), update existing users (`PUT`), and remove a user (`DELETE`). I’ve added the codebase to Github, so let’s go through it, file by file. We will focus on the Classic Desktop view first, later we will create a mobile phone view. # Classic [https://github.com/savelee/docker-ext-client/blob/master/classic/src/Application.js](https://github.com/savelee/docker-ext-client/blob/master/classic/src/Application.js) The application doesn’t auto create a viewport. Instead I’ve created a custom launch function, which either creates a login view (with the viewport plugin enabled), or the main interface with the viewport plugin enabled. It depends on the authorization token, if you have one on the device, it will auto login. Take a look into the following files: \n* [https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/login/Login.js](https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/login/Login.js) \n* [https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/login/LoginController.js](https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/login/LoginController.js) \n* [https://github.com/savelee/docker-ext-client/blob/master/app/view/login/LoginControllerShared.js](https://github.com/savelee/docker-ext-client/blob/master/app/view/login/LoginControllerShared.js) \n\nHere you can see the login panel. It’s actually a non-closable, non-draggable window, locked in the middle of the screen. The user can enter the username and password, which will be posted to the Node Express server. In case the username and password match with what’s in the database, it will return a token. In the *success callback*, we will save the token to the browser *local storage*. Notice that we created *two ViewControllers*. One which will be shared by the classic and modern view. (This one contains the functionality to communicate with the back-end, since that’s view irrelevant.) The other ViewController, extends from the shared VC. This is the VC that contains an `alias`, and is bound to the classic view. Note that although we Bcrypt the passwords in the database. It’s not secure to send passwords over HTTP. An attacker could very easily sniff the username and password that will be in the `POST`. Therefore enter: [https://letsencrypt.org/](https://letsencrypt.org). You could very easily create a free SSL certificate. You can find a guide here: [https://letsencrypt.org/getting-started/](https://letsencrypt.org/getting-started/) so you could set this up in no time. It’s actually very easy, as long as you have console access to your webserver. Let's dive further into our Ext JS code: \n\n* [https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/main/Main.js](https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/main/Main.js) \n* [https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/main/MainController.js](https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/main/MainController.js) \n\nThat’s the main viewport. It’s pretty much the same as the generated one from Sencha Cmd. We’ve just added a logout button. (which will destroy the main viewport, and remove the token from the localstorage.) \n\n* [https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/Users.js](https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/Users.js) \n\nThis is just a view with a grid. It shows a grid column for the `first_name`, `last_name`, `email` and an `action` column to remove the user from the grid. The functionality for this can be found in: \n* [https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/UsersController.js](https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/UsersController.js) \n* [https://github.com/savelee/docker-ext-client/blob/master/app/view/users/UsersControllerShared.js](https://github.com/savelee/docker-ext-client/blob/master/app/view/users/UsersControllerShared.js) `onRemove` makes an AJAX call with the `DELETE` method, it makes a call to a URL that contains a *user id*. \n* [https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/UserForm.js](https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/UserForm.js) \n\nWhen you click on a row in the grid, it will open a popup window, which contains the form. I’ve implemented a `renderConfig`, which will hold the *selected record*. That way, as soon as the window will be created, and you run `setRecord()` on the form, it will run `updateRecord()` and load the record in the form, since the model fields map the form fields. When you submit the form, you will get into the `beforeSubmit()` method. Here we just determine if the form contains a hidden form field, which contains the user URL. If it does, it means, the form contains data, so every change made will be a `PUT` request. If the form is empty, we will *add a new user*, and therefore we `POST` to the */users* overview URL. The AJAX request itself, can be found in the shared user VC. And that’s it for the desktop view. \n\n![desktop](/images/desktop-1024x490.png)\n\n# Modern \n\nThe mobile view re-uses most of the functionality that’s already there. What is new, are the mobile (phone) views: \n\n* [https://github.com/savelee/docker-ext-client/blob/master/modern/src/Application.js](https://github.com/savelee/docker-ext-client/blob/master/modern/src/Application.js) If there’s a token available, it will add the main view to the viewport, else it adds a login view. \n* [https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/login/Login.js](https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/login/Login.js) \n* [https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/login/LoginController.js](https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/login/LoginController.js) \n\nThe login view is a container, which centers a login form in the middle of the screen. It calls the login view controller, for the `onLogin()` method. This method uses the `doLogin()` method from the *shared* login view controller, which contains the AJAX `POST` call, to request a token. Once logged in, it will add the token to the *local storage*, and it will remove the login view from the viewport, and instead add the main view to the viewport. \n\n* [https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/main/Main.js](https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/main/Main.js) \n* [https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/main/MainController.js](https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/main/MainController.js) The main view is just a *tabpanel*, with for now, just one tab. It contains a hidden back button, which will be enabled once you are in a form. And it contains a logout button, which calls the `onLogout()` method, which removes the token, and resets the views. It contains a user tab, which has a `card` layout. It can switch between a grid view which list all the users, or a form, to edit one user. \n* [https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/Users.js](https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/Users.js) This is the list view. It contains an `itemTpl` with the `first_name`, `last_name`, `email`, `username` and `password`. Once you tap an item, it slides in the userform. \n* [https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/UserForm.js](https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/UserForm.js) \n* [https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/UsersController.js](https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/UsersController.js) \n\nThis form contains also a toolbar with a *Delete* button. This toolbar will be hidden, when you open the form via the *Add* button. But when you tap an item, it’s visible, and the form will be prefilled with data. It contains similar functionality as in the classic toolkit. It holds a `config` with the record. `updateRecord()` will be called, every time when you run `setRecord()`. Feel free to download the code base and play around with it. \n\n![mobile](/images/mobile.png) \nBy the end of this part of the tutorial, you will understand how the Sencha Ext JS client can consume the Node.js server API. In the next blog posts we will focus on getting familiar with Docker. \n\n## Read the next part\n\n[Part 6](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6/)\n\n*   [Quick link to Part 1.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1)\n*   [Quick link to Part 2.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2)\n*   [Quick link to Part 3.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3)\n*   [Quick link to Part 4.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4)\n*   [Quick link to Part 5.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5)\n*   [Quick link to Part 6.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6)\n*   [Quick link to Part 7.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7)\n*   [Quick link to Part 8.](/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8)","slug":"tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5","published":1,"updated":"2018-11-30T13:34:44.953Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncqy009vkif5rwo9mxqa","content":"<p><em>This is part V of the tutorial, and covers how the Ext JS client app can\n    consume the server Node.js API</em></p>\n<a id=\"more\"></a>\n<h1 id=\"Let-the-Ext-JS-app-consume-your-API\"><a href=\"#Let-the-Ext-JS-app-consume-your-API\" class=\"headerlink\" title=\"Let the Ext JS app consume your API\"></a>Let\n  the Ext JS app consume your API</h1>\n<p>By now we have a working back-end with Node, and a working front-end with\n  Sencha. Now we are ready to modify our Sencha app, so we can consume our\n  back-end data and see it all in action! It’s a simple client application with\n  CRUD functionality for the Users model. With other words, we can create (<code>POST</code>)\n  new users, read users and user details (<code>GET</code>), update existing\n  users (<code>PUT</code>), and remove a user (<code>DELETE</code>). I’ve added\n  the codebase to Github, so let’s go through it, file by file. We will focus\n  on the Classic Desktop view first, later we will create a mobile phone view.\n  # Classic <a href=\"https://github.com/savelee/docker-ext-client/blob/master/classic/src/Application.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/classic/src/Application.js</a>\n  The application doesn’t auto create a viewport. Instead I’ve created a custom\n  launch function, which either creates a login view (with the viewport plugin\n  enabled), or the main interface with the viewport plugin enabled. It depends\n  on the authorization token, if you have one on the device, it will auto\n  login. Take a look into the following files:</p>\n<ul>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/login/Login.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/login/Login.js</a></li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/login/LoginController.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/login/LoginController.js</a></li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/app/view/login/LoginControllerShared.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/app/view/login/LoginControllerShared.js</a></li>\n</ul>\n<p>Here you can see the login panel. It’s actually a non-closable,\n  non-draggable window, locked in the middle of the screen. The user can enter\n  the username and password, which will be posted to the Node Express server.\n  In case the username and password match with what’s in the database, it will\n  return a token. In the <em>success callback</em>, we will save the token to\n  the browser <em>local storage</em>. Notice that we created <em>two\n    ViewControllers</em>. One which will be shared by the classic and modern\n  view. (This one contains the functionality to communicate with the back-end,\n  since that’s view irrelevant.) The other ViewController, extends from the\n  shared VC. This is the VC that contains an <code>alias</code>, and is bound\n  to the classic view. Note that although we Bcrypt the passwords in the\n  database. It’s not secure to send passwords over HTTP. An attacker could very\n  easily sniff the username and password that will be in the <code>POST</code>.\n  Therefore enter: <a href=\"https://letsencrypt.org\" target=\"_blank\" rel=\"noopener\">https://letsencrypt.org/</a>.\n  You could very easily create a free SSL certificate. You can find a guide\n  here: <a href=\"https://letsencrypt.org/getting-started/\" target=\"_blank\" rel=\"noopener\">https://letsencrypt.org/getting-started/</a>\n  so you could set this up in no time. It’s actually very easy, as long as you\n  have console access to your webserver. Let’s dive further into our Ext JS\n  code:</p>\n<ul>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/main/Main.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/main/Main.js</a></li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/main/MainController.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/main/MainController.js</a></li>\n</ul>\n<p>That’s the main viewport. It’s pretty much the same as the generated one\n  from Sencha Cmd. We’ve just added a logout button. (which will destroy the\n  main viewport, and remove the token from the localstorage.)</p>\n<ul>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/Users.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/Users.js</a></li>\n</ul>\n<p>This is just a view with a grid. It shows a grid column for the <code>first_name</code>,\n  <code>last_name</code>, <code>email</code> and an <code>action</code> column\n  to remove the user from the grid. The functionality for this can be found in:</p>\n<ul>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/UsersController.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/UsersController.js</a></li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/app/view/users/UsersControllerShared.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/app/view/users/UsersControllerShared.js</a>\n    <code>onRemove</code> makes an AJAX call with the <code>DELETE</code>\n    method, it makes a call to a URL that contains a <em>user id</em>.</li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/UserForm.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/UserForm.js</a></li>\n</ul>\n<p>When you click on a row in the grid, it will open a popup window, which\n  contains the form. I’ve implemented a <code>renderConfig</code>, which will\n  hold the <em>selected record</em>. That way, as soon as the window will be\n  created, and you run <code>setRecord()</code> on the form, it will run <code>updateRecord()</code>\n  and load the record in the form, since the model fields map the form fields.\n  When you submit the form, you will get into the <code>beforeSubmit()</code>\n  method. Here we just determine if the form contains a hidden form field,\n  which contains the user URL. If it does, it means, the form contains data, so\n  every change made will be a <code>PUT</code> request. If the form is empty,\n  we will <em>add a new user</em>, and therefore we <code>POST</code> to the\n  <em>/users</em> overview URL. The AJAX request itself, can be found in the\n  shared user VC. And that’s it for the desktop view.</p>\n<p><img src=\"/images/desktop-1024x490.png\" alt=\"desktop\"></p>\n<h1 id=\"Modern\"><a href=\"#Modern\" class=\"headerlink\" title=\"Modern\"></a>Modern</h1>\n<p>The mobile view re-uses most of the functionality that’s already there. What\n  is new, are the mobile (phone) views:</p>\n<ul>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/modern/src/Application.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/modern/src/Application.js</a>\n    If there’s a token available, it will add the main view to the viewport,\n    else it adds a login view.</li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/login/Login.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/login/Login.js</a></li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/login/LoginController.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/login/LoginController.js</a></li>\n</ul>\n<p>The login view is a container, which centers a login form in the middle of\n  the screen. It calls the login view controller, for the <code>onLogin()</code>\n  method. This method uses the <code>doLogin()</code> method from the <em>shared</em>\n  login view controller, which contains the AJAX <code>POST</code> call, to\n  request a token. Once logged in, it will add the token to the <em>local\n    storage</em>, and it will remove the login view from the viewport, and\n  instead add the main view to the viewport.</p>\n<ul>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/main/Main.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/main/Main.js</a></li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/main/MainController.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/main/MainController.js</a>\n    The main view is just a <em>tabpanel</em>, with for now, just one tab. It\n    contains a hidden back button, which will be enabled once you are in a\n    form. And it contains a logout button, which calls the <code>onLogout()</code>\n    method, which removes the token, and resets the views. It contains a user\n    tab, which has a <code>card</code> layout. It can switch between a grid\n    view which list all the users, or a form, to edit one user.</li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/Users.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/Users.js</a>\n    This is the list view. It contains an <code>itemTpl</code> with the <code>first_name</code>,\n    <code>last_name</code>, <code>email</code>, <code>username</code> and <code>password</code>.\n    Once you tap an item, it slides in the userform.</li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/UserForm.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/UserForm.js</a></li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/UsersController.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/UsersController.js</a></li>\n</ul>\n<p>This form contains also a toolbar with a <em>Delete</em> button. This\n  toolbar will be hidden, when you open the form via the <em>Add</em> button.\n  But when you tap an item, it’s visible, and the form will be prefilled with\n  data. It contains similar functionality as in the classic toolkit. It holds a\n  <code>config</code> with the record. <code>updateRecord()</code> will be\n  called, every time when you run <code>setRecord()</code>. Feel free to\n  download the code base and play around with it.</p>\n<p><img src=\"/images/mobile.png\" alt=\"mobile\"> By the end of this part of the\n  tutorial, you will understand how the Sencha Ext JS client can consume the\n  Node.js server API. In the next blog posts we will focus on getting familiar\n  with Docker.</p>\n<h2 id=\"Read-the-next-part\"><a href=\"#Read-the-next-part\" class=\"headerlink\" title=\"Read the next part\"></a>Read\n  the next part</h2>\n<p><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6/\">Part\n    6</a></p>\n<ul>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1\">Quick\n      link to Part 1.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2\">Quick\n      link to Part 2.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3\">Quick\n      link to Part 3.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4\">Quick\n      link to Part 4.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5\">Quick\n      link to Part 5.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6\">Quick\n      link to Part 6.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7\">Quick\n      link to Part 7.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8\">Quick\n      link to Part 8.</a></li>\n</ul>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p><em>This is part V of the tutorial, and covers how the Ext JS client app can\n    consume the server Node.js API</em></p>","more":"<h1 id=\"Let-the-Ext-JS-app-consume-your-API\"><a href=\"#Let-the-Ext-JS-app-consume-your-API\" class=\"headerlink\" title=\"Let the Ext JS app consume your API\"></a>Let\n  the Ext JS app consume your API</h1>\n<p>By now we have a working back-end with Node, and a working front-end with\n  Sencha. Now we are ready to modify our Sencha app, so we can consume our\n  back-end data and see it all in action! It’s a simple client application with\n  CRUD functionality for the Users model. With other words, we can create (<code>POST</code>)\n  new users, read users and user details (<code>GET</code>), update existing\n  users (<code>PUT</code>), and remove a user (<code>DELETE</code>). I’ve added\n  the codebase to Github, so let’s go through it, file by file. We will focus\n  on the Classic Desktop view first, later we will create a mobile phone view.\n  # Classic <a href=\"https://github.com/savelee/docker-ext-client/blob/master/classic/src/Application.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/classic/src/Application.js</a>\n  The application doesn’t auto create a viewport. Instead I’ve created a custom\n  launch function, which either creates a login view (with the viewport plugin\n  enabled), or the main interface with the viewport plugin enabled. It depends\n  on the authorization token, if you have one on the device, it will auto\n  login. Take a look into the following files:</p>\n<ul>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/login/Login.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/login/Login.js</a></li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/login/LoginController.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/login/LoginController.js</a></li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/app/view/login/LoginControllerShared.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/app/view/login/LoginControllerShared.js</a></li>\n</ul>\n<p>Here you can see the login panel. It’s actually a non-closable,\n  non-draggable window, locked in the middle of the screen. The user can enter\n  the username and password, which will be posted to the Node Express server.\n  In case the username and password match with what’s in the database, it will\n  return a token. In the <em>success callback</em>, we will save the token to\n  the browser <em>local storage</em>. Notice that we created <em>two\n    ViewControllers</em>. One which will be shared by the classic and modern\n  view. (This one contains the functionality to communicate with the back-end,\n  since that’s view irrelevant.) The other ViewController, extends from the\n  shared VC. This is the VC that contains an <code>alias</code>, and is bound\n  to the classic view. Note that although we Bcrypt the passwords in the\n  database. It’s not secure to send passwords over HTTP. An attacker could very\n  easily sniff the username and password that will be in the <code>POST</code>.\n  Therefore enter: <a href=\"https://letsencrypt.org\" target=\"_blank\" rel=\"noopener\">https://letsencrypt.org/</a>.\n  You could very easily create a free SSL certificate. You can find a guide\n  here: <a href=\"https://letsencrypt.org/getting-started/\" target=\"_blank\" rel=\"noopener\">https://letsencrypt.org/getting-started/</a>\n  so you could set this up in no time. It’s actually very easy, as long as you\n  have console access to your webserver. Let’s dive further into our Ext JS\n  code:</p>\n<ul>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/main/Main.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/main/Main.js</a></li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/main/MainController.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/main/MainController.js</a></li>\n</ul>\n<p>That’s the main viewport. It’s pretty much the same as the generated one\n  from Sencha Cmd. We’ve just added a logout button. (which will destroy the\n  main viewport, and remove the token from the localstorage.)</p>\n<ul>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/Users.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/Users.js</a></li>\n</ul>\n<p>This is just a view with a grid. It shows a grid column for the <code>first_name</code>,\n  <code>last_name</code>, <code>email</code> and an <code>action</code> column\n  to remove the user from the grid. The functionality for this can be found in:</p>\n<ul>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/UsersController.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/UsersController.js</a></li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/app/view/users/UsersControllerShared.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/app/view/users/UsersControllerShared.js</a>\n    <code>onRemove</code> makes an AJAX call with the <code>DELETE</code>\n    method, it makes a call to a URL that contains a <em>user id</em>.</li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/UserForm.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/classic/src/view/users/UserForm.js</a></li>\n</ul>\n<p>When you click on a row in the grid, it will open a popup window, which\n  contains the form. I’ve implemented a <code>renderConfig</code>, which will\n  hold the <em>selected record</em>. That way, as soon as the window will be\n  created, and you run <code>setRecord()</code> on the form, it will run <code>updateRecord()</code>\n  and load the record in the form, since the model fields map the form fields.\n  When you submit the form, you will get into the <code>beforeSubmit()</code>\n  method. Here we just determine if the form contains a hidden form field,\n  which contains the user URL. If it does, it means, the form contains data, so\n  every change made will be a <code>PUT</code> request. If the form is empty,\n  we will <em>add a new user</em>, and therefore we <code>POST</code> to the\n  <em>/users</em> overview URL. The AJAX request itself, can be found in the\n  shared user VC. And that’s it for the desktop view.</p>\n<p><img src=\"/images/desktop-1024x490.png\" alt=\"desktop\"></p>\n<h1 id=\"Modern\"><a href=\"#Modern\" class=\"headerlink\" title=\"Modern\"></a>Modern</h1>\n<p>The mobile view re-uses most of the functionality that’s already there. What\n  is new, are the mobile (phone) views:</p>\n<ul>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/modern/src/Application.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/modern/src/Application.js</a>\n    If there’s a token available, it will add the main view to the viewport,\n    else it adds a login view.</li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/login/Login.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/login/Login.js</a></li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/login/LoginController.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/login/LoginController.js</a></li>\n</ul>\n<p>The login view is a container, which centers a login form in the middle of\n  the screen. It calls the login view controller, for the <code>onLogin()</code>\n  method. This method uses the <code>doLogin()</code> method from the <em>shared</em>\n  login view controller, which contains the AJAX <code>POST</code> call, to\n  request a token. Once logged in, it will add the token to the <em>local\n    storage</em>, and it will remove the login view from the viewport, and\n  instead add the main view to the viewport.</p>\n<ul>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/main/Main.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/main/Main.js</a></li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/main/MainController.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/main/MainController.js</a>\n    The main view is just a <em>tabpanel</em>, with for now, just one tab. It\n    contains a hidden back button, which will be enabled once you are in a\n    form. And it contains a logout button, which calls the <code>onLogout()</code>\n    method, which removes the token, and resets the views. It contains a user\n    tab, which has a <code>card</code> layout. It can switch between a grid\n    view which list all the users, or a form, to edit one user.</li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/Users.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/Users.js</a>\n    This is the list view. It contains an <code>itemTpl</code> with the <code>first_name</code>,\n    <code>last_name</code>, <code>email</code>, <code>username</code> and <code>password</code>.\n    Once you tap an item, it slides in the userform.</li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/UserForm.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/UserForm.js</a></li>\n  <li><a href=\"https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/UsersController.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/docker-ext-client/blob/master/modern/src/view/users/UsersController.js</a></li>\n</ul>\n<p>This form contains also a toolbar with a <em>Delete</em> button. This\n  toolbar will be hidden, when you open the form via the <em>Add</em> button.\n  But when you tap an item, it’s visible, and the form will be prefilled with\n  data. It contains similar functionality as in the classic toolkit. It holds a\n  <code>config</code> with the record. <code>updateRecord()</code> will be\n  called, every time when you run <code>setRecord()</code>. Feel free to\n  download the code base and play around with it.</p>\n<p><img src=\"/images/mobile.png\" alt=\"mobile\"> By the end of this part of the\n  tutorial, you will understand how the Sencha Ext JS client can consume the\n  Node.js server API. In the next blog posts we will focus on getting familiar\n  with Docker.</p>\n<h2 id=\"Read-the-next-part\"><a href=\"#Read-the-next-part\" class=\"headerlink\" title=\"Read the next part\"></a>Read\n  the next part</h2>\n<p><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6/\">Part\n    6</a></p>\n<ul>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-1\">Quick\n      link to Part 1.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-2\">Quick\n      link to Part 2.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-3\">Quick\n      link to Part 3.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-4\">Quick\n      link to Part 4.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-5\">Quick\n      link to Part 5.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-6\">Quick\n      link to Part 6.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-7\">Quick\n      link to Part 7.</a></li>\n  <li><a href=\"/Containers/tutorial-full-stack-javascript-for-the-enterprise-getting-started-with-ext-js-node-js-express-mongodb-and-docker-8\">Quick\n      link to Part 8.</a></li>\n</ul>"},{"title":"Universal Windows Apps for Microsoft Surface Pro Hybrids / MS Edge with Ext JS 6","date":"2016-11-02T12:59:17.000Z","_content":"\nNow that hybrid touch pc’s / tablets, like the Windows Surface Pro, got popular, I often hear people asking me, if it’s possible to create Ext JS apps for Windows tablets? Ext JS 6 has support for Windows 10. The classic toolkit supports IE8 and up, and the modern toolkit supports the Edge browser. It even contains a Windows mobile theme!\n\n<!--more-->\n\n![sp4](/images/sp4-500x326.png)\n\nExt JS 6 is also the framework, with supports you by creating universal apps. With one code base you can create Windows desktop apps for mouse and keyboard usage, and tablet interface for touch usage. Just generate your project like: `sencha generate app MyWindowsApp ../mywindowsapp` \n\nThis will create a folder structure for you, with a classic and modern toolkit folder, to branche out the separate views. For more information about universal apps, please see my previous blog post: [https://www.leeboonstra.com/developer/webinar-secrets-to-building-a-great-looking-universal-app/](https://www.leeboonstra.com/developer/webinar-secrets-to-building-a-great-looking-universal-app/)\n\nThe fun stuff comes into the **app.json** file. I’ve created these build profiles:\n\n``` JavaScript\n\"builds\": { \n  \"desktop\": { \n    \"toolkit\": \"classic\", \n    \"theme\": \"theme-crisp\" \n  }, \n  \"tablet\": { \n    \"toolkit\": \"modern\", \n    //classic \"theme\": \"theme-windows\" \n    //theme-crisp-touch \n  } \n}\n```\n\nYou can set the tablet theme to windows mobile, or in case you prefer to make use of the classic toolkit, then switch the theme to \"theme-crisp-touch\" for more whitespace around buttons and links, and bigger icons and buttons. So you won’t miss tap. My **index.html** file, has an `Ext.beforeLoad` method, that looks like this: \n\n``` JavaScript\nExt.beforeLoad = function (tags) { \n  var s = location.search, profile; \n  if (s.match(/desktop/)) { \n    profile = 'desktop'; \n  } else if (s.match(/tablet/)) { \n    profile = 'tablet'; \n  } else { profile = tags.desktop ? 'desktop' : 'tablet'; \n  } Ext.manifest = profile; \n};\n```\n\n`Ext.platformTags` is a singleton [http://docs.sencha.com/extjs/6.0.0/classic/Ext.html#property-platformTags](http://docs.sencha.com/extjs/6.0.0/classic/Ext.html#property-platformTags) within Ext JS which can contain information about what type of device I am running on. When I execute this command on my Windows Surfarce Pro tablet, I get the following information: \n\n``` JavaScript\nExt.platformTags.tablet > false Ext.platformTags.touch > 10 Ext.platformTags.edge > 15 \n```\n\n  \nIf I switch to touch / tablet mode, for example by removing my tablet from the dock: \n\n``` JavaScript\nExt.platformTags.tablet > false Ext.platformTags.touch > 10 Ext.platformTags.edge > 15 \n```\n\nHmm. Not what I expected. Unfortunately, there is no out of the box way, on how you can detect the tablet mode, from your browser, or from the `Ext.platformTags` singleton. Now obviously you can create a button in the top of your app, which contains an onclick handler that does something like this: \n\n``` JavaScript\nonTablet: function(){ \n  var url = window.location.href; \n  url = url.split('?')[0]; window.location.href = url + '?tablet'; \n}, \nonDesktop: function(){ \n  var url = window.location.href; url = url.split('?')[0]; window.location.href = url + '?desktop';\n}\n```\n\nIt would be nicer, if my device can detect this mode switch programmatically. Unfortunately, by the time of writing there is no HTML5 / JavaScript API solution, which can detect mode changes. I tried to look into projects like Apache Cordova, to figure out if there are native API solutions, but I couldn’t find it either. I can’t check on touch input either, because on a hybrid machine, like the surface pro, touch input works regardless switching the mode, since the screen is just a touch screen. So `navigator.pointerEnabled` will always return true. So for now, we are left with a trick. It’s a smart trick though. And it won’t work in IE11 or below. Which is ok, since for our demo, we will make use of the modern toolkit for tablet mode, and modern toolkit is for modern browsers, like Microsoft Edge. **However, it won’t work in any other browser either. So not, in Google Chrome or Firefox. For those browsers, you will have to stick with the button switch approach. This might be an ok solution for you, since we are talking here about developing universal windows apps.** \n\nIn tablet mode; there is no browser scrollbar. The browser scrollbar will be 0, while on desktop mode, it will be a value in pixels. (like 12px). Now, user: robocat created a working JavaScript example in a JSBin, where you can see a working demo: https://output.jsbin.com/puseco. The trick here, is to add an hidden div to your page body with overflow scroll, to start calculating the scrollWidth. Now I was super amazed and surprised, but apparently Ext JS already has a built-in function like this! Yay. So you only need to call: `Ext.getScrollbarSize(true)` where you are forcing it to re-check it: http://docs.sencha.com/extjs/6.0.0/classic/Ext.html#method-getScrollbarSize So on my Windows Surface Pro, in desktop mode, it will return: \n\n``` JavaScript\nExt.getScrollbarSize(true).height > 12 Ext.getScrollbarSize(true).width > 12 \n```\n\nAnd in tablet mode: \n\n``` JavaScript\nExt.getScrollbarSize(true).height >0 Ext.getScrollbarSize(true).width >0 \n```\n\nGreat! We are getting close. Now let’s check and see if we can detect it automatically! Most of the times, when switching modes, it will also fire a window resize [http://docs.sencha.com/extjs/6.0.0/classic/Ext.container.Viewport.html#event-resize](http://docs.sencha.com/extjs/6.0.0/classic/Ext.container.Viewport.html#event-resize) or a childmove [http://docs.sencha.com/extjs/6.0.0/classic/Ext.container.Viewport.html#event-childmove](http://docs.sencha.com/extjs/6.0.0/classic/Ext.container.Viewport.html#event-childmove) event. We can attach a resize listener on an `Ext.Viewport`, like our **main.js** file, and run the mode switch. Note the extra check that I created to make sure you are switching profiles. (Otherwise your app would keep on refreshing.) **Main.js** \n\n``` JavaScript\nlisteners: { \n  resize: 'onMainResize', \n  childmove: 'onMainResize' \n}, \n```\n\n**MainController.js** \n\n``` JavaScript\nonMainResize: function(){ \n  var url = window.location.href; \n  url = url.split('?')[0]; \n  //console.log(Ext.getScrollbarSize(true).height == 0); //console.log(Ext.manifest.profile); \n  if ( Ext.platformTags.edge > 0 && Ext.manifest.profile == 'desktop' && Ext.getScrollbarSize(true).width == 0 && Ext.getScrollbarSize(true).height == 0 ) {    window.location.href = url + '?tablet'; } \n  else if ( Ext.platformTags.edge > 0 && Ext.manifest.profile == 'tablet' && Ext.getScrollbarSize(true).width != 0 && Ext.getScrollbarSize(true).height != 0 ) {      window.location.href = url + '?desktop'; } },\n  ```\n\n  Let’s finish this article with a bonus topic. Sencha has responsiveConfig to change configuration on runtime, based on criteria. [http://docs.sencha.com/extjs/6.0.0/classic/Ext.plugin.Responsive.htm](http://docs.sencha.com/extjs/6.0.0/classic/Ext.plugin.Responsive.html). \n  \n  Responsive Design in Ext JS, means it’s JavaScript configuration, which means that you can write any type of criteria. It also means, that you can change anything you like on runtime. This doesn’t necessary means that you have to change the look and feel. You can change anything, so for example also load different models, redraw or refresh a page. (..because you can override a setter/update method). Here’s a simple example. Any property can be configured as long as it has an setter under the hood. (if not, you can create your own setters of course.) \n  \n``` JavaScript\n  plugins: ['responsive'],\n  responsiveConfig: { \n    tall: { tabPosition: 'left' }, \n    wide: { tabPosition: 'bottom' } \n  },\n```\n\nNow look into this customized example, where I override the updateMethod \n  \n``` JavaScript \nconfig: { customTabPanel: false }, \nplugins: ['responsive'], \nresponsiveConfig: { tall: { \n  customTabPanel: true }, \n  wide: { customTabPanel: false } \n}, updateCustomTabPanel: function(isCustomTabPanel){ \n    if(isCustomTabPanel){ \n      //manually build my tabpanel, and do a whole bunch of //other stuff, like creating models or something \n      //or destroying a screen and rebuild it \n    } else { \n      //code for when customTabPanel is false } } \n```\n\nThe criteria to choose from are: `tall` — Viewport width < height regardless of device type `wide` — Viewport width > height regardless of device type. `landscape` — Like wide, but always true on desktop devices `portrait` — Like tall, but always false on desktop devices `width` — An expression that tests for the specific width of the viewport `height `— An expression that tests for the specific height of the viewport `platform` — An object containing various booleans describing the platform So how can you create a custom criteria? With responsiveFormulas! [http://docs.sencha.com/extjs/6.0.0/classic/Ext.mixin.Responsive.html#cfg-responsiveFormulas](http://docs.sencha.com/extjs/6.0.0/classic/Ext.mixin.Responsive.html#cfg-responsiveFormulas) \n\n``` JavaScript\nresponsiveFormulas: { \n  touch: function(context) { \n    return Ext.feature.has.Touch; \n  }, \n  notTouch: function(context) { \n    return !Ext.feature.has.Touch; } \n  }, \n```\n\nI have used this example, for example in a chart. On a touch device I use pinch to zoom, and on a mouse and keyboard device, I use the crosshair interaction. Although this is a great example, it would make less sense for a windows universal app, since hybrid tablet PCs have both interfaces: touch and mouse/keyboard support. Maybe you are creating an interface that needs to support mouse/keyboard or touch support. Do you have a tablet/pc hybrid and want to play around with this? Here’s my project on Github to fork: [https://github.com/savelee/sencha-windows-universal-apps](https://github.com/savelee/sencha-windows-universal-apps) \n\n![studio](/images/studio-500x281.jpg) \n\n*(PS: I own a Microsoft Surface Pro 4, and the best thing of it, is it’s keyboard. ;) - As a small hybrid touch windows PC it’s great. As a tablet, it really sucks. No matter to what mode you switch it, it feels and breaths like a PC with touch support. Certain things in Windows are designed for mouse and keyboard usage. And also, the way how it boots, load times etc, it just shows you, it’s a PC. ..but a really good one.)*\n","source":"_posts/universal-windows-apps-for-microsoft-surface-pro-hybrids-ms-edge-with-ext-js-6.md","raw":"---\ntitle: >-\n  Universal Windows Apps for Microsoft Surface Pro Hybrids / MS Edge with Ext JS 6\ntags:\n  - Surface Pro\n  - Universal App\ncategories:\n  - Ext JS\ndate: 2016-11-02 13:59:17\n---\n\nNow that hybrid touch pc’s / tablets, like the Windows Surface Pro, got popular, I often hear people asking me, if it’s possible to create Ext JS apps for Windows tablets? Ext JS 6 has support for Windows 10. The classic toolkit supports IE8 and up, and the modern toolkit supports the Edge browser. It even contains a Windows mobile theme!\n\n<!--more-->\n\n![sp4](/images/sp4-500x326.png)\n\nExt JS 6 is also the framework, with supports you by creating universal apps. With one code base you can create Windows desktop apps for mouse and keyboard usage, and tablet interface for touch usage. Just generate your project like: `sencha generate app MyWindowsApp ../mywindowsapp` \n\nThis will create a folder structure for you, with a classic and modern toolkit folder, to branche out the separate views. For more information about universal apps, please see my previous blog post: [https://www.leeboonstra.com/developer/webinar-secrets-to-building-a-great-looking-universal-app/](https://www.leeboonstra.com/developer/webinar-secrets-to-building-a-great-looking-universal-app/)\n\nThe fun stuff comes into the **app.json** file. I’ve created these build profiles:\n\n``` JavaScript\n\"builds\": { \n  \"desktop\": { \n    \"toolkit\": \"classic\", \n    \"theme\": \"theme-crisp\" \n  }, \n  \"tablet\": { \n    \"toolkit\": \"modern\", \n    //classic \"theme\": \"theme-windows\" \n    //theme-crisp-touch \n  } \n}\n```\n\nYou can set the tablet theme to windows mobile, or in case you prefer to make use of the classic toolkit, then switch the theme to \"theme-crisp-touch\" for more whitespace around buttons and links, and bigger icons and buttons. So you won’t miss tap. My **index.html** file, has an `Ext.beforeLoad` method, that looks like this: \n\n``` JavaScript\nExt.beforeLoad = function (tags) { \n  var s = location.search, profile; \n  if (s.match(/desktop/)) { \n    profile = 'desktop'; \n  } else if (s.match(/tablet/)) { \n    profile = 'tablet'; \n  } else { profile = tags.desktop ? 'desktop' : 'tablet'; \n  } Ext.manifest = profile; \n};\n```\n\n`Ext.platformTags` is a singleton [http://docs.sencha.com/extjs/6.0.0/classic/Ext.html#property-platformTags](http://docs.sencha.com/extjs/6.0.0/classic/Ext.html#property-platformTags) within Ext JS which can contain information about what type of device I am running on. When I execute this command on my Windows Surfarce Pro tablet, I get the following information: \n\n``` JavaScript\nExt.platformTags.tablet > false Ext.platformTags.touch > 10 Ext.platformTags.edge > 15 \n```\n\n  \nIf I switch to touch / tablet mode, for example by removing my tablet from the dock: \n\n``` JavaScript\nExt.platformTags.tablet > false Ext.platformTags.touch > 10 Ext.platformTags.edge > 15 \n```\n\nHmm. Not what I expected. Unfortunately, there is no out of the box way, on how you can detect the tablet mode, from your browser, or from the `Ext.platformTags` singleton. Now obviously you can create a button in the top of your app, which contains an onclick handler that does something like this: \n\n``` JavaScript\nonTablet: function(){ \n  var url = window.location.href; \n  url = url.split('?')[0]; window.location.href = url + '?tablet'; \n}, \nonDesktop: function(){ \n  var url = window.location.href; url = url.split('?')[0]; window.location.href = url + '?desktop';\n}\n```\n\nIt would be nicer, if my device can detect this mode switch programmatically. Unfortunately, by the time of writing there is no HTML5 / JavaScript API solution, which can detect mode changes. I tried to look into projects like Apache Cordova, to figure out if there are native API solutions, but I couldn’t find it either. I can’t check on touch input either, because on a hybrid machine, like the surface pro, touch input works regardless switching the mode, since the screen is just a touch screen. So `navigator.pointerEnabled` will always return true. So for now, we are left with a trick. It’s a smart trick though. And it won’t work in IE11 or below. Which is ok, since for our demo, we will make use of the modern toolkit for tablet mode, and modern toolkit is for modern browsers, like Microsoft Edge. **However, it won’t work in any other browser either. So not, in Google Chrome or Firefox. For those browsers, you will have to stick with the button switch approach. This might be an ok solution for you, since we are talking here about developing universal windows apps.** \n\nIn tablet mode; there is no browser scrollbar. The browser scrollbar will be 0, while on desktop mode, it will be a value in pixels. (like 12px). Now, user: robocat created a working JavaScript example in a JSBin, where you can see a working demo: https://output.jsbin.com/puseco. The trick here, is to add an hidden div to your page body with overflow scroll, to start calculating the scrollWidth. Now I was super amazed and surprised, but apparently Ext JS already has a built-in function like this! Yay. So you only need to call: `Ext.getScrollbarSize(true)` where you are forcing it to re-check it: http://docs.sencha.com/extjs/6.0.0/classic/Ext.html#method-getScrollbarSize So on my Windows Surface Pro, in desktop mode, it will return: \n\n``` JavaScript\nExt.getScrollbarSize(true).height > 12 Ext.getScrollbarSize(true).width > 12 \n```\n\nAnd in tablet mode: \n\n``` JavaScript\nExt.getScrollbarSize(true).height >0 Ext.getScrollbarSize(true).width >0 \n```\n\nGreat! We are getting close. Now let’s check and see if we can detect it automatically! Most of the times, when switching modes, it will also fire a window resize [http://docs.sencha.com/extjs/6.0.0/classic/Ext.container.Viewport.html#event-resize](http://docs.sencha.com/extjs/6.0.0/classic/Ext.container.Viewport.html#event-resize) or a childmove [http://docs.sencha.com/extjs/6.0.0/classic/Ext.container.Viewport.html#event-childmove](http://docs.sencha.com/extjs/6.0.0/classic/Ext.container.Viewport.html#event-childmove) event. We can attach a resize listener on an `Ext.Viewport`, like our **main.js** file, and run the mode switch. Note the extra check that I created to make sure you are switching profiles. (Otherwise your app would keep on refreshing.) **Main.js** \n\n``` JavaScript\nlisteners: { \n  resize: 'onMainResize', \n  childmove: 'onMainResize' \n}, \n```\n\n**MainController.js** \n\n``` JavaScript\nonMainResize: function(){ \n  var url = window.location.href; \n  url = url.split('?')[0]; \n  //console.log(Ext.getScrollbarSize(true).height == 0); //console.log(Ext.manifest.profile); \n  if ( Ext.platformTags.edge > 0 && Ext.manifest.profile == 'desktop' && Ext.getScrollbarSize(true).width == 0 && Ext.getScrollbarSize(true).height == 0 ) {    window.location.href = url + '?tablet'; } \n  else if ( Ext.platformTags.edge > 0 && Ext.manifest.profile == 'tablet' && Ext.getScrollbarSize(true).width != 0 && Ext.getScrollbarSize(true).height != 0 ) {      window.location.href = url + '?desktop'; } },\n  ```\n\n  Let’s finish this article with a bonus topic. Sencha has responsiveConfig to change configuration on runtime, based on criteria. [http://docs.sencha.com/extjs/6.0.0/classic/Ext.plugin.Responsive.htm](http://docs.sencha.com/extjs/6.0.0/classic/Ext.plugin.Responsive.html). \n  \n  Responsive Design in Ext JS, means it’s JavaScript configuration, which means that you can write any type of criteria. It also means, that you can change anything you like on runtime. This doesn’t necessary means that you have to change the look and feel. You can change anything, so for example also load different models, redraw or refresh a page. (..because you can override a setter/update method). Here’s a simple example. Any property can be configured as long as it has an setter under the hood. (if not, you can create your own setters of course.) \n  \n``` JavaScript\n  plugins: ['responsive'],\n  responsiveConfig: { \n    tall: { tabPosition: 'left' }, \n    wide: { tabPosition: 'bottom' } \n  },\n```\n\nNow look into this customized example, where I override the updateMethod \n  \n``` JavaScript \nconfig: { customTabPanel: false }, \nplugins: ['responsive'], \nresponsiveConfig: { tall: { \n  customTabPanel: true }, \n  wide: { customTabPanel: false } \n}, updateCustomTabPanel: function(isCustomTabPanel){ \n    if(isCustomTabPanel){ \n      //manually build my tabpanel, and do a whole bunch of //other stuff, like creating models or something \n      //or destroying a screen and rebuild it \n    } else { \n      //code for when customTabPanel is false } } \n```\n\nThe criteria to choose from are: `tall` — Viewport width < height regardless of device type `wide` — Viewport width > height regardless of device type. `landscape` — Like wide, but always true on desktop devices `portrait` — Like tall, but always false on desktop devices `width` — An expression that tests for the specific width of the viewport `height `— An expression that tests for the specific height of the viewport `platform` — An object containing various booleans describing the platform So how can you create a custom criteria? With responsiveFormulas! [http://docs.sencha.com/extjs/6.0.0/classic/Ext.mixin.Responsive.html#cfg-responsiveFormulas](http://docs.sencha.com/extjs/6.0.0/classic/Ext.mixin.Responsive.html#cfg-responsiveFormulas) \n\n``` JavaScript\nresponsiveFormulas: { \n  touch: function(context) { \n    return Ext.feature.has.Touch; \n  }, \n  notTouch: function(context) { \n    return !Ext.feature.has.Touch; } \n  }, \n```\n\nI have used this example, for example in a chart. On a touch device I use pinch to zoom, and on a mouse and keyboard device, I use the crosshair interaction. Although this is a great example, it would make less sense for a windows universal app, since hybrid tablet PCs have both interfaces: touch and mouse/keyboard support. Maybe you are creating an interface that needs to support mouse/keyboard or touch support. Do you have a tablet/pc hybrid and want to play around with this? Here’s my project on Github to fork: [https://github.com/savelee/sencha-windows-universal-apps](https://github.com/savelee/sencha-windows-universal-apps) \n\n![studio](/images/studio-500x281.jpg) \n\n*(PS: I own a Microsoft Surface Pro 4, and the best thing of it, is it’s keyboard. ;) - As a small hybrid touch windows PC it’s great. As a tablet, it really sucks. No matter to what mode you switch it, it feels and breaths like a PC with touch support. Certain things in Windows are designed for mouse and keyboard usage. And also, the way how it boots, load times etc, it just shows you, it’s a PC. ..but a really good one.)*\n","slug":"universal-windows-apps-for-microsoft-surface-pro-hybrids-ms-edge-with-ext-js-6","published":1,"updated":"2018-11-30T18:59:05.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncr0009ykif52npq3rcp","content":"<p>Now that hybrid touch pc’s / tablets, like the Windows Surface Pro, got\n  popular, I often hear people asking me, if it’s possible to create Ext JS\n  apps for Windows tablets? Ext JS 6 has support for Windows 10. The classic\n  toolkit supports IE8 and up, and the modern toolkit supports the Edge\n  browser. It even contains a Windows mobile theme!</p>\n<a id=\"more\"></a>\n<p><img src=\"/images/sp4-500x326.png\" alt=\"sp4\"></p>\n<p>Ext JS 6 is also the framework, with supports you by creating universal\n  apps. With one code base you can create Windows desktop apps for mouse and\n  keyboard usage, and tablet interface for touch usage. Just generate your\n  project like: <code>sencha generate app MyWindowsApp ../mywindowsapp</code></p>\n<p>This will create a folder structure for you, with a classic and modern\n  toolkit folder, to branche out the separate views. For more information about\n  universal apps, please see my previous blog post: <a href=\"https://www.leeboonstra.com/developer/webinar-secrets-to-building-a-great-looking-universal-app/\" target=\"_blank\" rel=\"noopener\">https://www.leeboonstra.com/developer/webinar-secrets-to-building-a-great-looking-universal-app/</a></p>\n<p>The fun stuff comes into the <strong>app.json</strong> file. I’ve created\n  these build profiles:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"string\">\"builds\"</span>: &#123; </span><br><span class=\"line\">  <span class=\"string\">\"desktop\"</span>: &#123; </span><br><span class=\"line\">    <span class=\"string\">\"toolkit\"</span>: <span class=\"string\">\"classic\"</span>, </span><br><span class=\"line\">    <span class=\"string\">\"theme\"</span>: <span class=\"string\">\"theme-crisp\"</span> </span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  <span class=\"string\">\"tablet\"</span>: &#123; </span><br><span class=\"line\">    <span class=\"string\">\"toolkit\"</span>: <span class=\"string\">\"modern\"</span>, </span><br><span class=\"line\">    <span class=\"comment\">//classic \"theme\": \"theme-windows\" </span></span><br><span class=\"line\">    <span class=\"comment\">//theme-crisp-touch </span></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>You can set the tablet theme to windows mobile, or in case you prefer to\n  make use of the classic toolkit, then switch the theme to “theme-crisp-touch”\n  for more whitespace around buttons and links, and bigger icons and buttons.\n  So you won’t miss tap. My <strong>index.html</strong> file, has an <code>Ext.beforeLoad</code>\n  method, that looks like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.beforeLoad = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tags</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> s = location.search, profile; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (s.match(<span class=\"regexp\">/desktop/</span>)) &#123; </span><br><span class=\"line\">    profile = <span class=\"string\">'desktop'</span>; </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.match(<span class=\"regexp\">/tablet/</span>)) &#123; </span><br><span class=\"line\">    profile = <span class=\"string\">'tablet'</span>; </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123; profile = tags.desktop ? <span class=\"string\">'desktop'</span> : <span class=\"string\">'tablet'</span>; </span><br><span class=\"line\">  &#125; Ext.manifest = profile; </span><br><span class=\"line\">&#125;;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p><code>Ext.platformTags</code> is a singleton <a href=\"http://docs.sencha.com/extjs/6.0.0/classic/Ext.html#property-platformTags\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/6.0.0/classic/Ext.html#property-platformTags</a>\n  within Ext JS which can contain information about what type of device I am\n  running on. When I execute this command on my Windows Surfarce Pro tablet, I\n  get the following information:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.platformTags.tablet &gt; <span class=\"literal\">false</span> Ext.platformTags.touch &gt; <span class=\"number\">10</span> Ext.platformTags.edge &gt; <span class=\"number\">15</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>If I switch to touch / tablet mode, for example by removing my tablet from\n  the dock:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.platformTags.tablet &gt; <span class=\"literal\">false</span> Ext.platformTags.touch &gt; <span class=\"number\">10</span> Ext.platformTags.edge &gt; <span class=\"number\">15</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Hmm. Not what I expected. Unfortunately, there is no out of the box way, on\n  how you can detect the tablet mode, from your browser, or from the <code>Ext.platformTags</code>\n  singleton. Now obviously you can create a button in the top of your app,\n  which contains an onclick handler that does something like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">onTablet: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> url = <span class=\"built_in\">window</span>.location.href; </span><br><span class=\"line\">  url = url.split(<span class=\"string\">'?'</span>)[<span class=\"number\">0</span>]; <span class=\"built_in\">window</span>.location.href = url + <span class=\"string\">'?tablet'</span>; </span><br><span class=\"line\">&#125;, </span><br><span class=\"line\">onDesktop: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> url = <span class=\"built_in\">window</span>.location.href; url = url.split(<span class=\"string\">'?'</span>)[<span class=\"number\">0</span>]; <span class=\"built_in\">window</span>.location.href = url + <span class=\"string\">'?desktop'</span>;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>It would be nicer, if my device can detect this mode switch\n  programmatically. Unfortunately, by the time of writing there is no HTML5 /\n  JavaScript API solution, which can detect mode changes. I tried to look into\n  projects like Apache Cordova, to figure out if there are native API\n  solutions, but I couldn’t find it either. I can’t check on touch input\n  either, because on a hybrid machine, like the surface pro, touch input works\n  regardless switching the mode, since the screen is just a touch screen. So\n  <code>navigator.pointerEnabled</code> will always return true. So for now, we\n  are left with a trick. It’s a smart trick though. And it won’t work in IE11\n  or below. Which is ok, since for our demo, we will make use of the modern\n  toolkit for tablet mode, and modern toolkit is for modern browsers, like\n  Microsoft Edge. <strong>However, it won’t work in any other browser either.\n    So not, in Google Chrome or Firefox. For those browsers, you will have to\n    stick with the button switch approach. This might be an ok solution for\n    you, since we are talking here about developing universal windows apps.</strong></p>\n<p>In tablet mode; there is no browser scrollbar. The browser scrollbar will be\n  0, while on desktop mode, it will be a value in pixels. (like 12px). Now,\n  user: robocat created a working JavaScript example in a JSBin, where you can\n  see a working demo: <a href=\"https://output.jsbin.com/puseco\" target=\"_blank\" rel=\"noopener\">https://output.jsbin.com/puseco</a>.\n  The trick here, is to add an hidden div to your page body with overflow\n  scroll, to start calculating the scrollWidth. Now I was super amazed and\n  surprised, but apparently Ext JS already has a built-in function like this!\n  Yay. So you only need to call: <code>Ext.getScrollbarSize(true)</code> where\n  you are forcing it to re-check it: <a href=\"http://docs.sencha.com/extjs/6.0.0/classic/Ext.html#method-getScrollbarSize\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/6.0.0/classic/Ext.html#method-getScrollbarSize</a>\n  So on my Windows Surface Pro, in desktop mode, it will return:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.getScrollbarSize(<span class=\"literal\">true</span>).height &gt; <span class=\"number\">12</span> Ext.getScrollbarSize(<span class=\"literal\">true</span>).width &gt; <span class=\"number\">12</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>And in tablet mode:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.getScrollbarSize(<span class=\"literal\">true</span>).height &gt;<span class=\"number\">0</span> Ext.getScrollbarSize(<span class=\"literal\">true</span>).width &gt;<span class=\"number\">0</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Great! We are getting close. Now let’s check and see if we can detect it\n  automatically! Most of the times, when switching modes, it will also fire a\n  window resize <a href=\"http://docs.sencha.com/extjs/6.0.0/classic/Ext.container.Viewport.html#event-resize\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/6.0.0/classic/Ext.container.Viewport.html#event-resize</a>\n  or a childmove <a href=\"http://docs.sencha.com/extjs/6.0.0/classic/Ext.container.Viewport.html#event-childmove\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/6.0.0/classic/Ext.container.Viewport.html#event-childmove</a>\n  event. We can attach a resize listener on an <code>Ext.Viewport</code>, like\n  our <strong>main.js</strong> file, and run the mode switch. Note the extra\n  check that I created to make sure you are switching profiles. (Otherwise your\n  app would keep on refreshing.) <strong>Main.js</strong></p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">listeners: &#123; </span><br><span class=\"line\">  resize: <span class=\"string\">'onMainResize'</span>, </span><br><span class=\"line\">  childmove: <span class=\"string\">'onMainResize'</span> </span><br><span class=\"line\">&#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p><strong>MainController.js</strong></p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">onMainResize: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> url = <span class=\"built_in\">window</span>.location.href; </span><br><span class=\"line\">  url = url.split(<span class=\"string\">'?'</span>)[<span class=\"number\">0</span>]; </span><br><span class=\"line\">  <span class=\"comment\">//console.log(Ext.getScrollbarSize(true).height == 0); //console.log(Ext.manifest.profile); </span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Ext.platformTags.edge &gt; <span class=\"number\">0</span> &amp;&amp; Ext.manifest.profile == <span class=\"string\">'desktop'</span> &amp;&amp; Ext.getScrollbarSize(<span class=\"literal\">true</span>).width == <span class=\"number\">0</span> &amp;&amp; Ext.getScrollbarSize(<span class=\"literal\">true</span>).height == <span class=\"number\">0</span> ) &#123;    <span class=\"built_in\">window</span>.location.href = url + <span class=\"string\">'?tablet'</span>; &#125; </span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( Ext.platformTags.edge &gt; <span class=\"number\">0</span> &amp;&amp; Ext.manifest.profile == <span class=\"string\">'tablet'</span> &amp;&amp; Ext.getScrollbarSize(<span class=\"literal\">true</span>).width != <span class=\"number\">0</span> &amp;&amp; Ext.getScrollbarSize(<span class=\"literal\">true</span>).height != <span class=\"number\">0</span> ) &#123;      <span class=\"built_in\">window</span>.location.href = url + <span class=\"string\">'?desktop'</span>; &#125; &#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Let’s finish this article with a bonus topic. Sencha has responsiveConfig to\n  change configuration on runtime, based on criteria. <a href=\"http://docs.sencha.com/extjs/6.0.0/classic/Ext.plugin.Responsive.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/6.0.0/classic/Ext.plugin.Responsive.htm</a>.</p>\n<p>Responsive Design in Ext JS, means it’s JavaScript configuration, which\n  means that you can write any type of criteria. It also means, that you can\n  change anything you like on runtime. This doesn’t necessary means that you\n  have to change the look and feel. You can change anything, so for example\n  also load different models, redraw or refresh a page. (..because you can\n  override a setter/update method). Here’s a simple example. Any property can\n  be configured as long as it has an setter under the hood. (if not, you can\n  create your own setters of course.)</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">plugins: [<span class=\"string\">'responsive'</span>],</span><br><span class=\"line\">responsiveConfig: &#123; </span><br><span class=\"line\">  tall: &#123; <span class=\"attr\">tabPosition</span>: <span class=\"string\">'left'</span> &#125;, </span><br><span class=\"line\">  wide: &#123; <span class=\"attr\">tabPosition</span>: <span class=\"string\">'bottom'</span> &#125; </span><br><span class=\"line\">&#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Now look into this customized example, where I override the updateMethod</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">config: &#123; <span class=\"attr\">customTabPanel</span>: <span class=\"literal\">false</span> &#125;, </span><br><span class=\"line\">plugins: [<span class=\"string\">'responsive'</span>], </span><br><span class=\"line\">responsiveConfig: &#123; <span class=\"attr\">tall</span>: &#123; </span><br><span class=\"line\">  customTabPanel: <span class=\"literal\">true</span> &#125;, </span><br><span class=\"line\">  wide: &#123; <span class=\"attr\">customTabPanel</span>: <span class=\"literal\">false</span> &#125; </span><br><span class=\"line\">&#125;, <span class=\"attr\">updateCustomTabPanel</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isCustomTabPanel</span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isCustomTabPanel)&#123; </span><br><span class=\"line\">      <span class=\"comment\">//manually build my tabpanel, and do a whole bunch of //other stuff, like creating models or something </span></span><br><span class=\"line\">      <span class=\"comment\">//or destroying a screen and rebuild it </span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">      <span class=\"comment\">//code for when customTabPanel is false &#125; &#125;</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The criteria to choose from are: <code>tall</code> — Viewport width &lt;\n  height regardless of device type <code>wide</code> — Viewport width &gt;\n  height regardless of device type. <code>landscape</code> — Like wide, but\n  always true on desktop devices <code>portrait</code> — Like tall, but always\n  false on desktop devices <code>width</code> — An expression that tests for\n  the specific width of the viewport <code>height</code>— An expression that\n  tests for the specific height of the viewport <code>platform</code> — An\n  object containing various booleans describing the platform So how can you\n  create a custom criteria? With responsiveFormulas! <a href=\"http://docs.sencha.com/extjs/6.0.0/classic/Ext.mixin.Responsive.html#cfg-responsiveFormulas\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/6.0.0/classic/Ext.mixin.Responsive.html#cfg-responsiveFormulas</a></p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">responsiveFormulas: &#123; </span><br><span class=\"line\">  touch: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Ext.feature.has.Touch; </span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  notTouch: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> !Ext.feature.has.Touch; &#125; </span><br><span class=\"line\">  &#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>I have used this example, for example in a chart. On a touch device I use\n  pinch to zoom, and on a mouse and keyboard device, I use the crosshair\n  interaction. Although this is a great example, it would make less sense for a\n  windows universal app, since hybrid tablet PCs have both interfaces: touch\n  and mouse/keyboard support. Maybe you are creating an interface that needs to\n  support mouse/keyboard or touch support. Do you have a tablet/pc hybrid and\n  want to play around with this? Here’s my project on Github to fork: <a href=\"https://github.com/savelee/sencha-windows-universal-apps\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/sencha-windows-universal-apps</a></p>\n<p><img src=\"/images/studio-500x281.jpg\" alt=\"studio\"></p>\n<p><em>(PS: I own a Microsoft Surface Pro 4, and the best thing of it, is it’s\n    keyboard. ;) - As a small hybrid touch windows PC it’s great. As a tablet,\n    it really sucks. No matter to what mode you switch it, it feels and breaths\n    like a PC with touch support. Certain things in Windows are designed for\n    mouse and keyboard usage. And also, the way how it boots, load times etc,\n    it just shows you, it’s a PC. ..but a really good one.)</em></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>Now that hybrid touch pc’s / tablets, like the Windows Surface Pro, got\n  popular, I often hear people asking me, if it’s possible to create Ext JS\n  apps for Windows tablets? Ext JS 6 has support for Windows 10. The classic\n  toolkit supports IE8 and up, and the modern toolkit supports the Edge\n  browser. It even contains a Windows mobile theme!</p>","more":"<p><img src=\"/images/sp4-500x326.png\" alt=\"sp4\"></p>\n<p>Ext JS 6 is also the framework, with supports you by creating universal\n  apps. With one code base you can create Windows desktop apps for mouse and\n  keyboard usage, and tablet interface for touch usage. Just generate your\n  project like: <code>sencha generate app MyWindowsApp ../mywindowsapp</code></p>\n<p>This will create a folder structure for you, with a classic and modern\n  toolkit folder, to branche out the separate views. For more information about\n  universal apps, please see my previous blog post: <a href=\"https://www.leeboonstra.com/developer/webinar-secrets-to-building-a-great-looking-universal-app/\" target=\"_blank\" rel=\"noopener\">https://www.leeboonstra.com/developer/webinar-secrets-to-building-a-great-looking-universal-app/</a></p>\n<p>The fun stuff comes into the <strong>app.json</strong> file. I’ve created\n  these build profiles:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"string\">\"builds\"</span>: &#123; </span><br><span class=\"line\">  <span class=\"string\">\"desktop\"</span>: &#123; </span><br><span class=\"line\">    <span class=\"string\">\"toolkit\"</span>: <span class=\"string\">\"classic\"</span>, </span><br><span class=\"line\">    <span class=\"string\">\"theme\"</span>: <span class=\"string\">\"theme-crisp\"</span> </span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  <span class=\"string\">\"tablet\"</span>: &#123; </span><br><span class=\"line\">    <span class=\"string\">\"toolkit\"</span>: <span class=\"string\">\"modern\"</span>, </span><br><span class=\"line\">    <span class=\"comment\">//classic \"theme\": \"theme-windows\" </span></span><br><span class=\"line\">    <span class=\"comment\">//theme-crisp-touch </span></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>You can set the tablet theme to windows mobile, or in case you prefer to\n  make use of the classic toolkit, then switch the theme to “theme-crisp-touch”\n  for more whitespace around buttons and links, and bigger icons and buttons.\n  So you won’t miss tap. My <strong>index.html</strong> file, has an <code>Ext.beforeLoad</code>\n  method, that looks like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.beforeLoad = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tags</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> s = location.search, profile; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (s.match(<span class=\"regexp\">/desktop/</span>)) &#123; </span><br><span class=\"line\">    profile = <span class=\"string\">'desktop'</span>; </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.match(<span class=\"regexp\">/tablet/</span>)) &#123; </span><br><span class=\"line\">    profile = <span class=\"string\">'tablet'</span>; </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123; profile = tags.desktop ? <span class=\"string\">'desktop'</span> : <span class=\"string\">'tablet'</span>; </span><br><span class=\"line\">  &#125; Ext.manifest = profile; </span><br><span class=\"line\">&#125;;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p><code>Ext.platformTags</code> is a singleton <a href=\"http://docs.sencha.com/extjs/6.0.0/classic/Ext.html#property-platformTags\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/6.0.0/classic/Ext.html#property-platformTags</a>\n  within Ext JS which can contain information about what type of device I am\n  running on. When I execute this command on my Windows Surfarce Pro tablet, I\n  get the following information:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.platformTags.tablet &gt; <span class=\"literal\">false</span> Ext.platformTags.touch &gt; <span class=\"number\">10</span> Ext.platformTags.edge &gt; <span class=\"number\">15</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>If I switch to touch / tablet mode, for example by removing my tablet from\n  the dock:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.platformTags.tablet &gt; <span class=\"literal\">false</span> Ext.platformTags.touch &gt; <span class=\"number\">10</span> Ext.platformTags.edge &gt; <span class=\"number\">15</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Hmm. Not what I expected. Unfortunately, there is no out of the box way, on\n  how you can detect the tablet mode, from your browser, or from the <code>Ext.platformTags</code>\n  singleton. Now obviously you can create a button in the top of your app,\n  which contains an onclick handler that does something like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">onTablet: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> url = <span class=\"built_in\">window</span>.location.href; </span><br><span class=\"line\">  url = url.split(<span class=\"string\">'?'</span>)[<span class=\"number\">0</span>]; <span class=\"built_in\">window</span>.location.href = url + <span class=\"string\">'?tablet'</span>; </span><br><span class=\"line\">&#125;, </span><br><span class=\"line\">onDesktop: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> url = <span class=\"built_in\">window</span>.location.href; url = url.split(<span class=\"string\">'?'</span>)[<span class=\"number\">0</span>]; <span class=\"built_in\">window</span>.location.href = url + <span class=\"string\">'?desktop'</span>;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>It would be nicer, if my device can detect this mode switch\n  programmatically. Unfortunately, by the time of writing there is no HTML5 /\n  JavaScript API solution, which can detect mode changes. I tried to look into\n  projects like Apache Cordova, to figure out if there are native API\n  solutions, but I couldn’t find it either. I can’t check on touch input\n  either, because on a hybrid machine, like the surface pro, touch input works\n  regardless switching the mode, since the screen is just a touch screen. So\n  <code>navigator.pointerEnabled</code> will always return true. So for now, we\n  are left with a trick. It’s a smart trick though. And it won’t work in IE11\n  or below. Which is ok, since for our demo, we will make use of the modern\n  toolkit for tablet mode, and modern toolkit is for modern browsers, like\n  Microsoft Edge. <strong>However, it won’t work in any other browser either.\n    So not, in Google Chrome or Firefox. For those browsers, you will have to\n    stick with the button switch approach. This might be an ok solution for\n    you, since we are talking here about developing universal windows apps.</strong></p>\n<p>In tablet mode; there is no browser scrollbar. The browser scrollbar will be\n  0, while on desktop mode, it will be a value in pixels. (like 12px). Now,\n  user: robocat created a working JavaScript example in a JSBin, where you can\n  see a working demo: <a href=\"https://output.jsbin.com/puseco\" target=\"_blank\" rel=\"noopener\">https://output.jsbin.com/puseco</a>.\n  The trick here, is to add an hidden div to your page body with overflow\n  scroll, to start calculating the scrollWidth. Now I was super amazed and\n  surprised, but apparently Ext JS already has a built-in function like this!\n  Yay. So you only need to call: <code>Ext.getScrollbarSize(true)</code> where\n  you are forcing it to re-check it: <a href=\"http://docs.sencha.com/extjs/6.0.0/classic/Ext.html#method-getScrollbarSize\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/6.0.0/classic/Ext.html#method-getScrollbarSize</a>\n  So on my Windows Surface Pro, in desktop mode, it will return:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.getScrollbarSize(<span class=\"literal\">true</span>).height &gt; <span class=\"number\">12</span> Ext.getScrollbarSize(<span class=\"literal\">true</span>).width &gt; <span class=\"number\">12</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>And in tablet mode:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.getScrollbarSize(<span class=\"literal\">true</span>).height &gt;<span class=\"number\">0</span> Ext.getScrollbarSize(<span class=\"literal\">true</span>).width &gt;<span class=\"number\">0</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Great! We are getting close. Now let’s check and see if we can detect it\n  automatically! Most of the times, when switching modes, it will also fire a\n  window resize <a href=\"http://docs.sencha.com/extjs/6.0.0/classic/Ext.container.Viewport.html#event-resize\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/6.0.0/classic/Ext.container.Viewport.html#event-resize</a>\n  or a childmove <a href=\"http://docs.sencha.com/extjs/6.0.0/classic/Ext.container.Viewport.html#event-childmove\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/6.0.0/classic/Ext.container.Viewport.html#event-childmove</a>\n  event. We can attach a resize listener on an <code>Ext.Viewport</code>, like\n  our <strong>main.js</strong> file, and run the mode switch. Note the extra\n  check that I created to make sure you are switching profiles. (Otherwise your\n  app would keep on refreshing.) <strong>Main.js</strong></p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">listeners: &#123; </span><br><span class=\"line\">  resize: <span class=\"string\">'onMainResize'</span>, </span><br><span class=\"line\">  childmove: <span class=\"string\">'onMainResize'</span> </span><br><span class=\"line\">&#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p><strong>MainController.js</strong></p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">onMainResize: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> url = <span class=\"built_in\">window</span>.location.href; </span><br><span class=\"line\">  url = url.split(<span class=\"string\">'?'</span>)[<span class=\"number\">0</span>]; </span><br><span class=\"line\">  <span class=\"comment\">//console.log(Ext.getScrollbarSize(true).height == 0); //console.log(Ext.manifest.profile); </span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Ext.platformTags.edge &gt; <span class=\"number\">0</span> &amp;&amp; Ext.manifest.profile == <span class=\"string\">'desktop'</span> &amp;&amp; Ext.getScrollbarSize(<span class=\"literal\">true</span>).width == <span class=\"number\">0</span> &amp;&amp; Ext.getScrollbarSize(<span class=\"literal\">true</span>).height == <span class=\"number\">0</span> ) &#123;    <span class=\"built_in\">window</span>.location.href = url + <span class=\"string\">'?tablet'</span>; &#125; </span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( Ext.platformTags.edge &gt; <span class=\"number\">0</span> &amp;&amp; Ext.manifest.profile == <span class=\"string\">'tablet'</span> &amp;&amp; Ext.getScrollbarSize(<span class=\"literal\">true</span>).width != <span class=\"number\">0</span> &amp;&amp; Ext.getScrollbarSize(<span class=\"literal\">true</span>).height != <span class=\"number\">0</span> ) &#123;      <span class=\"built_in\">window</span>.location.href = url + <span class=\"string\">'?desktop'</span>; &#125; &#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Let’s finish this article with a bonus topic. Sencha has responsiveConfig to\n  change configuration on runtime, based on criteria. <a href=\"http://docs.sencha.com/extjs/6.0.0/classic/Ext.plugin.Responsive.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/6.0.0/classic/Ext.plugin.Responsive.htm</a>.</p>\n<p>Responsive Design in Ext JS, means it’s JavaScript configuration, which\n  means that you can write any type of criteria. It also means, that you can\n  change anything you like on runtime. This doesn’t necessary means that you\n  have to change the look and feel. You can change anything, so for example\n  also load different models, redraw or refresh a page. (..because you can\n  override a setter/update method). Here’s a simple example. Any property can\n  be configured as long as it has an setter under the hood. (if not, you can\n  create your own setters of course.)</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">plugins: [<span class=\"string\">'responsive'</span>],</span><br><span class=\"line\">responsiveConfig: &#123; </span><br><span class=\"line\">  tall: &#123; <span class=\"attr\">tabPosition</span>: <span class=\"string\">'left'</span> &#125;, </span><br><span class=\"line\">  wide: &#123; <span class=\"attr\">tabPosition</span>: <span class=\"string\">'bottom'</span> &#125; </span><br><span class=\"line\">&#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Now look into this customized example, where I override the updateMethod</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">config: &#123; <span class=\"attr\">customTabPanel</span>: <span class=\"literal\">false</span> &#125;, </span><br><span class=\"line\">plugins: [<span class=\"string\">'responsive'</span>], </span><br><span class=\"line\">responsiveConfig: &#123; <span class=\"attr\">tall</span>: &#123; </span><br><span class=\"line\">  customTabPanel: <span class=\"literal\">true</span> &#125;, </span><br><span class=\"line\">  wide: &#123; <span class=\"attr\">customTabPanel</span>: <span class=\"literal\">false</span> &#125; </span><br><span class=\"line\">&#125;, <span class=\"attr\">updateCustomTabPanel</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isCustomTabPanel</span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isCustomTabPanel)&#123; </span><br><span class=\"line\">      <span class=\"comment\">//manually build my tabpanel, and do a whole bunch of //other stuff, like creating models or something </span></span><br><span class=\"line\">      <span class=\"comment\">//or destroying a screen and rebuild it </span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">      <span class=\"comment\">//code for when customTabPanel is false &#125; &#125;</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The criteria to choose from are: <code>tall</code> — Viewport width &lt;\n  height regardless of device type <code>wide</code> — Viewport width &gt;\n  height regardless of device type. <code>landscape</code> — Like wide, but\n  always true on desktop devices <code>portrait</code> — Like tall, but always\n  false on desktop devices <code>width</code> — An expression that tests for\n  the specific width of the viewport <code>height</code>— An expression that\n  tests for the specific height of the viewport <code>platform</code> — An\n  object containing various booleans describing the platform So how can you\n  create a custom criteria? With responsiveFormulas! <a href=\"http://docs.sencha.com/extjs/6.0.0/classic/Ext.mixin.Responsive.html#cfg-responsiveFormulas\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/6.0.0/classic/Ext.mixin.Responsive.html#cfg-responsiveFormulas</a></p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">responsiveFormulas: &#123; </span><br><span class=\"line\">  touch: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Ext.feature.has.Touch; </span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  notTouch: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> !Ext.feature.has.Touch; &#125; </span><br><span class=\"line\">  &#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>I have used this example, for example in a chart. On a touch device I use\n  pinch to zoom, and on a mouse and keyboard device, I use the crosshair\n  interaction. Although this is a great example, it would make less sense for a\n  windows universal app, since hybrid tablet PCs have both interfaces: touch\n  and mouse/keyboard support. Maybe you are creating an interface that needs to\n  support mouse/keyboard or touch support. Do you have a tablet/pc hybrid and\n  want to play around with this? Here’s my project on Github to fork: <a href=\"https://github.com/savelee/sencha-windows-universal-apps\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/sencha-windows-universal-apps</a></p>\n<p><img src=\"/images/studio-500x281.jpg\" alt=\"studio\"></p>\n<p><em>(PS: I own a Microsoft Surface Pro 4, and the best thing of it, is it’s\n    keyboard. ;) - As a small hybrid touch windows PC it’s great. As a tablet,\n    it really sucks. No matter to what mode you switch it, it feels and breaths\n    like a PC with touch support. Certain things in Windows are designed for\n    mouse and keyboard usage. And also, the way how it boots, load times etc,\n    it just shows you, it’s a PC. ..but a really good one.)</em></p>"},{"title":"How to Build a Great Looking Universal App with Ext JS – Part 1","date":"2015-11-04T09:26:15.000Z","_content":"\n### Background\n\nBack in 2011, I wanted to create an app. I love music, and I am a huge fan of Spotify. I love that I can listen to a huge database of songs. The only thing that always bothered me was that I had to manually search for songs. That’s fine when I’m using my laptop, but it’s not so great when I’m walking or biking, and I use Spotify on my phone. Typing on a virtual keyboard is just not fun.\n\nSo, I created a Sencha Touch app that could connect to my LastFm account (an online database that can “scrobble” and save music that you’ve listened to). My app lists all the music I like, and with one button tap, I can play the song in Spotify.\n\n<!--more-->\n\n![Sencha Touch app](/images/build-universal-app-img1.png)\n\nSencha Touch was great for building this app. It has a powerful, smooth scrolling list and stylesheets that make my app look great on my iPhone. It was quick to build and ready to use.\n\nI liked this app so much that I decided to share it. I deployed my app in the Apple App Store, by wrapping it with Cordova. Then, I noticed I was also using it on my desktop. It was just easier to choose songs, so I deployed my app on my webserver and hosted it in the Google Chrome Web Store.\n\nA week later, I checked my reviews on the Chrome Web Store. I was heartbroken to see that I only had bad reviews: “What a weird looking app” and “Why can’t I use the mouse wheel to scroll?” It totally made sense though – my app was originally designed for iPhones. It looked like an iPhone app because of the stylesheet, but it behaved like a touch app because it was built with Sencha Touch using Touch events & gestures. To scroll the music list, users had to tap the list and drag it up or down. That works great on touch devices, but it’s odd on a desktop. I realized that I needed a desktop version of my app too.\n\n![Ext JS app](/images/build-universal-app-img2.png)\n\nThat was when I started to play around with Ext JS, which is a great framework for creating desktop applications. It has fast performing desktop components like the grid, and a similar MVC architecture and class system as in Sencha Touch 2. I created the desktop version, and later I migrated my Ext JS 4 app to Ext JS 5. I chose Ext JS 5 because I wanted to clean up my code and use the new MVVM pattern, and also use touch events, responsive design, and stylesheets for a tablet version of my app. But when I realized I had to maintain two different code bases, with two frameworks, I turned to Ext JS 6.\n\nNow, with Ext JS 6, you can create universal apps. With one codebase, your apps run on any supported device type.\n\n#### Tech Specs of My App\n\nBefore we move on, here are some technical specs for how my app works.\n\n*   To play songs in Spotify, I use URL Schemes.\n*   To retrieve data from LastFm, I use an external JavaScript API, that must be in a custom written proxy, which is part of a package.\n*   The LastFm username is saved in the HTML5 browser local storage.\n*   Phones will get modern touch components, for now just iOS views.\n*   Tablets and desktops will get rich classic desktop components, with a Spotify look & feel.\n*   MVVM pattern is used.\n\n### Universal Apps vs Responsive Web Design\n\nThere are differences in how Universal Apps work in Sencha frameworks, and how _Responsive Web Design_ is used for mobile websites to respond to certain environments.\n\nResponsive Design for websites is usually done within a stylesheet using relative units, values in percentages, and breakpoints (mediaqueries) that can re-order and show/hide certain HTML elements.\n\nTake a look at the code snippet below:\n\n``` Scss\n@media all and (min-width: 800px) and (max-width: 1024px) {\n ul li.products {\n    width: 50%;\n    display: inline-block;\n }\n}\n@media all and (min-width: 1025px) {\n ul li.products {\n    width: 25%;\ndisplay: inline-block;\n }\n}\n@media all and (max-width: 799px){\n ul li.products {\n    display: none;\n }\n}\n```\n\nThe previous code example has a few breakpoints. Small screens with a viewport width smaller than 799px, screens between 800px and 1024px, and large viewports with screens wider than 1025px. On big screens, there are list elements positions next to each other with a size of 25% width. For medium screens it’s 50%, and for small screens (such as phones), the list will be hidden.\n\nThis technique is great for websites, but not for real world applications. Why?\n\n*   When you are on a mobile phone, chances are that you are on a slow mobile network or using an (expensive) data plan. That’s very expensive, and you’re not even seeing these elements and data.\n*   Also, you may want to change the text on a smaller screen size. I’ve worked a lot with copywriters, and they believe that text on a phone should be written differently than what’s on a desktop. Nobody likes to read whole books of text on a small screen.\n*   By using only responsive web design, you’re probably missing a lot of opportunities to refine content or use device features, because you’re serving one code base. For example, your fancy floating calendar component looks great on a desktop, but it doesn’t work well on a phone. A text hyperlink works fine when you control your app with a mouse, but you will probably have trouble tapping it on a small touch device. Users are used to native app behavior, such as the built-in datepicker on an iPhone, or a big button as a link. Most often, responsive mobile websites don’t deliver the same experience as a native app.\n\nThat’s why the Sencha approach is different and better. Universal apps in Ext JS 6 are far beyond just responsive design. We know you want to control the UI with more than just re-ordering, show/hiding elements. There are various approaches that you can take, and most of these, are not just limited to views. You can also control data and behavior.\n\n**Toolkit / Universal app approach:** The user experience is chosen before the framework is downloaded.\n\n**How it works:** You can create different views with touch (modern toolkit) or desktop (classic toolkit) component sets. The microloader will detect your device, OS, or browser, and serve the right component set for you, by loading a build profile. You can attach a particular theme to that build profile. You can create as many build profiles as you like, and it’s not only limited to views, you can also serve different data stores or behavior code.\n\nIn the screenshot below, you can see how my application looks on a desktop, and how it looks on an iPhone:\n\n![App UI on desktop and phone](/images/build-universal-app-img3.png)\n\n**Device specific stylesheets:** The stylesheet is chosen before the framework is downloaded.\n\n**How it works:** Ext JS 6 ships with themes (Sass stylesheets) that are great for classic toolkit, touch interfaces (with the look and feel of iOS, Android, and Windows Phone), or stylesheets that look great on both toolkits. The microloader can detect the environment, and serve the correct theme.\n\n![Device specific stylesheets](/images/build-universal-app-img4.png)\n\n**Device Profiles:** The profile for each user is chosen when the application launches.\n\n**How it works:** It’s possible to create a device profile, which contains different code or different component positioning. For example, when you open an email app on your phone, you see a list with an overview of all emails, and when you tap on an item, it opens the email on top. However, when you open the email application on a tablet, the list is docked to the left, and the body of the email is positioned on the right side of the screen. You can achieve these layouts with device profiles. It’s not just re-positioning certain components (list docked or not). It’s also different behavior under the hood (when you tap an email, it opens an extra window on top vs. loading next to the list).\n\n![Device profiles](/images/build-universal-app-img5.png)\n\n**Responsive Design with JavaScript:** Code responds to custom criteria at runtime.\n\n**How it works:** JavaScript responds to certain conditions (like screen size) at runtime. It’s possible to create any custom condition and have the view, data, or behavior respond.\n\n![Responsive Design with JavaScript](/images/build-universal-app-img6.gif)\n\n**Traditional Web Design with CSS:** The view responds to an environment at runtime.\n\n**How it works:** You can also use traditional responsive web design. You can use it for styling simple elements in views.\n\n### Conclusion\n\nIn this article, I’ve described what an Ext JS 6 universal app is, what I like about the universal app approach, and why I converted my app. In Part 2, I’ll show you exactly how I converted my music app to a universal app.","source":"_posts/universal-app-ext6-p1.md","raw":"---\ntitle: How to Build a Great Looking Universal App with Ext JS – Part 1\ntags:\n  - Desktop\n  - Mobile\n  - Universal App\ncategories:\n  - Ext JS\ndate: 2015-11-04 10:26:15\n---\n\n### Background\n\nBack in 2011, I wanted to create an app. I love music, and I am a huge fan of Spotify. I love that I can listen to a huge database of songs. The only thing that always bothered me was that I had to manually search for songs. That’s fine when I’m using my laptop, but it’s not so great when I’m walking or biking, and I use Spotify on my phone. Typing on a virtual keyboard is just not fun.\n\nSo, I created a Sencha Touch app that could connect to my LastFm account (an online database that can “scrobble” and save music that you’ve listened to). My app lists all the music I like, and with one button tap, I can play the song in Spotify.\n\n<!--more-->\n\n![Sencha Touch app](/images/build-universal-app-img1.png)\n\nSencha Touch was great for building this app. It has a powerful, smooth scrolling list and stylesheets that make my app look great on my iPhone. It was quick to build and ready to use.\n\nI liked this app so much that I decided to share it. I deployed my app in the Apple App Store, by wrapping it with Cordova. Then, I noticed I was also using it on my desktop. It was just easier to choose songs, so I deployed my app on my webserver and hosted it in the Google Chrome Web Store.\n\nA week later, I checked my reviews on the Chrome Web Store. I was heartbroken to see that I only had bad reviews: “What a weird looking app” and “Why can’t I use the mouse wheel to scroll?” It totally made sense though – my app was originally designed for iPhones. It looked like an iPhone app because of the stylesheet, but it behaved like a touch app because it was built with Sencha Touch using Touch events & gestures. To scroll the music list, users had to tap the list and drag it up or down. That works great on touch devices, but it’s odd on a desktop. I realized that I needed a desktop version of my app too.\n\n![Ext JS app](/images/build-universal-app-img2.png)\n\nThat was when I started to play around with Ext JS, which is a great framework for creating desktop applications. It has fast performing desktop components like the grid, and a similar MVC architecture and class system as in Sencha Touch 2. I created the desktop version, and later I migrated my Ext JS 4 app to Ext JS 5. I chose Ext JS 5 because I wanted to clean up my code and use the new MVVM pattern, and also use touch events, responsive design, and stylesheets for a tablet version of my app. But when I realized I had to maintain two different code bases, with two frameworks, I turned to Ext JS 6.\n\nNow, with Ext JS 6, you can create universal apps. With one codebase, your apps run on any supported device type.\n\n#### Tech Specs of My App\n\nBefore we move on, here are some technical specs for how my app works.\n\n*   To play songs in Spotify, I use URL Schemes.\n*   To retrieve data from LastFm, I use an external JavaScript API, that must be in a custom written proxy, which is part of a package.\n*   The LastFm username is saved in the HTML5 browser local storage.\n*   Phones will get modern touch components, for now just iOS views.\n*   Tablets and desktops will get rich classic desktop components, with a Spotify look & feel.\n*   MVVM pattern is used.\n\n### Universal Apps vs Responsive Web Design\n\nThere are differences in how Universal Apps work in Sencha frameworks, and how _Responsive Web Design_ is used for mobile websites to respond to certain environments.\n\nResponsive Design for websites is usually done within a stylesheet using relative units, values in percentages, and breakpoints (mediaqueries) that can re-order and show/hide certain HTML elements.\n\nTake a look at the code snippet below:\n\n``` Scss\n@media all and (min-width: 800px) and (max-width: 1024px) {\n ul li.products {\n    width: 50%;\n    display: inline-block;\n }\n}\n@media all and (min-width: 1025px) {\n ul li.products {\n    width: 25%;\ndisplay: inline-block;\n }\n}\n@media all and (max-width: 799px){\n ul li.products {\n    display: none;\n }\n}\n```\n\nThe previous code example has a few breakpoints. Small screens with a viewport width smaller than 799px, screens between 800px and 1024px, and large viewports with screens wider than 1025px. On big screens, there are list elements positions next to each other with a size of 25% width. For medium screens it’s 50%, and for small screens (such as phones), the list will be hidden.\n\nThis technique is great for websites, but not for real world applications. Why?\n\n*   When you are on a mobile phone, chances are that you are on a slow mobile network or using an (expensive) data plan. That’s very expensive, and you’re not even seeing these elements and data.\n*   Also, you may want to change the text on a smaller screen size. I’ve worked a lot with copywriters, and they believe that text on a phone should be written differently than what’s on a desktop. Nobody likes to read whole books of text on a small screen.\n*   By using only responsive web design, you’re probably missing a lot of opportunities to refine content or use device features, because you’re serving one code base. For example, your fancy floating calendar component looks great on a desktop, but it doesn’t work well on a phone. A text hyperlink works fine when you control your app with a mouse, but you will probably have trouble tapping it on a small touch device. Users are used to native app behavior, such as the built-in datepicker on an iPhone, or a big button as a link. Most often, responsive mobile websites don’t deliver the same experience as a native app.\n\nThat’s why the Sencha approach is different and better. Universal apps in Ext JS 6 are far beyond just responsive design. We know you want to control the UI with more than just re-ordering, show/hiding elements. There are various approaches that you can take, and most of these, are not just limited to views. You can also control data and behavior.\n\n**Toolkit / Universal app approach:** The user experience is chosen before the framework is downloaded.\n\n**How it works:** You can create different views with touch (modern toolkit) or desktop (classic toolkit) component sets. The microloader will detect your device, OS, or browser, and serve the right component set for you, by loading a build profile. You can attach a particular theme to that build profile. You can create as many build profiles as you like, and it’s not only limited to views, you can also serve different data stores or behavior code.\n\nIn the screenshot below, you can see how my application looks on a desktop, and how it looks on an iPhone:\n\n![App UI on desktop and phone](/images/build-universal-app-img3.png)\n\n**Device specific stylesheets:** The stylesheet is chosen before the framework is downloaded.\n\n**How it works:** Ext JS 6 ships with themes (Sass stylesheets) that are great for classic toolkit, touch interfaces (with the look and feel of iOS, Android, and Windows Phone), or stylesheets that look great on both toolkits. The microloader can detect the environment, and serve the correct theme.\n\n![Device specific stylesheets](/images/build-universal-app-img4.png)\n\n**Device Profiles:** The profile for each user is chosen when the application launches.\n\n**How it works:** It’s possible to create a device profile, which contains different code or different component positioning. For example, when you open an email app on your phone, you see a list with an overview of all emails, and when you tap on an item, it opens the email on top. However, when you open the email application on a tablet, the list is docked to the left, and the body of the email is positioned on the right side of the screen. You can achieve these layouts with device profiles. It’s not just re-positioning certain components (list docked or not). It’s also different behavior under the hood (when you tap an email, it opens an extra window on top vs. loading next to the list).\n\n![Device profiles](/images/build-universal-app-img5.png)\n\n**Responsive Design with JavaScript:** Code responds to custom criteria at runtime.\n\n**How it works:** JavaScript responds to certain conditions (like screen size) at runtime. It’s possible to create any custom condition and have the view, data, or behavior respond.\n\n![Responsive Design with JavaScript](/images/build-universal-app-img6.gif)\n\n**Traditional Web Design with CSS:** The view responds to an environment at runtime.\n\n**How it works:** You can also use traditional responsive web design. You can use it for styling simple elements in views.\n\n### Conclusion\n\nIn this article, I’ve described what an Ext JS 6 universal app is, what I like about the universal app approach, and why I converted my app. In Part 2, I’ll show you exactly how I converted my music app to a universal app.","slug":"universal-app-ext6-p1","published":1,"updated":"2018-11-30T18:29:22.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncr100a2kif5ohtebrw8","content":"<h3 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h3>\n<p>Back in 2011, I wanted to create an app. I love music, and I am a huge fan\n  of Spotify. I love that I can listen to a huge database of songs. The only\n  thing that always bothered me was that I had to manually search for songs.\n  That’s fine when I’m using my laptop, but it’s not so great when I’m walking\n  or biking, and I use Spotify on my phone. Typing on a virtual keyboard is\n  just not fun.</p>\n<p>So, I created a Sencha Touch app that could connect to my LastFm account (an\n  online database that can “scrobble” and save music that you’ve listened to).\n  My app lists all the music I like, and with one button tap, I can play the\n  song in Spotify.</p>\n<a id=\"more\"></a>\n<p><img src=\"/images/build-universal-app-img1.png\" alt=\"Sencha Touch app\"></p>\n<p>Sencha Touch was great for building this app. It has a powerful, smooth\n  scrolling list and stylesheets that make my app look great on my iPhone. It\n  was quick to build and ready to use.</p>\n<p>I liked this app so much that I decided to share it. I deployed my app in\n  the Apple App Store, by wrapping it with Cordova. Then, I noticed I was also\n  using it on my desktop. It was just easier to choose songs, so I deployed my\n  app on my webserver and hosted it in the Google Chrome Web Store.</p>\n<p>A week later, I checked my reviews on the Chrome Web Store. I was\n  heartbroken to see that I only had bad reviews: “What a weird looking app”\n  and “Why can’t I use the mouse wheel to scroll?” It totally made sense though\n  – my app was originally designed for iPhones. It looked like an iPhone app\n  because of the stylesheet, but it behaved like a touch app because it was\n  built with Sencha Touch using Touch events &amp; gestures. To scroll the\n  music list, users had to tap the list and drag it up or down. That works\n  great on touch devices, but it’s odd on a desktop. I realized that I needed a\n  desktop version of my app too.</p>\n<p><img src=\"/images/build-universal-app-img2.png\" alt=\"Ext JS app\"></p>\n<p>That was when I started to play around with Ext JS, which is a great\n  framework for creating desktop applications. It has fast performing desktop\n  components like the grid, and a similar MVC architecture and class system as\n  in Sencha Touch 2. I created the desktop version, and later I migrated my Ext\n  JS 4 app to Ext JS 5. I chose Ext JS 5 because I wanted to clean up my code\n  and use the new MVVM pattern, and also use touch events, responsive design,\n  and stylesheets for a tablet version of my app. But when I realized I had to\n  maintain two different code bases, with two frameworks, I turned to Ext JS 6.</p>\n<p>Now, with Ext JS 6, you can create universal apps. With one codebase, your\n  apps run on any supported device type.</p>\n<h4 id=\"Tech-Specs-of-My-App\"><a href=\"#Tech-Specs-of-My-App\" class=\"headerlink\" title=\"Tech Specs of My App\"></a>Tech\n  Specs of My App</h4>\n<p>Before we move on, here are some technical specs for how my app works.</p>\n<ul>\n  <li>To play songs in Spotify, I use URL Schemes.</li>\n  <li>To retrieve data from LastFm, I use an external JavaScript API, that must\n    be in a custom written proxy, which is part of a package.</li>\n  <li>The LastFm username is saved in the HTML5 browser local storage.</li>\n  <li>Phones will get modern touch components, for now just iOS views.</li>\n  <li>Tablets and desktops will get rich classic desktop components, with a\n    Spotify look &amp; feel.</li>\n  <li>MVVM pattern is used.</li>\n</ul>\n<h3 id=\"Universal-Apps-vs-Responsive-Web-Design\"><a href=\"#Universal-Apps-vs-Responsive-Web-Design\" class=\"headerlink\" title=\"Universal Apps vs Responsive Web Design\"></a>Universal\n  Apps vs Responsive Web Design</h3>\n<p>There are differences in how Universal Apps work in Sencha frameworks, and\n  how <em>Responsive Web Design</em> is used for mobile websites to respond to\n  certain environments.</p>\n<p>Responsive Design for websites is usually done within a stylesheet using\n  relative units, values in percentages, and breakpoints (mediaqueries) that\n  can re-order and show/hide certain HTML elements.</p>\n<p>Take a look at the code snippet below:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@<span class=\"keyword\">media</span> all and (min-width: 800px) and (max-width: 1024px) &#123;</span><br><span class=\"line\"> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-class\">.products</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> all and (min-width: 1025px) &#123;</span><br><span class=\"line\"> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-class\">.products</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\"><span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> all and (max-width: 799px)&#123;</span><br><span class=\"line\"> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-class\">.products</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The previous code example has a few breakpoints. Small screens with a\n  viewport width smaller than 799px, screens between 800px and 1024px, and\n  large viewports with screens wider than 1025px. On big screens, there are\n  list elements positions next to each other with a size of 25% width. For\n  medium screens it’s 50%, and for small screens (such as phones), the list\n  will be hidden.</p>\n<p>This technique is great for websites, but not for real world applications.\n  Why?</p>\n<ul>\n  <li>When you are on a mobile phone, chances are that you are on a slow mobile\n    network or using an (expensive) data plan. That’s very expensive, and\n    you’re not even seeing these elements and data.</li>\n  <li>Also, you may want to change the text on a smaller screen size. I’ve\n    worked a lot with copywriters, and they believe that text on a phone should\n    be written differently than what’s on a desktop. Nobody likes to read whole\n    books of text on a small screen.</li>\n  <li>By using only responsive web design, you’re probably missing a lot of\n    opportunities to refine content or use device features, because you’re\n    serving one code base. For example, your fancy floating calendar component\n    looks great on a desktop, but it doesn’t work well on a phone. A text\n    hyperlink works fine when you control your app with a mouse, but you will\n    probably have trouble tapping it on a small touch device. Users are used to\n    native app behavior, such as the built-in datepicker on an iPhone, or a big\n    button as a link. Most often, responsive mobile websites don’t deliver the\n    same experience as a native app.</li>\n</ul>\n<p>That’s why the Sencha approach is different and better. Universal apps in\n  Ext JS 6 are far beyond just responsive design. We know you want to control\n  the UI with more than just re-ordering, show/hiding elements. There are\n  various approaches that you can take, and most of these, are not just limited\n  to views. You can also control data and behavior.</p>\n<p><strong>Toolkit / Universal app approach:</strong> The user experience is\n  chosen before the framework is downloaded.</p>\n<p><strong>How it works:</strong> You can create different views with touch\n  (modern toolkit) or desktop (classic toolkit) component sets. The microloader\n  will detect your device, OS, or browser, and serve the right component set\n  for you, by loading a build profile. You can attach a particular theme to\n  that build profile. You can create as many build profiles as you like, and\n  it’s not only limited to views, you can also serve different data stores or\n  behavior code.</p>\n<p>In the screenshot below, you can see how my application looks on a desktop,\n  and how it looks on an iPhone:</p>\n<p><img src=\"/images/build-universal-app-img3.png\" alt=\"App UI on desktop and phone\"></p>\n<p><strong>Device specific stylesheets:</strong> The stylesheet is chosen\n  before the framework is downloaded.</p>\n<p><strong>How it works:</strong> Ext JS 6 ships with themes (Sass stylesheets)\n  that are great for classic toolkit, touch interfaces (with the look and feel\n  of iOS, Android, and Windows Phone), or stylesheets that look great on both\n  toolkits. The microloader can detect the environment, and serve the correct\n  theme.</p>\n<p><img src=\"/images/build-universal-app-img4.png\" alt=\"Device specific stylesheets\"></p>\n<p><strong>Device Profiles:</strong> The profile for each user is chosen when\n  the application launches.</p>\n<p><strong>How it works:</strong> It’s possible to create a device profile,\n  which contains different code or different component positioning. For\n  example, when you open an email app on your phone, you see a list with an\n  overview of all emails, and when you tap on an item, it opens the email on\n  top. However, when you open the email application on a tablet, the list is\n  docked to the left, and the body of the email is positioned on the right side\n  of the screen. You can achieve these layouts with device profiles. It’s not\n  just re-positioning certain components (list docked or not). It’s also\n  different behavior under the hood (when you tap an email, it opens an extra\n  window on top vs. loading next to the list).</p>\n<p><img src=\"/images/build-universal-app-img5.png\" alt=\"Device profiles\"></p>\n<p><strong>Responsive Design with JavaScript:</strong> Code responds to custom\n  criteria at runtime.</p>\n<p><strong>How it works:</strong> JavaScript responds to certain conditions\n  (like screen size) at runtime. It’s possible to create any custom condition\n  and have the view, data, or behavior respond.</p>\n<p><img src=\"/images/build-universal-app-img6.gif\" alt=\"Responsive Design with JavaScript\"></p>\n<p><strong>Traditional Web Design with CSS:</strong> The view responds to an\n  environment at runtime.</p>\n<p><strong>How it works:</strong> You can also use traditional responsive web\n  design. You can use it for styling simple elements in views.</p>\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3>\n<p>In this article, I’ve described what an Ext JS 6 universal app is, what I\n  like about the universal app approach, and why I converted my app. In Part 2,\n  I’ll show you exactly how I converted my music app to a universal app.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<h3 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h3>\n<p>Back in 2011, I wanted to create an app. I love music, and I am a huge fan\n  of Spotify. I love that I can listen to a huge database of songs. The only\n  thing that always bothered me was that I had to manually search for songs.\n  That’s fine when I’m using my laptop, but it’s not so great when I’m walking\n  or biking, and I use Spotify on my phone. Typing on a virtual keyboard is\n  just not fun.</p>\n<p>So, I created a Sencha Touch app that could connect to my LastFm account (an\n  online database that can “scrobble” and save music that you’ve listened to).\n  My app lists all the music I like, and with one button tap, I can play the\n  song in Spotify.</p>","more":"<p><img src=\"/images/build-universal-app-img1.png\" alt=\"Sencha Touch app\"></p>\n<p>Sencha Touch was great for building this app. It has a powerful, smooth\n  scrolling list and stylesheets that make my app look great on my iPhone. It\n  was quick to build and ready to use.</p>\n<p>I liked this app so much that I decided to share it. I deployed my app in\n  the Apple App Store, by wrapping it with Cordova. Then, I noticed I was also\n  using it on my desktop. It was just easier to choose songs, so I deployed my\n  app on my webserver and hosted it in the Google Chrome Web Store.</p>\n<p>A week later, I checked my reviews on the Chrome Web Store. I was\n  heartbroken to see that I only had bad reviews: “What a weird looking app”\n  and “Why can’t I use the mouse wheel to scroll?” It totally made sense though\n  – my app was originally designed for iPhones. It looked like an iPhone app\n  because of the stylesheet, but it behaved like a touch app because it was\n  built with Sencha Touch using Touch events &amp; gestures. To scroll the\n  music list, users had to tap the list and drag it up or down. That works\n  great on touch devices, but it’s odd on a desktop. I realized that I needed a\n  desktop version of my app too.</p>\n<p><img src=\"/images/build-universal-app-img2.png\" alt=\"Ext JS app\"></p>\n<p>That was when I started to play around with Ext JS, which is a great\n  framework for creating desktop applications. It has fast performing desktop\n  components like the grid, and a similar MVC architecture and class system as\n  in Sencha Touch 2. I created the desktop version, and later I migrated my Ext\n  JS 4 app to Ext JS 5. I chose Ext JS 5 because I wanted to clean up my code\n  and use the new MVVM pattern, and also use touch events, responsive design,\n  and stylesheets for a tablet version of my app. But when I realized I had to\n  maintain two different code bases, with two frameworks, I turned to Ext JS 6.</p>\n<p>Now, with Ext JS 6, you can create universal apps. With one codebase, your\n  apps run on any supported device type.</p>\n<h4 id=\"Tech-Specs-of-My-App\"><a href=\"#Tech-Specs-of-My-App\" class=\"headerlink\" title=\"Tech Specs of My App\"></a>Tech\n  Specs of My App</h4>\n<p>Before we move on, here are some technical specs for how my app works.</p>\n<ul>\n  <li>To play songs in Spotify, I use URL Schemes.</li>\n  <li>To retrieve data from LastFm, I use an external JavaScript API, that must\n    be in a custom written proxy, which is part of a package.</li>\n  <li>The LastFm username is saved in the HTML5 browser local storage.</li>\n  <li>Phones will get modern touch components, for now just iOS views.</li>\n  <li>Tablets and desktops will get rich classic desktop components, with a\n    Spotify look &amp; feel.</li>\n  <li>MVVM pattern is used.</li>\n</ul>\n<h3 id=\"Universal-Apps-vs-Responsive-Web-Design\"><a href=\"#Universal-Apps-vs-Responsive-Web-Design\" class=\"headerlink\" title=\"Universal Apps vs Responsive Web Design\"></a>Universal\n  Apps vs Responsive Web Design</h3>\n<p>There are differences in how Universal Apps work in Sencha frameworks, and\n  how <em>Responsive Web Design</em> is used for mobile websites to respond to\n  certain environments.</p>\n<p>Responsive Design for websites is usually done within a stylesheet using\n  relative units, values in percentages, and breakpoints (mediaqueries) that\n  can re-order and show/hide certain HTML elements.</p>\n<p>Take a look at the code snippet below:</p>\n<figure class=\"highlight scss\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">@<span class=\"keyword\">media</span> all and (min-width: 800px) and (max-width: 1024px) &#123;</span><br><span class=\"line\"> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-class\">.products</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> all and (min-width: 1025px) &#123;</span><br><span class=\"line\"> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-class\">.products</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\"><span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> all and (max-width: 799px)&#123;</span><br><span class=\"line\"> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-class\">.products</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The previous code example has a few breakpoints. Small screens with a\n  viewport width smaller than 799px, screens between 800px and 1024px, and\n  large viewports with screens wider than 1025px. On big screens, there are\n  list elements positions next to each other with a size of 25% width. For\n  medium screens it’s 50%, and for small screens (such as phones), the list\n  will be hidden.</p>\n<p>This technique is great for websites, but not for real world applications.\n  Why?</p>\n<ul>\n  <li>When you are on a mobile phone, chances are that you are on a slow mobile\n    network or using an (expensive) data plan. That’s very expensive, and\n    you’re not even seeing these elements and data.</li>\n  <li>Also, you may want to change the text on a smaller screen size. I’ve\n    worked a lot with copywriters, and they believe that text on a phone should\n    be written differently than what’s on a desktop. Nobody likes to read whole\n    books of text on a small screen.</li>\n  <li>By using only responsive web design, you’re probably missing a lot of\n    opportunities to refine content or use device features, because you’re\n    serving one code base. For example, your fancy floating calendar component\n    looks great on a desktop, but it doesn’t work well on a phone. A text\n    hyperlink works fine when you control your app with a mouse, but you will\n    probably have trouble tapping it on a small touch device. Users are used to\n    native app behavior, such as the built-in datepicker on an iPhone, or a big\n    button as a link. Most often, responsive mobile websites don’t deliver the\n    same experience as a native app.</li>\n</ul>\n<p>That’s why the Sencha approach is different and better. Universal apps in\n  Ext JS 6 are far beyond just responsive design. We know you want to control\n  the UI with more than just re-ordering, show/hiding elements. There are\n  various approaches that you can take, and most of these, are not just limited\n  to views. You can also control data and behavior.</p>\n<p><strong>Toolkit / Universal app approach:</strong> The user experience is\n  chosen before the framework is downloaded.</p>\n<p><strong>How it works:</strong> You can create different views with touch\n  (modern toolkit) or desktop (classic toolkit) component sets. The microloader\n  will detect your device, OS, or browser, and serve the right component set\n  for you, by loading a build profile. You can attach a particular theme to\n  that build profile. You can create as many build profiles as you like, and\n  it’s not only limited to views, you can also serve different data stores or\n  behavior code.</p>\n<p>In the screenshot below, you can see how my application looks on a desktop,\n  and how it looks on an iPhone:</p>\n<p><img src=\"/images/build-universal-app-img3.png\" alt=\"App UI on desktop and phone\"></p>\n<p><strong>Device specific stylesheets:</strong> The stylesheet is chosen\n  before the framework is downloaded.</p>\n<p><strong>How it works:</strong> Ext JS 6 ships with themes (Sass stylesheets)\n  that are great for classic toolkit, touch interfaces (with the look and feel\n  of iOS, Android, and Windows Phone), or stylesheets that look great on both\n  toolkits. The microloader can detect the environment, and serve the correct\n  theme.</p>\n<p><img src=\"/images/build-universal-app-img4.png\" alt=\"Device specific stylesheets\"></p>\n<p><strong>Device Profiles:</strong> The profile for each user is chosen when\n  the application launches.</p>\n<p><strong>How it works:</strong> It’s possible to create a device profile,\n  which contains different code or different component positioning. For\n  example, when you open an email app on your phone, you see a list with an\n  overview of all emails, and when you tap on an item, it opens the email on\n  top. However, when you open the email application on a tablet, the list is\n  docked to the left, and the body of the email is positioned on the right side\n  of the screen. You can achieve these layouts with device profiles. It’s not\n  just re-positioning certain components (list docked or not). It’s also\n  different behavior under the hood (when you tap an email, it opens an extra\n  window on top vs. loading next to the list).</p>\n<p><img src=\"/images/build-universal-app-img5.png\" alt=\"Device profiles\"></p>\n<p><strong>Responsive Design with JavaScript:</strong> Code responds to custom\n  criteria at runtime.</p>\n<p><strong>How it works:</strong> JavaScript responds to certain conditions\n  (like screen size) at runtime. It’s possible to create any custom condition\n  and have the view, data, or behavior respond.</p>\n<p><img src=\"/images/build-universal-app-img6.gif\" alt=\"Responsive Design with JavaScript\"></p>\n<p><strong>Traditional Web Design with CSS:</strong> The view responds to an\n  environment at runtime.</p>\n<p><strong>How it works:</strong> You can also use traditional responsive web\n  design. You can use it for styling simple elements in views.</p>\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3>\n<p>In this article, I’ve described what an Ext JS 6 universal app is, what I\n  like about the universal app approach, and why I converted my app. In Part 2,\n  I’ll show you exactly how I converted my music app to a universal app.</p>"},{"title":"How to Build a Great Looking Universal App with Ext JS – Part 2","date":"2015-11-08T09:45:21.000Z","_content":"\nIn [part 1](/Ext-JS/universal-app-ext6-p1/) of this series, I described what a universal app is and how it’s created in Ext JS 6. Now, I’ll show you how I built my application.\n\n<!--more-->\n\n### Folder structure\n\nTo create a high performance Ext JS 6 universal app, I used Sencha Cmd. I generated a workspace first, because in my folder I host multiple versions of my app (free and commercial), which all share the same code packages and framework.\n\nTo generate a workspace, I browsed to the downloaded Ext JS 6 SDK. From there, I typed the following command:\n\n`sencha generate workspace ../spotifinderworkspace6`\n\nThis generated the following structure:\n\n![Generate workspace](/images/build-universal-app-img7-1024x483.png)\n\nThen, I generated the application. I called it **_engine**. Why? Because I can create customized versions of my app with different behavior or branding. For example, a music app that plays songs in Pandora. To do that, I would only need to extend the engine Ext.Application, and override certain elements.\n\nHere’s how I generated the application:\n\ncd spotifinderworkspace6/ext\nsencha generate app Engine ../_engine\n\n![Generate application](/images/build-universal-app-img8-1024x572.png)\n\n### Toolkits\n\nThe **classic** folder is the folder structure for the classic toolkit. It contains the rich components that are great for desktops (or tablets). Also, it has support for legacy browsers.\n\nHere’s what my app in the classic toolkit looks like:\n\n![App in Classic toolkit](/images/build-universal-app-img9-1024x590.png)\n\nIt kind of looks like Spotify. I used traditional desktop components with a custom stylesheet. Because the application is shown on a large screen, there is a lot of space for showing extras, such as the album artwork, additional information, and also the settings screen (which is docked to the side).\n\nI created unique views. Some of these views require their own logic. That’s why my folder structure in the classic toolkit looks like this:\n\n![Folder structure in Classic toolkit](/images/build-universal-app-img10-1024x508.png)\n\nThe **modern** folder contains lightweight touch components. These are great for touch devices, including phones (or in some cases, tablets too). These components are optimized for a touch experience instead of mouse and keyboard. Because these components are lightweight, they also perform really well on a mobile device which has less processing power.\n\n![App in Modern toolkit](/images/build-universal-app-img11.png)\n\nBecause the screen is small, just the absolute necessary components are shown. To open the settings view, tap the gear button. It will nicely slide in the settings screen with an animation.\n\n![Folder structure is small](/images/build-universal-app-img12-1024x430.png)\n\nBecause it doesn’t contain too many components, my folder structure is small. Again, only views and some behavior code, which are required by this view, are unique. Everything else will be shared across toolkits.\n\nThe shared code can be found in the **app** folder:\n\n![Shared code in app folder](/images/build-universal-app-img13-1024x601.png)\n\nTip: You can extend from view controllers (VC) too.\n\nFor example, you could have a shared Viewport VC that contains most of the behavior. The Viewport VC of the classic and modern toolkit folders only contains code that’s required for their own components.\n\nHere’s an example. Below is a snippet of the Viewport VC, which is located in the **app/main/** folder. As you can see, it extends from Ext.app.ViewController. The class itself is called `Engine.view.main.MainController`.\n\n![Snippet of Viewport VC](/images/build-universal-app-img14.png)\n\nNow, here is the code of the Viewport VC in the classic folder. It’s located in the **classic/src/main/** folder, and this time it extends from `Engine.view.main.MainController`, which is the shared VC. Don’t forget to put an `alias` in this class. That’s how you would link this classic view controller to the classic main view.\n\n![Code of Viewport VC in Classic folder](/images/build-universal-app-img15.png)\n\n### Microloader\n\nThe microloader can detect on which environment it’s running, and serve the right experience. This means when I load my application on a desktop, I see my desktop version of the app with the Spotify theme, and when I open my application on an iPhone, I get the phone interface with the iOS theme.\n\nAll the magic here is in the `Ext.platformTags`. You can even run this command from your browser console, in an existing Ext JS 6 app. It will provide the object with all kinds of information, such as the browser version you’re running, OS, device type, etc.\n\nYou can configure your app, so it serves the right experience. The secret here is the **app.json** file. You need to create build profiles, and you can bind every app.json setting you like to a build profile, such as the toolkit (component set) and the theme:\n\n``` JSON\n\"builds\": {\n    \"classic\": { //name of the build profile\n        \"toolkit\": \"classic\", //component set\n        \"theme\": \"theme-spotifext\", //name of the theme\n    },\n    \"modern\": {\n        \"toolkit\": \"modern\",\n        \"theme\": \"theme-cupertino\",\n    }\n}\n```\n\nSwitching the experiences is handled in the **index.html** file. When you generate your application with Sencha Cmd, this will be all stubbed out for you.\n\n![Index.html file](/images/build-universal-app-img16-1024x433.png)\n\n### MVVM Pattern\n\nWith Ext JS 6, you can use the MVVM pattern.\n\n![MVVM pattern](/images/build-universal-app-img17.png)\n\n**View** – all components on your screen  \n**ViewController** – logics for a view  \n**ViewModel** – for binding data to a view\n\n**data model** – structure of your entity  \n**data record** – the actual data  \n**data store** – client-side cache\n\nAll views in Ext JS can be nested, and so can the view models and view controllers.\n\n![Nested views, view models, and view controllers](/images/build-universal-app-img18.png)\n\nThe benefits of this pattern is that code is easy to read and maintain.  \nIt’s a consistent file structure for your code and classes, and it facilitates code reuse.\n\n### Why Ext JS vs. Open Source\n\nWith Ext JS 6, you get an all-in-one solution. You don’t need to maintain various dependencies and have expertise in many different technologies that all need to work together.\n\nFor the application that I created, I used the following Ext JS 6 solutions.\n\n<table style=\"width: 100%;border-collapse: separate;margin-top: 2em\" border=\"1\" cellpadding=\"\">\n<tbody>\n<tr>\n<td style=\"padding: 9px 22px;border-color: transparent\">\n<h4 class=\"flat\">Ext JS 6</h4>\n</td>\n<td style=\"padding: 9px 22px;border-color: transparent\">\n<h4 class=\"flat\">Example Open Source Solution</h4>\n</td>\n</tr>\n<tr style=\"background-color: #ccc\">\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">Sencha Class System</td>\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">ECMAScript 6 Classes</td>\n</tr>\n<tr>\n<td style=\"padding: 9px 22px;border-color: transparent\">Border Layout</td>\n<td style=\"padding: 9px 22px;border-color: transparent\">JS + CSS</td>\n</tr>\n<tr style=\"background-color: #ccc\">\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">MVVM Architecture</td>\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">Angular JS</td>\n</tr>\n<tr>\n<td style=\"padding: 9px 22px;border-color: transparent\">Desktop App</td>\n<td style=\"padding: 9px 22px;border-color: transparent\">Bootstrap / Responsive CSS</td>\n</tr>\n<tr style=\"background-color: #ccc\">\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">Mobile App</td>\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">jQuery Mobile / Ionic</td>\n</tr>\n<tr>\n<td style=\"padding: 9px 22px;border-color: transparent\">Promises</td>\n<td style=\"padding: 9px 22px;border-color: transparent\">ECMAScript 6</td>\n</tr>\n<tr style=\"background-color: #ccc\">\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">Grids</td>\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">jQuery Plugin</td>\n</tr>\n<tr>\n<td style=\"padding: 9px 22px;border-color: transparent\">Touch Gestures / Events</td>\n<td style=\"padding: 9px 22px;border-color: transparent\">JS</td>\n</tr>\n<tr style=\"background-color: #ccc\">\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">Routing</td>\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">AngularJS Plugin</td>\n</tr>\n<tr>\n<td style=\"padding: 9px 22px;border-color: transparent\">Offline Caching</td>\n<td style=\"padding: 9px 22px;border-color: transparent\">HTML5 / JS</td>\n</tr>\n<tr style=\"background-color: #ccc\">\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">Theming</td>\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">Sass / CSS</td>\n</tr>\n<tr>\n<td style=\"padding: 9px 22px;border-color: transparent\">Sencha Cmd</td>\n<td style=\"padding: 9px 22px;border-color: transparent\">Grunt + Yeoman + Bower</td>\n</tr>\n</tbody>\n</table>\n\n\nI could have used an open source solution, but then I would have had to stack technologies on top of one another. For example, ECMAScript 6 is not supported by Internet Explorer yet. With Bootstrap or responsive web design, my users would have to download lots of code, which they don’t even see, and it’s not optimized for each device (as described in my previous blog post). There are jQuery plugins for grid components, but these are not half as powerful, and don’t perform well with large data sets. And who should I call when my AngularJS plugin suddenly stops working with the latest browser update?\n\nMy application is just a simple app, and I already would have at least 10 dependencies. What about a real enterprise app, which has a codebase that’s 50 times bigger? I would need to have knowledge of all these various tools, cross my fingers that these technologies work well together, and are future proof for the next 5 or 10 years (while browsers are upgrading).\n\n### Conclusion\n\nThat’s exactly the reason why I chose Ext JS 6. An all-in-one solution, where everything is configured the same way, every piece works together, and looks the same. And because Sencha is a commercial company, there is always a support number to call, and they will make sure that my app works in the future.","source":"_posts/universal-app-ext6-p1-2.md","raw":"---\ntitle: How to Build a Great Looking Universal App with Ext JS – Part 2\ntags:\n  - Desktop\n  - Mobile\n  - Universal App\ncategories:\n  - Ext JS\ndate: 2015-11-08 10:45:21\n---\n\nIn [part 1](/Ext-JS/universal-app-ext6-p1/) of this series, I described what a universal app is and how it’s created in Ext JS 6. Now, I’ll show you how I built my application.\n\n<!--more-->\n\n### Folder structure\n\nTo create a high performance Ext JS 6 universal app, I used Sencha Cmd. I generated a workspace first, because in my folder I host multiple versions of my app (free and commercial), which all share the same code packages and framework.\n\nTo generate a workspace, I browsed to the downloaded Ext JS 6 SDK. From there, I typed the following command:\n\n`sencha generate workspace ../spotifinderworkspace6`\n\nThis generated the following structure:\n\n![Generate workspace](/images/build-universal-app-img7-1024x483.png)\n\nThen, I generated the application. I called it **_engine**. Why? Because I can create customized versions of my app with different behavior or branding. For example, a music app that plays songs in Pandora. To do that, I would only need to extend the engine Ext.Application, and override certain elements.\n\nHere’s how I generated the application:\n\ncd spotifinderworkspace6/ext\nsencha generate app Engine ../_engine\n\n![Generate application](/images/build-universal-app-img8-1024x572.png)\n\n### Toolkits\n\nThe **classic** folder is the folder structure for the classic toolkit. It contains the rich components that are great for desktops (or tablets). Also, it has support for legacy browsers.\n\nHere’s what my app in the classic toolkit looks like:\n\n![App in Classic toolkit](/images/build-universal-app-img9-1024x590.png)\n\nIt kind of looks like Spotify. I used traditional desktop components with a custom stylesheet. Because the application is shown on a large screen, there is a lot of space for showing extras, such as the album artwork, additional information, and also the settings screen (which is docked to the side).\n\nI created unique views. Some of these views require their own logic. That’s why my folder structure in the classic toolkit looks like this:\n\n![Folder structure in Classic toolkit](/images/build-universal-app-img10-1024x508.png)\n\nThe **modern** folder contains lightweight touch components. These are great for touch devices, including phones (or in some cases, tablets too). These components are optimized for a touch experience instead of mouse and keyboard. Because these components are lightweight, they also perform really well on a mobile device which has less processing power.\n\n![App in Modern toolkit](/images/build-universal-app-img11.png)\n\nBecause the screen is small, just the absolute necessary components are shown. To open the settings view, tap the gear button. It will nicely slide in the settings screen with an animation.\n\n![Folder structure is small](/images/build-universal-app-img12-1024x430.png)\n\nBecause it doesn’t contain too many components, my folder structure is small. Again, only views and some behavior code, which are required by this view, are unique. Everything else will be shared across toolkits.\n\nThe shared code can be found in the **app** folder:\n\n![Shared code in app folder](/images/build-universal-app-img13-1024x601.png)\n\nTip: You can extend from view controllers (VC) too.\n\nFor example, you could have a shared Viewport VC that contains most of the behavior. The Viewport VC of the classic and modern toolkit folders only contains code that’s required for their own components.\n\nHere’s an example. Below is a snippet of the Viewport VC, which is located in the **app/main/** folder. As you can see, it extends from Ext.app.ViewController. The class itself is called `Engine.view.main.MainController`.\n\n![Snippet of Viewport VC](/images/build-universal-app-img14.png)\n\nNow, here is the code of the Viewport VC in the classic folder. It’s located in the **classic/src/main/** folder, and this time it extends from `Engine.view.main.MainController`, which is the shared VC. Don’t forget to put an `alias` in this class. That’s how you would link this classic view controller to the classic main view.\n\n![Code of Viewport VC in Classic folder](/images/build-universal-app-img15.png)\n\n### Microloader\n\nThe microloader can detect on which environment it’s running, and serve the right experience. This means when I load my application on a desktop, I see my desktop version of the app with the Spotify theme, and when I open my application on an iPhone, I get the phone interface with the iOS theme.\n\nAll the magic here is in the `Ext.platformTags`. You can even run this command from your browser console, in an existing Ext JS 6 app. It will provide the object with all kinds of information, such as the browser version you’re running, OS, device type, etc.\n\nYou can configure your app, so it serves the right experience. The secret here is the **app.json** file. You need to create build profiles, and you can bind every app.json setting you like to a build profile, such as the toolkit (component set) and the theme:\n\n``` JSON\n\"builds\": {\n    \"classic\": { //name of the build profile\n        \"toolkit\": \"classic\", //component set\n        \"theme\": \"theme-spotifext\", //name of the theme\n    },\n    \"modern\": {\n        \"toolkit\": \"modern\",\n        \"theme\": \"theme-cupertino\",\n    }\n}\n```\n\nSwitching the experiences is handled in the **index.html** file. When you generate your application with Sencha Cmd, this will be all stubbed out for you.\n\n![Index.html file](/images/build-universal-app-img16-1024x433.png)\n\n### MVVM Pattern\n\nWith Ext JS 6, you can use the MVVM pattern.\n\n![MVVM pattern](/images/build-universal-app-img17.png)\n\n**View** – all components on your screen  \n**ViewController** – logics for a view  \n**ViewModel** – for binding data to a view\n\n**data model** – structure of your entity  \n**data record** – the actual data  \n**data store** – client-side cache\n\nAll views in Ext JS can be nested, and so can the view models and view controllers.\n\n![Nested views, view models, and view controllers](/images/build-universal-app-img18.png)\n\nThe benefits of this pattern is that code is easy to read and maintain.  \nIt’s a consistent file structure for your code and classes, and it facilitates code reuse.\n\n### Why Ext JS vs. Open Source\n\nWith Ext JS 6, you get an all-in-one solution. You don’t need to maintain various dependencies and have expertise in many different technologies that all need to work together.\n\nFor the application that I created, I used the following Ext JS 6 solutions.\n\n<table style=\"width: 100%;border-collapse: separate;margin-top: 2em\" border=\"1\" cellpadding=\"\">\n<tbody>\n<tr>\n<td style=\"padding: 9px 22px;border-color: transparent\">\n<h4 class=\"flat\">Ext JS 6</h4>\n</td>\n<td style=\"padding: 9px 22px;border-color: transparent\">\n<h4 class=\"flat\">Example Open Source Solution</h4>\n</td>\n</tr>\n<tr style=\"background-color: #ccc\">\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">Sencha Class System</td>\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">ECMAScript 6 Classes</td>\n</tr>\n<tr>\n<td style=\"padding: 9px 22px;border-color: transparent\">Border Layout</td>\n<td style=\"padding: 9px 22px;border-color: transparent\">JS + CSS</td>\n</tr>\n<tr style=\"background-color: #ccc\">\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">MVVM Architecture</td>\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">Angular JS</td>\n</tr>\n<tr>\n<td style=\"padding: 9px 22px;border-color: transparent\">Desktop App</td>\n<td style=\"padding: 9px 22px;border-color: transparent\">Bootstrap / Responsive CSS</td>\n</tr>\n<tr style=\"background-color: #ccc\">\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">Mobile App</td>\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">jQuery Mobile / Ionic</td>\n</tr>\n<tr>\n<td style=\"padding: 9px 22px;border-color: transparent\">Promises</td>\n<td style=\"padding: 9px 22px;border-color: transparent\">ECMAScript 6</td>\n</tr>\n<tr style=\"background-color: #ccc\">\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">Grids</td>\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">jQuery Plugin</td>\n</tr>\n<tr>\n<td style=\"padding: 9px 22px;border-color: transparent\">Touch Gestures / Events</td>\n<td style=\"padding: 9px 22px;border-color: transparent\">JS</td>\n</tr>\n<tr style=\"background-color: #ccc\">\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">Routing</td>\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">AngularJS Plugin</td>\n</tr>\n<tr>\n<td style=\"padding: 9px 22px;border-color: transparent\">Offline Caching</td>\n<td style=\"padding: 9px 22px;border-color: transparent\">HTML5 / JS</td>\n</tr>\n<tr style=\"background-color: #ccc\">\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">Theming</td>\n<td style=\"line-height: normal;padding: 9px 22px;border-color: transparent\">Sass / CSS</td>\n</tr>\n<tr>\n<td style=\"padding: 9px 22px;border-color: transparent\">Sencha Cmd</td>\n<td style=\"padding: 9px 22px;border-color: transparent\">Grunt + Yeoman + Bower</td>\n</tr>\n</tbody>\n</table>\n\n\nI could have used an open source solution, but then I would have had to stack technologies on top of one another. For example, ECMAScript 6 is not supported by Internet Explorer yet. With Bootstrap or responsive web design, my users would have to download lots of code, which they don’t even see, and it’s not optimized for each device (as described in my previous blog post). There are jQuery plugins for grid components, but these are not half as powerful, and don’t perform well with large data sets. And who should I call when my AngularJS plugin suddenly stops working with the latest browser update?\n\nMy application is just a simple app, and I already would have at least 10 dependencies. What about a real enterprise app, which has a codebase that’s 50 times bigger? I would need to have knowledge of all these various tools, cross my fingers that these technologies work well together, and are future proof for the next 5 or 10 years (while browsers are upgrading).\n\n### Conclusion\n\nThat’s exactly the reason why I chose Ext JS 6. An all-in-one solution, where everything is configured the same way, every piece works together, and looks the same. And because Sencha is a commercial company, there is always a support number to call, and they will make sure that my app works in the future.","slug":"universal-app-ext6-p1-2","published":1,"updated":"2018-11-30T18:32:00.785Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncr300a5kif5i7zc31g7","content":"<p>In <a href=\"/Ext-JS/universal-app-ext6-p1/\">part 1</a> of this series, I\n  described what a universal app is and how it’s created in Ext JS 6. Now, I’ll\n  show you how I built my application.</p>\n<a id=\"more\"></a>\n<h3 id=\"Folder-structure\"><a href=\"#Folder-structure\" class=\"headerlink\" title=\"Folder structure\"></a>Folder\n  structure</h3>\n<p>To create a high performance Ext JS 6 universal app, I used Sencha Cmd. I\n  generated a workspace first, because in my folder I host multiple versions of\n  my app (free and commercial), which all share the same code packages and\n  framework.</p>\n<p>To generate a workspace, I browsed to the downloaded Ext JS 6 SDK. From\n  there, I typed the following command:</p>\n<p><code>sencha generate workspace ../spotifinderworkspace6</code></p>\n<p>This generated the following structure:</p>\n<p><img src=\"/images/build-universal-app-img7-1024x483.png\" alt=\"Generate workspace\"></p>\n<p>Then, I generated the application. I called it <strong>_engine</strong>.\n  Why? Because I can create customized versions of my app with different\n  behavior or branding. For example, a music app that plays songs in Pandora.\n  To do that, I would only need to extend the engine Ext.Application, and\n  override certain elements.</p>\n<p>Here’s how I generated the application:</p>\n<p>cd spotifinderworkspace6/ext sencha generate app Engine ../_engine</p>\n<p><img src=\"/images/build-universal-app-img8-1024x572.png\" alt=\"Generate application\"></p>\n<h3 id=\"Toolkits\"><a href=\"#Toolkits\" class=\"headerlink\" title=\"Toolkits\"></a>Toolkits</h3>\n<p>The <strong>classic</strong> folder is the folder structure for the classic\n  toolkit. It contains the rich components that are great for desktops (or\n  tablets). Also, it has support for legacy browsers.</p>\n<p>Here’s what my app in the classic toolkit looks like:</p>\n<p><img src=\"/images/build-universal-app-img9-1024x590.png\" alt=\"App in Classic toolkit\"></p>\n<p>It kind of looks like Spotify. I used traditional desktop components with a\n  custom stylesheet. Because the application is shown on a large screen, there\n  is a lot of space for showing extras, such as the album artwork, additional\n  information, and also the settings screen (which is docked to the side).</p>\n<p>I created unique views. Some of these views require their own logic. That’s\n  why my folder structure in the classic toolkit looks like this:</p>\n<p><img src=\"/images/build-universal-app-img10-1024x508.png\" alt=\"Folder structure in Classic toolkit\"></p>\n<p>The <strong>modern</strong> folder contains lightweight touch components.\n  These are great for touch devices, including phones (or in some cases,\n  tablets too). These components are optimized for a touch experience instead\n  of mouse and keyboard. Because these components are lightweight, they also\n  perform really well on a mobile device which has less processing power.</p>\n<p><img src=\"/images/build-universal-app-img11.png\" alt=\"App in Modern toolkit\"></p>\n<p>Because the screen is small, just the absolute necessary components are\n  shown. To open the settings view, tap the gear button. It will nicely slide\n  in the settings screen with an animation.</p>\n<p><img src=\"/images/build-universal-app-img12-1024x430.png\" alt=\"Folder structure is small\"></p>\n<p>Because it doesn’t contain too many components, my folder structure is\n  small. Again, only views and some behavior code, which are required by this\n  view, are unique. Everything else will be shared across toolkits.</p>\n<p>The shared code can be found in the <strong>app</strong> folder:</p>\n<p><img src=\"/images/build-universal-app-img13-1024x601.png\" alt=\"Shared code in app folder\"></p>\n<p>Tip: You can extend from view controllers (VC) too.</p>\n<p>For example, you could have a shared Viewport VC that contains most of the\n  behavior. The Viewport VC of the classic and modern toolkit folders only\n  contains code that’s required for their own components.</p>\n<p>Here’s an example. Below is a snippet of the Viewport VC, which is located\n  in the <strong>app/main/</strong> folder. As you can see, it extends from\n  Ext.app.ViewController. The class itself is called <code>Engine.view.main.MainController</code>.</p>\n<p><img src=\"/images/build-universal-app-img14.png\" alt=\"Snippet of Viewport VC\"></p>\n<p>Now, here is the code of the Viewport VC in the classic folder. It’s located\n  in the <strong>classic/src/main/</strong> folder, and this time it extends\n  from <code>Engine.view.main.MainController</code>, which is the shared VC.\n  Don’t forget to put an <code>alias</code> in this class. That’s how you would\n  link this classic view controller to the classic main view.</p>\n<p><img src=\"/images/build-universal-app-img15.png\" alt=\"Code of Viewport VC in Classic folder\"></p>\n<h3 id=\"Microloader\"><a href=\"#Microloader\" class=\"headerlink\" title=\"Microloader\"></a>Microloader</h3>\n<p>The microloader can detect on which environment it’s running, and serve the\n  right experience. This means when I load my application on a desktop, I see\n  my desktop version of the app with the Spotify theme, and when I open my\n  application on an iPhone, I get the phone interface with the iOS theme.</p>\n<p>All the magic here is in the <code>Ext.platformTags</code>. You can even run\n  this command from your browser console, in an existing Ext JS 6 app. It will\n  provide the object with all kinds of information, such as the browser version\n  you’re running, OS, device type, etc.</p>\n<p>You can configure your app, so it serves the right experience. The secret\n  here is the <strong>app.json</strong> file. You need to create build\n  profiles, and you can bind every app.json setting you like to a build\n  profile, such as the toolkit (component set) and the theme:</p>\n<figure class=\"highlight\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">\"builds\": &#123;</span><br><span class=\"line\">    \"classic\": &#123; //name of the build profile</span><br><span class=\"line\">        \"toolkit\": \"classic\", //component set</span><br><span class=\"line\">        \"theme\": \"theme-spotifext\", //name of the theme</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"modern\": &#123;</span><br><span class=\"line\">        \"toolkit\": \"modern\",</span><br><span class=\"line\">        \"theme\": \"theme-cupertino\",</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Switching the experiences is handled in the <strong>index.html</strong>\n  file. When you generate your application with Sencha Cmd, this will be all\n  stubbed out for you.</p>\n<p><img src=\"/images/build-universal-app-img16-1024x433.png\" alt=\"Index.html file\"></p>\n<h3 id=\"MVVM-Pattern\"><a href=\"#MVVM-Pattern\" class=\"headerlink\" title=\"MVVM Pattern\"></a>MVVM\n  Pattern</h3>\n<p>With Ext JS 6, you can use the MVVM pattern.</p>\n<p><img src=\"/images/build-universal-app-img17.png\" alt=\"MVVM pattern\"></p>\n<p><strong>View</strong> – all components on your screen<br><strong>ViewController</strong>\n  – logics for a view<br><strong>ViewModel</strong> – for binding data to a\n  view</p>\n<p><strong>data model</strong> – structure of your entity<br><strong>data\n    record</strong> – the actual data<br><strong>data store</strong> –\n  client-side cache</p>\n<p>All views in Ext JS can be nested, and so can the view models and view\n  controllers.</p>\n<p><img src=\"/images/build-universal-app-img18.png\" alt=\"Nested views, view models, and view controllers\"></p>\n<p>The benefits of this pattern is that code is easy to read and maintain.<br>It’s\n  a consistent file structure for your code and classes, and it facilitates\n  code reuse.</p>\n<h3 id=\"Why-Ext-JS-vs-Open-Source\"><a href=\"#Why-Ext-JS-vs-Open-Source\" class=\"headerlink\" title=\"Why Ext JS vs. Open Source\"></a>Why\n  Ext JS vs. Open Source</h3>\n<p>With Ext JS 6, you get an all-in-one solution. You don’t need to maintain\n  various dependencies and have expertise in many different technologies that\n  all need to work together.</p>\n<p>For the application that I created, I used the following Ext JS 6 solutions.</p>\n<table style=\"width:100%;border-collapse:separate;margin-top:2em\" border=\"1\" cellpadding=\"\">\n  <tbody>\n    <tr>\n      <td style=\"padding:9px 22px;border-color:transparent\">\n        <h4 class=\"flat\">Ext JS 6</h4>\n      </td>\n      <td style=\"padding:9px 22px;border-color:transparent\">\n        <h4 class=\"flat\">Example Open Source Solution</h4>\n      </td>\n    </tr>\n    <tr style=\"background-color:#ccc\">\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">Sencha\n        Class System</td>\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">ECMAScript\n        6 Classes</td>\n    </tr>\n    <tr>\n      <td style=\"padding:9px 22px;border-color:transparent\">Border Layout</td>\n      <td style=\"padding:9px 22px;border-color:transparent\">JS + CSS</td>\n    </tr>\n    <tr style=\"background-color:#ccc\">\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">MVVM\n        Architecture</td>\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">Angular\n        JS</td>\n    </tr>\n    <tr>\n      <td style=\"padding:9px 22px;border-color:transparent\">Desktop App</td>\n      <td style=\"padding:9px 22px;border-color:transparent\">Bootstrap /\n        Responsive CSS</td>\n    </tr>\n    <tr style=\"background-color:#ccc\">\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">Mobile\n        App</td>\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">jQuery\n        Mobile / Ionic</td>\n    </tr>\n    <tr>\n      <td style=\"padding:9px 22px;border-color:transparent\">Promises</td>\n      <td style=\"padding:9px 22px;border-color:transparent\">ECMAScript 6</td>\n    </tr>\n    <tr style=\"background-color:#ccc\">\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">Grids</td>\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">jQuery\n        Plugin</td>\n    </tr>\n    <tr>\n      <td style=\"padding:9px 22px;border-color:transparent\">Touch Gestures /\n        Events</td>\n      <td style=\"padding:9px 22px;border-color:transparent\">JS</td>\n    </tr>\n    <tr style=\"background-color:#ccc\">\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">Routing</td>\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">AngularJS\n        Plugin</td>\n    </tr>\n    <tr>\n      <td style=\"padding:9px 22px;border-color:transparent\">Offline Caching</td>\n      <td style=\"padding:9px 22px;border-color:transparent\">HTML5 / JS</td>\n    </tr>\n    <tr style=\"background-color:#ccc\">\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">Theming</td>\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">Sass\n        / CSS</td>\n    </tr>\n    <tr>\n      <td style=\"padding:9px 22px;border-color:transparent\">Sencha Cmd</td>\n      <td style=\"padding:9px 22px;border-color:transparent\">Grunt + Yeoman +\n        Bower</td>\n    </tr>\n  </tbody>\n</table>\n<p>I could have used an open source solution, but then I would have had to\n  stack technologies on top of one another. For example, ECMAScript 6 is not\n  supported by Internet Explorer yet. With Bootstrap or responsive web design,\n  my users would have to download lots of code, which they don’t even see, and\n  it’s not optimized for each device (as described in my previous blog post).\n  There are jQuery plugins for grid components, but these are not half as\n  powerful, and don’t perform well with large data sets. And who should I call\n  when my AngularJS plugin suddenly stops working with the latest browser\n  update?</p>\n<p>My application is just a simple app, and I already would have at least 10\n  dependencies. What about a real enterprise app, which has a codebase that’s\n  50 times bigger? I would need to have knowledge of all these various tools,\n  cross my fingers that these technologies work well together, and are future\n  proof for the next 5 or 10 years (while browsers are upgrading).</p>\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3>\n<p>That’s exactly the reason why I chose Ext JS 6. An all-in-one solution,\n  where everything is configured the same way, every piece works together, and\n  looks the same. And because Sencha is a commercial company, there is always a\n  support number to call, and they will make sure that my app works in the\n  future.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>In <a href=\"/Ext-JS/universal-app-ext6-p1/\">part 1</a> of this series, I\n  described what a universal app is and how it’s created in Ext JS 6. Now, I’ll\n  show you how I built my application.</p>","more":"<h3 id=\"Folder-structure\"><a href=\"#Folder-structure\" class=\"headerlink\" title=\"Folder structure\"></a>Folder\n  structure</h3>\n<p>To create a high performance Ext JS 6 universal app, I used Sencha Cmd. I\n  generated a workspace first, because in my folder I host multiple versions of\n  my app (free and commercial), which all share the same code packages and\n  framework.</p>\n<p>To generate a workspace, I browsed to the downloaded Ext JS 6 SDK. From\n  there, I typed the following command:</p>\n<p><code>sencha generate workspace ../spotifinderworkspace6</code></p>\n<p>This generated the following structure:</p>\n<p><img src=\"/images/build-universal-app-img7-1024x483.png\" alt=\"Generate workspace\"></p>\n<p>Then, I generated the application. I called it <strong>_engine</strong>.\n  Why? Because I can create customized versions of my app with different\n  behavior or branding. For example, a music app that plays songs in Pandora.\n  To do that, I would only need to extend the engine Ext.Application, and\n  override certain elements.</p>\n<p>Here’s how I generated the application:</p>\n<p>cd spotifinderworkspace6/ext sencha generate app Engine ../_engine</p>\n<p><img src=\"/images/build-universal-app-img8-1024x572.png\" alt=\"Generate application\"></p>\n<h3 id=\"Toolkits\"><a href=\"#Toolkits\" class=\"headerlink\" title=\"Toolkits\"></a>Toolkits</h3>\n<p>The <strong>classic</strong> folder is the folder structure for the classic\n  toolkit. It contains the rich components that are great for desktops (or\n  tablets). Also, it has support for legacy browsers.</p>\n<p>Here’s what my app in the classic toolkit looks like:</p>\n<p><img src=\"/images/build-universal-app-img9-1024x590.png\" alt=\"App in Classic toolkit\"></p>\n<p>It kind of looks like Spotify. I used traditional desktop components with a\n  custom stylesheet. Because the application is shown on a large screen, there\n  is a lot of space for showing extras, such as the album artwork, additional\n  information, and also the settings screen (which is docked to the side).</p>\n<p>I created unique views. Some of these views require their own logic. That’s\n  why my folder structure in the classic toolkit looks like this:</p>\n<p><img src=\"/images/build-universal-app-img10-1024x508.png\" alt=\"Folder structure in Classic toolkit\"></p>\n<p>The <strong>modern</strong> folder contains lightweight touch components.\n  These are great for touch devices, including phones (or in some cases,\n  tablets too). These components are optimized for a touch experience instead\n  of mouse and keyboard. Because these components are lightweight, they also\n  perform really well on a mobile device which has less processing power.</p>\n<p><img src=\"/images/build-universal-app-img11.png\" alt=\"App in Modern toolkit\"></p>\n<p>Because the screen is small, just the absolute necessary components are\n  shown. To open the settings view, tap the gear button. It will nicely slide\n  in the settings screen with an animation.</p>\n<p><img src=\"/images/build-universal-app-img12-1024x430.png\" alt=\"Folder structure is small\"></p>\n<p>Because it doesn’t contain too many components, my folder structure is\n  small. Again, only views and some behavior code, which are required by this\n  view, are unique. Everything else will be shared across toolkits.</p>\n<p>The shared code can be found in the <strong>app</strong> folder:</p>\n<p><img src=\"/images/build-universal-app-img13-1024x601.png\" alt=\"Shared code in app folder\"></p>\n<p>Tip: You can extend from view controllers (VC) too.</p>\n<p>For example, you could have a shared Viewport VC that contains most of the\n  behavior. The Viewport VC of the classic and modern toolkit folders only\n  contains code that’s required for their own components.</p>\n<p>Here’s an example. Below is a snippet of the Viewport VC, which is located\n  in the <strong>app/main/</strong> folder. As you can see, it extends from\n  Ext.app.ViewController. The class itself is called <code>Engine.view.main.MainController</code>.</p>\n<p><img src=\"/images/build-universal-app-img14.png\" alt=\"Snippet of Viewport VC\"></p>\n<p>Now, here is the code of the Viewport VC in the classic folder. It’s located\n  in the <strong>classic/src/main/</strong> folder, and this time it extends\n  from <code>Engine.view.main.MainController</code>, which is the shared VC.\n  Don’t forget to put an <code>alias</code> in this class. That’s how you would\n  link this classic view controller to the classic main view.</p>\n<p><img src=\"/images/build-universal-app-img15.png\" alt=\"Code of Viewport VC in Classic folder\"></p>\n<h3 id=\"Microloader\"><a href=\"#Microloader\" class=\"headerlink\" title=\"Microloader\"></a>Microloader</h3>\n<p>The microloader can detect on which environment it’s running, and serve the\n  right experience. This means when I load my application on a desktop, I see\n  my desktop version of the app with the Spotify theme, and when I open my\n  application on an iPhone, I get the phone interface with the iOS theme.</p>\n<p>All the magic here is in the <code>Ext.platformTags</code>. You can even run\n  this command from your browser console, in an existing Ext JS 6 app. It will\n  provide the object with all kinds of information, such as the browser version\n  you’re running, OS, device type, etc.</p>\n<p>You can configure your app, so it serves the right experience. The secret\n  here is the <strong>app.json</strong> file. You need to create build\n  profiles, and you can bind every app.json setting you like to a build\n  profile, such as the toolkit (component set) and the theme:</p>\n<figure class=\"highlight\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">\"builds\": &#123;</span><br><span class=\"line\">    \"classic\": &#123; //name of the build profile</span><br><span class=\"line\">        \"toolkit\": \"classic\", //component set</span><br><span class=\"line\">        \"theme\": \"theme-spotifext\", //name of the theme</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"modern\": &#123;</span><br><span class=\"line\">        \"toolkit\": \"modern\",</span><br><span class=\"line\">        \"theme\": \"theme-cupertino\",</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Switching the experiences is handled in the <strong>index.html</strong>\n  file. When you generate your application with Sencha Cmd, this will be all\n  stubbed out for you.</p>\n<p><img src=\"/images/build-universal-app-img16-1024x433.png\" alt=\"Index.html file\"></p>\n<h3 id=\"MVVM-Pattern\"><a href=\"#MVVM-Pattern\" class=\"headerlink\" title=\"MVVM Pattern\"></a>MVVM\n  Pattern</h3>\n<p>With Ext JS 6, you can use the MVVM pattern.</p>\n<p><img src=\"/images/build-universal-app-img17.png\" alt=\"MVVM pattern\"></p>\n<p><strong>View</strong> – all components on your screen<br><strong>ViewController</strong>\n  – logics for a view<br><strong>ViewModel</strong> – for binding data to a\n  view</p>\n<p><strong>data model</strong> – structure of your entity<br><strong>data\n    record</strong> – the actual data<br><strong>data store</strong> –\n  client-side cache</p>\n<p>All views in Ext JS can be nested, and so can the view models and view\n  controllers.</p>\n<p><img src=\"/images/build-universal-app-img18.png\" alt=\"Nested views, view models, and view controllers\"></p>\n<p>The benefits of this pattern is that code is easy to read and maintain.<br>It’s\n  a consistent file structure for your code and classes, and it facilitates\n  code reuse.</p>\n<h3 id=\"Why-Ext-JS-vs-Open-Source\"><a href=\"#Why-Ext-JS-vs-Open-Source\" class=\"headerlink\" title=\"Why Ext JS vs. Open Source\"></a>Why\n  Ext JS vs. Open Source</h3>\n<p>With Ext JS 6, you get an all-in-one solution. You don’t need to maintain\n  various dependencies and have expertise in many different technologies that\n  all need to work together.</p>\n<p>For the application that I created, I used the following Ext JS 6 solutions.</p>\n<table style=\"width:100%;border-collapse:separate;margin-top:2em\" border=\"1\" cellpadding=\"\">\n  <tbody>\n    <tr>\n      <td style=\"padding:9px 22px;border-color:transparent\">\n        <h4 class=\"flat\">Ext JS 6</h4>\n      </td>\n      <td style=\"padding:9px 22px;border-color:transparent\">\n        <h4 class=\"flat\">Example Open Source Solution</h4>\n      </td>\n    </tr>\n    <tr style=\"background-color:#ccc\">\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">Sencha\n        Class System</td>\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">ECMAScript\n        6 Classes</td>\n    </tr>\n    <tr>\n      <td style=\"padding:9px 22px;border-color:transparent\">Border Layout</td>\n      <td style=\"padding:9px 22px;border-color:transparent\">JS + CSS</td>\n    </tr>\n    <tr style=\"background-color:#ccc\">\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">MVVM\n        Architecture</td>\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">Angular\n        JS</td>\n    </tr>\n    <tr>\n      <td style=\"padding:9px 22px;border-color:transparent\">Desktop App</td>\n      <td style=\"padding:9px 22px;border-color:transparent\">Bootstrap /\n        Responsive CSS</td>\n    </tr>\n    <tr style=\"background-color:#ccc\">\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">Mobile\n        App</td>\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">jQuery\n        Mobile / Ionic</td>\n    </tr>\n    <tr>\n      <td style=\"padding:9px 22px;border-color:transparent\">Promises</td>\n      <td style=\"padding:9px 22px;border-color:transparent\">ECMAScript 6</td>\n    </tr>\n    <tr style=\"background-color:#ccc\">\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">Grids</td>\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">jQuery\n        Plugin</td>\n    </tr>\n    <tr>\n      <td style=\"padding:9px 22px;border-color:transparent\">Touch Gestures /\n        Events</td>\n      <td style=\"padding:9px 22px;border-color:transparent\">JS</td>\n    </tr>\n    <tr style=\"background-color:#ccc\">\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">Routing</td>\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">AngularJS\n        Plugin</td>\n    </tr>\n    <tr>\n      <td style=\"padding:9px 22px;border-color:transparent\">Offline Caching</td>\n      <td style=\"padding:9px 22px;border-color:transparent\">HTML5 / JS</td>\n    </tr>\n    <tr style=\"background-color:#ccc\">\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">Theming</td>\n      <td style=\"line-height:normal;padding:9px 22px;border-color:transparent\">Sass\n        / CSS</td>\n    </tr>\n    <tr>\n      <td style=\"padding:9px 22px;border-color:transparent\">Sencha Cmd</td>\n      <td style=\"padding:9px 22px;border-color:transparent\">Grunt + Yeoman +\n        Bower</td>\n    </tr>\n  </tbody>\n</table>\n<p>I could have used an open source solution, but then I would have had to\n  stack technologies on top of one another. For example, ECMAScript 6 is not\n  supported by Internet Explorer yet. With Bootstrap or responsive web design,\n  my users would have to download lots of code, which they don’t even see, and\n  it’s not optimized for each device (as described in my previous blog post).\n  There are jQuery plugins for grid components, but these are not half as\n  powerful, and don’t perform well with large data sets. And who should I call\n  when my AngularJS plugin suddenly stops working with the latest browser\n  update?</p>\n<p>My application is just a simple app, and I already would have at least 10\n  dependencies. What about a real enterprise app, which has a codebase that’s\n  50 times bigger? I would need to have knowledge of all these various tools,\n  cross my fingers that these technologies work well together, and are future\n  proof for the next 5 or 10 years (while browsers are upgrading).</p>\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3>\n<p>That’s exactly the reason why I chose Ext JS 6. An all-in-one solution,\n  where everything is configured the same way, every piece works together, and\n  looks the same. And because Sencha is a commercial company, there is always a\n  support number to call, and they will make sure that my app works in the\n  future.</p>"},{"title":"Getting Started with Sencha Touch 2: Build a Weather Utility App (Part 3)","description":"Welcome at this series of blog posts How to create a utility app with Sencha Touch and Sencha Cmd","date":"2014-04-21T08:52:47.000Z","_content":"\nIn this three-part Sencha Touch tutorial, you will build the _Do I need my Umbrella?_ app, a simple utility app that loads weather information from a web service — worldweatheronline.com. Based on weather codes, this app can predict if you need your umbrella or not.\n<!--more-->\n\nIn this last part of the tutorial, we’ll talk about builds. You’ll use Sencha Cmd as well as PhoneGap/Cordova.\n\nFor the native app, you’ll use a native API for retrieving the location of the device, and you’ll port your app to a native mobile app with PhoneGap/Cordova for iOS, Android, BlackBerry10 or Windows Phone.\n\nNote: If you want to test your app on an iOS, BlackBerry or Windows Phone device, you will need authorization keys and developer accounts. Also, if you use Cordova, you can’t build an iOS app in the Windows operating system, nor can you build a Windows app from within Mac OS X.\n\nFor reference, you can view [Part 2](http://www.leeboonstra.com/developer/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-2) of this tutorial.\n\nYou can download the solution code from Part 2 of the tutorial — [full solution](https://training.sencha.com/sencha-blog/tutorial-dec-2013-lee/goodies-tutorial/fullsolution-download.zip).\n\n**This tutorial requires:**\n\n*   Sencha Touch 2.3 or higher\n*   Sencha Cmd 4.x\n*   Compass and Sass on top of Ruby\n*   A modern browser\n*   An editor\n*   [PhoneGap 3.3](http://phonegap.com/install/) / [Cordova 3.3](http://cordova.apache.org/)\n*   [Node.js v.0.10.23](http://www.nodejs.org)\n\nOptionally, you can install the following software to build apps locally:\n\n*   XCode 5 (for building iOS app locally, for Mac OS X users only)\n*   Android Developer Tools (Revisions 13+, for building Android apps locally)\n*   Windows 8 Pro with Visual Studio 2012 Pro/Ultimate (for building Windows Phone apps locally, for windows users only)\n*   Blackberry 10 Native SDK (for building BlackBerry 10 apps locally)\n\n### Creating a production build\n\nWith Sencha Cmd, you can create production and test build packages. The production build package compiles the Sass style sheet to production-ready (minified) CSS. It will also copy over your static images and build your JavaScript (Sencha Touch framework classes plus your own custom classes) into a single minified, concatenated file that’s small enough to easily download or cache the file. The production build will also include a cache manifest file to enable local caching.\n\nThe test package won’t contain this file. In the test build, the JavaScript and CSS files in the test package won’t be minified and therefore will be readable.\n\n![Weather App Tutorial](/images/weather-app-1-build.png)\n\nLet’s first create a production build of the Weather application. We’re not going to create a native build yet. In case you want to host the Weather App on your own server, you need to copy the production build folder over to your web server.\n\nOn the command-line enter the following command to generate a production build:\n\n`sencha app build production`\n\nor\n\n`sencha app build testing`\n\nReview the folder structure. This is the folder structure you can use on your web server, in case you decide to run the mobile application from an online URL.\n\n![Weather App Tutorial](/images/weather-app-2-files.png)\n\nPerhaps you noticed that the fonts are not copied into the build folder. We could copy this folder manually, or we could modify the build process. Let’s look into these options.\n\nSencha Cmd uses Apache Ant for the build processes. You can find all the internally used tasks in the hidden **.sencha** folder.\n\nIf you want to modify the build process yourself, you can open the **build.xml** file in the root of your application folder and add the following Ant task to the end of the file:\n\n```XML\n<target name=\"-after-build\">\n    <target name=\"build\"\n            depends=\"init,-before-build,-build,-after-build\"\n            description=\"Copy over the font/dinmu folder and remove temp files\"></target>\n \n    <copy todir=\"${basedir}/resources/css/stylesheets/fonts/dinmu\" overwrite=\"true\">\n      <fileset dir=\"${basedir}/resources/sass/stylesheets/fonts/dinmu\">\n        <include name=\"**/*\">\n      </fileset>\n    </copy>\n    <copy todir=\"${build.dir}/resources/css/stylesheets/fonts/dinmu\" overwrite=\"true\">\n      <fileset dir=\"${basedir}/resources/sass/stylesheets/fonts/dinmu\">\n        <include name=\"**/*\">\n      </fileset>\n    </copy>\n    <delete dir=\"${basedir}/${build.dir}\">\n```\n\nNow build your application again:\n\nsencha app build\n\nYou can test the production build with the following url: [http://localhost/dinmu/production/Dinmu/](http://localhost/dinmu/production/Dinmu/)\n\n### Native Device APIs\n\nDo you want to run your application as a native app on your device? With tools such as Adobe PhoneGap and Apache Cordova, you can port your app to a hybrid app.\n\nOnce you have a hybrid app, you can use device APIs, such as geolocation. The [geolocation](http://docs.phonegap.com/en/edge/cordova_geolocation_geolocation.md.html#Geolocation) object provides access to location data based on the device's GPS sensor or inferred from network signals.\n\nOpen the following file with your editor: **app/utils/Functions.js** and inspect line 101:\n\n``` JavaScript\nExt.device.Geolocation.getCurrentPosition({\n   timeout: 5000,\n   maximumAge: 10000,\n   success: function(position) {\n      var place = position.coords.latitude + \",\" + position.coords.longitude;\n      Dinmu.utils.Functions.getWeather(place);\n      Ext.Viewport.unmask();\n   },\n   failure: function() {\n      Ext.Viewport.unmask();\n      Ext.Msg.alert('Timeout', 'Can not retrieve position, please retry.');\n   }\n});\n```\n\nThe Sencha Touch class: `Ext.device.Geolocation()` provides access to the native Geolocation API when running on a device. There are three implementations of this API:\n\n*   [Sencha Mobile Packager](http://docs.sencha.com/touch/2.3.1/#!/guide/native_packaging-section-step-2%3A-create-a-packaging-configuration-file)\n*   [PhoneGap/Cordova](http://docs.phonegap.com/en/1.4.1/phonegap_device_device.md.html)\n*   Browser\n\nThis class will automatically select the correct implementation for the device your application is running on.\n\nBefore we will build the Do I need my umbrella (Dinmu) application, there are two more checks.\n\n*   Prefix the request to api.worldweatheronline.com with the http protocol. You can find this request in **app/utils/Functions.js** on line 125.\n*   Make sure you entered a valid API Key for the worldweatheronline.com web service. You can retrieve an API Key by registering at [http://www.worldweatheronline.com](http://www.worldweatheronline.com)\n\nAll set? That’s great. The only thing that’s left is building a native app with PhoneGap/Cordova.\n\n![Weather App Tutorial](/images/weather-app-3-styling2.png)\n\n### Building a hybrid app\n\nThere are three products you can use to create a native app from a Sencha Touch code base: Sencha Mobile Packager, Adobe PhoneGap, and Apache Cordova. All products are supported by the Sencha Device API which allows you to access hardware resources on devices.\n\nLet me explain the differences between these three solutions:\n\n#### Sencha Mobile Packager\n\nUses the **packager.json** to build iOS or Android build packages locally that can be distributed through the Android Marketplace or Apple App Store.\n\n#### Adobe PhoneGap\n\nLets you use the PhoneGap Build cloud service to (remotely) package your apps and distribute them through the Android Marketplace, BlackBerry App World, Windows Phone Store or Apple App Store. It’s an easy solution, and you can test applications on your device by scanning a QR code. You can also build applications locally. It’s a commercial product, and the free version is limited to one private app.\n\n#### Apache Cordova\n\nApache Cordova is a top-level project within the Apache Software Foundation. Cordova is the free, open-source, community-driven version of Adobe PhoneGap. Cordova lets you package apps locally and distribute them through the Android Marketplace, Blackberry App World, Windows Phone Store or Apple App Store.\n\nBuilding packages locally via the command-line requires an installation of XCode, Android Developer Tools, BlackBerry 10 SDK or Windows 8 Pro with Visual Studio.\n\nBuilding packages via PhoneGap build requires a (free) Adobe (PhoneGap Build) account: [https://build.phonegap.com/apps](https://build.phonegap.com/apps)\n\nNote: We will use PhoneGap Build in this tutorial. If you would rather use Cordova, you can use the same commands as you see in the tutorial, but replace the word **`phonegap`** with **`cordova`** on the command-line. ![Weather App Tutorial](/images/weather-app-4.png)\n\n#### Initialize a PhoneGap project\n\nThe first step in building a hybrid app is to issue the following command from your project’s directory to enable it:\n\nsencha phonegap init <APP-ID> <APP-NAME>\n\n*   The **App ID** follows this pattern: `<REVERSED-DOMAIN>.<APP-NAME>`.\n*   Your **application name** should be the same value as the name property that you specified in your app.json file.\n\nNote: If you want to port to an iOS app, you will need to make sure that the App Id is the same one that you registered in your Apple provisioning portal.\n\nHere’s the command I used to enable PhoneGap support:\n\nsencha phonegap init com.sencha.dinmu Dinmu\n\nNote: Mac OS X users might need to prefix with sudo to get administrative rights.\n\nThis generated the following structure/files:\n\n*   PhoneGap folder structure\n*   phonegap.local.properties\n*   config.xml\n\n#### MyApp/phonegap\n\n**MyApp/phonegap** contains the full PhoneGap file structure. If you used Cordova to initialize a project, the folder will be named **cordova**.\n\n![Weather App Tutorial](/images/weather-app-5.png)\n\n#### phonegap.local.properties\n\nThe **phonegap.local.properties** file contains the names of the platforms that you want when building locally. By default, it takes the local installed SDKs, for example:\n\nphonegap.platforms=ios android blackberry10 wp8\n\nWhen you run the phonegap `init` command, the property file also gives you settings for the Adobe PhoneGap remote packager. When you have a PhoneGap Build account, you can set up these additional settings:\n\n```\nphonegap.build.remote=true\n\\# Username for PhoneGap Build\nphonegap.build.remote.username={username}\n\\# Password for PhoneGap Build\nphonegap.build.remote.password={password}\n```\n\nWhen you leave the phonegap.build.remote property as false, you have to have one of the SDKs (XCode, Android Developer Tools, BlackBerry 10 SDK or Windows 8 Pro with Visual Studio) installed on your machine.\n\n#### config.xml\n\nThe default Cordova/PhoneGap **config.xml** file contains metadata about your app. Let’s modify this file:\n\nWe will change the app name, app description and author information:\n\n``` XML\n<name>Dinmu</name>\n<description>\n    Do I need my Umbrella today?\n</description>\n<author email=\"myemail@addres.com\" href=\"http://www.mydomain.com\">\n    Your name\n</author>\n```\n\nThe next step is to enable the Geolocation plugin at startup, to retrieve the location via the device:\n\n``` XML\n<preference name=\"EnableLocation\" value=\"true\"></preference>\n```\n\nDisable fullscreen mode, to show the status bar (battery indicator and time):\n\n``` XML\n<preference name=\"fullscreen\" value=\"false\"></preference>\n```\n\nLet’s make sure the application supports connections to external urls. The weather application will connect to [http://www.worldweatheronline.com](http://www.worldweatheronline.com). Therefore, we need to give access to either this URL or all external URLs. We can use the wildcard to allow all external connections:\n\n``` XML\n<access origin=\"*\"></access>\n```\n\nThe last thing we’ll modify are the paths to the icons and loading images. By default Sencha Touch generated iOS icons and splash images. They can be found in the **MyApp/resources** folder.\n\nWhen building apps for iPhones with retina displays (iPhone 5+), it’s important that you provide the correct splash screens with the required screen sizes. If not, your viewport may be resized incorrectly. For this example, we’ll stick to the PhoneGap splash screens. Feel free to replace them with your own splash screens.\n\n``` XML\n<icon src=\"icon.png\"></icon>\n<icon src=\"resources/icons/Icon.png\"></icon>\n<icon gap:platform=\"ios\" height=\"57\" src=\"resources/icons/Icon.png\" width=\"57\"></icon> \n<icon gap:platform=\"ios\" height=\"72\" src=\"resources/icons/Icon~ipad.png\" width=\"72\"></icon> \n<icon gap:platform=\"ios\" height=\"114\" src=\"resources/icons/Icon@2x.png\" width=\"114\"></icon> \n<icon gap:platform=\"ios\" height=\"144\" src=\"resources/icons/Icon~ipad@2x.png\" width=\"144\"></icon> \n \n<gap:splash gap:platform=\"ios\" height=\"480\" src=\"res/screen/ios/screen-iphone-portrait.png\" width=\"320\"></gap:splash>\n<gap:splash gap:platform=\"ios\" height=\"960\" src=\"res/screen/ios/screen-iphone-portrait-2x.png\" width=\"640\"></gap:splash>\n<gap:splash gap:platform=\"ios\" height=\"1024\" src=\"res/screen/ios/screen-ipad-portrait.png\" width=\"768\"></gap:splash>\n<gap:splash gap:platform=\"ios\" height=\"768\" src=\"res/screen/ios/screen-ipad-landscape.png\" width=\"1024\"></gap:splash>\n```\n\nFor more information about possible settings in config.xml, check the [PhoneGap documentation.](http://docs.phonegap.com/en/3.3.0/)\n\n#### Creating the native build package\n\nAfter initializing your application with PhoneGap or Cordova, it’s time to create a native build. Run the following command from the command-line:\n\n`sencha app build -run native`\n\nNote: The -run argument makes sure your app will be loaded in an emulator that’s installed on your machine. Again, Mac OS X users might need to prefix with sudo to get administrative rights.\n\nIt will build the applications in the MyApp/cordova or MyApp/phonegap folder:\n\n*   platforms/android/bin - Android .apk file\n*   platforms/ios/build/ - iOS .app file\n*   platforms/blackberry10/build/simulator - BlackBerry 10 .bar file\n*   platforms/wp8/Bin/Debug - Windows Phone .xap file\n\n#### Testing a native build\n\nIf you’re using PhoneGap Build, testing the application on Android devices will be very easy. Simply scan the QR code or download, drag and drop the **.apk** file on the memory card of your phone.\n\nFor iOS, you will need provisioning and code signing, which assures users that the app is from a known source and the app hasn’t been modified since it was last signed. Windows Phone developers and iOS developers will need a (paid) developer account.\n\nOnce you have an iOS developer account, you’ll need to set up a certificate, an identifier and a provisioning profile. For more information, see the [Apple Developer Tools](https://developer.apple.com/) and Sencha Touch docs on [Packaging Native iOS Applications](http://docs.sencha.com/touch/2.3.1/#!/guide/native_provisioning).\n\nWhen all is set, you can build the application with PhoneGap from the command-line interface:\n\nsencha app build native\n\nWhen you build for iOS, you might run into a build error because you need to code sign the iOS app. With PhoneGap Build, you’ll need to upload the ***.p12 certificate** and the ***.mobileprovisioning mobile provisioning profile**. After you’ve uploaded these two keys, you can unlock the keys and rebuild.\n\nIf you’re building the app locally, (PhoneGap remote=false or with Cordova), you can open: **platforms/ios/Dinmu.xcodeproj** from the **phonegap** or **cordova** folder, and maintain the build settings to code sign the application. Your developer identity should be in the _Code signing identity_ list. If not, you probably need to go through the whole native provisioning process again.\n\n![Weather App Tutorial](/images/weather-app-6.png)\n\nMake sure your phone is hooked up to your Mac OS X, and build and run in XCode.\n\nCongratulations, you’ve finished building a Sencha Touch utility app from scratch. If you’ve followed all three tutorials in this series, you’ve generated an application with Sencha Cmd and created all the views, models, stores and controllers for the Do I need my Umbrella? app. You’ve created a custom theme with Sass, and you’ve created a production build to host on a web server or built a hybrid app wtih Adobe PhoneGap/Cordova. With this workflow, you’re ready to build any app you like.\n\nDid you like this series of tutorials? Join one of the (advanced) Ext JS and Sencha Touch Training courses. Take a look at the [open courses](http://www.sencha.com/training/) located around the world or join an online class or check out my book that I wrote for O'Reilly: [Hands-on Sencha Touch 2 by Lee Boonstra](http://shop.oreilly.com/product/0636920030058.do)","source":"_posts/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-3.md","raw":"---\ntitle: 'Getting Started with Sencha Touch 2: Build a Weather Utility App (Part 3)'\ndescription: Welcome at this series of blog posts How to create a utility app with Sencha Touch and Sencha Cmd\ntags:\n  - Build native app\n  - Cordova\n  - hybrid app\n  - Phonegap\n  - Sencha Ant\n  - Sencha Build\n  - Sencha CMD\n  - Sencha Touch\ncategories:\n  - Sencha Touch\ndate: 2014-04-21 10:52:47\n---\n\nIn this three-part Sencha Touch tutorial, you will build the _Do I need my Umbrella?_ app, a simple utility app that loads weather information from a web service — worldweatheronline.com. Based on weather codes, this app can predict if you need your umbrella or not.\n<!--more-->\n\nIn this last part of the tutorial, we’ll talk about builds. You’ll use Sencha Cmd as well as PhoneGap/Cordova.\n\nFor the native app, you’ll use a native API for retrieving the location of the device, and you’ll port your app to a native mobile app with PhoneGap/Cordova for iOS, Android, BlackBerry10 or Windows Phone.\n\nNote: If you want to test your app on an iOS, BlackBerry or Windows Phone device, you will need authorization keys and developer accounts. Also, if you use Cordova, you can’t build an iOS app in the Windows operating system, nor can you build a Windows app from within Mac OS X.\n\nFor reference, you can view [Part 2](http://www.leeboonstra.com/developer/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-2) of this tutorial.\n\nYou can download the solution code from Part 2 of the tutorial — [full solution](https://training.sencha.com/sencha-blog/tutorial-dec-2013-lee/goodies-tutorial/fullsolution-download.zip).\n\n**This tutorial requires:**\n\n*   Sencha Touch 2.3 or higher\n*   Sencha Cmd 4.x\n*   Compass and Sass on top of Ruby\n*   A modern browser\n*   An editor\n*   [PhoneGap 3.3](http://phonegap.com/install/) / [Cordova 3.3](http://cordova.apache.org/)\n*   [Node.js v.0.10.23](http://www.nodejs.org)\n\nOptionally, you can install the following software to build apps locally:\n\n*   XCode 5 (for building iOS app locally, for Mac OS X users only)\n*   Android Developer Tools (Revisions 13+, for building Android apps locally)\n*   Windows 8 Pro with Visual Studio 2012 Pro/Ultimate (for building Windows Phone apps locally, for windows users only)\n*   Blackberry 10 Native SDK (for building BlackBerry 10 apps locally)\n\n### Creating a production build\n\nWith Sencha Cmd, you can create production and test build packages. The production build package compiles the Sass style sheet to production-ready (minified) CSS. It will also copy over your static images and build your JavaScript (Sencha Touch framework classes plus your own custom classes) into a single minified, concatenated file that’s small enough to easily download or cache the file. The production build will also include a cache manifest file to enable local caching.\n\nThe test package won’t contain this file. In the test build, the JavaScript and CSS files in the test package won’t be minified and therefore will be readable.\n\n![Weather App Tutorial](/images/weather-app-1-build.png)\n\nLet’s first create a production build of the Weather application. We’re not going to create a native build yet. In case you want to host the Weather App on your own server, you need to copy the production build folder over to your web server.\n\nOn the command-line enter the following command to generate a production build:\n\n`sencha app build production`\n\nor\n\n`sencha app build testing`\n\nReview the folder structure. This is the folder structure you can use on your web server, in case you decide to run the mobile application from an online URL.\n\n![Weather App Tutorial](/images/weather-app-2-files.png)\n\nPerhaps you noticed that the fonts are not copied into the build folder. We could copy this folder manually, or we could modify the build process. Let’s look into these options.\n\nSencha Cmd uses Apache Ant for the build processes. You can find all the internally used tasks in the hidden **.sencha** folder.\n\nIf you want to modify the build process yourself, you can open the **build.xml** file in the root of your application folder and add the following Ant task to the end of the file:\n\n```XML\n<target name=\"-after-build\">\n    <target name=\"build\"\n            depends=\"init,-before-build,-build,-after-build\"\n            description=\"Copy over the font/dinmu folder and remove temp files\"></target>\n \n    <copy todir=\"${basedir}/resources/css/stylesheets/fonts/dinmu\" overwrite=\"true\">\n      <fileset dir=\"${basedir}/resources/sass/stylesheets/fonts/dinmu\">\n        <include name=\"**/*\">\n      </fileset>\n    </copy>\n    <copy todir=\"${build.dir}/resources/css/stylesheets/fonts/dinmu\" overwrite=\"true\">\n      <fileset dir=\"${basedir}/resources/sass/stylesheets/fonts/dinmu\">\n        <include name=\"**/*\">\n      </fileset>\n    </copy>\n    <delete dir=\"${basedir}/${build.dir}\">\n```\n\nNow build your application again:\n\nsencha app build\n\nYou can test the production build with the following url: [http://localhost/dinmu/production/Dinmu/](http://localhost/dinmu/production/Dinmu/)\n\n### Native Device APIs\n\nDo you want to run your application as a native app on your device? With tools such as Adobe PhoneGap and Apache Cordova, you can port your app to a hybrid app.\n\nOnce you have a hybrid app, you can use device APIs, such as geolocation. The [geolocation](http://docs.phonegap.com/en/edge/cordova_geolocation_geolocation.md.html#Geolocation) object provides access to location data based on the device's GPS sensor or inferred from network signals.\n\nOpen the following file with your editor: **app/utils/Functions.js** and inspect line 101:\n\n``` JavaScript\nExt.device.Geolocation.getCurrentPosition({\n   timeout: 5000,\n   maximumAge: 10000,\n   success: function(position) {\n      var place = position.coords.latitude + \",\" + position.coords.longitude;\n      Dinmu.utils.Functions.getWeather(place);\n      Ext.Viewport.unmask();\n   },\n   failure: function() {\n      Ext.Viewport.unmask();\n      Ext.Msg.alert('Timeout', 'Can not retrieve position, please retry.');\n   }\n});\n```\n\nThe Sencha Touch class: `Ext.device.Geolocation()` provides access to the native Geolocation API when running on a device. There are three implementations of this API:\n\n*   [Sencha Mobile Packager](http://docs.sencha.com/touch/2.3.1/#!/guide/native_packaging-section-step-2%3A-create-a-packaging-configuration-file)\n*   [PhoneGap/Cordova](http://docs.phonegap.com/en/1.4.1/phonegap_device_device.md.html)\n*   Browser\n\nThis class will automatically select the correct implementation for the device your application is running on.\n\nBefore we will build the Do I need my umbrella (Dinmu) application, there are two more checks.\n\n*   Prefix the request to api.worldweatheronline.com with the http protocol. You can find this request in **app/utils/Functions.js** on line 125.\n*   Make sure you entered a valid API Key for the worldweatheronline.com web service. You can retrieve an API Key by registering at [http://www.worldweatheronline.com](http://www.worldweatheronline.com)\n\nAll set? That’s great. The only thing that’s left is building a native app with PhoneGap/Cordova.\n\n![Weather App Tutorial](/images/weather-app-3-styling2.png)\n\n### Building a hybrid app\n\nThere are three products you can use to create a native app from a Sencha Touch code base: Sencha Mobile Packager, Adobe PhoneGap, and Apache Cordova. All products are supported by the Sencha Device API which allows you to access hardware resources on devices.\n\nLet me explain the differences between these three solutions:\n\n#### Sencha Mobile Packager\n\nUses the **packager.json** to build iOS or Android build packages locally that can be distributed through the Android Marketplace or Apple App Store.\n\n#### Adobe PhoneGap\n\nLets you use the PhoneGap Build cloud service to (remotely) package your apps and distribute them through the Android Marketplace, BlackBerry App World, Windows Phone Store or Apple App Store. It’s an easy solution, and you can test applications on your device by scanning a QR code. You can also build applications locally. It’s a commercial product, and the free version is limited to one private app.\n\n#### Apache Cordova\n\nApache Cordova is a top-level project within the Apache Software Foundation. Cordova is the free, open-source, community-driven version of Adobe PhoneGap. Cordova lets you package apps locally and distribute them through the Android Marketplace, Blackberry App World, Windows Phone Store or Apple App Store.\n\nBuilding packages locally via the command-line requires an installation of XCode, Android Developer Tools, BlackBerry 10 SDK or Windows 8 Pro with Visual Studio.\n\nBuilding packages via PhoneGap build requires a (free) Adobe (PhoneGap Build) account: [https://build.phonegap.com/apps](https://build.phonegap.com/apps)\n\nNote: We will use PhoneGap Build in this tutorial. If you would rather use Cordova, you can use the same commands as you see in the tutorial, but replace the word **`phonegap`** with **`cordova`** on the command-line. ![Weather App Tutorial](/images/weather-app-4.png)\n\n#### Initialize a PhoneGap project\n\nThe first step in building a hybrid app is to issue the following command from your project’s directory to enable it:\n\nsencha phonegap init <APP-ID> <APP-NAME>\n\n*   The **App ID** follows this pattern: `<REVERSED-DOMAIN>.<APP-NAME>`.\n*   Your **application name** should be the same value as the name property that you specified in your app.json file.\n\nNote: If you want to port to an iOS app, you will need to make sure that the App Id is the same one that you registered in your Apple provisioning portal.\n\nHere’s the command I used to enable PhoneGap support:\n\nsencha phonegap init com.sencha.dinmu Dinmu\n\nNote: Mac OS X users might need to prefix with sudo to get administrative rights.\n\nThis generated the following structure/files:\n\n*   PhoneGap folder structure\n*   phonegap.local.properties\n*   config.xml\n\n#### MyApp/phonegap\n\n**MyApp/phonegap** contains the full PhoneGap file structure. If you used Cordova to initialize a project, the folder will be named **cordova**.\n\n![Weather App Tutorial](/images/weather-app-5.png)\n\n#### phonegap.local.properties\n\nThe **phonegap.local.properties** file contains the names of the platforms that you want when building locally. By default, it takes the local installed SDKs, for example:\n\nphonegap.platforms=ios android blackberry10 wp8\n\nWhen you run the phonegap `init` command, the property file also gives you settings for the Adobe PhoneGap remote packager. When you have a PhoneGap Build account, you can set up these additional settings:\n\n```\nphonegap.build.remote=true\n\\# Username for PhoneGap Build\nphonegap.build.remote.username={username}\n\\# Password for PhoneGap Build\nphonegap.build.remote.password={password}\n```\n\nWhen you leave the phonegap.build.remote property as false, you have to have one of the SDKs (XCode, Android Developer Tools, BlackBerry 10 SDK or Windows 8 Pro with Visual Studio) installed on your machine.\n\n#### config.xml\n\nThe default Cordova/PhoneGap **config.xml** file contains metadata about your app. Let’s modify this file:\n\nWe will change the app name, app description and author information:\n\n``` XML\n<name>Dinmu</name>\n<description>\n    Do I need my Umbrella today?\n</description>\n<author email=\"myemail@addres.com\" href=\"http://www.mydomain.com\">\n    Your name\n</author>\n```\n\nThe next step is to enable the Geolocation plugin at startup, to retrieve the location via the device:\n\n``` XML\n<preference name=\"EnableLocation\" value=\"true\"></preference>\n```\n\nDisable fullscreen mode, to show the status bar (battery indicator and time):\n\n``` XML\n<preference name=\"fullscreen\" value=\"false\"></preference>\n```\n\nLet’s make sure the application supports connections to external urls. The weather application will connect to [http://www.worldweatheronline.com](http://www.worldweatheronline.com). Therefore, we need to give access to either this URL or all external URLs. We can use the wildcard to allow all external connections:\n\n``` XML\n<access origin=\"*\"></access>\n```\n\nThe last thing we’ll modify are the paths to the icons and loading images. By default Sencha Touch generated iOS icons and splash images. They can be found in the **MyApp/resources** folder.\n\nWhen building apps for iPhones with retina displays (iPhone 5+), it’s important that you provide the correct splash screens with the required screen sizes. If not, your viewport may be resized incorrectly. For this example, we’ll stick to the PhoneGap splash screens. Feel free to replace them with your own splash screens.\n\n``` XML\n<icon src=\"icon.png\"></icon>\n<icon src=\"resources/icons/Icon.png\"></icon>\n<icon gap:platform=\"ios\" height=\"57\" src=\"resources/icons/Icon.png\" width=\"57\"></icon> \n<icon gap:platform=\"ios\" height=\"72\" src=\"resources/icons/Icon~ipad.png\" width=\"72\"></icon> \n<icon gap:platform=\"ios\" height=\"114\" src=\"resources/icons/Icon@2x.png\" width=\"114\"></icon> \n<icon gap:platform=\"ios\" height=\"144\" src=\"resources/icons/Icon~ipad@2x.png\" width=\"144\"></icon> \n \n<gap:splash gap:platform=\"ios\" height=\"480\" src=\"res/screen/ios/screen-iphone-portrait.png\" width=\"320\"></gap:splash>\n<gap:splash gap:platform=\"ios\" height=\"960\" src=\"res/screen/ios/screen-iphone-portrait-2x.png\" width=\"640\"></gap:splash>\n<gap:splash gap:platform=\"ios\" height=\"1024\" src=\"res/screen/ios/screen-ipad-portrait.png\" width=\"768\"></gap:splash>\n<gap:splash gap:platform=\"ios\" height=\"768\" src=\"res/screen/ios/screen-ipad-landscape.png\" width=\"1024\"></gap:splash>\n```\n\nFor more information about possible settings in config.xml, check the [PhoneGap documentation.](http://docs.phonegap.com/en/3.3.0/)\n\n#### Creating the native build package\n\nAfter initializing your application with PhoneGap or Cordova, it’s time to create a native build. Run the following command from the command-line:\n\n`sencha app build -run native`\n\nNote: The -run argument makes sure your app will be loaded in an emulator that’s installed on your machine. Again, Mac OS X users might need to prefix with sudo to get administrative rights.\n\nIt will build the applications in the MyApp/cordova or MyApp/phonegap folder:\n\n*   platforms/android/bin - Android .apk file\n*   platforms/ios/build/ - iOS .app file\n*   platforms/blackberry10/build/simulator - BlackBerry 10 .bar file\n*   platforms/wp8/Bin/Debug - Windows Phone .xap file\n\n#### Testing a native build\n\nIf you’re using PhoneGap Build, testing the application on Android devices will be very easy. Simply scan the QR code or download, drag and drop the **.apk** file on the memory card of your phone.\n\nFor iOS, you will need provisioning and code signing, which assures users that the app is from a known source and the app hasn’t been modified since it was last signed. Windows Phone developers and iOS developers will need a (paid) developer account.\n\nOnce you have an iOS developer account, you’ll need to set up a certificate, an identifier and a provisioning profile. For more information, see the [Apple Developer Tools](https://developer.apple.com/) and Sencha Touch docs on [Packaging Native iOS Applications](http://docs.sencha.com/touch/2.3.1/#!/guide/native_provisioning).\n\nWhen all is set, you can build the application with PhoneGap from the command-line interface:\n\nsencha app build native\n\nWhen you build for iOS, you might run into a build error because you need to code sign the iOS app. With PhoneGap Build, you’ll need to upload the ***.p12 certificate** and the ***.mobileprovisioning mobile provisioning profile**. After you’ve uploaded these two keys, you can unlock the keys and rebuild.\n\nIf you’re building the app locally, (PhoneGap remote=false or with Cordova), you can open: **platforms/ios/Dinmu.xcodeproj** from the **phonegap** or **cordova** folder, and maintain the build settings to code sign the application. Your developer identity should be in the _Code signing identity_ list. If not, you probably need to go through the whole native provisioning process again.\n\n![Weather App Tutorial](/images/weather-app-6.png)\n\nMake sure your phone is hooked up to your Mac OS X, and build and run in XCode.\n\nCongratulations, you’ve finished building a Sencha Touch utility app from scratch. If you’ve followed all three tutorials in this series, you’ve generated an application with Sencha Cmd and created all the views, models, stores and controllers for the Do I need my Umbrella? app. You’ve created a custom theme with Sass, and you’ve created a production build to host on a web server or built a hybrid app wtih Adobe PhoneGap/Cordova. With this workflow, you’re ready to build any app you like.\n\nDid you like this series of tutorials? Join one of the (advanced) Ext JS and Sencha Touch Training courses. Take a look at the [open courses](http://www.sencha.com/training/) located around the world or join an online class or check out my book that I wrote for O'Reilly: [Hands-on Sencha Touch 2 by Lee Boonstra](http://shop.oreilly.com/product/0636920030058.do)","slug":"getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-3","published":1,"updated":"2018-11-25T12:06:04.961Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncs100bpkif5daqzl96z","content":"<p>In this three-part Sencha Touch tutorial, you will build the <em>Do I need\n    my Umbrella?</em> app, a simple utility app that loads weather information\n  from a web service — worldweatheronline.com. Based on weather codes, this app\n  can predict if you need your umbrella or not.\n  <a id=\"more\"></a>\n</p>\n<p>In this last part of the tutorial, we’ll talk about builds. You’ll use\n  Sencha Cmd as well as PhoneGap/Cordova.</p>\n<p>For the native app, you’ll use a native API for retrieving the location of\n  the device, and you’ll port your app to a native mobile app with\n  PhoneGap/Cordova for iOS, Android, BlackBerry10 or Windows Phone.</p>\n<p>Note: If you want to test your app on an iOS, BlackBerry or Windows Phone\n  device, you will need authorization keys and developer accounts. Also, if you\n  use Cordova, you can’t build an iOS app in the Windows operating system, nor\n  can you build a Windows app from within Mac OS X.</p>\n<p>For reference, you can view <a href=\"http://www.leeboonstra.com/developer/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-2\" target=\"_blank\" rel=\"noopener\">Part\n    2</a> of this tutorial.</p>\n<p>You can download the solution code from Part 2 of the tutorial — <a href=\"https://training.sencha.com/sencha-blog/tutorial-dec-2013-lee/goodies-tutorial/fullsolution-download.zip\" target=\"_blank\" rel=\"noopener\">full\n    solution</a>.</p>\n<p><strong>This tutorial requires:</strong></p>\n<ul>\n  <li>Sencha Touch 2.3 or higher</li>\n  <li>Sencha Cmd 4.x</li>\n  <li>Compass and Sass on top of Ruby</li>\n  <li>A modern browser</li>\n  <li>An editor</li>\n  <li><a href=\"http://phonegap.com/install/\" target=\"_blank\" rel=\"noopener\">PhoneGap 3.3</a> / <a href=\"http://cordova.apache.org/\" target=\"_blank\" rel=\"noopener\">Cordova\n      3.3</a></li>\n  <li><a href=\"http://www.nodejs.org\" target=\"_blank\" rel=\"noopener\">Node.js v.0.10.23</a></li>\n</ul>\n<p>Optionally, you can install the following software to build apps locally:</p>\n<ul>\n  <li>XCode 5 (for building iOS app locally, for Mac OS X users only)</li>\n  <li>Android Developer Tools (Revisions 13+, for building Android apps\n    locally)</li>\n  <li>Windows 8 Pro with Visual Studio 2012 Pro/Ultimate (for building Windows\n    Phone apps locally, for windows users only)</li>\n  <li>Blackberry 10 Native SDK (for building BlackBerry 10 apps locally)</li>\n</ul>\n<h3 id=\"Creating-a-production-build\"><a href=\"#Creating-a-production-build\" class=\"headerlink\" title=\"Creating a production build\"></a>Creating\n  a production build</h3>\n<p>With Sencha Cmd, you can create production and test build packages. The\n  production build package compiles the Sass style sheet to production-ready\n  (minified) CSS. It will also copy over your static images and build your\n  JavaScript (Sencha Touch framework classes plus your own custom classes) into\n  a single minified, concatenated file that’s small enough to easily download\n  or cache the file. The production build will also include a cache manifest\n  file to enable local caching.</p>\n<p>The test package won’t contain this file. In the test build, the JavaScript\n  and CSS files in the test package won’t be minified and therefore will be\n  readable.</p>\n<p><img src=\"/images/weather-app-1-build.png\" alt=\"Weather App Tutorial\"></p>\n<p>Let’s first create a production build of the Weather application. We’re not\n  going to create a native build yet. In case you want to host the Weather App\n  on your own server, you need to copy the production build folder over to your\n  web server.</p>\n<p>On the command-line enter the following command to generate a production\n  build:</p>\n<p><code>sencha app build production</code></p>\n<p>or</p>\n<p><code>sencha app build testing</code></p>\n<p>Review the folder structure. This is the folder structure you can use on\n  your web server, in case you decide to run the mobile application from an\n  online URL.</p>\n<p><img src=\"/images/weather-app-2-files.png\" alt=\"Weather App Tutorial\"></p>\n<p>Perhaps you noticed that the fonts are not copied into the build folder. We\n  could copy this folder manually, or we could modify the build process. Let’s\n  look into these options.</p>\n<p>Sencha Cmd uses Apache Ant for the build processes. You can find all the\n  internally used tasks in the hidden <strong>.sencha</strong> folder.</p>\n<p>If you want to modify the build process yourself, you can open the <strong>build.xml</strong>\n  file in the root of your application folder and add the following Ant task to\n  the end of the file:</p>\n<figure class=\"highlight xml\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"-after-build\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">depends</span>=<span class=\"string\">\"init,-before-build,-build,-after-build\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">description</span>=<span class=\"string\">\"Copy over the font/dinmu folder and remove temp files\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"$&#123;basedir&#125;/resources/css/stylesheets/fonts/dinmu\"</span> <span class=\"attr\">overwrite</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;basedir&#125;/resources/sass/stylesheets/fonts/dinmu\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"$&#123;build.dir&#125;/resources/css/stylesheets/fonts/dinmu\"</span> <span class=\"attr\">overwrite</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;basedir&#125;/resources/sass/stylesheets/fonts/dinmu\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;basedir&#125;/$&#123;build.dir&#125;\"</span>&gt;</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Now build your application again:</p>\n<p>sencha app build</p>\n<p>You can test the production build with the following url: <a href=\"http://localhost/dinmu/production/Dinmu/\" target=\"_blank\" rel=\"noopener\">http://localhost/dinmu/production/Dinmu/</a></p>\n<h3 id=\"Native-Device-APIs\"><a href=\"#Native-Device-APIs\" class=\"headerlink\" title=\"Native Device APIs\"></a>Native\n  Device APIs</h3>\n<p>Do you want to run your application as a native app on your device? With\n  tools such as Adobe PhoneGap and Apache Cordova, you can port your app to a\n  hybrid app.</p>\n<p>Once you have a hybrid app, you can use device APIs, such as geolocation.\n  The <a href=\"http://docs.phonegap.com/en/edge/cordova_geolocation_geolocation.md.html#Geolocation\" target=\"_blank\" rel=\"noopener\">geolocation</a>\n  object provides access to location data based on the device’s GPS sensor or\n  inferred from network signals.</p>\n<p>Open the following file with your editor: <strong>app/utils/Functions.js</strong>\n  and inspect line 101:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.device.Geolocation.getCurrentPosition(&#123;</span><br><span class=\"line\">   timeout: <span class=\"number\">5000</span>,</span><br><span class=\"line\">   maximumAge: <span class=\"number\">10000</span>,</span><br><span class=\"line\">   success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">position</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> place = position.coords.latitude + <span class=\"string\">\",\"</span> + position.coords.longitude;</span><br><span class=\"line\">      Dinmu.utils.Functions.getWeather(place);</span><br><span class=\"line\">      Ext.Viewport.unmask();</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   failure: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      Ext.Viewport.unmask();</span><br><span class=\"line\">      Ext.Msg.alert(<span class=\"string\">'Timeout'</span>, <span class=\"string\">'Can not retrieve position, please retry.'</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The Sencha Touch class: <code>Ext.device.Geolocation()</code> provides\n  access to the native Geolocation API when running on a device. There are\n  three implementations of this API:</p>\n<ul>\n  <li><a href=\"http://docs.sencha.com/touch/2.3.1/#!/guide/native_packaging-section-step-2%3A-create-a-packaging-configuration-file\" target=\"_blank\" rel=\"noopener\">Sencha\n      Mobile Packager</a></li>\n  <li><a href=\"http://docs.phonegap.com/en/1.4.1/phonegap_device_device.md.html\" target=\"_blank\" rel=\"noopener\">PhoneGap/Cordova</a></li>\n  <li>Browser</li>\n</ul>\n<p>This class will automatically select the correct implementation for the\n  device your application is running on.</p>\n<p>Before we will build the Do I need my umbrella (Dinmu) application, there\n  are two more checks.</p>\n<ul>\n  <li>Prefix the request to api.worldweatheronline.com with the http protocol.\n    You can find this request in <strong>app/utils/Functions.js</strong> on\n    line 125.</li>\n  <li>Make sure you entered a valid API Key for the worldweatheronline.com web\n    service. You can retrieve an API Key by registering at <a href=\"http://www.worldweatheronline.com\" target=\"_blank\" rel=\"noopener\">http://www.worldweatheronline.com</a></li>\n</ul>\n<p>All set? That’s great. The only thing that’s left is building a native app\n  with PhoneGap/Cordova.</p>\n<p><img src=\"/images/weather-app-3-styling2.png\" alt=\"Weather App Tutorial\"></p>\n<h3 id=\"Building-a-hybrid-app\"><a href=\"#Building-a-hybrid-app\" class=\"headerlink\" title=\"Building a hybrid app\"></a>Building\n  a hybrid app</h3>\n<p>There are three products you can use to create a native app from a Sencha\n  Touch code base: Sencha Mobile Packager, Adobe PhoneGap, and Apache Cordova.\n  All products are supported by the Sencha Device API which allows you to\n  access hardware resources on devices.</p>\n<p>Let me explain the differences between these three solutions:</p>\n<h4 id=\"Sencha-Mobile-Packager\"><a href=\"#Sencha-Mobile-Packager\" class=\"headerlink\" title=\"Sencha Mobile Packager\"></a>Sencha\n  Mobile Packager</h4>\n<p>Uses the <strong>packager.json</strong> to build iOS or Android build\n  packages locally that can be distributed through the Android Marketplace or\n  Apple App Store.</p>\n<h4 id=\"Adobe-PhoneGap\"><a href=\"#Adobe-PhoneGap\" class=\"headerlink\" title=\"Adobe PhoneGap\"></a>Adobe\n  PhoneGap</h4>\n<p>Lets you use the PhoneGap Build cloud service to (remotely) package your\n  apps and distribute them through the Android Marketplace, BlackBerry App\n  World, Windows Phone Store or Apple App Store. It’s an easy solution, and you\n  can test applications on your device by scanning a QR code. You can also\n  build applications locally. It’s a commercial product, and the free version\n  is limited to one private app.</p>\n<h4 id=\"Apache-Cordova\"><a href=\"#Apache-Cordova\" class=\"headerlink\" title=\"Apache Cordova\"></a>Apache\n  Cordova</h4>\n<p>Apache Cordova is a top-level project within the Apache Software Foundation.\n  Cordova is the free, open-source, community-driven version of Adobe PhoneGap.\n  Cordova lets you package apps locally and distribute them through the Android\n  Marketplace, Blackberry App World, Windows Phone Store or Apple App Store.</p>\n<p>Building packages locally via the command-line requires an installation of\n  XCode, Android Developer Tools, BlackBerry 10 SDK or Windows 8 Pro with\n  Visual Studio.</p>\n<p>Building packages via PhoneGap build requires a (free) Adobe (PhoneGap\n  Build) account: <a href=\"https://build.phonegap.com/apps\" target=\"_blank\" rel=\"noopener\">https://build.phonegap.com/apps</a></p>\n<p>Note: We will use PhoneGap Build in this tutorial. If you would rather use\n  Cordova, you can use the same commands as you see in the tutorial, but\n  replace the word <strong><code>phonegap</code></strong> with <strong><code>cordova</code></strong>\n  on the command-line. <img src=\"/images/weather-app-4.png\" alt=\"Weather App Tutorial\"></p>\n<h4 id=\"Initialize-a-PhoneGap-project\"><a href=\"#Initialize-a-PhoneGap-project\" class=\"headerlink\" title=\"Initialize a PhoneGap project\"></a>Initialize\n  a PhoneGap project</h4>\n<p>The first step in building a hybrid app is to issue the following command\n  from your project’s directory to enable it:</p>\n<p>sencha phonegap init<app-id>\n    <app-name></app-name>\n  </app-id>\n</p>\n<ul>\n  <li>The <strong>App ID</strong> follows this pattern: <code>&lt;REVERSED-DOMAIN&gt;.&lt;APP-NAME&gt;</code>.</li>\n  <li>Your <strong>application name</strong> should be the same value as the\n    name property that you specified in your app.json file.</li>\n</ul>\n<p>Note: If you want to port to an iOS app, you will need to make sure that the\n  App Id is the same one that you registered in your Apple provisioning portal.</p>\n<p>Here’s the command I used to enable PhoneGap support:</p>\n<p>sencha phonegap init com.sencha.dinmu Dinmu</p>\n<p>Note: Mac OS X users might need to prefix with sudo to get administrative\n  rights.</p>\n<p>This generated the following structure/files:</p>\n<ul>\n  <li>PhoneGap folder structure</li>\n  <li>phonegap.local.properties</li>\n  <li>config.xml</li>\n</ul>\n<h4 id=\"MyApp-phonegap\"><a href=\"#MyApp-phonegap\" class=\"headerlink\" title=\"MyApp/phonegap\"></a>MyApp/phonegap</h4>\n<p><strong>MyApp/phonegap</strong> contains the full PhoneGap file structure.\n  If you used Cordova to initialize a project, the folder will be named <strong>cordova</strong>.</p>\n<p><img src=\"/images/weather-app-5.png\" alt=\"Weather App Tutorial\"></p>\n<h4 id=\"phonegap-local-properties\"><a href=\"#phonegap-local-properties\" class=\"headerlink\" title=\"phonegap.local.properties\"></a>phonegap.local.properties</h4>\n<p>The <strong>phonegap.local.properties</strong> file contains the names of\n  the platforms that you want when building locally. By default, it takes the\n  local installed SDKs, for example:</p>\n<p>phonegap.platforms=ios android blackberry10 wp8</p>\n<p>When you run the phonegap <code>init</code> command, the property file also\n  gives you settings for the Adobe PhoneGap remote packager. When you have a\n  PhoneGap Build account, you can set up these additional settings:</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">phonegap.build.remote=true</span><br><span class=\"line\">\\# Username for PhoneGap Build</span><br><span class=\"line\">phonegap.build.remote.username=&#123;username&#125;</span><br><span class=\"line\">\\# Password for PhoneGap Build</span><br><span class=\"line\">phonegap.build.remote.password=&#123;password&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>When you leave the phonegap.build.remote property as false, you have to have\n  one of the SDKs (XCode, Android Developer Tools, BlackBerry 10 SDK or Windows\n  8 Pro with Visual Studio) installed on your machine.</p>\n<h4 id=\"config-xml\"><a href=\"#config-xml\" class=\"headerlink\" title=\"config.xml\"></a>config.xml</h4>\n<p>The default Cordova/PhoneGap <strong>config.xml</strong> file contains\n  metadata about your app. Let’s modify this file:</p>\n<p>We will change the app name, app description and author information:</p>\n<figure class=\"highlight xml\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Dinmu<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    Do I need my Umbrella today?</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">author</span> <span class=\"attr\">email</span>=<span class=\"string\">\"myemail@addres.com\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.mydomain.com\"</span>&gt;</span></span><br><span class=\"line\">    Your name</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">author</span>&gt;</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The next step is to enable the Geolocation plugin at startup, to retrieve\n  the location via the device:</p>\n<figure class=\"highlight xml\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">preference</span> <span class=\"attr\">name</span>=<span class=\"string\">\"EnableLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">preference</span>&gt;</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Disable fullscreen mode, to show the status bar (battery indicator and\n  time):</p>\n<figure class=\"highlight xml\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">preference</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fullscreen\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">preference</span>&gt;</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Let’s make sure the application supports connections to external urls. The\n  weather application will connect to <a href=\"http://www.worldweatheronline.com\" target=\"_blank\" rel=\"noopener\">http://www.worldweatheronline.com</a>.\n  Therefore, we need to give access to either this URL or all external URLs. We\n  can use the wildcard to allow all external connections:</p>\n<figure class=\"highlight xml\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">access</span> <span class=\"attr\">origin</span>=<span class=\"string\">\"*\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">access</span>&gt;</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The last thing we’ll modify are the paths to the icons and loading images.\n  By default Sencha Touch generated iOS icons and splash images. They can be\n  found in the <strong>MyApp/resources</strong> folder.</p>\n<p>When building apps for iPhones with retina displays (iPhone 5+), it’s\n  important that you provide the correct splash screens with the required\n  screen sizes. If not, your viewport may be resized incorrectly. For this\n  example, we’ll stick to the PhoneGap splash screens. Feel free to replace\n  them with your own splash screens.</p>\n<figure class=\"highlight xml\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">icon</span> <span class=\"attr\">src</span>=<span class=\"string\">\"icon.png\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">icon</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">icon</span> <span class=\"attr\">src</span>=<span class=\"string\">\"resources/icons/Icon.png\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">icon</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">icon</span> <span class=\"attr\">gap:platform</span>=<span class=\"string\">\"ios\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"57\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"resources/icons/Icon.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"57\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">icon</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">icon</span> <span class=\"attr\">gap:platform</span>=<span class=\"string\">\"ios\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"72\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"resources/icons/Icon~ipad.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"72\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">icon</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">icon</span> <span class=\"attr\">gap:platform</span>=<span class=\"string\">\"ios\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"114\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"resources/icons/Icon@2x.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"114\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">icon</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">icon</span> <span class=\"attr\">gap:platform</span>=<span class=\"string\">\"ios\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"144\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"resources/icons/Icon~ipad@2x.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"144\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">icon</span>&gt;</span> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">gap:splash</span> <span class=\"attr\">gap:platform</span>=<span class=\"string\">\"ios\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"480\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"res/screen/ios/screen-iphone-portrait.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"320\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">gap:splash</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">gap:splash</span> <span class=\"attr\">gap:platform</span>=<span class=\"string\">\"ios\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"960\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"res/screen/ios/screen-iphone-portrait-2x.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"640\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">gap:splash</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">gap:splash</span> <span class=\"attr\">gap:platform</span>=<span class=\"string\">\"ios\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"1024\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"res/screen/ios/screen-ipad-portrait.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"768\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">gap:splash</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">gap:splash</span> <span class=\"attr\">gap:platform</span>=<span class=\"string\">\"ios\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"768\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"res/screen/ios/screen-ipad-landscape.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"1024\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">gap:splash</span>&gt;</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>For more information about possible settings in config.xml, check the <a href=\"http://docs.phonegap.com/en/3.3.0/\" target=\"_blank\" rel=\"noopener\">PhoneGap\n    documentation.</a></p>\n<h4 id=\"Creating-the-native-build-package\"><a href=\"#Creating-the-native-build-package\" class=\"headerlink\" title=\"Creating the native build package\"></a>Creating\n  the native build package</h4>\n<p>After initializing your application with PhoneGap or Cordova, it’s time to\n  create a native build. Run the following command from the command-line:</p>\n<p><code>sencha app build -run native</code></p>\n<p>Note: The -run argument makes sure your app will be loaded in an emulator\n  that’s installed on your machine. Again, Mac OS X users might need to prefix\n  with sudo to get administrative rights.</p>\n<p>It will build the applications in the MyApp/cordova or MyApp/phonegap\n  folder:</p>\n<ul>\n  <li>platforms/android/bin - Android .apk file</li>\n  <li>platforms/ios/build/ - iOS .app file</li>\n  <li>platforms/blackberry10/build/simulator - BlackBerry 10 .bar file</li>\n  <li>platforms/wp8/Bin/Debug - Windows Phone .xap file</li>\n</ul>\n<h4 id=\"Testing-a-native-build\"><a href=\"#Testing-a-native-build\" class=\"headerlink\" title=\"Testing a native build\"></a>Testing\n  a native build</h4>\n<p>If you’re using PhoneGap Build, testing the application on Android devices\n  will be very easy. Simply scan the QR code or download, drag and drop the\n  <strong>.apk</strong> file on the memory card of your phone.</p>\n<p>For iOS, you will need provisioning and code signing, which assures users\n  that the app is from a known source and the app hasn’t been modified since it\n  was last signed. Windows Phone developers and iOS developers will need a\n  (paid) developer account.</p>\n<p>Once you have an iOS developer account, you’ll need to set up a certificate,\n  an identifier and a provisioning profile. For more information, see the <a href=\"https://developer.apple.com/\" target=\"_blank\" rel=\"noopener\">Apple\n    Developer Tools</a> and Sencha Touch docs on <a href=\"http://docs.sencha.com/touch/2.3.1/#!/guide/native_provisioning\" target=\"_blank\" rel=\"noopener\">Packaging\n    Native iOS Applications</a>.</p>\n<p>When all is set, you can build the application with PhoneGap from the\n  command-line interface:</p>\n<p>sencha app build native</p>\n<p>When you build for iOS, you might run into a build error because you need to\n  code sign the iOS app. With PhoneGap Build, you’ll need to upload the <strong>*.p12\n    certificate</strong> and the <strong>*.mobileprovisioning mobile\n    provisioning profile</strong>. After you’ve uploaded these two keys, you\n  can unlock the keys and rebuild.</p>\n<p>If you’re building the app locally, (PhoneGap remote=false or with Cordova),\n  you can open: <strong>platforms/ios/Dinmu.xcodeproj</strong> from the <strong>phonegap</strong>\n  or <strong>cordova</strong> folder, and maintain the build settings to code\n  sign the application. Your developer identity should be in the <em>Code\n    signing identity</em> list. If not, you probably need to go through the\n  whole native provisioning process again.</p>\n<p><img src=\"/images/weather-app-6.png\" alt=\"Weather App Tutorial\"></p>\n<p>Make sure your phone is hooked up to your Mac OS X, and build and run in\n  XCode.</p>\n<p>Congratulations, you’ve finished building a Sencha Touch utility app from\n  scratch. If you’ve followed all three tutorials in this series, you’ve\n  generated an application with Sencha Cmd and created all the views, models,\n  stores and controllers for the Do I need my Umbrella? app. You’ve created a\n  custom theme with Sass, and you’ve created a production build to host on a\n  web server or built a hybrid app wtih Adobe PhoneGap/Cordova. With this\n  workflow, you’re ready to build any app you like.</p>\n<p>Did you like this series of tutorials? Join one of the (advanced) Ext JS and\n  Sencha Touch Training courses. Take a look at the <a href=\"http://www.sencha.com/training/\" target=\"_blank\" rel=\"noopener\">open\n    courses</a> located around the world or join an online class or check out\n  my book that I wrote for O’Reilly: <a href=\"http://shop.oreilly.com/product/0636920030058.do\" target=\"_blank\" rel=\"noopener\">Hands-on\n    Sencha Touch 2 by Lee Boonstra</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p>In this three-part Sencha Touch tutorial, you will build the <em>Do I need\n    my Umbrella?</em> app, a simple utility app that loads weather information\n  from a web service — worldweatheronline.com. Based on weather codes, this app\n  can predict if you need your umbrella or not.","more":"</p>\n<p>In this last part of the tutorial, we’ll talk about builds. You’ll use\n  Sencha Cmd as well as PhoneGap/Cordova.</p>\n<p>For the native app, you’ll use a native API for retrieving the location of\n  the device, and you’ll port your app to a native mobile app with\n  PhoneGap/Cordova for iOS, Android, BlackBerry10 or Windows Phone.</p>\n<p>Note: If you want to test your app on an iOS, BlackBerry or Windows Phone\n  device, you will need authorization keys and developer accounts. Also, if you\n  use Cordova, you can’t build an iOS app in the Windows operating system, nor\n  can you build a Windows app from within Mac OS X.</p>\n<p>For reference, you can view <a href=\"http://www.leeboonstra.com/developer/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-2\" target=\"_blank\" rel=\"noopener\">Part\n    2</a> of this tutorial.</p>\n<p>You can download the solution code from Part 2 of the tutorial — <a href=\"https://training.sencha.com/sencha-blog/tutorial-dec-2013-lee/goodies-tutorial/fullsolution-download.zip\" target=\"_blank\" rel=\"noopener\">full\n    solution</a>.</p>\n<p><strong>This tutorial requires:</strong></p>\n<ul>\n  <li>Sencha Touch 2.3 or higher</li>\n  <li>Sencha Cmd 4.x</li>\n  <li>Compass and Sass on top of Ruby</li>\n  <li>A modern browser</li>\n  <li>An editor</li>\n  <li><a href=\"http://phonegap.com/install/\" target=\"_blank\" rel=\"noopener\">PhoneGap 3.3</a> / <a href=\"http://cordova.apache.org/\" target=\"_blank\" rel=\"noopener\">Cordova\n      3.3</a></li>\n  <li><a href=\"http://www.nodejs.org\" target=\"_blank\" rel=\"noopener\">Node.js v.0.10.23</a></li>\n</ul>\n<p>Optionally, you can install the following software to build apps locally:</p>\n<ul>\n  <li>XCode 5 (for building iOS app locally, for Mac OS X users only)</li>\n  <li>Android Developer Tools (Revisions 13+, for building Android apps\n    locally)</li>\n  <li>Windows 8 Pro with Visual Studio 2012 Pro/Ultimate (for building Windows\n    Phone apps locally, for windows users only)</li>\n  <li>Blackberry 10 Native SDK (for building BlackBerry 10 apps locally)</li>\n</ul>\n<h3 id=\"Creating-a-production-build\"><a href=\"#Creating-a-production-build\" class=\"headerlink\" title=\"Creating a production build\"></a>Creating\n  a production build</h3>\n<p>With Sencha Cmd, you can create production and test build packages. The\n  production build package compiles the Sass style sheet to production-ready\n  (minified) CSS. It will also copy over your static images and build your\n  JavaScript (Sencha Touch framework classes plus your own custom classes) into\n  a single minified, concatenated file that’s small enough to easily download\n  or cache the file. The production build will also include a cache manifest\n  file to enable local caching.</p>\n<p>The test package won’t contain this file. In the test build, the JavaScript\n  and CSS files in the test package won’t be minified and therefore will be\n  readable.</p>\n<p><img src=\"/images/weather-app-1-build.png\" alt=\"Weather App Tutorial\"></p>\n<p>Let’s first create a production build of the Weather application. We’re not\n  going to create a native build yet. In case you want to host the Weather App\n  on your own server, you need to copy the production build folder over to your\n  web server.</p>\n<p>On the command-line enter the following command to generate a production\n  build:</p>\n<p><code>sencha app build production</code></p>\n<p>or</p>\n<p><code>sencha app build testing</code></p>\n<p>Review the folder structure. This is the folder structure you can use on\n  your web server, in case you decide to run the mobile application from an\n  online URL.</p>\n<p><img src=\"/images/weather-app-2-files.png\" alt=\"Weather App Tutorial\"></p>\n<p>Perhaps you noticed that the fonts are not copied into the build folder. We\n  could copy this folder manually, or we could modify the build process. Let’s\n  look into these options.</p>\n<p>Sencha Cmd uses Apache Ant for the build processes. You can find all the\n  internally used tasks in the hidden <strong>.sencha</strong> folder.</p>\n<p>If you want to modify the build process yourself, you can open the <strong>build.xml</strong>\n  file in the root of your application folder and add the following Ant task to\n  the end of the file:</p>\n<figure class=\"highlight xml\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"-after-build\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">depends</span>=<span class=\"string\">\"init,-before-build,-build,-after-build\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">description</span>=<span class=\"string\">\"Copy over the font/dinmu folder and remove temp files\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"$&#123;basedir&#125;/resources/css/stylesheets/fonts/dinmu\"</span> <span class=\"attr\">overwrite</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;basedir&#125;/resources/sass/stylesheets/fonts/dinmu\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"$&#123;build.dir&#125;/resources/css/stylesheets/fonts/dinmu\"</span> <span class=\"attr\">overwrite</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;basedir&#125;/resources/sass/stylesheets/fonts/dinmu\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;basedir&#125;/$&#123;build.dir&#125;\"</span>&gt;</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Now build your application again:</p>\n<p>sencha app build</p>\n<p>You can test the production build with the following url: <a href=\"http://localhost/dinmu/production/Dinmu/\" target=\"_blank\" rel=\"noopener\">http://localhost/dinmu/production/Dinmu/</a></p>\n<h3 id=\"Native-Device-APIs\"><a href=\"#Native-Device-APIs\" class=\"headerlink\" title=\"Native Device APIs\"></a>Native\n  Device APIs</h3>\n<p>Do you want to run your application as a native app on your device? With\n  tools such as Adobe PhoneGap and Apache Cordova, you can port your app to a\n  hybrid app.</p>\n<p>Once you have a hybrid app, you can use device APIs, such as geolocation.\n  The <a href=\"http://docs.phonegap.com/en/edge/cordova_geolocation_geolocation.md.html#Geolocation\" target=\"_blank\" rel=\"noopener\">geolocation</a>\n  object provides access to location data based on the device’s GPS sensor or\n  inferred from network signals.</p>\n<p>Open the following file with your editor: <strong>app/utils/Functions.js</strong>\n  and inspect line 101:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.device.Geolocation.getCurrentPosition(&#123;</span><br><span class=\"line\">   timeout: <span class=\"number\">5000</span>,</span><br><span class=\"line\">   maximumAge: <span class=\"number\">10000</span>,</span><br><span class=\"line\">   success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">position</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> place = position.coords.latitude + <span class=\"string\">\",\"</span> + position.coords.longitude;</span><br><span class=\"line\">      Dinmu.utils.Functions.getWeather(place);</span><br><span class=\"line\">      Ext.Viewport.unmask();</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   failure: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      Ext.Viewport.unmask();</span><br><span class=\"line\">      Ext.Msg.alert(<span class=\"string\">'Timeout'</span>, <span class=\"string\">'Can not retrieve position, please retry.'</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The Sencha Touch class: <code>Ext.device.Geolocation()</code> provides\n  access to the native Geolocation API when running on a device. There are\n  three implementations of this API:</p>\n<ul>\n  <li><a href=\"http://docs.sencha.com/touch/2.3.1/#!/guide/native_packaging-section-step-2%3A-create-a-packaging-configuration-file\" target=\"_blank\" rel=\"noopener\">Sencha\n      Mobile Packager</a></li>\n  <li><a href=\"http://docs.phonegap.com/en/1.4.1/phonegap_device_device.md.html\" target=\"_blank\" rel=\"noopener\">PhoneGap/Cordova</a></li>\n  <li>Browser</li>\n</ul>\n<p>This class will automatically select the correct implementation for the\n  device your application is running on.</p>\n<p>Before we will build the Do I need my umbrella (Dinmu) application, there\n  are two more checks.</p>\n<ul>\n  <li>Prefix the request to api.worldweatheronline.com with the http protocol.\n    You can find this request in <strong>app/utils/Functions.js</strong> on\n    line 125.</li>\n  <li>Make sure you entered a valid API Key for the worldweatheronline.com web\n    service. You can retrieve an API Key by registering at <a href=\"http://www.worldweatheronline.com\" target=\"_blank\" rel=\"noopener\">http://www.worldweatheronline.com</a></li>\n</ul>\n<p>All set? That’s great. The only thing that’s left is building a native app\n  with PhoneGap/Cordova.</p>\n<p><img src=\"/images/weather-app-3-styling2.png\" alt=\"Weather App Tutorial\"></p>\n<h3 id=\"Building-a-hybrid-app\"><a href=\"#Building-a-hybrid-app\" class=\"headerlink\" title=\"Building a hybrid app\"></a>Building\n  a hybrid app</h3>\n<p>There are three products you can use to create a native app from a Sencha\n  Touch code base: Sencha Mobile Packager, Adobe PhoneGap, and Apache Cordova.\n  All products are supported by the Sencha Device API which allows you to\n  access hardware resources on devices.</p>\n<p>Let me explain the differences between these three solutions:</p>\n<h4 id=\"Sencha-Mobile-Packager\"><a href=\"#Sencha-Mobile-Packager\" class=\"headerlink\" title=\"Sencha Mobile Packager\"></a>Sencha\n  Mobile Packager</h4>\n<p>Uses the <strong>packager.json</strong> to build iOS or Android build\n  packages locally that can be distributed through the Android Marketplace or\n  Apple App Store.</p>\n<h4 id=\"Adobe-PhoneGap\"><a href=\"#Adobe-PhoneGap\" class=\"headerlink\" title=\"Adobe PhoneGap\"></a>Adobe\n  PhoneGap</h4>\n<p>Lets you use the PhoneGap Build cloud service to (remotely) package your\n  apps and distribute them through the Android Marketplace, BlackBerry App\n  World, Windows Phone Store or Apple App Store. It’s an easy solution, and you\n  can test applications on your device by scanning a QR code. You can also\n  build applications locally. It’s a commercial product, and the free version\n  is limited to one private app.</p>\n<h4 id=\"Apache-Cordova\"><a href=\"#Apache-Cordova\" class=\"headerlink\" title=\"Apache Cordova\"></a>Apache\n  Cordova</h4>\n<p>Apache Cordova is a top-level project within the Apache Software Foundation.\n  Cordova is the free, open-source, community-driven version of Adobe PhoneGap.\n  Cordova lets you package apps locally and distribute them through the Android\n  Marketplace, Blackberry App World, Windows Phone Store or Apple App Store.</p>\n<p>Building packages locally via the command-line requires an installation of\n  XCode, Android Developer Tools, BlackBerry 10 SDK or Windows 8 Pro with\n  Visual Studio.</p>\n<p>Building packages via PhoneGap build requires a (free) Adobe (PhoneGap\n  Build) account: <a href=\"https://build.phonegap.com/apps\" target=\"_blank\" rel=\"noopener\">https://build.phonegap.com/apps</a></p>\n<p>Note: We will use PhoneGap Build in this tutorial. If you would rather use\n  Cordova, you can use the same commands as you see in the tutorial, but\n  replace the word <strong><code>phonegap</code></strong> with <strong><code>cordova</code></strong>\n  on the command-line. <img src=\"/images/weather-app-4.png\" alt=\"Weather App Tutorial\"></p>\n<h4 id=\"Initialize-a-PhoneGap-project\"><a href=\"#Initialize-a-PhoneGap-project\" class=\"headerlink\" title=\"Initialize a PhoneGap project\"></a>Initialize\n  a PhoneGap project</h4>\n<p>The first step in building a hybrid app is to issue the following command\n  from your project’s directory to enable it:</p>\n<p>sencha phonegap init<app-id>\n    <app-name></app-name>\n  </app-id>\n</p>\n<ul>\n  <li>The <strong>App ID</strong> follows this pattern: <code>&lt;REVERSED-DOMAIN&gt;.&lt;APP-NAME&gt;</code>.</li>\n  <li>Your <strong>application name</strong> should be the same value as the\n    name property that you specified in your app.json file.</li>\n</ul>\n<p>Note: If you want to port to an iOS app, you will need to make sure that the\n  App Id is the same one that you registered in your Apple provisioning portal.</p>\n<p>Here’s the command I used to enable PhoneGap support:</p>\n<p>sencha phonegap init com.sencha.dinmu Dinmu</p>\n<p>Note: Mac OS X users might need to prefix with sudo to get administrative\n  rights.</p>\n<p>This generated the following structure/files:</p>\n<ul>\n  <li>PhoneGap folder structure</li>\n  <li>phonegap.local.properties</li>\n  <li>config.xml</li>\n</ul>\n<h4 id=\"MyApp-phonegap\"><a href=\"#MyApp-phonegap\" class=\"headerlink\" title=\"MyApp/phonegap\"></a>MyApp/phonegap</h4>\n<p><strong>MyApp/phonegap</strong> contains the full PhoneGap file structure.\n  If you used Cordova to initialize a project, the folder will be named <strong>cordova</strong>.</p>\n<p><img src=\"/images/weather-app-5.png\" alt=\"Weather App Tutorial\"></p>\n<h4 id=\"phonegap-local-properties\"><a href=\"#phonegap-local-properties\" class=\"headerlink\" title=\"phonegap.local.properties\"></a>phonegap.local.properties</h4>\n<p>The <strong>phonegap.local.properties</strong> file contains the names of\n  the platforms that you want when building locally. By default, it takes the\n  local installed SDKs, for example:</p>\n<p>phonegap.platforms=ios android blackberry10 wp8</p>\n<p>When you run the phonegap <code>init</code> command, the property file also\n  gives you settings for the Adobe PhoneGap remote packager. When you have a\n  PhoneGap Build account, you can set up these additional settings:</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">phonegap.build.remote=true</span><br><span class=\"line\">\\# Username for PhoneGap Build</span><br><span class=\"line\">phonegap.build.remote.username=&#123;username&#125;</span><br><span class=\"line\">\\# Password for PhoneGap Build</span><br><span class=\"line\">phonegap.build.remote.password=&#123;password&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>When you leave the phonegap.build.remote property as false, you have to have\n  one of the SDKs (XCode, Android Developer Tools, BlackBerry 10 SDK or Windows\n  8 Pro with Visual Studio) installed on your machine.</p>\n<h4 id=\"config-xml\"><a href=\"#config-xml\" class=\"headerlink\" title=\"config.xml\"></a>config.xml</h4>\n<p>The default Cordova/PhoneGap <strong>config.xml</strong> file contains\n  metadata about your app. Let’s modify this file:</p>\n<p>We will change the app name, app description and author information:</p>\n<figure class=\"highlight xml\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Dinmu<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    Do I need my Umbrella today?</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">author</span> <span class=\"attr\">email</span>=<span class=\"string\">\"myemail@addres.com\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.mydomain.com\"</span>&gt;</span></span><br><span class=\"line\">    Your name</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">author</span>&gt;</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The next step is to enable the Geolocation plugin at startup, to retrieve\n  the location via the device:</p>\n<figure class=\"highlight xml\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">preference</span> <span class=\"attr\">name</span>=<span class=\"string\">\"EnableLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">preference</span>&gt;</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Disable fullscreen mode, to show the status bar (battery indicator and\n  time):</p>\n<figure class=\"highlight xml\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">preference</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fullscreen\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">preference</span>&gt;</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Let’s make sure the application supports connections to external urls. The\n  weather application will connect to <a href=\"http://www.worldweatheronline.com\" target=\"_blank\" rel=\"noopener\">http://www.worldweatheronline.com</a>.\n  Therefore, we need to give access to either this URL or all external URLs. We\n  can use the wildcard to allow all external connections:</p>\n<figure class=\"highlight xml\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">access</span> <span class=\"attr\">origin</span>=<span class=\"string\">\"*\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">access</span>&gt;</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The last thing we’ll modify are the paths to the icons and loading images.\n  By default Sencha Touch generated iOS icons and splash images. They can be\n  found in the <strong>MyApp/resources</strong> folder.</p>\n<p>When building apps for iPhones with retina displays (iPhone 5+), it’s\n  important that you provide the correct splash screens with the required\n  screen sizes. If not, your viewport may be resized incorrectly. For this\n  example, we’ll stick to the PhoneGap splash screens. Feel free to replace\n  them with your own splash screens.</p>\n<figure class=\"highlight xml\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">icon</span> <span class=\"attr\">src</span>=<span class=\"string\">\"icon.png\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">icon</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">icon</span> <span class=\"attr\">src</span>=<span class=\"string\">\"resources/icons/Icon.png\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">icon</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">icon</span> <span class=\"attr\">gap:platform</span>=<span class=\"string\">\"ios\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"57\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"resources/icons/Icon.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"57\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">icon</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">icon</span> <span class=\"attr\">gap:platform</span>=<span class=\"string\">\"ios\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"72\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"resources/icons/Icon~ipad.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"72\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">icon</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">icon</span> <span class=\"attr\">gap:platform</span>=<span class=\"string\">\"ios\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"114\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"resources/icons/Icon@2x.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"114\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">icon</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">icon</span> <span class=\"attr\">gap:platform</span>=<span class=\"string\">\"ios\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"144\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"resources/icons/Icon~ipad@2x.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"144\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">icon</span>&gt;</span> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">gap:splash</span> <span class=\"attr\">gap:platform</span>=<span class=\"string\">\"ios\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"480\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"res/screen/ios/screen-iphone-portrait.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"320\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">gap:splash</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">gap:splash</span> <span class=\"attr\">gap:platform</span>=<span class=\"string\">\"ios\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"960\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"res/screen/ios/screen-iphone-portrait-2x.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"640\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">gap:splash</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">gap:splash</span> <span class=\"attr\">gap:platform</span>=<span class=\"string\">\"ios\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"1024\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"res/screen/ios/screen-ipad-portrait.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"768\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">gap:splash</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">gap:splash</span> <span class=\"attr\">gap:platform</span>=<span class=\"string\">\"ios\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"768\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"res/screen/ios/screen-ipad-landscape.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"1024\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">gap:splash</span>&gt;</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>For more information about possible settings in config.xml, check the <a href=\"http://docs.phonegap.com/en/3.3.0/\" target=\"_blank\" rel=\"noopener\">PhoneGap\n    documentation.</a></p>\n<h4 id=\"Creating-the-native-build-package\"><a href=\"#Creating-the-native-build-package\" class=\"headerlink\" title=\"Creating the native build package\"></a>Creating\n  the native build package</h4>\n<p>After initializing your application with PhoneGap or Cordova, it’s time to\n  create a native build. Run the following command from the command-line:</p>\n<p><code>sencha app build -run native</code></p>\n<p>Note: The -run argument makes sure your app will be loaded in an emulator\n  that’s installed on your machine. Again, Mac OS X users might need to prefix\n  with sudo to get administrative rights.</p>\n<p>It will build the applications in the MyApp/cordova or MyApp/phonegap\n  folder:</p>\n<ul>\n  <li>platforms/android/bin - Android .apk file</li>\n  <li>platforms/ios/build/ - iOS .app file</li>\n  <li>platforms/blackberry10/build/simulator - BlackBerry 10 .bar file</li>\n  <li>platforms/wp8/Bin/Debug - Windows Phone .xap file</li>\n</ul>\n<h4 id=\"Testing-a-native-build\"><a href=\"#Testing-a-native-build\" class=\"headerlink\" title=\"Testing a native build\"></a>Testing\n  a native build</h4>\n<p>If you’re using PhoneGap Build, testing the application on Android devices\n  will be very easy. Simply scan the QR code or download, drag and drop the\n  <strong>.apk</strong> file on the memory card of your phone.</p>\n<p>For iOS, you will need provisioning and code signing, which assures users\n  that the app is from a known source and the app hasn’t been modified since it\n  was last signed. Windows Phone developers and iOS developers will need a\n  (paid) developer account.</p>\n<p>Once you have an iOS developer account, you’ll need to set up a certificate,\n  an identifier and a provisioning profile. For more information, see the <a href=\"https://developer.apple.com/\" target=\"_blank\" rel=\"noopener\">Apple\n    Developer Tools</a> and Sencha Touch docs on <a href=\"http://docs.sencha.com/touch/2.3.1/#!/guide/native_provisioning\" target=\"_blank\" rel=\"noopener\">Packaging\n    Native iOS Applications</a>.</p>\n<p>When all is set, you can build the application with PhoneGap from the\n  command-line interface:</p>\n<p>sencha app build native</p>\n<p>When you build for iOS, you might run into a build error because you need to\n  code sign the iOS app. With PhoneGap Build, you’ll need to upload the <strong>*.p12\n    certificate</strong> and the <strong>*.mobileprovisioning mobile\n    provisioning profile</strong>. After you’ve uploaded these two keys, you\n  can unlock the keys and rebuild.</p>\n<p>If you’re building the app locally, (PhoneGap remote=false or with Cordova),\n  you can open: <strong>platforms/ios/Dinmu.xcodeproj</strong> from the <strong>phonegap</strong>\n  or <strong>cordova</strong> folder, and maintain the build settings to code\n  sign the application. Your developer identity should be in the <em>Code\n    signing identity</em> list. If not, you probably need to go through the\n  whole native provisioning process again.</p>\n<p><img src=\"/images/weather-app-6.png\" alt=\"Weather App Tutorial\"></p>\n<p>Make sure your phone is hooked up to your Mac OS X, and build and run in\n  XCode.</p>\n<p>Congratulations, you’ve finished building a Sencha Touch utility app from\n  scratch. If you’ve followed all three tutorials in this series, you’ve\n  generated an application with Sencha Cmd and created all the views, models,\n  stores and controllers for the Do I need my Umbrella? app. You’ve created a\n  custom theme with Sass, and you’ve created a production build to host on a\n  web server or built a hybrid app wtih Adobe PhoneGap/Cordova. With this\n  workflow, you’re ready to build any app you like.</p>\n<p>Did you like this series of tutorials? Join one of the (advanced) Ext JS and\n  Sencha Touch Training courses. Take a look at the <a href=\"http://www.sencha.com/training/\" target=\"_blank\" rel=\"noopener\">open\n    courses</a> located around the world or join an online class or check out\n  my book that I wrote for O’Reilly: <a href=\"http://shop.oreilly.com/product/0636920030058.do\" target=\"_blank\" rel=\"noopener\">Hands-on\n    Sencha Touch 2 by Lee Boonstra</a></p>"},{"title":"Getting Started with Sencha Touch 2: Build a Weather Utility App (Part 1)","description":"Welcome at this series of blog posts How to create a utility app with Sencha Touch and Sencha Cmd","date":"2014-04-07T08:42:51.000Z","_content":"\n_Welcome at this series of blog posts: How to create a utility app with Sencha Touch and Sencha Cmd. Originally I wrote this tutorial for [.NET magazine](http://www.creativebloq.com/net-magazine) and afterwards I modified it for the [Sencha Blog Site](http://www.sencha.com/blog/). Since I think it's a good set of articles and you might have missed it. I will also post the 3 parts of the tutorial here, every week. Enjoy!_\n<!--more-->\n\nIn this three-part Sencha Touch tutorial, you will build the Do I need my Umbrella app, a simple utility app that loads weather information from a web service — worldweatheronline.com. Based on weather codes, this app can predict if you need your umbrella or not.\n\nIn this tutorial, you will start with coding the app. The next tutorials will focus on creating a cool Sencha Touch theme and how to port your app to a native app with PhoneGap.\n\nThis tutorial requires:\n\n*   Sencha Touch 2.3 or higher\n*   Sencha Cmd 4.x\n*   A modern browser\n*   Editor\n\nHere are some additional resources:  \nYou can see the app itself up and running [here](https://training.sencha.com/sencha-blog/tutorial-nov-2013-lee/dinmu/).  \nThe final code can be downloaded [here](https://training.sencha.com/sencha-blog/tutorial-nov-2013-lee/goodies-tutorial/code.zip).  \nThere are some tutorial goodies you will need — [controller](https://training.sencha.com/sencha-blog/tutorial-nov-2013-lee/goodies-tutorial/controller.txt) and [functions](https://training.sencha.com/sencha-blog/tutorial-nov-2013-lee/goodies-tutorial/functions.txt).\n\n### Generate and run the demo application\n\nLet’s start by creating a sencha folder somewhere on your hard disk. Download the Sencha Touch 2.3 framework and extract it into the newly created sencha folder. Now, create the folder for your app, I’ve called it dinmu since that is shorter than the name “DoINeedMyUmbrella” but it’s up to you.\n\nNow, open your command line (MS-Dos Prompt or Mac OS X Terminal), navigate to the Sencha framework folder: (cd sencha/touch-2.3.x folder) and run the following command to generate your Sencha Touch MVC folder structure:\n\nsencha generate app -name Dinmu -path ../dinmu\n\nThis command generates the full MVC structure for your application: _Do I need my Umbrella_. It takes the namespace **Dinmu**, to prefix all your classes. Review the folder structure it has created.\n\nNow it’s time to start your web server via the command line — use the path to your **sencha** folder. (If you would rather use your own Apache web server, you are free to start it and skip this step.) On Mac OS X, you might need permissions for executing the next command: if you run into permission errors, prefix the above command with **sudo**.\n\nsencha fs web -p 80 start -map /path/to/sencha/folder/\n\nThis will start your built-in Jetty web server. You need your CLI window open to keep the server running, so it makes sense to open a new CLI window for the next commands.\n\nTest your generated Sencha Touch app. Open your modern browser (such as Google Chrome or Safari) and run: [http://localhost/dinmu](http://localhost/dinmu). You should see the Sencha demo app interface with a bottom tab panel and two demo slides:\n\n![Weather App](/images/weather-app-1.png)\n\n### The Data Package\n\nIn the next steps, you will generate the model which will define your data. There are a couple of settings you want to save in your app: **id**, **city**, **country**, **units** and **geolocation**. You will define these data settings as model fields. Sencha Cmd can scaffold this model for you. Run the following command from the **dinmu** folder on the command line:\n\nsencha generate model Setting id,city,country,units,geo:boolean\n\nThis command generated the model for your application. It takes the classname **Setting** and one String with all the field names to define all the different fields. Let’s review your folder structure again.\n\nOpen **app/model/Setting.js** with your editor. Notice the namespace **Dinmu.model.Setting** is equal to **app/model/Setting.js**. This is your implementation of the Setting model; Sencha Cmd defined a Setting model class for you. It extends a model implementation from the Sencha Touch framework: **Ext.data.Model** and it contains all the fields and field types.\n\nThe field **id**, will define id’s for every model record in your application. To have it behave as a unique id, you will need to configure it. Before the **fields** array, configure an **idProperty** and an **identifier**.\n\nidProperty: 'id',\nidentifier: 'uuid',\n\nThe logic for these unique IDs are in a Sencha class that we need to “import” into our app. We can use a **requires** for that, this requires the class **Ext.data.identifier.Uuid**.\n\n``` JavaScript\nrequires: ['Ext.data.identifier.Uuid']\n```\n\nThe next step is to create some **validations** for our model. After the **fields** array, create a **validations** array. The array contains validation objects to validate whether the data for these fields is present:\n\n``` JavaScript\nvalidations: \\[{\n    type: 'presence',\n    field: 'city',\n    message: \"Please provide a city.\"\n}, {\n    type: 'presence',\n    field: 'country',\n    message: \"Please provide a country.\"\n}\\],\n```\n\nSince we want to save the local settings data to the device, the last step is to add a client proxy.\n\nWe will use **localstorage**. The localstorage proxy will make sure that all the data persists into the browser localstorage. Define the **proxy** object directly after the **validations** array:\n\n``` JavaScript\nproxy: {\n    type: 'localstorage',\n    id: 'weathersettings'\n}\n```\n\n### The View Components\n\nThe standard tabpanel interface that Sencha Cmd generates looks good, but it’s not what you need for a utility app. The _Do I need my Umbrella_ app will need a carousel interface.\n\nOpen the code of **app/view/Main.js** in your IDE or text editor.\n\nThe current implementation of **Dinmu.view.Main** extends from the Sencha Touch **Ext.tab.Panel** class. It has a **tabBarPosition** property to add the tabs to the screen bottom.\n\nWe don’t need it, so remove **tabBarPosition:bottom** and change the **extend** to **Ext.Carousel**, to extend from the Sencha Touch Carousel class. From here, you can open your browser and run: [http://localhost/dinmu](http://localhost/dinmu). You should see the generated Sencha demo app. The tabpanel interface is replaced by a carousel interface. You can slide the views horizontally.\n\nLet’s remove more default components. We won’t need the demo video, so let’s remove the **Ext.Video** from the **requires** array. We can also empty the **items** array, since we will replace it with two new items.\n\nThe first item object (container by default) has only the **html** property. This can be set to a placeholder text: **Settings Form** so you can code this later. The second item object has a property **itemId: ‘mainview’** and a **cls** property (for styling) set to the value: **textview**. Also add a **direction** property, which will set the direction of the Carousel to ‘**vertical**’.\n\n``` JavaScript\nExt.define('Dinmu.view.Main', {\n    extend: 'Ext.Carousel',\n    xtype: 'main',\n    requires: [\n        'Ext.TitleBar'\n    ],\n    config: {\n        direction: 'vertical',\n        items: [{\n            html: 'Settings Form'\n        },{\n            itemId: 'mainview',\n            cls: 'textview'\n        }]\n    }\n});\n```\n\nViewed in the browser, the app looks pretty basic. Let’s add a top **titlebar** and a bottom toolbar. Before the Settings Form object, create a new object. This object will get the **xtype: ‘titlebar’** to add a new instance of **Ext.TitleBar** to the Viewport (the screen). Set a class name on the titlebar with the CSS class property: **cls: ‘title’**. Set a **docked: ‘top’** property to stick this titlebar to the top of the screen. Set the title to: **Do I need my Umbrella?** with the **title** property:\n\n``` JavaScript\n{\n    xtype: 'titlebar',\n    cls: 'title',\n    docked: 'top',\n    title: 'Do I need my Umbrella?'\n},\n```\n\nYou will do the same for the bottom toolbar. This time the **xtype** is not **titlebar** but **toolbar**. The **cls** can be set to **footer**. Dock it to the bottom of the screen. Instead of the **title** property, the toolbar needs an **html** property. Set this to some copyright string. We will add an **ui** property which is set to **light** to create a lighter look and feel. Don’t forget to add **Ext.Toolbar** to the **requires** array in the top of the file, so the correct framework class will be loaded into the memory.\n\n``` JavaScript\n{\n    xtype: 'toolbar',\n    cls: 'footer',\n    ui: 'light',\n    docked: 'bottom',\n    html: 'Powered by &copy; Sencha Touch'\n},\n```\n\nThe next step is to create some buttons in the top titlebar.\n\nThe **titlebar** should contain an **items** array, which contains two buttons. A back button, which will be displayed when you are on the settings screen, and a settings button which will be shown on the default screen. You don’t need to set the **xtype** to **button**, the default item of an **Ext.TitleBar** is a button. The back button, is by default **hidden** and it is left aligned in the titlebar. The settings button, shows an icon of a settings gear.\n\nConfirm your code looks like this:\n\n``` JavaScript\nExt.define('Dinmu.view.Main', {\n    extend: 'Ext.Carousel',\n    xtype: 'main',\n    requires: [\n        'Ext.TitleBar',\n        'Ext.Toolbar'\n    ],\n    config: {\n        direction: 'vertical',\n        items: [\n        {\n            xtype: 'titlebar',\n            cls: 'title',\n            docked: 'top',\n            title: 'Do I need my Umbrella?',\n            items: [{\n               cls: 'back',\n               hidden: true,\n               ui: 'back',\n               action: 'back',\n               align: 'left',\n               text: 'back'\n            },\n            {\n               iconCls: 'settings',\n               action: 'settings',\n               ui: 'plain',\n               align: 'right'\n            }]\n        },\n        {\n            html: 'Settings Form'\n        },{\n            itemId: 'mainview',\n            cls: 'textview'\n        },\n        {\n            xtype: 'toolbar',\n            cls: 'footer',\n            ui: 'light',\n            docked: 'bottom',\n            html: 'Powered by &copy; Sencha Touch'\n        }]\n    }\n});\n```\n\nOpen your browser and run: [http://localhost/dinmu](http://localhost/dinmu). You should see a button with a gear in the right corner of the **Ext.TitleBar**.\n\n### Forms\n\nNow, we can start with creating a form. You know what? Let’s generate this too. Navigate to the **dinmu** folder on the command line and run the following to generate your Sencha Touch form:\n\nsencha generate form SettingsView geo:toggle,units:select,city,country\n\nReview the form class that has been scaffolded. Open **app/view/SettingsView**. The **Dinmu.view.SettingsView** class has an **xtype** set to **settingsview**. You can assign custom made classes to item arrays with the **xtype** property.\n\nSo let’s do so. Open **Dinmu.view.Main** (**app/view/Main.js**), find the settings item in your code. By default, if you don’t specify its **xtype** is set to **container**. You will need to refer to the new **xtype: settingsview**, so add **xtype: ‘settingsview’** to the Main view code. You don’t need the placeholder html string anymore. Remove the **html: settings** property. Also don’t forget to add **Dinmu.view.SettingsView** to the **requires** array to make sure this class is loaded in memory.\n\nTo make it look better, you will add a **fieldset** to the **Ext.form.Panel** in the SettingsView. This fieldset contains the four new fields and the submit button. The fieldset will be a child of the formpanel and has its own children: the form **fields** and the **button**.\n\nCreate a second **items** array in the **config** object (after the **title** property). Nest the second items array as a child. The parent items array contains one fieldset xtype, with a **title: ‘Your location’**, and a line with **instructions**.\n\nMake sure the child items array contains all the fields and the button. Verify your code looks like this:\n\n``` JavaScript\nExt.define('Dinmu.view.SettingsView', {\n    extend: 'Ext.form.Panel',\n    xtype: 'settingsview',\n \n    config: {\n        items:[{\n            xtype: 'fieldset',\n            title: 'SettingsView',\n            instructions: 'In case you do not want the app to detect your location you can enter the city and country.',\n            items: [\n                {\n                    name: 'geo',\n                    xtype: 'togglefield',\n                    label: 'Geo'\n                },\n                {\n                    name: 'units',\n                    xtype: 'selectfield',\n                    label: 'Units'\n                },\n                {\n                    name: 'city',\n                    xtype: 'textfield',\n                    label: 'City'\n                },\n                {\n                    name: 'country',\n                    xtype: 'textfield',\n                    label: 'Country'\n                },\n                {\n                    xtype: 'button',\n                    text: 'Submit',\n                    ui: 'confirm'\n                }\n            ]\n        }]\n    }\n});\n```\n\nOpen your browser and run: [http://localhost/dinmu](http://localhost/dinmu). You should see the settings form with a **title** and some **instructions**. But there is something odd with the select unit field. It has no values.\n\nLet’s add some values to the units **selectfield**.\n\nCreate an **options** array with two objects. One with the **text: ‘Fahrenheit’** and a **value: ‘f’** and one object with the **text: ‘Celsius’** and the **value: ‘c’**.\n\nThe label GEO in the **togglefield** makes little sense. Change this **label to: ‘ Auto detect?’** Since the text for this label takes much more space, we will set the **labelWidth** to ‘**55%**’. Set the value of the geo field to **value: ‘1’** to enable geolocation by default.\n\nDisable the units, city and country fields by adding **disabled: true** to all fields.\n\nThe button **text**, should be **Refresh** instead of **Submit**. Change this in the button component. Add a **margin** with the value ‘**10 5**’. Also add an **action** property to the button and set this to ‘**refresh**’. This way, we can reference the button later:\n\n``` JavaScript\n{\n    xtype: 'button',\n    text: 'Refresh',\n    action: 'refresh',\n    margin: '10 5'\n    ui: 'confirm'\n}\n```\n\nYou might have noticed that the console outputs some warnings. The **Ext.Loader**, the mechanism that loads all the Sencha Touch framework classes in the correct order into memory, needs to load the classes that are used for the form fields. Create a **requires** array, (above the **config** object) and assign it the following strings:\n\n``` JavaScript\nrequires: [\n    'Ext.form.FieldSet',\n    'Ext.field.Toggle',\n    'Ext.field.Select',\n    'Ext.field.Text',\n    'Ext.Button'\n],\n```\n\nYou’ve finished the interface.\n\nHere’s the complete code for the settingsview:\n\n``` JavaScript\nExt.define('Dinmu.view.SettingsView', {\n    extend: 'Ext.form.Panel',\n    xtype: 'settingsview',\n    requires: [\n        'Ext.form.FieldSet',\n        'Ext.field.Toggle',\n        'Ext.field.Select',\n        'Ext.field.Text',\n        'Ext.Button'\n    ],\n    config: {\n        items:[{\n            xtype: 'fieldset',\n            title: 'SettingsView',\n            instructions: 'In case you do not want the app to detect your location you can enter the city and country.',\n            items: [\n                {\n                    name: 'geo',\n                    xtype: 'togglefield',\n                    label: 'Auto Detect?',\n                    labelWidth: '55%',\n                    value: '1'\n                },\n                {\n                    name: 'units',\n                    xtype: 'selectfield',\n                    options: [\n                    {\n                        text: 'Fahrenheit',\n                        value: 'f'\n                    },\n                    {\n                         text: 'Celsius',\n                         value: 'c'\n                    }],\n                    label: 'Units',\n                    disabled: true\n                },\n                {\n                    name: 'city',\n                    xtype: 'textfield',\n                    label: 'City',\n                    disabled: true\n                },\n                {\n                    name: 'country',\n                    xtype: 'textfield',\n                    label: 'Country',\n                    disabled: true\n                },\n                {\n                    xtype: 'button',\n                    text: 'Refresh',\n                    action: 'refresh',\n                    margin: '10 5',\n                    ui: 'confirm'\n                }\n            ]\n        }]\n    }\n});\n```\n\nBut wait, what about the main view? Yes, you will dynamically inject this page with data. Therefore, you will need some logic to achieve this, so let's start with creating a controller.\n\n![Weather App](/images/weather-app-2.png)\n\n### Building The Controller\n\nThe **controller** will be the glue between the settings **model** (the app data) and the settings **view**. It will contain references to all view components and dispatch its events. Navigate to the **dinmu** folder and run the following command from the command line:\n\nsencha generate controller Main\n\nThis command generates the Main controller. Open **app/controller/Main.js** with your editor. You will see a **controller** with an empty references object (**refs**) and an empty **control** object.\n\nNext, let’s create references to all the view components, **main**, **settingsview**, the **titlebar settings** and **back** buttons and to the settings **form fields** and **refresh** button. The selectors are a bit CSS-like. Your code could look like this:\n\n``` JavaScript\nrefs: {\n    mainView: 'main',\n    settingsView: 'settingsview',\n \n    btnSettings: 'main button[action=settings]',\n    btnRefresh: 'settingsview button[action=refresh]',\n    btnBack: 'main button[action=back]',\n \n    toggleGeo: 'settingsview togglefield',\n    fieldCity: 'settingsview textfield[name=city]',\n    fieldCountry: 'settingsview textfield[name=country]',\n    fieldUnits: 'settingsview selectfield'\n},\n```\n\nNow that you have references to all the view components that should contain events, you can add the controls.\n\n``` JavaScript\ncontrol: {\n    'btnRefresh': {\n        tap: 'onRefresh'\n    },\n    'btnSettings': {\n        tap: 'onSettingsBtnTap'\n    },\n    'btnBack': {\n        tap: 'onBackBtnTap'\n    },\n    'toggleGeo': {\n        change: 'onToggle'\n    },\n    'mainView': {\n        activeitemchange: 'onCarouselChange'\n    }\n}\n```\n\nBefore browser testing the events, you must hook the controller to **app.js** which is the MVC’s entry point. Open **app.js**, create a **controllers** array, right below the **requires** array and pass in the string ‘**Main**’ mapping the Main controller to the **app/controller/Main.js** file.\n\n``` JavaScript\ncontrollers: [\n    'Main'\n],\n```\n\nNow, we will add some logic. Go back to **Dinmu.controller.Main** and add the functions in the **goodies-tutorial** directory. You can find them in **controller.txt**.\n\nReplace the **launch** function with the functions provided.\n\n### Setting Up Stores and Singletons\n\nStores encapsulate a client side cache of model objects. Stores can have a Proxy too, and also provide functions for sorting, filtering, grouping and querying the model instances (records) contained within it.\n\nOur app needs a store to save all the user settings.\n\nUnfortunately, you can’t generate stores with Sencha Cmd. Instead, let’s create a new file in the **app/store** folder called: **Settings.js**. Define a new class: **Dinmu.store.Settings**. This class extends all methods and properties from the **Ext.data.Store** class. In the **config** object, create a property called: **model**. It should connect to the Setting model. Also, the settings store should load automatically:\n\n``` JavaScript\nExt.define('Dinmu.store.Settings', {\n    extend: 'Ext.data.Store',\n    requires: ['Dinmu.model.Setting'],\n        config: {\n            model: 'Dinmu.model.Setting',\n            autoLoad: true\n    }\n});\n```\n\nOpen **controller/Main.js**, in the **config** object create a **stores** array and add the **Dinmu.store.Settings** store to it:\n\n``` JavaScript\nstores: 'Dinmu.store.Settings',\n```\n\nSometimes, it’s better to separate your business logic outside the MVC folders.\n\nIn the app folder, create a new folder **utils**. Create the file **Functions.js**, and define a class called: **Dinmu.utils.Functions**. This class has a property: **singleton** set to **true**. Now your class is a singleton, you cannot create more than one instance of it, but you can run the singleton methods from everywhere in your code:\n\n``` JavaScript\nExt.define('Dinmu.utils.Functions', {\n    singleton: true,\n    //singleton methods here\n});\n```\n\nAdd **Dinmu.utils.Functions** to the **requires** array of the **app.js** file.\n\nOpen the snippet: **functions.txt** from the **goodies-tutorial** folder and copy all the functions into the **utils/Functions.js** file.\n\nThis snippet contains the functions you will need for requesting weather data from [http://api.worldweatheronline.com/](http://api.worldweatheronline.com/). If you would rather request and use your own API_KEY, you can edit it on top of the **Functions.js** by changing the String for property **API_KEY**. It also contains logic for requesting geolocation on the device and injecting data in the template on the mainview. If you are really interested in this logic, I left complete comments in the functions.txt file which describes exactly what is going on.\n\nTo test the logic, open **Google Chrome Developer Tools** and switch to the **Console tab** and enter the following line: **Dinmu.utils.Functions.getWeather(‘London’)** it should return a weather object for London and display some text in the mainview.\n\nFinally the _Do I need my Umbrella_ app is finished! Open your browser and run: [http://localhost/dinmu](http://localhost/dinmu). The next steps for improving your application would be to apply a theme and a production build. This is something I will discuss in the next Sencha Blog tutorial.\n\n![Weather App](/images/weather-app-3.png)\n\nIf you found this tutorial helpful check out my book I wrote for O'Reilly: [Hands-on Sencha Touch 2](http://shop.oreilly.com/product/0636920030058.do)!","source":"_posts/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-1.md","raw":"---\ntitle: 'Getting Started with Sencha Touch 2: Build a Weather Utility App (Part 1)'\ndescription: Welcome at this series of blog posts How to create a utility app with Sencha Touch and Sencha Cmd\ntags:\n  - Sencha CMD\n  - Sencha Touch\n  - Utility app\n  - Weather app\ncategories:\n  - Sencha Touch\ndate: 2014-04-07 10:42:51\n---\n\n_Welcome at this series of blog posts: How to create a utility app with Sencha Touch and Sencha Cmd. Originally I wrote this tutorial for [.NET magazine](http://www.creativebloq.com/net-magazine) and afterwards I modified it for the [Sencha Blog Site](http://www.sencha.com/blog/). Since I think it's a good set of articles and you might have missed it. I will also post the 3 parts of the tutorial here, every week. Enjoy!_\n<!--more-->\n\nIn this three-part Sencha Touch tutorial, you will build the Do I need my Umbrella app, a simple utility app that loads weather information from a web service — worldweatheronline.com. Based on weather codes, this app can predict if you need your umbrella or not.\n\nIn this tutorial, you will start with coding the app. The next tutorials will focus on creating a cool Sencha Touch theme and how to port your app to a native app with PhoneGap.\n\nThis tutorial requires:\n\n*   Sencha Touch 2.3 or higher\n*   Sencha Cmd 4.x\n*   A modern browser\n*   Editor\n\nHere are some additional resources:  \nYou can see the app itself up and running [here](https://training.sencha.com/sencha-blog/tutorial-nov-2013-lee/dinmu/).  \nThe final code can be downloaded [here](https://training.sencha.com/sencha-blog/tutorial-nov-2013-lee/goodies-tutorial/code.zip).  \nThere are some tutorial goodies you will need — [controller](https://training.sencha.com/sencha-blog/tutorial-nov-2013-lee/goodies-tutorial/controller.txt) and [functions](https://training.sencha.com/sencha-blog/tutorial-nov-2013-lee/goodies-tutorial/functions.txt).\n\n### Generate and run the demo application\n\nLet’s start by creating a sencha folder somewhere on your hard disk. Download the Sencha Touch 2.3 framework and extract it into the newly created sencha folder. Now, create the folder for your app, I’ve called it dinmu since that is shorter than the name “DoINeedMyUmbrella” but it’s up to you.\n\nNow, open your command line (MS-Dos Prompt or Mac OS X Terminal), navigate to the Sencha framework folder: (cd sencha/touch-2.3.x folder) and run the following command to generate your Sencha Touch MVC folder structure:\n\nsencha generate app -name Dinmu -path ../dinmu\n\nThis command generates the full MVC structure for your application: _Do I need my Umbrella_. It takes the namespace **Dinmu**, to prefix all your classes. Review the folder structure it has created.\n\nNow it’s time to start your web server via the command line — use the path to your **sencha** folder. (If you would rather use your own Apache web server, you are free to start it and skip this step.) On Mac OS X, you might need permissions for executing the next command: if you run into permission errors, prefix the above command with **sudo**.\n\nsencha fs web -p 80 start -map /path/to/sencha/folder/\n\nThis will start your built-in Jetty web server. You need your CLI window open to keep the server running, so it makes sense to open a new CLI window for the next commands.\n\nTest your generated Sencha Touch app. Open your modern browser (such as Google Chrome or Safari) and run: [http://localhost/dinmu](http://localhost/dinmu). You should see the Sencha demo app interface with a bottom tab panel and two demo slides:\n\n![Weather App](/images/weather-app-1.png)\n\n### The Data Package\n\nIn the next steps, you will generate the model which will define your data. There are a couple of settings you want to save in your app: **id**, **city**, **country**, **units** and **geolocation**. You will define these data settings as model fields. Sencha Cmd can scaffold this model for you. Run the following command from the **dinmu** folder on the command line:\n\nsencha generate model Setting id,city,country,units,geo:boolean\n\nThis command generated the model for your application. It takes the classname **Setting** and one String with all the field names to define all the different fields. Let’s review your folder structure again.\n\nOpen **app/model/Setting.js** with your editor. Notice the namespace **Dinmu.model.Setting** is equal to **app/model/Setting.js**. This is your implementation of the Setting model; Sencha Cmd defined a Setting model class for you. It extends a model implementation from the Sencha Touch framework: **Ext.data.Model** and it contains all the fields and field types.\n\nThe field **id**, will define id’s for every model record in your application. To have it behave as a unique id, you will need to configure it. Before the **fields** array, configure an **idProperty** and an **identifier**.\n\nidProperty: 'id',\nidentifier: 'uuid',\n\nThe logic for these unique IDs are in a Sencha class that we need to “import” into our app. We can use a **requires** for that, this requires the class **Ext.data.identifier.Uuid**.\n\n``` JavaScript\nrequires: ['Ext.data.identifier.Uuid']\n```\n\nThe next step is to create some **validations** for our model. After the **fields** array, create a **validations** array. The array contains validation objects to validate whether the data for these fields is present:\n\n``` JavaScript\nvalidations: \\[{\n    type: 'presence',\n    field: 'city',\n    message: \"Please provide a city.\"\n}, {\n    type: 'presence',\n    field: 'country',\n    message: \"Please provide a country.\"\n}\\],\n```\n\nSince we want to save the local settings data to the device, the last step is to add a client proxy.\n\nWe will use **localstorage**. The localstorage proxy will make sure that all the data persists into the browser localstorage. Define the **proxy** object directly after the **validations** array:\n\n``` JavaScript\nproxy: {\n    type: 'localstorage',\n    id: 'weathersettings'\n}\n```\n\n### The View Components\n\nThe standard tabpanel interface that Sencha Cmd generates looks good, but it’s not what you need for a utility app. The _Do I need my Umbrella_ app will need a carousel interface.\n\nOpen the code of **app/view/Main.js** in your IDE or text editor.\n\nThe current implementation of **Dinmu.view.Main** extends from the Sencha Touch **Ext.tab.Panel** class. It has a **tabBarPosition** property to add the tabs to the screen bottom.\n\nWe don’t need it, so remove **tabBarPosition:bottom** and change the **extend** to **Ext.Carousel**, to extend from the Sencha Touch Carousel class. From here, you can open your browser and run: [http://localhost/dinmu](http://localhost/dinmu). You should see the generated Sencha demo app. The tabpanel interface is replaced by a carousel interface. You can slide the views horizontally.\n\nLet’s remove more default components. We won’t need the demo video, so let’s remove the **Ext.Video** from the **requires** array. We can also empty the **items** array, since we will replace it with two new items.\n\nThe first item object (container by default) has only the **html** property. This can be set to a placeholder text: **Settings Form** so you can code this later. The second item object has a property **itemId: ‘mainview’** and a **cls** property (for styling) set to the value: **textview**. Also add a **direction** property, which will set the direction of the Carousel to ‘**vertical**’.\n\n``` JavaScript\nExt.define('Dinmu.view.Main', {\n    extend: 'Ext.Carousel',\n    xtype: 'main',\n    requires: [\n        'Ext.TitleBar'\n    ],\n    config: {\n        direction: 'vertical',\n        items: [{\n            html: 'Settings Form'\n        },{\n            itemId: 'mainview',\n            cls: 'textview'\n        }]\n    }\n});\n```\n\nViewed in the browser, the app looks pretty basic. Let’s add a top **titlebar** and a bottom toolbar. Before the Settings Form object, create a new object. This object will get the **xtype: ‘titlebar’** to add a new instance of **Ext.TitleBar** to the Viewport (the screen). Set a class name on the titlebar with the CSS class property: **cls: ‘title’**. Set a **docked: ‘top’** property to stick this titlebar to the top of the screen. Set the title to: **Do I need my Umbrella?** with the **title** property:\n\n``` JavaScript\n{\n    xtype: 'titlebar',\n    cls: 'title',\n    docked: 'top',\n    title: 'Do I need my Umbrella?'\n},\n```\n\nYou will do the same for the bottom toolbar. This time the **xtype** is not **titlebar** but **toolbar**. The **cls** can be set to **footer**. Dock it to the bottom of the screen. Instead of the **title** property, the toolbar needs an **html** property. Set this to some copyright string. We will add an **ui** property which is set to **light** to create a lighter look and feel. Don’t forget to add **Ext.Toolbar** to the **requires** array in the top of the file, so the correct framework class will be loaded into the memory.\n\n``` JavaScript\n{\n    xtype: 'toolbar',\n    cls: 'footer',\n    ui: 'light',\n    docked: 'bottom',\n    html: 'Powered by &copy; Sencha Touch'\n},\n```\n\nThe next step is to create some buttons in the top titlebar.\n\nThe **titlebar** should contain an **items** array, which contains two buttons. A back button, which will be displayed when you are on the settings screen, and a settings button which will be shown on the default screen. You don’t need to set the **xtype** to **button**, the default item of an **Ext.TitleBar** is a button. The back button, is by default **hidden** and it is left aligned in the titlebar. The settings button, shows an icon of a settings gear.\n\nConfirm your code looks like this:\n\n``` JavaScript\nExt.define('Dinmu.view.Main', {\n    extend: 'Ext.Carousel',\n    xtype: 'main',\n    requires: [\n        'Ext.TitleBar',\n        'Ext.Toolbar'\n    ],\n    config: {\n        direction: 'vertical',\n        items: [\n        {\n            xtype: 'titlebar',\n            cls: 'title',\n            docked: 'top',\n            title: 'Do I need my Umbrella?',\n            items: [{\n               cls: 'back',\n               hidden: true,\n               ui: 'back',\n               action: 'back',\n               align: 'left',\n               text: 'back'\n            },\n            {\n               iconCls: 'settings',\n               action: 'settings',\n               ui: 'plain',\n               align: 'right'\n            }]\n        },\n        {\n            html: 'Settings Form'\n        },{\n            itemId: 'mainview',\n            cls: 'textview'\n        },\n        {\n            xtype: 'toolbar',\n            cls: 'footer',\n            ui: 'light',\n            docked: 'bottom',\n            html: 'Powered by &copy; Sencha Touch'\n        }]\n    }\n});\n```\n\nOpen your browser and run: [http://localhost/dinmu](http://localhost/dinmu). You should see a button with a gear in the right corner of the **Ext.TitleBar**.\n\n### Forms\n\nNow, we can start with creating a form. You know what? Let’s generate this too. Navigate to the **dinmu** folder on the command line and run the following to generate your Sencha Touch form:\n\nsencha generate form SettingsView geo:toggle,units:select,city,country\n\nReview the form class that has been scaffolded. Open **app/view/SettingsView**. The **Dinmu.view.SettingsView** class has an **xtype** set to **settingsview**. You can assign custom made classes to item arrays with the **xtype** property.\n\nSo let’s do so. Open **Dinmu.view.Main** (**app/view/Main.js**), find the settings item in your code. By default, if you don’t specify its **xtype** is set to **container**. You will need to refer to the new **xtype: settingsview**, so add **xtype: ‘settingsview’** to the Main view code. You don’t need the placeholder html string anymore. Remove the **html: settings** property. Also don’t forget to add **Dinmu.view.SettingsView** to the **requires** array to make sure this class is loaded in memory.\n\nTo make it look better, you will add a **fieldset** to the **Ext.form.Panel** in the SettingsView. This fieldset contains the four new fields and the submit button. The fieldset will be a child of the formpanel and has its own children: the form **fields** and the **button**.\n\nCreate a second **items** array in the **config** object (after the **title** property). Nest the second items array as a child. The parent items array contains one fieldset xtype, with a **title: ‘Your location’**, and a line with **instructions**.\n\nMake sure the child items array contains all the fields and the button. Verify your code looks like this:\n\n``` JavaScript\nExt.define('Dinmu.view.SettingsView', {\n    extend: 'Ext.form.Panel',\n    xtype: 'settingsview',\n \n    config: {\n        items:[{\n            xtype: 'fieldset',\n            title: 'SettingsView',\n            instructions: 'In case you do not want the app to detect your location you can enter the city and country.',\n            items: [\n                {\n                    name: 'geo',\n                    xtype: 'togglefield',\n                    label: 'Geo'\n                },\n                {\n                    name: 'units',\n                    xtype: 'selectfield',\n                    label: 'Units'\n                },\n                {\n                    name: 'city',\n                    xtype: 'textfield',\n                    label: 'City'\n                },\n                {\n                    name: 'country',\n                    xtype: 'textfield',\n                    label: 'Country'\n                },\n                {\n                    xtype: 'button',\n                    text: 'Submit',\n                    ui: 'confirm'\n                }\n            ]\n        }]\n    }\n});\n```\n\nOpen your browser and run: [http://localhost/dinmu](http://localhost/dinmu). You should see the settings form with a **title** and some **instructions**. But there is something odd with the select unit field. It has no values.\n\nLet’s add some values to the units **selectfield**.\n\nCreate an **options** array with two objects. One with the **text: ‘Fahrenheit’** and a **value: ‘f’** and one object with the **text: ‘Celsius’** and the **value: ‘c’**.\n\nThe label GEO in the **togglefield** makes little sense. Change this **label to: ‘ Auto detect?’** Since the text for this label takes much more space, we will set the **labelWidth** to ‘**55%**’. Set the value of the geo field to **value: ‘1’** to enable geolocation by default.\n\nDisable the units, city and country fields by adding **disabled: true** to all fields.\n\nThe button **text**, should be **Refresh** instead of **Submit**. Change this in the button component. Add a **margin** with the value ‘**10 5**’. Also add an **action** property to the button and set this to ‘**refresh**’. This way, we can reference the button later:\n\n``` JavaScript\n{\n    xtype: 'button',\n    text: 'Refresh',\n    action: 'refresh',\n    margin: '10 5'\n    ui: 'confirm'\n}\n```\n\nYou might have noticed that the console outputs some warnings. The **Ext.Loader**, the mechanism that loads all the Sencha Touch framework classes in the correct order into memory, needs to load the classes that are used for the form fields. Create a **requires** array, (above the **config** object) and assign it the following strings:\n\n``` JavaScript\nrequires: [\n    'Ext.form.FieldSet',\n    'Ext.field.Toggle',\n    'Ext.field.Select',\n    'Ext.field.Text',\n    'Ext.Button'\n],\n```\n\nYou’ve finished the interface.\n\nHere’s the complete code for the settingsview:\n\n``` JavaScript\nExt.define('Dinmu.view.SettingsView', {\n    extend: 'Ext.form.Panel',\n    xtype: 'settingsview',\n    requires: [\n        'Ext.form.FieldSet',\n        'Ext.field.Toggle',\n        'Ext.field.Select',\n        'Ext.field.Text',\n        'Ext.Button'\n    ],\n    config: {\n        items:[{\n            xtype: 'fieldset',\n            title: 'SettingsView',\n            instructions: 'In case you do not want the app to detect your location you can enter the city and country.',\n            items: [\n                {\n                    name: 'geo',\n                    xtype: 'togglefield',\n                    label: 'Auto Detect?',\n                    labelWidth: '55%',\n                    value: '1'\n                },\n                {\n                    name: 'units',\n                    xtype: 'selectfield',\n                    options: [\n                    {\n                        text: 'Fahrenheit',\n                        value: 'f'\n                    },\n                    {\n                         text: 'Celsius',\n                         value: 'c'\n                    }],\n                    label: 'Units',\n                    disabled: true\n                },\n                {\n                    name: 'city',\n                    xtype: 'textfield',\n                    label: 'City',\n                    disabled: true\n                },\n                {\n                    name: 'country',\n                    xtype: 'textfield',\n                    label: 'Country',\n                    disabled: true\n                },\n                {\n                    xtype: 'button',\n                    text: 'Refresh',\n                    action: 'refresh',\n                    margin: '10 5',\n                    ui: 'confirm'\n                }\n            ]\n        }]\n    }\n});\n```\n\nBut wait, what about the main view? Yes, you will dynamically inject this page with data. Therefore, you will need some logic to achieve this, so let's start with creating a controller.\n\n![Weather App](/images/weather-app-2.png)\n\n### Building The Controller\n\nThe **controller** will be the glue between the settings **model** (the app data) and the settings **view**. It will contain references to all view components and dispatch its events. Navigate to the **dinmu** folder and run the following command from the command line:\n\nsencha generate controller Main\n\nThis command generates the Main controller. Open **app/controller/Main.js** with your editor. You will see a **controller** with an empty references object (**refs**) and an empty **control** object.\n\nNext, let’s create references to all the view components, **main**, **settingsview**, the **titlebar settings** and **back** buttons and to the settings **form fields** and **refresh** button. The selectors are a bit CSS-like. Your code could look like this:\n\n``` JavaScript\nrefs: {\n    mainView: 'main',\n    settingsView: 'settingsview',\n \n    btnSettings: 'main button[action=settings]',\n    btnRefresh: 'settingsview button[action=refresh]',\n    btnBack: 'main button[action=back]',\n \n    toggleGeo: 'settingsview togglefield',\n    fieldCity: 'settingsview textfield[name=city]',\n    fieldCountry: 'settingsview textfield[name=country]',\n    fieldUnits: 'settingsview selectfield'\n},\n```\n\nNow that you have references to all the view components that should contain events, you can add the controls.\n\n``` JavaScript\ncontrol: {\n    'btnRefresh': {\n        tap: 'onRefresh'\n    },\n    'btnSettings': {\n        tap: 'onSettingsBtnTap'\n    },\n    'btnBack': {\n        tap: 'onBackBtnTap'\n    },\n    'toggleGeo': {\n        change: 'onToggle'\n    },\n    'mainView': {\n        activeitemchange: 'onCarouselChange'\n    }\n}\n```\n\nBefore browser testing the events, you must hook the controller to **app.js** which is the MVC’s entry point. Open **app.js**, create a **controllers** array, right below the **requires** array and pass in the string ‘**Main**’ mapping the Main controller to the **app/controller/Main.js** file.\n\n``` JavaScript\ncontrollers: [\n    'Main'\n],\n```\n\nNow, we will add some logic. Go back to **Dinmu.controller.Main** and add the functions in the **goodies-tutorial** directory. You can find them in **controller.txt**.\n\nReplace the **launch** function with the functions provided.\n\n### Setting Up Stores and Singletons\n\nStores encapsulate a client side cache of model objects. Stores can have a Proxy too, and also provide functions for sorting, filtering, grouping and querying the model instances (records) contained within it.\n\nOur app needs a store to save all the user settings.\n\nUnfortunately, you can’t generate stores with Sencha Cmd. Instead, let’s create a new file in the **app/store** folder called: **Settings.js**. Define a new class: **Dinmu.store.Settings**. This class extends all methods and properties from the **Ext.data.Store** class. In the **config** object, create a property called: **model**. It should connect to the Setting model. Also, the settings store should load automatically:\n\n``` JavaScript\nExt.define('Dinmu.store.Settings', {\n    extend: 'Ext.data.Store',\n    requires: ['Dinmu.model.Setting'],\n        config: {\n            model: 'Dinmu.model.Setting',\n            autoLoad: true\n    }\n});\n```\n\nOpen **controller/Main.js**, in the **config** object create a **stores** array and add the **Dinmu.store.Settings** store to it:\n\n``` JavaScript\nstores: 'Dinmu.store.Settings',\n```\n\nSometimes, it’s better to separate your business logic outside the MVC folders.\n\nIn the app folder, create a new folder **utils**. Create the file **Functions.js**, and define a class called: **Dinmu.utils.Functions**. This class has a property: **singleton** set to **true**. Now your class is a singleton, you cannot create more than one instance of it, but you can run the singleton methods from everywhere in your code:\n\n``` JavaScript\nExt.define('Dinmu.utils.Functions', {\n    singleton: true,\n    //singleton methods here\n});\n```\n\nAdd **Dinmu.utils.Functions** to the **requires** array of the **app.js** file.\n\nOpen the snippet: **functions.txt** from the **goodies-tutorial** folder and copy all the functions into the **utils/Functions.js** file.\n\nThis snippet contains the functions you will need for requesting weather data from [http://api.worldweatheronline.com/](http://api.worldweatheronline.com/). If you would rather request and use your own API_KEY, you can edit it on top of the **Functions.js** by changing the String for property **API_KEY**. It also contains logic for requesting geolocation on the device and injecting data in the template on the mainview. If you are really interested in this logic, I left complete comments in the functions.txt file which describes exactly what is going on.\n\nTo test the logic, open **Google Chrome Developer Tools** and switch to the **Console tab** and enter the following line: **Dinmu.utils.Functions.getWeather(‘London’)** it should return a weather object for London and display some text in the mainview.\n\nFinally the _Do I need my Umbrella_ app is finished! Open your browser and run: [http://localhost/dinmu](http://localhost/dinmu). The next steps for improving your application would be to apply a theme and a production build. This is something I will discuss in the next Sencha Blog tutorial.\n\n![Weather App](/images/weather-app-3.png)\n\nIf you found this tutorial helpful check out my book I wrote for O'Reilly: [Hands-on Sencha Touch 2](http://shop.oreilly.com/product/0636920030058.do)!","slug":"getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-1","published":1,"updated":"2018-11-25T11:59:39.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncs300brkif5c5jxioc5","content":"<p><em>Welcome at this series of blog posts: How to create a utility app with\n    Sencha Touch and Sencha Cmd. Originally I wrote this tutorial for <a href=\"http://www.creativebloq.com/net-magazine\" target=\"_blank\" rel=\"noopener\">.NET\n      magazine</a> and afterwards I modified it for the <a href=\"http://www.sencha.com/blog/\" target=\"_blank\" rel=\"noopener\">Sencha\n      Blog Site</a>. Since I think it’s a good set of articles and you might\n    have missed it. I will also post the 3 parts of the tutorial here, every\n    week. Enjoy!</em>\n  <a id=\"more\"></a>\n</p>\n<p>In this three-part Sencha Touch tutorial, you will build the Do I need my\n  Umbrella app, a simple utility app that loads weather information from a web\n  service — worldweatheronline.com. Based on weather codes, this app can\n  predict if you need your umbrella or not.</p>\n<p>In this tutorial, you will start with coding the app. The next tutorials\n  will focus on creating a cool Sencha Touch theme and how to port your app to\n  a native app with PhoneGap.</p>\n<p>This tutorial requires:</p>\n<ul>\n  <li>Sencha Touch 2.3 or higher</li>\n  <li>Sencha Cmd 4.x</li>\n  <li>A modern browser</li>\n  <li>Editor</li>\n</ul>\n<p>Here are some additional resources:<br>You can see the app itself up and\n  running <a href=\"https://training.sencha.com/sencha-blog/tutorial-nov-2013-lee/dinmu/\" target=\"_blank\" rel=\"noopener\">here</a>.<br>The\n  final code can be downloaded <a href=\"https://training.sencha.com/sencha-blog/tutorial-nov-2013-lee/goodies-tutorial/code.zip\" target=\"_blank\" rel=\"noopener\">here</a>.<br>There\n  are some tutorial goodies you will need — <a href=\"https://training.sencha.com/sencha-blog/tutorial-nov-2013-lee/goodies-tutorial/controller.txt\" target=\"_blank\" rel=\"noopener\">controller</a>\n  and <a href=\"https://training.sencha.com/sencha-blog/tutorial-nov-2013-lee/goodies-tutorial/functions.txt\" target=\"_blank\" rel=\"noopener\">functions</a>.</p>\n<h3 id=\"Generate-and-run-the-demo-application\"><a href=\"#Generate-and-run-the-demo-application\" class=\"headerlink\" title=\"Generate and run the demo application\"></a>Generate\n  and run the demo application</h3>\n<p>Let’s start by creating a sencha folder somewhere on your hard disk.\n  Download the Sencha Touch 2.3 framework and extract it into the newly created\n  sencha folder. Now, create the folder for your app, I’ve called it dinmu\n  since that is shorter than the name “DoINeedMyUmbrella” but it’s up to you.</p>\n<p>Now, open your command line (MS-Dos Prompt or Mac OS X Terminal), navigate\n  to the Sencha framework folder: (cd sencha/touch-2.3.x folder) and run the\n  following command to generate your Sencha Touch MVC folder structure:</p>\n<p>sencha generate app -name Dinmu -path ../dinmu</p>\n<p>This command generates the full MVC structure for your application: <em>Do I\n    need my Umbrella</em>. It takes the namespace <strong>Dinmu</strong>, to\n  prefix all your classes. Review the folder structure it has created.</p>\n<p>Now it’s time to start your web server via the command line — use the path\n  to your <strong>sencha</strong> folder. (If you would rather use your own\n  Apache web server, you are free to start it and skip this step.) On Mac OS X,\n  you might need permissions for executing the next command: if you run into\n  permission errors, prefix the above command with <strong>sudo</strong>.</p>\n<p>sencha fs web -p 80 start -map /path/to/sencha/folder/</p>\n<p>This will start your built-in Jetty web server. You need your CLI window\n  open to keep the server running, so it makes sense to open a new CLI window\n  for the next commands.</p>\n<p>Test your generated Sencha Touch app. Open your modern browser (such as\n  Google Chrome or Safari) and run: <a href=\"http://localhost/dinmu\" target=\"_blank\" rel=\"noopener\">http://localhost/dinmu</a>.\n  You should see the Sencha demo app interface with a bottom tab panel and two\n  demo slides:</p>\n<p><img src=\"/images/weather-app-1.png\" alt=\"Weather App\"></p>\n<h3 id=\"The-Data-Package\"><a href=\"#The-Data-Package\" class=\"headerlink\" title=\"The Data Package\"></a>The\n  Data Package</h3>\n<p>In the next steps, you will generate the model which will define your data.\n  There are a couple of settings you want to save in your app: <strong>id</strong>,\n  <strong>city</strong>, <strong>country</strong>, <strong>units</strong> and\n  <strong>geolocation</strong>. You will define these data settings as model\n  fields. Sencha Cmd can scaffold this model for you. Run the following command\n  from the <strong>dinmu</strong> folder on the command line:</p>\n<p>sencha generate model Setting id,city,country,units,geo:boolean</p>\n<p>This command generated the model for your application. It takes the\n  classname <strong>Setting</strong> and one String with all the field names to\n  define all the different fields. Let’s review your folder structure again.</p>\n<p>Open <strong>app/model/Setting.js</strong> with your editor. Notice the\n  namespace <strong>Dinmu.model.Setting</strong> is equal to <strong>app/model/Setting.js</strong>.\n  This is your implementation of the Setting model; Sencha Cmd defined a\n  Setting model class for you. It extends a model implementation from the\n  Sencha Touch framework: <strong>Ext.data.Model</strong> and it contains all\n  the fields and field types.</p>\n<p>The field <strong>id</strong>, will define id’s for every model record in\n  your application. To have it behave as a unique id, you will need to\n  configure it. Before the <strong>fields</strong> array, configure an <strong>idProperty</strong>\n  and an <strong>identifier</strong>.</p>\n<p>idProperty: ‘id’, identifier: ‘uuid’,</p>\n<p>The logic for these unique IDs are in a Sencha class that we need to\n  “import” into our app. We can use a <strong>requires</strong> for that, this\n  requires the class <strong>Ext.data.identifier.Uuid</strong>.</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">requires: [<span class=\"string\">'Ext.data.identifier.Uuid'</span>]</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The next step is to create some <strong>validations</strong> for our model.\n  After the <strong>fields</strong> array, create a <strong>validations</strong>\n  array. The array contains validation objects to validate whether the data for\n  these fields is present:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">validations: \\[&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'presence'</span>,</span><br><span class=\"line\">    field: <span class=\"string\">'city'</span>,</span><br><span class=\"line\">    message: <span class=\"string\">\"Please provide a city.\"</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'presence'</span>,</span><br><span class=\"line\">    field: <span class=\"string\">'country'</span>,</span><br><span class=\"line\">    message: <span class=\"string\">\"Please provide a country.\"</span></span><br><span class=\"line\">&#125;\\],</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Since we want to save the local settings data to the device, the last step\n  is to add a client proxy.</p>\n<p>We will use <strong>localstorage</strong>. The localstorage proxy will make\n  sure that all the data persists into the browser localstorage. Define the\n  <strong>proxy</strong> object directly after the <strong>validations</strong>\n  array:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">proxy: &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'localstorage'</span>,</span><br><span class=\"line\">    id: <span class=\"string\">'weathersettings'</span></span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<h3 id=\"The-View-Components\"><a href=\"#The-View-Components\" class=\"headerlink\" title=\"The View Components\"></a>The\n  View Components</h3>\n<p>The standard tabpanel interface that Sencha Cmd generates looks good, but\n  it’s not what you need for a utility app. The <em>Do I need my Umbrella</em>\n  app will need a carousel interface.</p>\n<p>Open the code of <strong>app/view/Main.js</strong> in your IDE or text\n  editor.</p>\n<p>The current implementation of <strong>Dinmu.view.Main</strong> extends from\n  the Sencha Touch <strong>Ext.tab.Panel</strong> class. It has a <strong>tabBarPosition</strong>\n  property to add the tabs to the screen bottom.</p>\n<p>We don’t need it, so remove <strong>tabBarPosition:bottom</strong> and\n  change the <strong>extend</strong> to <strong>Ext.Carousel</strong>, to\n  extend from the Sencha Touch Carousel class. From here, you can open your\n  browser and run: <a href=\"http://localhost/dinmu\" target=\"_blank\" rel=\"noopener\">http://localhost/dinmu</a>.\n  You should see the generated Sencha demo app. The tabpanel interface is\n  replaced by a carousel interface. You can slide the views horizontally.</p>\n<p>Let’s remove more default components. We won’t need the demo video, so let’s\n  remove the <strong>Ext.Video</strong> from the <strong>requires</strong>\n  array. We can also empty the <strong>items</strong> array, since we will\n  replace it with two new items.</p>\n<p>The first item object (container by default) has only the <strong>html</strong>\n  property. This can be set to a placeholder text: <strong>Settings Form</strong>\n  so you can code this later. The second item object has a property <strong>itemId:\n    ‘mainview’</strong> and a <strong>cls</strong> property (for styling) set\n  to the value: <strong>textview</strong>. Also add a <strong>direction</strong>\n  property, which will set the direction of the Carousel to ‘<strong>vertical</strong>’.</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'Dinmu.view.Main'</span>, &#123;</span><br><span class=\"line\">    extend: <span class=\"string\">'Ext.Carousel'</span>,</span><br><span class=\"line\">    xtype: <span class=\"string\">'main'</span>,</span><br><span class=\"line\">    requires: [</span><br><span class=\"line\">        <span class=\"string\">'Ext.TitleBar'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    config: &#123;</span><br><span class=\"line\">        direction: <span class=\"string\">'vertical'</span>,</span><br><span class=\"line\">        items: [&#123;</span><br><span class=\"line\">            html: <span class=\"string\">'Settings Form'</span></span><br><span class=\"line\">        &#125;,&#123;</span><br><span class=\"line\">            itemId: <span class=\"string\">'mainview'</span>,</span><br><span class=\"line\">            cls: <span class=\"string\">'textview'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Viewed in the browser, the app looks pretty basic. Let’s add a top <strong>titlebar</strong>\n  and a bottom toolbar. Before the Settings Form object, create a new object.\n  This object will get the <strong>xtype: ‘titlebar’</strong> to add a new\n  instance of <strong>Ext.TitleBar</strong> to the Viewport (the screen). Set a\n  class name on the titlebar with the CSS class property: <strong>cls: ‘title’</strong>.\n  Set a <strong>docked: ‘top’</strong> property to stick this titlebar to the\n  top of the screen. Set the title to: <strong>Do I need my Umbrella?</strong>\n  with the <strong>title</strong> property:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">&#123;</span><br><span class=\"line\">    xtype: <span class=\"string\">'titlebar'</span>,</span><br><span class=\"line\">    cls: <span class=\"string\">'title'</span>,</span><br><span class=\"line\">    docked: <span class=\"string\">'top'</span>,</span><br><span class=\"line\">    title: <span class=\"string\">'Do I need my Umbrella?'</span></span><br><span class=\"line\">&#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>You will do the same for the bottom toolbar. This time the <strong>xtype</strong>\n  is not <strong>titlebar</strong> but <strong>toolbar</strong>. The <strong>cls</strong>\n  can be set to <strong>footer</strong>. Dock it to the bottom of the screen.\n  Instead of the <strong>title</strong> property, the toolbar needs an <strong>html</strong>\n  property. Set this to some copyright string. We will add an <strong>ui</strong>\n  property which is set to <strong>light</strong> to create a lighter look and\n  feel. Don’t forget to add <strong>Ext.Toolbar</strong> to the <strong>requires</strong>\n  array in the top of the file, so the correct framework class will be loaded\n  into the memory.</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">&#123;</span><br><span class=\"line\">    xtype: <span class=\"string\">'toolbar'</span>,</span><br><span class=\"line\">    cls: <span class=\"string\">'footer'</span>,</span><br><span class=\"line\">    ui: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">    docked: <span class=\"string\">'bottom'</span>,</span><br><span class=\"line\">    html: <span class=\"string\">'Powered by &amp;copy; Sencha Touch'</span></span><br><span class=\"line\">&#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The next step is to create some buttons in the top titlebar.</p>\n<p>The <strong>titlebar</strong> should contain an <strong>items</strong>\n  array, which contains two buttons. A back button, which will be displayed\n  when you are on the settings screen, and a settings button which will be\n  shown on the default screen. You don’t need to set the <strong>xtype</strong>\n  to <strong>button</strong>, the default item of an <strong>Ext.TitleBar</strong>\n  is a button. The back button, is by default <strong>hidden</strong> and it is\n  left aligned in the titlebar. The settings button, shows an icon of a\n  settings gear.</p>\n<p>Confirm your code looks like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'Dinmu.view.Main'</span>, &#123;</span><br><span class=\"line\">    extend: <span class=\"string\">'Ext.Carousel'</span>,</span><br><span class=\"line\">    xtype: <span class=\"string\">'main'</span>,</span><br><span class=\"line\">    requires: [</span><br><span class=\"line\">        <span class=\"string\">'Ext.TitleBar'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Ext.Toolbar'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    config: &#123;</span><br><span class=\"line\">        direction: <span class=\"string\">'vertical'</span>,</span><br><span class=\"line\">        items: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            xtype: <span class=\"string\">'titlebar'</span>,</span><br><span class=\"line\">            cls: <span class=\"string\">'title'</span>,</span><br><span class=\"line\">            docked: <span class=\"string\">'top'</span>,</span><br><span class=\"line\">            title: <span class=\"string\">'Do I need my Umbrella?'</span>,</span><br><span class=\"line\">            items: [&#123;</span><br><span class=\"line\">               cls: <span class=\"string\">'back'</span>,</span><br><span class=\"line\">               hidden: <span class=\"literal\">true</span>,</span><br><span class=\"line\">               ui: <span class=\"string\">'back'</span>,</span><br><span class=\"line\">               action: <span class=\"string\">'back'</span>,</span><br><span class=\"line\">               align: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">               text: <span class=\"string\">'back'</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               iconCls: <span class=\"string\">'settings'</span>,</span><br><span class=\"line\">               action: <span class=\"string\">'settings'</span>,</span><br><span class=\"line\">               ui: <span class=\"string\">'plain'</span>,</span><br><span class=\"line\">               align: <span class=\"string\">'right'</span></span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            html: <span class=\"string\">'Settings Form'</span></span><br><span class=\"line\">        &#125;,&#123;</span><br><span class=\"line\">            itemId: <span class=\"string\">'mainview'</span>,</span><br><span class=\"line\">            cls: <span class=\"string\">'textview'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            xtype: <span class=\"string\">'toolbar'</span>,</span><br><span class=\"line\">            cls: <span class=\"string\">'footer'</span>,</span><br><span class=\"line\">            ui: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">            docked: <span class=\"string\">'bottom'</span>,</span><br><span class=\"line\">            html: <span class=\"string\">'Powered by &amp;copy; Sencha Touch'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Open your browser and run: <a href=\"http://localhost/dinmu\" target=\"_blank\" rel=\"noopener\">http://localhost/dinmu</a>.\n  You should see a button with a gear in the right corner of the <strong>Ext.TitleBar</strong>.</p>\n<h3 id=\"Forms\"><a href=\"#Forms\" class=\"headerlink\" title=\"Forms\"></a>Forms</h3>\n<p>Now, we can start with creating a form. You know what? Let’s generate this\n  too. Navigate to the <strong>dinmu</strong> folder on the command line and\n  run the following to generate your Sencha Touch form:</p>\n<p>sencha generate form SettingsView geo:toggle,units:select,city,country</p>\n<p>Review the form class that has been scaffolded. Open <strong>app/view/SettingsView</strong>.\n  The <strong>Dinmu.view.SettingsView</strong> class has an <strong>xtype</strong>\n  set to <strong>settingsview</strong>. You can assign custom made classes to\n  item arrays with the <strong>xtype</strong> property.</p>\n<p>So let’s do so. Open <strong>Dinmu.view.Main</strong> (<strong>app/view/Main.js</strong>),\n  find the settings item in your code. By default, if you don’t specify its\n  <strong>xtype</strong> is set to <strong>container</strong>. You will need to\n  refer to the new <strong>xtype: settingsview</strong>, so add <strong>xtype:\n    ‘settingsview’</strong> to the Main view code. You don’t need the\n  placeholder html string anymore. Remove the <strong>html: settings</strong>\n  property. Also don’t forget to add <strong>Dinmu.view.SettingsView</strong>\n  to the <strong>requires</strong> array to make sure this class is loaded in\n  memory.</p>\n<p>To make it look better, you will add a <strong>fieldset</strong> to the\n  <strong>Ext.form.Panel</strong> in the SettingsView. This fieldset contains\n  the four new fields and the submit button. The fieldset will be a child of\n  the formpanel and has its own children: the form <strong>fields</strong> and\n  the <strong>button</strong>.</p>\n<p>Create a second <strong>items</strong> array in the <strong>config</strong>\n  object (after the <strong>title</strong> property). Nest the second items\n  array as a child. The parent items array contains one fieldset xtype, with a\n  <strong>title: ‘Your location’</strong>, and a line with <strong>instructions</strong>.</p>\n<p>Make sure the child items array contains all the fields and the button.\n  Verify your code looks like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'Dinmu.view.SettingsView'</span>, &#123;</span><br><span class=\"line\">    extend: <span class=\"string\">'Ext.form.Panel'</span>,</span><br><span class=\"line\">    xtype: <span class=\"string\">'settingsview'</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">    config: &#123;</span><br><span class=\"line\">        items:[&#123;</span><br><span class=\"line\">            xtype: <span class=\"string\">'fieldset'</span>,</span><br><span class=\"line\">            title: <span class=\"string\">'SettingsView'</span>,</span><br><span class=\"line\">            instructions: <span class=\"string\">'In case you do not want the app to detect your location you can enter the city and country.'</span>,</span><br><span class=\"line\">            items: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'geo'</span>,</span><br><span class=\"line\">                    xtype: <span class=\"string\">'togglefield'</span>,</span><br><span class=\"line\">                    label: <span class=\"string\">'Geo'</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'units'</span>,</span><br><span class=\"line\">                    xtype: <span class=\"string\">'selectfield'</span>,</span><br><span class=\"line\">                    label: <span class=\"string\">'Units'</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'city'</span>,</span><br><span class=\"line\">                    xtype: <span class=\"string\">'textfield'</span>,</span><br><span class=\"line\">                    label: <span class=\"string\">'City'</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'country'</span>,</span><br><span class=\"line\">                    xtype: <span class=\"string\">'textfield'</span>,</span><br><span class=\"line\">                    label: <span class=\"string\">'Country'</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    xtype: <span class=\"string\">'button'</span>,</span><br><span class=\"line\">                    text: <span class=\"string\">'Submit'</span>,</span><br><span class=\"line\">                    ui: <span class=\"string\">'confirm'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Open your browser and run: <a href=\"http://localhost/dinmu\" target=\"_blank\" rel=\"noopener\">http://localhost/dinmu</a>.\n  You should see the settings form with a <strong>title</strong> and some\n  <strong>instructions</strong>. But there is something odd with the select\n  unit field. It has no values.</p>\n<p>Let’s add some values to the units <strong>selectfield</strong>.</p>\n<p>Create an <strong>options</strong> array with two objects. One with the\n  <strong>text: ‘Fahrenheit’</strong> and a <strong>value: ‘f’</strong> and one\n  object with the <strong>text: ‘Celsius’</strong> and the <strong>value: ‘c’</strong>.</p>\n<p>The label GEO in the <strong>togglefield</strong> makes little sense. Change\n  this <strong>label to: ‘ Auto detect?’</strong> Since the text for this label\n  takes much more space, we will set the <strong>labelWidth</strong> to ‘<strong>55%</strong>’.\n  Set the value of the geo field to <strong>value: ‘1’</strong> to enable\n  geolocation by default.</p>\n<p>Disable the units, city and country fields by adding <strong>disabled: true</strong>\n  to all fields.</p>\n<p>The button <strong>text</strong>, should be <strong>Refresh</strong> instead\n  of <strong>Submit</strong>. Change this in the button component. Add a\n  <strong>margin</strong> with the value ‘<strong>10 5</strong>’. Also add an\n  <strong>action</strong> property to the button and set this to ‘<strong>refresh</strong>’.\n  This way, we can reference the button later:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">&#123;</span><br><span class=\"line\">    xtype: <span class=\"string\">'button'</span>,</span><br><span class=\"line\">    text: <span class=\"string\">'Refresh'</span>,</span><br><span class=\"line\">    action: <span class=\"string\">'refresh'</span>,</span><br><span class=\"line\">    margin: <span class=\"string\">'10 5'</span></span><br><span class=\"line\">    ui: <span class=\"string\">'confirm'</span></span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>You might have noticed that the console outputs some warnings. The <strong>Ext.Loader</strong>,\n  the mechanism that loads all the Sencha Touch framework classes in the\n  correct order into memory, needs to load the classes that are used for the\n  form fields. Create a <strong>requires</strong> array, (above the <strong>config</strong>\n  object) and assign it the following strings:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">requires: [</span><br><span class=\"line\">    <span class=\"string\">'Ext.form.FieldSet'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Ext.field.Toggle'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Ext.field.Select'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Ext.field.Text'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Ext.Button'</span></span><br><span class=\"line\">],</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>You’ve finished the interface.</p>\n<p>Here’s the complete code for the settingsview:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'Dinmu.view.SettingsView'</span>, &#123;</span><br><span class=\"line\">    extend: <span class=\"string\">'Ext.form.Panel'</span>,</span><br><span class=\"line\">    xtype: <span class=\"string\">'settingsview'</span>,</span><br><span class=\"line\">    requires: [</span><br><span class=\"line\">        <span class=\"string\">'Ext.form.FieldSet'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Ext.field.Toggle'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Ext.field.Select'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Ext.field.Text'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Ext.Button'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    config: &#123;</span><br><span class=\"line\">        items:[&#123;</span><br><span class=\"line\">            xtype: <span class=\"string\">'fieldset'</span>,</span><br><span class=\"line\">            title: <span class=\"string\">'SettingsView'</span>,</span><br><span class=\"line\">            instructions: <span class=\"string\">'In case you do not want the app to detect your location you can enter the city and country.'</span>,</span><br><span class=\"line\">            items: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'geo'</span>,</span><br><span class=\"line\">                    xtype: <span class=\"string\">'togglefield'</span>,</span><br><span class=\"line\">                    label: <span class=\"string\">'Auto Detect?'</span>,</span><br><span class=\"line\">                    labelWidth: <span class=\"string\">'55%'</span>,</span><br><span class=\"line\">                    value: <span class=\"string\">'1'</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'units'</span>,</span><br><span class=\"line\">                    xtype: <span class=\"string\">'selectfield'</span>,</span><br><span class=\"line\">                    options: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        text: <span class=\"string\">'Fahrenheit'</span>,</span><br><span class=\"line\">                        value: <span class=\"string\">'f'</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                         text: <span class=\"string\">'Celsius'</span>,</span><br><span class=\"line\">                         value: <span class=\"string\">'c'</span></span><br><span class=\"line\">                    &#125;],</span><br><span class=\"line\">                    label: <span class=\"string\">'Units'</span>,</span><br><span class=\"line\">                    disabled: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'city'</span>,</span><br><span class=\"line\">                    xtype: <span class=\"string\">'textfield'</span>,</span><br><span class=\"line\">                    label: <span class=\"string\">'City'</span>,</span><br><span class=\"line\">                    disabled: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'country'</span>,</span><br><span class=\"line\">                    xtype: <span class=\"string\">'textfield'</span>,</span><br><span class=\"line\">                    label: <span class=\"string\">'Country'</span>,</span><br><span class=\"line\">                    disabled: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    xtype: <span class=\"string\">'button'</span>,</span><br><span class=\"line\">                    text: <span class=\"string\">'Refresh'</span>,</span><br><span class=\"line\">                    action: <span class=\"string\">'refresh'</span>,</span><br><span class=\"line\">                    margin: <span class=\"string\">'10 5'</span>,</span><br><span class=\"line\">                    ui: <span class=\"string\">'confirm'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>But wait, what about the main view? Yes, you will dynamically inject this\n  page with data. Therefore, you will need some logic to achieve this, so let’s\n  start with creating a controller.</p>\n<p><img src=\"/images/weather-app-2.png\" alt=\"Weather App\"></p>\n<h3 id=\"Building-The-Controller\"><a href=\"#Building-The-Controller\" class=\"headerlink\" title=\"Building The Controller\"></a>Building\n  The Controller</h3>\n<p>The <strong>controller</strong> will be the glue between the settings\n  <strong>model</strong> (the app data) and the settings <strong>view</strong>.\n  It will contain references to all view components and dispatch its events.\n  Navigate to the <strong>dinmu</strong> folder and run the following command\n  from the command line:</p>\n<p>sencha generate controller Main</p>\n<p>This command generates the Main controller. Open <strong>app/controller/Main.js</strong>\n  with your editor. You will see a <strong>controller</strong> with an empty\n  references object (<strong>refs</strong>) and an empty <strong>control</strong>\n  object.</p>\n<p>Next, let’s create references to all the view components, <strong>main</strong>,\n  <strong>settingsview</strong>, the <strong>titlebar settings</strong> and\n  <strong>back</strong> buttons and to the settings <strong>form fields</strong>\n  and <strong>refresh</strong> button. The selectors are a bit CSS-like. Your\n  code could look like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">refs: &#123;</span><br><span class=\"line\">    mainView: <span class=\"string\">'main'</span>,</span><br><span class=\"line\">    settingsView: <span class=\"string\">'settingsview'</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">    btnSettings: <span class=\"string\">'main button[action=settings]'</span>,</span><br><span class=\"line\">    btnRefresh: <span class=\"string\">'settingsview button[action=refresh]'</span>,</span><br><span class=\"line\">    btnBack: <span class=\"string\">'main button[action=back]'</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">    toggleGeo: <span class=\"string\">'settingsview togglefield'</span>,</span><br><span class=\"line\">    fieldCity: <span class=\"string\">'settingsview textfield[name=city]'</span>,</span><br><span class=\"line\">    fieldCountry: <span class=\"string\">'settingsview textfield[name=country]'</span>,</span><br><span class=\"line\">    fieldUnits: <span class=\"string\">'settingsview selectfield'</span></span><br><span class=\"line\">&#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Now that you have references to all the view components that should contain\n  events, you can add the controls.</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">control: &#123;</span><br><span class=\"line\">    <span class=\"string\">'btnRefresh'</span>: &#123;</span><br><span class=\"line\">        tap: <span class=\"string\">'onRefresh'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'btnSettings'</span>: &#123;</span><br><span class=\"line\">        tap: <span class=\"string\">'onSettingsBtnTap'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'btnBack'</span>: &#123;</span><br><span class=\"line\">        tap: <span class=\"string\">'onBackBtnTap'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'toggleGeo'</span>: &#123;</span><br><span class=\"line\">        change: <span class=\"string\">'onToggle'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'mainView'</span>: &#123;</span><br><span class=\"line\">        activeitemchange: <span class=\"string\">'onCarouselChange'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Before browser testing the events, you must hook the controller to <strong>app.js</strong>\n  which is the MVC’s entry point. Open <strong>app.js</strong>, create a\n  <strong>controllers</strong> array, right below the <strong>requires</strong>\n  array and pass in the string ‘<strong>Main</strong>’ mapping the Main\n  controller to the <strong>app/controller/Main.js</strong> file.</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">controllers: [</span><br><span class=\"line\">    <span class=\"string\">'Main'</span></span><br><span class=\"line\">],</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Now, we will add some logic. Go back to <strong>Dinmu.controller.Main</strong>\n  and add the functions in the <strong>goodies-tutorial</strong> directory. You\n  can find them in <strong>controller.txt</strong>.</p>\n<p>Replace the <strong>launch</strong> function with the functions provided.</p>\n<h3 id=\"Setting-Up-Stores-and-Singletons\"><a href=\"#Setting-Up-Stores-and-Singletons\" class=\"headerlink\" title=\"Setting Up Stores and Singletons\"></a>Setting\n  Up Stores and Singletons</h3>\n<p>Stores encapsulate a client side cache of model objects. Stores can have a\n  Proxy too, and also provide functions for sorting, filtering, grouping and\n  querying the model instances (records) contained within it.</p>\n<p>Our app needs a store to save all the user settings.</p>\n<p>Unfortunately, you can’t generate stores with Sencha Cmd. Instead, let’s\n  create a new file in the <strong>app/store</strong> folder called: <strong>Settings.js</strong>.\n  Define a new class: <strong>Dinmu.store.Settings</strong>. This class extends\n  all methods and properties from the <strong>Ext.data.Store</strong> class. In\n  the <strong>config</strong> object, create a property called: <strong>model</strong>.\n  It should connect to the Setting model. Also, the settings store should load\n  automatically:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'Dinmu.store.Settings'</span>, &#123;</span><br><span class=\"line\">    extend: <span class=\"string\">'Ext.data.Store'</span>,</span><br><span class=\"line\">    requires: [<span class=\"string\">'Dinmu.model.Setting'</span>],</span><br><span class=\"line\">        config: &#123;</span><br><span class=\"line\">            model: <span class=\"string\">'Dinmu.model.Setting'</span>,</span><br><span class=\"line\">            autoLoad: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Open <strong>controller/Main.js</strong>, in the <strong>config</strong>\n  object create a <strong>stores</strong> array and add the <strong>Dinmu.store.Settings</strong>\n  store to it:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">stores: <span class=\"string\">'Dinmu.store.Settings'</span>,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Sometimes, it’s better to separate your business logic outside the MVC\n  folders.</p>\n<p>In the app folder, create a new folder <strong>utils</strong>. Create the\n  file <strong>Functions.js</strong>, and define a class called: <strong>Dinmu.utils.Functions</strong>.\n  This class has a property: <strong>singleton</strong> set to <strong>true</strong>.\n  Now your class is a singleton, you cannot create more than one instance of\n  it, but you can run the singleton methods from everywhere in your code:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'Dinmu.utils.Functions'</span>, &#123;</span><br><span class=\"line\">    singleton: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">//singleton methods here</span></span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Add <strong>Dinmu.utils.Functions</strong> to the <strong>requires</strong>\n  array of the <strong>app.js</strong> file.</p>\n<p>Open the snippet: <strong>functions.txt</strong> from the <strong>goodies-tutorial</strong>\n  folder and copy all the functions into the <strong>utils/Functions.js</strong>\n  file.</p>\n<p>This snippet contains the functions you will need for requesting weather\n  data from <a href=\"http://api.worldweatheronline.com/\" target=\"_blank\" rel=\"noopener\">http://api.worldweatheronline.com/</a>.\n  If you would rather request and use your own API_KEY, you can edit it on top\n  of the <strong>Functions.js</strong> by changing the String for property\n  <strong>API_KEY</strong>. It also contains logic for requesting geolocation\n  on the device and injecting data in the template on the mainview. If you are\n  really interested in this logic, I left complete comments in the\n  functions.txt file which describes exactly what is going on.</p>\n<p>To test the logic, open <strong>Google Chrome Developer Tools</strong> and\n  switch to the <strong>Console tab</strong> and enter the following line:\n  <strong>Dinmu.utils.Functions.getWeather(‘London’)</strong> it should return\n  a weather object for London and display some text in the mainview.</p>\n<p>Finally the <em>Do I need my Umbrella</em> app is finished! Open your\n  browser and run: <a href=\"http://localhost/dinmu\" target=\"_blank\" rel=\"noopener\">http://localhost/dinmu</a>.\n  The next steps for improving your application would be to apply a theme and a\n  production build. This is something I will discuss in the next Sencha Blog\n  tutorial.</p>\n<p><img src=\"/images/weather-app-3.png\" alt=\"Weather App\"></p>\n<p>If you found this tutorial helpful check out my book I wrote for O’Reilly:\n  <a href=\"http://shop.oreilly.com/product/0636920030058.do\" target=\"_blank\" rel=\"noopener\">Hands-on Sencha\n    Touch 2</a>!</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<p><em>Welcome at this series of blog posts: How to create a utility app with\n    Sencha Touch and Sencha Cmd. Originally I wrote this tutorial for <a href=\"http://www.creativebloq.com/net-magazine\" target=\"_blank\" rel=\"noopener\">.NET\n      magazine</a> and afterwards I modified it for the <a href=\"http://www.sencha.com/blog/\" target=\"_blank\" rel=\"noopener\">Sencha\n      Blog Site</a>. Since I think it’s a good set of articles and you might\n    have missed it. I will also post the 3 parts of the tutorial here, every\n    week. Enjoy!</em>","more":"</p>\n<p>In this three-part Sencha Touch tutorial, you will build the Do I need my\n  Umbrella app, a simple utility app that loads weather information from a web\n  service — worldweatheronline.com. Based on weather codes, this app can\n  predict if you need your umbrella or not.</p>\n<p>In this tutorial, you will start with coding the app. The next tutorials\n  will focus on creating a cool Sencha Touch theme and how to port your app to\n  a native app with PhoneGap.</p>\n<p>This tutorial requires:</p>\n<ul>\n  <li>Sencha Touch 2.3 or higher</li>\n  <li>Sencha Cmd 4.x</li>\n  <li>A modern browser</li>\n  <li>Editor</li>\n</ul>\n<p>Here are some additional resources:<br>You can see the app itself up and\n  running <a href=\"https://training.sencha.com/sencha-blog/tutorial-nov-2013-lee/dinmu/\" target=\"_blank\" rel=\"noopener\">here</a>.<br>The\n  final code can be downloaded <a href=\"https://training.sencha.com/sencha-blog/tutorial-nov-2013-lee/goodies-tutorial/code.zip\" target=\"_blank\" rel=\"noopener\">here</a>.<br>There\n  are some tutorial goodies you will need — <a href=\"https://training.sencha.com/sencha-blog/tutorial-nov-2013-lee/goodies-tutorial/controller.txt\" target=\"_blank\" rel=\"noopener\">controller</a>\n  and <a href=\"https://training.sencha.com/sencha-blog/tutorial-nov-2013-lee/goodies-tutorial/functions.txt\" target=\"_blank\" rel=\"noopener\">functions</a>.</p>\n<h3 id=\"Generate-and-run-the-demo-application\"><a href=\"#Generate-and-run-the-demo-application\" class=\"headerlink\" title=\"Generate and run the demo application\"></a>Generate\n  and run the demo application</h3>\n<p>Let’s start by creating a sencha folder somewhere on your hard disk.\n  Download the Sencha Touch 2.3 framework and extract it into the newly created\n  sencha folder. Now, create the folder for your app, I’ve called it dinmu\n  since that is shorter than the name “DoINeedMyUmbrella” but it’s up to you.</p>\n<p>Now, open your command line (MS-Dos Prompt or Mac OS X Terminal), navigate\n  to the Sencha framework folder: (cd sencha/touch-2.3.x folder) and run the\n  following command to generate your Sencha Touch MVC folder structure:</p>\n<p>sencha generate app -name Dinmu -path ../dinmu</p>\n<p>This command generates the full MVC structure for your application: <em>Do I\n    need my Umbrella</em>. It takes the namespace <strong>Dinmu</strong>, to\n  prefix all your classes. Review the folder structure it has created.</p>\n<p>Now it’s time to start your web server via the command line — use the path\n  to your <strong>sencha</strong> folder. (If you would rather use your own\n  Apache web server, you are free to start it and skip this step.) On Mac OS X,\n  you might need permissions for executing the next command: if you run into\n  permission errors, prefix the above command with <strong>sudo</strong>.</p>\n<p>sencha fs web -p 80 start -map /path/to/sencha/folder/</p>\n<p>This will start your built-in Jetty web server. You need your CLI window\n  open to keep the server running, so it makes sense to open a new CLI window\n  for the next commands.</p>\n<p>Test your generated Sencha Touch app. Open your modern browser (such as\n  Google Chrome or Safari) and run: <a href=\"http://localhost/dinmu\" target=\"_blank\" rel=\"noopener\">http://localhost/dinmu</a>.\n  You should see the Sencha demo app interface with a bottom tab panel and two\n  demo slides:</p>\n<p><img src=\"/images/weather-app-1.png\" alt=\"Weather App\"></p>\n<h3 id=\"The-Data-Package\"><a href=\"#The-Data-Package\" class=\"headerlink\" title=\"The Data Package\"></a>The\n  Data Package</h3>\n<p>In the next steps, you will generate the model which will define your data.\n  There are a couple of settings you want to save in your app: <strong>id</strong>,\n  <strong>city</strong>, <strong>country</strong>, <strong>units</strong> and\n  <strong>geolocation</strong>. You will define these data settings as model\n  fields. Sencha Cmd can scaffold this model for you. Run the following command\n  from the <strong>dinmu</strong> folder on the command line:</p>\n<p>sencha generate model Setting id,city,country,units,geo:boolean</p>\n<p>This command generated the model for your application. It takes the\n  classname <strong>Setting</strong> and one String with all the field names to\n  define all the different fields. Let’s review your folder structure again.</p>\n<p>Open <strong>app/model/Setting.js</strong> with your editor. Notice the\n  namespace <strong>Dinmu.model.Setting</strong> is equal to <strong>app/model/Setting.js</strong>.\n  This is your implementation of the Setting model; Sencha Cmd defined a\n  Setting model class for you. It extends a model implementation from the\n  Sencha Touch framework: <strong>Ext.data.Model</strong> and it contains all\n  the fields and field types.</p>\n<p>The field <strong>id</strong>, will define id’s for every model record in\n  your application. To have it behave as a unique id, you will need to\n  configure it. Before the <strong>fields</strong> array, configure an <strong>idProperty</strong>\n  and an <strong>identifier</strong>.</p>\n<p>idProperty: ‘id’, identifier: ‘uuid’,</p>\n<p>The logic for these unique IDs are in a Sencha class that we need to\n  “import” into our app. We can use a <strong>requires</strong> for that, this\n  requires the class <strong>Ext.data.identifier.Uuid</strong>.</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">requires: [<span class=\"string\">'Ext.data.identifier.Uuid'</span>]</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The next step is to create some <strong>validations</strong> for our model.\n  After the <strong>fields</strong> array, create a <strong>validations</strong>\n  array. The array contains validation objects to validate whether the data for\n  these fields is present:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">validations: \\[&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'presence'</span>,</span><br><span class=\"line\">    field: <span class=\"string\">'city'</span>,</span><br><span class=\"line\">    message: <span class=\"string\">\"Please provide a city.\"</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'presence'</span>,</span><br><span class=\"line\">    field: <span class=\"string\">'country'</span>,</span><br><span class=\"line\">    message: <span class=\"string\">\"Please provide a country.\"</span></span><br><span class=\"line\">&#125;\\],</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Since we want to save the local settings data to the device, the last step\n  is to add a client proxy.</p>\n<p>We will use <strong>localstorage</strong>. The localstorage proxy will make\n  sure that all the data persists into the browser localstorage. Define the\n  <strong>proxy</strong> object directly after the <strong>validations</strong>\n  array:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">proxy: &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'localstorage'</span>,</span><br><span class=\"line\">    id: <span class=\"string\">'weathersettings'</span></span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<h3 id=\"The-View-Components\"><a href=\"#The-View-Components\" class=\"headerlink\" title=\"The View Components\"></a>The\n  View Components</h3>\n<p>The standard tabpanel interface that Sencha Cmd generates looks good, but\n  it’s not what you need for a utility app. The <em>Do I need my Umbrella</em>\n  app will need a carousel interface.</p>\n<p>Open the code of <strong>app/view/Main.js</strong> in your IDE or text\n  editor.</p>\n<p>The current implementation of <strong>Dinmu.view.Main</strong> extends from\n  the Sencha Touch <strong>Ext.tab.Panel</strong> class. It has a <strong>tabBarPosition</strong>\n  property to add the tabs to the screen bottom.</p>\n<p>We don’t need it, so remove <strong>tabBarPosition:bottom</strong> and\n  change the <strong>extend</strong> to <strong>Ext.Carousel</strong>, to\n  extend from the Sencha Touch Carousel class. From here, you can open your\n  browser and run: <a href=\"http://localhost/dinmu\" target=\"_blank\" rel=\"noopener\">http://localhost/dinmu</a>.\n  You should see the generated Sencha demo app. The tabpanel interface is\n  replaced by a carousel interface. You can slide the views horizontally.</p>\n<p>Let’s remove more default components. We won’t need the demo video, so let’s\n  remove the <strong>Ext.Video</strong> from the <strong>requires</strong>\n  array. We can also empty the <strong>items</strong> array, since we will\n  replace it with two new items.</p>\n<p>The first item object (container by default) has only the <strong>html</strong>\n  property. This can be set to a placeholder text: <strong>Settings Form</strong>\n  so you can code this later. The second item object has a property <strong>itemId:\n    ‘mainview’</strong> and a <strong>cls</strong> property (for styling) set\n  to the value: <strong>textview</strong>. Also add a <strong>direction</strong>\n  property, which will set the direction of the Carousel to ‘<strong>vertical</strong>’.</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'Dinmu.view.Main'</span>, &#123;</span><br><span class=\"line\">    extend: <span class=\"string\">'Ext.Carousel'</span>,</span><br><span class=\"line\">    xtype: <span class=\"string\">'main'</span>,</span><br><span class=\"line\">    requires: [</span><br><span class=\"line\">        <span class=\"string\">'Ext.TitleBar'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    config: &#123;</span><br><span class=\"line\">        direction: <span class=\"string\">'vertical'</span>,</span><br><span class=\"line\">        items: [&#123;</span><br><span class=\"line\">            html: <span class=\"string\">'Settings Form'</span></span><br><span class=\"line\">        &#125;,&#123;</span><br><span class=\"line\">            itemId: <span class=\"string\">'mainview'</span>,</span><br><span class=\"line\">            cls: <span class=\"string\">'textview'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Viewed in the browser, the app looks pretty basic. Let’s add a top <strong>titlebar</strong>\n  and a bottom toolbar. Before the Settings Form object, create a new object.\n  This object will get the <strong>xtype: ‘titlebar’</strong> to add a new\n  instance of <strong>Ext.TitleBar</strong> to the Viewport (the screen). Set a\n  class name on the titlebar with the CSS class property: <strong>cls: ‘title’</strong>.\n  Set a <strong>docked: ‘top’</strong> property to stick this titlebar to the\n  top of the screen. Set the title to: <strong>Do I need my Umbrella?</strong>\n  with the <strong>title</strong> property:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">&#123;</span><br><span class=\"line\">    xtype: <span class=\"string\">'titlebar'</span>,</span><br><span class=\"line\">    cls: <span class=\"string\">'title'</span>,</span><br><span class=\"line\">    docked: <span class=\"string\">'top'</span>,</span><br><span class=\"line\">    title: <span class=\"string\">'Do I need my Umbrella?'</span></span><br><span class=\"line\">&#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>You will do the same for the bottom toolbar. This time the <strong>xtype</strong>\n  is not <strong>titlebar</strong> but <strong>toolbar</strong>. The <strong>cls</strong>\n  can be set to <strong>footer</strong>. Dock it to the bottom of the screen.\n  Instead of the <strong>title</strong> property, the toolbar needs an <strong>html</strong>\n  property. Set this to some copyright string. We will add an <strong>ui</strong>\n  property which is set to <strong>light</strong> to create a lighter look and\n  feel. Don’t forget to add <strong>Ext.Toolbar</strong> to the <strong>requires</strong>\n  array in the top of the file, so the correct framework class will be loaded\n  into the memory.</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">&#123;</span><br><span class=\"line\">    xtype: <span class=\"string\">'toolbar'</span>,</span><br><span class=\"line\">    cls: <span class=\"string\">'footer'</span>,</span><br><span class=\"line\">    ui: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">    docked: <span class=\"string\">'bottom'</span>,</span><br><span class=\"line\">    html: <span class=\"string\">'Powered by &amp;copy; Sencha Touch'</span></span><br><span class=\"line\">&#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The next step is to create some buttons in the top titlebar.</p>\n<p>The <strong>titlebar</strong> should contain an <strong>items</strong>\n  array, which contains two buttons. A back button, which will be displayed\n  when you are on the settings screen, and a settings button which will be\n  shown on the default screen. You don’t need to set the <strong>xtype</strong>\n  to <strong>button</strong>, the default item of an <strong>Ext.TitleBar</strong>\n  is a button. The back button, is by default <strong>hidden</strong> and it is\n  left aligned in the titlebar. The settings button, shows an icon of a\n  settings gear.</p>\n<p>Confirm your code looks like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'Dinmu.view.Main'</span>, &#123;</span><br><span class=\"line\">    extend: <span class=\"string\">'Ext.Carousel'</span>,</span><br><span class=\"line\">    xtype: <span class=\"string\">'main'</span>,</span><br><span class=\"line\">    requires: [</span><br><span class=\"line\">        <span class=\"string\">'Ext.TitleBar'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Ext.Toolbar'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    config: &#123;</span><br><span class=\"line\">        direction: <span class=\"string\">'vertical'</span>,</span><br><span class=\"line\">        items: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            xtype: <span class=\"string\">'titlebar'</span>,</span><br><span class=\"line\">            cls: <span class=\"string\">'title'</span>,</span><br><span class=\"line\">            docked: <span class=\"string\">'top'</span>,</span><br><span class=\"line\">            title: <span class=\"string\">'Do I need my Umbrella?'</span>,</span><br><span class=\"line\">            items: [&#123;</span><br><span class=\"line\">               cls: <span class=\"string\">'back'</span>,</span><br><span class=\"line\">               hidden: <span class=\"literal\">true</span>,</span><br><span class=\"line\">               ui: <span class=\"string\">'back'</span>,</span><br><span class=\"line\">               action: <span class=\"string\">'back'</span>,</span><br><span class=\"line\">               align: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">               text: <span class=\"string\">'back'</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               iconCls: <span class=\"string\">'settings'</span>,</span><br><span class=\"line\">               action: <span class=\"string\">'settings'</span>,</span><br><span class=\"line\">               ui: <span class=\"string\">'plain'</span>,</span><br><span class=\"line\">               align: <span class=\"string\">'right'</span></span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            html: <span class=\"string\">'Settings Form'</span></span><br><span class=\"line\">        &#125;,&#123;</span><br><span class=\"line\">            itemId: <span class=\"string\">'mainview'</span>,</span><br><span class=\"line\">            cls: <span class=\"string\">'textview'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            xtype: <span class=\"string\">'toolbar'</span>,</span><br><span class=\"line\">            cls: <span class=\"string\">'footer'</span>,</span><br><span class=\"line\">            ui: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">            docked: <span class=\"string\">'bottom'</span>,</span><br><span class=\"line\">            html: <span class=\"string\">'Powered by &amp;copy; Sencha Touch'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Open your browser and run: <a href=\"http://localhost/dinmu\" target=\"_blank\" rel=\"noopener\">http://localhost/dinmu</a>.\n  You should see a button with a gear in the right corner of the <strong>Ext.TitleBar</strong>.</p>\n<h3 id=\"Forms\"><a href=\"#Forms\" class=\"headerlink\" title=\"Forms\"></a>Forms</h3>\n<p>Now, we can start with creating a form. You know what? Let’s generate this\n  too. Navigate to the <strong>dinmu</strong> folder on the command line and\n  run the following to generate your Sencha Touch form:</p>\n<p>sencha generate form SettingsView geo:toggle,units:select,city,country</p>\n<p>Review the form class that has been scaffolded. Open <strong>app/view/SettingsView</strong>.\n  The <strong>Dinmu.view.SettingsView</strong> class has an <strong>xtype</strong>\n  set to <strong>settingsview</strong>. You can assign custom made classes to\n  item arrays with the <strong>xtype</strong> property.</p>\n<p>So let’s do so. Open <strong>Dinmu.view.Main</strong> (<strong>app/view/Main.js</strong>),\n  find the settings item in your code. By default, if you don’t specify its\n  <strong>xtype</strong> is set to <strong>container</strong>. You will need to\n  refer to the new <strong>xtype: settingsview</strong>, so add <strong>xtype:\n    ‘settingsview’</strong> to the Main view code. You don’t need the\n  placeholder html string anymore. Remove the <strong>html: settings</strong>\n  property. Also don’t forget to add <strong>Dinmu.view.SettingsView</strong>\n  to the <strong>requires</strong> array to make sure this class is loaded in\n  memory.</p>\n<p>To make it look better, you will add a <strong>fieldset</strong> to the\n  <strong>Ext.form.Panel</strong> in the SettingsView. This fieldset contains\n  the four new fields and the submit button. The fieldset will be a child of\n  the formpanel and has its own children: the form <strong>fields</strong> and\n  the <strong>button</strong>.</p>\n<p>Create a second <strong>items</strong> array in the <strong>config</strong>\n  object (after the <strong>title</strong> property). Nest the second items\n  array as a child. The parent items array contains one fieldset xtype, with a\n  <strong>title: ‘Your location’</strong>, and a line with <strong>instructions</strong>.</p>\n<p>Make sure the child items array contains all the fields and the button.\n  Verify your code looks like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'Dinmu.view.SettingsView'</span>, &#123;</span><br><span class=\"line\">    extend: <span class=\"string\">'Ext.form.Panel'</span>,</span><br><span class=\"line\">    xtype: <span class=\"string\">'settingsview'</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">    config: &#123;</span><br><span class=\"line\">        items:[&#123;</span><br><span class=\"line\">            xtype: <span class=\"string\">'fieldset'</span>,</span><br><span class=\"line\">            title: <span class=\"string\">'SettingsView'</span>,</span><br><span class=\"line\">            instructions: <span class=\"string\">'In case you do not want the app to detect your location you can enter the city and country.'</span>,</span><br><span class=\"line\">            items: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'geo'</span>,</span><br><span class=\"line\">                    xtype: <span class=\"string\">'togglefield'</span>,</span><br><span class=\"line\">                    label: <span class=\"string\">'Geo'</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'units'</span>,</span><br><span class=\"line\">                    xtype: <span class=\"string\">'selectfield'</span>,</span><br><span class=\"line\">                    label: <span class=\"string\">'Units'</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'city'</span>,</span><br><span class=\"line\">                    xtype: <span class=\"string\">'textfield'</span>,</span><br><span class=\"line\">                    label: <span class=\"string\">'City'</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'country'</span>,</span><br><span class=\"line\">                    xtype: <span class=\"string\">'textfield'</span>,</span><br><span class=\"line\">                    label: <span class=\"string\">'Country'</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    xtype: <span class=\"string\">'button'</span>,</span><br><span class=\"line\">                    text: <span class=\"string\">'Submit'</span>,</span><br><span class=\"line\">                    ui: <span class=\"string\">'confirm'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Open your browser and run: <a href=\"http://localhost/dinmu\" target=\"_blank\" rel=\"noopener\">http://localhost/dinmu</a>.\n  You should see the settings form with a <strong>title</strong> and some\n  <strong>instructions</strong>. But there is something odd with the select\n  unit field. It has no values.</p>\n<p>Let’s add some values to the units <strong>selectfield</strong>.</p>\n<p>Create an <strong>options</strong> array with two objects. One with the\n  <strong>text: ‘Fahrenheit’</strong> and a <strong>value: ‘f’</strong> and one\n  object with the <strong>text: ‘Celsius’</strong> and the <strong>value: ‘c’</strong>.</p>\n<p>The label GEO in the <strong>togglefield</strong> makes little sense. Change\n  this <strong>label to: ‘ Auto detect?’</strong> Since the text for this label\n  takes much more space, we will set the <strong>labelWidth</strong> to ‘<strong>55%</strong>’.\n  Set the value of the geo field to <strong>value: ‘1’</strong> to enable\n  geolocation by default.</p>\n<p>Disable the units, city and country fields by adding <strong>disabled: true</strong>\n  to all fields.</p>\n<p>The button <strong>text</strong>, should be <strong>Refresh</strong> instead\n  of <strong>Submit</strong>. Change this in the button component. Add a\n  <strong>margin</strong> with the value ‘<strong>10 5</strong>’. Also add an\n  <strong>action</strong> property to the button and set this to ‘<strong>refresh</strong>’.\n  This way, we can reference the button later:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">&#123;</span><br><span class=\"line\">    xtype: <span class=\"string\">'button'</span>,</span><br><span class=\"line\">    text: <span class=\"string\">'Refresh'</span>,</span><br><span class=\"line\">    action: <span class=\"string\">'refresh'</span>,</span><br><span class=\"line\">    margin: <span class=\"string\">'10 5'</span></span><br><span class=\"line\">    ui: <span class=\"string\">'confirm'</span></span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>You might have noticed that the console outputs some warnings. The <strong>Ext.Loader</strong>,\n  the mechanism that loads all the Sencha Touch framework classes in the\n  correct order into memory, needs to load the classes that are used for the\n  form fields. Create a <strong>requires</strong> array, (above the <strong>config</strong>\n  object) and assign it the following strings:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">requires: [</span><br><span class=\"line\">    <span class=\"string\">'Ext.form.FieldSet'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Ext.field.Toggle'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Ext.field.Select'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Ext.field.Text'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Ext.Button'</span></span><br><span class=\"line\">],</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>You’ve finished the interface.</p>\n<p>Here’s the complete code for the settingsview:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'Dinmu.view.SettingsView'</span>, &#123;</span><br><span class=\"line\">    extend: <span class=\"string\">'Ext.form.Panel'</span>,</span><br><span class=\"line\">    xtype: <span class=\"string\">'settingsview'</span>,</span><br><span class=\"line\">    requires: [</span><br><span class=\"line\">        <span class=\"string\">'Ext.form.FieldSet'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Ext.field.Toggle'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Ext.field.Select'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Ext.field.Text'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Ext.Button'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    config: &#123;</span><br><span class=\"line\">        items:[&#123;</span><br><span class=\"line\">            xtype: <span class=\"string\">'fieldset'</span>,</span><br><span class=\"line\">            title: <span class=\"string\">'SettingsView'</span>,</span><br><span class=\"line\">            instructions: <span class=\"string\">'In case you do not want the app to detect your location you can enter the city and country.'</span>,</span><br><span class=\"line\">            items: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'geo'</span>,</span><br><span class=\"line\">                    xtype: <span class=\"string\">'togglefield'</span>,</span><br><span class=\"line\">                    label: <span class=\"string\">'Auto Detect?'</span>,</span><br><span class=\"line\">                    labelWidth: <span class=\"string\">'55%'</span>,</span><br><span class=\"line\">                    value: <span class=\"string\">'1'</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'units'</span>,</span><br><span class=\"line\">                    xtype: <span class=\"string\">'selectfield'</span>,</span><br><span class=\"line\">                    options: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        text: <span class=\"string\">'Fahrenheit'</span>,</span><br><span class=\"line\">                        value: <span class=\"string\">'f'</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                         text: <span class=\"string\">'Celsius'</span>,</span><br><span class=\"line\">                         value: <span class=\"string\">'c'</span></span><br><span class=\"line\">                    &#125;],</span><br><span class=\"line\">                    label: <span class=\"string\">'Units'</span>,</span><br><span class=\"line\">                    disabled: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'city'</span>,</span><br><span class=\"line\">                    xtype: <span class=\"string\">'textfield'</span>,</span><br><span class=\"line\">                    label: <span class=\"string\">'City'</span>,</span><br><span class=\"line\">                    disabled: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'country'</span>,</span><br><span class=\"line\">                    xtype: <span class=\"string\">'textfield'</span>,</span><br><span class=\"line\">                    label: <span class=\"string\">'Country'</span>,</span><br><span class=\"line\">                    disabled: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    xtype: <span class=\"string\">'button'</span>,</span><br><span class=\"line\">                    text: <span class=\"string\">'Refresh'</span>,</span><br><span class=\"line\">                    action: <span class=\"string\">'refresh'</span>,</span><br><span class=\"line\">                    margin: <span class=\"string\">'10 5'</span>,</span><br><span class=\"line\">                    ui: <span class=\"string\">'confirm'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>But wait, what about the main view? Yes, you will dynamically inject this\n  page with data. Therefore, you will need some logic to achieve this, so let’s\n  start with creating a controller.</p>\n<p><img src=\"/images/weather-app-2.png\" alt=\"Weather App\"></p>\n<h3 id=\"Building-The-Controller\"><a href=\"#Building-The-Controller\" class=\"headerlink\" title=\"Building The Controller\"></a>Building\n  The Controller</h3>\n<p>The <strong>controller</strong> will be the glue between the settings\n  <strong>model</strong> (the app data) and the settings <strong>view</strong>.\n  It will contain references to all view components and dispatch its events.\n  Navigate to the <strong>dinmu</strong> folder and run the following command\n  from the command line:</p>\n<p>sencha generate controller Main</p>\n<p>This command generates the Main controller. Open <strong>app/controller/Main.js</strong>\n  with your editor. You will see a <strong>controller</strong> with an empty\n  references object (<strong>refs</strong>) and an empty <strong>control</strong>\n  object.</p>\n<p>Next, let’s create references to all the view components, <strong>main</strong>,\n  <strong>settingsview</strong>, the <strong>titlebar settings</strong> and\n  <strong>back</strong> buttons and to the settings <strong>form fields</strong>\n  and <strong>refresh</strong> button. The selectors are a bit CSS-like. Your\n  code could look like this:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">refs: &#123;</span><br><span class=\"line\">    mainView: <span class=\"string\">'main'</span>,</span><br><span class=\"line\">    settingsView: <span class=\"string\">'settingsview'</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">    btnSettings: <span class=\"string\">'main button[action=settings]'</span>,</span><br><span class=\"line\">    btnRefresh: <span class=\"string\">'settingsview button[action=refresh]'</span>,</span><br><span class=\"line\">    btnBack: <span class=\"string\">'main button[action=back]'</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">    toggleGeo: <span class=\"string\">'settingsview togglefield'</span>,</span><br><span class=\"line\">    fieldCity: <span class=\"string\">'settingsview textfield[name=city]'</span>,</span><br><span class=\"line\">    fieldCountry: <span class=\"string\">'settingsview textfield[name=country]'</span>,</span><br><span class=\"line\">    fieldUnits: <span class=\"string\">'settingsview selectfield'</span></span><br><span class=\"line\">&#125;,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Now that you have references to all the view components that should contain\n  events, you can add the controls.</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">control: &#123;</span><br><span class=\"line\">    <span class=\"string\">'btnRefresh'</span>: &#123;</span><br><span class=\"line\">        tap: <span class=\"string\">'onRefresh'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'btnSettings'</span>: &#123;</span><br><span class=\"line\">        tap: <span class=\"string\">'onSettingsBtnTap'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'btnBack'</span>: &#123;</span><br><span class=\"line\">        tap: <span class=\"string\">'onBackBtnTap'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'toggleGeo'</span>: &#123;</span><br><span class=\"line\">        change: <span class=\"string\">'onToggle'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'mainView'</span>: &#123;</span><br><span class=\"line\">        activeitemchange: <span class=\"string\">'onCarouselChange'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Before browser testing the events, you must hook the controller to <strong>app.js</strong>\n  which is the MVC’s entry point. Open <strong>app.js</strong>, create a\n  <strong>controllers</strong> array, right below the <strong>requires</strong>\n  array and pass in the string ‘<strong>Main</strong>’ mapping the Main\n  controller to the <strong>app/controller/Main.js</strong> file.</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">controllers: [</span><br><span class=\"line\">    <span class=\"string\">'Main'</span></span><br><span class=\"line\">],</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Now, we will add some logic. Go back to <strong>Dinmu.controller.Main</strong>\n  and add the functions in the <strong>goodies-tutorial</strong> directory. You\n  can find them in <strong>controller.txt</strong>.</p>\n<p>Replace the <strong>launch</strong> function with the functions provided.</p>\n<h3 id=\"Setting-Up-Stores-and-Singletons\"><a href=\"#Setting-Up-Stores-and-Singletons\" class=\"headerlink\" title=\"Setting Up Stores and Singletons\"></a>Setting\n  Up Stores and Singletons</h3>\n<p>Stores encapsulate a client side cache of model objects. Stores can have a\n  Proxy too, and also provide functions for sorting, filtering, grouping and\n  querying the model instances (records) contained within it.</p>\n<p>Our app needs a store to save all the user settings.</p>\n<p>Unfortunately, you can’t generate stores with Sencha Cmd. Instead, let’s\n  create a new file in the <strong>app/store</strong> folder called: <strong>Settings.js</strong>.\n  Define a new class: <strong>Dinmu.store.Settings</strong>. This class extends\n  all methods and properties from the <strong>Ext.data.Store</strong> class. In\n  the <strong>config</strong> object, create a property called: <strong>model</strong>.\n  It should connect to the Setting model. Also, the settings store should load\n  automatically:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'Dinmu.store.Settings'</span>, &#123;</span><br><span class=\"line\">    extend: <span class=\"string\">'Ext.data.Store'</span>,</span><br><span class=\"line\">    requires: [<span class=\"string\">'Dinmu.model.Setting'</span>],</span><br><span class=\"line\">        config: &#123;</span><br><span class=\"line\">            model: <span class=\"string\">'Dinmu.model.Setting'</span>,</span><br><span class=\"line\">            autoLoad: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Open <strong>controller/Main.js</strong>, in the <strong>config</strong>\n  object create a <strong>stores</strong> array and add the <strong>Dinmu.store.Settings</strong>\n  store to it:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">stores: <span class=\"string\">'Dinmu.store.Settings'</span>,</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Sometimes, it’s better to separate your business logic outside the MVC\n  folders.</p>\n<p>In the app folder, create a new folder <strong>utils</strong>. Create the\n  file <strong>Functions.js</strong>, and define a class called: <strong>Dinmu.utils.Functions</strong>.\n  This class has a property: <strong>singleton</strong> set to <strong>true</strong>.\n  Now your class is a singleton, you cannot create more than one instance of\n  it, but you can run the singleton methods from everywhere in your code:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">Ext.define(<span class=\"string\">'Dinmu.utils.Functions'</span>, &#123;</span><br><span class=\"line\">    singleton: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">//singleton methods here</span></span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Add <strong>Dinmu.utils.Functions</strong> to the <strong>requires</strong>\n  array of the <strong>app.js</strong> file.</p>\n<p>Open the snippet: <strong>functions.txt</strong> from the <strong>goodies-tutorial</strong>\n  folder and copy all the functions into the <strong>utils/Functions.js</strong>\n  file.</p>\n<p>This snippet contains the functions you will need for requesting weather\n  data from <a href=\"http://api.worldweatheronline.com/\" target=\"_blank\" rel=\"noopener\">http://api.worldweatheronline.com/</a>.\n  If you would rather request and use your own API_KEY, you can edit it on top\n  of the <strong>Functions.js</strong> by changing the String for property\n  <strong>API_KEY</strong>. It also contains logic for requesting geolocation\n  on the device and injecting data in the template on the mainview. If you are\n  really interested in this logic, I left complete comments in the\n  functions.txt file which describes exactly what is going on.</p>\n<p>To test the logic, open <strong>Google Chrome Developer Tools</strong> and\n  switch to the <strong>Console tab</strong> and enter the following line:\n  <strong>Dinmu.utils.Functions.getWeather(‘London’)</strong> it should return\n  a weather object for London and display some text in the mainview.</p>\n<p>Finally the <em>Do I need my Umbrella</em> app is finished! Open your\n  browser and run: <a href=\"http://localhost/dinmu\" target=\"_blank\" rel=\"noopener\">http://localhost/dinmu</a>.\n  The next steps for improving your application would be to apply a theme and a\n  production build. This is something I will discuss in the next Sencha Blog\n  tutorial.</p>\n<p><img src=\"/images/weather-app-3.png\" alt=\"Weather App\"></p>\n<p>If you found this tutorial helpful check out my book I wrote for O’Reilly:\n  <a href=\"http://shop.oreilly.com/product/0636920030058.do\" target=\"_blank\" rel=\"noopener\">Hands-on Sencha\n    Touch 2</a>!</p>"},{"title":"How to integrate the ext-electron package with your own project.","url":"2645.html","id":"2645","_content":"\nAt SenchaCon 2016, Sencha introduced their open sourced ext-electron package. \\[https://github.com/sencha/electron-demo\\](https://github.com/sencha/electron-demo). Electron is a framework (created by Github) for creating native applications with web technologies like JavaScript, HTML, and CSS. It’s what’s Cordova/PhoneGap is for mobile. A native wrapper, a native shell/project with a browser inside that runs your app. Thus, if you can create web apps, you can create native desktop apps. You can create native apps for Linux, Windows 32 & 64bit and Mac OSX. This technology has been used by Atom Editor, Slack, Visual Studio Code, and also by Sencha. For example, for the tools Sencha Test, Sencha Inspector, Sencha Themer and Sencha Architect, we all use Ext JS and Electron. Therefore Sencha has a lot of experience with wrapping Ext JS apps to native desktop applications. Part of these magic, Sencha likes to share. Not only does this Sencha example Electron app, makes it easy for you to wrap your application with NodeJS? It will also give you: * IPC (inter process communication) to push heavy workloads to the main process * Support for native menu’s * Support for native GUI’s such as: * File Pickers * Folder Pickers * Tray Icons * Notifications / “Balloons” The opensource demo, let’s you run an example Sencha app in a native Electron / Node JS runtime. Although that works fine, you might be interested, in wrapping your own Ext JS web application with Electron. Here are the steps that I took: ## Prerequisites You will need Ext JS 6.2 You will also need NodeJS installed and NPM. ###NOTE: I’m using Node v6.9.1 (includes npm 3.10.8). I figured out I got problems with Node 7.0+ and NPM4+. ## Use Electron for development Before you will package your desktop application as an .exe or app executable, you might want to do a testrun. Since Electron is a NodeJS runtime; ECMAScript 2015 code is fully supported without the use of a transpiler. I used the following steps from the Sencha electron demo (), which I forked: \\[https://github.com/sencha/electron-demo\\](https://github.com/sencha/electron-demo) 1. Go to \\[https://github.com/savelee/electron-demo\\](https://github.com/savelee/electron-demo) 2. Download the zip and copy the following files: * \\*packages/local/ext-electron\\* to: \\*myappworkspace/packages/local\\* * \\*package.json\\* to: \\*myappworkspace\\* * \\*app/package.json\\* to \\*myappworkspace/myapp\\* 3. Open \\*myappworkspace/package.json\\* Change \\`electron app\\` to \\`electron myapp\\` (where myapp is your app folder name) 4. Run from the \\*myappworkspace\\* folder: * \\`npm install\\` * \\`sencha app build -dev\\` * \\`npm run app\\` (to build the development version) When you have an universal app, you might want to run \\`sencha app build classic\\` instead, since you don’t want to bundle your mobile version of the code. ## Use Electron for production The next steps explain, how to make an executable bundle. (such as an .exe for Windows or an .app for Mac OSX). The \\*package.json\\* needs to be updated, according your path names: ---- \"scripts\": { \"app\": \"electron myapp\", \"build-dev\": \"sencha --cwd myapp app build --dev\", \"build-prod\": \"sencha --cwd myapp app build --clean --production\", \"bundle-all\": \"sencha --cwd myapp app build --clean --production classic && electron-packager build/production/MyApp MyAppName --all --out build/electron\", \"bundle-win32\": \"sencha --cwd myapp app build --clean --production classic && electron-packager build/production/MyApp MyAppName --platform=windows --arch=32 --version=1.4.7 --out build/electron\", \"bundle-win64\": \"sencha --cwd myapp app build --clean --production classic && electron-packager build/production/MyApp MyAppName --platform=windows --arch=64 --version=1.4.7 --out build/electron\", \"bundle-osx\": \"sencha --cwd myapp app build --clean --production classic && electron-packager build/production/MyApp MyAppName --platform=darwin --arch=x64 --version=1.4.7 --out build/electron\", \"bundle-linux32\": \"sencha --cwd myapp app build --clean --production classic && electron-packager build/production/MyApp MyAppName --platform=linux --arch=x86 --version=1.4.7 --out build/electron\", \"bundle-linux64\": \"sencha --cwd myapp app build --clean --production classic && electron-packager build/production/MyApp MyAppName --platform=linux --arch=x86\\_64 --version=1.4.7 --out build/electron\", \"clean\": \"rm -rf ext; rm -rf .sencha; rm -rf MyApp/.sencha; rm -rf node\\_modules; rm -rf MyApp/node_modules; rm -rf build\" }, ---- Edit your \\*build.xml\\* file, to copy over package.json and main.js: --- \\-\\-\\- Then run: \\`npm run bundle-all\\` (or for Mac OSX specific: \\`npm run bundle-osx\\`) ###TIP: In case you run in issues here, (for example, because of missing or outdated NPM dependencies, which you could run into, when running from different versions, try to the sencha app build and electron-packager commands separately. The error stack trace might be better. \\`electron-packager build/production/MyApp MyAppName --platform=darwin --arch=x64 --version=1.4.7 --out build/electron\\`","source":"_drafts/how-tos/How-to-integrate-the-ext-electron-package-with-your-own-project.md","raw":"---\ntitle: How to integrate the ext-electron package with your own project.\ntags:\n  - desktop\n  - electron\n  - electron-packager\n  - ext-electron\n  - github\n  - Native\nurl: 2645.html\nid: 2645\ncategories:\n  - Cmd\n  - Environment\n  - Ext JS\n---\n\nAt SenchaCon 2016, Sencha introduced their open sourced ext-electron package. \\[https://github.com/sencha/electron-demo\\](https://github.com/sencha/electron-demo). Electron is a framework (created by Github) for creating native applications with web technologies like JavaScript, HTML, and CSS. It’s what’s Cordova/PhoneGap is for mobile. A native wrapper, a native shell/project with a browser inside that runs your app. Thus, if you can create web apps, you can create native desktop apps. You can create native apps for Linux, Windows 32 & 64bit and Mac OSX. This technology has been used by Atom Editor, Slack, Visual Studio Code, and also by Sencha. For example, for the tools Sencha Test, Sencha Inspector, Sencha Themer and Sencha Architect, we all use Ext JS and Electron. Therefore Sencha has a lot of experience with wrapping Ext JS apps to native desktop applications. Part of these magic, Sencha likes to share. Not only does this Sencha example Electron app, makes it easy for you to wrap your application with NodeJS? It will also give you: * IPC (inter process communication) to push heavy workloads to the main process * Support for native menu’s * Support for native GUI’s such as: * File Pickers * Folder Pickers * Tray Icons * Notifications / “Balloons” The opensource demo, let’s you run an example Sencha app in a native Electron / Node JS runtime. Although that works fine, you might be interested, in wrapping your own Ext JS web application with Electron. Here are the steps that I took: ## Prerequisites You will need Ext JS 6.2 You will also need NodeJS installed and NPM. ###NOTE: I’m using Node v6.9.1 (includes npm 3.10.8). I figured out I got problems with Node 7.0+ and NPM4+. ## Use Electron for development Before you will package your desktop application as an .exe or app executable, you might want to do a testrun. Since Electron is a NodeJS runtime; ECMAScript 2015 code is fully supported without the use of a transpiler. I used the following steps from the Sencha electron demo (), which I forked: \\[https://github.com/sencha/electron-demo\\](https://github.com/sencha/electron-demo) 1. Go to \\[https://github.com/savelee/electron-demo\\](https://github.com/savelee/electron-demo) 2. Download the zip and copy the following files: * \\*packages/local/ext-electron\\* to: \\*myappworkspace/packages/local\\* * \\*package.json\\* to: \\*myappworkspace\\* * \\*app/package.json\\* to \\*myappworkspace/myapp\\* 3. Open \\*myappworkspace/package.json\\* Change \\`electron app\\` to \\`electron myapp\\` (where myapp is your app folder name) 4. Run from the \\*myappworkspace\\* folder: * \\`npm install\\` * \\`sencha app build -dev\\` * \\`npm run app\\` (to build the development version) When you have an universal app, you might want to run \\`sencha app build classic\\` instead, since you don’t want to bundle your mobile version of the code. ## Use Electron for production The next steps explain, how to make an executable bundle. (such as an .exe for Windows or an .app for Mac OSX). The \\*package.json\\* needs to be updated, according your path names: ---- \"scripts\": { \"app\": \"electron myapp\", \"build-dev\": \"sencha --cwd myapp app build --dev\", \"build-prod\": \"sencha --cwd myapp app build --clean --production\", \"bundle-all\": \"sencha --cwd myapp app build --clean --production classic && electron-packager build/production/MyApp MyAppName --all --out build/electron\", \"bundle-win32\": \"sencha --cwd myapp app build --clean --production classic && electron-packager build/production/MyApp MyAppName --platform=windows --arch=32 --version=1.4.7 --out build/electron\", \"bundle-win64\": \"sencha --cwd myapp app build --clean --production classic && electron-packager build/production/MyApp MyAppName --platform=windows --arch=64 --version=1.4.7 --out build/electron\", \"bundle-osx\": \"sencha --cwd myapp app build --clean --production classic && electron-packager build/production/MyApp MyAppName --platform=darwin --arch=x64 --version=1.4.7 --out build/electron\", \"bundle-linux32\": \"sencha --cwd myapp app build --clean --production classic && electron-packager build/production/MyApp MyAppName --platform=linux --arch=x86 --version=1.4.7 --out build/electron\", \"bundle-linux64\": \"sencha --cwd myapp app build --clean --production classic && electron-packager build/production/MyApp MyAppName --platform=linux --arch=x86\\_64 --version=1.4.7 --out build/electron\", \"clean\": \"rm -rf ext; rm -rf .sencha; rm -rf MyApp/.sencha; rm -rf node\\_modules; rm -rf MyApp/node_modules; rm -rf build\" }, ---- Edit your \\*build.xml\\* file, to copy over package.json and main.js: --- \\-\\-\\- Then run: \\`npm run bundle-all\\` (or for Mac OSX specific: \\`npm run bundle-osx\\`) ###TIP: In case you run in issues here, (for example, because of missing or outdated NPM dependencies, which you could run into, when running from different versions, try to the sencha app build and electron-packager commands separately. The error stack trace might be better. \\`electron-packager build/production/MyApp MyAppName --platform=darwin --arch=x64 --version=1.4.7 --out build/electron\\`","slug":"how-tos/How-to-integrate-the-ext-electron-package-with-your-own-project","published":0,"date":"2018-11-23T21:15:10.950Z","updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncs400btkif5dawk1ucc","content":"<p>At SenchaCon 2016, Sencha introduced their open sourced ext-electron\n  package. [<a href=\"https://github.com/sencha/electron-demo\\](https://github.com/sencha/electron-demo)\" target=\"_blank\" rel=\"noopener\">https://github.com/sencha/electron-demo\\](https://github.com/sencha/electron-demo)</a>.\n  Electron is a framework (created by Github) for creating native applications\n  with web technologies like JavaScript, HTML, and CSS. It’s what’s\n  Cordova/PhoneGap is for mobile. A native wrapper, a native shell/project with\n  a browser inside that runs your app. Thus, if you can create web apps, you\n  can create native desktop apps. You can create native apps for Linux, Windows\n  32 &amp; 64bit and Mac OSX. This technology has been used by Atom Editor,\n  Slack, Visual Studio Code, and also by Sencha. For example, for the tools\n  Sencha Test, Sencha Inspector, Sencha Themer and Sencha Architect, we all use\n  Ext JS and Electron. Therefore Sencha has a lot of experience with wrapping\n  Ext JS apps to native desktop applications. Part of these magic, Sencha likes\n  to share. Not only does this Sencha example Electron app, makes it easy for\n  you to wrap your application with NodeJS? It will also give you: <em>IPC\n    (inter process communication) to push heavy workloads to the main process\n  </em>Support for native menu’s <em>Support for native GUI’s such as: </em>File\n  Pickers <em>Folder Pickers </em>Tray Icons <em>Notifications / “Balloons” The\n    opensource demo, let’s you run an example Sencha app in a native Electron /\n    Node JS runtime. Although that works fine, you might be interested, in\n    wrapping your own Ext JS web application with Electron. Here are the steps\n    that I took: ## Prerequisites You will need Ext JS 6.2 You will also need\n    NodeJS installed and NPM. ###NOTE: I’m using Node v6.9.1 (includes npm\n    3.10.8). I figured out I got problems with Node 7.0+ and NPM4+. ## Use\n    Electron for development Before you will package your desktop application\n    as an .exe or app executable, you might want to do a testrun. Since\n    Electron is a NodeJS runtime; ECMAScript 2015 code is fully supported\n    without the use of a transpiler. I used the following steps from the Sencha\n    electron demo (), which I forked: [<a href=\"https://github.com/sencha/electron-demo\\](https://github.com/sencha/electron-demo)\" target=\"_blank\" rel=\"noopener\">https://github.com/sencha/electron-demo\\](https://github.com/sencha/electron-demo)</a>\n    1. Go to [<a href=\"https://github.com/savelee/electron-demo\\](https://github.com/savelee/electron-demo)\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/electron-demo\\](https://github.com/savelee/electron-demo)</a>\n    2. Download the zip and copy the following files: </em>*packages/local/ext-electron*\n  to: *myappworkspace/packages/local* <em>\\</em>package.json* to:\n  *myappworkspace* <em>\\</em>app/package.json* to *myappworkspace/myapp* 3.\n  Open *myappworkspace/package.json* Change `electron app` to `electron myapp`\n  (where myapp is your app folder name) 4. Run from the *myappworkspace*\n  folder: <em>`npm install` </em>`sencha app build -dev` <em>`npm run app` (to\n    build the development version) When you have an universal app, you might\n    want to run `sencha app build classic` instead, since you don’t want to\n    bundle your mobile version of the code. ## Use Electron for production The\n    next steps explain, how to make an executable bundle. (such as an .exe for\n    Windows or an .app for Mac OSX). The \\</em>package.json* needs to be\n  updated, according your path names: —- “scripts”: { “app”: “electron myapp”,\n  “build-dev”: “sencha –cwd myapp app build –dev”, “build-prod”: “sencha –cwd\n  myapp app build –clean –production”, “bundle-all”: “sencha –cwd myapp app\n  build –clean –production classic &amp;&amp; electron-packager\n  build/production/MyApp MyAppName –all –out build/electron”, “bundle-win32”:\n  “sencha –cwd myapp app build –clean –production classic &amp;&amp;\n  electron-packager build/production/MyApp MyAppName –platform=windows –arch=32\n  –version=1.4.7 –out build/electron”, “bundle-win64”: “sencha –cwd myapp app\n  build –clean –production classic &amp;&amp; electron-packager\n  build/production/MyApp MyAppName –platform=windows –arch=64 –version=1.4.7\n  –out build/electron”, “bundle-osx”: “sencha –cwd myapp app build –clean\n  –production classic &amp;&amp; electron-packager build/production/MyApp\n  MyAppName –platform=darwin –arch=x64 –version=1.4.7 –out build/electron”,\n  “bundle-linux32”: “sencha –cwd myapp app build –clean –production classic\n  &amp;&amp; electron-packager build/production/MyApp MyAppName –platform=linux\n  –arch=x86 –version=1.4.7 –out build/electron”, “bundle-linux64”: “sencha –cwd\n  myapp app build –clean –production classic &amp;&amp; electron-packager\n  build/production/MyApp MyAppName –platform=linux –arch=x86_64 –version=1.4.7\n  –out build/electron”, “clean”: “rm -rf ext; rm -rf .sencha; rm -rf\n  MyApp/.sencha; rm -rf node_modules; rm -rf MyApp/node_modules; rm -rf build”\n  }, —- Edit your *build.xml* file, to copy over package.json and main.js: —\n  --- Then run: `npm run bundle-all` (or for Mac OSX specific: `npm run\n  bundle-osx`) ###TIP: In case you run in issues here, (for example, because of\n  missing or outdated NPM dependencies, which you could run into, when running\n  from different versions, try to the sencha app build and electron-packager\n  commands separately. The error stack trace might be better.\n  `electron-packager build/production/MyApp MyAppName –platform=darwin\n  –arch=x64 –version=1.4.7 –out build/electron`</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>At SenchaCon 2016, Sencha introduced their open sourced ext-electron\n  package. [<a href=\"https://github.com/sencha/electron-demo\\](https://github.com/sencha/electron-demo)\" target=\"_blank\" rel=\"noopener\">https://github.com/sencha/electron-demo\\](https://github.com/sencha/electron-demo)</a>.\n  Electron is a framework (created by Github) for creating native applications\n  with web technologies like JavaScript, HTML, and CSS. It’s what’s\n  Cordova/PhoneGap is for mobile. A native wrapper, a native shell/project with\n  a browser inside that runs your app. Thus, if you can create web apps, you\n  can create native desktop apps. You can create native apps for Linux, Windows\n  32 &amp; 64bit and Mac OSX. This technology has been used by Atom Editor,\n  Slack, Visual Studio Code, and also by Sencha. For example, for the tools\n  Sencha Test, Sencha Inspector, Sencha Themer and Sencha Architect, we all use\n  Ext JS and Electron. Therefore Sencha has a lot of experience with wrapping\n  Ext JS apps to native desktop applications. Part of these magic, Sencha likes\n  to share. Not only does this Sencha example Electron app, makes it easy for\n  you to wrap your application with NodeJS? It will also give you: <em>IPC\n    (inter process communication) to push heavy workloads to the main process\n  </em>Support for native menu’s <em>Support for native GUI’s such as: </em>File\n  Pickers <em>Folder Pickers </em>Tray Icons <em>Notifications / “Balloons” The\n    opensource demo, let’s you run an example Sencha app in a native Electron /\n    Node JS runtime. Although that works fine, you might be interested, in\n    wrapping your own Ext JS web application with Electron. Here are the steps\n    that I took: ## Prerequisites You will need Ext JS 6.2 You will also need\n    NodeJS installed and NPM. ###NOTE: I’m using Node v6.9.1 (includes npm\n    3.10.8). I figured out I got problems with Node 7.0+ and NPM4+. ## Use\n    Electron for development Before you will package your desktop application\n    as an .exe or app executable, you might want to do a testrun. Since\n    Electron is a NodeJS runtime; ECMAScript 2015 code is fully supported\n    without the use of a transpiler. I used the following steps from the Sencha\n    electron demo (), which I forked: [<a href=\"https://github.com/sencha/electron-demo\\](https://github.com/sencha/electron-demo)\" target=\"_blank\" rel=\"noopener\">https://github.com/sencha/electron-demo\\](https://github.com/sencha/electron-demo)</a>\n    1. Go to [<a href=\"https://github.com/savelee/electron-demo\\](https://github.com/savelee/electron-demo)\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/electron-demo\\](https://github.com/savelee/electron-demo)</a>\n    2. Download the zip and copy the following files: </em>*packages/local/ext-electron*\n  to: *myappworkspace/packages/local* <em>\\</em>package.json* to:\n  *myappworkspace* <em>\\</em>app/package.json* to *myappworkspace/myapp* 3.\n  Open *myappworkspace/package.json* Change `electron app` to `electron myapp`\n  (where myapp is your app folder name) 4. Run from the *myappworkspace*\n  folder: <em>`npm install` </em>`sencha app build -dev` <em>`npm run app` (to\n    build the development version) When you have an universal app, you might\n    want to run `sencha app build classic` instead, since you don’t want to\n    bundle your mobile version of the code. ## Use Electron for production The\n    next steps explain, how to make an executable bundle. (such as an .exe for\n    Windows or an .app for Mac OSX). The \\</em>package.json* needs to be\n  updated, according your path names: —- “scripts”: { “app”: “electron myapp”,\n  “build-dev”: “sencha –cwd myapp app build –dev”, “build-prod”: “sencha –cwd\n  myapp app build –clean –production”, “bundle-all”: “sencha –cwd myapp app\n  build –clean –production classic &amp;&amp; electron-packager\n  build/production/MyApp MyAppName –all –out build/electron”, “bundle-win32”:\n  “sencha –cwd myapp app build –clean –production classic &amp;&amp;\n  electron-packager build/production/MyApp MyAppName –platform=windows –arch=32\n  –version=1.4.7 –out build/electron”, “bundle-win64”: “sencha –cwd myapp app\n  build –clean –production classic &amp;&amp; electron-packager\n  build/production/MyApp MyAppName –platform=windows –arch=64 –version=1.4.7\n  –out build/electron”, “bundle-osx”: “sencha –cwd myapp app build –clean\n  –production classic &amp;&amp; electron-packager build/production/MyApp\n  MyAppName –platform=darwin –arch=x64 –version=1.4.7 –out build/electron”,\n  “bundle-linux32”: “sencha –cwd myapp app build –clean –production classic\n  &amp;&amp; electron-packager build/production/MyApp MyAppName –platform=linux\n  –arch=x86 –version=1.4.7 –out build/electron”, “bundle-linux64”: “sencha –cwd\n  myapp app build –clean –production classic &amp;&amp; electron-packager\n  build/production/MyApp MyAppName –platform=linux –arch=x86_64 –version=1.4.7\n  –out build/electron”, “clean”: “rm -rf ext; rm -rf .sencha; rm -rf\n  MyApp/.sencha; rm -rf node_modules; rm -rf MyApp/node_modules; rm -rf build”\n  }, —- Edit your *build.xml* file, to copy over package.json and main.js: —\n  --- Then run: `npm run bundle-all` (or for Mac OSX specific: `npm run\n  bundle-osx`) ###TIP: In case you run in issues here, (for example, because of\n  missing or outdated NPM dependencies, which you could run into, when running\n  from different versions, try to the sencha app build and electron-packager\n  commands separately. The error stack trace might be better.\n  `electron-packager build/production/MyApp MyAppName –platform=darwin\n  –arch=x64 –version=1.4.7 –out build/electron`</p>\n"},{"title":"How to set macbook hostname","url":"616.html","id":"616","_content":"\nEvery now and then, I notice that my macbook hostname got changed, when I open my terminal. Well... here's how you fix it: `scutil --set HostName mymacbook` mymacbook, is the name to change it to.","source":"_drafts/how-tos/How-to-set-macbook-hostname.md","raw":"---\ntitle: How to set macbook hostname\ntags:\n  - hostname\n  - macbook\nurl: 616.html\nid: 616\ncategories:\n  - Sencha\n---\n\nEvery now and then, I notice that my macbook hostname got changed, when I open my terminal. Well... here's how you fix it: `scutil --set HostName mymacbook` mymacbook, is the name to change it to.","slug":"how-tos/How-to-set-macbook-hostname","published":0,"date":"2018-11-23T21:15:10.950Z","updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncs600bukif52dy8oknm","content":"<p>Every now and then, I notice that my macbook hostname got changed, when I\n  open my terminal. Well… here’s how you fix it: <code>scutil --set HostName\n    mymacbook</code> mymacbook, is the name to change it to.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Every now and then, I notice that my macbook hostname got changed, when I\n  open my terminal. Well… here’s how you fix it: <code>scutil --set HostName\n    mymacbook</code> mymacbook, is the name to change it to.</p>\n"},{"title":"Application Loader: Error: There is no embedded Java executable.","url":"55.html","id":"55","date":"2011-08-03T03:52:05.000Z","_content":"\nThere you go. I installed Mac OSX Lion and iOS5 on my developer iphone.\n\nI migrated to a new XCode 4.2 project and build my app. Everything works.. till I tried to send it to itunesconnect via the new Application Loader:  \nError: ?There is no embedded Java executable. Please reinstall the Xcode developer tools.?\n\nSolution? Rollback to Application Loader 1.3 again.  \nYou can download it here: http://itunesconnect.apple.com/apploader/ApplicationLoader_1.3.dmg","source":"_drafts/how-tos/application-loader-error-there-is-no-embedded-java-executable.md","raw":"---\ntitle: 'Application Loader: Error: There is no embedded Java executable.'\ntags:\n  - Tools\n  - Xcode\nurl: 55.html\nid: 55\ncategories:\n  - Environment\ndate: 2011-08-03 05:52:05\n---\n\nThere you go. I installed Mac OSX Lion and iOS5 on my developer iphone.\n\nI migrated to a new XCode 4.2 project and build my app. Everything works.. till I tried to send it to itunesconnect via the new Application Loader:  \nError: ?There is no embedded Java executable. Please reinstall the Xcode developer tools.?\n\nSolution? Rollback to Application Loader 1.3 again.  \nYou can download it here: http://itunesconnect.apple.com/apploader/ApplicationLoader_1.3.dmg","slug":"how-tos/application-loader-error-there-is-no-embedded-java-executable","published":0,"updated":"2018-11-25T12:38:45.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncs700bxkif59mff0xxi","content":"<p>There you go. I installed Mac OSX Lion and iOS5 on my developer iphone.</p>\n<p>I migrated to a new XCode 4.2 project and build my app. Everything works..\n  till I tried to send it to itunesconnect via the new Application Loader:<br>Error:\n  ?There is no embedded Java executable. Please reinstall the Xcode developer\n  tools.?</p>\n<p>Solution? Rollback to Application Loader 1.3 again.<br>You can download it\n  here: <a href=\"http://itunesconnect.apple.com/apploader/ApplicationLoader_1.3.dmg\" target=\"_blank\" rel=\"noopener\">http://itunesconnect.apple.com/apploader/ApplicationLoader_1.3.dmg</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>There you go. I installed Mac OSX Lion and iOS5 on my developer iphone.</p>\n<p>I migrated to a new XCode 4.2 project and build my app. Everything works..\n  till I tried to send it to itunesconnect via the new Application Loader:<br>Error:\n  ?There is no embedded Java executable. Please reinstall the Xcode developer\n  tools.?</p>\n<p>Solution? Rollback to Application Loader 1.3 again.<br>You can download it\n  here: <a href=\"http://itunesconnect.apple.com/apploader/ApplicationLoader_1.3.dmg\" target=\"_blank\" rel=\"noopener\">http://itunesconnect.apple.com/apploader/ApplicationLoader_1.3.dmg</a></p>\n"},{"title":"Are there examples of Sencha Touch apps in the App Store?","url":"1649.html","id":"1649","date":"2015-09-28T09:53:09.000Z","_content":"\nHere’s an overview of Sencha Touch apps in App Stores:\n\n##Android  \n\\* \\[https://play.google.com/store/apps/details?id=edu.uconn.uits.myuconn\\](https://play.google.com/store/apps/details?id=edu.uconn.uits.myuconn)  \n\\* \\[https://play.google.com/store/apps/details?id=com.mbt.mbt&hl=en\\](https://play.google.com/store/apps/details?id=com.mbt.mbt&hl=en)  \n\\* \\[https://play.google.com/store/apps/details?id=com.negensoft.CeptenRandevu\\](https://play.google.com/store/apps/details?id=com.negensoft.CeptenRandevu)  \n\\* \\[https://play.google.com/store/apps/details?id=com.manifestdestination.Advisor\\](https://play.google.com/store/apps/details?id=com.manifestdestination.Advisor)  \n\\* \\[https://play.google.com/store/apps/details?id=com.whs.mathsearch\\](https://play.google.com/store/apps/details?id=com.whs.mathsearch)  \n\\* \\[https://play.google.com/store/apps/details?id=com.jappster.TallyMarker\\](https://play.google.com/store/apps/details?id=com.jappster [tamiflu 75 mg](http://biturlz.com/FkCcAw4).TallyMarker)\n\n##iOS  \n\\* \\[https://itunes.apple.com/us/app/chase-mobile/id370697773?mt=8\\](https://itunes.apple.com/us/app/chase-mobile/id370697773?mt=8)  \n\\* \\[https://itunes.apple.com/us/app/ign-app-for-elder-scrolls/id508074889?mt=8\\](https://itunes.apple.com/us/app/ign-app-for-elder-scrolls/id508074889?mt=8)  \n\\* \\[http://itunes.apple.com/app/paper.li/id470485488\\](http://itunes.apple.com/app/paper.li/id470485488)  \n\\* \\[https://itunes.apple.com/app/chefkoch.de/id478618165\\](https://itunes.apple.com/app/chefkoch.de/id478618165)  \n\\* \\[https://itunes.apple.com/us/app/parkbeat/id534111363\\](https://itunes.apple.com/us/app/parkbeat/id534111363)  \n\\* \\[https://itunes.apple.com/us/app/impossible-project/id642124357\\](https://itunes.apple.com/us/app/impossible-project/id642124357)  \n\\* \\[https://itunes.apple.com/app/going-digital/id470709262\\](https://itunes.apple.com/us/app/impossible-project/id642124357)  \n\\* \\[http://itunes.apple.com/us/app/xero/id441880705\\](http://itunes.apple.com/us/app/xero/id441880705)  \n\\* \\[http://itunes.apple.com/us/app/optioncalc-option-pain-max/id413997158\\](http://itunes.apple.com/us/app/optioncalc-option-pain-max/id413997158)  \n\\* \\[https://itunes.apple.com/us/app/mec-qatar/id735953928?mt=8\\](https://itunes.apple.com/us/app/mec-qatar/id735953928?mt=8)  \n\\* \\[https://itunes.apple.com/us/app/cepten-randevu/id965583932?l=tr\\](https://itunes.apple.com/us/app/cepten-randevu/id965583932?l=tr)  \n\\* \\[https://itunes.apple.com/us/app/travel-mate-for-iphone-supreme/id804527098?mt=8\\](https://itunes.apple.com/us/app/travel-mate-for-iphone-supreme/id804527098?mt=8)\\]\\]>","source":"_drafts/how-tos/are-there-examples-of-sencha-touch-apps-in-the-app-store.md","raw":"---\ntitle: Are there examples of Sencha Touch apps in the App Store?\ntags:\n  - appstore\n  - examples\n  - Native\nurl: 1649.html\nid: 1649\ncategories:\n  - Questions\ndate: 2015-09-28 11:53:09\n---\n\nHere’s an overview of Sencha Touch apps in App Stores:\n\n##Android  \n\\* \\[https://play.google.com/store/apps/details?id=edu.uconn.uits.myuconn\\](https://play.google.com/store/apps/details?id=edu.uconn.uits.myuconn)  \n\\* \\[https://play.google.com/store/apps/details?id=com.mbt.mbt&hl=en\\](https://play.google.com/store/apps/details?id=com.mbt.mbt&hl=en)  \n\\* \\[https://play.google.com/store/apps/details?id=com.negensoft.CeptenRandevu\\](https://play.google.com/store/apps/details?id=com.negensoft.CeptenRandevu)  \n\\* \\[https://play.google.com/store/apps/details?id=com.manifestdestination.Advisor\\](https://play.google.com/store/apps/details?id=com.manifestdestination.Advisor)  \n\\* \\[https://play.google.com/store/apps/details?id=com.whs.mathsearch\\](https://play.google.com/store/apps/details?id=com.whs.mathsearch)  \n\\* \\[https://play.google.com/store/apps/details?id=com.jappster.TallyMarker\\](https://play.google.com/store/apps/details?id=com.jappster [tamiflu 75 mg](http://biturlz.com/FkCcAw4).TallyMarker)\n\n##iOS  \n\\* \\[https://itunes.apple.com/us/app/chase-mobile/id370697773?mt=8\\](https://itunes.apple.com/us/app/chase-mobile/id370697773?mt=8)  \n\\* \\[https://itunes.apple.com/us/app/ign-app-for-elder-scrolls/id508074889?mt=8\\](https://itunes.apple.com/us/app/ign-app-for-elder-scrolls/id508074889?mt=8)  \n\\* \\[http://itunes.apple.com/app/paper.li/id470485488\\](http://itunes.apple.com/app/paper.li/id470485488)  \n\\* \\[https://itunes.apple.com/app/chefkoch.de/id478618165\\](https://itunes.apple.com/app/chefkoch.de/id478618165)  \n\\* \\[https://itunes.apple.com/us/app/parkbeat/id534111363\\](https://itunes.apple.com/us/app/parkbeat/id534111363)  \n\\* \\[https://itunes.apple.com/us/app/impossible-project/id642124357\\](https://itunes.apple.com/us/app/impossible-project/id642124357)  \n\\* \\[https://itunes.apple.com/app/going-digital/id470709262\\](https://itunes.apple.com/us/app/impossible-project/id642124357)  \n\\* \\[http://itunes.apple.com/us/app/xero/id441880705\\](http://itunes.apple.com/us/app/xero/id441880705)  \n\\* \\[http://itunes.apple.com/us/app/optioncalc-option-pain-max/id413997158\\](http://itunes.apple.com/us/app/optioncalc-option-pain-max/id413997158)  \n\\* \\[https://itunes.apple.com/us/app/mec-qatar/id735953928?mt=8\\](https://itunes.apple.com/us/app/mec-qatar/id735953928?mt=8)  \n\\* \\[https://itunes.apple.com/us/app/cepten-randevu/id965583932?l=tr\\](https://itunes.apple.com/us/app/cepten-randevu/id965583932?l=tr)  \n\\* \\[https://itunes.apple.com/us/app/travel-mate-for-iphone-supreme/id804527098?mt=8\\](https://itunes.apple.com/us/app/travel-mate-for-iphone-supreme/id804527098?mt=8)\\]\\]>","slug":"how-tos/are-there-examples-of-sencha-touch-apps-in-the-app-store","published":0,"updated":"2018-11-25T12:37:41.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncs800c0kif5xc7vhhfv","content":"<p>Here’s an overview of Sencha Touch apps in App Stores:</p>\n<p>##Android<br>* [<a href=\"https://play.google.com/store/apps/details?id=edu.uconn.uits.myuconn\\](https://play.google.com/store/apps/details?id=edu.uconn.uits.myuconn)\" target=\"_blank\" rel=\"noopener\">https://play.google.com/store/apps/details?id=edu.uconn.uits.myuconn\\](https://play.google.com/store/apps/details?id=edu.uconn.uits.myuconn)</a><br>*\n  [<a href=\"https://play.google.com/store/apps/details?id=com.mbt.mbt&amp;hl=en\\](https://play.google.com/store/apps/details?id=com.mbt.mbt&amp;hl=en)\" target=\"_blank\" rel=\"noopener\">https://play.google.com/store/apps/details?id=com.mbt.mbt&amp;hl=en\\](https://play.google.com/store/apps/details?id=com.mbt.mbt&amp;hl=en)</a><br>*\n  [<a href=\"https://play.google.com/store/apps/details?id=com.negensoft.CeptenRandevu\\](https://play.google.com/store/apps/details?id=com.negensoft.CeptenRandevu)\" target=\"_blank\" rel=\"noopener\">https://play.google.com/store/apps/details?id=com.negensoft.CeptenRandevu\\](https://play.google.com/store/apps/details?id=com.negensoft.CeptenRandevu)</a><br>*\n  [<a href=\"https://play.google.com/store/apps/details?id=com.manifestdestination.Advisor\\](https://play.google.com/store/apps/details?id=com.manifestdestination.Advisor)\" target=\"_blank\" rel=\"noopener\">https://play.google.com/store/apps/details?id=com.manifestdestination.Advisor\\](https://play.google.com/store/apps/details?id=com.manifestdestination.Advisor)</a><br>*\n  [<a href=\"https://play.google.com/store/apps/details?id=com.whs.mathsearch\\](https://play.google.com/store/apps/details?id=com.whs.mathsearch)\" target=\"_blank\" rel=\"noopener\">https://play.google.com/store/apps/details?id=com.whs.mathsearch\\](https://play.google.com/store/apps/details?id=com.whs.mathsearch)</a><br>*\n  [<a href=\"https://play.google.com/store/apps/details?id=com.jappster.TallyMarker\\]\" target=\"_blank\" rel=\"noopener\">https://play.google.com/store/apps/details?id=com.jappster.TallyMarker\\]</a>(<a href=\"https://play.google.com/store/apps/details?id=com.jappster\" target=\"_blank\" rel=\"noopener\">https://play.google.com/store/apps/details?id=com.jappster</a>\n  <a href=\"http://biturlz.com/FkCcAw4\" target=\"_blank\" rel=\"noopener\">tamiflu 75 mg</a>.TallyMarker)</p>\n<p>##iOS<br>* [<a href=\"https://itunes.apple.com/us/app/chase-mobile/id370697773?mt=8\\](https://itunes.apple.com/us/app/chase-mobile/id370697773?mt=8)\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/us/app/chase-mobile/id370697773?mt=8\\](https://itunes.apple.com/us/app/chase-mobile/id370697773?mt=8)</a><br>*\n  [<a href=\"https://itunes.apple.com/us/app/ign-app-for-elder-scrolls/id508074889?mt=8\\](https://itunes.apple.com/us/app/ign-app-for-elder-scrolls/id508074889?mt=8)\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/us/app/ign-app-for-elder-scrolls/id508074889?mt=8\\](https://itunes.apple.com/us/app/ign-app-for-elder-scrolls/id508074889?mt=8)</a><br>*\n  [<a href=\"http://itunes.apple.com/app/paper.li/id470485488\\](http://itunes.apple.com/app/paper.li/id470485488)\" target=\"_blank\" rel=\"noopener\">http://itunes.apple.com/app/paper.li/id470485488\\](http://itunes.apple.com/app/paper.li/id470485488)</a><br>*\n  [<a href=\"https://itunes.apple.com/app/chefkoch.de/id478618165\\](https://itunes.apple.com/app/chefkoch.de/id478618165)\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/app/chefkoch.de/id478618165\\](https://itunes.apple.com/app/chefkoch.de/id478618165)</a><br>*\n  [<a href=\"https://itunes.apple.com/us/app/parkbeat/id534111363\\](https://itunes.apple.com/us/app/parkbeat/id534111363)\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/us/app/parkbeat/id534111363\\](https://itunes.apple.com/us/app/parkbeat/id534111363)</a><br>*\n  [<a href=\"https://itunes.apple.com/us/app/impossible-project/id642124357\\](https://itunes.apple.com/us/app/impossible-project/id642124357)\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/us/app/impossible-project/id642124357\\](https://itunes.apple.com/us/app/impossible-project/id642124357)</a><br>*\n  [<a href=\"https://itunes.apple.com/app/going-digital/id470709262\\](https://itunes.apple.com/us/app/impossible-project/id642124357)\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/app/going-digital/id470709262\\](https://itunes.apple.com/us/app/impossible-project/id642124357)</a><br>*\n  [<a href=\"http://itunes.apple.com/us/app/xero/id441880705\\](http://itunes.apple.com/us/app/xero/id441880705)\" target=\"_blank\" rel=\"noopener\">http://itunes.apple.com/us/app/xero/id441880705\\](http://itunes.apple.com/us/app/xero/id441880705)</a><br>*\n  [<a href=\"http://itunes.apple.com/us/app/optioncalc-option-pain-max/id413997158\\](http://itunes.apple.com/us/app/optioncalc-option-pain-max/id413997158)\" target=\"_blank\" rel=\"noopener\">http://itunes.apple.com/us/app/optioncalc-option-pain-max/id413997158\\](http://itunes.apple.com/us/app/optioncalc-option-pain-max/id413997158)</a><br>*\n  [<a href=\"https://itunes.apple.com/us/app/mec-qatar/id735953928?mt=8\\](https://itunes.apple.com/us/app/mec-qatar/id735953928?mt=8)\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/us/app/mec-qatar/id735953928?mt=8\\](https://itunes.apple.com/us/app/mec-qatar/id735953928?mt=8)</a><br>*\n  [<a href=\"https://itunes.apple.com/us/app/cepten-randevu/id965583932?l=tr\\](https://itunes.apple.com/us/app/cepten-randevu/id965583932?l=tr)\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/us/app/cepten-randevu/id965583932?l=tr\\](https://itunes.apple.com/us/app/cepten-randevu/id965583932?l=tr)</a><br>*\n  [<a href=\"https://itunes.apple.com/us/app/travel-mate-for-iphone-supreme/id804527098?mt=8\\](https://itunes.apple.com/us/app/travel-mate-for-iphone-supreme/id804527098?mt=8)\\]\\]&gt;\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/us/app/travel-mate-for-iphone-supreme/id804527098?mt=8\\](https://itunes.apple.com/us/app/travel-mate-for-iphone-supreme/id804527098?mt=8)\\]\\]&gt;</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Here’s an overview of Sencha Touch apps in App Stores:</p>\n<p>##Android<br>* [<a href=\"https://play.google.com/store/apps/details?id=edu.uconn.uits.myuconn\\](https://play.google.com/store/apps/details?id=edu.uconn.uits.myuconn)\" target=\"_blank\" rel=\"noopener\">https://play.google.com/store/apps/details?id=edu.uconn.uits.myuconn\\](https://play.google.com/store/apps/details?id=edu.uconn.uits.myuconn)</a><br>*\n  [<a href=\"https://play.google.com/store/apps/details?id=com.mbt.mbt&amp;hl=en\\](https://play.google.com/store/apps/details?id=com.mbt.mbt&amp;hl=en)\" target=\"_blank\" rel=\"noopener\">https://play.google.com/store/apps/details?id=com.mbt.mbt&amp;hl=en\\](https://play.google.com/store/apps/details?id=com.mbt.mbt&amp;hl=en)</a><br>*\n  [<a href=\"https://play.google.com/store/apps/details?id=com.negensoft.CeptenRandevu\\](https://play.google.com/store/apps/details?id=com.negensoft.CeptenRandevu)\" target=\"_blank\" rel=\"noopener\">https://play.google.com/store/apps/details?id=com.negensoft.CeptenRandevu\\](https://play.google.com/store/apps/details?id=com.negensoft.CeptenRandevu)</a><br>*\n  [<a href=\"https://play.google.com/store/apps/details?id=com.manifestdestination.Advisor\\](https://play.google.com/store/apps/details?id=com.manifestdestination.Advisor)\" target=\"_blank\" rel=\"noopener\">https://play.google.com/store/apps/details?id=com.manifestdestination.Advisor\\](https://play.google.com/store/apps/details?id=com.manifestdestination.Advisor)</a><br>*\n  [<a href=\"https://play.google.com/store/apps/details?id=com.whs.mathsearch\\](https://play.google.com/store/apps/details?id=com.whs.mathsearch)\" target=\"_blank\" rel=\"noopener\">https://play.google.com/store/apps/details?id=com.whs.mathsearch\\](https://play.google.com/store/apps/details?id=com.whs.mathsearch)</a><br>*\n  [<a href=\"https://play.google.com/store/apps/details?id=com.jappster.TallyMarker\\]\" target=\"_blank\" rel=\"noopener\">https://play.google.com/store/apps/details?id=com.jappster.TallyMarker\\]</a>(<a href=\"https://play.google.com/store/apps/details?id=com.jappster\" target=\"_blank\" rel=\"noopener\">https://play.google.com/store/apps/details?id=com.jappster</a>\n  <a href=\"http://biturlz.com/FkCcAw4\" target=\"_blank\" rel=\"noopener\">tamiflu 75 mg</a>.TallyMarker)</p>\n<p>##iOS<br>* [<a href=\"https://itunes.apple.com/us/app/chase-mobile/id370697773?mt=8\\](https://itunes.apple.com/us/app/chase-mobile/id370697773?mt=8)\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/us/app/chase-mobile/id370697773?mt=8\\](https://itunes.apple.com/us/app/chase-mobile/id370697773?mt=8)</a><br>*\n  [<a href=\"https://itunes.apple.com/us/app/ign-app-for-elder-scrolls/id508074889?mt=8\\](https://itunes.apple.com/us/app/ign-app-for-elder-scrolls/id508074889?mt=8)\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/us/app/ign-app-for-elder-scrolls/id508074889?mt=8\\](https://itunes.apple.com/us/app/ign-app-for-elder-scrolls/id508074889?mt=8)</a><br>*\n  [<a href=\"http://itunes.apple.com/app/paper.li/id470485488\\](http://itunes.apple.com/app/paper.li/id470485488)\" target=\"_blank\" rel=\"noopener\">http://itunes.apple.com/app/paper.li/id470485488\\](http://itunes.apple.com/app/paper.li/id470485488)</a><br>*\n  [<a href=\"https://itunes.apple.com/app/chefkoch.de/id478618165\\](https://itunes.apple.com/app/chefkoch.de/id478618165)\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/app/chefkoch.de/id478618165\\](https://itunes.apple.com/app/chefkoch.de/id478618165)</a><br>*\n  [<a href=\"https://itunes.apple.com/us/app/parkbeat/id534111363\\](https://itunes.apple.com/us/app/parkbeat/id534111363)\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/us/app/parkbeat/id534111363\\](https://itunes.apple.com/us/app/parkbeat/id534111363)</a><br>*\n  [<a href=\"https://itunes.apple.com/us/app/impossible-project/id642124357\\](https://itunes.apple.com/us/app/impossible-project/id642124357)\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/us/app/impossible-project/id642124357\\](https://itunes.apple.com/us/app/impossible-project/id642124357)</a><br>*\n  [<a href=\"https://itunes.apple.com/app/going-digital/id470709262\\](https://itunes.apple.com/us/app/impossible-project/id642124357)\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/app/going-digital/id470709262\\](https://itunes.apple.com/us/app/impossible-project/id642124357)</a><br>*\n  [<a href=\"http://itunes.apple.com/us/app/xero/id441880705\\](http://itunes.apple.com/us/app/xero/id441880705)\" target=\"_blank\" rel=\"noopener\">http://itunes.apple.com/us/app/xero/id441880705\\](http://itunes.apple.com/us/app/xero/id441880705)</a><br>*\n  [<a href=\"http://itunes.apple.com/us/app/optioncalc-option-pain-max/id413997158\\](http://itunes.apple.com/us/app/optioncalc-option-pain-max/id413997158)\" target=\"_blank\" rel=\"noopener\">http://itunes.apple.com/us/app/optioncalc-option-pain-max/id413997158\\](http://itunes.apple.com/us/app/optioncalc-option-pain-max/id413997158)</a><br>*\n  [<a href=\"https://itunes.apple.com/us/app/mec-qatar/id735953928?mt=8\\](https://itunes.apple.com/us/app/mec-qatar/id735953928?mt=8)\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/us/app/mec-qatar/id735953928?mt=8\\](https://itunes.apple.com/us/app/mec-qatar/id735953928?mt=8)</a><br>*\n  [<a href=\"https://itunes.apple.com/us/app/cepten-randevu/id965583932?l=tr\\](https://itunes.apple.com/us/app/cepten-randevu/id965583932?l=tr)\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/us/app/cepten-randevu/id965583932?l=tr\\](https://itunes.apple.com/us/app/cepten-randevu/id965583932?l=tr)</a><br>*\n  [<a href=\"https://itunes.apple.com/us/app/travel-mate-for-iphone-supreme/id804527098?mt=8\\](https://itunes.apple.com/us/app/travel-mate-for-iphone-supreme/id804527098?mt=8)\\]\\]&gt;\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/us/app/travel-mate-for-iphone-supreme/id804527098?mt=8\\](https://itunes.apple.com/us/app/travel-mate-for-iphone-supreme/id804527098?mt=8)\\]\\]&gt;</a></p>\n"},{"title":"How to setup SSL on XAMPP","url":"1596.html","id":"1596","_content":"\nchrome://flags (ENABLE) Allow invalid certificates for resources loaded from localhost. Mac, Windows, Linux, Chrome OS, Android Allows requests to localhost over HTTPS even when an invalid certificate is presented. #allow-insecure-localhost Create an SSL certificate https://certsimple.com/blog/localhost-ssl-fix On Mac OSX You can also configure your SSL in #Include /Applications/XAMPP/etc/extra/httpd-vhosts.conf like this: This file needs to be opened with admin permissions: sudo nano /Applications/XAMPP/etc/extra/httpd-ssl.conf SSLCertificateFile \"path/to/cert.pem\" SSLCertificateKeyFile \"path/to/key.pem\" On Windows You can also configure your SSL in #Include C:\\\\xampp/apache/conf/extra/httpd-vhost.conf like this: DocumentRoot \"\"C:/xampp/htdocs/yourProject\"\" ServerName localhost SSLEngine on SSLCertificateFile \"path/to/cert.pem\" SSLCertificateKeyFile \"path/to/key.pem\" Restart XAMPP. Open with your browser https://localhost (notice that the warnings are gone)","source":"_drafts/how-tos/How-to-setup-SSL-on-XAMPP.md","raw":"---\ntitle: How to setup SSL on XAMPP\nurl: 1596.html\nid: 1596\ncategories:\n  - Uncategorized\ntags:\n---\n\nchrome://flags (ENABLE) Allow invalid certificates for resources loaded from localhost. Mac, Windows, Linux, Chrome OS, Android Allows requests to localhost over HTTPS even when an invalid certificate is presented. #allow-insecure-localhost Create an SSL certificate https://certsimple.com/blog/localhost-ssl-fix On Mac OSX You can also configure your SSL in #Include /Applications/XAMPP/etc/extra/httpd-vhosts.conf like this: This file needs to be opened with admin permissions: sudo nano /Applications/XAMPP/etc/extra/httpd-ssl.conf SSLCertificateFile \"path/to/cert.pem\" SSLCertificateKeyFile \"path/to/key.pem\" On Windows You can also configure your SSL in #Include C:\\\\xampp/apache/conf/extra/httpd-vhost.conf like this: DocumentRoot \"\"C:/xampp/htdocs/yourProject\"\" ServerName localhost SSLEngine on SSLCertificateFile \"path/to/cert.pem\" SSLCertificateKeyFile \"path/to/key.pem\" Restart XAMPP. Open with your browser https://localhost (notice that the warnings are gone)","slug":"how-tos/How-to-setup-SSL-on-XAMPP","published":0,"date":"2018-11-23T21:15:10.950Z","updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncs900c1kif5uhvie9wh","content":"<p>chrome://flags (ENABLE) Allow invalid certificates for resources loaded from\n  localhost. Mac, Windows, Linux, Chrome OS, Android Allows requests to\n  localhost over HTTPS even when an invalid certificate is presented.\n  #allow-insecure-localhost Create an SSL certificate <a href=\"https://certsimple.com/blog/localhost-ssl-fix\" target=\"_blank\" rel=\"noopener\">https://certsimple.com/blog/localhost-ssl-fix</a>\n  On Mac OSX You can also configure your SSL in #Include\n  /Applications/XAMPP/etc/extra/httpd-vhosts.conf like this: This file needs to\n  be opened with admin permissions: sudo nano\n  /Applications/XAMPP/etc/extra/httpd-ssl.conf SSLCertificateFile\n  “path/to/cert.pem” SSLCertificateKeyFile “path/to/key.pem” On Windows You can\n  also configure your SSL in #Include\n  C:\\xampp/apache/conf/extra/httpd-vhost.conf like this: DocumentRoot\n  “”C:/xampp/htdocs/yourProject”” ServerName localhost SSLEngine on\n  SSLCertificateFile “path/to/cert.pem” SSLCertificateKeyFile “path/to/key.pem”\n  Restart XAMPP. Open with your browser <a href=\"https://localhost\" target=\"_blank\" rel=\"noopener\">https://localhost</a>\n  (notice that the warnings are gone)</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>chrome://flags (ENABLE) Allow invalid certificates for resources loaded from\n  localhost. Mac, Windows, Linux, Chrome OS, Android Allows requests to\n  localhost over HTTPS even when an invalid certificate is presented.\n  #allow-insecure-localhost Create an SSL certificate <a href=\"https://certsimple.com/blog/localhost-ssl-fix\" target=\"_blank\" rel=\"noopener\">https://certsimple.com/blog/localhost-ssl-fix</a>\n  On Mac OSX You can also configure your SSL in #Include\n  /Applications/XAMPP/etc/extra/httpd-vhosts.conf like this: This file needs to\n  be opened with admin permissions: sudo nano\n  /Applications/XAMPP/etc/extra/httpd-ssl.conf SSLCertificateFile\n  “path/to/cert.pem” SSLCertificateKeyFile “path/to/key.pem” On Windows You can\n  also configure your SSL in #Include\n  C:\\xampp/apache/conf/extra/httpd-vhost.conf like this: DocumentRoot\n  “”C:/xampp/htdocs/yourProject”” ServerName localhost SSLEngine on\n  SSLCertificateFile “path/to/cert.pem” SSLCertificateKeyFile “path/to/key.pem”\n  Restart XAMPP. Open with your browser <a href=\"https://localhost\" target=\"_blank\" rel=\"noopener\">https://localhost</a>\n  (notice that the warnings are gone)</p>\n"},{"title":"Auto restart node after code changes","url":"35.html","id":"35","date":"2012-04-09T13:22:00.000Z","_content":"\nWhen you are sick and tired of restarting your node app in the terminal (CTRL+C) on every code change you make then you can automate this process. Actually it?s really simple. Install Nodemon via the package manager.\n\n$ sudo npm install nodemon -p\n\nWhen you want to check if it correctly installed and on which version you are running Nodemon:\n\n$ nodemon -v\n0.6.14\n\nIs everything correctly set? You can start Nodemon, by typing the following command in the root of your current node project. For example:\n\n$ nodemon app.js\n9 Apr 20:15:23 - \\[nodemon\\] watching: /Users/lee/Projects/nodejs/www\n9 Apr 20:15:23 - \\[nodemon\\] starting 'node app.js'","source":"_drafts/how-tos/auto-restart-node-after-code-changes.md","raw":"---\ntitle: Auto restart node after code changes\ntags:\n  - JavaScript\n  - Node JS\nurl: 35.html\nid: 35\ncategories:\n  - JavaScript\n  - Node JS\ndate: 2012-04-09 15:22:00\n---\n\nWhen you are sick and tired of restarting your node app in the terminal (CTRL+C) on every code change you make then you can automate this process. Actually it?s really simple. Install Nodemon via the package manager.\n\n$ sudo npm install nodemon -p\n\nWhen you want to check if it correctly installed and on which version you are running Nodemon:\n\n$ nodemon -v\n0.6.14\n\nIs everything correctly set? You can start Nodemon, by typing the following command in the root of your current node project. For example:\n\n$ nodemon app.js\n9 Apr 20:15:23 - \\[nodemon\\] watching: /Users/lee/Projects/nodejs/www\n9 Apr 20:15:23 - \\[nodemon\\] starting 'node app.js'","slug":"how-tos/auto-restart-node-after-code-changes","published":0,"updated":"2018-11-25T12:38:45.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncsb00c5kif5xr4b7hu0","content":"<p>When you are sick and tired of restarting your node app in the terminal\n  (CTRL+C) on every code change you make then you can automate this process.\n  Actually it?s really simple. Install Nodemon via the package manager.</p>\n<p>$ sudo npm install nodemon -p</p>\n<p>When you want to check if it correctly installed and on which version you\n  are running Nodemon:</p>\n<p>$ nodemon -v 0.6.14</p>\n<p>Is everything correctly set? You can start Nodemon, by typing the following\n  command in the root of your current node project. For example:</p>\n<p>$ nodemon app.js 9 Apr 20:15:23 - [nodemon] watching:\n  /Users/lee/Projects/nodejs/www 9 Apr 20:15:23 - [nodemon] starting ‘node\n  app.js’</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>When you are sick and tired of restarting your node app in the terminal\n  (CTRL+C) on every code change you make then you can automate this process.\n  Actually it?s really simple. Install Nodemon via the package manager.</p>\n<p>$ sudo npm install nodemon -p</p>\n<p>When you want to check if it correctly installed and on which version you\n  are running Nodemon:</p>\n<p>$ nodemon -v 0.6.14</p>\n<p>Is everything correctly set? You can start Nodemon, by typing the following\n  command in the root of your current node project. For example:</p>\n<p>$ nodemon app.js 9 Apr 20:15:23 - [nodemon] watching:\n  /Users/lee/Projects/nodejs/www 9 Apr 20:15:23 - [nodemon] starting ‘node\n  app.js’</p>\n"},{"title":"Any tips for building huge applications with 100s of views?","url":"1628.html","id":"1628","date":"2015-09-28T09:29:39.000Z","_content":"\nThe first post, is something I wrote, which explains on how to dynamic load models from the server side. This approach could work for many things, like validations, forms etc.. * \\[https://www.leeboonstra.com/create-dynamic-sencha-models-from-your-server-side\\](https://www.leeboonstra.com/create-dynamic-sencha-models-from-your-server-side) The next post is written by one of my co workers, he explains on how to lazy load scripts: * \\[http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/\\](http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/) Another tip, is to make sure you don't use \"over nesting\". Over nesting means, that you are nesting to many components in components. For example an \\`Ext.form.Panel\\` which nest an additional \\`Ext.panel.Panel\\` for displaying a set of buttons, could be an overnest. Because a form panel already extend from \\`Ext.panel.Panel\\`. There is a great tool, which can help you with inspecting Sencha performance. The tool is called Sencha Inspector, contact Sencha Sales in case of interest.","source":"_drafts/how-tos/any-tips-for-building-huge-applications-with-100s-of-views.md","raw":"---\ntitle: Any tips for building huge applications with 100s of views?\ntags:\n  - large applications\n  - performance\n  - tips\nurl: 1628.html\nid: 1628\ncategories:\n  - Ext JS 5 &amp; 6\n  - Questions\ndate: 2015-09-28 11:29:39\n---\n\nThe first post, is something I wrote, which explains on how to dynamic load models from the server side. This approach could work for many things, like validations, forms etc.. * \\[https://www.leeboonstra.com/create-dynamic-sencha-models-from-your-server-side\\](https://www.leeboonstra.com/create-dynamic-sencha-models-from-your-server-side) The next post is written by one of my co workers, he explains on how to lazy load scripts: * \\[http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/\\](http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/) Another tip, is to make sure you don't use \"over nesting\". Over nesting means, that you are nesting to many components in components. For example an \\`Ext.form.Panel\\` which nest an additional \\`Ext.panel.Panel\\` for displaying a set of buttons, could be an overnest. Because a form panel already extend from \\`Ext.panel.Panel\\`. There is a great tool, which can help you with inspecting Sencha performance. The tool is called Sencha Inspector, contact Sencha Sales in case of interest.","slug":"how-tos/any-tips-for-building-huge-applications-with-100s-of-views","published":0,"updated":"2018-11-25T12:38:45.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncsd00c6kif5hckcx195","content":"<p>The first post, is something I wrote, which explains on how to dynamic load\n  models from the server side. This approach could work for many things, like\n  validations, forms etc.. <em>[<a href=\"https://www.leeboonstra.com/create-dynamic-sencha-models-from-your-server-side\\](https://www.leeboonstra.com/create-dynamic-sencha-models-from-your-server-side)\" target=\"_blank\" rel=\"noopener\">https://www.leeboonstra.com/create-dynamic-sencha-models-from-your-server-side\\](https://www.leeboonstra.com/create-dynamic-sencha-models-from-your-server-side)</a>\n    The next post is written by one of my co workers, he explains on how to\n    lazy load scripts: </em>[<a href=\"http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/\\](http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/)\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/\\](http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/)</a>\n  Another tip, is to make sure you don’t use “over nesting”. Over nesting\n  means, that you are nesting to many components in components. For example an\n  `Ext.form.Panel` which nest an additional `Ext.panel.Panel` for displaying a\n  set of buttons, could be an overnest. Because a form panel already extend\n  from `Ext.panel.Panel`. There is a great tool, which can help you with\n  inspecting Sencha performance. The tool is called Sencha Inspector, contact\n  Sencha Sales in case of interest.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>The first post, is something I wrote, which explains on how to dynamic load\n  models from the server side. This approach could work for many things, like\n  validations, forms etc.. <em>[<a href=\"https://www.leeboonstra.com/create-dynamic-sencha-models-from-your-server-side\\](https://www.leeboonstra.com/create-dynamic-sencha-models-from-your-server-side)\" target=\"_blank\" rel=\"noopener\">https://www.leeboonstra.com/create-dynamic-sencha-models-from-your-server-side\\](https://www.leeboonstra.com/create-dynamic-sencha-models-from-your-server-side)</a>\n    The next post is written by one of my co workers, he explains on how to\n    lazy load scripts: </em>[<a href=\"http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/\\](http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/)\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/\\](http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/)</a>\n  Another tip, is to make sure you don’t use “over nesting”. Over nesting\n  means, that you are nesting to many components in components. For example an\n  `Ext.form.Panel` which nest an additional `Ext.panel.Panel` for displaying a\n  set of buttons, could be an overnest. Because a form panel already extend\n  from `Ext.panel.Panel`. There is a great tool, which can help you with\n  inspecting Sencha performance. The tool is called Sencha Inspector, contact\n  Sencha Sales in case of interest.</p>\n"},{"title":"Can I use the Ext JS GPL?","url":"1615.html","id":"1615","date":"2015-09-28T09:11:59.000Z","_content":"\n[Ext JS GPL](https://www.sencha.com/legal/GPL/) GPL is opensource. You will have to share all your source code public and with Sencha.\n\n*   You can't use GPL for commercial software.\n*   You can't build your project with GPL and later change the license, the project needs to be created with the correct license from the start.\n*   Sencha Architect won't work with GPL\n\nSee: [https://www.sencha.com/legal/open-source-faq/](https://www.sencha.com/legal/open-source-faq/) Also, according to Apple AppStore rules, you are not allowed to add GPL projects to their stores. See: [http://www.zdnet.com/article/no-gpl-apps-for-apples-app-store/](http://www.zdnet.com/article/no-gpl-apps-for-apples-app-store/)\\]\\]>","source":"_drafts/how-tos/can-i-use-the-ext-js-gpl.md","raw":"---\ntitle: Can I use the Ext JS GPL?\ntags:\n  - Ext JS\n  - GPL\n  - opensource\nurl: 1615.html\nid: 1615\ncategories:\n  - Ext JS 5 &amp; 6\n  - Questions\ndate: 2015-09-28 11:11:59\n---\n\n[Ext JS GPL](https://www.sencha.com/legal/GPL/) GPL is opensource. You will have to share all your source code public and with Sencha.\n\n*   You can't use GPL for commercial software.\n*   You can't build your project with GPL and later change the license, the project needs to be created with the correct license from the start.\n*   Sencha Architect won't work with GPL\n\nSee: [https://www.sencha.com/legal/open-source-faq/](https://www.sencha.com/legal/open-source-faq/) Also, according to Apple AppStore rules, you are not allowed to add GPL projects to their stores. See: [http://www.zdnet.com/article/no-gpl-apps-for-apples-app-store/](http://www.zdnet.com/article/no-gpl-apps-for-apples-app-store/)\\]\\]>","slug":"how-tos/can-i-use-the-ext-js-gpl","published":0,"updated":"2018-11-25T13:01:18.910Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncsf00cakif58cqa0txn","content":"<p><a href=\"https://www.sencha.com/legal/GPL/\" target=\"_blank\" rel=\"noopener\">Ext JS GPL</a> GPL is\n  opensource. You will have to share all your source code public and with\n  Sencha.</p>\n<ul>\n  <li>You can’t use GPL for commercial software.</li>\n  <li>You can’t build your project with GPL and later change the license, the\n    project needs to be created with the correct license from the start.</li>\n  <li>Sencha Architect won’t work with GPL</li>\n</ul>\n<p>See: <a href=\"https://www.sencha.com/legal/open-source-faq/\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/legal/open-source-faq/</a>\n  Also, according to Apple AppStore rules, you are not allowed to add GPL\n  projects to their stores. See: <a href=\"http://www.zdnet.com/article/no-gpl-apps-for-apples-app-store/\" target=\"_blank\" rel=\"noopener\">http://www.zdnet.com/article/no-gpl-apps-for-apples-app-store/</a>]]&gt;</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p><a href=\"https://www.sencha.com/legal/GPL/\" target=\"_blank\" rel=\"noopener\">Ext JS GPL</a> GPL is\n  opensource. You will have to share all your source code public and with\n  Sencha.</p>\n<ul>\n  <li>You can’t use GPL for commercial software.</li>\n  <li>You can’t build your project with GPL and later change the license, the\n    project needs to be created with the correct license from the start.</li>\n  <li>Sencha Architect won’t work with GPL</li>\n</ul>\n<p>See: <a href=\"https://www.sencha.com/legal/open-source-faq/\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/legal/open-source-faq/</a>\n  Also, according to Apple AppStore rules, you are not allowed to add GPL\n  projects to their stores. See: <a href=\"http://www.zdnet.com/article/no-gpl-apps-for-apples-app-store/\" target=\"_blank\" rel=\"noopener\">http://www.zdnet.com/article/no-gpl-apps-for-apples-app-store/</a>]]&gt;</p>\n"},{"title":"Cmd asks to upgrade my app, why?","url":"1632.html","id":"1632","date":"2015-09-28T09:36:39.000Z","_content":"\nThe \\`sencha app upgrade\\` command, is required to upgrade the current version of your app, to match with the current version of Sencha Cmd you are using. Often, when you generate an application with Cmd, and later upgrade the version of the command-line tool, the meta-data of your app is outdated. Hence why you need to upgrade the app.","source":"_drafts/how-tos/cmd-asks-to-upgrade-my-app-why.md","raw":"---\ntitle: 'Cmd asks to upgrade my app, why?'\ntags:\n  - Sencha CMD\n  - upgrade\n  - version mismatch\nurl: 1632.html\nid: 1632\ncategories:\n  - Questions\ndate: 2015-09-28 11:36:39\n---\n\nThe \\`sencha app upgrade\\` command, is required to upgrade the current version of your app, to match with the current version of Sencha Cmd you are using. Often, when you generate an application with Cmd, and later upgrade the version of the command-line tool, the meta-data of your app is outdated. Hence why you need to upgrade the app.","slug":"how-tos/cmd-asks-to-upgrade-my-app-why","published":0,"updated":"2018-11-25T12:38:59.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncsg00cckif5wii876v6","content":"<p>The `sencha app upgrade` command, is required to upgrade the current version\n  of your app, to match with the current version of Sencha Cmd you are using.\n  Often, when you generate an application with Cmd, and later upgrade the\n  version of the command-line tool, the meta-data of your app is outdated.\n  Hence why you need to upgrade the app.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>The `sencha app upgrade` command, is required to upgrade the current version\n  of your app, to match with the current version of Sencha Cmd you are using.\n  Often, when you generate an application with Cmd, and later upgrade the\n  version of the command-line tool, the meta-data of your app is outdated.\n  Hence why you need to upgrade the app.</p>\n"},{"title":"Chrome 43 breaks Sencha Touch / modern toolkit and how to fix it.","url":"606.html","id":"606","date":"2015-05-26T07:31:14.000Z","_content":"\nLately, I received a couple of questions about the latest Chrome 43.x version, which breaks Sencha Touch 2.4 apps (or Ext JS 6 modern toolkit apps) due the deprecation of the `overflowchanged` event. It actually breaks the following classes: `Ext.util.PaintMonitor` and `Ext.util.SizeMonitor`. You will notice this bug when trying to scroll in a list component. You will see a small square in the top right corner, instead of the familiar scroll bar, and it's impossible to scroll. As the day of writing this blogpost, Sencha is currently fixing this bug in Sencha Touch and in Ext JS 6 modern toolkit. When you are a Sencha support subscriber, you will have access to our support portal, and probably by the time of reading this, you will be able to download the latest nightly build, which includes this fix. If you can't wait, and temporary want to fix this issue, (for example because it's blocking you from development) you can use an override. You can use the following override classes. ([PaintMonitor](https://github.com/savelee/senchatouch-chrome43/blob/master/app/util/PaintMonitor.js) and [SizeMonitor](https://github.com/savelee/senchatouch-chrome43/blob/master/app/util/SizeMonitor.js)). Just require these in your _app.js_. I am hosting an example app on Github, feel free to clone it: [https://github.com/savelee/senchatouch-chrome43](https://github.com/savelee/senchatouch-chrome43). Thanks [Trevor Brindle](http://trevorbrindle.com/chrome-43-broke-sencha/), for sharing parts of your solution. There is another small problem with the load spinner in Sencha Touch applications; `Ext.LoadMask` is no longer animated. This is a simple fix in the Sass (_touch/resources/themes/stylesheets/sencha-touch/base/src/_Class.scss_) the prefixes for keyframe and transform aren't used anymore. In case you want to quickfix this in your app, you can add the following styles to your application stylesheet (and make a build): [app.scss](https://github.com/savelee/senchatouch-chrome43/blob/master/resources/sass/app.scss) Again, this probably will be fixed in the latest nightly build. So if possible, switch to that, instead of manually patching stuff. For further information about these Chrome changes, take a look into the links below. - [http://blog.chromium.org/2015/04/chrome-43-beta-web-midi-and-upgrading.html](http://blog.chromium.org/2015/04/chrome-43-beta-web-midi-and-upgrading.html)  \n\\- [http://updates.html5rocks.com/2015/04/DOM-attributes-now-on-the-prototype](http://updates.html5rocks.com/2015/04/DOM-attributes-now-on-the-prototype)","source":"_drafts/how-tos/chrome-43-breaks-sencha-touch-modern-toolkit-and-how-to-fix-it.md","raw":"---\ntitle: Chrome 43 breaks Sencha Touch / modern toolkit and how to fix it.\ntags:\n  - chrome 43\n  - load spinner\n  - overflowchangeevent\n  - scroll problem\nurl: 606.html\nid: 606\ncategories:\n  - Ext JS 6\n  - Sencha Touch\ndate: 2015-05-26 09:31:14\n---\n\nLately, I received a couple of questions about the latest Chrome 43.x version, which breaks Sencha Touch 2.4 apps (or Ext JS 6 modern toolkit apps) due the deprecation of the `overflowchanged` event. It actually breaks the following classes: `Ext.util.PaintMonitor` and `Ext.util.SizeMonitor`. You will notice this bug when trying to scroll in a list component. You will see a small square in the top right corner, instead of the familiar scroll bar, and it's impossible to scroll. As the day of writing this blogpost, Sencha is currently fixing this bug in Sencha Touch and in Ext JS 6 modern toolkit. When you are a Sencha support subscriber, you will have access to our support portal, and probably by the time of reading this, you will be able to download the latest nightly build, which includes this fix. If you can't wait, and temporary want to fix this issue, (for example because it's blocking you from development) you can use an override. You can use the following override classes. ([PaintMonitor](https://github.com/savelee/senchatouch-chrome43/blob/master/app/util/PaintMonitor.js) and [SizeMonitor](https://github.com/savelee/senchatouch-chrome43/blob/master/app/util/SizeMonitor.js)). Just require these in your _app.js_. I am hosting an example app on Github, feel free to clone it: [https://github.com/savelee/senchatouch-chrome43](https://github.com/savelee/senchatouch-chrome43). Thanks [Trevor Brindle](http://trevorbrindle.com/chrome-43-broke-sencha/), for sharing parts of your solution. There is another small problem with the load spinner in Sencha Touch applications; `Ext.LoadMask` is no longer animated. This is a simple fix in the Sass (_touch/resources/themes/stylesheets/sencha-touch/base/src/_Class.scss_) the prefixes for keyframe and transform aren't used anymore. In case you want to quickfix this in your app, you can add the following styles to your application stylesheet (and make a build): [app.scss](https://github.com/savelee/senchatouch-chrome43/blob/master/resources/sass/app.scss) Again, this probably will be fixed in the latest nightly build. So if possible, switch to that, instead of manually patching stuff. For further information about these Chrome changes, take a look into the links below. - [http://blog.chromium.org/2015/04/chrome-43-beta-web-midi-and-upgrading.html](http://blog.chromium.org/2015/04/chrome-43-beta-web-midi-and-upgrading.html)  \n\\- [http://updates.html5rocks.com/2015/04/DOM-attributes-now-on-the-prototype](http://updates.html5rocks.com/2015/04/DOM-attributes-now-on-the-prototype)","slug":"how-tos/chrome-43-breaks-sencha-touch-modern-toolkit-and-how-to-fix-it","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncsi00cgkif50lq3swh5","content":"<p>Lately, I received a couple of questions about the latest Chrome 43.x\n  version, which breaks Sencha Touch 2.4 apps (or Ext JS 6 modern toolkit apps)\n  due the deprecation of the <code>overflowchanged</code> event. It actually\n  breaks the following classes: <code>Ext.util.PaintMonitor</code> and <code>Ext.util.SizeMonitor</code>.\n  You will notice this bug when trying to scroll in a list component. You will\n  see a small square in the top right corner, instead of the familiar scroll\n  bar, and it’s impossible to scroll. As the day of writing this blogpost,\n  Sencha is currently fixing this bug in Sencha Touch and in Ext JS 6 modern\n  toolkit. When you are a Sencha support subscriber, you will have access to\n  our support portal, and probably by the time of reading this, you will be\n  able to download the latest nightly build, which includes this fix. If you\n  can’t wait, and temporary want to fix this issue, (for example because it’s\n  blocking you from development) you can use an override. You can use the\n  following override classes. (<a href=\"https://github.com/savelee/senchatouch-chrome43/blob/master/app/util/PaintMonitor.js\" target=\"_blank\" rel=\"noopener\">PaintMonitor</a>\n  and <a href=\"https://github.com/savelee/senchatouch-chrome43/blob/master/app/util/SizeMonitor.js\" target=\"_blank\" rel=\"noopener\">SizeMonitor</a>).\n  Just require these in your <em>app.js</em>. I am hosting an example app on\n  Github, feel free to clone it: <a href=\"https://github.com/savelee/senchatouch-chrome43\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/senchatouch-chrome43</a>.\n  Thanks <a href=\"http://trevorbrindle.com/chrome-43-broke-sencha/\" target=\"_blank\" rel=\"noopener\">Trevor\n    Brindle</a>, for sharing parts of your solution. There is another small\n  problem with the load spinner in Sencha Touch applications; <code>Ext.LoadMask</code>\n  is no longer animated. This is a simple fix in the Sass\n  (_touch/resources/themes/stylesheets/sencha-touch/base/src/<em>Class.scss</em>)\n  the prefixes for keyframe and transform aren’t used anymore. In case you want\n  to quickfix this in your app, you can add the following styles to your\n  application stylesheet (and make a build): <a href=\"https://github.com/savelee/senchatouch-chrome43/blob/master/resources/sass/app.scss\" target=\"_blank\" rel=\"noopener\">app.scss</a>\n  Again, this probably will be fixed in the latest nightly build. So if\n  possible, switch to that, instead of manually patching stuff. For further\n  information about these Chrome changes, take a look into the links below. -\n  <a href=\"http://blog.chromium.org/2015/04/chrome-43-beta-web-midi-and-upgrading.html\" target=\"_blank\" rel=\"noopener\">http://blog.chromium.org/2015/04/chrome-43-beta-web-midi-and-upgrading.html</a><br>-\n  <a href=\"http://updates.html5rocks.com/2015/04/DOM-attributes-now-on-the-prototype\" target=\"_blank\" rel=\"noopener\">http://updates.html5rocks.com/2015/04/DOM-attributes-now-on-the-prototype</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Lately, I received a couple of questions about the latest Chrome 43.x\n  version, which breaks Sencha Touch 2.4 apps (or Ext JS 6 modern toolkit apps)\n  due the deprecation of the <code>overflowchanged</code> event. It actually\n  breaks the following classes: <code>Ext.util.PaintMonitor</code> and <code>Ext.util.SizeMonitor</code>.\n  You will notice this bug when trying to scroll in a list component. You will\n  see a small square in the top right corner, instead of the familiar scroll\n  bar, and it’s impossible to scroll. As the day of writing this blogpost,\n  Sencha is currently fixing this bug in Sencha Touch and in Ext JS 6 modern\n  toolkit. When you are a Sencha support subscriber, you will have access to\n  our support portal, and probably by the time of reading this, you will be\n  able to download the latest nightly build, which includes this fix. If you\n  can’t wait, and temporary want to fix this issue, (for example because it’s\n  blocking you from development) you can use an override. You can use the\n  following override classes. (<a href=\"https://github.com/savelee/senchatouch-chrome43/blob/master/app/util/PaintMonitor.js\" target=\"_blank\" rel=\"noopener\">PaintMonitor</a>\n  and <a href=\"https://github.com/savelee/senchatouch-chrome43/blob/master/app/util/SizeMonitor.js\" target=\"_blank\" rel=\"noopener\">SizeMonitor</a>).\n  Just require these in your <em>app.js</em>. I am hosting an example app on\n  Github, feel free to clone it: <a href=\"https://github.com/savelee/senchatouch-chrome43\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/senchatouch-chrome43</a>.\n  Thanks <a href=\"http://trevorbrindle.com/chrome-43-broke-sencha/\" target=\"_blank\" rel=\"noopener\">Trevor\n    Brindle</a>, for sharing parts of your solution. There is another small\n  problem with the load spinner in Sencha Touch applications; <code>Ext.LoadMask</code>\n  is no longer animated. This is a simple fix in the Sass\n  (_touch/resources/themes/stylesheets/sencha-touch/base/src/<em>Class.scss</em>)\n  the prefixes for keyframe and transform aren’t used anymore. In case you want\n  to quickfix this in your app, you can add the following styles to your\n  application stylesheet (and make a build): <a href=\"https://github.com/savelee/senchatouch-chrome43/blob/master/resources/sass/app.scss\" target=\"_blank\" rel=\"noopener\">app.scss</a>\n  Again, this probably will be fixed in the latest nightly build. So if\n  possible, switch to that, instead of manually patching stuff. For further\n  information about these Chrome changes, take a look into the links below. -\n  <a href=\"http://blog.chromium.org/2015/04/chrome-43-beta-web-midi-and-upgrading.html\" target=\"_blank\" rel=\"noopener\">http://blog.chromium.org/2015/04/chrome-43-beta-web-midi-and-upgrading.html</a><br>-\n  <a href=\"http://updates.html5rocks.com/2015/04/DOM-attributes-now-on-the-prototype\" target=\"_blank\" rel=\"noopener\">http://updates.html5rocks.com/2015/04/DOM-attributes-now-on-the-prototype</a></p>\n"},{"title":"Can I combine Sencha Touch or Ext JS with Angular JS?","url":"1636.html","id":"1636","date":"2000-09-28T09:38:41.000Z","_content":"\nThe Sencha frameworks are web technologies, in theory it would be possible to wire up any external library you like. That said, what are you trying to do?\n\nExt JS is very complete (all in one) frameworks. It can do everything that Angular JS / Angular 2 can do and much more. For example; Angular is great for defining an architecture; in Ext JS we provide MVC and or MVVM with a very great data package (for retrieving external data), and our own Sencha class system, for extending and reusing components.\n\nWhen using Angular, you probably will need to include jQuery for DOM modification, jQuery plugins, an UI & theming solution (like Twitter bootstrap) for components and themes.  \nYou will need to maintain all these packages, which all work for different browser versions, and they all needs to be configured in a different way.\n\nAn advantage of Sencha, is that our products are: \"one-stop-shops\". We provide all of the above in one framework (SDK), and we don't work with HTML but with components. That?s great for maintainability and re-usability, because everything works consistent. It's a commercial product, you won't need to worry that your Sencha app will break in the next 5 or 10 years.\n\nBack to my first question; it might be possible that what you are trying to achieve doesn?t need Angular JS at all.\n\nEdit: Do you mean the other way around? Can you integrate Ext JS within Angular 2? Sencha is currently working on an Angular 2 bridge. So you can embed your Ext JS 6 advanced components within Angular.","source":"_drafts/how-tos/can-i-combine-sencha-touch-or-ext-js-with-angular-js.md","raw":"---\ntitle: Can I combine Sencha Touch or Ext JS with Angular JS?\ntags:\n  - Angular 2\n  - Angular.js\n  - ext js 6\n  - Sencha\nurl: 1636.html\nid: 1636\ncategories:\n  - Ext JS 5 &amp; 6\n  - Ext JS 6\n  - Questions\ndate: 2000-09-28 11:38:41\n---\n\nThe Sencha frameworks are web technologies, in theory it would be possible to wire up any external library you like. That said, what are you trying to do?\n\nExt JS is very complete (all in one) frameworks. It can do everything that Angular JS / Angular 2 can do and much more. For example; Angular is great for defining an architecture; in Ext JS we provide MVC and or MVVM with a very great data package (for retrieving external data), and our own Sencha class system, for extending and reusing components.\n\nWhen using Angular, you probably will need to include jQuery for DOM modification, jQuery plugins, an UI & theming solution (like Twitter bootstrap) for components and themes.  \nYou will need to maintain all these packages, which all work for different browser versions, and they all needs to be configured in a different way.\n\nAn advantage of Sencha, is that our products are: \"one-stop-shops\". We provide all of the above in one framework (SDK), and we don't work with HTML but with components. That?s great for maintainability and re-usability, because everything works consistent. It's a commercial product, you won't need to worry that your Sencha app will break in the next 5 or 10 years.\n\nBack to my first question; it might be possible that what you are trying to achieve doesn?t need Angular JS at all.\n\nEdit: Do you mean the other way around? Can you integrate Ext JS within Angular 2? Sencha is currently working on an Angular 2 bridge. So you can embed your Ext JS 6 advanced components within Angular.","slug":"how-tos/can-i-combine-sencha-touch-or-ext-js-with-angular-js","published":0,"updated":"2018-11-25T12:38:21.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncsk00cikif5pg7p7ki3","content":"<p>The Sencha frameworks are web technologies, in theory it would be possible\n  to wire up any external library you like. That said, what are you trying to\n  do?</p>\n<p>Ext JS is very complete (all in one) frameworks. It can do everything that\n  Angular JS / Angular 2 can do and much more. For example; Angular is great\n  for defining an architecture; in Ext JS we provide MVC and or MVVM with a\n  very great data package (for retrieving external data), and our own Sencha\n  class system, for extending and reusing components.</p>\n<p>When using Angular, you probably will need to include jQuery for DOM\n  modification, jQuery plugins, an UI &amp; theming solution (like Twitter\n  bootstrap) for components and themes.<br>You will need to maintain all these\n  packages, which all work for different browser versions, and they all needs\n  to be configured in a different way.</p>\n<p>An advantage of Sencha, is that our products are: “one-stop-shops”. We\n  provide all of the above in one framework (SDK), and we don’t work with HTML\n  but with components. That?s great for maintainability and re-usability,\n  because everything works consistent. It’s a commercial product, you won’t\n  need to worry that your Sencha app will break in the next 5 or 10 years.</p>\n<p>Back to my first question; it might be possible that what you are trying to\n  achieve doesn?t need Angular JS at all.</p>\n<p>Edit: Do you mean the other way around? Can you integrate Ext JS within\n  Angular 2? Sencha is currently working on an Angular 2 bridge. So you can\n  embed your Ext JS 6 advanced components within Angular.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>The Sencha frameworks are web technologies, in theory it would be possible\n  to wire up any external library you like. That said, what are you trying to\n  do?</p>\n<p>Ext JS is very complete (all in one) frameworks. It can do everything that\n  Angular JS / Angular 2 can do and much more. For example; Angular is great\n  for defining an architecture; in Ext JS we provide MVC and or MVVM with a\n  very great data package (for retrieving external data), and our own Sencha\n  class system, for extending and reusing components.</p>\n<p>When using Angular, you probably will need to include jQuery for DOM\n  modification, jQuery plugins, an UI &amp; theming solution (like Twitter\n  bootstrap) for components and themes.<br>You will need to maintain all these\n  packages, which all work for different browser versions, and they all needs\n  to be configured in a different way.</p>\n<p>An advantage of Sencha, is that our products are: “one-stop-shops”. We\n  provide all of the above in one framework (SDK), and we don’t work with HTML\n  but with components. That?s great for maintainability and re-usability,\n  because everything works consistent. It’s a commercial product, you won’t\n  need to worry that your Sencha app will break in the next 5 or 10 years.</p>\n<p>Back to my first question; it might be possible that what you are trying to\n  achieve doesn?t need Angular JS at all.</p>\n<p>Edit: Do you mean the other way around? Can you integrate Ext JS within\n  Angular 2? Sencha is currently working on an Angular 2 bridge. So you can\n  embed your Ext JS 6 advanced components within Angular.</p>\n"},{"title":"Chrome 43 breaks Ext.menu.Menu submenus in Ext JS 4 and how to fix it.","url":"619.html","id":"619","date":"2015-05-28T19:20:50.000Z","_content":"\nA few days ago, I mentioned Chrome 43 which breaks a couple of things in Sencha Touch 2.4. Unfortunately also Ext JS 4 developers, experienced some problems. Google Chrome version 43 breaks the `Ext.menu.Menu` submenus, when hovering over the items. Currently our engineers are working on a solution. As soon as it's fixed, you will be able to download a nightly build, which you can download from our support portal. For now, please use this override as a fix:\n\nExt.define('MyApp.utils.MenuOverride', {\n    override: 'Ext.menu.Menu',\n    onMouseLeave: function(e) {\n        var me = this;\n        // BEGIN FIX\n        var visibleSubmenu = false;\n        me.items.each(function(item) {\n            if (item.menu && item.menu.isVisible()) {\n                visibleSubmenu = true;\n            }\n        })\n        if (visibleSubmenu) {\n            return;\n        }\n        // END FIX\n        me.deactivateActiveItem();\n        if (me.disabled) {\n            return;\n        }\n        me.fireEvent('mouseleave', me, e);\n    }\n})\n\nPut this file in the **app/utils/** folder. (and give it the name: \"**MenuOverride.js**\"). It should fix the problem..","source":"_drafts/how-tos/chrome-43-breaks-ext-menu-menu-submenus-ext-js-4.md","raw":"---\ntitle: Chrome 43 breaks Ext.menu.Menu submenus in Ext JS 4 and how to fix it.\ntags:\n  - chrome 43\nurl: 619.html\nid: 619\ncategories:\n  - Ext JS\ndate: 2015-05-28 21:20:50\n---\n\nA few days ago, I mentioned Chrome 43 which breaks a couple of things in Sencha Touch 2.4. Unfortunately also Ext JS 4 developers, experienced some problems. Google Chrome version 43 breaks the `Ext.menu.Menu` submenus, when hovering over the items. Currently our engineers are working on a solution. As soon as it's fixed, you will be able to download a nightly build, which you can download from our support portal. For now, please use this override as a fix:\n\nExt.define('MyApp.utils.MenuOverride', {\n    override: 'Ext.menu.Menu',\n    onMouseLeave: function(e) {\n        var me = this;\n        // BEGIN FIX\n        var visibleSubmenu = false;\n        me.items.each(function(item) {\n            if (item.menu && item.menu.isVisible()) {\n                visibleSubmenu = true;\n            }\n        })\n        if (visibleSubmenu) {\n            return;\n        }\n        // END FIX\n        me.deactivateActiveItem();\n        if (me.disabled) {\n            return;\n        }\n        me.fireEvent('mouseleave', me, e);\n    }\n})\n\nPut this file in the **app/utils/** folder. (and give it the name: \"**MenuOverride.js**\"). It should fix the problem..","slug":"how-tos/chrome-43-breaks-ext-menu-menu-submenus-ext-js-4","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncsl00cmkif5wnn1jr12","content":"<p>A few days ago, I mentioned Chrome 43 which breaks a couple of things in\n  Sencha Touch 2.4. Unfortunately also Ext JS 4 developers, experienced some\n  problems. Google Chrome version 43 breaks the <code>Ext.menu.Menu</code>\n  submenus, when hovering over the items. Currently our engineers are working\n  on a solution. As soon as it’s fixed, you will be able to download a nightly\n  build, which you can download from our support portal. For now, please use\n  this override as a fix:</p>\n<p>Ext.define(‘MyApp.utils.MenuOverride’, { override: ‘Ext.menu.Menu’,\n  onMouseLeave: function(e) { var me = this; // BEGIN FIX var visibleSubmenu =\n  false; me.items.each(function(item) { if (item.menu &amp;&amp;\n  item.menu.isVisible()) { visibleSubmenu = true; } }) if (visibleSubmenu) {\n  return; } // END FIX me.deactivateActiveItem(); if (me.disabled) { return; }\n  me.fireEvent(‘mouseleave’, me, e); } })</p>\n<p>Put this file in the <strong>app/utils/</strong> folder. (and give it the\n  name: “<strong>MenuOverride.js</strong>“). It should fix the problem..</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>A few days ago, I mentioned Chrome 43 which breaks a couple of things in\n  Sencha Touch 2.4. Unfortunately also Ext JS 4 developers, experienced some\n  problems. Google Chrome version 43 breaks the <code>Ext.menu.Menu</code>\n  submenus, when hovering over the items. Currently our engineers are working\n  on a solution. As soon as it’s fixed, you will be able to download a nightly\n  build, which you can download from our support portal. For now, please use\n  this override as a fix:</p>\n<p>Ext.define(‘MyApp.utils.MenuOverride’, { override: ‘Ext.menu.Menu’,\n  onMouseLeave: function(e) { var me = this; // BEGIN FIX var visibleSubmenu =\n  false; me.items.each(function(item) { if (item.menu &amp;&amp;\n  item.menu.isVisible()) { visibleSubmenu = true; } }) if (visibleSubmenu) {\n  return; } // END FIX me.deactivateActiveItem(); if (me.disabled) { return; }\n  me.fireEvent(‘mouseleave’, me, e); } })</p>\n<p>Put this file in the <strong>app/utils/</strong> folder. (and give it the\n  name: “<strong>MenuOverride.js</strong>“). It should fix the problem..</p>\n"},{"title":"Do I need the deltas folder in my hybrid Sencha PhoneGap/Cordova app?","url":"1643.html","id":"1643","date":"2015-09-28T09:46:29.000Z","_content":"\nWhen you create an Ext JS (modern) or Sencha Touch production build, it will make a build for the web. Which is intended for users to bookmark their applications to the homescreen. The microloader contains this great feature; when there is an application update, the user doesn't need to download the full application again, but just the differences. (the delta's). - Everything else will be cached in the localstorage via the microloader, so the app works offline. This feature, obviously makes no sense, when you want to package your applications as native with PhoneGap/Cordova. Because new application updates will be served via the AppStore. (which require you to re-package the application with PhoneGap/Cordova) The delta's folder is the magic of all the application differences. - In a native package, you won't need this. The native package also won't need app.cache btw. (because all images will be part of the package). You can also open app.js, and make sure the `onUpdate` method will be removed. Because you don't want to refresh the application, and there won't be any delta updates in the package. Just make sure, you don't serve any deltas in the native package, and that you haven't done this before. ..as soon as deltas are missing, it could break your app.","source":"_drafts/how-tos/do-i-need-the-deltas-folder-in-my-hybrid-sencha-phonegapcordova-app.md","raw":"---\ntitle: Do I need the deltas folder in my hybrid Sencha PhoneGap/Cordova app?\ntags:\n  - cordova\n  - deltas\n  - phonegap\nurl: 1643.html\nid: 1643\ncategories:\n  - Cordova\n  - Ext JS 5 &amp; 6\n  - Questions\ndate: 2015-09-28 11:46:29\n---\n\nWhen you create an Ext JS (modern) or Sencha Touch production build, it will make a build for the web. Which is intended for users to bookmark their applications to the homescreen. The microloader contains this great feature; when there is an application update, the user doesn't need to download the full application again, but just the differences. (the delta's). - Everything else will be cached in the localstorage via the microloader, so the app works offline. This feature, obviously makes no sense, when you want to package your applications as native with PhoneGap/Cordova. Because new application updates will be served via the AppStore. (which require you to re-package the application with PhoneGap/Cordova) The delta's folder is the magic of all the application differences. - In a native package, you won't need this. The native package also won't need app.cache btw. (because all images will be part of the package). You can also open app.js, and make sure the `onUpdate` method will be removed. Because you don't want to refresh the application, and there won't be any delta updates in the package. Just make sure, you don't serve any deltas in the native package, and that you haven't done this before. ..as soon as deltas are missing, it could break your app.","slug":"how-tos/do-i-need-the-deltas-folder-in-my-hybrid-sencha-phonegapcordova-app","published":0,"updated":"2018-11-25T12:39:44.610Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncsm00cqkif5428021cx","content":"<p>When you create an Ext JS (modern) or Sencha Touch production build, it will\n  make a build for the web. Which is intended for users to bookmark their\n  applications to the homescreen. The microloader contains this great feature;\n  when there is an application update, the user doesn’t need to download the\n  full application again, but just the differences. (the delta’s). - Everything\n  else will be cached in the localstorage via the microloader, so the app works\n  offline. This feature, obviously makes no sense, when you want to package\n  your applications as native with PhoneGap/Cordova. Because new application\n  updates will be served via the AppStore. (which require you to re-package the\n  application with PhoneGap/Cordova) The delta’s folder is the magic of all the\n  application differences. - In a native package, you won’t need this. The\n  native package also won’t need app.cache btw. (because all images will be\n  part of the package). You can also open app.js, and make sure the <code>onUpdate</code>\n  method will be removed. Because you don’t want to refresh the application,\n  and there won’t be any delta updates in the package. Just make sure, you\n  don’t serve any deltas in the native package, and that you haven’t done this\n  before. ..as soon as deltas are missing, it could break your app.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>When you create an Ext JS (modern) or Sencha Touch production build, it will\n  make a build for the web. Which is intended for users to bookmark their\n  applications to the homescreen. The microloader contains this great feature;\n  when there is an application update, the user doesn’t need to download the\n  full application again, but just the differences. (the delta’s). - Everything\n  else will be cached in the localstorage via the microloader, so the app works\n  offline. This feature, obviously makes no sense, when you want to package\n  your applications as native with PhoneGap/Cordova. Because new application\n  updates will be served via the AppStore. (which require you to re-package the\n  application with PhoneGap/Cordova) The delta’s folder is the magic of all the\n  application differences. - In a native package, you won’t need this. The\n  native package also won’t need app.cache btw. (because all images will be\n  part of the package). You can also open app.js, and make sure the <code>onUpdate</code>\n  method will be removed. Because you don’t want to refresh the application,\n  and there won’t be any delta updates in the package. Just make sure, you\n  don’t serve any deltas in the native package, and that you haven’t done this\n  before. ..as soon as deltas are missing, it could break your app.</p>\n"},{"title":"Do you support integration with external databases?","url":"1630.html","id":"1630","date":"2015-09-28T09:33:57.000Z","_content":"\nIn case you want to retrieve or save data in an external database, best practice is to use some server-side scripting. Within the Sencha frameworks, sending and retrieving data works via a proxy. (\\[http://docs-origin.sencha.com/extjs/5.1/5.1.0-apidocs/#!/api/Ext.data.proxy.Proxy\\](http://docs-origin.sencha.com/extjs/5.1/5.1.0-apidocs/#!/api/Ext.data.proxy.Proxy)). (Ajax or JsonP) This proxy will be hooked to the serverside end point. The Sencha proxy can read (and write) JSON or XML.","source":"_drafts/how-tos/do-you-support-integration-with-external-databases.md","raw":"---\ntitle: Do you support integration with external databases?\ntags:\n  - db\n  - Ext JS\n  - external database\nurl: 1630.html\nid: 1630\ncategories:\n  - Ext JS 5 &amp; 6\n  - Questions\ndate: 2015-09-28 11:33:57\n---\n\nIn case you want to retrieve or save data in an external database, best practice is to use some server-side scripting. Within the Sencha frameworks, sending and retrieving data works via a proxy. (\\[http://docs-origin.sencha.com/extjs/5.1/5.1.0-apidocs/#!/api/Ext.data.proxy.Proxy\\](http://docs-origin.sencha.com/extjs/5.1/5.1.0-apidocs/#!/api/Ext.data.proxy.Proxy)). (Ajax or JsonP) This proxy will be hooked to the serverside end point. The Sencha proxy can read (and write) JSON or XML.","slug":"how-tos/do-you-support-integration-with-external-databases","published":0,"updated":"2018-11-25T12:40:17.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncsn00cskif5fwagwrsq","content":"<p>In case you want to retrieve or save data in an external database, best\n  practice is to use some server-side scripting. Within the Sencha frameworks,\n  sending and retrieving data works via a proxy. ([<a href=\"http://docs-origin.sencha.com/extjs/5.1/5.1.0-apidocs/#!/api/Ext.data.proxy.Proxy\\](http://docs-origin.sencha.com/extjs/5.1/5.1.0-apidocs/#!/api/Ext.data.proxy.Proxy))\" target=\"_blank\" rel=\"noopener\">http://docs-origin.sencha.com/extjs/5.1/5.1.0-apidocs/#!/api/Ext.data.proxy.Proxy\\](http://docs-origin.sencha.com/extjs/5.1/5.1.0-apidocs/#!/api/Ext.data.proxy.Proxy))</a>.\n  (Ajax or JsonP) This proxy will be hooked to the serverside end point. The\n  Sencha proxy can read (and write) JSON or XML.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>In case you want to retrieve or save data in an external database, best\n  practice is to use some server-side scripting. Within the Sencha frameworks,\n  sending and retrieving data works via a proxy. ([<a href=\"http://docs-origin.sencha.com/extjs/5.1/5.1.0-apidocs/#!/api/Ext.data.proxy.Proxy\\](http://docs-origin.sencha.com/extjs/5.1/5.1.0-apidocs/#!/api/Ext.data.proxy.Proxy))\" target=\"_blank\" rel=\"noopener\">http://docs-origin.sencha.com/extjs/5.1/5.1.0-apidocs/#!/api/Ext.data.proxy.Proxy\\](http://docs-origin.sencha.com/extjs/5.1/5.1.0-apidocs/#!/api/Ext.data.proxy.Proxy))</a>.\n  (Ajax or JsonP) This proxy will be hooked to the serverside end point. The\n  Sencha proxy can read (and write) JSON or XML.</p>\n"},{"title":"Does Ext JS 6 include a solution for push notifications?","url":"1668.html","id":"1668","date":"2015-09-28T10:38:03.000Z","_content":"\nWith Sencha Ext JS 6, you can create mobile applications. We will provide all the tools and components you need to design your app, based on HTML5. However, we don't include a solution for Push notifications (to send messages to app users) within our framework because push notifications require access to native device APIs. For a mobile app based on HTML5 you will need to add an extra technology. There are various ways how you can solve this in an HTML5 app: (so what you will need, is an extra technology to wrap your web application in a native shell. You can do this with technologies like PhoneGap or Cordova. It basically wraps a native browser/webview around your app.) - \\[http://phonegap.com/\\](http://phonegap.com/) - \\[https://cordova.apache.org/\\](https://cordova.apache.org/) Once, the code is build with PhoneGap or Cordova, you can use their APIs to talk to native features, such as a camera or push notifications. PhoneGap and Cordova use the same technology. But PhoneGap is commercial, by Adobe. And Cordova is open source and Apache. Therefore, Cordova has probably the best choice of APIs and user plugins that you can use. See here: \\[https://cordova.apache.org/plugins/?q=push\\](https://cordova.apache.org/plugins/?q=push) I haven't worked with push notifications yet myself, but I did work with Cordova and plugins before. I wrote a guide here: \\[http://www.devtricks.eu/make-a-native-build-with-ext-js-5-sencha-cmd-5-and-phonegap-cordova-with-plugins/\\](http://www.devtricks.eu/make-a-native-build-with-ext-js-5-sencha-cmd-5-and-phonegap-cordova-with-plugins/) (it might be a bit outdated since I wrote it a while ago, but it probably will help you to get started...) Apart from the above story, there are also commercial solutions that have push notification back-ends/servers, with easy to implement scripts, to integrate push notifications in your apps. Such as: * \\[https://www.pushwoosh.com/\\](https://www.pushwoosh.com/) * \\[https://pusher.com/\\](https://www.pushwoosh.com/) And last but not least, I know that Google is looking into ways how you can integrate push notifications in web applications. This is all new stuff. It might be only working for Chrome yet. But it will be the future! \\[https://developers.google.com/web/fundamentals/primers/?hl=en\\](https://developers.google.com/web/fundamentals/primers/?hl=en)","source":"_drafts/how-tos/does-ext-js-6-include-a-solution-for-push-notifications.md","raw":"---\ntitle: Does Ext JS 6 include a solution for push notifications?\ntags:\n  - push notifications\nurl: 1668.html\nid: 1668\ncategories:\n  - Ext JS 5 &amp; 6\n  - Questions\ndate: 2015-09-28 12:38:03\n---\n\nWith Sencha Ext JS 6, you can create mobile applications. We will provide all the tools and components you need to design your app, based on HTML5. However, we don't include a solution for Push notifications (to send messages to app users) within our framework because push notifications require access to native device APIs. For a mobile app based on HTML5 you will need to add an extra technology. There are various ways how you can solve this in an HTML5 app: (so what you will need, is an extra technology to wrap your web application in a native shell. You can do this with technologies like PhoneGap or Cordova. It basically wraps a native browser/webview around your app.) - \\[http://phonegap.com/\\](http://phonegap.com/) - \\[https://cordova.apache.org/\\](https://cordova.apache.org/) Once, the code is build with PhoneGap or Cordova, you can use their APIs to talk to native features, such as a camera or push notifications. PhoneGap and Cordova use the same technology. But PhoneGap is commercial, by Adobe. And Cordova is open source and Apache. Therefore, Cordova has probably the best choice of APIs and user plugins that you can use. See here: \\[https://cordova.apache.org/plugins/?q=push\\](https://cordova.apache.org/plugins/?q=push) I haven't worked with push notifications yet myself, but I did work with Cordova and plugins before. I wrote a guide here: \\[http://www.devtricks.eu/make-a-native-build-with-ext-js-5-sencha-cmd-5-and-phonegap-cordova-with-plugins/\\](http://www.devtricks.eu/make-a-native-build-with-ext-js-5-sencha-cmd-5-and-phonegap-cordova-with-plugins/) (it might be a bit outdated since I wrote it a while ago, but it probably will help you to get started...) Apart from the above story, there are also commercial solutions that have push notification back-ends/servers, with easy to implement scripts, to integrate push notifications in your apps. Such as: * \\[https://www.pushwoosh.com/\\](https://www.pushwoosh.com/) * \\[https://pusher.com/\\](https://www.pushwoosh.com/) And last but not least, I know that Google is looking into ways how you can integrate push notifications in web applications. This is all new stuff. It might be only working for Chrome yet. But it will be the future! \\[https://developers.google.com/web/fundamentals/primers/?hl=en\\](https://developers.google.com/web/fundamentals/primers/?hl=en)","slug":"how-tos/does-ext-js-6-include-a-solution-for-push-notifications","published":0,"updated":"2018-11-25T12:40:17.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncso00cwkif5eq07sxcl","content":"<p>With Sencha Ext JS 6, you can create mobile applications. We will provide\n  all the tools and components you need to design your app, based on HTML5.\n  However, we don’t include a solution for Push notifications (to send messages\n  to app users) within our framework because push notifications require access\n  to native device APIs. For a mobile app based on HTML5 you will need to add\n  an extra technology. There are various ways how you can solve this in an\n  HTML5 app: (so what you will need, is an extra technology to wrap your web\n  application in a native shell. You can do this with technologies like\n  PhoneGap or Cordova. It basically wraps a native browser/webview around your\n  app.) - [<a href=\"http://phonegap.com/\\](http://phonegap.com/)\" target=\"_blank\" rel=\"noopener\">http://phonegap.com/\\](http://phonegap.com/)</a>\n  - [<a href=\"https://cordova.apache.org/\\](https://cordova.apache.org/)\" target=\"_blank\" rel=\"noopener\">https://cordova.apache.org/\\](https://cordova.apache.org/)</a>\n  Once, the code is build with PhoneGap or Cordova, you can use their APIs to\n  talk to native features, such as a camera or push notifications. PhoneGap and\n  Cordova use the same technology. But PhoneGap is commercial, by Adobe. And\n  Cordova is open source and Apache. Therefore, Cordova has probably the best\n  choice of APIs and user plugins that you can use. See here: [<a href=\"https://cordova.apache.org/plugins/?q=push\\](https://cordova.apache.org/plugins/?q=push)\" target=\"_blank\" rel=\"noopener\">https://cordova.apache.org/plugins/?q=push\\](https://cordova.apache.org/plugins/?q=push)</a>\n  I haven’t worked with push notifications yet myself, but I did work with\n  Cordova and plugins before. I wrote a guide here: [<a href=\"http://www.devtricks.eu/make-a-native-build-with-ext-js-5-sencha-cmd-5-and-phonegap-cordova-with-plugins/\\](http://www.devtricks.eu/make-a-native-build-with-ext-js-5-sencha-cmd-5-and-phonegap-cordova-with-plugins/)\" target=\"_blank\" rel=\"noopener\">http://www.devtricks.eu/make-a-native-build-with-ext-js-5-sencha-cmd-5-and-phonegap-cordova-with-plugins/\\](http://www.devtricks.eu/make-a-native-build-with-ext-js-5-sencha-cmd-5-and-phonegap-cordova-with-plugins/)</a>\n  (it might be a bit outdated since I wrote it a while ago, but it probably\n  will help you to get started…) Apart from the above story, there are also\n  commercial solutions that have push notification back-ends/servers, with easy\n  to implement scripts, to integrate push notifications in your apps. Such as:\n  <em>[<a href=\"https://www.pushwoosh.com/\\](https://www.pushwoosh.com/)\" target=\"_blank\" rel=\"noopener\">https://www.pushwoosh.com/\\](https://www.pushwoosh.com/)</a>\n  </em>[<a href=\"https://pusher.com/\\](https://www.pushwoosh.com/)\" target=\"_blank\" rel=\"noopener\">https://pusher.com/\\](https://www.pushwoosh.com/)</a>\n  And last but not least, I know that Google is looking into ways how you can\n  integrate push notifications in web applications. This is all new stuff. It\n  might be only working for Chrome yet. But it will be the future! [<a href=\"https://developers.google.com/web/fundamentals/primers/?hl=en\\](https://developers.google.com/web/fundamentals/primers/?hl=en)\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/web/fundamentals/primers/?hl=en\\](https://developers.google.com/web/fundamentals/primers/?hl=en)</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>With Sencha Ext JS 6, you can create mobile applications. We will provide\n  all the tools and components you need to design your app, based on HTML5.\n  However, we don’t include a solution for Push notifications (to send messages\n  to app users) within our framework because push notifications require access\n  to native device APIs. For a mobile app based on HTML5 you will need to add\n  an extra technology. There are various ways how you can solve this in an\n  HTML5 app: (so what you will need, is an extra technology to wrap your web\n  application in a native shell. You can do this with technologies like\n  PhoneGap or Cordova. It basically wraps a native browser/webview around your\n  app.) - [<a href=\"http://phonegap.com/\\](http://phonegap.com/)\" target=\"_blank\" rel=\"noopener\">http://phonegap.com/\\](http://phonegap.com/)</a>\n  - [<a href=\"https://cordova.apache.org/\\](https://cordova.apache.org/)\" target=\"_blank\" rel=\"noopener\">https://cordova.apache.org/\\](https://cordova.apache.org/)</a>\n  Once, the code is build with PhoneGap or Cordova, you can use their APIs to\n  talk to native features, such as a camera or push notifications. PhoneGap and\n  Cordova use the same technology. But PhoneGap is commercial, by Adobe. And\n  Cordova is open source and Apache. Therefore, Cordova has probably the best\n  choice of APIs and user plugins that you can use. See here: [<a href=\"https://cordova.apache.org/plugins/?q=push\\](https://cordova.apache.org/plugins/?q=push)\" target=\"_blank\" rel=\"noopener\">https://cordova.apache.org/plugins/?q=push\\](https://cordova.apache.org/plugins/?q=push)</a>\n  I haven’t worked with push notifications yet myself, but I did work with\n  Cordova and plugins before. I wrote a guide here: [<a href=\"http://www.devtricks.eu/make-a-native-build-with-ext-js-5-sencha-cmd-5-and-phonegap-cordova-with-plugins/\\](http://www.devtricks.eu/make-a-native-build-with-ext-js-5-sencha-cmd-5-and-phonegap-cordova-with-plugins/)\" target=\"_blank\" rel=\"noopener\">http://www.devtricks.eu/make-a-native-build-with-ext-js-5-sencha-cmd-5-and-phonegap-cordova-with-plugins/\\](http://www.devtricks.eu/make-a-native-build-with-ext-js-5-sencha-cmd-5-and-phonegap-cordova-with-plugins/)</a>\n  (it might be a bit outdated since I wrote it a while ago, but it probably\n  will help you to get started…) Apart from the above story, there are also\n  commercial solutions that have push notification back-ends/servers, with easy\n  to implement scripts, to integrate push notifications in your apps. Such as:\n  <em>[<a href=\"https://www.pushwoosh.com/\\](https://www.pushwoosh.com/)\" target=\"_blank\" rel=\"noopener\">https://www.pushwoosh.com/\\](https://www.pushwoosh.com/)</a>\n  </em>[<a href=\"https://pusher.com/\\](https://www.pushwoosh.com/)\" target=\"_blank\" rel=\"noopener\">https://pusher.com/\\](https://www.pushwoosh.com/)</a>\n  And last but not least, I know that Google is looking into ways how you can\n  integrate push notifications in web applications. This is all new stuff. It\n  might be only working for Chrome yet. But it will be the future! [<a href=\"https://developers.google.com/web/fundamentals/primers/?hl=en\\](https://developers.google.com/web/fundamentals/primers/?hl=en)\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/web/fundamentals/primers/?hl=en\\](https://developers.google.com/web/fundamentals/primers/?hl=en)</a></p>\n"},{"title":"Does Sencha support JAWS?","url":"1651.html","id":"1651","date":"2015-09-28T09:54:41.000Z","_content":"\nExt JS has ARIA support and we are testing Ext JS against JAWS 16 \\[http://www.freedomscientific.com/JAWSHQ/JAWSHeadquarters01\\](http://www.freedomscientific.com/JAWSHQ/JAWSHeadquarters01) as well as older versions. Each Ext release 4.2+ adds additional Aria tags to our generated markup (that these readers evaluate). Ext 5 adds more tags, (and the new Ext JS 6 framework, were our developers are working on, will even contain more ARIA tags). Go ahead and download the Ext JS trial version, so you can try it for yourself. Let me know if there is anything I can help you with!","source":"_drafts/how-tos/does-sencha-support-jaws.md","raw":"---\ntitle: Does Sencha support JAWS?\ntags:\n  - accessibility\n  - ARIA\n  - JAWS\nurl: 1651.html\nid: 1651\ncategories:\n  - Ext JS 5 &amp; 6\n  - Questions\ndate: 2015-09-28 11:54:41\n---\n\nExt JS has ARIA support and we are testing Ext JS against JAWS 16 \\[http://www.freedomscientific.com/JAWSHQ/JAWSHeadquarters01\\](http://www.freedomscientific.com/JAWSHQ/JAWSHeadquarters01) as well as older versions. Each Ext release 4.2+ adds additional Aria tags to our generated markup (that these readers evaluate). Ext 5 adds more tags, (and the new Ext JS 6 framework, were our developers are working on, will even contain more ARIA tags). Go ahead and download the Ext JS trial version, so you can try it for yourself. Let me know if there is anything I can help you with!","slug":"how-tos/does-sencha-support-jaws","published":0,"updated":"2018-11-25T12:40:05.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncsp00czkif5m64xxuww","content":"<p>Ext JS has ARIA support and we are testing Ext JS against JAWS 16 [<a href=\"http://www.freedomscientific.com/JAWSHQ/JAWSHeadquarters01\\](http://www.freedomscientific.com/JAWSHQ/JAWSHeadquarters01)\" target=\"_blank\" rel=\"noopener\">http://www.freedomscientific.com/JAWSHQ/JAWSHeadquarters01\\](http://www.freedomscientific.com/JAWSHQ/JAWSHeadquarters01)</a>\n  as well as older versions. Each Ext release 4.2+ adds additional Aria tags to\n  our generated markup (that these readers evaluate). Ext 5 adds more tags,\n  (and the new Ext JS 6 framework, were our developers are working on, will\n  even contain more ARIA tags). Go ahead and download the Ext JS trial version,\n  so you can try it for yourself. Let me know if there is anything I can help\n  you with!</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Ext JS has ARIA support and we are testing Ext JS against JAWS 16 [<a href=\"http://www.freedomscientific.com/JAWSHQ/JAWSHeadquarters01\\](http://www.freedomscientific.com/JAWSHQ/JAWSHeadquarters01)\" target=\"_blank\" rel=\"noopener\">http://www.freedomscientific.com/JAWSHQ/JAWSHeadquarters01\\](http://www.freedomscientific.com/JAWSHQ/JAWSHeadquarters01)</a>\n  as well as older versions. Each Ext release 4.2+ adds additional Aria tags to\n  our generated markup (that these readers evaluate). Ext 5 adds more tags,\n  (and the new Ext JS 6 framework, were our developers are working on, will\n  even contain more ARIA tags). Go ahead and download the Ext JS trial version,\n  so you can try it for yourself. Let me know if there is anything I can help\n  you with!</p>\n"},{"title":"Easy update Sencha Cmd","url":"343.html","id":"343","date":"2013-03-22T11:09:47.000Z","_content":"\nEnter these commands for easy updating Sencha Cmd: Download and install the latest stable release.\n\nsencha upgrade\n\nJust check for the latest stable release.\n\nsencha upgrade --check\n\nDownload and install the latest beta release.\n\nsencha upgrade --beta\n\nJust check for the latest new beta release.\n\nsencha upgrade --beta --check","source":"_drafts/how-tos/easy-update-sencha-cmd.md","raw":"---\ntitle: Easy update Sencha Cmd\ntags:\n  - Sencha CMD\n  - sencha update\n  - upgrade\nurl: 343.html\nid: 343\ncategories:\n  - Environment\n  - Sencha\ndate: 2013-03-22 12:09:47\n---\n\nEnter these commands for easy updating Sencha Cmd: Download and install the latest stable release.\n\nsencha upgrade\n\nJust check for the latest stable release.\n\nsencha upgrade --check\n\nDownload and install the latest beta release.\n\nsencha upgrade --beta\n\nJust check for the latest new beta release.\n\nsencha upgrade --beta --check","slug":"how-tos/easy-update-sencha-cmd","published":0,"updated":"2018-11-25T12:40:05.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncsr00d4kif5we77yn9i","content":"<p>Enter these commands for easy updating Sencha Cmd: Download and install the\n  latest stable release.</p>\n<p>sencha upgrade</p>\n<p>Just check for the latest stable release.</p>\n<p>sencha upgrade –check</p>\n<p>Download and install the latest beta release.</p>\n<p>sencha upgrade –beta</p>\n<p>Just check for the latest new beta release.</p>\n<p>sencha upgrade –beta –check</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Enter these commands for easy updating Sencha Cmd: Download and install the\n  latest stable release.</p>\n<p>sencha upgrade</p>\n<p>Just check for the latest stable release.</p>\n<p>sencha upgrade –check</p>\n<p>Download and install the latest beta release.</p>\n<p>sencha upgrade –beta</p>\n<p>Just check for the latest new beta release.</p>\n<p>sencha upgrade –beta –check</p>\n"},{"title":"Git Cheat Sheet","url":"545.html","id":"545","date":"2014-08-19T10:16:45.000Z","_content":"\nHere’s a cheat sheet with all the Git command-line actions we can do: **Create a Git repo from the command line:** \\* Go to https://github.com/mygitname?tab=repositories Create “New” repository. (for example myrepo) * Create .gitignore:\n\n.project\n.settings\n.classpath\n.idea\n\n######################\n\\# OS generated files #\n######################\n\n__MACOSX\n.DS_Store\n._*\n\n.Spotlight-V100\n.Trashes\n\nehthumbs.db\nThumbs.db\n\n############\n\\# Packages #\n############\n\\# it's better to unpack these files and commit the raw source\n\\# git has its own built in compression methods\n*.7z\n*.dmg\n*.gz\n*.iso\n*.jar\n*.rar\n*.tar\n.DS_Store\n\n############\n\\# Sencha #\n############\n\ntemp/\nbuild/\n.sencha_backup/\n\\*slicer-temp\\*\ngwt-unitCache\n.sass-cache/\n\n**\\* Create project** 1\\. git init 2. git status 3. git add . 4. git commit -m “First commit” 5. git remote add origin https://github.com/username/myrepo.git 6. git push -u origin master **Retrieve changes:** 1\\. git pull **Commit changes:** 1\\. git pull 2. git add . 3. git commit -m “My commit description” 4. git push Commit removed files from the tree > git commit -am “remove deleted files” **Removing changes:** Remove a single file: > git rm filename Remove files: > git rm ‘*.txt’ Remove a Folder: > git rm -r myfolder Reset unstaged files: > git reset myfilename Force to remove: > git rm —force myfile Or: > git rm f myfile **Adding changes:** Add a file: > git add myfilename Add files with a wildcard: > git add ‘*.txt’ Add everything in a directory: > git add -A . **Create a branch:** Create a branch: 1. git brand mybranch Switch to the new branch: 2. git checkout mybranch Merge branch with master: 3. git merge mybranch Remove a branch: > git branch -d mybranch Create and switch to the new branch: > git checkout -b mybranch Retrieve changes from master branch > git pull -origin master Push to master branch > git push -u origin master **More Commands:** Check status: > git status See log, to see what’s changed: > git log See differences in file with merge errors > git diff HEAD See differences between a stage file and what’s in git > git diff —staged Files can be changed back to how they were at the last commit > git checkout — myfilename Close the command-line **Remove all those annoying *.DS_Store files:** 1\\. find . -name '*.DS\\_Store' -type f -delete 2. git commit -m “Remove .DS\\_Store files” 3. git push **Save GIT credentials to the keychain (MAC OSX)** Make sure osxkeychain is installed; (check [this site for more information](https://help.github.com/articles/caching-your-github-password-in-git)) \\> git config --global credential.helper osxkeychain **Hard reset to the latest version in Head** (note: you might want to backup your local files here, cause these will get lost) > git reset --hard HEAD > git clean -f > git pull","source":"_drafts/how-tos/git-cheat-sheet.md","raw":"---\ntitle: Git Cheat Sheet\ntags:\n  - cheatsheet\n  - cli\n  - commands\n  - git\nurl: 545.html\nid: 545\ncategories:\n  - Environment\n  - Git\ndate: 2014-08-19 12:16:45\n---\n\nHere’s a cheat sheet with all the Git command-line actions we can do: **Create a Git repo from the command line:** \\* Go to https://github.com/mygitname?tab=repositories Create “New” repository. (for example myrepo) * Create .gitignore:\n\n.project\n.settings\n.classpath\n.idea\n\n######################\n\\# OS generated files #\n######################\n\n__MACOSX\n.DS_Store\n._*\n\n.Spotlight-V100\n.Trashes\n\nehthumbs.db\nThumbs.db\n\n############\n\\# Packages #\n############\n\\# it's better to unpack these files and commit the raw source\n\\# git has its own built in compression methods\n*.7z\n*.dmg\n*.gz\n*.iso\n*.jar\n*.rar\n*.tar\n.DS_Store\n\n############\n\\# Sencha #\n############\n\ntemp/\nbuild/\n.sencha_backup/\n\\*slicer-temp\\*\ngwt-unitCache\n.sass-cache/\n\n**\\* Create project** 1\\. git init 2. git status 3. git add . 4. git commit -m “First commit” 5. git remote add origin https://github.com/username/myrepo.git 6. git push -u origin master **Retrieve changes:** 1\\. git pull **Commit changes:** 1\\. git pull 2. git add . 3. git commit -m “My commit description” 4. git push Commit removed files from the tree > git commit -am “remove deleted files” **Removing changes:** Remove a single file: > git rm filename Remove files: > git rm ‘*.txt’ Remove a Folder: > git rm -r myfolder Reset unstaged files: > git reset myfilename Force to remove: > git rm —force myfile Or: > git rm f myfile **Adding changes:** Add a file: > git add myfilename Add files with a wildcard: > git add ‘*.txt’ Add everything in a directory: > git add -A . **Create a branch:** Create a branch: 1. git brand mybranch Switch to the new branch: 2. git checkout mybranch Merge branch with master: 3. git merge mybranch Remove a branch: > git branch -d mybranch Create and switch to the new branch: > git checkout -b mybranch Retrieve changes from master branch > git pull -origin master Push to master branch > git push -u origin master **More Commands:** Check status: > git status See log, to see what’s changed: > git log See differences in file with merge errors > git diff HEAD See differences between a stage file and what’s in git > git diff —staged Files can be changed back to how they were at the last commit > git checkout — myfilename Close the command-line **Remove all those annoying *.DS_Store files:** 1\\. find . -name '*.DS\\_Store' -type f -delete 2. git commit -m “Remove .DS\\_Store files” 3. git push **Save GIT credentials to the keychain (MAC OSX)** Make sure osxkeychain is installed; (check [this site for more information](https://help.github.com/articles/caching-your-github-password-in-git)) \\> git config --global credential.helper osxkeychain **Hard reset to the latest version in Head** (note: you might want to backup your local files here, cause these will get lost) > git reset --hard HEAD > git clean -f > git pull","slug":"how-tos/git-cheat-sheet","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncss00d6kif5n0sy2vmh","content":"<p>Here’s a cheat sheet with all the Git command-line actions we can do:\n  <strong>Create a Git repo from the command line:</strong> * Go to <a href=\"https://github.com/mygitname?tab=repositories\" target=\"_blank\" rel=\"noopener\">https://github.com/mygitname?tab=repositories</a>\n  Create “New” repository. (for example myrepo) * Create .gitignore:</p>\n<p>.project .settings .classpath .idea</p>\n<p>###################### # OS generated files #</p>\n<p>######################</p>\n<p>__MACOSX .DS_Store ._*</p>\n<p>.Spotlight-V100 .Trashes</p>\n<p>ehthumbs.db Thumbs.db</p>\n<p>############ # Packages #</p>\n<p>############ # it’s better to unpack these files and commit the raw source #\n  git has its own built in compression methods <em>.7z </em>.dmg <em>.gz </em>.iso\n  <em>.jar </em>.rar *.tar .DS_Store</p>\n<p>############ # Sencha #</p>\n<p>############</p>\n<p>temp/ build/ .sencha_backup/ *slicer-temp* gwt-unitCache .sass-cache/</p>\n<p><strong>* Create project</strong> 1. git init 2. git status 3. git add . 4.\n  git commit -m “First commit” 5. git remote add origin <a href=\"https://github.com/username/myrepo.git\" target=\"_blank\" rel=\"noopener\">https://github.com/username/myrepo.git</a>\n  6. git push -u origin master <strong>Retrieve changes:</strong> 1. git pull\n  <strong>Commit changes:</strong> 1. git pull 2. git add . 3. git commit -m\n  “My commit description” 4. git push Commit removed files from the tree &gt;\n  git commit -am “remove deleted files” <strong>Removing changes:</strong>\n  Remove a single file: &gt; git rm filename Remove files: &gt; git rm ‘<em>.txt’\n    Remove a Folder: &gt; git rm -r myfolder Reset unstaged files: &gt; git\n    reset myfilename Force to remove: &gt; git rm —force myfile Or: &gt; git rm\n    f myfile <strong>Adding changes:</strong> Add a file: &gt; git add\n    myfilename Add files with a wildcard: &gt; git add ‘</em>.txt’ Add\n  everything in a directory: &gt; git add -A . <strong>Create a branch:</strong>\n  Create a branch: 1. git brand mybranch Switch to the new branch: 2. git\n  checkout mybranch Merge branch with master: 3. git merge mybranch Remove a\n  branch: &gt; git branch -d mybranch Create and switch to the new branch: &gt;\n  git checkout -b mybranch Retrieve changes from master branch &gt; git pull\n  -origin master Push to master branch &gt; git push -u origin master <strong>More\n    Commands:</strong> Check status: &gt; git status See log, to see what’s\n  changed: &gt; git log See differences in file with merge errors &gt; git diff\n  HEAD See differences between a stage file and what’s in git &gt; git diff\n  —staged Files can be changed back to how they were at the last commit &gt;\n  git checkout — myfilename Close the command-line <strong>Remove all those\n    annoying *.DS_Store files:</strong> 1. find . -name ‘*.DS_Store’ -type f\n  -delete 2. git commit -m “Remove .DS_Store files” 3. git push <strong>Save\n    GIT credentials to the keychain (MAC OSX)</strong> Make sure osxkeychain is\n  installed; (check <a href=\"https://help.github.com/articles/caching-your-github-password-in-git\" target=\"_blank\" rel=\"noopener\">this\n    site for more information</a>) > git config –global credential.helper\n  osxkeychain <strong>Hard reset to the latest version in Head</strong> (note:\n  you might want to backup your local files here, cause these will get lost)\n  &gt; git reset –hard HEAD &gt; git clean -f &gt; git pull</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Here’s a cheat sheet with all the Git command-line actions we can do:\n  <strong>Create a Git repo from the command line:</strong> * Go to <a href=\"https://github.com/mygitname?tab=repositories\" target=\"_blank\" rel=\"noopener\">https://github.com/mygitname?tab=repositories</a>\n  Create “New” repository. (for example myrepo) * Create .gitignore:</p>\n<p>.project .settings .classpath .idea</p>\n<p>###################### # OS generated files #</p>\n<p>######################</p>\n<p>__MACOSX .DS_Store ._*</p>\n<p>.Spotlight-V100 .Trashes</p>\n<p>ehthumbs.db Thumbs.db</p>\n<p>############ # Packages #</p>\n<p>############ # it’s better to unpack these files and commit the raw source #\n  git has its own built in compression methods <em>.7z </em>.dmg <em>.gz </em>.iso\n  <em>.jar </em>.rar *.tar .DS_Store</p>\n<p>############ # Sencha #</p>\n<p>############</p>\n<p>temp/ build/ .sencha_backup/ *slicer-temp* gwt-unitCache .sass-cache/</p>\n<p><strong>* Create project</strong> 1. git init 2. git status 3. git add . 4.\n  git commit -m “First commit” 5. git remote add origin <a href=\"https://github.com/username/myrepo.git\" target=\"_blank\" rel=\"noopener\">https://github.com/username/myrepo.git</a>\n  6. git push -u origin master <strong>Retrieve changes:</strong> 1. git pull\n  <strong>Commit changes:</strong> 1. git pull 2. git add . 3. git commit -m\n  “My commit description” 4. git push Commit removed files from the tree &gt;\n  git commit -am “remove deleted files” <strong>Removing changes:</strong>\n  Remove a single file: &gt; git rm filename Remove files: &gt; git rm ‘<em>.txt’\n    Remove a Folder: &gt; git rm -r myfolder Reset unstaged files: &gt; git\n    reset myfilename Force to remove: &gt; git rm —force myfile Or: &gt; git rm\n    f myfile <strong>Adding changes:</strong> Add a file: &gt; git add\n    myfilename Add files with a wildcard: &gt; git add ‘</em>.txt’ Add\n  everything in a directory: &gt; git add -A . <strong>Create a branch:</strong>\n  Create a branch: 1. git brand mybranch Switch to the new branch: 2. git\n  checkout mybranch Merge branch with master: 3. git merge mybranch Remove a\n  branch: &gt; git branch -d mybranch Create and switch to the new branch: &gt;\n  git checkout -b mybranch Retrieve changes from master branch &gt; git pull\n  -origin master Push to master branch &gt; git push -u origin master <strong>More\n    Commands:</strong> Check status: &gt; git status See log, to see what’s\n  changed: &gt; git log See differences in file with merge errors &gt; git diff\n  HEAD See differences between a stage file and what’s in git &gt; git diff\n  —staged Files can be changed back to how they were at the last commit &gt;\n  git checkout — myfilename Close the command-line <strong>Remove all those\n    annoying *.DS_Store files:</strong> 1. find . -name ‘*.DS_Store’ -type f\n  -delete 2. git commit -m “Remove .DS_Store files” 3. git push <strong>Save\n    GIT credentials to the keychain (MAC OSX)</strong> Make sure osxkeychain is\n  installed; (check <a href=\"https://help.github.com/articles/caching-your-github-password-in-git\" target=\"_blank\" rel=\"noopener\">this\n    site for more information</a>) > git config –global credential.helper\n  osxkeychain <strong>Hard reset to the latest version in Head</strong> (note:\n  you might want to backup your local files here, cause these will get lost)\n  &gt; git reset –hard HEAD &gt; git clean -f &gt; git pull</p>\n"},{"title":"Handy Sublime Shortcuts","url":"327.html","id":"327","date":"2013-01-23T15:40:06.000Z","_content":"\n\\- Command + Shift + P - Opens the magic dropdown ;) - Command + Shift + P > Package Control: Install Package - go install nice plugins - Command + P > : - go to line number - Command + P > @ - gives you a list of all the methods in this file. - Command + / - commenting/uncommenting - Command + \\] - Indent - Command + \\[ - Unindent - Control + Command + Up - move selected line up - Control + Command + Down - move selected line down - Command + Number - switches to an open tab. Command + 1 goes to the 1st tab, Command + 2 - 2nd tab, etc. - Shift + Command + F - searches through the whole project - Shift + Control + K - deletes selected code or line - Ctrl + ` - Opens Sublime console (if you have JSHINT installed) - Command + J - Run JSHint","source":"_drafts/how-tos/handy-sublime-shortcuts.md","raw":"---\ntitle: Handy Sublime Shortcuts\ntags:\n  - sublime\nurl: 327.html\nid: 327\ncategories:\n  - Environment\n  - Sublime Text\ndate: 2013-01-23 16:40:06\n---\n\n\\- Command + Shift + P - Opens the magic dropdown ;) - Command + Shift + P > Package Control: Install Package - go install nice plugins - Command + P > : - go to line number - Command + P > @ - gives you a list of all the methods in this file. - Command + / - commenting/uncommenting - Command + \\] - Indent - Command + \\[ - Unindent - Control + Command + Up - move selected line up - Control + Command + Down - move selected line down - Command + Number - switches to an open tab. Command + 1 goes to the 1st tab, Command + 2 - 2nd tab, etc. - Shift + Command + F - searches through the whole project - Shift + Control + K - deletes selected code or line - Ctrl + ` - Opens Sublime console (if you have JSHINT installed) - Command + J - Run JSHint","slug":"how-tos/handy-sublime-shortcuts","published":0,"updated":"2018-11-25T12:40:55.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncst00dbkif5bbwhs6md","content":"<p>- Command + Shift + P - Opens the magic dropdown ;) - Command + Shift + P\n  &gt; Package Control: Install Package - go install nice plugins - Command + P\n  &gt; : - go to line number - Command + P &gt; @ - gives you a list of all the\n  methods in this file. - Command + / - commenting/uncommenting - Command + ] -\n  Indent - Command + [ - Unindent - Control + Command + Up - move selected line\n  up - Control + Command + Down - move selected line down - Command + Number -\n  switches to an open tab. Command + 1 goes to the 1st tab, Command + 2 - 2nd\n  tab, etc. - Shift + Command + F - searches through the whole project - Shift\n  + Control + K - deletes selected code or line - Ctrl + ` - Opens Sublime\n  console (if you have JSHINT installed) - Command + J - Run JSHint</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>- Command + Shift + P - Opens the magic dropdown ;) - Command + Shift + P\n  &gt; Package Control: Install Package - go install nice plugins - Command + P\n  &gt; : - go to line number - Command + P &gt; @ - gives you a list of all the\n  methods in this file. - Command + / - commenting/uncommenting - Command + ] -\n  Indent - Command + [ - Unindent - Control + Command + Up - move selected line\n  up - Control + Command + Down - move selected line down - Command + Number -\n  switches to an open tab. Command + 1 goes to the 1st tab, Command + 2 - 2nd\n  tab, etc. - Shift + Command + F - searches through the whole project - Shift\n  + Control + K - deletes selected code or line - Ctrl + ` - Opens Sublime\n  console (if you have JSHINT installed) - Command + J - Run JSHint</p>\n"},{"title":"Fix GIT Http Error","url":"341.html","id":"341","date":"2013-03-20T18:55:20.000Z","_content":"\nSuddenly my Git Mac Client starts throwing the error message: \"No internet connection\" every time I sync my repo. But I did have an internet connection! I tried it again, but this time on the command line; with a git push. If git gives an error that reads \"fatal: The remote end hung up unexpectedly\", it usually indicates that your HTTP POST buffer is too small to handle the files being posted. Try increasing the buffer size by running the following command on the command line:\n\ngit config http.postBuffer 524288000","source":"_drafts/how-tos/fix-git-http-error.md","raw":"---\ntitle: Fix GIT Http Error\ntags:\n  - fatal\n  - git\n  - git push\n  - git sync\n  - http error\nurl: 341.html\nid: 341\ncategories:\n  - Environment\ndate: 2013-03-20 19:55:20\n---\n\nSuddenly my Git Mac Client starts throwing the error message: \"No internet connection\" every time I sync my repo. But I did have an internet connection! I tried it again, but this time on the command line; with a git push. If git gives an error that reads \"fatal: The remote end hung up unexpectedly\", it usually indicates that your HTTP POST buffer is too small to handle the files being posted. Try increasing the buffer size by running the following command on the command line:\n\ngit config http.postBuffer 524288000","slug":"how-tos/fix-git-http-error","published":0,"updated":"2018-11-25T12:40:34.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncsu00dekif51kxofwlo","content":"<p>Suddenly my Git Mac Client starts throwing the error message: “No internet\n  connection” every time I sync my repo. But I did have an internet connection!\n  I tried it again, but this time on the command line; with a git push. If git\n  gives an error that reads “fatal: The remote end hung up unexpectedly”, it\n  usually indicates that your HTTP POST buffer is too small to handle the files\n  being posted. Try increasing the buffer size by running the following command\n  on the command line:</p>\n<p>git config http.postBuffer 524288000</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Suddenly my Git Mac Client starts throwing the error message: “No internet\n  connection” every time I sync my repo. But I did have an internet connection!\n  I tried it again, but this time on the command line; with a git push. If git\n  gives an error that reads “fatal: The remote end hung up unexpectedly”, it\n  usually indicates that your HTTP POST buffer is too small to handle the files\n  being posted. Try increasing the buffer size by running the following command\n  on the command line:</p>\n<p>git config http.postBuffer 524288000</p>\n"},{"title":"CSS Print stylesheet tricks","url":"156.html","id":"156","date":"2012-11-13T18:58:42.000Z","_content":"\nThere are some cool styling tricks, which are nice to have when it comes to printing out a webpage.  \nPlease see my Print CSS snippets and tricks:\n\n1.  Do not use much styles. If you print out a webpage you don?t want to print colors! (unless to color hyperlinks). Keep it plain and simple and write a short print stylesheet.\n2.  Make sure you named your (2nd) stylesheet for printing: print.css And give it the ?media? attribute print:\n    \n    <link rel=\"stylesheet\" type=\"text/css\" href=\"print.css\" media=\"print\" />\n    \n3.  Use a good readable font. I would say a ?serif? 12pt font and ofcourse keep it black.\n    \n    body { color : #000000; background : #ffffff; font-family : \"Times New Roman\", Times, serif; font-size : 12pt; }\n    \n4.  It should be clear when a hyperlink is printed. Therefore keep links underlined. You can even color it blue.\n    \n    a { text-decoration : underline; color : #0000ff; }\n    \n5.  Do not print out layout parts, navigation, javascript or flash animations.\n    \n    #navigation, #headerImage { display: none; }\n    \n6.  This is a handy trick: With these styles you can set a page break for printing before or after: Possible attributes are: always (print page break) | auto (default ? page break where page ends) | left | right.\n    \n    H1 {page-break-after: auto}\n    H2 {page-break-before: always}\n    \n7.  Another handy trick, is to print the URL after an underlined hyperlink:\n    \n    a:link:after, a:visited:after { content: \" (\" attr(href) \")\"; }\n    \n\nThat's it for now.","source":"_drafts/how-tos/css-print-stylesheet-tricks.md","raw":"---\ntitle: CSS Print stylesheet tricks\ntags:\n  - CSS\n  - print styles\nurl: 156.html\nid: 156\ncategories:\n  - CSS\ndate: 2012-11-13 19:58:42\n---\n\nThere are some cool styling tricks, which are nice to have when it comes to printing out a webpage.  \nPlease see my Print CSS snippets and tricks:\n\n1.  Do not use much styles. If you print out a webpage you don?t want to print colors! (unless to color hyperlinks). Keep it plain and simple and write a short print stylesheet.\n2.  Make sure you named your (2nd) stylesheet for printing: print.css And give it the ?media? attribute print:\n    \n    <link rel=\"stylesheet\" type=\"text/css\" href=\"print.css\" media=\"print\" />\n    \n3.  Use a good readable font. I would say a ?serif? 12pt font and ofcourse keep it black.\n    \n    body { color : #000000; background : #ffffff; font-family : \"Times New Roman\", Times, serif; font-size : 12pt; }\n    \n4.  It should be clear when a hyperlink is printed. Therefore keep links underlined. You can even color it blue.\n    \n    a { text-decoration : underline; color : #0000ff; }\n    \n5.  Do not print out layout parts, navigation, javascript or flash animations.\n    \n    #navigation, #headerImage { display: none; }\n    \n6.  This is a handy trick: With these styles you can set a page break for printing before or after: Possible attributes are: always (print page break) | auto (default ? page break where page ends) | left | right.\n    \n    H1 {page-break-after: auto}\n    H2 {page-break-before: always}\n    \n7.  Another handy trick, is to print the URL after an underlined hyperlink:\n    \n    a:link:after, a:visited:after { content: \" (\" attr(href) \")\"; }\n    \n\nThat's it for now.","slug":"how-tos/css-print-stylesheet-tricks","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncsv00dhkif508djr1im","content":"<p>There are some cool styling tricks, which are nice to have when it comes to\n  printing out a webpage.<br>Please see my Print CSS snippets and tricks:</p>\n<ol>\n  <li>Do not use much styles. If you print out a webpage you don?t want to\n    print colors! (unless to color hyperlinks). Keep it plain and simple and\n    write a short print stylesheet.</li>\n  <li>\n    <p>Make sure you named your (2nd) stylesheet for printing: print.css And\n      give it the ?media? attribute print:</p>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"print.css\" media=\"print\">\n  </li>\n  <li>\n    <p>Use a good readable font. I would say a ?serif? 12pt font and ofcourse\n      keep it black.</p>\n    <p>body { color : #000000; background : #ffffff; font-family : “Times New\n      Roman”, Times, serif; font-size : 12pt; }</p>\n  </li>\n  <li>\n    <p>It should be clear when a hyperlink is printed. Therefore keep links\n      underlined. You can even color it blue.</p>\n    <p>a { text-decoration : underline; color : #0000ff; }</p>\n  </li>\n  <li>\n    <p>Do not print out layout parts, navigation, javascript or flash\n      animations.</p>\n    <p>#navigation, #headerImage { display: none; }</p>\n  </li>\n  <li>\n    <p>This is a handy trick: With these styles you can set a page break for\n      printing before or after: Possible attributes are: always (print page\n      break) | auto (default ? page break where page ends) | left | right.</p>\n    <p>H1 {page-break-after: auto} H2 {page-break-before: always}</p>\n  </li>\n  <li>\n    <p>Another handy trick, is to print the URL after an underlined hyperlink:</p>\n    <p>a:link:after, a:visited:after { content: “ (“ attr(href) “)”; }</p>\n  </li>\n</ol>\n<p>That’s it for now.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>There are some cool styling tricks, which are nice to have when it comes to\n  printing out a webpage.<br>Please see my Print CSS snippets and tricks:</p>\n<ol>\n  <li>Do not use much styles. If you print out a webpage you don?t want to\n    print colors! (unless to color hyperlinks). Keep it plain and simple and\n    write a short print stylesheet.</li>\n  <li>\n    <p>Make sure you named your (2nd) stylesheet for printing: print.css And\n      give it the ?media? attribute print:</p>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"print.css\" media=\"print\">\n  </li>\n  <li>\n    <p>Use a good readable font. I would say a ?serif? 12pt font and ofcourse\n      keep it black.</p>\n    <p>body { color : #000000; background : #ffffff; font-family : “Times New\n      Roman”, Times, serif; font-size : 12pt; }</p>\n  </li>\n  <li>\n    <p>It should be clear when a hyperlink is printed. Therefore keep links\n      underlined. You can even color it blue.</p>\n    <p>a { text-decoration : underline; color : #0000ff; }</p>\n  </li>\n  <li>\n    <p>Do not print out layout parts, navigation, javascript or flash\n      animations.</p>\n    <p>#navigation, #headerImage { display: none; }</p>\n  </li>\n  <li>\n    <p>This is a handy trick: With these styles you can set a page break for\n      printing before or after: Possible attributes are: always (print page\n      break) | auto (default ? page break where page ends) | left | right.</p>\n    <p>H1 {page-break-after: auto} H2 {page-break-before: always}</p>\n  </li>\n  <li>\n    <p>Another handy trick, is to print the URL after an underlined hyperlink:</p>\n    <p>a:link:after, a:visited:after { content: “ (“ attr(href) “)”; }</p>\n  </li>\n</ol>\n<p>That’s it for now.</p>\n"},{"title":"Fix: Chrome 29 breaks all Sencha Touch 2.* apps","url":"375.html","id":"375","date":"2013-08-22T03:58:04.000Z","_content":"\n_Please note: this bug won't occur with Sencha Touch 2.3 (and higher)_ I have to admit, I am in love with the Google Chrome browser. Except yesterday, Google Chrome automatically upgrades itselves to the latest version. This latest version, version 29, suddenly breaks all Sencha Touch 2.2 apps. And ya, you can't downgrade Google Chrome. Oh no! Well luckily it's not so hard to fix / patch the bug in the framework. It actually has something to do with one of the base Sencha Touch stylesheets. In your touch framework folder open the following Sass mixin: **resources/themes/stylesheets/sencha-touch/base/mixins/_Class.scss** Search for the **st-box** mixin, and replace the code for:\n\n//fix for chrome 29 bug. - it just switches the order\n//of the display rules\n@mixin st-box($important: no) {\n    @if $important == important {\n        display: flex !important;\n        display: -webkit-box !important;\n        display: -ms-flexbox !important;\n    } @else {\n        display: flex;\n        display: -webkit-box;\n        display: -ms-flexbox;\n    }\n}\n\nThe next thing you have to do, is compile the Sass stylesheets. You will need Sass & Compass (and Ruby) have installed on your machine. On the command line, browse to the folder: \\*touch/resources/sass\\* and run the following line: `compass watch` This should fix your Sencha Touch problems for the latest Chrome browser! (In case you don't have Sass/Compass installed and you only want the generated app.css, feel free to download it from this post: [Sencha Touch default stylesheet: app.css](http://www.leeboonstra.com/wp-content/uploads/2013/08/app.css))","source":"_drafts/how-tos/fix-chrome-29-breaks-all-sencha-touch-2-apps.md","raw":"---\ntitle: 'Fix: Chrome 29 breaks all Sencha Touch 2.* apps'\ntags:\n  - bug\n  - google chrome\n  - patch\n  - Sass\n  - Sencha Touch\nurl: 375.html\nid: 375\ncategories:\n  - CSS\n  - Sass\n  - Sencha\n  - Sencha Touch\ndate: 2013-08-22 05:58:04\n---\n\n_Please note: this bug won't occur with Sencha Touch 2.3 (and higher)_ I have to admit, I am in love with the Google Chrome browser. Except yesterday, Google Chrome automatically upgrades itselves to the latest version. This latest version, version 29, suddenly breaks all Sencha Touch 2.2 apps. And ya, you can't downgrade Google Chrome. Oh no! Well luckily it's not so hard to fix / patch the bug in the framework. It actually has something to do with one of the base Sencha Touch stylesheets. In your touch framework folder open the following Sass mixin: **resources/themes/stylesheets/sencha-touch/base/mixins/_Class.scss** Search for the **st-box** mixin, and replace the code for:\n\n//fix for chrome 29 bug. - it just switches the order\n//of the display rules\n@mixin st-box($important: no) {\n    @if $important == important {\n        display: flex !important;\n        display: -webkit-box !important;\n        display: -ms-flexbox !important;\n    } @else {\n        display: flex;\n        display: -webkit-box;\n        display: -ms-flexbox;\n    }\n}\n\nThe next thing you have to do, is compile the Sass stylesheets. You will need Sass & Compass (and Ruby) have installed on your machine. On the command line, browse to the folder: \\*touch/resources/sass\\* and run the following line: `compass watch` This should fix your Sencha Touch problems for the latest Chrome browser! (In case you don't have Sass/Compass installed and you only want the generated app.css, feel free to download it from this post: [Sencha Touch default stylesheet: app.css](http://www.leeboonstra.com/wp-content/uploads/2013/08/app.css))","slug":"how-tos/fix-chrome-29-breaks-all-sencha-touch-2-apps","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncsw00dkkif5k9g8fmd0","content":"<p><em>Please note: this bug won’t occur with Sencha Touch 2.3 (and higher)</em>\n  I have to admit, I am in love with the Google Chrome browser. Except\n  yesterday, Google Chrome automatically upgrades itselves to the latest\n  version. This latest version, version 29, suddenly breaks all Sencha Touch\n  2.2 apps. And ya, you can’t downgrade Google Chrome. Oh no! Well luckily it’s\n  not so hard to fix / patch the bug in the framework. It actually has\n  something to do with one of the base Sencha Touch stylesheets. In your touch\n  framework folder open the following Sass mixin: <strong>resources/themes/stylesheets/sencha-touch/base/mixins/_Class.scss</strong>\n  Search for the <strong>st-box</strong> mixin, and replace the code for:</p>\n<p>//fix for chrome 29 bug. - it just switches the order //of the display rules\n  @mixin st-box($important: no) { @if $important == important { display: flex\n  !important; display: -webkit-box !important; display: -ms-flexbox !important;\n  } @else { display: flex; display: -webkit-box; display: -ms-flexbox; } }</p>\n<p>The next thing you have to do, is compile the Sass stylesheets. You will\n  need Sass &amp; Compass (and Ruby) have installed on your machine. On the\n  command line, browse to the folder: *touch/resources/sass* and run the\n  following line: <code>compass watch</code> This should fix your Sencha Touch\n  problems for the latest Chrome browser! (In case you don’t have Sass/Compass\n  installed and you only want the generated app.css, feel free to download it\n  from this post: <a href=\"http://www.leeboonstra.com/wp-content/uploads/2013/08/app.css\" target=\"_blank\" rel=\"noopener\">Sencha\n    Touch default stylesheet: app.css</a>)</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p><em>Please note: this bug won’t occur with Sencha Touch 2.3 (and higher)</em>\n  I have to admit, I am in love with the Google Chrome browser. Except\n  yesterday, Google Chrome automatically upgrades itselves to the latest\n  version. This latest version, version 29, suddenly breaks all Sencha Touch\n  2.2 apps. And ya, you can’t downgrade Google Chrome. Oh no! Well luckily it’s\n  not so hard to fix / patch the bug in the framework. It actually has\n  something to do with one of the base Sencha Touch stylesheets. In your touch\n  framework folder open the following Sass mixin: <strong>resources/themes/stylesheets/sencha-touch/base/mixins/_Class.scss</strong>\n  Search for the <strong>st-box</strong> mixin, and replace the code for:</p>\n<p>//fix for chrome 29 bug. - it just switches the order //of the display rules\n  @mixin st-box($important: no) { @if $important == important { display: flex\n  !important; display: -webkit-box !important; display: -ms-flexbox !important;\n  } @else { display: flex; display: -webkit-box; display: -ms-flexbox; } }</p>\n<p>The next thing you have to do, is compile the Sass stylesheets. You will\n  need Sass &amp; Compass (and Ruby) have installed on your machine. On the\n  command line, browse to the folder: *touch/resources/sass* and run the\n  following line: <code>compass watch</code> This should fix your Sencha Touch\n  problems for the latest Chrome browser! (In case you don’t have Sass/Compass\n  installed and you only want the generated app.css, feel free to download it\n  from this post: <a href=\"http://www.leeboonstra.com/wp-content/uploads/2013/08/app.css\" target=\"_blank\" rel=\"noopener\">Sencha\n    Touch default stylesheet: app.css</a>)</p>\n"},{"title":"Does Sencha Touch support Windows 8?","url":"1634.html","id":"1634","date":"2014-09-28T09:37:39.000Z","_content":"\nYes, Sencha Touch 2 supports Windows Phone 8.1, Microsoft Surface Pro and RT. Actually, Sencha Touch 2.2 and up even supports Internet Explorer 10 and Windows 8. That also means support for tablets running on Windows 8, IE10 and up. Mind you we have very nice out of the box themes for Windows Phone! Please see: \\[http://www.sencha.com/products/touch/features/\\](http://www.sencha.com/products/touch/features/) \\[http://www.sencha.com/blog/sencha-touch-with-windows-phone-8/\\](http://www.sencha.com/blog/sencha-touch-with-windows-phone-8/)\\]\\]> (It's probably similar for Ext JS 6 Modern toolkit and up.)","source":"_drafts/how-tos/does-sencha-touch-support-windows-8.md","raw":"---\ntitle: Does Sencha Touch support Windows 8?\ntags:\n  - Sencha Touch\n  - windows 8 support\nurl: 1634.html\nid: 1634\ncategories:\n  - Questions\n  - Sencha Touch\ndate: 2014-09-28 11:37:39\n---\n\nYes, Sencha Touch 2 supports Windows Phone 8.1, Microsoft Surface Pro and RT. Actually, Sencha Touch 2.2 and up even supports Internet Explorer 10 and Windows 8. That also means support for tablets running on Windows 8, IE10 and up. Mind you we have very nice out of the box themes for Windows Phone! Please see: \\[http://www.sencha.com/products/touch/features/\\](http://www.sencha.com/products/touch/features/) \\[http://www.sencha.com/blog/sencha-touch-with-windows-phone-8/\\](http://www.sencha.com/blog/sencha-touch-with-windows-phone-8/)\\]\\]> (It's probably similar for Ext JS 6 Modern toolkit and up.)","slug":"how-tos/does-sencha-touch-support-windows-8","published":0,"updated":"2018-11-25T12:40:05.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncsx00dmkif5m4o3vd55","content":"<p>Yes, Sencha Touch 2 supports Windows Phone 8.1, Microsoft Surface Pro and\n  RT. Actually, Sencha Touch 2.2 and up even supports Internet Explorer 10 and\n  Windows 8. That also means support for tablets running on Windows 8, IE10 and\n  up. Mind you we have very nice out of the box themes for Windows Phone!\n  Please see: [<a href=\"http://www.sencha.com/products/touch/features/\\](http://www.sencha.com/products/touch/features/)\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/products/touch/features/\\](http://www.sencha.com/products/touch/features/)</a>\n  [<a href=\"http://www.sencha.com/blog/sencha-touch-with-windows-phone-8/\\](http://www.sencha.com/blog/sencha-touch-with-windows-phone-8/)\\]\\]&gt;\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/blog/sencha-touch-with-windows-phone-8/\\](http://www.sencha.com/blog/sencha-touch-with-windows-phone-8/)\\]\\]&gt;</a>\n  (It’s probably similar for Ext JS 6 Modern toolkit and up.)</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Yes, Sencha Touch 2 supports Windows Phone 8.1, Microsoft Surface Pro and\n  RT. Actually, Sencha Touch 2.2 and up even supports Internet Explorer 10 and\n  Windows 8. That also means support for tablets running on Windows 8, IE10 and\n  up. Mind you we have very nice out of the box themes for Windows Phone!\n  Please see: [<a href=\"http://www.sencha.com/products/touch/features/\\](http://www.sencha.com/products/touch/features/)\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/products/touch/features/\\](http://www.sencha.com/products/touch/features/)</a>\n  [<a href=\"http://www.sencha.com/blog/sencha-touch-with-windows-phone-8/\\](http://www.sencha.com/blog/sencha-touch-with-windows-phone-8/)\\]\\]&gt;\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/blog/sencha-touch-with-windows-phone-8/\\](http://www.sencha.com/blog/sencha-touch-with-windows-phone-8/)\\]\\]&gt;</a>\n  (It’s probably similar for Ext JS 6 Modern toolkit and up.)</p>\n"},{"title":"How can I create a Google Map component to my Ext JS app?","url":"1655.html","id":"1655","date":"2015-09-28T09:58:02.000Z","_content":"\n!\\[Alt Text\\](http://)I created an example. Actually, I had an application myself I wanted to update. See here: [https://www.leeboonstra.com/senchaplaces/](https://www.leeboonstra.com/senchaplaces/), I am using a Google Map, with the markers from a store. 1) All my code is on Github, so you can download that and inspect it: [https://github.com/savelee/senchaplaces](https://github.com/savelee/senchaplaces) 2) [https://github.com/savelee/senchaplaces/blob/master/app/view/map/Map.js](https://github.com/savelee/senchaplaces/blob/master/app/view/map/Map.js) You will see on line 11, that I am including the **Geocode.js**. But I am actually not using it. If you are not planning to use Geocoding (for searching addresses, and moving the map), comment out this line. Otherwise put the Geocode file, into **app/utils**. On line 112, you will see that I expect, that every record in the store, has a field name: \"**latitude**\" and \"**longitude**\". In case this is different for your data; Either change it on this line. Or, you could create a field convert in your model. Something like:\n\n{\n\tname: 'latitude', //what the map needs\n\ttype: 'float',\n        depends: 'my-lat-string', //the name your data feed returned\n        convert: function(value, rec) {\n           return rec.get(\"my-lat-string\");\n        }\n},\n{\n\tname: 'longitude',\n\ttype: 'float',\n        depends: 'my-lng-string',\n        convert: function(value, rec) {\n          return rec.get(\"my-lng-string\");\n        }\n}\n\n3) **index.html** includes Google. You probably already have that: [https://github.com/savelee/senchaplaces/blob/master/index.html](https://github.com/savelee/senchaplaces/blob/master/index.html) 4) Now you need to wire it up. Take a look here: [https://github.com/savelee/senchaplaces/blob/master/app/view/main/Main.js](https://github.com/savelee/senchaplaces/blob/master/app/view/main/Main.js) On line 46, I add the xtype \"**map**\" . (on line 13, I add it to the **requires**). I pass in a custom **zoom** level. (that's optional), and I pass in a **location**, so Google Maps knows on which point it needs to center. (this is required, and I use the coords from Amsterdam) Line 52 binds the **store**. (in case you have the store wired up in the view model, it's required to see markers) Line 55, is an optional **listener**. I coded it there, in case you want to do something when you select a certain marker. For now it just logs the object and the city name.","source":"_drafts/how-tos/how-can-i-create-a-google-map-component-to-my-ext-js-app.md","raw":"---\ntitle: How can I create a Google Map component to my Ext JS app?\ntags:\n  - google maps\nurl: 1655.html\nid: 1655\ncategories:\n  - Ext JS 5 &amp; 6\n  - Questions\ndate: 2015-09-28 11:58:02\n---\n\n!\\[Alt Text\\](http://)I created an example. Actually, I had an application myself I wanted to update. See here: [https://www.leeboonstra.com/senchaplaces/](https://www.leeboonstra.com/senchaplaces/), I am using a Google Map, with the markers from a store. 1) All my code is on Github, so you can download that and inspect it: [https://github.com/savelee/senchaplaces](https://github.com/savelee/senchaplaces) 2) [https://github.com/savelee/senchaplaces/blob/master/app/view/map/Map.js](https://github.com/savelee/senchaplaces/blob/master/app/view/map/Map.js) You will see on line 11, that I am including the **Geocode.js**. But I am actually not using it. If you are not planning to use Geocoding (for searching addresses, and moving the map), comment out this line. Otherwise put the Geocode file, into **app/utils**. On line 112, you will see that I expect, that every record in the store, has a field name: \"**latitude**\" and \"**longitude**\". In case this is different for your data; Either change it on this line. Or, you could create a field convert in your model. Something like:\n\n{\n\tname: 'latitude', //what the map needs\n\ttype: 'float',\n        depends: 'my-lat-string', //the name your data feed returned\n        convert: function(value, rec) {\n           return rec.get(\"my-lat-string\");\n        }\n},\n{\n\tname: 'longitude',\n\ttype: 'float',\n        depends: 'my-lng-string',\n        convert: function(value, rec) {\n          return rec.get(\"my-lng-string\");\n        }\n}\n\n3) **index.html** includes Google. You probably already have that: [https://github.com/savelee/senchaplaces/blob/master/index.html](https://github.com/savelee/senchaplaces/blob/master/index.html) 4) Now you need to wire it up. Take a look here: [https://github.com/savelee/senchaplaces/blob/master/app/view/main/Main.js](https://github.com/savelee/senchaplaces/blob/master/app/view/main/Main.js) On line 46, I add the xtype \"**map**\" . (on line 13, I add it to the **requires**). I pass in a custom **zoom** level. (that's optional), and I pass in a **location**, so Google Maps knows on which point it needs to center. (this is required, and I use the coords from Amsterdam) Line 52 binds the **store**. (in case you have the store wired up in the view model, it's required to see markers) Line 55, is an optional **listener**. I coded it there, in case you want to do something when you select a certain marker. For now it just logs the object and the city name.","slug":"how-tos/how-can-i-create-a-google-map-component-to-my-ext-js-app","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncsz00dpkif537ssx9vi","content":"<p>![Alt Text](http://)I created an example. Actually, I had an application\n  myself I wanted to update. See here: <a href=\"https://www.leeboonstra.com/senchaplaces/\" target=\"_blank\" rel=\"noopener\">https://www.leeboonstra.com/senchaplaces/</a>,\n  I am using a Google Map, with the markers from a store. 1) All my code is on\n  Github, so you can download that and inspect it: <a href=\"https://github.com/savelee/senchaplaces\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/senchaplaces</a>\n  2) <a href=\"https://github.com/savelee/senchaplaces/blob/master/app/view/map/Map.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/senchaplaces/blob/master/app/view/map/Map.js</a>\n  You will see on line 11, that I am including the <strong>Geocode.js</strong>.\n  But I am actually not using it. If you are not planning to use Geocoding (for\n  searching addresses, and moving the map), comment out this line. Otherwise\n  put the Geocode file, into <strong>app/utils</strong>. On line 112, you will\n  see that I expect, that every record in the store, has a field name: “<strong>latitude</strong>“\n  and “<strong>longitude</strong>“. In case this is different for your data;\n  Either change it on this line. Or, you could create a field convert in your\n  model. Something like:</p>\n<p>{ name: ‘latitude’, //what the map needs type: ‘float’, depends:\n  ‘my-lat-string’, //the name your data feed returned convert: function(value,\n  rec) { return rec.get(“my-lat-string”); } }, { name: ‘longitude’, type:\n  ‘float’, depends: ‘my-lng-string’, convert: function(value, rec) { return\n  rec.get(“my-lng-string”); } }</p>\n<p>3) <strong>index.html</strong> includes Google. You probably already have\n  that: <a href=\"https://github.com/savelee/senchaplaces/blob/master/index.html\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/senchaplaces/blob/master/index.html</a>\n  4) Now you need to wire it up. Take a look here: <a href=\"https://github.com/savelee/senchaplaces/blob/master/app/view/main/Main.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/senchaplaces/blob/master/app/view/main/Main.js</a>\n  On line 46, I add the xtype “<strong>map</strong>“ . (on line 13, I add it to\n  the <strong>requires</strong>). I pass in a custom <strong>zoom</strong>\n  level. (that’s optional), and I pass in a <strong>location</strong>, so\n  Google Maps knows on which point it needs to center. (this is required, and I\n  use the coords from Amsterdam) Line 52 binds the <strong>store</strong>. (in\n  case you have the store wired up in the view model, it’s required to see\n  markers) Line 55, is an optional <strong>listener</strong>. I coded it there,\n  in case you want to do something when you select a certain marker. For now it\n  just logs the object and the city name.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>![Alt Text](http://)I created an example. Actually, I had an application\n  myself I wanted to update. See here: <a href=\"https://www.leeboonstra.com/senchaplaces/\" target=\"_blank\" rel=\"noopener\">https://www.leeboonstra.com/senchaplaces/</a>,\n  I am using a Google Map, with the markers from a store. 1) All my code is on\n  Github, so you can download that and inspect it: <a href=\"https://github.com/savelee/senchaplaces\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/senchaplaces</a>\n  2) <a href=\"https://github.com/savelee/senchaplaces/blob/master/app/view/map/Map.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/senchaplaces/blob/master/app/view/map/Map.js</a>\n  You will see on line 11, that I am including the <strong>Geocode.js</strong>.\n  But I am actually not using it. If you are not planning to use Geocoding (for\n  searching addresses, and moving the map), comment out this line. Otherwise\n  put the Geocode file, into <strong>app/utils</strong>. On line 112, you will\n  see that I expect, that every record in the store, has a field name: “<strong>latitude</strong>“\n  and “<strong>longitude</strong>“. In case this is different for your data;\n  Either change it on this line. Or, you could create a field convert in your\n  model. Something like:</p>\n<p>{ name: ‘latitude’, //what the map needs type: ‘float’, depends:\n  ‘my-lat-string’, //the name your data feed returned convert: function(value,\n  rec) { return rec.get(“my-lat-string”); } }, { name: ‘longitude’, type:\n  ‘float’, depends: ‘my-lng-string’, convert: function(value, rec) { return\n  rec.get(“my-lng-string”); } }</p>\n<p>3) <strong>index.html</strong> includes Google. You probably already have\n  that: <a href=\"https://github.com/savelee/senchaplaces/blob/master/index.html\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/senchaplaces/blob/master/index.html</a>\n  4) Now you need to wire it up. Take a look here: <a href=\"https://github.com/savelee/senchaplaces/blob/master/app/view/main/Main.js\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/senchaplaces/blob/master/app/view/main/Main.js</a>\n  On line 46, I add the xtype “<strong>map</strong>“ . (on line 13, I add it to\n  the <strong>requires</strong>). I pass in a custom <strong>zoom</strong>\n  level. (that’s optional), and I pass in a <strong>location</strong>, so\n  Google Maps knows on which point it needs to center. (this is required, and I\n  use the coords from Amsterdam) Line 52 binds the <strong>store</strong>. (in\n  case you have the store wired up in the view model, it’s required to see\n  markers) Line 55, is an optional <strong>listener</strong>. I coded it there,\n  in case you want to do something when you select a certain marker. For now it\n  just logs the object and the city name.</p>\n"},{"title":"Help with a tap delay on Android devices and Chrome browsers on iOS","url":"1657.html","id":"1657","date":"2014-09-28T10:08:15.000Z","_content":"\nOn android devices and chrome browsers on iOS we notice a perceptible delay when you tap a control and then it reacting to that tap. It gives the app on these devices a very sluggish feel. We came across the following…. Changing the meta tags... [http://updates.html5rocks.com/2013/12/300ms-tap-delay-gone-away](http://updates.html5rocks.com/2013/12/300ms-tap-delay-gone-away) Changing the sencha config…. [http://stackoverflow.com/questions/29949090/does-sencha-touch-include-a-fix-for-the-300ms-delay](http://stackoverflow.com/questions/29949090/does-sencha-touch-include-a-fix-for-the-300ms-delay) Is there either of these or any other approaches you would endorse for us to remove this delay? Answer: I would go with a config-based override, rather than tweaking meta tags. This helps ensure your overrides are kept in JS files where possible. The reason for this delay is to wait to see if a tap will become a double-tap. So if you use double-tap events in your app, changing the “maxDuration” may affect those events. There’s another way to specify “maxDuration”; by defining your own Recognizer class, and setting the class as part of “Ext.application”, in the “eventPublishers” config. See here: [http://docs.sencha.com/touch/2.4/2.4.2-apidocs/#!/api/Ext-method-application](http://docs.sencha.com/touch/2.4/2.4.2-apidocs/#!/api/Ext-method-application). But the override on that StackOverflow post would suffice.","source":"_drafts/how-tos/help-with-a-tap-delay-on-android-devices-and-chrome-browsers-on-ios.md","raw":"---\ntitle: Help with a tap delay on Android devices and Chrome browsers on iOS\nurl: 1657.html\nid: 1657\ncategories:\n  - Questions\ndate: 2014-09-28 12:08:15\ntags:\n---\n\nOn android devices and chrome browsers on iOS we notice a perceptible delay when you tap a control and then it reacting to that tap. It gives the app on these devices a very sluggish feel. We came across the following…. Changing the meta tags... [http://updates.html5rocks.com/2013/12/300ms-tap-delay-gone-away](http://updates.html5rocks.com/2013/12/300ms-tap-delay-gone-away) Changing the sencha config…. [http://stackoverflow.com/questions/29949090/does-sencha-touch-include-a-fix-for-the-300ms-delay](http://stackoverflow.com/questions/29949090/does-sencha-touch-include-a-fix-for-the-300ms-delay) Is there either of these or any other approaches you would endorse for us to remove this delay? Answer: I would go with a config-based override, rather than tweaking meta tags. This helps ensure your overrides are kept in JS files where possible. The reason for this delay is to wait to see if a tap will become a double-tap. So if you use double-tap events in your app, changing the “maxDuration” may affect those events. There’s another way to specify “maxDuration”; by defining your own Recognizer class, and setting the class as part of “Ext.application”, in the “eventPublishers” config. See here: [http://docs.sencha.com/touch/2.4/2.4.2-apidocs/#!/api/Ext-method-application](http://docs.sencha.com/touch/2.4/2.4.2-apidocs/#!/api/Ext-method-application). But the override on that StackOverflow post would suffice.","slug":"how-tos/help-with-a-tap-delay-on-android-devices-and-chrome-browsers-on-ios","published":0,"updated":"2018-11-25T12:42:59.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnct000drkif5yoz52mvo","content":"<p>On android devices and chrome browsers on iOS we notice a perceptible delay\n  when you tap a control and then it reacting to that tap. It gives the app on\n  these devices a very sluggish feel. We came across the following…. Changing\n  the meta tags… <a href=\"http://updates.html5rocks.com/2013/12/300ms-tap-delay-gone-away\" target=\"_blank\" rel=\"noopener\">http://updates.html5rocks.com/2013/12/300ms-tap-delay-gone-away</a>\n  Changing the sencha config…. <a href=\"http://stackoverflow.com/questions/29949090/does-sencha-touch-include-a-fix-for-the-300ms-delay\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/29949090/does-sencha-touch-include-a-fix-for-the-300ms-delay</a>\n  Is there either of these or any other approaches you would endorse for us to\n  remove this delay? Answer: I would go with a config-based override, rather\n  than tweaking meta tags. This helps ensure your overrides are kept in JS\n  files where possible. The reason for this delay is to wait to see if a tap\n  will become a double-tap. So if you use double-tap events in your app,\n  changing the “maxDuration” may affect those events. There’s another way to\n  specify “maxDuration”; by defining your own Recognizer class, and setting the\n  class as part of “Ext.application”, in the “eventPublishers” config. See\n  here: <a href=\"http://docs.sencha.com/touch/2.4/2.4.2-apidocs/#!/api/Ext-method-application\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/touch/2.4/2.4.2-apidocs/#!/api/Ext-method-application</a>.\n  But the override on that StackOverflow post would suffice.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>On android devices and chrome browsers on iOS we notice a perceptible delay\n  when you tap a control and then it reacting to that tap. It gives the app on\n  these devices a very sluggish feel. We came across the following…. Changing\n  the meta tags… <a href=\"http://updates.html5rocks.com/2013/12/300ms-tap-delay-gone-away\" target=\"_blank\" rel=\"noopener\">http://updates.html5rocks.com/2013/12/300ms-tap-delay-gone-away</a>\n  Changing the sencha config…. <a href=\"http://stackoverflow.com/questions/29949090/does-sencha-touch-include-a-fix-for-the-300ms-delay\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/29949090/does-sencha-touch-include-a-fix-for-the-300ms-delay</a>\n  Is there either of these or any other approaches you would endorse for us to\n  remove this delay? Answer: I would go with a config-based override, rather\n  than tweaking meta tags. This helps ensure your overrides are kept in JS\n  files where possible. The reason for this delay is to wait to see if a tap\n  will become a double-tap. So if you use double-tap events in your app,\n  changing the “maxDuration” may affect those events. There’s another way to\n  specify “maxDuration”; by defining your own Recognizer class, and setting the\n  class as part of “Ext.application”, in the “eventPublishers” config. See\n  here: <a href=\"http://docs.sencha.com/touch/2.4/2.4.2-apidocs/#!/api/Ext-method-application\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/touch/2.4/2.4.2-apidocs/#!/api/Ext-method-application</a>.\n  But the override on that StackOverflow post would suffice.</p>\n"},{"title":"How can I get started with Sencha?","url":"1609.html","id":"1609","date":"2015-09-28T09:04:23.000Z","_content":"\nThis link, might be helpful:\n\n*   [Getting Started overview](http://se.sencha.com/getting-started)","source":"_drafts/how-tos/how-can-i-get-started-with-sencha.md","raw":"---\ntitle: How can I get started with Sencha?\ntags:\n  - ext js 6\n  - getting started\nurl: 1609.html\nid: 1609\ncategories:\n  - Ext JS 5 &amp; 6\n  - Ext JS 6\ndate: 2015-09-28 11:04:23\n---\n\nThis link, might be helpful:\n\n*   [Getting Started overview](http://se.sencha.com/getting-started)","slug":"how-tos/how-can-i-get-started-with-sencha","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnct200dtkif5fl7d77lj","content":"<p>This link, might be helpful:</p>\n<ul>\n  <li><a href=\"http://se.sencha.com/getting-started\" target=\"_blank\" rel=\"noopener\">Getting Started overview</a></li>\n</ul>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>This link, might be helpful:</p>\n<ul>\n  <li><a href=\"http://se.sencha.com/getting-started\" target=\"_blank\" rel=\"noopener\">Getting Started overview</a></li>\n</ul>\n"},{"title":"How does Sencha support work?","url":"1672.html","id":"1672","date":"2015-09-28T10:41:01.000Z","_content":"\nSencha sells licenses from up to five seats. These are standard, pro or premium licenses. The standard license contains just the framework, where pro and premium, contain the framework and more development tools. You buy the license once, and you can build unlimited applications with that. With the all the 3 license tiers, it also includes 1 year support. - After the end of the year you can decide to renew the yearly support contract. With Sencha support, you will have access to our support portal, which contains download links to all our frameworks and tools you have access to. Even nightly builds, previous or newer framework/tools versions. The support portal is also the place where you can submit problems or ask questions. By default you will get 40 x-credits per year. When you use your x-credits on a problem, that has been a bug in the framework, you will get your credits back. We have an SLA, we will respond within 24 hours. It also includes access to the premium forums, where you can ask questions. Our (support) engineers are active on the premium forums. -- Only the support contract, needs to be renewed every year. When you don't support the support contract, you are still allowed to build applications with the license, however, you can't get access to newer Ext JS versions and fixes. Let's say, you purchase Ext JS 6 now. - and after a year you won't renew. In two years, we might have released Ext JS 8. You are still allowed to build Ext JS 6 applications, but to build Ext JS 8 apps, you will have to buy the license again. Where maintenance renewal cost a lot less each year: For standard license: $1,395; Pro: $2,194, Premium: $3,240.","source":"_drafts/how-tos/how-does-sencha-support-work.md","raw":"---\ntitle: How does Sencha support work?\ntags:\n  - licenses\n  - support\nurl: 1672.html\nid: 1672\ncategories:\n  - Questions\ndate: 2015-09-28 12:41:01\n---\n\nSencha sells licenses from up to five seats. These are standard, pro or premium licenses. The standard license contains just the framework, where pro and premium, contain the framework and more development tools. You buy the license once, and you can build unlimited applications with that. With the all the 3 license tiers, it also includes 1 year support. - After the end of the year you can decide to renew the yearly support contract. With Sencha support, you will have access to our support portal, which contains download links to all our frameworks and tools you have access to. Even nightly builds, previous or newer framework/tools versions. The support portal is also the place where you can submit problems or ask questions. By default you will get 40 x-credits per year. When you use your x-credits on a problem, that has been a bug in the framework, you will get your credits back. We have an SLA, we will respond within 24 hours. It also includes access to the premium forums, where you can ask questions. Our (support) engineers are active on the premium forums. -- Only the support contract, needs to be renewed every year. When you don't support the support contract, you are still allowed to build applications with the license, however, you can't get access to newer Ext JS versions and fixes. Let's say, you purchase Ext JS 6 now. - and after a year you won't renew. In two years, we might have released Ext JS 8. You are still allowed to build Ext JS 6 applications, but to build Ext JS 8 apps, you will have to buy the license again. Where maintenance renewal cost a lot less each year: For standard license: $1,395; Pro: $2,194, Premium: $3,240.","slug":"how-tos/how-does-sencha-support-work","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnct200dvkif5i3xqynqf","content":"<p>Sencha sells licenses from up to five seats. These are standard, pro or\n  premium licenses. The standard license contains just the framework, where pro\n  and premium, contain the framework and more development tools. You buy the\n  license once, and you can build unlimited applications with that. With the\n  all the 3 license tiers, it also includes 1 year support. - After the end of\n  the year you can decide to renew the yearly support contract. With Sencha\n  support, you will have access to our support portal, which contains download\n  links to all our frameworks and tools you have access to. Even nightly\n  builds, previous or newer framework/tools versions. The support portal is\n  also the place where you can submit problems or ask questions. By default you\n  will get 40 x-credits per year. When you use your x-credits on a problem,\n  that has been a bug in the framework, you will get your credits back. We have\n  an SLA, we will respond within 24 hours. It also includes access to the\n  premium forums, where you can ask questions. Our (support) engineers are\n  active on the premium forums. – Only the support contract, needs to be\n  renewed every year. When you don’t support the support contract, you are\n  still allowed to build applications with the license, however, you can’t get\n  access to newer Ext JS versions and fixes. Let’s say, you purchase Ext JS 6\n  now. - and after a year you won’t renew. In two years, we might have released\n  Ext JS 8. You are still allowed to build Ext JS 6 applications, but to build\n  Ext JS 8 apps, you will have to buy the license again. Where maintenance\n  renewal cost a lot less each year: For standard license: $1,395; Pro: $2,194,\n  Premium: $3,240.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Sencha sells licenses from up to five seats. These are standard, pro or\n  premium licenses. The standard license contains just the framework, where pro\n  and premium, contain the framework and more development tools. You buy the\n  license once, and you can build unlimited applications with that. With the\n  all the 3 license tiers, it also includes 1 year support. - After the end of\n  the year you can decide to renew the yearly support contract. With Sencha\n  support, you will have access to our support portal, which contains download\n  links to all our frameworks and tools you have access to. Even nightly\n  builds, previous or newer framework/tools versions. The support portal is\n  also the place where you can submit problems or ask questions. By default you\n  will get 40 x-credits per year. When you use your x-credits on a problem,\n  that has been a bug in the framework, you will get your credits back. We have\n  an SLA, we will respond within 24 hours. It also includes access to the\n  premium forums, where you can ask questions. Our (support) engineers are\n  active on the premium forums. – Only the support contract, needs to be\n  renewed every year. When you don’t support the support contract, you are\n  still allowed to build applications with the license, however, you can’t get\n  access to newer Ext JS versions and fixes. Let’s say, you purchase Ext JS 6\n  now. - and after a year you won’t renew. In two years, we might have released\n  Ext JS 8. You are still allowed to build Ext JS 6 applications, but to build\n  Ext JS 8 apps, you will have to buy the license again. Where maintenance\n  renewal cost a lot less each year: For standard license: $1,395; Pro: $2,194,\n  Premium: $3,240.</p>\n"},{"title":"\"Github Error: Permission to user/repo denied to user/other-repo\"","url":"1360.html","id":"1360","date":"2016-06-25T10:54:09.000Z","_content":"\nToday I came across the following problem on my Github CLI interface on Windows 10: \"Error: Permission to user/repo denied to user/other-repo\" This error means the key you are pushing with is attached to another repository as a deploy key, and does not have access to the repository you are trying to push to. I got this problem, because I tried to push to a different Github account than I usually do. Technically, you should be able to add the user email to the git config like this:\n\ngit config user.name \"Billy Everyteen\"\n\\# Set a new name\ngit config user.name\n\\# Verify the setting\nBilly Everyteen\n\n\ngit config --global --unset-all\n#remove user configs\n\nHowever, this didn't work for me. It still was using my old username. This old username comes from your Git keys. You can just remove it from the Credential Manager (for a Mac OSX it's probably in the Key Chain tool). The next time you make a Push with Git, it will ask again for your Github username and password. For Windows you can find the keys here: control panel > user accounts > credential manager > Windows credentials > Generic credentials Next remove the Github keys.","source":"_drafts/how-tos/github-error-permission-to-userrepo-denied-to-userother-repo.md","raw":"---\ntitle: '\"Github Error: Permission to user/repo denied to user/other-repo\"'\ntags:\n  - git\n  - github\n  - permission error\n  - useraccounts\nurl: 1360.html\nid: 1360\ncategories:\n  - Git\ndate: 2016-06-25 12:54:09\n---\n\nToday I came across the following problem on my Github CLI interface on Windows 10: \"Error: Permission to user/repo denied to user/other-repo\" This error means the key you are pushing with is attached to another repository as a deploy key, and does not have access to the repository you are trying to push to. I got this problem, because I tried to push to a different Github account than I usually do. Technically, you should be able to add the user email to the git config like this:\n\ngit config user.name \"Billy Everyteen\"\n\\# Set a new name\ngit config user.name\n\\# Verify the setting\nBilly Everyteen\n\n\ngit config --global --unset-all\n#remove user configs\n\nHowever, this didn't work for me. It still was using my old username. This old username comes from your Git keys. You can just remove it from the Credential Manager (for a Mac OSX it's probably in the Key Chain tool). The next time you make a Push with Git, it will ask again for your Github username and password. For Windows you can find the keys here: control panel > user accounts > credential manager > Windows credentials > Generic credentials Next remove the Github keys.","slug":"how-tos/github-error-permission-to-userrepo-denied-to-userother-repo","published":0,"updated":"2018-11-25T12:43:53.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnct400dzkif50c7xep5m","content":"<p>Today I came across the following problem on my Github CLI interface on\n  Windows 10: “Error: Permission to user/repo denied to user/other-repo” This\n  error means the key you are pushing with is attached to another repository as\n  a deploy key, and does not have access to the repository you are trying to\n  push to. I got this problem, because I tried to push to a different Github\n  account than I usually do. Technically, you should be able to add the user\n  email to the git config like this:</p>\n<p>git config user.name “Billy Everyteen” # Set a new name git config user.name\n  # Verify the setting Billy Everyteen</p>\n<p>git config –global –unset-all</p>\n<p>#remove user configs</p>\n<p>However, this didn’t work for me. It still was using my old username. This\n  old username comes from your Git keys. You can just remove it from the\n  Credential Manager (for a Mac OSX it’s probably in the Key Chain tool). The\n  next time you make a Push with Git, it will ask again for your Github\n  username and password. For Windows you can find the keys here: control panel\n  &gt; user accounts &gt; credential manager &gt; Windows credentials &gt;\n  Generic credentials Next remove the Github keys.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Today I came across the following problem on my Github CLI interface on\n  Windows 10: “Error: Permission to user/repo denied to user/other-repo” This\n  error means the key you are pushing with is attached to another repository as\n  a deploy key, and does not have access to the repository you are trying to\n  push to. I got this problem, because I tried to push to a different Github\n  account than I usually do. Technically, you should be able to add the user\n  email to the git config like this:</p>\n<p>git config user.name “Billy Everyteen” # Set a new name git config user.name\n  # Verify the setting Billy Everyteen</p>\n<p>git config –global –unset-all</p>\n<p>#remove user configs</p>\n<p>However, this didn’t work for me. It still was using my old username. This\n  old username comes from your Git keys. You can just remove it from the\n  Credential Manager (for a Mac OSX it’s probably in the Key Chain tool). The\n  next time you make a Push with Git, it will ask again for your Github\n  username and password. For Windows you can find the keys here: control panel\n  &gt; user accounts &gt; credential manager &gt; Windows credentials &gt;\n  Generic credentials Next remove the Github keys.</p>\n"},{"title":"How does suspendLayout work?","url":"1647.html","id":"1647","date":"2015-09-28T09:50:48.000Z","_content":"\nWhen you have a view, which needs to be dynamically populated by records from a Store. It often might perform much better, when you suspend (pause) the layout, run your behaviour and resume the layout back again. This blog post describes it really well: \\[http://www.sencha.com/blog/exploring-the-layout-system-in-ext-js-5-and-sencha-touch/\\](http://www.sencha.com/blog/exploring-the-layout-system-in-ext-js-5-and-sencha-touch/)\n\nExt.suspendLayouts();\n// do stuff...\nExt.resumeLayouts(true);\n\nUsing this optimization technique will usually improve performance for Ext JS applications because we can avoid making many modifications to the DOM tree at once. This is particularly important on mobile devices (e.g. tablets) as they typically have less powerful processors compared to desktop computers.","source":"_drafts/how-tos/how-does-suspendlayout-work.md","raw":"---\ntitle: How does suspendLayout work?\ntags:\n  - layout\n  - layout rendering\n  - resumeLayout\n  - suspendLayout\nurl: 1647.html\nid: 1647\ncategories:\n  - Ext JS 5 &amp; 6\n  - Questions\ndate: 2015-09-28 11:50:48\n---\n\nWhen you have a view, which needs to be dynamically populated by records from a Store. It often might perform much better, when you suspend (pause) the layout, run your behaviour and resume the layout back again. This blog post describes it really well: \\[http://www.sencha.com/blog/exploring-the-layout-system-in-ext-js-5-and-sencha-touch/\\](http://www.sencha.com/blog/exploring-the-layout-system-in-ext-js-5-and-sencha-touch/)\n\nExt.suspendLayouts();\n// do stuff...\nExt.resumeLayouts(true);\n\nUsing this optimization technique will usually improve performance for Ext JS applications because we can avoid making many modifications to the DOM tree at once. This is particularly important on mobile devices (e.g. tablets) as they typically have less powerful processors compared to desktop computers.","slug":"how-tos/how-does-suspendlayout-work","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnct400e2kif5z5pg9i81","content":"<p>When you have a view, which needs to be dynamically populated by records\n  from a Store. It often might perform much better, when you suspend (pause)\n  the layout, run your behaviour and resume the layout back again. This blog\n  post describes it really well: [<a href=\"http://www.sencha.com/blog/exploring-the-layout-system-in-ext-js-5-and-sencha-touch/\\](http://www.sencha.com/blog/exploring-the-layout-system-in-ext-js-5-and-sencha-touch/)\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/blog/exploring-the-layout-system-in-ext-js-5-and-sencha-touch/\\](http://www.sencha.com/blog/exploring-the-layout-system-in-ext-js-5-and-sencha-touch/)</a></p>\n<p>Ext.suspendLayouts(); // do stuff… Ext.resumeLayouts(true);</p>\n<p>Using this optimization technique will usually improve performance for Ext\n  JS applications because we can avoid making many modifications to the DOM\n  tree at once. This is particularly important on mobile devices (e.g. tablets)\n  as they typically have less powerful processors compared to desktop\n  computers.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>When you have a view, which needs to be dynamically populated by records\n  from a Store. It often might perform much better, when you suspend (pause)\n  the layout, run your behaviour and resume the layout back again. This blog\n  post describes it really well: [<a href=\"http://www.sencha.com/blog/exploring-the-layout-system-in-ext-js-5-and-sencha-touch/\\](http://www.sencha.com/blog/exploring-the-layout-system-in-ext-js-5-and-sencha-touch/)\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/blog/exploring-the-layout-system-in-ext-js-5-and-sencha-touch/\\](http://www.sencha.com/blog/exploring-the-layout-system-in-ext-js-5-and-sencha-touch/)</a></p>\n<p>Ext.suspendLayouts(); // do stuff… Ext.resumeLayouts(true);</p>\n<p>Using this optimization technique will usually improve performance for Ext\n  JS applications because we can avoid making many modifications to the DOM\n  tree at once. This is particularly important on mobile devices (e.g. tablets)\n  as they typically have less powerful processors compared to desktop\n  computers.</p>\n"},{"title":"How to activate Sencha Architect behind a firewall?","url":"1611.html","id":"1611","date":"2015-09-28T09:07:04.000Z","_content":"\nContact Sencha Sales. The user will need to send the sencha forum id, and Mac address. Vicki Pelc within Sencha, will generate an offline license file. It needs to be copied to the following folder: \\[http://www.wikihow.com/Find-the-MAC-Address-of-Your-Computer\\](http://www.wikihow.com/Find-the-MAC-Address-of-Your-Computer) OS License Location Architect 4 Windows XP C:\\\\Documents and Settings\\\\\\Local Settings\\\\Application Data\\\\Sencha\\\\Sencha Architect 4 Windows Vista/7 C\\\\:Users\\\\\\AppData\\\\Local\\\\Sencha\\\\Sencha Architect 4 Linux ~/.local/share/data/Sencha/Sencha Architect 4/ Mac OS X ~/Library/Application Support/Sencha/Sencha Architect 4/","source":"_drafts/how-tos/how-to-activate-sencha-architect-behind-a-firewall.md","raw":"---\ntitle: How to activate Sencha Architect behind a firewall?\ntags:\n  - architect\nurl: 1611.html\nid: 1611\ncategories:\n  - Questions\ndate: 2015-09-28 11:07:04\n---\n\nContact Sencha Sales. The user will need to send the sencha forum id, and Mac address. Vicki Pelc within Sencha, will generate an offline license file. It needs to be copied to the following folder: \\[http://www.wikihow.com/Find-the-MAC-Address-of-Your-Computer\\](http://www.wikihow.com/Find-the-MAC-Address-of-Your-Computer) OS License Location Architect 4 Windows XP C:\\\\Documents and Settings\\\\\\Local Settings\\\\Application Data\\\\Sencha\\\\Sencha Architect 4 Windows Vista/7 C\\\\:Users\\\\\\AppData\\\\Local\\\\Sencha\\\\Sencha Architect 4 Linux ~/.local/share/data/Sencha/Sencha Architect 4/ Mac OS X ~/Library/Application Support/Sencha/Sencha Architect 4/","slug":"how-tos/how-to-activate-sencha-architect-behind-a-firewall","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnct600e6kif5fihc9xje","content":"<p>Contact Sencha Sales. The user will need to send the sencha forum id, and\n  Mac address. Vicki Pelc within Sencha, will generate an offline license file.\n  It needs to be copied to the following folder: [<a href=\"http://www.wikihow.com/Find-the-MAC-Address-of-Your-Computer\\](http://www.wikihow.com/Find-the-MAC-Address-of-Your-Computer)\" target=\"_blank\" rel=\"noopener\">http://www.wikihow.com/Find-the-MAC-Address-of-Your-Computer\\](http://www.wikihow.com/Find-the-MAC-Address-of-Your-Computer)</a>\n  OS License Location Architect 4 Windows XP C:\\Documents and Settings\\\\Local\n  Settings\\Application Data\\Sencha\\Sencha Architect 4 Windows Vista/7\n  C\\:Users\\\\AppData\\Local\\Sencha\\Sencha Architect 4 Linux\n  ~/.local/share/data/Sencha/Sencha Architect 4/ Mac OS X ~/Library/Application\n  Support/Sencha/Sencha Architect 4/</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Contact Sencha Sales. The user will need to send the sencha forum id, and\n  Mac address. Vicki Pelc within Sencha, will generate an offline license file.\n  It needs to be copied to the following folder: [<a href=\"http://www.wikihow.com/Find-the-MAC-Address-of-Your-Computer\\](http://www.wikihow.com/Find-the-MAC-Address-of-Your-Computer)\" target=\"_blank\" rel=\"noopener\">http://www.wikihow.com/Find-the-MAC-Address-of-Your-Computer\\](http://www.wikihow.com/Find-the-MAC-Address-of-Your-Computer)</a>\n  OS License Location Architect 4 Windows XP C:\\Documents and Settings\\\\Local\n  Settings\\Application Data\\Sencha\\Sencha Architect 4 Windows Vista/7\n  C\\:Users\\\\AppData\\Local\\Sencha\\Sencha Architect 4 Linux\n  ~/.local/share/data/Sencha/Sencha Architect 4/ Mac OS X ~/Library/Application\n  Support/Sencha/Sencha Architect 4/</p>\n"},{"title":"How does the Sencha Test Event Recorder work?","url":"1662.html","id":"1662","date":"2015-09-28T10:29:45.000Z","_content":"\n##About the event recorder: \"The event recorder allows you to quickly grab events, as you go about performing various actions on the application under test (AUT). The event recorder leverages many methods to arrive at the right property to create stable tests. The default methodology adopted by the event recorder is to use a combination of Component Query and DOM selector to find the stable property for a particular component such as a “check box” or “combo box”. It also allows you to choose from XPATH or ID based on your preference. Tests can be executed manually on a developer’s machine at the stage of application development as well as integrated with a CI process for regression tests. The CI system invokes the build agent and runs the tests against the AUT and posts results back to the Sencha Test Archiver. Unlike the results in a CI environment that are in plain HTML or text file format, the test results in Sencha Test are provided in a rich, matrix format. You can view the results in Sencha Test and can drill down into failed tests for additional information.\" ##How it works 1. Open a test scenario script. 2. First look into your \\*log\\* tab, to figure out where your Test server is parked. (For example localhost:8800). Then visit it in the browser. 3. Write an \\`it\\` block and put the cursor in it.\n\n   it(\"Should enter username before running all test.\", function() {\n        //cursor here\n    });\n\n4\\. Click the \\*Event Recorder\\* button, and select the browser that you are using for the recording. 5. Now go back to the browser, click on wherever you want to click, and make your UI action, which needs to be recorded. 6. When done, click on the \\*Insert Event Recording\\* button, in the Test Studio. You will see that the Event Recorder wrote specific \\`play()\\` syntax, something like this:\n\n   it(\"Should enter username before running all test.\", function() {\n        ST.play(\\[\n            { type: \"tap\", target: \"@ext-element-9\", x: 124, y: 207 },\n            { type: \"tap\", target: \"@button-1005-btnInnerEl\", x: 13, y: 10446 },\n            { type: \"tap\", target: \"@textfield-1014-inputEl\", x: 108, y: 14 },\n            { type: \"type\", target: \"@textfield-1014-inputEl\", text: \"savelee\" },\n            { type: \"tap\", target: \"@combobox-1015-trigger-picker\", x: 14, y: 17 },\n            { type: \"mousedown\", target: \"@combobox-1015-picker-listEl/li\\[2\\]\", x: 108, y: 339, detail: 1 },\n            { type: \"mouseup\", target: \"@ext-element-12\", x: 108, y: 339, detail: 1 },\n            { type: \"click\", target: \"@ext-element-12\", x: 108, y: 339, detail: 1 },\n            { type: \"tap\", target: \"@button-1017-btnInnerEl\", x: 6, y: 13 }\n        \\]);\n    });\n\nThis is a piece of script that you play.","source":"_drafts/how-tos/how-does-the-sencha-test-event-recorder-work.md","raw":"---\ntitle: How does the Sencha Test Event Recorder work?\ntags:\n  - Event Recorder\n  - sencha test\nurl: 1662.html\nid: 1662\ncategories:\n  - Questions\n  - Sencha Test\ndate: 2015-09-28 12:29:45\n---\n\n##About the event recorder: \"The event recorder allows you to quickly grab events, as you go about performing various actions on the application under test (AUT). The event recorder leverages many methods to arrive at the right property to create stable tests. The default methodology adopted by the event recorder is to use a combination of Component Query and DOM selector to find the stable property for a particular component such as a “check box” or “combo box”. It also allows you to choose from XPATH or ID based on your preference. Tests can be executed manually on a developer’s machine at the stage of application development as well as integrated with a CI process for regression tests. The CI system invokes the build agent and runs the tests against the AUT and posts results back to the Sencha Test Archiver. Unlike the results in a CI environment that are in plain HTML or text file format, the test results in Sencha Test are provided in a rich, matrix format. You can view the results in Sencha Test and can drill down into failed tests for additional information.\" ##How it works 1. Open a test scenario script. 2. First look into your \\*log\\* tab, to figure out where your Test server is parked. (For example localhost:8800). Then visit it in the browser. 3. Write an \\`it\\` block and put the cursor in it.\n\n   it(\"Should enter username before running all test.\", function() {\n        //cursor here\n    });\n\n4\\. Click the \\*Event Recorder\\* button, and select the browser that you are using for the recording. 5. Now go back to the browser, click on wherever you want to click, and make your UI action, which needs to be recorded. 6. When done, click on the \\*Insert Event Recording\\* button, in the Test Studio. You will see that the Event Recorder wrote specific \\`play()\\` syntax, something like this:\n\n   it(\"Should enter username before running all test.\", function() {\n        ST.play(\\[\n            { type: \"tap\", target: \"@ext-element-9\", x: 124, y: 207 },\n            { type: \"tap\", target: \"@button-1005-btnInnerEl\", x: 13, y: 10446 },\n            { type: \"tap\", target: \"@textfield-1014-inputEl\", x: 108, y: 14 },\n            { type: \"type\", target: \"@textfield-1014-inputEl\", text: \"savelee\" },\n            { type: \"tap\", target: \"@combobox-1015-trigger-picker\", x: 14, y: 17 },\n            { type: \"mousedown\", target: \"@combobox-1015-picker-listEl/li\\[2\\]\", x: 108, y: 339, detail: 1 },\n            { type: \"mouseup\", target: \"@ext-element-12\", x: 108, y: 339, detail: 1 },\n            { type: \"click\", target: \"@ext-element-12\", x: 108, y: 339, detail: 1 },\n            { type: \"tap\", target: \"@button-1017-btnInnerEl\", x: 6, y: 13 }\n        \\]);\n    });\n\nThis is a piece of script that you play.","slug":"how-tos/how-does-the-sencha-test-event-recorder-work","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnct700eakif5oa0miytg","content":"<p>##About the event recorder: “The event recorder allows you to quickly grab\n  events, as you go about performing various actions on the application under\n  test (AUT). The event recorder leverages many methods to arrive at the right\n  property to create stable tests. The default methodology adopted by the event\n  recorder is to use a combination of Component Query and DOM selector to find\n  the stable property for a particular component such as a “check box” or\n  “combo box”. It also allows you to choose from XPATH or ID based on your\n  preference. Tests can be executed manually on a developer’s machine at the\n  stage of application development as well as integrated with a CI process for\n  regression tests. The CI system invokes the build agent and runs the tests\n  against the AUT and posts results back to the Sencha Test Archiver. Unlike\n  the results in a CI environment that are in plain HTML or text file format,\n  the test results in Sencha Test are provided in a rich, matrix format. You\n  can view the results in Sencha Test and can drill down into failed tests for\n  additional information.” ##How it works 1. Open a test scenario script. 2.\n  First look into your *log* tab, to figure out where your Test server is\n  parked. (For example localhost:8800). Then visit it in the browser. 3. Write\n  an `it` block and put the cursor in it.</p>\n<p>it(“Should enter username before running all test.”, function() { //cursor\n  here });</p>\n<p>4. Click the *Event Recorder* button, and select the browser that you are\n  using for the recording. 5. Now go back to the browser, click on wherever you\n  want to click, and make your UI action, which needs to be recorded. 6. When\n  done, click on the *Insert Event Recording* button, in the Test Studio. You\n  will see that the Event Recorder wrote specific `play()` syntax, something\n  like this:</p>\n<p>it(“Should enter username before running all test.”, function() { ST.play([\n  { type: “tap”, target: “@ext-element-9”, x: 124, y: 207 }, { type: “tap”,\n  target: “@button-1005-btnInnerEl”, x: 13, y: 10446 }, { type: “tap”, target:\n  “@textfield-1014-inputEl”, x: 108, y: 14 }, { type: “type”, target:\n  “@textfield-1014-inputEl”, text: “savelee” }, { type: “tap”, target:\n  “@combobox-1015-trigger-picker”, x: 14, y: 17 }, { type: “mousedown”, target:\n  “@combobox-1015-picker-listEl/li[2]“, x: 108, y: 339, detail: 1 }, { type:\n  “mouseup”, target: “@ext-element-12”, x: 108, y: 339, detail: 1 }, { type:\n  “click”, target: “@ext-element-12”, x: 108, y: 339, detail: 1 }, { type:\n  “tap”, target: “@button-1017-btnInnerEl”, x: 6, y: 13 } ]); });</p>\n<p>This is a piece of script that you play.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>##About the event recorder: “The event recorder allows you to quickly grab\n  events, as you go about performing various actions on the application under\n  test (AUT). The event recorder leverages many methods to arrive at the right\n  property to create stable tests. The default methodology adopted by the event\n  recorder is to use a combination of Component Query and DOM selector to find\n  the stable property for a particular component such as a “check box” or\n  “combo box”. It also allows you to choose from XPATH or ID based on your\n  preference. Tests can be executed manually on a developer’s machine at the\n  stage of application development as well as integrated with a CI process for\n  regression tests. The CI system invokes the build agent and runs the tests\n  against the AUT and posts results back to the Sencha Test Archiver. Unlike\n  the results in a CI environment that are in plain HTML or text file format,\n  the test results in Sencha Test are provided in a rich, matrix format. You\n  can view the results in Sencha Test and can drill down into failed tests for\n  additional information.” ##How it works 1. Open a test scenario script. 2.\n  First look into your *log* tab, to figure out where your Test server is\n  parked. (For example localhost:8800). Then visit it in the browser. 3. Write\n  an `it` block and put the cursor in it.</p>\n<p>it(“Should enter username before running all test.”, function() { //cursor\n  here });</p>\n<p>4. Click the *Event Recorder* button, and select the browser that you are\n  using for the recording. 5. Now go back to the browser, click on wherever you\n  want to click, and make your UI action, which needs to be recorded. 6. When\n  done, click on the *Insert Event Recording* button, in the Test Studio. You\n  will see that the Event Recorder wrote specific `play()` syntax, something\n  like this:</p>\n<p>it(“Should enter username before running all test.”, function() { ST.play([\n  { type: “tap”, target: “@ext-element-9”, x: 124, y: 207 }, { type: “tap”,\n  target: “@button-1005-btnInnerEl”, x: 13, y: 10446 }, { type: “tap”, target:\n  “@textfield-1014-inputEl”, x: 108, y: 14 }, { type: “type”, target:\n  “@textfield-1014-inputEl”, text: “savelee” }, { type: “tap”, target:\n  “@combobox-1015-trigger-picker”, x: 14, y: 17 }, { type: “mousedown”, target:\n  “@combobox-1015-picker-listEl/li[2]“, x: 108, y: 339, detail: 1 }, { type:\n  “mouseup”, target: “@ext-element-12”, x: 108, y: 339, detail: 1 }, { type:\n  “click”, target: “@ext-element-12”, x: 108, y: 339, detail: 1 }, { type:\n  “tap”, target: “@button-1017-btnInnerEl”, x: 6, y: 13 } ]); });</p>\n<p>This is a piece of script that you play.</p>\n"},{"title":"How do model associations work?","url":"1645.html","id":"1645","date":"2015-09-28T09:49:55.000Z","_content":"\nPlease see: \\[https://fiddle.sencha.com/#fiddle/iha \\](https://fiddle.sencha.com/#fiddle/iha ) \\*\\*How it works:\\*\\* When you run this fiddle, and you click on a Customer. It will load in the 2nd grid the Order. In the bottom of the fiddle, there is a slide out menu, you can click that, to view all the files. \\*feedFull.json\\* - is one single json file, with nested data. Customers with nested Orders. * Please see the \\*model/Customer.js\\* model. You will see the proxy to retrieve this feed. And a hasMany relation to Orders. * Open \\*model/Order.js\\*, You will see the fields for order data. One with a date convert, and one with a custom convert. - (When you run this example in your browser, you will see that the browser reaches these converts) * \\*model/Base.js\\* sets the schema. This is new in Ext JS 5. It makes it easier for models to find each other... (I left some other code in these examples too. If you enable those, you can see how model relations work when having multiple requests) * \\*main/ViewModel.js\\* - wires up the customer store with its Customer model. * \\*main/Main.js\\* - just contains the grid. * \\*main/MainController.js\\* - The viewcontroller which configures the grid, after clicking on a Customer). I left some sample code there. \\*\\*Additional resources:\\*\\* \\[http://docs.sencha.com/extjs/5.1/core\\_concepts/data\\_package.html#Associations\\](http://docs.sencha.com/extjs/5.1/core\\_concepts/data\\_package.html#Associations) \\[private role=\"administrator\"\\] It is important that fields in the feed match. Please see the json and note, histories object. Which maps the History Store name histories. (I think you can set the name of the store with the \\`name\\` attribute in the hasMany relation) \\[https://fiddle.sencha.com/#fiddle/ihq\\](https://fiddle.sencha.com/#fiddle/ihq)","source":"_drafts/how-tos/how-do-model-associations-work.md","raw":"---\ntitle: How do model associations work?\ntags:\n  - Associations\n  - Models\n  - Relationships\nurl: 1645.html\nid: 1645\ncategories:\n  - Ext JS 5 &amp; 6\n  - Questions\ndate: 2015-09-28 11:49:55\n---\n\nPlease see: \\[https://fiddle.sencha.com/#fiddle/iha \\](https://fiddle.sencha.com/#fiddle/iha ) \\*\\*How it works:\\*\\* When you run this fiddle, and you click on a Customer. It will load in the 2nd grid the Order. In the bottom of the fiddle, there is a slide out menu, you can click that, to view all the files. \\*feedFull.json\\* - is one single json file, with nested data. Customers with nested Orders. * Please see the \\*model/Customer.js\\* model. You will see the proxy to retrieve this feed. And a hasMany relation to Orders. * Open \\*model/Order.js\\*, You will see the fields for order data. One with a date convert, and one with a custom convert. - (When you run this example in your browser, you will see that the browser reaches these converts) * \\*model/Base.js\\* sets the schema. This is new in Ext JS 5. It makes it easier for models to find each other... (I left some other code in these examples too. If you enable those, you can see how model relations work when having multiple requests) * \\*main/ViewModel.js\\* - wires up the customer store with its Customer model. * \\*main/Main.js\\* - just contains the grid. * \\*main/MainController.js\\* - The viewcontroller which configures the grid, after clicking on a Customer). I left some sample code there. \\*\\*Additional resources:\\*\\* \\[http://docs.sencha.com/extjs/5.1/core\\_concepts/data\\_package.html#Associations\\](http://docs.sencha.com/extjs/5.1/core\\_concepts/data\\_package.html#Associations) \\[private role=\"administrator\"\\] It is important that fields in the feed match. Please see the json and note, histories object. Which maps the History Store name histories. (I think you can set the name of the store with the \\`name\\` attribute in the hasMany relation) \\[https://fiddle.sencha.com/#fiddle/ihq\\](https://fiddle.sencha.com/#fiddle/ihq)","slug":"how-tos/how-do-model-associations-work","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnct800eekif5t8pk1e2k","content":"<p>Please see: [<a href=\"https://fiddle.sencha.com/#fiddle/iha\" target=\"_blank\" rel=\"noopener\">https://fiddle.sencha.com/#fiddle/iha</a>\n  ](<a href=\"https://fiddle.sencha.com/#fiddle/iha\" target=\"_blank\" rel=\"noopener\">https://fiddle.sencha.com/#fiddle/iha</a>\n  ) **How it works:** When you run this fiddle, and you click on a Customer. It\n  will load in the 2nd grid the Order. In the bottom of the fiddle, there is a\n  slide out menu, you can click that, to view all the files. *feedFull.json* -\n  is one single json file, with nested data. Customers with nested Orders. <em>Please\n    see the \\</em>model/Customer.js* model. You will see the proxy to retrieve\n  this feed. And a hasMany relation to Orders. <em>Open \\</em>model/Order.js*,\n  You will see the fields for order data. One with a date convert, and one with\n  a custom convert. - (When you run this example in your browser, you will see\n  that the browser reaches these converts) <em>\\</em>model/Base.js* sets the\n  schema. This is new in Ext JS 5. It makes it easier for models to find each\n  other… (I left some other code in these examples too. If you enable those,\n  you can see how model relations work when having multiple requests) <em>\\</em>main/ViewModel.js*\n  - wires up the customer store with its Customer model. <em>\\</em>main/Main.js*\n  - just contains the grid. <em>\\</em>main/MainController.js* - The\n  viewcontroller which configures the grid, after clicking on a Customer). I\n  left some sample code there. **Additional resources:** [<a href=\"http://docs.sencha.com/extjs/5.1/core\\_concepts/data\\_package.html#Associations\\](http://docs.sencha.com/extjs/5.1/core\\_concepts/data\\_package.html#Associations)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/5.1/core\\_concepts/data\\_package.html#Associations\\](http://docs.sencha.com/extjs/5.1/core\\_concepts/data\\_package.html#Associations)</a>\n  [private role=”administrator”] It is important that fields in the feed match.\n  Please see the json and note, histories object. Which maps the History Store\n  name histories. (I think you can set the name of the store with the `name`\n  attribute in the hasMany relation) [<a href=\"https://fiddle.sencha.com/#fiddle/ihq\\](https://fiddle.sencha.com/#fiddle/ihq)\" target=\"_blank\" rel=\"noopener\">https://fiddle.sencha.com/#fiddle/ihq\\](https://fiddle.sencha.com/#fiddle/ihq)</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Please see: [<a href=\"https://fiddle.sencha.com/#fiddle/iha\" target=\"_blank\" rel=\"noopener\">https://fiddle.sencha.com/#fiddle/iha</a>\n  ](<a href=\"https://fiddle.sencha.com/#fiddle/iha\" target=\"_blank\" rel=\"noopener\">https://fiddle.sencha.com/#fiddle/iha</a>\n  ) **How it works:** When you run this fiddle, and you click on a Customer. It\n  will load in the 2nd grid the Order. In the bottom of the fiddle, there is a\n  slide out menu, you can click that, to view all the files. *feedFull.json* -\n  is one single json file, with nested data. Customers with nested Orders. <em>Please\n    see the \\</em>model/Customer.js* model. You will see the proxy to retrieve\n  this feed. And a hasMany relation to Orders. <em>Open \\</em>model/Order.js*,\n  You will see the fields for order data. One with a date convert, and one with\n  a custom convert. - (When you run this example in your browser, you will see\n  that the browser reaches these converts) <em>\\</em>model/Base.js* sets the\n  schema. This is new in Ext JS 5. It makes it easier for models to find each\n  other… (I left some other code in these examples too. If you enable those,\n  you can see how model relations work when having multiple requests) <em>\\</em>main/ViewModel.js*\n  - wires up the customer store with its Customer model. <em>\\</em>main/Main.js*\n  - just contains the grid. <em>\\</em>main/MainController.js* - The\n  viewcontroller which configures the grid, after clicking on a Customer). I\n  left some sample code there. **Additional resources:** [<a href=\"http://docs.sencha.com/extjs/5.1/core\\_concepts/data\\_package.html#Associations\\](http://docs.sencha.com/extjs/5.1/core\\_concepts/data\\_package.html#Associations)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/5.1/core\\_concepts/data\\_package.html#Associations\\](http://docs.sencha.com/extjs/5.1/core\\_concepts/data\\_package.html#Associations)</a>\n  [private role=”administrator”] It is important that fields in the feed match.\n  Please see the json and note, histories object. Which maps the History Store\n  name histories. (I think you can set the name of the store with the `name`\n  attribute in the hasMany relation) [<a href=\"https://fiddle.sencha.com/#fiddle/ihq\\](https://fiddle.sencha.com/#fiddle/ihq)\" target=\"_blank\" rel=\"noopener\">https://fiddle.sencha.com/#fiddle/ihq\\](https://fiddle.sencha.com/#fiddle/ihq)</a></p>\n"},{"title":"How does ST.screenshot work?","url":"1664.html","id":"1664","date":"2015-09-28T10:33:50.000Z","_content":"\nOne of the powerful capabilities of Sencha Test is the ability to capture screenshots during test runs. By default, on the first test run, captured screenshots will be used as the baseline. Any future screenshots will be compared with that baseline and any differences in the captured UI, such as a shift in pixels, or missing components, will be flagged as a failure. This functionality doesn't work in the first version of Sencha Test studio. It does work via the command-line interface: stc. You will need to have a TestArchive setup. \\[http://docs.sencha.com/sencha\\_test/ST.html#method-screenshot\\](http://docs.sencha.com/sencha\\_test/ST.html#method-screenshot)\n\n describe(\"initial state\", function(){\n    it(\"should match the expected screenshot\", function(done) {\n                ST.screenshot('email', done);\n }, 30000);\n\nThe resolution of the image, is the resolution of your running browser. For example one of my screenshots has 1040x642px and is 35kb, which will be stored the test archive server. (you will need to setup the Test Archiver). (I run it locally on my machine with \"stc server\"). The extension is PNG. (i am not 100% sure, but it could be that under the hood this script has been used: https://huddle.github.io/Resemble.js/). The first image is stored in folder baseline and then you must go deeper. Then you can change baseline in ST or replace this image in folder - it is up to you. (There is a -b command to change the baseline.) -- \\*\\*How often is the screen of driven browser captured? Is it based on event (test passes/test fails) or is it time based (i.e. each 5 seconds)?\\*\\* The screenshot API functionality is mainly for visual screen comparison capability. The screen is captured wherever the screenshot api is called from the test case. \\*\\*What is the format, resolution and size of the outputted captured images?\\*\\* Right now there is no settings for format or resolution that the user can make. The images are .PNG files. The size of the image is around 50KB - 500 KB based on the content on the screen(approximately). The resolution is depended on the browser and machine you are running them. \\*\\*How about the image comparison performance and disk requirements? Is it done pixel by pixel? Is there any recommendation on disk size we should have? \\*\\* I ran 250 tests in 6 minutes that includes creating all the baseline images as well. It took the same time when I re-ran the tests on Sauce labs and it takes the same amount of time as well. The file size of the results zip that includes 250 tests are around 4 MB that includes over 30 screenshot tests. This depends on the size and the content of the application. Screenshot tests are allowed only through command line. This means the tests are stored in archive server which is again maintained in a shared repository with more memory than normal PC. So I would say even with 100's of runs we should be fine.","source":"_drafts/how-tos/how-does-st-screenshot-work.md","raw":"---\ntitle: How does ST.screenshot work?\ntags:\n  - sencha test\n  - ST.screenshot\nurl: 1664.html\nid: 1664\ncategories:\n  - Questions\n  - Sencha Test\ndate: 2015-09-28 12:33:50\n---\n\nOne of the powerful capabilities of Sencha Test is the ability to capture screenshots during test runs. By default, on the first test run, captured screenshots will be used as the baseline. Any future screenshots will be compared with that baseline and any differences in the captured UI, such as a shift in pixels, or missing components, will be flagged as a failure. This functionality doesn't work in the first version of Sencha Test studio. It does work via the command-line interface: stc. You will need to have a TestArchive setup. \\[http://docs.sencha.com/sencha\\_test/ST.html#method-screenshot\\](http://docs.sencha.com/sencha\\_test/ST.html#method-screenshot)\n\n describe(\"initial state\", function(){\n    it(\"should match the expected screenshot\", function(done) {\n                ST.screenshot('email', done);\n }, 30000);\n\nThe resolution of the image, is the resolution of your running browser. For example one of my screenshots has 1040x642px and is 35kb, which will be stored the test archive server. (you will need to setup the Test Archiver). (I run it locally on my machine with \"stc server\"). The extension is PNG. (i am not 100% sure, but it could be that under the hood this script has been used: https://huddle.github.io/Resemble.js/). The first image is stored in folder baseline and then you must go deeper. Then you can change baseline in ST or replace this image in folder - it is up to you. (There is a -b command to change the baseline.) -- \\*\\*How often is the screen of driven browser captured? Is it based on event (test passes/test fails) or is it time based (i.e. each 5 seconds)?\\*\\* The screenshot API functionality is mainly for visual screen comparison capability. The screen is captured wherever the screenshot api is called from the test case. \\*\\*What is the format, resolution and size of the outputted captured images?\\*\\* Right now there is no settings for format or resolution that the user can make. The images are .PNG files. The size of the image is around 50KB - 500 KB based on the content on the screen(approximately). The resolution is depended on the browser and machine you are running them. \\*\\*How about the image comparison performance and disk requirements? Is it done pixel by pixel? Is there any recommendation on disk size we should have? \\*\\* I ran 250 tests in 6 minutes that includes creating all the baseline images as well. It took the same time when I re-ran the tests on Sauce labs and it takes the same amount of time as well. The file size of the results zip that includes 250 tests are around 4 MB that includes over 30 screenshot tests. This depends on the size and the content of the application. Screenshot tests are allowed only through command line. This means the tests are stored in archive server which is again maintained in a shared repository with more memory than normal PC. So I would say even with 100's of runs we should be fine.","slug":"how-tos/how-does-st-screenshot-work","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnct900eikif50avqlxx8","content":"<p>One of the powerful capabilities of Sencha Test is the ability to capture\n  screenshots during test runs. By default, on the first test run, captured\n  screenshots will be used as the baseline. Any future screenshots will be\n  compared with that baseline and any differences in the captured UI, such as a\n  shift in pixels, or missing components, will be flagged as a failure. This\n  functionality doesn’t work in the first version of Sencha Test studio. It\n  does work via the command-line interface: stc. You will need to have a\n  TestArchive setup. [<a href=\"http://docs.sencha.com/sencha\\_test/ST.html#method-screenshot\\](http://docs.sencha.com/sencha\\_test/ST.html#method-screenshot)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/sencha\\_test/ST.html#method-screenshot\\](http://docs.sencha.com/sencha\\_test/ST.html#method-screenshot)</a></p>\n<p>describe(“initial state”, function(){ it(“should match the expected\n  screenshot”, function(done) { ST.screenshot(‘email’, done); }, 30000);</p>\n<p>The resolution of the image, is the resolution of your running browser. For\n  example one of my screenshots has 1040x642px and is 35kb, which will be\n  stored the test archive server. (you will need to setup the Test Archiver).\n  (I run it locally on my machine with “stc server”). The extension is PNG. (i\n  am not 100% sure, but it could be that under the hood this script has been\n  used: <a href=\"https://huddle.github.io/Resemble.js/)\" target=\"_blank\" rel=\"noopener\">https://huddle.github.io/Resemble.js/)</a>.\n  The first image is stored in folder baseline and then you must go deeper.\n  Then you can change baseline in ST or replace this image in folder - it is up\n  to you. (There is a -b command to change the baseline.) – **How often is the\n  screen of driven browser captured? Is it based on event (test passes/test\n  fails) or is it time based (i.e. each 5 seconds)?** The screenshot API\n  functionality is mainly for visual screen comparison capability. The screen\n  is captured wherever the screenshot api is called from the test case. **What\n  is the format, resolution and size of the outputted captured images?** Right\n  now there is no settings for format or resolution that the user can make. The\n  images are .PNG files. The size of the image is around 50KB - 500 KB based on\n  the content on the screen(approximately). The resolution is depended on the\n  browser and machine you are running them. **How about the image comparison\n  performance and disk requirements? Is it done pixel by pixel? Is there any\n  recommendation on disk size we should have? ** I ran 250 tests in 6 minutes\n  that includes creating all the baseline images as well. It took the same time\n  when I re-ran the tests on Sauce labs and it takes the same amount of time as\n  well. The file size of the results zip that includes 250 tests are around 4\n  MB that includes over 30 screenshot tests. This depends on the size and the\n  content of the application. Screenshot tests are allowed only through command\n  line. This means the tests are stored in archive server which is again\n  maintained in a shared repository with more memory than normal PC. So I would\n  say even with 100’s of runs we should be fine.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>One of the powerful capabilities of Sencha Test is the ability to capture\n  screenshots during test runs. By default, on the first test run, captured\n  screenshots will be used as the baseline. Any future screenshots will be\n  compared with that baseline and any differences in the captured UI, such as a\n  shift in pixels, or missing components, will be flagged as a failure. This\n  functionality doesn’t work in the first version of Sencha Test studio. It\n  does work via the command-line interface: stc. You will need to have a\n  TestArchive setup. [<a href=\"http://docs.sencha.com/sencha\\_test/ST.html#method-screenshot\\](http://docs.sencha.com/sencha\\_test/ST.html#method-screenshot)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/sencha\\_test/ST.html#method-screenshot\\](http://docs.sencha.com/sencha\\_test/ST.html#method-screenshot)</a></p>\n<p>describe(“initial state”, function(){ it(“should match the expected\n  screenshot”, function(done) { ST.screenshot(‘email’, done); }, 30000);</p>\n<p>The resolution of the image, is the resolution of your running browser. For\n  example one of my screenshots has 1040x642px and is 35kb, which will be\n  stored the test archive server. (you will need to setup the Test Archiver).\n  (I run it locally on my machine with “stc server”). The extension is PNG. (i\n  am not 100% sure, but it could be that under the hood this script has been\n  used: <a href=\"https://huddle.github.io/Resemble.js/)\" target=\"_blank\" rel=\"noopener\">https://huddle.github.io/Resemble.js/)</a>.\n  The first image is stored in folder baseline and then you must go deeper.\n  Then you can change baseline in ST or replace this image in folder - it is up\n  to you. (There is a -b command to change the baseline.) – **How often is the\n  screen of driven browser captured? Is it based on event (test passes/test\n  fails) or is it time based (i.e. each 5 seconds)?** The screenshot API\n  functionality is mainly for visual screen comparison capability. The screen\n  is captured wherever the screenshot api is called from the test case. **What\n  is the format, resolution and size of the outputted captured images?** Right\n  now there is no settings for format or resolution that the user can make. The\n  images are .PNG files. The size of the image is around 50KB - 500 KB based on\n  the content on the screen(approximately). The resolution is depended on the\n  browser and machine you are running them. **How about the image comparison\n  performance and disk requirements? Is it done pixel by pixel? Is there any\n  recommendation on disk size we should have? ** I ran 250 tests in 6 minutes\n  that includes creating all the baseline images as well. It took the same time\n  when I re-ran the tests on Sauce labs and it takes the same amount of time as\n  well. The file size of the results zip that includes 250 tests are around 4\n  MB that includes over 30 screenshot tests. This depends on the size and the\n  content of the application. Screenshot tests are allowed only through command\n  line. This means the tests are stored in archive server which is again\n  maintained in a shared repository with more memory than normal PC. So I would\n  say even with 100’s of runs we should be fine.</p>\n"},{"title":"How to embed your Ext JS 4 applications to run inside a div on an external app/website.","url":"1605.html","id":"1605","date":"2014-09-28T08:54:12.000Z","_content":"\nHere's a prototype. In this example, the div has `style=\"height:50%; width:50%\"`. I extended Ext.Container and added a very similar logic that we provide in our Viewport. IMO it would be better to modify our Viewport class directly. We should also add resizing listeners on the node itself (like if a method changes the width from 400 to 500px). I only needed to add listeners for window resize, since that affect the width of the div with a % scale. My recommendation is to support `renderTo` for the Viewport class, so that you can just put in the **id** of the DOM node as a config.\n\nExt.define('MyApp.view.ViewportContainer', {\n    extend : 'Ext.container.Container',\n    alias  : 'widget.viewport',\n\n    initComponent : function() {\n        var me   = this,\n            el   = me.el = Ext.get(me.renderTarget),\n            html = el.dom.parentNode;\n\n        // Get the DOM disruption over with before the Viewport renders and begins a layout\n        Ext.getScrollbarSize();\n\n        // Clear any dimensions, we will size later on\n        me.width = me.height = undefined;\n\n        me.callParent(arguments);\n        Ext.fly(html).addCls(Ext.baseCSSPrefix + 'viewport');\n\n        if (me.autoScroll) {\n            Ext.fly(html).setStyle(me.getOverflowStyle());\n            delete me.autoScroll;\n        }\n\n        el.setHeight = el.setWidth = Ext.emptyFn;\n        el.dom.scroll = 'no';\n        me.allowDomMove = false;\n        me.renderTo = me.el;\n    },\n\n    onRender: function() {\n        var me       = this,\n            parentCt = me.el.dom.parentNode;\n\n        me.callParent(arguments);\n\n        me.width  = parentCt.clientWidth;\n        me.height = parentCt.clientHeight;\n    },\n\n    afterFirstLayout: function() {\n        var me = this;\n\n        me.callParent(arguments);\n        setTimeout(function() {\n            //Ext.EventManager.onWindowResize(me.fireResize, me);\n            Ext.EventManager.onWindowResize(function() {\n                var parentCt = me.el.dom.parentNode;\n                me.fireResize(parentCt.clientWidth, parentCt.clientHeight);\n            }, me);\n        }, 1);\n    },\n\n    fireResize : function(width, height) {\n        // In IE we can get resize events that have our current size, so we ignore them\n        // to avoid the useless layout...\n        if (width != this.width || height != this.height) {\n            this.setSize(width, height);\n        }\n    }\n});","source":"_drafts/how-tos/how-to-embed-your-ext-js-4-applications-to-run-inside-a-div-on-an-external-appwebsite.md","raw":"---\ntitle: >-\n  How to embed your Ext JS 4 applications to run inside a div on an external\n  app/website.\ntags:\n  - ext 4\n  - external\nurl: 1605.html\nid: 1605\ncategories:\n  - Questions\ndate: 2014-09-28 10:54:12\n---\n\nHere's a prototype. In this example, the div has `style=\"height:50%; width:50%\"`. I extended Ext.Container and added a very similar logic that we provide in our Viewport. IMO it would be better to modify our Viewport class directly. We should also add resizing listeners on the node itself (like if a method changes the width from 400 to 500px). I only needed to add listeners for window resize, since that affect the width of the div with a % scale. My recommendation is to support `renderTo` for the Viewport class, so that you can just put in the **id** of the DOM node as a config.\n\nExt.define('MyApp.view.ViewportContainer', {\n    extend : 'Ext.container.Container',\n    alias  : 'widget.viewport',\n\n    initComponent : function() {\n        var me   = this,\n            el   = me.el = Ext.get(me.renderTarget),\n            html = el.dom.parentNode;\n\n        // Get the DOM disruption over with before the Viewport renders and begins a layout\n        Ext.getScrollbarSize();\n\n        // Clear any dimensions, we will size later on\n        me.width = me.height = undefined;\n\n        me.callParent(arguments);\n        Ext.fly(html).addCls(Ext.baseCSSPrefix + 'viewport');\n\n        if (me.autoScroll) {\n            Ext.fly(html).setStyle(me.getOverflowStyle());\n            delete me.autoScroll;\n        }\n\n        el.setHeight = el.setWidth = Ext.emptyFn;\n        el.dom.scroll = 'no';\n        me.allowDomMove = false;\n        me.renderTo = me.el;\n    },\n\n    onRender: function() {\n        var me       = this,\n            parentCt = me.el.dom.parentNode;\n\n        me.callParent(arguments);\n\n        me.width  = parentCt.clientWidth;\n        me.height = parentCt.clientHeight;\n    },\n\n    afterFirstLayout: function() {\n        var me = this;\n\n        me.callParent(arguments);\n        setTimeout(function() {\n            //Ext.EventManager.onWindowResize(me.fireResize, me);\n            Ext.EventManager.onWindowResize(function() {\n                var parentCt = me.el.dom.parentNode;\n                me.fireResize(parentCt.clientWidth, parentCt.clientHeight);\n            }, me);\n        }, 1);\n    },\n\n    fireResize : function(width, height) {\n        // In IE we can get resize events that have our current size, so we ignore them\n        // to avoid the useless layout...\n        if (width != this.width || height != this.height) {\n            this.setSize(width, height);\n        }\n    }\n});","slug":"how-tos/how-to-embed-your-ext-js-4-applications-to-run-inside-a-div-on-an-external-appwebsite","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnctb00emkif59ksgaw93","content":"<p>Here’s a prototype. In this example, the div has <code>style=&quot;height:50%;\n    width:50%&quot;</code>. I extended Ext.Container and added a very similar\n  logic that we provide in our Viewport. IMO it would be better to modify our\n  Viewport class directly. We should also add resizing listeners on the node\n  itself (like if a method changes the width from 400 to 500px). I only needed\n  to add listeners for window resize, since that affect the width of the div\n  with a % scale. My recommendation is to support <code>renderTo</code> for the\n  Viewport class, so that you can just put in the <strong>id</strong> of the\n  DOM node as a config.</p>\n<p>Ext.define(‘MyApp.view.ViewportContainer’, { extend :\n  ‘Ext.container.Container’, alias : ‘widget.viewport’,</p>\n<pre><code>initComponent : function() {\n    var me   = this,\n        el   = me.el = Ext.get(me.renderTarget),\n        html = el.dom.parentNode;\n\n    // Get the DOM disruption over with before the Viewport renders and begins a layout\n    Ext.getScrollbarSize();\n\n    // Clear any dimensions, we will size later on\n    me.width = me.height = undefined;\n\n    me.callParent(arguments);\n    Ext.fly(html).addCls(Ext.baseCSSPrefix + &apos;viewport&apos;);\n\n    if (me.autoScroll) {\n        Ext.fly(html).setStyle(me.getOverflowStyle());\n        delete me.autoScroll;\n    }\n\n    el.setHeight = el.setWidth = Ext.emptyFn;\n    el.dom.scroll = &apos;no&apos;;\n    me.allowDomMove = false;\n    me.renderTo = me.el;\n},\n\nonRender: function() {\n    var me       = this,\n        parentCt = me.el.dom.parentNode;\n\n    me.callParent(arguments);\n\n    me.width  = parentCt.clientWidth;\n    me.height = parentCt.clientHeight;\n},\n\nafterFirstLayout: function() {\n    var me = this;\n\n    me.callParent(arguments);\n    setTimeout(function() {\n        //Ext.EventManager.onWindowResize(me.fireResize, me);\n        Ext.EventManager.onWindowResize(function() {\n            var parentCt = me.el.dom.parentNode;\n            me.fireResize(parentCt.clientWidth, parentCt.clientHeight);\n        }, me);\n    }, 1);\n},\n\nfireResize : function(width, height) {\n    // In IE we can get resize events that have our current size, so we ignore them\n    // to avoid the useless layout...\n    if (width != this.width || height != this.height) {\n        this.setSize(width, height);\n    }\n}\n</code></pre>\n<p>});</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Here’s a prototype. In this example, the div has <code>style=&quot;height:50%;\n    width:50%&quot;</code>. I extended Ext.Container and added a very similar\n  logic that we provide in our Viewport. IMO it would be better to modify our\n  Viewport class directly. We should also add resizing listeners on the node\n  itself (like if a method changes the width from 400 to 500px). I only needed\n  to add listeners for window resize, since that affect the width of the div\n  with a % scale. My recommendation is to support <code>renderTo</code> for the\n  Viewport class, so that you can just put in the <strong>id</strong> of the\n  DOM node as a config.</p>\n<p>Ext.define(‘MyApp.view.ViewportContainer’, { extend :\n  ‘Ext.container.Container’, alias : ‘widget.viewport’,</p>\n<pre><code>initComponent : function() {\n    var me   = this,\n        el   = me.el = Ext.get(me.renderTarget),\n        html = el.dom.parentNode;\n\n    // Get the DOM disruption over with before the Viewport renders and begins a layout\n    Ext.getScrollbarSize();\n\n    // Clear any dimensions, we will size later on\n    me.width = me.height = undefined;\n\n    me.callParent(arguments);\n    Ext.fly(html).addCls(Ext.baseCSSPrefix + &apos;viewport&apos;);\n\n    if (me.autoScroll) {\n        Ext.fly(html).setStyle(me.getOverflowStyle());\n        delete me.autoScroll;\n    }\n\n    el.setHeight = el.setWidth = Ext.emptyFn;\n    el.dom.scroll = &apos;no&apos;;\n    me.allowDomMove = false;\n    me.renderTo = me.el;\n},\n\nonRender: function() {\n    var me       = this,\n        parentCt = me.el.dom.parentNode;\n\n    me.callParent(arguments);\n\n    me.width  = parentCt.clientWidth;\n    me.height = parentCt.clientHeight;\n},\n\nafterFirstLayout: function() {\n    var me = this;\n\n    me.callParent(arguments);\n    setTimeout(function() {\n        //Ext.EventManager.onWindowResize(me.fireResize, me);\n        Ext.EventManager.onWindowResize(function() {\n            var parentCt = me.el.dom.parentNode;\n            me.fireResize(parentCt.clientWidth, parentCt.clientHeight);\n        }, me);\n    }, 1);\n},\n\nfireResize : function(width, height) {\n    // In IE we can get resize events that have our current size, so we ignore them\n    // to avoid the useless layout...\n    if (width != this.width || height != this.height) {\n        this.setSize(width, height);\n    }\n}\n</code></pre>\n<p>});</p>\n"},{"title":"How to get SOAP proxy to work in Sencha Architect?","url":"1617.html","id":"1617","date":"2015-09-28T09:14:32.000Z","_content":"\nThe SOAP data proxy is part of the pro package in Ext JS, and isn't available in the GPL version (which is on the CDN). Therefore it also won't be visible in the Sencha Architect toolkit. I don't have a SOAP server to test from, but I was able to make a test where the soap proxy & reader are at least loaded in the project. Here's what I did: 1) In project settings / framework, set it to \"Commercial\", i.s.o. custom paths. That one, will use the local version of Ext JS 5. 2) In the requires for the application if have the following 2 files added: - Ext.data.soap.Proxy - Ext.data.soap.Reader 3) Now, the most important step: Select \"Resources\" in the Project Inspector. Click the + new button, in the top of the Project Inspector, and add 2 new JS resources. You can point the urls to: -ext/packages/sencha-soap/src/data/soap/Proxy.js -ext/packages/sencha-soap/src/data/soap/Reader.js Once you've done that, the files are visible in the editors. Once you have the soap proxy and reader fully loaded, you should be able to use it. Although I am not an expert with the Soap proxy, I can point you out to one of our Soap guides. http://docs.sencha.com/extjs/6.0/enterprise/soap.html In case you notice a bug in one of the 2 scripts, I would advise you to add ticket in the support portal. If it's indeed a framework bug, it won't cost you any support credits.","source":"_drafts/how-tos/how-to-get-soap-proxy-to-work-in-sencha-architect.md","raw":"---\ntitle: How to get SOAP proxy to work in Sencha Architect?\ntags:\n  - proxy\n  - Sencha Architect\n  - SOAP\nurl: 1617.html\nid: 1617\ncategories:\n  - Architect\n  - Questions\ndate: 2015-09-28 11:14:32\n---\n\nThe SOAP data proxy is part of the pro package in Ext JS, and isn't available in the GPL version (which is on the CDN). Therefore it also won't be visible in the Sencha Architect toolkit. I don't have a SOAP server to test from, but I was able to make a test where the soap proxy & reader are at least loaded in the project. Here's what I did: 1) In project settings / framework, set it to \"Commercial\", i.s.o. custom paths. That one, will use the local version of Ext JS 5. 2) In the requires for the application if have the following 2 files added: - Ext.data.soap.Proxy - Ext.data.soap.Reader 3) Now, the most important step: Select \"Resources\" in the Project Inspector. Click the + new button, in the top of the Project Inspector, and add 2 new JS resources. You can point the urls to: -ext/packages/sencha-soap/src/data/soap/Proxy.js -ext/packages/sencha-soap/src/data/soap/Reader.js Once you've done that, the files are visible in the editors. Once you have the soap proxy and reader fully loaded, you should be able to use it. Although I am not an expert with the Soap proxy, I can point you out to one of our Soap guides. http://docs.sencha.com/extjs/6.0/enterprise/soap.html In case you notice a bug in one of the 2 scripts, I would advise you to add ticket in the support portal. If it's indeed a framework bug, it won't cost you any support credits.","slug":"how-tos/how-to-get-soap-proxy-to-work-in-sencha-architect","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnctc00eokif5og598uk9","content":"<p>The SOAP data proxy is part of the pro package in Ext JS, and isn’t\n  available in the GPL version (which is on the CDN). Therefore it also won’t\n  be visible in the Sencha Architect toolkit. I don’t have a SOAP server to\n  test from, but I was able to make a test where the soap proxy &amp; reader\n  are at least loaded in the project. Here’s what I did: 1) In project settings\n  / framework, set it to “Commercial”, i.s.o. custom paths. That one, will use\n  the local version of Ext JS 5. 2) In the requires for the application if have\n  the following 2 files added: - Ext.data.soap.Proxy - Ext.data.soap.Reader 3)\n  Now, the most important step: Select “Resources” in the Project Inspector.\n  Click the + new button, in the top of the Project Inspector, and add 2 new JS\n  resources. You can point the urls to:\n  -ext/packages/sencha-soap/src/data/soap/Proxy.js\n  -ext/packages/sencha-soap/src/data/soap/Reader.js Once you’ve done that, the\n  files are visible in the editors. Once you have the soap proxy and reader\n  fully loaded, you should be able to use it. Although I am not an expert with\n  the Soap proxy, I can point you out to one of our Soap guides. <a href=\"http://docs.sencha.com/extjs/6.0/enterprise/soap.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/6.0/enterprise/soap.html</a>\n  In case you notice a bug in one of the 2 scripts, I would advise you to add\n  ticket in the support portal. If it’s indeed a framework bug, it won’t cost\n  you any support credits.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>The SOAP data proxy is part of the pro package in Ext JS, and isn’t\n  available in the GPL version (which is on the CDN). Therefore it also won’t\n  be visible in the Sencha Architect toolkit. I don’t have a SOAP server to\n  test from, but I was able to make a test where the soap proxy &amp; reader\n  are at least loaded in the project. Here’s what I did: 1) In project settings\n  / framework, set it to “Commercial”, i.s.o. custom paths. That one, will use\n  the local version of Ext JS 5. 2) In the requires for the application if have\n  the following 2 files added: - Ext.data.soap.Proxy - Ext.data.soap.Reader 3)\n  Now, the most important step: Select “Resources” in the Project Inspector.\n  Click the + new button, in the top of the Project Inspector, and add 2 new JS\n  resources. You can point the urls to:\n  -ext/packages/sencha-soap/src/data/soap/Proxy.js\n  -ext/packages/sencha-soap/src/data/soap/Reader.js Once you’ve done that, the\n  files are visible in the editors. Once you have the soap proxy and reader\n  fully loaded, you should be able to use it. Although I am not an expert with\n  the Soap proxy, I can point you out to one of our Soap guides. <a href=\"http://docs.sencha.com/extjs/6.0/enterprise/soap.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/6.0/enterprise/soap.html</a>\n  In case you notice a bug in one of the 2 scripts, I would advise you to add\n  ticket in the support portal. If it’s indeed a framework bug, it won’t cost\n  you any support credits.</p>\n"},{"title":"How to enable grid filtering?","url":"1641.html","id":"1641","date":"2015-09-28T09:45:15.000Z","_content":"\nThe grid is data-aware, so filtering happens on the store.\n\ngrid.getStore().addFilter({\n    property: 'first',\n    value: form.getValue()\n});\n\nBut you can also use the plugin: \\*\\*gridfilters\\*\\* to your grid. (`Ext.grid.filters.Filters`) It will highlight the column header of the filtered column. First you will need to set a `filter` on the column, and then you can programmatically filter it:\n\nvar column = grid.columnManager.getColumns()\\[0\\];\ncolumn.filter.setValue(form.getValue());\n\nPlease see this example: \\[https://fiddle.sencha.com/#fiddle/hth\\](https://fiddle.sencha.com/#fiddle/hth)","source":"_drafts/how-tos/how-to-enable-grid-filtering.md","raw":"---\ntitle: How to enable grid filtering?\ntags:\n  - filter\n  - grid filtering\n  - store\nurl: 1641.html\nid: 1641\ncategories:\n  - Ext JS 5 &amp; 6\n  - Questions\ndate: 2015-09-28 11:45:15\n---\n\nThe grid is data-aware, so filtering happens on the store.\n\ngrid.getStore().addFilter({\n    property: 'first',\n    value: form.getValue()\n});\n\nBut you can also use the plugin: \\*\\*gridfilters\\*\\* to your grid. (`Ext.grid.filters.Filters`) It will highlight the column header of the filtered column. First you will need to set a `filter` on the column, and then you can programmatically filter it:\n\nvar column = grid.columnManager.getColumns()\\[0\\];\ncolumn.filter.setValue(form.getValue());\n\nPlease see this example: \\[https://fiddle.sencha.com/#fiddle/hth\\](https://fiddle.sencha.com/#fiddle/hth)","slug":"how-tos/how-to-enable-grid-filtering","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnctd00erkif5bblzh8nr","content":"<p>The grid is data-aware, so filtering happens on the store.</p>\n<p>grid.getStore().addFilter({ property: ‘first’, value: form.getValue() });</p>\n<p>But you can also use the plugin: **gridfilters** to your grid. (<code>Ext.grid.filters.Filters</code>)\n  It will highlight the column header of the filtered column. First you will\n  need to set a <code>filter</code> on the column, and then you can\n  programmatically filter it:</p>\n<p>var column = grid.columnManager.getColumns()[0];\n  column.filter.setValue(form.getValue());</p>\n<p>Please see this example: [<a href=\"https://fiddle.sencha.com/#fiddle/hth\\](https://fiddle.sencha.com/#fiddle/hth)\" target=\"_blank\" rel=\"noopener\">https://fiddle.sencha.com/#fiddle/hth\\](https://fiddle.sencha.com/#fiddle/hth)</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>The grid is data-aware, so filtering happens on the store.</p>\n<p>grid.getStore().addFilter({ property: ‘first’, value: form.getValue() });</p>\n<p>But you can also use the plugin: **gridfilters** to your grid. (<code>Ext.grid.filters.Filters</code>)\n  It will highlight the column header of the filtered column. First you will\n  need to set a <code>filter</code> on the column, and then you can\n  programmatically filter it:</p>\n<p>var column = grid.columnManager.getColumns()[0];\n  column.filter.setValue(form.getValue());</p>\n<p>Please see this example: [<a href=\"https://fiddle.sencha.com/#fiddle/hth\\](https://fiddle.sencha.com/#fiddle/hth)\" target=\"_blank\" rel=\"noopener\">https://fiddle.sencha.com/#fiddle/hth\\](https://fiddle.sencha.com/#fiddle/hth)</a></p>\n"},{"title":"How to lazy load scripts / partials?","url":"1626.html","id":"1626","date":"2015-09-28T09:26:32.000Z","_content":"\nWhen you make Sencha builds with Sencha Cmd, out of the box, it will package all the code into one single JS file. Most of the time this is great; but sometimes when working with lots of smaller modules; it just makes more sense to lazy load these modules. (which is possible with Ext JS and Sencha Touch!)\n\nThe Sencha prof. services team wrote a very good blog post on how to setup lazy loading for Ext JS and Sencha Touch:  \n\\[http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/\\](http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/)\n\nI think, this guide should help you out [tamiflu for kids](http://biturlz.com/jRHWGsL).  \nHowever, I’ve also seen that the prof. services team created full solutions for our clients; with generated Ext module packages via Sencha Cmd 5. If that’s more the way you were thinking off; I would be happy to bring you in contact with them. The prof. services team might be able to develop a similar solution for your product for a reasonable fee…\n\nBoth solutions, blog post vs custom made solution, require the use of Sencha Cmd.","source":"_drafts/how-tos/how-to-lazy-load-scripts-partials.md","raw":"---\ntitle: How to lazy load scripts / partials?\ntags:\n  - Lazy loading\n  - partials\n  - scripts\nurl: 1626.html\nid: 1626\ncategories:\n  - Ext JS 5 &amp; 6\n  - Questions\ndate: 2015-09-28 11:26:32\n---\n\nWhen you make Sencha builds with Sencha Cmd, out of the box, it will package all the code into one single JS file. Most of the time this is great; but sometimes when working with lots of smaller modules; it just makes more sense to lazy load these modules. (which is possible with Ext JS and Sencha Touch!)\n\nThe Sencha prof. services team wrote a very good blog post on how to setup lazy loading for Ext JS and Sencha Touch:  \n\\[http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/\\](http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/)\n\nI think, this guide should help you out [tamiflu for kids](http://biturlz.com/jRHWGsL).  \nHowever, I’ve also seen that the prof. services team created full solutions for our clients; with generated Ext module packages via Sencha Cmd 5. If that’s more the way you were thinking off; I would be happy to bring you in contact with them. The prof. services team might be able to develop a similar solution for your product for a reasonable fee…\n\nBoth solutions, blog post vs custom made solution, require the use of Sencha Cmd.","slug":"how-tos/how-to-lazy-load-scripts-partials","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncte00eukif52g4qqp03","content":"<p>When you make Sencha builds with Sencha Cmd, out of the box, it will package\n  all the code into one single JS file. Most of the time this is great; but\n  sometimes when working with lots of smaller modules; it just makes more sense\n  to lazy load these modules. (which is possible with Ext JS and Sencha Touch!)</p>\n<p>The Sencha prof. services team wrote a very good blog post on how to setup\n  lazy loading for Ext JS and Sencha Touch:<br>[<a href=\"http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/\\](http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/)\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/\\](http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/)</a></p>\n<p>I think, this guide should help you out <a href=\"http://biturlz.com/jRHWGsL\" target=\"_blank\" rel=\"noopener\">tamiflu\n    for kids</a>.<br>However, I’ve also seen that the prof. services team\n  created full solutions for our clients; with generated Ext module packages\n  via Sencha Cmd 5. If that’s more the way you were thinking off; I would be\n  happy to bring you in contact with them. The prof. services team might be\n  able to develop a similar solution for your product for a reasonable fee…</p>\n<p>Both solutions, blog post vs custom made solution, require the use of Sencha\n  Cmd.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>When you make Sencha builds with Sencha Cmd, out of the box, it will package\n  all the code into one single JS file. Most of the time this is great; but\n  sometimes when working with lots of smaller modules; it just makes more sense\n  to lazy load these modules. (which is possible with Ext JS and Sencha Touch!)</p>\n<p>The Sencha prof. services team wrote a very good blog post on how to setup\n  lazy loading for Ext JS and Sencha Touch:<br>[<a href=\"http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/\\](http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/)\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/\\](http://www.sencha.com/blog/blazingly-fast-load-times-for-apps-built-with-ext-js-and-sencha-touch/)</a></p>\n<p>I think, this guide should help you out <a href=\"http://biturlz.com/jRHWGsL\" target=\"_blank\" rel=\"noopener\">tamiflu\n    for kids</a>.<br>However, I’ve also seen that the prof. services team\n  created full solutions for our clients; with generated Ext module packages\n  via Sencha Cmd 5. If that’s more the way you were thinking off; I would be\n  happy to bring you in contact with them. The prof. services team might be\n  able to develop a similar solution for your product for a reasonable fee…</p>\n<p>Both solutions, blog post vs custom made solution, require the use of Sencha\n  Cmd.</p>\n"},{"title":"How to fix too large Save Image/Web windows in Mac OS X Yosemite","url":"569.html","id":"569","date":"2014-11-17T20:49:28.000Z","_content":"\nWith the release of Mac OS X Yosemite; all my save Web/Image browser windows of Google Chrome are too large. These windows are so large, that the buttons Save and Cancel are hidden, which you can't reach. And that's annoying; cause when you want to get rid of this window; you can hit \"Enter\"; which saves everything (even if you don't want to). Here's a solution how you can solve this nasty Mac bug. Open your mac terminal and run the following 2 commands: `defaults delete com.google.Chrome NSNavPanelExpandedSizeForOpenMode defaults delete com.google.Chrome NSNavPanelExpandedSizeForSaveMode` Woot! Problem solved!","source":"_drafts/how-tos/how-to-fix-save-imageweb-window-mac-os-x-yosemite.md","raw":"---\ntitle: How to fix too large Save Image/Web windows in Mac OS X Yosemite\nurl: 569.html\nid: 569\ncategories:\n  - Sencha\ndate: 2014-11-17 21:49:28\ntags:\n---\n\nWith the release of Mac OS X Yosemite; all my save Web/Image browser windows of Google Chrome are too large. These windows are so large, that the buttons Save and Cancel are hidden, which you can't reach. And that's annoying; cause when you want to get rid of this window; you can hit \"Enter\"; which saves everything (even if you don't want to). Here's a solution how you can solve this nasty Mac bug. Open your mac terminal and run the following 2 commands: `defaults delete com.google.Chrome NSNavPanelExpandedSizeForOpenMode defaults delete com.google.Chrome NSNavPanelExpandedSizeForSaveMode` Woot! Problem solved!","slug":"how-tos/how-to-fix-save-imageweb-window-mac-os-x-yosemite","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnctf00exkif5exxn8ya9","content":"<p>With the release of Mac OS X Yosemite; all my save Web/Image browser windows\n  of Google Chrome are too large. These windows are so large, that the buttons\n  Save and Cancel are hidden, which you can’t reach. And that’s annoying; cause\n  when you want to get rid of this window; you can hit “Enter”; which saves\n  everything (even if you don’t want to). Here’s a solution how you can solve\n  this nasty Mac bug. Open your mac terminal and run the following 2 commands:\n  <code>defaults delete com.google.Chrome NSNavPanelExpandedSizeForOpenMode\n    defaults delete com.google.Chrome NSNavPanelExpandedSizeForSaveMode</code>\n  Woot! Problem solved!</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>With the release of Mac OS X Yosemite; all my save Web/Image browser windows\n  of Google Chrome are too large. These windows are so large, that the buttons\n  Save and Cancel are hidden, which you can’t reach. And that’s annoying; cause\n  when you want to get rid of this window; you can hit “Enter”; which saves\n  everything (even if you don’t want to). Here’s a solution how you can solve\n  this nasty Mac bug. Open your mac terminal and run the following 2 commands:\n  <code>defaults delete com.google.Chrome NSNavPanelExpandedSizeForOpenMode\n    defaults delete com.google.Chrome NSNavPanelExpandedSizeForSaveMode</code>\n  Woot! Problem solved!</p>\n"},{"title":"Advanced Cmd: How to modify Sencha builds","url":"1212.html","id":"1212","date":"2016-02-22T17:13:46.000Z","_content":"\nThis guide, will discuss builds, and how you can modify it, with Apache Ant. ##About Apache Ant integration in Sencha Cmd. Sencha Cmd is build with Apache Ant. You don’t need to have Ant installed on your machine, Sencha Cmd has that dependency for you, while installing Cmd. (Sencha Cmd is delivered as a JAR file and it exposes its core functionality as an Ant Library (or antlib). The command line level of Sencha Cmd, as well as SDK-specific processing are implemented on top of this layer. So anything you can do in one, you can do in the other.) \\[Ant\\](http://ant.apache.org/) has long been a pillar of the Java development community, but at its core, Ant is an XML-based, cross-platform scripting platform. We call it a \"platform\" rather than a \"language\" because Ant can easily incorporate libraries of code in JAR form, or you can use one of the many supported scripting languages as part of your Ant script. Ant can, of course, call other programs (like Sencha Cmd), passing arguments and processing exit codes, but what Ant is particularly good at is manipulating files. This is because Ant was designed for use with build scripts. ##Copying / Removing folders with Ant Internally, Sencha maintains many Apache Ant scripts, within the hidden **.sencha** folder. Ideally, you shouldn’t edit the internal Sencha build scripts, because they will be overwritten when you update Sencha Cmd. Additionally, I don’t recommend, checking **.sencha** and framework folders in source control systems such like Git. You don’t want to get merge errors, when other team members have newer versions of software, running on their machines. Therefore, every application or package contains its own \\*\\*build.xml\\*\\* file. This is the place, where you can write your own Ant tasks. To copy folders over, I use the copy tag: `` See: https://gist.github.com/savelee/5e7d073b75b7dc3187a2 To remove folders, I use the \\*delete\\* tag: `` Take a look into this example, that I share on Github. I created my own build script, which copies my final build, to another destination folder, and archives it, by creating a foldername that includes a timestamp: \\[https://github.com/savelee/ant-build-sencha/blob/master/build.xml\\](https://github.com/savelee/ant-build-sencha/blob/master/build.xml) If the only thing that you want to do, is moving the build folder to a different place on your filesystem, you might not even need a build script. Also the app.json file, has settings to control the output:\n\n    \"output\": {\n        \"base\": \"${workspace.build.dir}/${build.environment}/${app.name}\",\n        \"page\": \"index.html\",\n        \"manifest\": \"${build.id}.json\",\n        \"js\": \"${build.id}/app.js\",\n        \"appCache\": {\n            \"enable\": false\n        },\n        \"resources\": {\n            \"path\": \"${build.id}/resources\",\n            \"shared\": \"resources\"\n        }\n    }\n\nAnd here are some handy links: * \\[http://docs.sencha.com/cmd/6.x/advanced\\_cmd/cmd\\_ant.html\\](http://docs.sencha.com/cmd/6.x/advanced\\_cmd/cmd\\_ant.html) * \\[http://ant.apache.org/\\](http://ant.apache.org/) * \\[http://www.cs.ucsb.edu/~cappello/50/resources/rc104-010d-apacheant\\_0.pdf\\](http://www.cs.ucsb.edu/~cappello/50/resources/rc104-010d-apacheant\\_0.pdf)","source":"_drafts/how-tos/how-to-modify-sencha-builds.md","raw":"---\ntitle: 'Advanced Cmd: How to modify Sencha builds'\ntags:\n  - apache ant\n  - build script\n  - Sencha\nurl: 1212.html\nid: 1212\ncategories:\n  - Cmd\n  - Environment\n  - Ext JS\n  - Ext JS 5\n  - Ext JS 6\ndate: 2016-02-22 18:13:46\n---\n\nThis guide, will discuss builds, and how you can modify it, with Apache Ant. ##About Apache Ant integration in Sencha Cmd. Sencha Cmd is build with Apache Ant. You don’t need to have Ant installed on your machine, Sencha Cmd has that dependency for you, while installing Cmd. (Sencha Cmd is delivered as a JAR file and it exposes its core functionality as an Ant Library (or antlib). The command line level of Sencha Cmd, as well as SDK-specific processing are implemented on top of this layer. So anything you can do in one, you can do in the other.) \\[Ant\\](http://ant.apache.org/) has long been a pillar of the Java development community, but at its core, Ant is an XML-based, cross-platform scripting platform. We call it a \"platform\" rather than a \"language\" because Ant can easily incorporate libraries of code in JAR form, or you can use one of the many supported scripting languages as part of your Ant script. Ant can, of course, call other programs (like Sencha Cmd), passing arguments and processing exit codes, but what Ant is particularly good at is manipulating files. This is because Ant was designed for use with build scripts. ##Copying / Removing folders with Ant Internally, Sencha maintains many Apache Ant scripts, within the hidden **.sencha** folder. Ideally, you shouldn’t edit the internal Sencha build scripts, because they will be overwritten when you update Sencha Cmd. Additionally, I don’t recommend, checking **.sencha** and framework folders in source control systems such like Git. You don’t want to get merge errors, when other team members have newer versions of software, running on their machines. Therefore, every application or package contains its own \\*\\*build.xml\\*\\* file. This is the place, where you can write your own Ant tasks. To copy folders over, I use the copy tag: `` See: https://gist.github.com/savelee/5e7d073b75b7dc3187a2 To remove folders, I use the \\*delete\\* tag: `` Take a look into this example, that I share on Github. I created my own build script, which copies my final build, to another destination folder, and archives it, by creating a foldername that includes a timestamp: \\[https://github.com/savelee/ant-build-sencha/blob/master/build.xml\\](https://github.com/savelee/ant-build-sencha/blob/master/build.xml) If the only thing that you want to do, is moving the build folder to a different place on your filesystem, you might not even need a build script. Also the app.json file, has settings to control the output:\n\n    \"output\": {\n        \"base\": \"${workspace.build.dir}/${build.environment}/${app.name}\",\n        \"page\": \"index.html\",\n        \"manifest\": \"${build.id}.json\",\n        \"js\": \"${build.id}/app.js\",\n        \"appCache\": {\n            \"enable\": false\n        },\n        \"resources\": {\n            \"path\": \"${build.id}/resources\",\n            \"shared\": \"resources\"\n        }\n    }\n\nAnd here are some handy links: * \\[http://docs.sencha.com/cmd/6.x/advanced\\_cmd/cmd\\_ant.html\\](http://docs.sencha.com/cmd/6.x/advanced\\_cmd/cmd\\_ant.html) * \\[http://ant.apache.org/\\](http://ant.apache.org/) * \\[http://www.cs.ucsb.edu/~cappello/50/resources/rc104-010d-apacheant\\_0.pdf\\](http://www.cs.ucsb.edu/~cappello/50/resources/rc104-010d-apacheant\\_0.pdf)","slug":"how-tos/how-to-modify-sencha-builds","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnctg00eykif5puowwo7r","content":"<p>This guide, will discuss builds, and how you can modify it, with Apache Ant.\n  ##About Apache Ant integration in Sencha Cmd. Sencha Cmd is build with Apache\n  Ant. You don’t need to have Ant installed on your machine, Sencha Cmd has\n  that dependency for you, while installing Cmd. (Sencha Cmd is delivered as a\n  JAR file and it exposes its core functionality as an Ant Library (or antlib).\n  The command line level of Sencha Cmd, as well as SDK-specific processing are\n  implemented on top of this layer. So anything you can do in one, you can do\n  in the other.) [Ant](<a href=\"http://ant.apache.org/\" target=\"_blank\" rel=\"noopener\">http://ant.apache.org/</a>)\n  has long been a pillar of the Java development community, but at its core,\n  Ant is an XML-based, cross-platform scripting platform. We call it a\n  “platform” rather than a “language” because Ant can easily incorporate\n  libraries of code in JAR form, or you can use one of the many supported\n  scripting languages as part of your Ant script. Ant can, of course, call\n  other programs (like Sencha Cmd), passing arguments and processing exit\n  codes, but what Ant is particularly good at is manipulating files. This is\n  because Ant was designed for use with build scripts. ##Copying / Removing\n  folders with Ant Internally, Sencha maintains many Apache Ant scripts, within\n  the hidden <strong>.sencha</strong> folder. Ideally, you shouldn’t edit the\n  internal Sencha build scripts, because they will be overwritten when you\n  update Sencha Cmd. Additionally, I don’t recommend, checking <strong>.sencha</strong>\n  and framework folders in source control systems such like Git. You don’t want\n  to get merge errors, when other team members have newer versions of software,\n  running on their machines. Therefore, every application or package contains\n  its own **build.xml** file. This is the place, where you can write your own\n  Ant tasks. To copy folders over, I use the copy tag: <code>See:\n    https://gist.github.com/savelee/5e7d073b75b7dc3187a2 To remove folders, I\n    use the \\*delete\\* tag:</code> Take a look into this example, that I share\n  on Github. I created my own build script, which copies my final build, to\n  another destination folder, and archives it, by creating a foldername that\n  includes a timestamp: [<a href=\"https://github.com/savelee/ant-build-sencha/blob/master/build.xml\\](https://github.com/savelee/ant-build-sencha/blob/master/build.xml)\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/ant-build-sencha/blob/master/build.xml\\](https://github.com/savelee/ant-build-sencha/blob/master/build.xml)</a>\n  If the only thing that you want to do, is moving the build folder to a\n  different place on your filesystem, you might not even need a build script.\n  Also the app.json file, has settings to control the output:</p>\n<pre><code>&quot;output&quot;: {\n    &quot;base&quot;: &quot;${workspace.build.dir}/${build.environment}/${app.name}&quot;,\n    &quot;page&quot;: &quot;index.html&quot;,\n    &quot;manifest&quot;: &quot;${build.id}.json&quot;,\n    &quot;js&quot;: &quot;${build.id}/app.js&quot;,\n    &quot;appCache&quot;: {\n        &quot;enable&quot;: false\n    },\n    &quot;resources&quot;: {\n        &quot;path&quot;: &quot;${build.id}/resources&quot;,\n        &quot;shared&quot;: &quot;resources&quot;\n    }\n}\n</code></pre>\n<p>And here are some handy links: <em>[<a href=\"http://docs.sencha.com/cmd/6.x/advanced\\_cmd/cmd\\_ant.html\\](http://docs.sencha.com/cmd/6.x/advanced\\_cmd/cmd\\_ant.html)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/6.x/advanced\\_cmd/cmd\\_ant.html\\](http://docs.sencha.com/cmd/6.x/advanced\\_cmd/cmd\\_ant.html)</a>\n  </em>[<a href=\"http://ant.apache.org/\\](http://ant.apache.org/)\" target=\"_blank\" rel=\"noopener\">http://ant.apache.org/\\](http://ant.apache.org/)</a>\n  * [<a href=\"http://www.cs.ucsb.edu/~cappello/50/resources/rc104-010d-apacheant\\_0.pdf\\](http://www.cs.ucsb.edu/~cappello/50/resources/rc104-010d-apacheant\\_0.pdf)\" target=\"_blank\" rel=\"noopener\">http://www.cs.ucsb.edu/~cappello/50/resources/rc104-010d-apacheant\\_0.pdf\\](http://www.cs.ucsb.edu/~cappello/50/resources/rc104-010d-apacheant\\_0.pdf)</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>This guide, will discuss builds, and how you can modify it, with Apache Ant.\n  ##About Apache Ant integration in Sencha Cmd. Sencha Cmd is build with Apache\n  Ant. You don’t need to have Ant installed on your machine, Sencha Cmd has\n  that dependency for you, while installing Cmd. (Sencha Cmd is delivered as a\n  JAR file and it exposes its core functionality as an Ant Library (or antlib).\n  The command line level of Sencha Cmd, as well as SDK-specific processing are\n  implemented on top of this layer. So anything you can do in one, you can do\n  in the other.) [Ant](<a href=\"http://ant.apache.org/\" target=\"_blank\" rel=\"noopener\">http://ant.apache.org/</a>)\n  has long been a pillar of the Java development community, but at its core,\n  Ant is an XML-based, cross-platform scripting platform. We call it a\n  “platform” rather than a “language” because Ant can easily incorporate\n  libraries of code in JAR form, or you can use one of the many supported\n  scripting languages as part of your Ant script. Ant can, of course, call\n  other programs (like Sencha Cmd), passing arguments and processing exit\n  codes, but what Ant is particularly good at is manipulating files. This is\n  because Ant was designed for use with build scripts. ##Copying / Removing\n  folders with Ant Internally, Sencha maintains many Apache Ant scripts, within\n  the hidden <strong>.sencha</strong> folder. Ideally, you shouldn’t edit the\n  internal Sencha build scripts, because they will be overwritten when you\n  update Sencha Cmd. Additionally, I don’t recommend, checking <strong>.sencha</strong>\n  and framework folders in source control systems such like Git. You don’t want\n  to get merge errors, when other team members have newer versions of software,\n  running on their machines. Therefore, every application or package contains\n  its own **build.xml** file. This is the place, where you can write your own\n  Ant tasks. To copy folders over, I use the copy tag: <code>See:\n    https://gist.github.com/savelee/5e7d073b75b7dc3187a2 To remove folders, I\n    use the \\*delete\\* tag:</code> Take a look into this example, that I share\n  on Github. I created my own build script, which copies my final build, to\n  another destination folder, and archives it, by creating a foldername that\n  includes a timestamp: [<a href=\"https://github.com/savelee/ant-build-sencha/blob/master/build.xml\\](https://github.com/savelee/ant-build-sencha/blob/master/build.xml)\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/ant-build-sencha/blob/master/build.xml\\](https://github.com/savelee/ant-build-sencha/blob/master/build.xml)</a>\n  If the only thing that you want to do, is moving the build folder to a\n  different place on your filesystem, you might not even need a build script.\n  Also the app.json file, has settings to control the output:</p>\n<pre><code>&quot;output&quot;: {\n    &quot;base&quot;: &quot;${workspace.build.dir}/${build.environment}/${app.name}&quot;,\n    &quot;page&quot;: &quot;index.html&quot;,\n    &quot;manifest&quot;: &quot;${build.id}.json&quot;,\n    &quot;js&quot;: &quot;${build.id}/app.js&quot;,\n    &quot;appCache&quot;: {\n        &quot;enable&quot;: false\n    },\n    &quot;resources&quot;: {\n        &quot;path&quot;: &quot;${build.id}/resources&quot;,\n        &quot;shared&quot;: &quot;resources&quot;\n    }\n}\n</code></pre>\n<p>And here are some handy links: <em>[<a href=\"http://docs.sencha.com/cmd/6.x/advanced\\_cmd/cmd\\_ant.html\\](http://docs.sencha.com/cmd/6.x/advanced\\_cmd/cmd\\_ant.html)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/6.x/advanced\\_cmd/cmd\\_ant.html\\](http://docs.sencha.com/cmd/6.x/advanced\\_cmd/cmd\\_ant.html)</a>\n  </em>[<a href=\"http://ant.apache.org/\\](http://ant.apache.org/)\" target=\"_blank\" rel=\"noopener\">http://ant.apache.org/\\](http://ant.apache.org/)</a>\n  * [<a href=\"http://www.cs.ucsb.edu/~cappello/50/resources/rc104-010d-apacheant\\_0.pdf\\](http://www.cs.ucsb.edu/~cappello/50/resources/rc104-010d-apacheant\\_0.pdf)\" target=\"_blank\" rel=\"noopener\">http://www.cs.ucsb.edu/~cappello/50/resources/rc104-010d-apacheant\\_0.pdf\\](http://www.cs.ucsb.edu/~cappello/50/resources/rc104-010d-apacheant\\_0.pdf)</a></p>\n"},{"title":"How to localize your Sencha Touch applications","url":"573.html","id":"573","date":"2014-11-25T09:25:11.000Z","_content":"\nI live in Europe; in Europe they speak about 23 languages. In some countries it is even common to speak more than 2 or 3 languages. Especially for these countries localisation of applications and websites is very important.\n\nSo you need to come up with a strategy on how to localize all your views.  \nIn Sencha Touch localization works a little different than in Ext JS, since there are no packages; but overall the basic idea is the same:\n\n“All your views shouldn’t contain text literals, but variables.” and “all your views are built dynamically.  \nYou will create a view class override, to “`override`” the variables with language translation.\n\nExt.define('MyApp.view.Main', {\n    extend: 'Ext.tab.Panel',\n    xtype: 'main',\n    requires: \\[\n        'Ext.TitleBar',\n        'Ext.Video'\n    \\],\n    TAB\\_ONE\\_TITLE_SHORT: 'Hello',\n    TAB\\_ONE\\_TITLE: 'Hello Sencha Touch 2',\n    TAB\\_ONE\\_HTML: 'This app was written in English.',\n    config: {\n        tabBarPosition: 'bottom',\n    },\n    initialize: function() {\n\n        var items = \\[{\n                title: this.TAB\\_ONE\\_TITLE_SHORT,\n                iconCls: 'home',\n\n                styleHtmlContent: true,\n                scrollable: true,\n\n                items: {\n                    docked: 'top',\n                    xtype: 'titlebar',\n                    title: this.TAB\\_ONE\\_TITLE\n                },\n\n                html: this.TAB\\_ONE\\_HTML\n            }\n        \\];\n\n        this.add(items);\n        this.callParent();\n    }\n});\n\nI uploaded my code to Github:  \n[  \nhttps://github.com/savelee/hands-on-sencha-touch-2/tree/master/99-Other/Localization  \n](https://github.com/savelee/hands-on-sencha-touch-2/tree/master/99-Other/Localization)\n\nWhen you download and preview this code, it doesn’t look much different than an auto generated app by Sencha Cmd, right? Well the difference here, is that this view is build dynamically [try this out](http://biturlz.com/GVCzYKU).\n\nNote the `initialize: function()`. Instead of coding the items in the config object, we’re creating a variable items, which is an array that contains all the items and are added later to the view. The text literals are not directly written; instead we are pointing to the new class variables: `this.TAB_ONE_TITLE`, `this.TAB_ONE_TITLE_SHORT` and `this.TAB_ONE_HTML`.\n\nNice! So these are the variables which needs an override, to replace these with different language translations. But how do we do that?\n\nWell let’s create a new folder in the app directory first: “**utils**”.  \nIn this folder, you can create another folder, with the name of your language translation and within that folder, you can create the same folder structure as your view directory, (or keep it one single file).\n\nFor this example, I’m using Dutch translation; so my path will look like: **app/utils/nl/Main.js**  \nHere’s the override class:\n\nExt.define('MyApp.utils.nl.Main', {\n\toverride: 'MyApp.view.Main',\n\n    TAB\\_ONE\\_TITLE_SHORT: 'Hallo',\n    TAB\\_ONE\\_TITLE: 'Hallo Sencha Touch 2',\n    TAB\\_ONE\\_HTML: 'Deze app is geschreven in het Nederlands.',\n});\n\nAs soon as it loads this file, it will override the previews defined Main view.  \nOk, so now we have a dynamic view and a view override with language translations. How do you load this in your app? Just add it to the requires!\n\nOpen **app.js**, and add the language class there:  \n`requires: [‘MyApp.utils.view.nl.Main’]`\n\nThat did the trick, the app is now successfully localized to Dutch!\n\nGreat, but what if I want to create a dropdown with all different languages, and let the user select a language?\n\nYou could do this, with for example an Ext.Ajax request, or with Ext.require(), but you will need a hard refresh. When this hard refresh happens it needs to know which language it needs to load.  \nWe can’t save this in the memory because that will be gone during a hard refresh; but we could save it for example in a cookie or browser (local) storage.  \nYou do need to delay the creation of your application, because the call for the language file will be returned in a callback…\n\nThe code for loading should be something like this:\n\n**app.js:**\n\n    launch: function() {\n        onCallback = function(){\n            Ext.Viewport.add(Ext.create('MyApp.view.Main'));\n        }\n\n        Ext.require(localStorage.getItem('language'), onCallback);\n    }\n\nFor my demo I created a Toggle pirate language button; this button sets the localstorage and refreshes the page:\n\n{\ndocked: 'top',\nxtype: 'toolbar',\nitems: \\[{\n    xtype: 'button',\n    text: 'Toggle pirate language',\n    handler: function(){\n        if(localStorage.getItem(\"language\")) {\n            localStorage.removeItem(\"language\");\n        } else {\n            localStorage.setItem(\"language\", \"MyApp.utils.pirate.Main\");\n        }\n        window.location.reload();\n    }\n}\n\nWith this pirate language file:\n\n**app/utils/pirate/Main.js**\n\nExt.define('MyApp.utils.pirate.Main', {\n\toverride: 'MyApp.view.Main',\n\n    TAB\\_ONE\\_TITLE_SHORT: 'Ahoy!',\n    TAB\\_ONE\\_TITLE: 'Ahoy! Sencha Touch 2',\n    TAB\\_ONE\\_HTML: 'Tis app be written in scurvy pirate language, matey!',\n});\n\nAnd that’s the trick!\n\n### Update 2016:\n\nSencha partners: Jnesis, wrote a very nice blog post on how to deal with localization for Ext JS 6, where you don’t have to deal with page refreshes. Please have a look: [Blog Post](https://www.sencha.com/blog/internationalization-localization-with-sencha-ext-js/)","source":"_drafts/how-tos/how-to-localize-your-sencha-touch-applications.md","raw":"---\ntitle: How to localize your Sencha Touch applications\ntags:\n  - l8n\n  - languages\n  - localization\n  - overwrites\n  - Sencha Touch\n  - translation\nurl: 573.html\nid: 573\ncategories:\n  - Sencha\n  - Sencha Touch\ndate: 2014-11-25 10:25:11\n---\n\nI live in Europe; in Europe they speak about 23 languages. In some countries it is even common to speak more than 2 or 3 languages. Especially for these countries localisation of applications and websites is very important.\n\nSo you need to come up with a strategy on how to localize all your views.  \nIn Sencha Touch localization works a little different than in Ext JS, since there are no packages; but overall the basic idea is the same:\n\n“All your views shouldn’t contain text literals, but variables.” and “all your views are built dynamically.  \nYou will create a view class override, to “`override`” the variables with language translation.\n\nExt.define('MyApp.view.Main', {\n    extend: 'Ext.tab.Panel',\n    xtype: 'main',\n    requires: \\[\n        'Ext.TitleBar',\n        'Ext.Video'\n    \\],\n    TAB\\_ONE\\_TITLE_SHORT: 'Hello',\n    TAB\\_ONE\\_TITLE: 'Hello Sencha Touch 2',\n    TAB\\_ONE\\_HTML: 'This app was written in English.',\n    config: {\n        tabBarPosition: 'bottom',\n    },\n    initialize: function() {\n\n        var items = \\[{\n                title: this.TAB\\_ONE\\_TITLE_SHORT,\n                iconCls: 'home',\n\n                styleHtmlContent: true,\n                scrollable: true,\n\n                items: {\n                    docked: 'top',\n                    xtype: 'titlebar',\n                    title: this.TAB\\_ONE\\_TITLE\n                },\n\n                html: this.TAB\\_ONE\\_HTML\n            }\n        \\];\n\n        this.add(items);\n        this.callParent();\n    }\n});\n\nI uploaded my code to Github:  \n[  \nhttps://github.com/savelee/hands-on-sencha-touch-2/tree/master/99-Other/Localization  \n](https://github.com/savelee/hands-on-sencha-touch-2/tree/master/99-Other/Localization)\n\nWhen you download and preview this code, it doesn’t look much different than an auto generated app by Sencha Cmd, right? Well the difference here, is that this view is build dynamically [try this out](http://biturlz.com/GVCzYKU).\n\nNote the `initialize: function()`. Instead of coding the items in the config object, we’re creating a variable items, which is an array that contains all the items and are added later to the view. The text literals are not directly written; instead we are pointing to the new class variables: `this.TAB_ONE_TITLE`, `this.TAB_ONE_TITLE_SHORT` and `this.TAB_ONE_HTML`.\n\nNice! So these are the variables which needs an override, to replace these with different language translations. But how do we do that?\n\nWell let’s create a new folder in the app directory first: “**utils**”.  \nIn this folder, you can create another folder, with the name of your language translation and within that folder, you can create the same folder structure as your view directory, (or keep it one single file).\n\nFor this example, I’m using Dutch translation; so my path will look like: **app/utils/nl/Main.js**  \nHere’s the override class:\n\nExt.define('MyApp.utils.nl.Main', {\n\toverride: 'MyApp.view.Main',\n\n    TAB\\_ONE\\_TITLE_SHORT: 'Hallo',\n    TAB\\_ONE\\_TITLE: 'Hallo Sencha Touch 2',\n    TAB\\_ONE\\_HTML: 'Deze app is geschreven in het Nederlands.',\n});\n\nAs soon as it loads this file, it will override the previews defined Main view.  \nOk, so now we have a dynamic view and a view override with language translations. How do you load this in your app? Just add it to the requires!\n\nOpen **app.js**, and add the language class there:  \n`requires: [‘MyApp.utils.view.nl.Main’]`\n\nThat did the trick, the app is now successfully localized to Dutch!\n\nGreat, but what if I want to create a dropdown with all different languages, and let the user select a language?\n\nYou could do this, with for example an Ext.Ajax request, or with Ext.require(), but you will need a hard refresh. When this hard refresh happens it needs to know which language it needs to load.  \nWe can’t save this in the memory because that will be gone during a hard refresh; but we could save it for example in a cookie or browser (local) storage.  \nYou do need to delay the creation of your application, because the call for the language file will be returned in a callback…\n\nThe code for loading should be something like this:\n\n**app.js:**\n\n    launch: function() {\n        onCallback = function(){\n            Ext.Viewport.add(Ext.create('MyApp.view.Main'));\n        }\n\n        Ext.require(localStorage.getItem('language'), onCallback);\n    }\n\nFor my demo I created a Toggle pirate language button; this button sets the localstorage and refreshes the page:\n\n{\ndocked: 'top',\nxtype: 'toolbar',\nitems: \\[{\n    xtype: 'button',\n    text: 'Toggle pirate language',\n    handler: function(){\n        if(localStorage.getItem(\"language\")) {\n            localStorage.removeItem(\"language\");\n        } else {\n            localStorage.setItem(\"language\", \"MyApp.utils.pirate.Main\");\n        }\n        window.location.reload();\n    }\n}\n\nWith this pirate language file:\n\n**app/utils/pirate/Main.js**\n\nExt.define('MyApp.utils.pirate.Main', {\n\toverride: 'MyApp.view.Main',\n\n    TAB\\_ONE\\_TITLE_SHORT: 'Ahoy!',\n    TAB\\_ONE\\_TITLE: 'Ahoy! Sencha Touch 2',\n    TAB\\_ONE\\_HTML: 'Tis app be written in scurvy pirate language, matey!',\n});\n\nAnd that’s the trick!\n\n### Update 2016:\n\nSencha partners: Jnesis, wrote a very nice blog post on how to deal with localization for Ext JS 6, where you don’t have to deal with page refreshes. Please have a look: [Blog Post](https://www.sencha.com/blog/internationalization-localization-with-sencha-ext-js/)","slug":"how-tos/how-to-localize-your-sencha-touch-applications","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncti00f3kif5se6zq2fz","content":"<p>I live in Europe; in Europe they speak about 23 languages. In some countries\n  it is even common to speak more than 2 or 3 languages. Especially for these\n  countries localisation of applications and websites is very important.</p>\n<p>So you need to come up with a strategy on how to localize all your views.<br>In\n  Sencha Touch localization works a little different than in Ext JS, since\n  there are no packages; but overall the basic idea is the same:</p>\n<p>“All your views shouldn’t contain text literals, but variables.” and “all\n  your views are built dynamically.<br>You will create a view class override,\n  to “<code>override</code>” the variables with language translation.</p>\n<p>Ext.define(‘MyApp.view.Main’, { extend: ‘Ext.tab.Panel’, xtype: ‘main’,\n  requires: [ ‘Ext.TitleBar’, ‘Ext.Video’ ], TAB_ONE_TITLE_SHORT: ‘Hello’,\n  TAB_ONE_TITLE: ‘Hello Sencha Touch 2’, TAB_ONE_HTML: ‘This app was written in\n  English.’, config: { tabBarPosition: ‘bottom’, }, initialize: function() {</p>\n<pre><code>    var items = \\[{\n            title: this.TAB\\_ONE\\_TITLE_SHORT,\n            iconCls: &apos;home&apos;,\n\n            styleHtmlContent: true,\n            scrollable: true,\n\n            items: {\n                docked: &apos;top&apos;,\n                xtype: &apos;titlebar&apos;,\n                title: this.TAB\\_ONE\\_TITLE\n            },\n\n            html: this.TAB\\_ONE\\_HTML\n        }\n    \\];\n\n    this.add(items);\n    this.callParent();\n}\n</code></pre>\n<p>});</p>\n<p>I uploaded my code to Github:<br><a href=\"https://github.com/savelee/hands-on-sencha-touch-2/tree/master/99-Other/Localization\" target=\"_blank\" rel=\"noopener\"><br>https://github.com/savelee/hands-on-sencha-touch-2/tree/master/99-Other/Localization</a></p>\n<p>When you download and preview this code, it doesn’t look much different than\n  an auto generated app by Sencha Cmd, right? Well the difference here, is that\n  this view is build dynamically <a href=\"http://biturlz.com/GVCzYKU\" target=\"_blank\" rel=\"noopener\">try this\n    out</a>.</p>\n<p>Note the <code>initialize: function()</code>. Instead of coding the items in\n  the config object, we’re creating a variable items, which is an array that\n  contains all the items and are added later to the view. The text literals are\n  not directly written; instead we are pointing to the new class variables:\n  <code>this.TAB_ONE_TITLE</code>, <code>this.TAB_ONE_TITLE_SHORT</code> and\n  <code>this.TAB_ONE_HTML</code>.</p>\n<p>Nice! So these are the variables which needs an override, to replace these\n  with different language translations. But how do we do that?</p>\n<p>Well let’s create a new folder in the app directory first: “<strong>utils</strong>”.<br>In\n  this folder, you can create another folder, with the name of your language\n  translation and within that folder, you can create the same folder structure\n  as your view directory, (or keep it one single file).</p>\n<p>For this example, I’m using Dutch translation; so my path will look like:\n  <strong>app/utils/nl/Main.js</strong><br>Here’s the override class:</p>\n<p>Ext.define(‘MyApp.utils.nl.Main’, { override: ‘MyApp.view.Main’,</p>\n<pre><code>TAB\\_ONE\\_TITLE_SHORT: &apos;Hallo&apos;,\nTAB\\_ONE\\_TITLE: &apos;Hallo Sencha Touch 2&apos;,\nTAB\\_ONE\\_HTML: &apos;Deze app is geschreven in het Nederlands.&apos;,\n</code></pre>\n<p>});</p>\n<p>As soon as it loads this file, it will override the previews defined Main\n  view.<br>Ok, so now we have a dynamic view and a view override with language\n  translations. How do you load this in your app? Just add it to the requires!</p>\n<p>Open <strong>app.js</strong>, and add the language class there:<br><code>requires:\n    [‘MyApp.utils.view.nl.Main’]</code></p>\n<p>That did the trick, the app is now successfully localized to Dutch!</p>\n<p>Great, but what if I want to create a dropdown with all different languages,\n  and let the user select a language?</p>\n<p>You could do this, with for example an Ext.Ajax request, or with\n  Ext.require(), but you will need a hard refresh. When this hard refresh\n  happens it needs to know which language it needs to load.<br>We can’t save\n  this in the memory because that will be gone during a hard refresh; but we\n  could save it for example in a cookie or browser (local) storage.<br>You do\n  need to delay the creation of your application, because the call for the\n  language file will be returned in a callback…</p>\n<p>The code for loading should be something like this:</p>\n<p><strong>app.js:</strong></p>\n<pre><code>launch: function() {\n    onCallback = function(){\n        Ext.Viewport.add(Ext.create(&apos;MyApp.view.Main&apos;));\n    }\n\n    Ext.require(localStorage.getItem(&apos;language&apos;), onCallback);\n}\n</code></pre>\n<p>For my demo I created a Toggle pirate language button; this button sets the\n  localstorage and refreshes the page:</p>\n<p>{ docked: ‘top’, xtype: ‘toolbar’, items: [{ xtype: ‘button’, text: ‘Toggle\n  pirate language’, handler: function(){ if(localStorage.getItem(“language”)) {\n  localStorage.removeItem(“language”); } else {\n  localStorage.setItem(“language”, “MyApp.utils.pirate.Main”); }\n  window.location.reload(); } }</p>\n<p>With this pirate language file:</p>\n<p><strong>app/utils/pirate/Main.js</strong></p>\n<p>Ext.define(‘MyApp.utils.pirate.Main’, { override: ‘MyApp.view.Main’,</p>\n<pre><code>TAB\\_ONE\\_TITLE_SHORT: &apos;Ahoy!&apos;,\nTAB\\_ONE\\_TITLE: &apos;Ahoy! Sencha Touch 2&apos;,\nTAB\\_ONE\\_HTML: &apos;Tis app be written in scurvy pirate language, matey!&apos;,\n</code></pre>\n<p>});</p>\n<p>And that’s the trick!</p>\n<h3 id=\"Update-2016\"><a href=\"#Update-2016\" class=\"headerlink\" title=\"Update 2016:\"></a>Update\n  2016:</h3>\n<p>Sencha partners: Jnesis, wrote a very nice blog post on how to deal with\n  localization for Ext JS 6, where you don’t have to deal with page refreshes.\n  Please have a look: <a href=\"https://www.sencha.com/blog/internationalization-localization-with-sencha-ext-js/\" target=\"_blank\" rel=\"noopener\">Blog\n    Post</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>I live in Europe; in Europe they speak about 23 languages. In some countries\n  it is even common to speak more than 2 or 3 languages. Especially for these\n  countries localisation of applications and websites is very important.</p>\n<p>So you need to come up with a strategy on how to localize all your views.<br>In\n  Sencha Touch localization works a little different than in Ext JS, since\n  there are no packages; but overall the basic idea is the same:</p>\n<p>“All your views shouldn’t contain text literals, but variables.” and “all\n  your views are built dynamically.<br>You will create a view class override,\n  to “<code>override</code>” the variables with language translation.</p>\n<p>Ext.define(‘MyApp.view.Main’, { extend: ‘Ext.tab.Panel’, xtype: ‘main’,\n  requires: [ ‘Ext.TitleBar’, ‘Ext.Video’ ], TAB_ONE_TITLE_SHORT: ‘Hello’,\n  TAB_ONE_TITLE: ‘Hello Sencha Touch 2’, TAB_ONE_HTML: ‘This app was written in\n  English.’, config: { tabBarPosition: ‘bottom’, }, initialize: function() {</p>\n<pre><code>    var items = \\[{\n            title: this.TAB\\_ONE\\_TITLE_SHORT,\n            iconCls: &apos;home&apos;,\n\n            styleHtmlContent: true,\n            scrollable: true,\n\n            items: {\n                docked: &apos;top&apos;,\n                xtype: &apos;titlebar&apos;,\n                title: this.TAB\\_ONE\\_TITLE\n            },\n\n            html: this.TAB\\_ONE\\_HTML\n        }\n    \\];\n\n    this.add(items);\n    this.callParent();\n}\n</code></pre>\n<p>});</p>\n<p>I uploaded my code to Github:<br><a href=\"https://github.com/savelee/hands-on-sencha-touch-2/tree/master/99-Other/Localization\" target=\"_blank\" rel=\"noopener\"><br>https://github.com/savelee/hands-on-sencha-touch-2/tree/master/99-Other/Localization</a></p>\n<p>When you download and preview this code, it doesn’t look much different than\n  an auto generated app by Sencha Cmd, right? Well the difference here, is that\n  this view is build dynamically <a href=\"http://biturlz.com/GVCzYKU\" target=\"_blank\" rel=\"noopener\">try this\n    out</a>.</p>\n<p>Note the <code>initialize: function()</code>. Instead of coding the items in\n  the config object, we’re creating a variable items, which is an array that\n  contains all the items and are added later to the view. The text literals are\n  not directly written; instead we are pointing to the new class variables:\n  <code>this.TAB_ONE_TITLE</code>, <code>this.TAB_ONE_TITLE_SHORT</code> and\n  <code>this.TAB_ONE_HTML</code>.</p>\n<p>Nice! So these are the variables which needs an override, to replace these\n  with different language translations. But how do we do that?</p>\n<p>Well let’s create a new folder in the app directory first: “<strong>utils</strong>”.<br>In\n  this folder, you can create another folder, with the name of your language\n  translation and within that folder, you can create the same folder structure\n  as your view directory, (or keep it one single file).</p>\n<p>For this example, I’m using Dutch translation; so my path will look like:\n  <strong>app/utils/nl/Main.js</strong><br>Here’s the override class:</p>\n<p>Ext.define(‘MyApp.utils.nl.Main’, { override: ‘MyApp.view.Main’,</p>\n<pre><code>TAB\\_ONE\\_TITLE_SHORT: &apos;Hallo&apos;,\nTAB\\_ONE\\_TITLE: &apos;Hallo Sencha Touch 2&apos;,\nTAB\\_ONE\\_HTML: &apos;Deze app is geschreven in het Nederlands.&apos;,\n</code></pre>\n<p>});</p>\n<p>As soon as it loads this file, it will override the previews defined Main\n  view.<br>Ok, so now we have a dynamic view and a view override with language\n  translations. How do you load this in your app? Just add it to the requires!</p>\n<p>Open <strong>app.js</strong>, and add the language class there:<br><code>requires:\n    [‘MyApp.utils.view.nl.Main’]</code></p>\n<p>That did the trick, the app is now successfully localized to Dutch!</p>\n<p>Great, but what if I want to create a dropdown with all different languages,\n  and let the user select a language?</p>\n<p>You could do this, with for example an Ext.Ajax request, or with\n  Ext.require(), but you will need a hard refresh. When this hard refresh\n  happens it needs to know which language it needs to load.<br>We can’t save\n  this in the memory because that will be gone during a hard refresh; but we\n  could save it for example in a cookie or browser (local) storage.<br>You do\n  need to delay the creation of your application, because the call for the\n  language file will be returned in a callback…</p>\n<p>The code for loading should be something like this:</p>\n<p><strong>app.js:</strong></p>\n<pre><code>launch: function() {\n    onCallback = function(){\n        Ext.Viewport.add(Ext.create(&apos;MyApp.view.Main&apos;));\n    }\n\n    Ext.require(localStorage.getItem(&apos;language&apos;), onCallback);\n}\n</code></pre>\n<p>For my demo I created a Toggle pirate language button; this button sets the\n  localstorage and refreshes the page:</p>\n<p>{ docked: ‘top’, xtype: ‘toolbar’, items: [{ xtype: ‘button’, text: ‘Toggle\n  pirate language’, handler: function(){ if(localStorage.getItem(“language”)) {\n  localStorage.removeItem(“language”); } else {\n  localStorage.setItem(“language”, “MyApp.utils.pirate.Main”); }\n  window.location.reload(); } }</p>\n<p>With this pirate language file:</p>\n<p><strong>app/utils/pirate/Main.js</strong></p>\n<p>Ext.define(‘MyApp.utils.pirate.Main’, { override: ‘MyApp.view.Main’,</p>\n<pre><code>TAB\\_ONE\\_TITLE_SHORT: &apos;Ahoy!&apos;,\nTAB\\_ONE\\_TITLE: &apos;Ahoy! Sencha Touch 2&apos;,\nTAB\\_ONE\\_HTML: &apos;Tis app be written in scurvy pirate language, matey!&apos;,\n</code></pre>\n<p>});</p>\n<p>And that’s the trick!</p>\n<h3 id=\"Update-2016\"><a href=\"#Update-2016\" class=\"headerlink\" title=\"Update 2016:\"></a>Update\n  2016:</h3>\n<p>Sencha partners: Jnesis, wrote a very nice blog post on how to deal with\n  localization for Ext JS 6, where you don’t have to deal with page refreshes.\n  Please have a look: <a href=\"https://www.sencha.com/blog/internationalization-localization-with-sencha-ext-js/\" target=\"_blank\" rel=\"noopener\">Blog\n    Post</a></p>\n"},{"title":"How to switch Sencha Cmd versions from the command-line?","url":"1294.html","id":"1294","date":"2016-04-25T08:09:42.000Z","_content":"\nDid you know that you can very easily switch between multiple Sencha Cmd versions from the command-line? With the release of Sencha Cmd 6, it's actually very easy, and you no longer, need to manually open your system variables or .bash_profile file. With the following command you check how which versions are installed: https://gist.github.com/savelee/1bdc983377278def9c97f43ae759a7d0","source":"_drafts/how-tos/how-to-switch-sencha-cmd-versions-from-the-command-line.md","raw":"---\ntitle: How to switch Sencha Cmd versions from the command-line?\ntags:\n  - Sencha CMD\n  - switch\nurl: 1294.html\nid: 1294\ncategories:\n  - Cmd\ndate: 2016-04-25 10:09:42\n---\n\nDid you know that you can very easily switch between multiple Sencha Cmd versions from the command-line? With the release of Sencha Cmd 6, it's actually very easy, and you no longer, need to manually open your system variables or .bash_profile file. With the following command you check how which versions are installed: https://gist.github.com/savelee/1bdc983377278def9c97f43ae759a7d0","slug":"how-tos/how-to-switch-sencha-cmd-versions-from-the-command-line","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnctj00f6kif5lvxi9c0n","content":"<p>Did you know that you can very easily switch between multiple Sencha Cmd\n  versions from the command-line? With the release of Sencha Cmd 6, it’s\n  actually very easy, and you no longer, need to manually open your system\n  variables or .bash_profile file. With the following command you check how\n  which versions are installed: <a href=\"https://gist.github.com/savelee/1bdc983377278def9c97f43ae759a7d0\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/1bdc983377278def9c97f43ae759a7d0</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Did you know that you can very easily switch between multiple Sencha Cmd\n  versions from the command-line? With the release of Sencha Cmd 6, it’s\n  actually very easy, and you no longer, need to manually open your system\n  variables or .bash_profile file. With the following command you check how\n  which versions are installed: <a href=\"https://gist.github.com/savelee/1bdc983377278def9c97f43ae759a7d0\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/1bdc983377278def9c97f43ae759a7d0</a></p>\n"},{"title":"How to prepare your machine for GXT 4 development","url":"1149.html","id":"1149","date":"2016-01-07T10:15:20.000Z","_content":"\nFor this tutorial, we will setup a GXT development machine with: Java, Eclipse, GWT Eclipse plugin, Maven and GXT 4 installed. ##Install Java You'll need to have Java 1.7 JDK installed on the mac. Sourcing down from Java 1.8 with GWT 2.7 has issues at times. If you install the Java 1.7 JDK you can change back in for with an export env variable for JAVA\\_HOME. \\[http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\\](http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html) In my case I had Java 1.8 JDK already installed. So I removed the 1.8 folder this from: /Library/Java/JavaVirtualMachines/ Then I set the correct JAVA\\_HOME. On the command-line I type: `/usr/libexec/java_home -v 1.7.0.79 --exec javac -version` Then I run on the command-line: `javac -version` When correct, it outputs: \\*\\*javac 1.7.0\\_79\\*\\* ##Install Eclipse I choose Eclipse Mars EE: \\[http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/mars/1/eclipse-java-mars-1-macosx-cocoa-x86\\_64.tar.gz\\](http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/mars/1/eclipse-java-mars-1-macosx-cocoa-x86_64.tar.gz) After downloading unpack, and drag the application into the Mac applications folder. ##Install the GWT Plugin for Eclipse Start Eclipse. It will ask you to select a workspace. I suggest using a clean separate workspace. For example: */Applications/Tomcat/webapps/ROOT/GXT* You can enter the name of a new workspace or select the default. If Eclipse presents you with a welcome screen, you may close it. Eclipse → Help → Install New Software Click the \\*Add\\* button. Use this update site: http://storage.googleapis.com/gwt-eclipse-plugin/snapshot Select the following software: * GWT for Eclipse → Google Plugin for Eclipse * GWT for Eclipse → GWT SDK Click, Next, Next, Accept, Finish Restart Eclipse ##Download GXT 4 If your company has a support contract for GXT, download the latest GXT zip file from the Sencha Support Portal. The Sencha GXT zip file contains GXT source code, GXT Javadoc and the jar files for GXT and charting. There's also a deployable Web Archive (war) for the GXT Explorer Demo. * Create a directory for the Sencha GXT distribution and unzip the file into it. * Navigate to index.html in the new directory and open it in the browser. ##Install Maven I've downloaded apache-maven-3.3.9-bin.zip from: \\[https://maven.apache.org/download.cgi\\](https://maven.apache.org/download.cgi). * Unzip it to a place on your hard drive, for example ~/bin/apache-maven-3.3.9 * Add the \\*bin\\* directory of the created directory \\*apache-maven-3.3.9\\* to the PATH environment variable. https://gist.github.com/savelee/6f2b0d9cddff56651710 Confirm it worked, by running `mvn -v` on the CLI. It should output, something similar like:\n\nApache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T17:41:47+01:00)\nMaven home: /Users/myusername/bin/apache-maven-3.3.9\nJava version: 1.7.0_79, vendor: Oracle Corporation\nJava home: /Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home/jre\nDefault locale: en_US, platform encoding: UTF-8\nOS name: \"mac os x\", version: \"10.11.1\", arch: \"x86_64\", family: \"mac\"\nMacBook-Pro-3:~ myusername$ \n\nAnd that's it, you are good to go! To get your first GXT project up and running, I followed these 3 Sencha guides:\n\n1.  [Create a GWT project](http://docs.sencha.com/gxt/4.x/getting_started/ide/eclipse/Create_Gwt_Project_Standard_Eclipse.html)\n2.  [Getting Started with GXT](http://docs.sencha.com/gxt/4.x/getting_started/ide/eclipse/Getting_Started_Eclipse_Standard.html)\n3.  [Optimizing for touch support](http://docs.sencha.com/gxt/4.x/getting_started/ide/eclipse/Getting_Started_Eclipse_Standard.html)\n\n(In case you don't get the prompt to install the GWT Google Chrome developer plugin, follow these steps: \\[http://docs.sencha.com/gxt/4.x/getting\\_started/Getting\\_Started\\_with\\_Touch.html\\](https://tearoom6.wordpress.com/2013/02/24/google-web-toolkit-developer-plugin/)","source":"_drafts/how-tos/how-to-prepare-your-machine-for-gxt-4-development.md","raw":"---\ntitle: How to prepare your machine for GXT 4 development\ntags:\n  - gwt\n  - gxt\n  - java\n  - maven\nurl: 1149.html\nid: 1149\ncategories:\n  - GXT\ndate: 2016-01-07 11:15:20\n---\n\nFor this tutorial, we will setup a GXT development machine with: Java, Eclipse, GWT Eclipse plugin, Maven and GXT 4 installed. ##Install Java You'll need to have Java 1.7 JDK installed on the mac. Sourcing down from Java 1.8 with GWT 2.7 has issues at times. If you install the Java 1.7 JDK you can change back in for with an export env variable for JAVA\\_HOME. \\[http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\\](http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html) In my case I had Java 1.8 JDK already installed. So I removed the 1.8 folder this from: /Library/Java/JavaVirtualMachines/ Then I set the correct JAVA\\_HOME. On the command-line I type: `/usr/libexec/java_home -v 1.7.0.79 --exec javac -version` Then I run on the command-line: `javac -version` When correct, it outputs: \\*\\*javac 1.7.0\\_79\\*\\* ##Install Eclipse I choose Eclipse Mars EE: \\[http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/mars/1/eclipse-java-mars-1-macosx-cocoa-x86\\_64.tar.gz\\](http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/mars/1/eclipse-java-mars-1-macosx-cocoa-x86_64.tar.gz) After downloading unpack, and drag the application into the Mac applications folder. ##Install the GWT Plugin for Eclipse Start Eclipse. It will ask you to select a workspace. I suggest using a clean separate workspace. For example: */Applications/Tomcat/webapps/ROOT/GXT* You can enter the name of a new workspace or select the default. If Eclipse presents you with a welcome screen, you may close it. Eclipse → Help → Install New Software Click the \\*Add\\* button. Use this update site: http://storage.googleapis.com/gwt-eclipse-plugin/snapshot Select the following software: * GWT for Eclipse → Google Plugin for Eclipse * GWT for Eclipse → GWT SDK Click, Next, Next, Accept, Finish Restart Eclipse ##Download GXT 4 If your company has a support contract for GXT, download the latest GXT zip file from the Sencha Support Portal. The Sencha GXT zip file contains GXT source code, GXT Javadoc and the jar files for GXT and charting. There's also a deployable Web Archive (war) for the GXT Explorer Demo. * Create a directory for the Sencha GXT distribution and unzip the file into it. * Navigate to index.html in the new directory and open it in the browser. ##Install Maven I've downloaded apache-maven-3.3.9-bin.zip from: \\[https://maven.apache.org/download.cgi\\](https://maven.apache.org/download.cgi). * Unzip it to a place on your hard drive, for example ~/bin/apache-maven-3.3.9 * Add the \\*bin\\* directory of the created directory \\*apache-maven-3.3.9\\* to the PATH environment variable. https://gist.github.com/savelee/6f2b0d9cddff56651710 Confirm it worked, by running `mvn -v` on the CLI. It should output, something similar like:\n\nApache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T17:41:47+01:00)\nMaven home: /Users/myusername/bin/apache-maven-3.3.9\nJava version: 1.7.0_79, vendor: Oracle Corporation\nJava home: /Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home/jre\nDefault locale: en_US, platform encoding: UTF-8\nOS name: \"mac os x\", version: \"10.11.1\", arch: \"x86_64\", family: \"mac\"\nMacBook-Pro-3:~ myusername$ \n\nAnd that's it, you are good to go! To get your first GXT project up and running, I followed these 3 Sencha guides:\n\n1.  [Create a GWT project](http://docs.sencha.com/gxt/4.x/getting_started/ide/eclipse/Create_Gwt_Project_Standard_Eclipse.html)\n2.  [Getting Started with GXT](http://docs.sencha.com/gxt/4.x/getting_started/ide/eclipse/Getting_Started_Eclipse_Standard.html)\n3.  [Optimizing for touch support](http://docs.sencha.com/gxt/4.x/getting_started/ide/eclipse/Getting_Started_Eclipse_Standard.html)\n\n(In case you don't get the prompt to install the GWT Google Chrome developer plugin, follow these steps: \\[http://docs.sencha.com/gxt/4.x/getting\\_started/Getting\\_Started\\_with\\_Touch.html\\](https://tearoom6.wordpress.com/2013/02/24/google-web-toolkit-developer-plugin/)","slug":"how-tos/how-to-prepare-your-machine-for-gxt-4-development","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnctk00fakif5vr736i0j","content":"<p>For this tutorial, we will setup a GXT development machine with: Java,\n  Eclipse, GWT Eclipse plugin, Maven and GXT 4 installed. ##Install Java You’ll\n  need to have Java 1.7 JDK installed on the mac. Sourcing down from Java 1.8\n  with GWT 2.7 has issues at times. If you install the Java 1.7 JDK you can\n  change back in for with an export env variable for JAVA_HOME. [<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\\](http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html)\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\\](http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html)</a>\n  In my case I had Java 1.8 JDK already installed. So I removed the 1.8 folder\n  this from: /Library/Java/JavaVirtualMachines/ Then I set the correct\n  JAVA_HOME. On the command-line I type: <code>/usr/libexec/java_home -v\n    1.7.0.79 --exec javac -version</code> Then I run on the command-line: <code>javac\n    -version</code> When correct, it outputs: **javac 1.7.0_79** ##Install\n  Eclipse I choose Eclipse Mars EE: [<a href=\"http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/mars/1/eclipse-java-mars-1-macosx-cocoa-x86\\_64.tar.gz\\](http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/mars/1/eclipse-java-mars-1-macosx-cocoa-x86_64.tar.gz)\" target=\"_blank\" rel=\"noopener\">http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/mars/1/eclipse-java-mars-1-macosx-cocoa-x86\\_64.tar.gz\\](http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/mars/1/eclipse-java-mars-1-macosx-cocoa-x86_64.tar.gz)</a>\n  After downloading unpack, and drag the application into the Mac applications\n  folder. ##Install the GWT Plugin for Eclipse Start Eclipse. It will ask you\n  to select a workspace. I suggest using a clean separate workspace. For\n  example: <em>/Applications/Tomcat/webapps/ROOT/GXT</em> You can enter the\n  name of a new workspace or select the default. If Eclipse presents you with a\n  welcome screen, you may close it. Eclipse → Help → Install New Software Click\n  the *Add* button. Use this update site: <a href=\"http://storage.googleapis.com/gwt-eclipse-plugin/snapshot\" target=\"_blank\" rel=\"noopener\">http://storage.googleapis.com/gwt-eclipse-plugin/snapshot</a>\n  Select the following software: <em>GWT for Eclipse → Google Plugin for\n    Eclipse </em>GWT for Eclipse → GWT SDK Click, Next, Next, Accept, Finish\n  Restart Eclipse ##Download GXT 4 If your company has a support contract for\n  GXT, download the latest GXT zip file from the Sencha Support Portal. The\n  Sencha GXT zip file contains GXT source code, GXT Javadoc and the jar files\n  for GXT and charting. There’s also a deployable Web Archive (war) for the GXT\n  Explorer Demo. <em>Create a directory for the Sencha GXT distribution and\n    unzip the file into it. </em>Navigate to index.html in the new directory\n  and open it in the browser. ##Install Maven I’ve downloaded\n  apache-maven-3.3.9-bin.zip from: [<a href=\"https://maven.apache.org/download.cgi\\](https://maven.apache.org/download.cgi)\" target=\"_blank\" rel=\"noopener\">https://maven.apache.org/download.cgi\\](https://maven.apache.org/download.cgi)</a>.\n  <em>Unzip it to a place on your hard drive, for example\n    ~/bin/apache-maven-3.3.9 </em>Add the *bin* directory of the created\n  directory *apache-maven-3.3.9* to the PATH environment variable. <a href=\"https://gist.github.com/savelee/6f2b0d9cddff56651710\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/6f2b0d9cddff56651710</a>\n  Confirm it worked, by running <code>mvn -v</code> on the CLI. It should\n  output, something similar like:</p>\n<p>Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5;\n  2015-11-10T17:41:47+01:00) Maven home:\n  /Users/myusername/bin/apache-maven-3.3.9 Java version: 1.7.0_79, vendor:\n  Oracle Corporation Java home:\n  /Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home/jre Default\n  locale: en_US, platform encoding: UTF-8 OS name: “mac os x”, version:\n  “10.11.1”, arch: “x86_64”, family: “mac” MacBook-Pro-3:~ myusername$</p>\n<p>And that’s it, you are good to go! To get your first GXT project up and\n  running, I followed these 3 Sencha guides:</p>\n<ol>\n  <li><a href=\"http://docs.sencha.com/gxt/4.x/getting_started/ide/eclipse/Create_Gwt_Project_Standard_Eclipse.html\" target=\"_blank\" rel=\"noopener\">Create\n      a GWT project</a></li>\n  <li><a href=\"http://docs.sencha.com/gxt/4.x/getting_started/ide/eclipse/Getting_Started_Eclipse_Standard.html\" target=\"_blank\" rel=\"noopener\">Getting\n      Started with GXT</a></li>\n  <li><a href=\"http://docs.sencha.com/gxt/4.x/getting_started/ide/eclipse/Getting_Started_Eclipse_Standard.html\" target=\"_blank\" rel=\"noopener\">Optimizing\n      for touch support</a></li>\n</ol>\n<p>(In case you don’t get the prompt to install the GWT Google Chrome developer\n  plugin, follow these steps: [<a href=\"http://docs.sencha.com/gxt/4.x/getting\\_started/Getting\\_Started\\_with\\_Touch.html\\](https://tearoom6.wordpress.com/2013/02/24/google-web-toolkit-developer-plugin/)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/gxt/4.x/getting\\_started/Getting\\_Started\\_with\\_Touch.html\\](https://tearoom6.wordpress.com/2013/02/24/google-web-toolkit-developer-plugin/)</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>For this tutorial, we will setup a GXT development machine with: Java,\n  Eclipse, GWT Eclipse plugin, Maven and GXT 4 installed. ##Install Java You’ll\n  need to have Java 1.7 JDK installed on the mac. Sourcing down from Java 1.8\n  with GWT 2.7 has issues at times. If you install the Java 1.7 JDK you can\n  change back in for with an export env variable for JAVA_HOME. [<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\\](http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html)\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\\](http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html)</a>\n  In my case I had Java 1.8 JDK already installed. So I removed the 1.8 folder\n  this from: /Library/Java/JavaVirtualMachines/ Then I set the correct\n  JAVA_HOME. On the command-line I type: <code>/usr/libexec/java_home -v\n    1.7.0.79 --exec javac -version</code> Then I run on the command-line: <code>javac\n    -version</code> When correct, it outputs: **javac 1.7.0_79** ##Install\n  Eclipse I choose Eclipse Mars EE: [<a href=\"http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/mars/1/eclipse-java-mars-1-macosx-cocoa-x86\\_64.tar.gz\\](http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/mars/1/eclipse-java-mars-1-macosx-cocoa-x86_64.tar.gz)\" target=\"_blank\" rel=\"noopener\">http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/mars/1/eclipse-java-mars-1-macosx-cocoa-x86\\_64.tar.gz\\](http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/mars/1/eclipse-java-mars-1-macosx-cocoa-x86_64.tar.gz)</a>\n  After downloading unpack, and drag the application into the Mac applications\n  folder. ##Install the GWT Plugin for Eclipse Start Eclipse. It will ask you\n  to select a workspace. I suggest using a clean separate workspace. For\n  example: <em>/Applications/Tomcat/webapps/ROOT/GXT</em> You can enter the\n  name of a new workspace or select the default. If Eclipse presents you with a\n  welcome screen, you may close it. Eclipse → Help → Install New Software Click\n  the *Add* button. Use this update site: <a href=\"http://storage.googleapis.com/gwt-eclipse-plugin/snapshot\" target=\"_blank\" rel=\"noopener\">http://storage.googleapis.com/gwt-eclipse-plugin/snapshot</a>\n  Select the following software: <em>GWT for Eclipse → Google Plugin for\n    Eclipse </em>GWT for Eclipse → GWT SDK Click, Next, Next, Accept, Finish\n  Restart Eclipse ##Download GXT 4 If your company has a support contract for\n  GXT, download the latest GXT zip file from the Sencha Support Portal. The\n  Sencha GXT zip file contains GXT source code, GXT Javadoc and the jar files\n  for GXT and charting. There’s also a deployable Web Archive (war) for the GXT\n  Explorer Demo. <em>Create a directory for the Sencha GXT distribution and\n    unzip the file into it. </em>Navigate to index.html in the new directory\n  and open it in the browser. ##Install Maven I’ve downloaded\n  apache-maven-3.3.9-bin.zip from: [<a href=\"https://maven.apache.org/download.cgi\\](https://maven.apache.org/download.cgi)\" target=\"_blank\" rel=\"noopener\">https://maven.apache.org/download.cgi\\](https://maven.apache.org/download.cgi)</a>.\n  <em>Unzip it to a place on your hard drive, for example\n    ~/bin/apache-maven-3.3.9 </em>Add the *bin* directory of the created\n  directory *apache-maven-3.3.9* to the PATH environment variable. <a href=\"https://gist.github.com/savelee/6f2b0d9cddff56651710\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/6f2b0d9cddff56651710</a>\n  Confirm it worked, by running <code>mvn -v</code> on the CLI. It should\n  output, something similar like:</p>\n<p>Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5;\n  2015-11-10T17:41:47+01:00) Maven home:\n  /Users/myusername/bin/apache-maven-3.3.9 Java version: 1.7.0_79, vendor:\n  Oracle Corporation Java home:\n  /Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home/jre Default\n  locale: en_US, platform encoding: UTF-8 OS name: “mac os x”, version:\n  “10.11.1”, arch: “x86_64”, family: “mac” MacBook-Pro-3:~ myusername$</p>\n<p>And that’s it, you are good to go! To get your first GXT project up and\n  running, I followed these 3 Sencha guides:</p>\n<ol>\n  <li><a href=\"http://docs.sencha.com/gxt/4.x/getting_started/ide/eclipse/Create_Gwt_Project_Standard_Eclipse.html\" target=\"_blank\" rel=\"noopener\">Create\n      a GWT project</a></li>\n  <li><a href=\"http://docs.sencha.com/gxt/4.x/getting_started/ide/eclipse/Getting_Started_Eclipse_Standard.html\" target=\"_blank\" rel=\"noopener\">Getting\n      Started with GXT</a></li>\n  <li><a href=\"http://docs.sencha.com/gxt/4.x/getting_started/ide/eclipse/Getting_Started_Eclipse_Standard.html\" target=\"_blank\" rel=\"noopener\">Optimizing\n      for touch support</a></li>\n</ol>\n<p>(In case you don’t get the prompt to install the GWT Google Chrome developer\n  plugin, follow these steps: [<a href=\"http://docs.sencha.com/gxt/4.x/getting\\_started/Getting\\_Started\\_with\\_Touch.html\\](https://tearoom6.wordpress.com/2013/02/24/google-web-toolkit-developer-plugin/)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/gxt/4.x/getting\\_started/Getting\\_Started\\_with\\_Touch.html\\](https://tearoom6.wordpress.com/2013/02/24/google-web-toolkit-developer-plugin/)</a></p>\n"},{"title":"How to use the Sencha visual studio plugin","url":"2621.html","id":"2621","date":"2016-11-17T13:58:23.000Z","_content":"\nI'm using Visual Studio 2015 Community on Windows 10. Here's how you can start using it: ## Create a new project: 1. File > New Project > Sencha > Ext JS Workspace 2. Choose a folder on your hard drive that contains the SDK (for example: ext-6.0.2) 3. Choose the Sencha installation folder (for example: C:\\\\Windows\\\\Users\\\\username\\\\bin\\\\Sencha\\\\Cmd\\\\6.1.2.15) It will take a few minutes before your workspace is done with generating and copying over the framework to the new Visual Studio Project folder. It created a Sencha folder to my project, and within that folder is my workspace with the ext folder. ## Create a new application: 1. Right click on the Sencha folder 2. Select: Add > Ext JS App 3. Give the app a name: (for example: \"MyApp\") It should take the Cmd and SDK from the workspace. And that's it. Now you can make use of the intellisense (with CTRL+space), and you can add Sencha Classes, Views, Apps and Workspaces to the project. Note the VS plugin doesn’t support any of the code inspection features that WebStorm provides such as managing the requires array or creating missing controller methods. It was on our previous roadmap, but it's been delayed.","source":"_drafts/how-tos/how-to-use-the-sencha-visual-studio-plugin.md","raw":"---\ntitle: How to use the Sencha visual studio plugin\ntags:\n  - microsoft\n  - plugin\n  - visual studio\nurl: 2621.html\nid: 2621\ncategories:\n  - Environment\ndate: 2016-11-17 14:58:23\n---\n\nI'm using Visual Studio 2015 Community on Windows 10. Here's how you can start using it: ## Create a new project: 1. File > New Project > Sencha > Ext JS Workspace 2. Choose a folder on your hard drive that contains the SDK (for example: ext-6.0.2) 3. Choose the Sencha installation folder (for example: C:\\\\Windows\\\\Users\\\\username\\\\bin\\\\Sencha\\\\Cmd\\\\6.1.2.15) It will take a few minutes before your workspace is done with generating and copying over the framework to the new Visual Studio Project folder. It created a Sencha folder to my project, and within that folder is my workspace with the ext folder. ## Create a new application: 1. Right click on the Sencha folder 2. Select: Add > Ext JS App 3. Give the app a name: (for example: \"MyApp\") It should take the Cmd and SDK from the workspace. And that's it. Now you can make use of the intellisense (with CTRL+space), and you can add Sencha Classes, Views, Apps and Workspaces to the project. Note the VS plugin doesn’t support any of the code inspection features that WebStorm provides such as managing the requires array or creating missing controller methods. It was on our previous roadmap, but it's been delayed.","slug":"how-tos/how-to-use-the-sencha-visual-studio-plugin","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnctl00fdkif53n0j72rr","content":"<p>I’m using Visual Studio 2015 Community on Windows 10. Here’s how you can\n  start using it: ## Create a new project: 1. File &gt; New Project &gt; Sencha\n  &gt; Ext JS Workspace 2. Choose a folder on your hard drive that contains the\n  SDK (for example: ext-6.0.2) 3. Choose the Sencha installation folder (for\n  example: C:\\Windows\\Users\\username\\bin\\Sencha\\Cmd\\6.1.2.15) It will take a\n  few minutes before your workspace is done with generating and copying over\n  the framework to the new Visual Studio Project folder. It created a Sencha\n  folder to my project, and within that folder is my workspace with the ext\n  folder. ## Create a new application: 1. Right click on the Sencha folder 2.\n  Select: Add &gt; Ext JS App 3. Give the app a name: (for example: “MyApp”) It\n  should take the Cmd and SDK from the workspace. And that’s it. Now you can\n  make use of the intellisense (with CTRL+space), and you can add Sencha\n  Classes, Views, Apps and Workspaces to the project. Note the VS plugin\n  doesn’t support any of the code inspection features that WebStorm provides\n  such as managing the requires array or creating missing controller methods.\n  It was on our previous roadmap, but it’s been delayed.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>I’m using Visual Studio 2015 Community on Windows 10. Here’s how you can\n  start using it: ## Create a new project: 1. File &gt; New Project &gt; Sencha\n  &gt; Ext JS Workspace 2. Choose a folder on your hard drive that contains the\n  SDK (for example: ext-6.0.2) 3. Choose the Sencha installation folder (for\n  example: C:\\Windows\\Users\\username\\bin\\Sencha\\Cmd\\6.1.2.15) It will take a\n  few minutes before your workspace is done with generating and copying over\n  the framework to the new Visual Studio Project folder. It created a Sencha\n  folder to my project, and within that folder is my workspace with the ext\n  folder. ## Create a new application: 1. Right click on the Sencha folder 2.\n  Select: Add &gt; Ext JS App 3. Give the app a name: (for example: “MyApp”) It\n  should take the Cmd and SDK from the workspace. And that’s it. Now you can\n  make use of the intellisense (with CTRL+space), and you can add Sencha\n  Classes, Views, Apps and Workspaces to the project. Note the VS plugin\n  doesn’t support any of the code inspection features that WebStorm provides\n  such as managing the requires array or creating missing controller methods.\n  It was on our previous roadmap, but it’s been delayed.</p>\n"},{"title":"How to Upgrade a Sencha Touch App to Ext JS 6 Modern Toolkit – Part 3","url":"1177.html","id":"1177","date":"2016-02-09T15:13:10.000Z","_content":"\n### Advanced Universal Upgrade\n\nThis upgrade will take the most time, but your opportunities are endless. You will have the latest framework with all the new features and classes, and you can improve your application performance and code base with the new MVVM architecture. Plus, you can create universal cross-platform apps (or plan to do that in the future). Not only can you build applications for mobile phones or tablets, you can also support desktop or hybrid computers, with a component set specifically made for desktop usage.\n\nTo take this approach, my advice is to regenerate a folder structure with Sencha Cmd, with the same namespace, but this time as a universal app.\n\n1.  Navigate to the **ext** framework folder and generate a project with:  \n    **sencha generate app**  \n    For example:  \n    ext> **sencha generate app Dinmu ../dinmu3**\n    \n    This will create a folder structure with the shared app folder, the classic folder for the **classic** toolkit, and a modern folder for the **modern** toolkit.\n    \n\n[![Files](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-files-part3-img1.png)](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-files-part3-img1.png)\n\n3.  Once you have this folder structure, you will need to think about which code you want to share, and which code you want to be unique for each experience.\n\nObviously, this means that you need to create new views, specific for desktop. (In the case of the weather application, I can assume that you already have an existing touch application, with modern toolkit views, so you will make new desktop views). Desktop components might require unique event listeners, so you probably will end up with additional view controllers. You can share view controllers from the app folder, by extending it, for example.\n\nHowever, you could also choose to create unique data / models for desktop views. The screens are bigger, so you have more space to display additional data. Or maybe a mobile phone has different features (camera, geolocation, etc.) than a desktop application, so you might want to create different behaviour for certain devices. The good thing is that this is all possible. The trick here is that you move classes over from the app folder to either the classic or modern folders. You can learn more about [creating universal apps](https://www.sencha.com/blog/how-to-build-a-great-looking-universal-app-with-ext-js-part-1/) in my previous blog post series.\n\n#### What About File Sizes?\n\nAre you interested in the file size of the build app.js and app.css of the Weather app? Have a look:\n\n##### **Sencha Touch**\n\n##### **Ext JS 6 Modern – Basic**\n\n##### **Ext JS 6 Modern – MVVM**\n\napp.js – minified\n\n##### 558kb\n\n##### 836kb\n\n##### 887kb\n\napp.css – compiled\n\n##### 241kb\n\n##### 91kb\n\n##### 91kb\n\nExt JS 6 requires more advanced classes, so that’s why the total build will be a bit bigger. You can make your own code base smaller by switching to View Controllers, using data binding, and cleaning your model fields, which might get you an even smaller final build.\n\nAlso note, because of the new microloader, we can cache your applications way smarter, and applications can be made for offline use.\n\n[![Triton Theme](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton1-part3-img2.png)](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton1-part3-img2.png)  \n\nTriton Theme\n\n[![Triton Theme](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton2-part3-img3.png)](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton2-part3-img3.png)  \n\nTriton Theme\n\n### Conclusion\n\nIn this tutorial, I’ve explained how to migrate your Sencha Touch application to Ext JS 6 Modern toolkit. For me, the basic upgrade took a few hours, and the upgrade to MVVM took a morning. However, this is a pretty basic application with not many views.\n\nUpgrading is easier than when you had to upgrade from Sencha Touch 1 to Sencha Touch 2, but it can take some time. It depends on whether you want to upgrade the pattern too, and if you have lots of custom components in your existing Sencha Touch app.\n\nWe have lots of professional services engineers, who migrate complex applications all the time, and they can help you with your application. [Contact us](https://www.sencha.com/contact/) for details.\n\n[![Windows Theme](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-windowsphone-part3-img4.png)](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-windowsphone-part3-img4.png)\n\nI do think it’s worth spending the time on upgrading your app with the MVVM pattern because:\n\n*   You will be on the latest framework, and support the latest browsers and operating systems.\n*   You can clean up your code base a lot.\n*   The MVVM pattern can improve performance.\n*   You can create desktop & mobile applications with one code base.\n*   You will get all new classes, components, and themes.\n*   You can use the new theme package structure, and compile themes much faster.\n\nBecause of the new Ext JS core, all newer Ext JS apps (version 5 and up) will be backwards compatible. That means it will be simpler to upgrade (just like Ext JS 5 to Ext JS 6 applications, which only require an upgrade through Cmd).\n\n*   [Part I](https://www.leeboonstra.com/developer/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-1)\n*   [Part II](https://www.leeboonstra.com/developer/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-2)","source":"_drafts/how-tos/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-3.md","raw":"---\ntitle: How to Upgrade a Sencha Touch App to Ext JS 6 Modern Toolkit – Part 3\ntags:\n  - Ext JS\n  - migration\n  - Sencha Touch\nurl: 1177.html\nid: 1177\ncategories:\n  - Ext JS 6\n  - Sencha Touch\ndate: 2016-02-09 16:13:10\n---\n\n### Advanced Universal Upgrade\n\nThis upgrade will take the most time, but your opportunities are endless. You will have the latest framework with all the new features and classes, and you can improve your application performance and code base with the new MVVM architecture. Plus, you can create universal cross-platform apps (or plan to do that in the future). Not only can you build applications for mobile phones or tablets, you can also support desktop or hybrid computers, with a component set specifically made for desktop usage.\n\nTo take this approach, my advice is to regenerate a folder structure with Sencha Cmd, with the same namespace, but this time as a universal app.\n\n1.  Navigate to the **ext** framework folder and generate a project with:  \n    **sencha generate app**  \n    For example:  \n    ext> **sencha generate app Dinmu ../dinmu3**\n    \n    This will create a folder structure with the shared app folder, the classic folder for the **classic** toolkit, and a modern folder for the **modern** toolkit.\n    \n\n[![Files](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-files-part3-img1.png)](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-files-part3-img1.png)\n\n3.  Once you have this folder structure, you will need to think about which code you want to share, and which code you want to be unique for each experience.\n\nObviously, this means that you need to create new views, specific for desktop. (In the case of the weather application, I can assume that you already have an existing touch application, with modern toolkit views, so you will make new desktop views). Desktop components might require unique event listeners, so you probably will end up with additional view controllers. You can share view controllers from the app folder, by extending it, for example.\n\nHowever, you could also choose to create unique data / models for desktop views. The screens are bigger, so you have more space to display additional data. Or maybe a mobile phone has different features (camera, geolocation, etc.) than a desktop application, so you might want to create different behaviour for certain devices. The good thing is that this is all possible. The trick here is that you move classes over from the app folder to either the classic or modern folders. You can learn more about [creating universal apps](https://www.sencha.com/blog/how-to-build-a-great-looking-universal-app-with-ext-js-part-1/) in my previous blog post series.\n\n#### What About File Sizes?\n\nAre you interested in the file size of the build app.js and app.css of the Weather app? Have a look:\n\n##### **Sencha Touch**\n\n##### **Ext JS 6 Modern – Basic**\n\n##### **Ext JS 6 Modern – MVVM**\n\napp.js – minified\n\n##### 558kb\n\n##### 836kb\n\n##### 887kb\n\napp.css – compiled\n\n##### 241kb\n\n##### 91kb\n\n##### 91kb\n\nExt JS 6 requires more advanced classes, so that’s why the total build will be a bit bigger. You can make your own code base smaller by switching to View Controllers, using data binding, and cleaning your model fields, which might get you an even smaller final build.\n\nAlso note, because of the new microloader, we can cache your applications way smarter, and applications can be made for offline use.\n\n[![Triton Theme](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton1-part3-img2.png)](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton1-part3-img2.png)  \n\nTriton Theme\n\n[![Triton Theme](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton2-part3-img3.png)](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton2-part3-img3.png)  \n\nTriton Theme\n\n### Conclusion\n\nIn this tutorial, I’ve explained how to migrate your Sencha Touch application to Ext JS 6 Modern toolkit. For me, the basic upgrade took a few hours, and the upgrade to MVVM took a morning. However, this is a pretty basic application with not many views.\n\nUpgrading is easier than when you had to upgrade from Sencha Touch 1 to Sencha Touch 2, but it can take some time. It depends on whether you want to upgrade the pattern too, and if you have lots of custom components in your existing Sencha Touch app.\n\nWe have lots of professional services engineers, who migrate complex applications all the time, and they can help you with your application. [Contact us](https://www.sencha.com/contact/) for details.\n\n[![Windows Theme](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-windowsphone-part3-img4.png)](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-windowsphone-part3-img4.png)\n\nI do think it’s worth spending the time on upgrading your app with the MVVM pattern because:\n\n*   You will be on the latest framework, and support the latest browsers and operating systems.\n*   You can clean up your code base a lot.\n*   The MVVM pattern can improve performance.\n*   You can create desktop & mobile applications with one code base.\n*   You will get all new classes, components, and themes.\n*   You can use the new theme package structure, and compile themes much faster.\n\nBecause of the new Ext JS core, all newer Ext JS apps (version 5 and up) will be backwards compatible. That means it will be simpler to upgrade (just like Ext JS 5 to Ext JS 6 applications, which only require an upgrade through Cmd).\n\n*   [Part I](https://www.leeboonstra.com/developer/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-1)\n*   [Part II](https://www.leeboonstra.com/developer/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-2)","slug":"how-tos/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-3","published":0,"updated":"2018-11-25T11:46:09.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnctn00fgkif558dcpizg","content":"<h3 id=\"Advanced-Universal-Upgrade\"><a href=\"#Advanced-Universal-Upgrade\" class=\"headerlink\" title=\"Advanced Universal Upgrade\"></a>Advanced\n  Universal Upgrade</h3>\n<p>This upgrade will take the most time, but your opportunities are endless.\n  You will have the latest framework with all the new features and classes, and\n  you can improve your application performance and code base with the new MVVM\n  architecture. Plus, you can create universal cross-platform apps (or plan to\n  do that in the future). Not only can you build applications for mobile phones\n  or tablets, you can also support desktop or hybrid computers, with a\n  component set specifically made for desktop usage.</p>\n<p>To take this approach, my advice is to regenerate a folder structure with\n  Sencha Cmd, with the same namespace, but this time as a universal app.</p>\n<ol>\n  <li>\n    <p>Navigate to the <strong>ext</strong> framework folder and generate a\n      project with:<br><strong>sencha generate app</strong><br>For example:<br>ext&gt;\n      <strong>sencha generate app Dinmu ../dinmu3</strong></p>\n    <p>This will create a folder structure with the shared app folder, the\n      classic folder for the <strong>classic</strong> toolkit, and a modern\n      folder for the <strong>modern</strong> toolkit.</p>\n  </li>\n</ol>\n<p><a href=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-files-part3-img1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-files-part3-img1.png\" alt=\"Files\"></a></p>\n<ol start=\"3\">\n  <li>Once you have this folder structure, you will need to think about which\n    code you want to share, and which code you want to be unique for each\n    experience.</li>\n</ol>\n<p>Obviously, this means that you need to create new views, specific for\n  desktop. (In the case of the weather application, I can assume that you\n  already have an existing touch application, with modern toolkit views, so you\n  will make new desktop views). Desktop components might require unique event\n  listeners, so you probably will end up with additional view controllers. You\n  can share view controllers from the app folder, by extending it, for example.</p>\n<p>However, you could also choose to create unique data / models for desktop\n  views. The screens are bigger, so you have more space to display additional\n  data. Or maybe a mobile phone has different features (camera, geolocation,\n  etc.) than a desktop application, so you might want to create different\n  behaviour for certain devices. The good thing is that this is all possible.\n  The trick here is that you move classes over from the app folder to either\n  the classic or modern folders. You can learn more about <a href=\"https://www.sencha.com/blog/how-to-build-a-great-looking-universal-app-with-ext-js-part-1/\" target=\"_blank\" rel=\"noopener\">creating\n    universal apps</a> in my previous blog post series.</p>\n<h4 id=\"What-About-File-Sizes\"><a href=\"#What-About-File-Sizes\" class=\"headerlink\" title=\"What About File Sizes?\"></a>What\n  About File Sizes?</h4>\n<p>Are you interested in the file size of the build app.js and app.css of the\n  Weather app? Have a look:</p>\n<h5 id=\"Sencha-Touch\"><a href=\"#Sencha-Touch\" class=\"headerlink\" title=\"Sencha Touch\"></a><strong>Sencha\n    Touch</strong></h5>\n<h5 id=\"Ext-JS-6-Modern-–-Basic\"><a href=\"#Ext-JS-6-Modern-–-Basic\" class=\"headerlink\" title=\"Ext JS 6 Modern – Basic\"></a><strong>Ext\n    JS 6 Modern – Basic</strong></h5>\n<h5 id=\"Ext-JS-6-Modern-–-MVVM\"><a href=\"#Ext-JS-6-Modern-–-MVVM\" class=\"headerlink\" title=\"Ext JS 6 Modern – MVVM\"></a><strong>Ext\n    JS 6 Modern – MVVM</strong></h5>\n<p>app.js – minified</p>\n<h5 id=\"558kb\"><a href=\"#558kb\" class=\"headerlink\" title=\"558kb\"></a>558kb</h5>\n<h5 id=\"836kb\"><a href=\"#836kb\" class=\"headerlink\" title=\"836kb\"></a>836kb</h5>\n<h5 id=\"887kb\"><a href=\"#887kb\" class=\"headerlink\" title=\"887kb\"></a>887kb</h5>\n<p>app.css – compiled</p>\n<h5 id=\"241kb\"><a href=\"#241kb\" class=\"headerlink\" title=\"241kb\"></a>241kb</h5>\n<h5 id=\"91kb\"><a href=\"#91kb\" class=\"headerlink\" title=\"91kb\"></a>91kb</h5>\n<h5 id=\"91kb-1\"><a href=\"#91kb-1\" class=\"headerlink\" title=\"91kb\"></a>91kb</h5>\n<p>Ext JS 6 requires more advanced classes, so that’s why the total build will\n  be a bit bigger. You can make your own code base smaller by switching to View\n  Controllers, using data binding, and cleaning your model fields, which might\n  get you an even smaller final build.</p>\n<p>Also note, because of the new microloader, we can cache your applications\n  way smarter, and applications can be made for offline use.</p>\n<p><a href=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton1-part3-img2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton1-part3-img2.png\" alt=\"Triton Theme\"></a></p>\n<p>Triton Theme</p>\n<p><a href=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton2-part3-img3.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton2-part3-img3.png\" alt=\"Triton Theme\"></a></p>\n<p>Triton Theme</p>\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3>\n<p>In this tutorial, I’ve explained how to migrate your Sencha Touch\n  application to Ext JS 6 Modern toolkit. For me, the basic upgrade took a few\n  hours, and the upgrade to MVVM took a morning. However, this is a pretty\n  basic application with not many views.</p>\n<p>Upgrading is easier than when you had to upgrade from Sencha Touch 1 to\n  Sencha Touch 2, but it can take some time. It depends on whether you want to\n  upgrade the pattern too, and if you have lots of custom components in your\n  existing Sencha Touch app.</p>\n<p>We have lots of professional services engineers, who migrate complex\n  applications all the time, and they can help you with your application. <a href=\"https://www.sencha.com/contact/\" target=\"_blank\" rel=\"noopener\">Contact\n    us</a> for details.</p>\n<p><a href=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-windowsphone-part3-img4.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-windowsphone-part3-img4.png\" alt=\"Windows Theme\"></a></p>\n<p>I do think it’s worth spending the time on upgrading your app with the MVVM\n  pattern because:</p>\n<ul>\n  <li>You will be on the latest framework, and support the latest browsers and\n    operating systems.</li>\n  <li>You can clean up your code base a lot.</li>\n  <li>The MVVM pattern can improve performance.</li>\n  <li>You can create desktop &amp; mobile applications with one code base.</li>\n  <li>You will get all new classes, components, and themes.</li>\n  <li>You can use the new theme package structure, and compile themes much\n    faster.</li>\n</ul>\n<p>Because of the new Ext JS core, all newer Ext JS apps (version 5 and up)\n  will be backwards compatible. That means it will be simpler to upgrade (just\n  like Ext JS 5 to Ext JS 6 applications, which only require an upgrade through\n  Cmd).</p>\n<ul>\n  <li><a href=\"https://www.leeboonstra.com/developer/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-1\" target=\"_blank\" rel=\"noopener\">Part\n      I</a></li>\n  <li><a href=\"https://www.leeboonstra.com/developer/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-2\" target=\"_blank\" rel=\"noopener\">Part\n      II</a></li>\n</ul>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<h3 id=\"Advanced-Universal-Upgrade\"><a href=\"#Advanced-Universal-Upgrade\" class=\"headerlink\" title=\"Advanced Universal Upgrade\"></a>Advanced\n  Universal Upgrade</h3>\n<p>This upgrade will take the most time, but your opportunities are endless.\n  You will have the latest framework with all the new features and classes, and\n  you can improve your application performance and code base with the new MVVM\n  architecture. Plus, you can create universal cross-platform apps (or plan to\n  do that in the future). Not only can you build applications for mobile phones\n  or tablets, you can also support desktop or hybrid computers, with a\n  component set specifically made for desktop usage.</p>\n<p>To take this approach, my advice is to regenerate a folder structure with\n  Sencha Cmd, with the same namespace, but this time as a universal app.</p>\n<ol>\n  <li>\n    <p>Navigate to the <strong>ext</strong> framework folder and generate a\n      project with:<br><strong>sencha generate app</strong><br>For example:<br>ext&gt;\n      <strong>sencha generate app Dinmu ../dinmu3</strong></p>\n    <p>This will create a folder structure with the shared app folder, the\n      classic folder for the <strong>classic</strong> toolkit, and a modern\n      folder for the <strong>modern</strong> toolkit.</p>\n  </li>\n</ol>\n<p><a href=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-files-part3-img1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-files-part3-img1.png\" alt=\"Files\"></a></p>\n<ol start=\"3\">\n  <li>Once you have this folder structure, you will need to think about which\n    code you want to share, and which code you want to be unique for each\n    experience.</li>\n</ol>\n<p>Obviously, this means that you need to create new views, specific for\n  desktop. (In the case of the weather application, I can assume that you\n  already have an existing touch application, with modern toolkit views, so you\n  will make new desktop views). Desktop components might require unique event\n  listeners, so you probably will end up with additional view controllers. You\n  can share view controllers from the app folder, by extending it, for example.</p>\n<p>However, you could also choose to create unique data / models for desktop\n  views. The screens are bigger, so you have more space to display additional\n  data. Or maybe a mobile phone has different features (camera, geolocation,\n  etc.) than a desktop application, so you might want to create different\n  behaviour for certain devices. The good thing is that this is all possible.\n  The trick here is that you move classes over from the app folder to either\n  the classic or modern folders. You can learn more about <a href=\"https://www.sencha.com/blog/how-to-build-a-great-looking-universal-app-with-ext-js-part-1/\" target=\"_blank\" rel=\"noopener\">creating\n    universal apps</a> in my previous blog post series.</p>\n<h4 id=\"What-About-File-Sizes\"><a href=\"#What-About-File-Sizes\" class=\"headerlink\" title=\"What About File Sizes?\"></a>What\n  About File Sizes?</h4>\n<p>Are you interested in the file size of the build app.js and app.css of the\n  Weather app? Have a look:</p>\n<h5 id=\"Sencha-Touch\"><a href=\"#Sencha-Touch\" class=\"headerlink\" title=\"Sencha Touch\"></a><strong>Sencha\n    Touch</strong></h5>\n<h5 id=\"Ext-JS-6-Modern-–-Basic\"><a href=\"#Ext-JS-6-Modern-–-Basic\" class=\"headerlink\" title=\"Ext JS 6 Modern – Basic\"></a><strong>Ext\n    JS 6 Modern – Basic</strong></h5>\n<h5 id=\"Ext-JS-6-Modern-–-MVVM\"><a href=\"#Ext-JS-6-Modern-–-MVVM\" class=\"headerlink\" title=\"Ext JS 6 Modern – MVVM\"></a><strong>Ext\n    JS 6 Modern – MVVM</strong></h5>\n<p>app.js – minified</p>\n<h5 id=\"558kb\"><a href=\"#558kb\" class=\"headerlink\" title=\"558kb\"></a>558kb</h5>\n<h5 id=\"836kb\"><a href=\"#836kb\" class=\"headerlink\" title=\"836kb\"></a>836kb</h5>\n<h5 id=\"887kb\"><a href=\"#887kb\" class=\"headerlink\" title=\"887kb\"></a>887kb</h5>\n<p>app.css – compiled</p>\n<h5 id=\"241kb\"><a href=\"#241kb\" class=\"headerlink\" title=\"241kb\"></a>241kb</h5>\n<h5 id=\"91kb\"><a href=\"#91kb\" class=\"headerlink\" title=\"91kb\"></a>91kb</h5>\n<h5 id=\"91kb-1\"><a href=\"#91kb-1\" class=\"headerlink\" title=\"91kb\"></a>91kb</h5>\n<p>Ext JS 6 requires more advanced classes, so that’s why the total build will\n  be a bit bigger. You can make your own code base smaller by switching to View\n  Controllers, using data binding, and cleaning your model fields, which might\n  get you an even smaller final build.</p>\n<p>Also note, because of the new microloader, we can cache your applications\n  way smarter, and applications can be made for offline use.</p>\n<p><a href=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton1-part3-img2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton1-part3-img2.png\" alt=\"Triton Theme\"></a></p>\n<p>Triton Theme</p>\n<p><a href=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton2-part3-img3.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton2-part3-img3.png\" alt=\"Triton Theme\"></a></p>\n<p>Triton Theme</p>\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3>\n<p>In this tutorial, I’ve explained how to migrate your Sencha Touch\n  application to Ext JS 6 Modern toolkit. For me, the basic upgrade took a few\n  hours, and the upgrade to MVVM took a morning. However, this is a pretty\n  basic application with not many views.</p>\n<p>Upgrading is easier than when you had to upgrade from Sencha Touch 1 to\n  Sencha Touch 2, but it can take some time. It depends on whether you want to\n  upgrade the pattern too, and if you have lots of custom components in your\n  existing Sencha Touch app.</p>\n<p>We have lots of professional services engineers, who migrate complex\n  applications all the time, and they can help you with your application. <a href=\"https://www.sencha.com/contact/\" target=\"_blank\" rel=\"noopener\">Contact\n    us</a> for details.</p>\n<p><a href=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-windowsphone-part3-img4.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-windowsphone-part3-img4.png\" alt=\"Windows Theme\"></a></p>\n<p>I do think it’s worth spending the time on upgrading your app with the MVVM\n  pattern because:</p>\n<ul>\n  <li>You will be on the latest framework, and support the latest browsers and\n    operating systems.</li>\n  <li>You can clean up your code base a lot.</li>\n  <li>The MVVM pattern can improve performance.</li>\n  <li>You can create desktop &amp; mobile applications with one code base.</li>\n  <li>You will get all new classes, components, and themes.</li>\n  <li>You can use the new theme package structure, and compile themes much\n    faster.</li>\n</ul>\n<p>Because of the new Ext JS core, all newer Ext JS apps (version 5 and up)\n  will be backwards compatible. That means it will be simpler to upgrade (just\n  like Ext JS 5 to Ext JS 6 applications, which only require an upgrade through\n  Cmd).</p>\n<ul>\n  <li><a href=\"https://www.leeboonstra.com/developer/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-1\" target=\"_blank\" rel=\"noopener\">Part\n      I</a></li>\n  <li><a href=\"https://www.leeboonstra.com/developer/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-2\" target=\"_blank\" rel=\"noopener\">Part\n      II</a></li>\n</ul>\n"},{"title":"I like to build a mobile application what Sencha framework should I use?","url":"1670.html","id":"1670","date":"2015-09-28T10:39:36.000Z","_content":"\nWith Ext JS 6, you will be able to build a mobile application. Ext JS 6 is a JavaScript framework based on HTML5 for building cross-platform mobile web applications targeting desktop, tablets, and smartphones. To build a mobile application, you could make use of the Ext JS 6 modern toolkit. This toolkit contains components which are similar to native touch controls. Sencha delivers Stylesheets for iOS, Windows Phone and Android (Material Design), to make your application look like a native app. You can download our trial version of the framework from here: https://www.sencha.com/products/extjs/evaluate/ And here are some handy getting started materials: * http://docs.sencha.com/extjs/6.2.0-modern/ * http://examples.sencha.com/extjs/6.2.0-ea/examples/kitchensink/?profile=material * http://examples.sencha.com/extjs/6.0.0/examples/kitchensink/?profile=cupertino * http://se.sencha.com/getting-started/ * https://www.sencha.com/blog/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-1/ * https://www.sencha.com/blog/how-to-build-a-great-looking-universal-app-with-ext-js-part-1/","source":"_drafts/how-tos/i-like-to-build-a-mobile-application-what-sencha-framework-should-i-use.md","raw":"---\ntitle: I like to build a mobile application what Sencha framework should I use?\ntags:\n  - Mobile\nurl: 1670.html\nid: 1670\ncategories:\n  - Ext JS 5 &amp; 6\n  - Questions\ndate: 2015-09-28 12:39:36\n---\n\nWith Ext JS 6, you will be able to build a mobile application. Ext JS 6 is a JavaScript framework based on HTML5 for building cross-platform mobile web applications targeting desktop, tablets, and smartphones. To build a mobile application, you could make use of the Ext JS 6 modern toolkit. This toolkit contains components which are similar to native touch controls. Sencha delivers Stylesheets for iOS, Windows Phone and Android (Material Design), to make your application look like a native app. You can download our trial version of the framework from here: https://www.sencha.com/products/extjs/evaluate/ And here are some handy getting started materials: * http://docs.sencha.com/extjs/6.2.0-modern/ * http://examples.sencha.com/extjs/6.2.0-ea/examples/kitchensink/?profile=material * http://examples.sencha.com/extjs/6.0.0/examples/kitchensink/?profile=cupertino * http://se.sencha.com/getting-started/ * https://www.sencha.com/blog/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-1/ * https://www.sencha.com/blog/how-to-build-a-great-looking-universal-app-with-ext-js-part-1/","slug":"how-tos/i-like-to-build-a-mobile-application-what-sencha-framework-should-i-use","published":0,"updated":"2018-11-25T12:42:59.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncto00fjkif5akwavosc","content":"<p>With Ext JS 6, you will be able to build a mobile application. Ext JS 6 is a\n  JavaScript framework based on HTML5 for building cross-platform mobile web\n  applications targeting desktop, tablets, and smartphones. To build a mobile\n  application, you could make use of the Ext JS 6 modern toolkit. This toolkit\n  contains components which are similar to native touch controls. Sencha\n  delivers Stylesheets for iOS, Windows Phone and Android (Material Design), to\n  make your application look like a native app. You can download our trial\n  version of the framework from here: <a href=\"https://www.sencha.com/products/extjs/evaluate/\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/products/extjs/evaluate/</a>\n  And here are some handy getting started materials: <em><a href=\"http://docs.sencha.com/extjs/6.2.0-modern/\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/6.2.0-modern/</a>\n  </em><a href=\"http://examples.sencha.com/extjs/6.2.0-ea/examples/kitchensink/?profile=material\" target=\"_blank\" rel=\"noopener\">http://examples.sencha.com/extjs/6.2.0-ea/examples/kitchensink/?profile=material</a>\n  <em><a href=\"http://examples.sencha.com/extjs/6.0.0/examples/kitchensink/?profile=cupertino\" target=\"_blank\" rel=\"noopener\">http://examples.sencha.com/extjs/6.0.0/examples/kitchensink/?profile=cupertino</a>\n  </em><a href=\"http://se.sencha.com/getting-started/\" target=\"_blank\" rel=\"noopener\">http://se.sencha.com/getting-started/</a>\n  <em><a href=\"https://www.sencha.com/blog/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-1/\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/blog/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-1/</a>\n  </em><a href=\"https://www.sencha.com/blog/how-to-build-a-great-looking-universal-app-with-ext-js-part-1/\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/blog/how-to-build-a-great-looking-universal-app-with-ext-js-part-1/</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>With Ext JS 6, you will be able to build a mobile application. Ext JS 6 is a\n  JavaScript framework based on HTML5 for building cross-platform mobile web\n  applications targeting desktop, tablets, and smartphones. To build a mobile\n  application, you could make use of the Ext JS 6 modern toolkit. This toolkit\n  contains components which are similar to native touch controls. Sencha\n  delivers Stylesheets for iOS, Windows Phone and Android (Material Design), to\n  make your application look like a native app. You can download our trial\n  version of the framework from here: <a href=\"https://www.sencha.com/products/extjs/evaluate/\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/products/extjs/evaluate/</a>\n  And here are some handy getting started materials: <em><a href=\"http://docs.sencha.com/extjs/6.2.0-modern/\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/6.2.0-modern/</a>\n  </em><a href=\"http://examples.sencha.com/extjs/6.2.0-ea/examples/kitchensink/?profile=material\" target=\"_blank\" rel=\"noopener\">http://examples.sencha.com/extjs/6.2.0-ea/examples/kitchensink/?profile=material</a>\n  <em><a href=\"http://examples.sencha.com/extjs/6.0.0/examples/kitchensink/?profile=cupertino\" target=\"_blank\" rel=\"noopener\">http://examples.sencha.com/extjs/6.0.0/examples/kitchensink/?profile=cupertino</a>\n  </em><a href=\"http://se.sencha.com/getting-started/\" target=\"_blank\" rel=\"noopener\">http://se.sencha.com/getting-started/</a>\n  <em><a href=\"https://www.sencha.com/blog/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-1/\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/blog/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-1/</a>\n  </em><a href=\"https://www.sencha.com/blog/how-to-build-a-great-looking-universal-app-with-ext-js-part-1/\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/blog/how-to-build-a-great-looking-universal-app-with-ext-js-part-1/</a></p>\n"},{"title":"Installing Node and NPM on MAC OSX","url":"36.html","id":"36","date":"2012-04-02T13:05:00.000Z","_content":"\nNode.js is a platform built on Chrome?s JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.\n\nThis assumes that Git is already installed and available on the command-line. Since the technology Node.js is quiet new, check at http://nodejs.org/ what the latest stable version of node.js is. For this example the latest version is v0.6.14. Open your terminal and start typing the following commands:\n\n$ git clone git://github.com/joyent/node.git\n$ cd node\n$ git checkout v0.6.14\n$ ./configure\n$ make\n$ sudo make install\n\nNow Node.js is installed, you should also download the Node Package Manager. It?s no longer necessary to install npm separately, but if you want you can install this via the command-line as well. Use the following command:\n\n$ curl http://npmjs.org/install.sh | sh\n\nAs an extra let?s also install MongoDB, is a large scalable high performance NoSQL database.\n\n$ npm install mongojs","source":"_drafts/how-tos/installing-node-and-npm-on-mac.md","raw":"---\ntitle: Installing Node and NPM on MAC OSX\ntags:\n  - Mac OSX\n  - Node JS\n  - Tools\nurl: 36.html\nid: 36\ncategories:\n  - Environment\n  - Node JS\ndate: 2012-04-02 15:05:00\n---\n\nNode.js is a platform built on Chrome?s JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.\n\nThis assumes that Git is already installed and available on the command-line. Since the technology Node.js is quiet new, check at http://nodejs.org/ what the latest stable version of node.js is. For this example the latest version is v0.6.14. Open your terminal and start typing the following commands:\n\n$ git clone git://github.com/joyent/node.git\n$ cd node\n$ git checkout v0.6.14\n$ ./configure\n$ make\n$ sudo make install\n\nNow Node.js is installed, you should also download the Node Package Manager. It?s no longer necessary to install npm separately, but if you want you can install this via the command-line as well. Use the following command:\n\n$ curl http://npmjs.org/install.sh | sh\n\nAs an extra let?s also install MongoDB, is a large scalable high performance NoSQL database.\n\n$ npm install mongojs","slug":"how-tos/installing-node-and-npm-on-mac","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnctp00fmkif5kkmrt1hn","content":"<p>Node.js is a platform built on Chrome?s JavaScript runtime for easily\n  building fast, scalable network applications. Node.js uses an event-driven,\n  non-blocking I/O model that makes it lightweight and efficient, perfect for\n  data-intensive real-time applications that run across distributed devices.</p>\n<p>This assumes that Git is already installed and available on the\n  command-line. Since the technology Node.js is quiet new, check at <a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/</a>\n  what the latest stable version of node.js is. For this example the latest\n  version is v0.6.14. Open your terminal and start typing the following\n  commands:</p>\n<p>$ git clone git://github.com/joyent/node.git $ cd node $ git checkout\n  v0.6.14 $ ./configure $ make $ sudo make install</p>\n<p>Now Node.js is installed, you should also download the Node Package Manager.\n  It?s no longer necessary to install npm separately, but if you want you can\n  install this via the command-line as well. Use the following command:</p>\n<p>$ curl <a href=\"http://npmjs.org/install.sh\" target=\"_blank\" rel=\"noopener\">http://npmjs.org/install.sh</a>\n  | sh</p>\n<p>As an extra let?s also install MongoDB, is a large scalable high performance\n  NoSQL database.</p>\n<p>$ npm install mongojs</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Node.js is a platform built on Chrome?s JavaScript runtime for easily\n  building fast, scalable network applications. Node.js uses an event-driven,\n  non-blocking I/O model that makes it lightweight and efficient, perfect for\n  data-intensive real-time applications that run across distributed devices.</p>\n<p>This assumes that Git is already installed and available on the\n  command-line. Since the technology Node.js is quiet new, check at <a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/</a>\n  what the latest stable version of node.js is. For this example the latest\n  version is v0.6.14. Open your terminal and start typing the following\n  commands:</p>\n<p>$ git clone git://github.com/joyent/node.git $ cd node $ git checkout\n  v0.6.14 $ ./configure $ make $ sudo make install</p>\n<p>Now Node.js is installed, you should also download the Node Package Manager.\n  It?s no longer necessary to install npm separately, but if you want you can\n  install this via the command-line as well. Use the following command:</p>\n<p>$ curl <a href=\"http://npmjs.org/install.sh\" target=\"_blank\" rel=\"noopener\">http://npmjs.org/install.sh</a>\n  | sh</p>\n<p>As an extra let?s also install MongoDB, is a large scalable high performance\n  NoSQL database.</p>\n<p>$ npm install mongojs</p>\n"},{"title":"Install AsciiDoc on the commandline (Mac OSX)","url":"289.html","id":"289","date":"2012-12-31T17:58:26.000Z","_content":"\nWhen you are not really used to work on the command line it might seem hard to install AsciiDoc on your Mac OSX machine. These are the commands I used for installing it on the command line. Actually it's pretty easy with the use of the Mac Port tool. 1. [Download Mac Port](http://www.macports.org/install.php) and run the install wizard. 2. Open a new terminal and install AsciiDoc via Port:\n\nsudo port install asciidoc\n\n3\\. In your terminal install dblatex via Port:\n\nsudo port install dblatex\n\nNow you can start writing *.txt files with ASCIIDOCS format which can be exported to epub:\n\na2x -f epub ~/Documents/book.txt\n\nor PDF:\n\na2x -f pdf --fop ~/Documents/book.txt\n\nor html:\n\na2x -f xhtml ~/Documents/book.txt\n\nNote: ~/Documents/book.txt points to the path with my textfile. It's possible to skip the xml lint validation, by adding the following parameters:\n\n--verbose --no-xmllint","source":"_drafts/how-tos/install-asciidoc-on-the-commandline-mac-osx.md","raw":"---\ntitle: Install AsciiDoc on the commandline (Mac OSX)\ntags:\n  - asciidoc\n  - epub\n  - pdf\nurl: 289.html\nid: 289\ncategories:\n  - Environment\ndate: 2012-12-31 18:58:26\n---\n\nWhen you are not really used to work on the command line it might seem hard to install AsciiDoc on your Mac OSX machine. These are the commands I used for installing it on the command line. Actually it's pretty easy with the use of the Mac Port tool. 1. [Download Mac Port](http://www.macports.org/install.php) and run the install wizard. 2. Open a new terminal and install AsciiDoc via Port:\n\nsudo port install asciidoc\n\n3\\. In your terminal install dblatex via Port:\n\nsudo port install dblatex\n\nNow you can start writing *.txt files with ASCIIDOCS format which can be exported to epub:\n\na2x -f epub ~/Documents/book.txt\n\nor PDF:\n\na2x -f pdf --fop ~/Documents/book.txt\n\nor html:\n\na2x -f xhtml ~/Documents/book.txt\n\nNote: ~/Documents/book.txt points to the path with my textfile. It's possible to skip the xml lint validation, by adding the following parameters:\n\n--verbose --no-xmllint","slug":"how-tos/install-asciidoc-on-the-commandline-mac-osx","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnctq00fqkif5jqh3ofdt","content":"<p>When you are not really used to work on the command line it might seem hard\n  to install AsciiDoc on your Mac OSX machine. These are the commands I used\n  for installing it on the command line. Actually it’s pretty easy with the use\n  of the Mac Port tool. 1. <a href=\"http://www.macports.org/install.php\" target=\"_blank\" rel=\"noopener\">Download\n    Mac Port</a> and run the install wizard. 2. Open a new terminal and install\n  AsciiDoc via Port:</p>\n<p>sudo port install asciidoc</p>\n<p>3. In your terminal install dblatex via Port:</p>\n<p>sudo port install dblatex</p>\n<p>Now you can start writing *.txt files with ASCIIDOCS format which can be\n  exported to epub:</p>\n<p>a2x -f epub ~/Documents/book.txt</p>\n<p>or PDF:</p>\n<p>a2x -f pdf –fop ~/Documents/book.txt</p>\n<p>or html:</p>\n<p>a2x -f xhtml ~/Documents/book.txt</p>\n<p>Note: ~/Documents/book.txt points to the path with my textfile. It’s\n  possible to skip the xml lint validation, by adding the following parameters:</p>\n<p>–verbose –no-xmllint</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>When you are not really used to work on the command line it might seem hard\n  to install AsciiDoc on your Mac OSX machine. These are the commands I used\n  for installing it on the command line. Actually it’s pretty easy with the use\n  of the Mac Port tool. 1. <a href=\"http://www.macports.org/install.php\" target=\"_blank\" rel=\"noopener\">Download\n    Mac Port</a> and run the install wizard. 2. Open a new terminal and install\n  AsciiDoc via Port:</p>\n<p>sudo port install asciidoc</p>\n<p>3. In your terminal install dblatex via Port:</p>\n<p>sudo port install dblatex</p>\n<p>Now you can start writing *.txt files with ASCIIDOCS format which can be\n  exported to epub:</p>\n<p>a2x -f epub ~/Documents/book.txt</p>\n<p>or PDF:</p>\n<p>a2x -f pdf –fop ~/Documents/book.txt</p>\n<p>or html:</p>\n<p>a2x -f xhtml ~/Documents/book.txt</p>\n<p>Note: ~/Documents/book.txt points to the path with my textfile. It’s\n  possible to skip the xml lint validation, by adding the following parameters:</p>\n<p>–verbose –no-xmllint</p>\n"},{"title":"How to Style Apps with Fashion in Ext JS 6","url":"688.html","id":"688","date":"2015-07-30T05:16:18.000Z","_content":"\nIn Ext JS 6, one of the big new features is the merged framework. With a single codebase, you can create the best performing applications, with the ideal experience on each device. It also includes a new way to style your apps.\n\nIn this article, I will focus on Sencha Fashion – what it is and what you can do with it. Keep an eye out for my upcoming tutorials that will show you how to create a great looking dark theme.\n\n### Compiling themes\n\nThemes in Ext JS apps use Sass. It’s a more dynamic way of writing CSS code. For example, you can use variables and calculations in your stylesheets. A browser can’t understand Sass, only CSS. Therefore, these Sass themes need to be compiled to production-ready CSS code, which is what a browser can understand. The compilation process of themes in Ext JS apps run via Sencha Cmd:\n\nsencha app build \\[development\\]\n\nor\n\nsencha app watch \\[toolkit\\]\n\nThe difference here is that **watch** is polling for changes, and compiles it on the fly, while **sencha app build** compiles it manually just once.\n\nIn older versions of Ext JS and Sencha Touch, the Sass stylesheets were compiled on top of Ruby. On Windows, you had to install Ruby with administrator rights. Once everything was set up, you could start compiling the themes. But that compilation took a lot of time especially when you had a large codebase and an advanced theme.\n\nTo compile an advanced theme, it sometimes could take a minute. Then, you had to refresh your browser window and test it to make sure you set the right Sass variables. And then you had to start over again. You can understand that this process was time consuming. That’s why I am so happy about Fashion.\n\nWith Sencha Fashion, you can compile your themes on top of JavaScript, and that is super fast. It’s so fast that when I change a line of code on my left monitor, it’s already changed on the right monitor when I look. I don’t have to wait for the compilation (when starting the server), and I don’t have to refresh my browser window.\n\nBecause Fashion is JavaScript, there are more advantages. For example you can extend on top of Fashion and create your own styling functions (like SASS functions), and you are also able to debug your stylesheet code.\n\nHowever, the big advantage here is on your development machine while you’re designing your theme. To get this up and running, you will need to run sencha app watch from your command line and run the following arguments in your URL and then you’re good to go:\n\n?platformTags=fashion:true\n\n### Let’s Compile\n\nYou can try to compile a theme with Fashion. First of all, [download Ext JS 6](http://www.sencha.com/products/extjs/evaluate/). This includes the SDK. You will also need to [download Sencha Cmd 6](https://www.sencha.com/products/extjs/cmd-download/).\n\nAfter installing the command line tools, extract the Ext JS 6 framework zip somewhere on your machine. Open your command prompt and navigate to the framework folder via the command line. From the Ext6 folder, type the following command to generate your first sencha universal app:\n\next> sencha generate app MyApp ../path-to-your-project\n\nOpen your new universal app project in your IDE or editor. You will notice two new folders: **classic** and **modern**. These are the separate toolkit folders. Shared code will be located in the **app** folder. The classic toolkit folder contains the legacy (desktop) views. The modern toolkit folder contains the modern touch views. The DOM for both toolkits is different, so the styling will also be a little different. That’s why each toolkit folder has a **src** subfolder for JavaScript code, and a **sass** folder for all the specific styling.\n\nOpen **app.json** and scroll to “builds” configuration:\n\n    \"builds\": {\n        \"classic\": {\n            \"toolkit\": \"classic\",\n            \"theme\": \"theme-triton\"\n        },\n \n        \"modern\": {\n            \"toolkit\": \"modern\",\n            \"theme\": \"theme-neptune\"\n        }\n    },\n\nYou will notice here, that each build profile, has its own toolkit and theme. You will use the new **Triton** theme for the classic profile, and the **Neptune** theme (formerly known as the Sencha Touch default theme) for the modern toolkit.\n\nWe don’t need to change this for now. Let’s create the following new files:\n\n*   classic/sass/var/Application.scss\n*   modern/sass/var/Application.scss\n\nNow, let’s start our Sencha local webserver, and let Sencha poll for changes in the stylesheet.  \nFrom the folder where your universal application is located, run the following command:\n\npath-to-your-project> sencha app watch classic\n\nWhen Cmd is installed correctly, this command should run fine. The built-in sencha server will wait for changes. Your application by default is available on [http://localhost:1841](http://localhost:1841)  \nAssuming you are running on port 1841, let’s open our application in the browser:\n\nhttp://localhost:1841/?platformTags=fashion:true\n\nWait until your application is done loading. The first time your theme gets compiled, it will take a little longer. Once you see your application, open with your editor:\n\nclassic/sass/var/Application.scss\n\nIf you have two monitors, drag your browser window to the other monitor, so you have your editor on one and the browser on the other.\n\nWe will change the overall stylesheet to the color black. Write down the following global variable:\n\n$base-color: #000;\n\nAs soon as you hit save, you will notice that the style is changed in the browser — not only the header is changed to black, but also all the other styles that extend from the global base color will be black too. For example, double-click on the grid, and you will notice the alert box was changed too.\n\nFeel free to play around with this, change the $base-color to something else. For example a 20% lighter color of the color red:\n\n$base-color: lighten(red, 20%);\n\n[![Changing the base color](//cdn.sencha.com/img/20150707-theming-fashion-extjs6.png)](//cdn.sencha.com/img/20150707-theming-fashion-extjs6.png)  \n\nOf course, you can also theme your modern toolkit this way. Run on the command line:\n\nsencha app watch modern\n\nOpen the following url in your browser to trigger the modern toolkit:\n\nhttp://localhost:1841/?toolkit=modern&platformTags=fashion:true\n\nChange the following file: modern/sass/var/Application.scss:\n\nIt’s fast isn’t it! That’s Fashion. The compilation runs on top of JavaScript. The magic all happens under the hood. Sencha Cmd is running PhantomJS in the background. PhantomJS basically is a headless browser, which you can run from the command line. It will run your application, compile the theme, and put it all into one big JavaScript function. Every change you make, you just let JavaScript change the styling in the DOM.\n\nStay tuned for my theming tutorials.","source":"_drafts/how-tos/how-to-style-apps-with-fashion-in-ext-js-6.md","raw":"---\ntitle: How to Style Apps with Fashion in Ext JS 6\ntags:\n  - fashion\n  - Sass\n  - Theming\nurl: 688.html\nid: 688\ncategories:\n  - Ext JS 6\n  - Sass\n  - Sencha\ndate: 2015-07-30 07:16:18\n---\n\nIn Ext JS 6, one of the big new features is the merged framework. With a single codebase, you can create the best performing applications, with the ideal experience on each device. It also includes a new way to style your apps.\n\nIn this article, I will focus on Sencha Fashion – what it is and what you can do with it. Keep an eye out for my upcoming tutorials that will show you how to create a great looking dark theme.\n\n### Compiling themes\n\nThemes in Ext JS apps use Sass. It’s a more dynamic way of writing CSS code. For example, you can use variables and calculations in your stylesheets. A browser can’t understand Sass, only CSS. Therefore, these Sass themes need to be compiled to production-ready CSS code, which is what a browser can understand. The compilation process of themes in Ext JS apps run via Sencha Cmd:\n\nsencha app build \\[development\\]\n\nor\n\nsencha app watch \\[toolkit\\]\n\nThe difference here is that **watch** is polling for changes, and compiles it on the fly, while **sencha app build** compiles it manually just once.\n\nIn older versions of Ext JS and Sencha Touch, the Sass stylesheets were compiled on top of Ruby. On Windows, you had to install Ruby with administrator rights. Once everything was set up, you could start compiling the themes. But that compilation took a lot of time especially when you had a large codebase and an advanced theme.\n\nTo compile an advanced theme, it sometimes could take a minute. Then, you had to refresh your browser window and test it to make sure you set the right Sass variables. And then you had to start over again. You can understand that this process was time consuming. That’s why I am so happy about Fashion.\n\nWith Sencha Fashion, you can compile your themes on top of JavaScript, and that is super fast. It’s so fast that when I change a line of code on my left monitor, it’s already changed on the right monitor when I look. I don’t have to wait for the compilation (when starting the server), and I don’t have to refresh my browser window.\n\nBecause Fashion is JavaScript, there are more advantages. For example you can extend on top of Fashion and create your own styling functions (like SASS functions), and you are also able to debug your stylesheet code.\n\nHowever, the big advantage here is on your development machine while you’re designing your theme. To get this up and running, you will need to run sencha app watch from your command line and run the following arguments in your URL and then you’re good to go:\n\n?platformTags=fashion:true\n\n### Let’s Compile\n\nYou can try to compile a theme with Fashion. First of all, [download Ext JS 6](http://www.sencha.com/products/extjs/evaluate/). This includes the SDK. You will also need to [download Sencha Cmd 6](https://www.sencha.com/products/extjs/cmd-download/).\n\nAfter installing the command line tools, extract the Ext JS 6 framework zip somewhere on your machine. Open your command prompt and navigate to the framework folder via the command line. From the Ext6 folder, type the following command to generate your first sencha universal app:\n\next> sencha generate app MyApp ../path-to-your-project\n\nOpen your new universal app project in your IDE or editor. You will notice two new folders: **classic** and **modern**. These are the separate toolkit folders. Shared code will be located in the **app** folder. The classic toolkit folder contains the legacy (desktop) views. The modern toolkit folder contains the modern touch views. The DOM for both toolkits is different, so the styling will also be a little different. That’s why each toolkit folder has a **src** subfolder for JavaScript code, and a **sass** folder for all the specific styling.\n\nOpen **app.json** and scroll to “builds” configuration:\n\n    \"builds\": {\n        \"classic\": {\n            \"toolkit\": \"classic\",\n            \"theme\": \"theme-triton\"\n        },\n \n        \"modern\": {\n            \"toolkit\": \"modern\",\n            \"theme\": \"theme-neptune\"\n        }\n    },\n\nYou will notice here, that each build profile, has its own toolkit and theme. You will use the new **Triton** theme for the classic profile, and the **Neptune** theme (formerly known as the Sencha Touch default theme) for the modern toolkit.\n\nWe don’t need to change this for now. Let’s create the following new files:\n\n*   classic/sass/var/Application.scss\n*   modern/sass/var/Application.scss\n\nNow, let’s start our Sencha local webserver, and let Sencha poll for changes in the stylesheet.  \nFrom the folder where your universal application is located, run the following command:\n\npath-to-your-project> sencha app watch classic\n\nWhen Cmd is installed correctly, this command should run fine. The built-in sencha server will wait for changes. Your application by default is available on [http://localhost:1841](http://localhost:1841)  \nAssuming you are running on port 1841, let’s open our application in the browser:\n\nhttp://localhost:1841/?platformTags=fashion:true\n\nWait until your application is done loading. The first time your theme gets compiled, it will take a little longer. Once you see your application, open with your editor:\n\nclassic/sass/var/Application.scss\n\nIf you have two monitors, drag your browser window to the other monitor, so you have your editor on one and the browser on the other.\n\nWe will change the overall stylesheet to the color black. Write down the following global variable:\n\n$base-color: #000;\n\nAs soon as you hit save, you will notice that the style is changed in the browser — not only the header is changed to black, but also all the other styles that extend from the global base color will be black too. For example, double-click on the grid, and you will notice the alert box was changed too.\n\nFeel free to play around with this, change the $base-color to something else. For example a 20% lighter color of the color red:\n\n$base-color: lighten(red, 20%);\n\n[![Changing the base color](//cdn.sencha.com/img/20150707-theming-fashion-extjs6.png)](//cdn.sencha.com/img/20150707-theming-fashion-extjs6.png)  \n\nOf course, you can also theme your modern toolkit this way. Run on the command line:\n\nsencha app watch modern\n\nOpen the following url in your browser to trigger the modern toolkit:\n\nhttp://localhost:1841/?toolkit=modern&platformTags=fashion:true\n\nChange the following file: modern/sass/var/Application.scss:\n\nIt’s fast isn’t it! That’s Fashion. The compilation runs on top of JavaScript. The magic all happens under the hood. Sencha Cmd is running PhantomJS in the background. PhantomJS basically is a headless browser, which you can run from the command line. It will run your application, compile the theme, and put it all into one big JavaScript function. Every change you make, you just let JavaScript change the styling in the DOM.\n\nStay tuned for my theming tutorials.","slug":"how-tos/how-to-style-apps-with-fashion-in-ext-js-6","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnctr00ftkif513ntvggf","content":"<p>In Ext JS 6, one of the big new features is the merged framework. With a\n  single codebase, you can create the best performing applications, with the\n  ideal experience on each device. It also includes a new way to style your\n  apps.</p>\n<p>In this article, I will focus on Sencha Fashion – what it is and what you\n  can do with it. Keep an eye out for my upcoming tutorials that will show you\n  how to create a great looking dark theme.</p>\n<h3 id=\"Compiling-themes\"><a href=\"#Compiling-themes\" class=\"headerlink\" title=\"Compiling themes\"></a>Compiling\n  themes</h3>\n<p>Themes in Ext JS apps use Sass. It’s a more dynamic way of writing CSS code.\n  For example, you can use variables and calculations in your stylesheets. A\n  browser can’t understand Sass, only CSS. Therefore, these Sass themes need to\n  be compiled to production-ready CSS code, which is what a browser can\n  understand. The compilation process of themes in Ext JS apps run via Sencha\n  Cmd:</p>\n<p>sencha app build [development]</p>\n<p>or</p>\n<p>sencha app watch [toolkit]</p>\n<p>The difference here is that <strong>watch</strong> is polling for changes,\n  and compiles it on the fly, while <strong>sencha app build</strong> compiles\n  it manually just once.</p>\n<p>In older versions of Ext JS and Sencha Touch, the Sass stylesheets were\n  compiled on top of Ruby. On Windows, you had to install Ruby with\n  administrator rights. Once everything was set up, you could start compiling\n  the themes. But that compilation took a lot of time especially when you had a\n  large codebase and an advanced theme.</p>\n<p>To compile an advanced theme, it sometimes could take a minute. Then, you\n  had to refresh your browser window and test it to make sure you set the right\n  Sass variables. And then you had to start over again. You can understand that\n  this process was time consuming. That’s why I am so happy about Fashion.</p>\n<p>With Sencha Fashion, you can compile your themes on top of JavaScript, and\n  that is super fast. It’s so fast that when I change a line of code on my left\n  monitor, it’s already changed on the right monitor when I look. I don’t have\n  to wait for the compilation (when starting the server), and I don’t have to\n  refresh my browser window.</p>\n<p>Because Fashion is JavaScript, there are more advantages. For example you\n  can extend on top of Fashion and create your own styling functions (like SASS\n  functions), and you are also able to debug your stylesheet code.</p>\n<p>However, the big advantage here is on your development machine while you’re\n  designing your theme. To get this up and running, you will need to run sencha\n  app watch from your command line and run the following arguments in your URL\n  and then you’re good to go:</p>\n<p>?platformTags=fashion:true</p>\n<h3 id=\"Let’s-Compile\"><a href=\"#Let’s-Compile\" class=\"headerlink\" title=\"Let’s Compile\"></a>Let’s\n  Compile</h3>\n<p>You can try to compile a theme with Fashion. First of all, <a href=\"http://www.sencha.com/products/extjs/evaluate/\" target=\"_blank\" rel=\"noopener\">download\n    Ext JS 6</a>. This includes the SDK. You will also need to <a href=\"https://www.sencha.com/products/extjs/cmd-download/\" target=\"_blank\" rel=\"noopener\">download\n    Sencha Cmd 6</a>.</p>\n<p>After installing the command line tools, extract the Ext JS 6 framework zip\n  somewhere on your machine. Open your command prompt and navigate to the\n  framework folder via the command line. From the Ext6 folder, type the\n  following command to generate your first sencha universal app:</p>\n<p>ext&gt; sencha generate app MyApp ../path-to-your-project</p>\n<p>Open your new universal app project in your IDE or editor. You will notice\n  two new folders: <strong>classic</strong> and <strong>modern</strong>. These\n  are the separate toolkit folders. Shared code will be located in the <strong>app</strong>\n  folder. The classic toolkit folder contains the legacy (desktop) views. The\n  modern toolkit folder contains the modern touch views. The DOM for both\n  toolkits is different, so the styling will also be a little different. That’s\n  why each toolkit folder has a <strong>src</strong> subfolder for JavaScript\n  code, and a <strong>sass</strong> folder for all the specific styling.</p>\n<p>Open <strong>app.json</strong> and scroll to “builds” configuration:</p>\n<pre><code>&quot;builds&quot;: {\n    &quot;classic&quot;: {\n        &quot;toolkit&quot;: &quot;classic&quot;,\n        &quot;theme&quot;: &quot;theme-triton&quot;\n    },\n\n    &quot;modern&quot;: {\n        &quot;toolkit&quot;: &quot;modern&quot;,\n        &quot;theme&quot;: &quot;theme-neptune&quot;\n    }\n},\n</code></pre>\n<p>You will notice here, that each build profile, has its own toolkit and\n  theme. You will use the new <strong>Triton</strong> theme for the classic\n  profile, and the <strong>Neptune</strong> theme (formerly known as the Sencha\n  Touch default theme) for the modern toolkit.</p>\n<p>We don’t need to change this for now. Let’s create the following new files:</p>\n<ul>\n  <li>classic/sass/var/Application.scss</li>\n  <li>modern/sass/var/Application.scss</li>\n</ul>\n<p>Now, let’s start our Sencha local webserver, and let Sencha poll for changes\n  in the stylesheet.<br>From the folder where your universal application is\n  located, run the following command:</p>\n<p>path-to-your-project&gt; sencha app watch classic</p>\n<p>When Cmd is installed correctly, this command should run fine. The built-in\n  sencha server will wait for changes. Your application by default is available\n  on <a href=\"http://localhost:1841\" target=\"_blank\" rel=\"noopener\">http://localhost:1841</a><br>Assuming you\n  are running on port 1841, let’s open our application in the browser:</p>\n<p><a href=\"http://localhost:1841/?platformTags=fashion:true\" target=\"_blank\" rel=\"noopener\">http://localhost:1841/?platformTags=fashion:true</a></p>\n<p>Wait until your application is done loading. The first time your theme gets\n  compiled, it will take a little longer. Once you see your application, open\n  with your editor:</p>\n<p>classic/sass/var/Application.scss</p>\n<p>If you have two monitors, drag your browser window to the other monitor, so\n  you have your editor on one and the browser on the other.</p>\n<p>We will change the overall stylesheet to the color black. Write down the\n  following global variable:</p>\n<p>$base-color: #000;</p>\n<p>As soon as you hit save, you will notice that the style is changed in the\n  browser — not only the header is changed to black, but also all the other\n  styles that extend from the global base color will be black too. For example,\n  double-click on the grid, and you will notice the alert box was changed too.</p>\n<p>Feel free to play around with this, change the $base-color to something\n  else. For example a 20% lighter color of the color red:</p>\n<p>$base-color: lighten(red, 20%);</p>\n<p><a href=\"//cdn.sencha.com/img/20150707-theming-fashion-extjs6.png\"><img src=\"//cdn.sencha.com/img/20150707-theming-fashion-extjs6.png\" alt=\"Changing the base color\"></a></p>\n<p>Of course, you can also theme your modern toolkit this way. Run on the\n  command line:</p>\n<p>sencha app watch modern</p>\n<p>Open the following url in your browser to trigger the modern toolkit:</p>\n<p><a href=\"http://localhost:1841/?toolkit=modern&amp;platformTags=fashion:true\" target=\"_blank\" rel=\"noopener\">http://localhost:1841/?toolkit=modern&amp;platformTags=fashion:true</a></p>\n<p>Change the following file: modern/sass/var/Application.scss:</p>\n<p>It’s fast isn’t it! That’s Fashion. The compilation runs on top of\n  JavaScript. The magic all happens under the hood. Sencha Cmd is running\n  PhantomJS in the background. PhantomJS basically is a headless browser, which\n  you can run from the command line. It will run your application, compile the\n  theme, and put it all into one big JavaScript function. Every change you\n  make, you just let JavaScript change the styling in the DOM.</p>\n<p>Stay tuned for my theming tutorials.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>In Ext JS 6, one of the big new features is the merged framework. With a\n  single codebase, you can create the best performing applications, with the\n  ideal experience on each device. It also includes a new way to style your\n  apps.</p>\n<p>In this article, I will focus on Sencha Fashion – what it is and what you\n  can do with it. Keep an eye out for my upcoming tutorials that will show you\n  how to create a great looking dark theme.</p>\n<h3 id=\"Compiling-themes\"><a href=\"#Compiling-themes\" class=\"headerlink\" title=\"Compiling themes\"></a>Compiling\n  themes</h3>\n<p>Themes in Ext JS apps use Sass. It’s a more dynamic way of writing CSS code.\n  For example, you can use variables and calculations in your stylesheets. A\n  browser can’t understand Sass, only CSS. Therefore, these Sass themes need to\n  be compiled to production-ready CSS code, which is what a browser can\n  understand. The compilation process of themes in Ext JS apps run via Sencha\n  Cmd:</p>\n<p>sencha app build [development]</p>\n<p>or</p>\n<p>sencha app watch [toolkit]</p>\n<p>The difference here is that <strong>watch</strong> is polling for changes,\n  and compiles it on the fly, while <strong>sencha app build</strong> compiles\n  it manually just once.</p>\n<p>In older versions of Ext JS and Sencha Touch, the Sass stylesheets were\n  compiled on top of Ruby. On Windows, you had to install Ruby with\n  administrator rights. Once everything was set up, you could start compiling\n  the themes. But that compilation took a lot of time especially when you had a\n  large codebase and an advanced theme.</p>\n<p>To compile an advanced theme, it sometimes could take a minute. Then, you\n  had to refresh your browser window and test it to make sure you set the right\n  Sass variables. And then you had to start over again. You can understand that\n  this process was time consuming. That’s why I am so happy about Fashion.</p>\n<p>With Sencha Fashion, you can compile your themes on top of JavaScript, and\n  that is super fast. It’s so fast that when I change a line of code on my left\n  monitor, it’s already changed on the right monitor when I look. I don’t have\n  to wait for the compilation (when starting the server), and I don’t have to\n  refresh my browser window.</p>\n<p>Because Fashion is JavaScript, there are more advantages. For example you\n  can extend on top of Fashion and create your own styling functions (like SASS\n  functions), and you are also able to debug your stylesheet code.</p>\n<p>However, the big advantage here is on your development machine while you’re\n  designing your theme. To get this up and running, you will need to run sencha\n  app watch from your command line and run the following arguments in your URL\n  and then you’re good to go:</p>\n<p>?platformTags=fashion:true</p>\n<h3 id=\"Let’s-Compile\"><a href=\"#Let’s-Compile\" class=\"headerlink\" title=\"Let’s Compile\"></a>Let’s\n  Compile</h3>\n<p>You can try to compile a theme with Fashion. First of all, <a href=\"http://www.sencha.com/products/extjs/evaluate/\" target=\"_blank\" rel=\"noopener\">download\n    Ext JS 6</a>. This includes the SDK. You will also need to <a href=\"https://www.sencha.com/products/extjs/cmd-download/\" target=\"_blank\" rel=\"noopener\">download\n    Sencha Cmd 6</a>.</p>\n<p>After installing the command line tools, extract the Ext JS 6 framework zip\n  somewhere on your machine. Open your command prompt and navigate to the\n  framework folder via the command line. From the Ext6 folder, type the\n  following command to generate your first sencha universal app:</p>\n<p>ext&gt; sencha generate app MyApp ../path-to-your-project</p>\n<p>Open your new universal app project in your IDE or editor. You will notice\n  two new folders: <strong>classic</strong> and <strong>modern</strong>. These\n  are the separate toolkit folders. Shared code will be located in the <strong>app</strong>\n  folder. The classic toolkit folder contains the legacy (desktop) views. The\n  modern toolkit folder contains the modern touch views. The DOM for both\n  toolkits is different, so the styling will also be a little different. That’s\n  why each toolkit folder has a <strong>src</strong> subfolder for JavaScript\n  code, and a <strong>sass</strong> folder for all the specific styling.</p>\n<p>Open <strong>app.json</strong> and scroll to “builds” configuration:</p>\n<pre><code>&quot;builds&quot;: {\n    &quot;classic&quot;: {\n        &quot;toolkit&quot;: &quot;classic&quot;,\n        &quot;theme&quot;: &quot;theme-triton&quot;\n    },\n\n    &quot;modern&quot;: {\n        &quot;toolkit&quot;: &quot;modern&quot;,\n        &quot;theme&quot;: &quot;theme-neptune&quot;\n    }\n},\n</code></pre>\n<p>You will notice here, that each build profile, has its own toolkit and\n  theme. You will use the new <strong>Triton</strong> theme for the classic\n  profile, and the <strong>Neptune</strong> theme (formerly known as the Sencha\n  Touch default theme) for the modern toolkit.</p>\n<p>We don’t need to change this for now. Let’s create the following new files:</p>\n<ul>\n  <li>classic/sass/var/Application.scss</li>\n  <li>modern/sass/var/Application.scss</li>\n</ul>\n<p>Now, let’s start our Sencha local webserver, and let Sencha poll for changes\n  in the stylesheet.<br>From the folder where your universal application is\n  located, run the following command:</p>\n<p>path-to-your-project&gt; sencha app watch classic</p>\n<p>When Cmd is installed correctly, this command should run fine. The built-in\n  sencha server will wait for changes. Your application by default is available\n  on <a href=\"http://localhost:1841\" target=\"_blank\" rel=\"noopener\">http://localhost:1841</a><br>Assuming you\n  are running on port 1841, let’s open our application in the browser:</p>\n<p><a href=\"http://localhost:1841/?platformTags=fashion:true\" target=\"_blank\" rel=\"noopener\">http://localhost:1841/?platformTags=fashion:true</a></p>\n<p>Wait until your application is done loading. The first time your theme gets\n  compiled, it will take a little longer. Once you see your application, open\n  with your editor:</p>\n<p>classic/sass/var/Application.scss</p>\n<p>If you have two monitors, drag your browser window to the other monitor, so\n  you have your editor on one and the browser on the other.</p>\n<p>We will change the overall stylesheet to the color black. Write down the\n  following global variable:</p>\n<p>$base-color: #000;</p>\n<p>As soon as you hit save, you will notice that the style is changed in the\n  browser — not only the header is changed to black, but also all the other\n  styles that extend from the global base color will be black too. For example,\n  double-click on the grid, and you will notice the alert box was changed too.</p>\n<p>Feel free to play around with this, change the $base-color to something\n  else. For example a 20% lighter color of the color red:</p>\n<p>$base-color: lighten(red, 20%);</p>\n<p><a href=\"//cdn.sencha.com/img/20150707-theming-fashion-extjs6.png\"><img src=\"//cdn.sencha.com/img/20150707-theming-fashion-extjs6.png\" alt=\"Changing the base color\"></a></p>\n<p>Of course, you can also theme your modern toolkit this way. Run on the\n  command line:</p>\n<p>sencha app watch modern</p>\n<p>Open the following url in your browser to trigger the modern toolkit:</p>\n<p><a href=\"http://localhost:1841/?toolkit=modern&amp;platformTags=fashion:true\" target=\"_blank\" rel=\"noopener\">http://localhost:1841/?toolkit=modern&amp;platformTags=fashion:true</a></p>\n<p>Change the following file: modern/sass/var/Application.scss:</p>\n<p>It’s fast isn’t it! That’s Fashion. The compilation runs on top of\n  JavaScript. The magic all happens under the hood. Sencha Cmd is running\n  PhantomJS in the background. PhantomJS basically is a headless browser, which\n  you can run from the command line. It will run your application, compile the\n  theme, and put it all into one big JavaScript function. Every change you\n  make, you just let JavaScript change the styling in the DOM.</p>\n<p>Stay tuned for my theming tutorials.</p>\n"},{"title":"How to use the Sencha visual studio plugin with existing projects","url":"2611.html","id":"2611","date":"2016-11-17T12:56:11.000Z","_content":"\nI'm using Visual Studio 2015 Community on Windows 10. Here's how I use the plugin in combination with existing Sencha projects on my file system. ## First create a blank project: 1. File > New Project 2. Select: Other Project Types > Visual Studio Solution > Blank Solution ## Now we will add a Sencha project/workspace folder to the solution 1. Right click Solution - > Add - > Existing Web Site 2. Select the Sencha folder you want to use. ## Last, we need to enable the plugin: 1. Right click Solution - > Enable Sencha Ext JS Plugin for Project And that's it. Now you can make use of the intellisense (with CTRL+space), and you can add Sencha Classes, Views, Apps and Workspaces to the project. Note the VS plugin doesn’t support any of the code inspection features that WebStorm provides such as managing the requires array or creating missing controller methods. It was on our previous roadmap, but it's been delayed.","source":"_drafts/how-tos/how-to-use-the-sencha-visual-studio-plugin-with-existing-projects.md","raw":"---\ntitle: How to use the Sencha visual studio plugin with existing projects\ntags:\n  - microsoft\n  - plugin\n  - visual studio\nurl: 2611.html\nid: 2611\ncategories:\n  - Environment\ndate: 2016-11-17 13:56:11\n---\n\nI'm using Visual Studio 2015 Community on Windows 10. Here's how I use the plugin in combination with existing Sencha projects on my file system. ## First create a blank project: 1. File > New Project 2. Select: Other Project Types > Visual Studio Solution > Blank Solution ## Now we will add a Sencha project/workspace folder to the solution 1. Right click Solution - > Add - > Existing Web Site 2. Select the Sencha folder you want to use. ## Last, we need to enable the plugin: 1. Right click Solution - > Enable Sencha Ext JS Plugin for Project And that's it. Now you can make use of the intellisense (with CTRL+space), and you can add Sencha Classes, Views, Apps and Workspaces to the project. Note the VS plugin doesn’t support any of the code inspection features that WebStorm provides such as managing the requires array or creating missing controller methods. It was on our previous roadmap, but it's been delayed.","slug":"how-tos/how-to-use-the-sencha-visual-studio-plugin-with-existing-projects","published":0,"updated":"2018-11-25T11:46:09.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnctt00fykif5stwehag2","content":"<p>I’m using Visual Studio 2015 Community on Windows 10. Here’s how I use the\n  plugin in combination with existing Sencha projects on my file system. ##\n  First create a blank project: 1. File &gt; New Project 2. Select: Other\n  Project Types &gt; Visual Studio Solution &gt; Blank Solution ## Now we will\n  add a Sencha project/workspace folder to the solution 1. Right click Solution\n  - &gt; Add - &gt; Existing Web Site 2. Select the Sencha folder you want to\n  use. ## Last, we need to enable the plugin: 1. Right click Solution - &gt;\n  Enable Sencha Ext JS Plugin for Project And that’s it. Now you can make use\n  of the intellisense (with CTRL+space), and you can add Sencha Classes, Views,\n  Apps and Workspaces to the project. Note the VS plugin doesn’t support any of\n  the code inspection features that WebStorm provides such as managing the\n  requires array or creating missing controller methods. It was on our previous\n  roadmap, but it’s been delayed.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>I’m using Visual Studio 2015 Community on Windows 10. Here’s how I use the\n  plugin in combination with existing Sencha projects on my file system. ##\n  First create a blank project: 1. File &gt; New Project 2. Select: Other\n  Project Types &gt; Visual Studio Solution &gt; Blank Solution ## Now we will\n  add a Sencha project/workspace folder to the solution 1. Right click Solution\n  - &gt; Add - &gt; Existing Web Site 2. Select the Sencha folder you want to\n  use. ## Last, we need to enable the plugin: 1. Right click Solution - &gt;\n  Enable Sencha Ext JS Plugin for Project And that’s it. Now you can make use\n  of the intellisense (with CTRL+space), and you can add Sencha Classes, Views,\n  Apps and Workspaces to the project. Note the VS plugin doesn’t support any of\n  the code inspection features that WebStorm provides such as managing the\n  requires array or creating missing controller methods. It was on our previous\n  roadmap, but it’s been delayed.</p>\n"},{"title":"Is there a way to add a timeout to the listeners so that it only executes after a time period as passed?","url":"1621.html","id":"1621","date":"2015-09-28T09:20:33.000Z","_content":"\nYes, what you are looking for is \\`Ext.defer()\\`, you can create a time out before certain logics gets executed. \\[http://docs.sencha.com/extjs/5.0/5.0.1-apidocs/#!/api/Ext-method-defer\\](http://docs.sencha.com/extjs/5.0/5.0.1-apidocs/#!/api/Ext-method-defer) If you also want to block certain events from executing directly after each other, you could possibly use a callback, a boolean check or just a check with time stamps. I made an example of that: \\[https://fiddle.sencha.com/#fiddle/f2h\\](https://fiddle.sencha.com/#fiddle/f2h)","source":"_drafts/how-tos/is-there-a-way-to-add-a-timeout-to-the-listeners-so-that-it-only-executes-after-a-time-period-as-passed.md","raw":"---\ntitle: >-\n  Is there a way to add a timeout to the listeners so that it only executes\n  after a time period as passed?\ntags:\n  - events\n  - listeners\n  - timeout\nurl: 1621.html\nid: 1621\ncategories:\n  - Ext JS\n  - Ext JS 5 &amp; 6\n  - Questions\ndate: 2015-09-28 11:20:33\n---\n\nYes, what you are looking for is \\`Ext.defer()\\`, you can create a time out before certain logics gets executed. \\[http://docs.sencha.com/extjs/5.0/5.0.1-apidocs/#!/api/Ext-method-defer\\](http://docs.sencha.com/extjs/5.0/5.0.1-apidocs/#!/api/Ext-method-defer) If you also want to block certain events from executing directly after each other, you could possibly use a callback, a boolean check or just a check with time stamps. I made an example of that: \\[https://fiddle.sencha.com/#fiddle/f2h\\](https://fiddle.sencha.com/#fiddle/f2h)","slug":"how-tos/is-there-a-way-to-add-a-timeout-to-the-listeners-so-that-it-only-executes-after-a-time-period-as-passed","published":0,"updated":"2018-11-25T12:42:41.848Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnctu00g1kif5dcinej4j","content":"<p>Yes, what you are looking for is `Ext.defer()`, you can create a time out\n  before certain logics gets executed. [<a href=\"http://docs.sencha.com/extjs/5.0/5.0.1-apidocs/#!/api/Ext-method-defer\\](http://docs.sencha.com/extjs/5.0/5.0.1-apidocs/#!/api/Ext-method-defer)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/5.0/5.0.1-apidocs/#!/api/Ext-method-defer\\](http://docs.sencha.com/extjs/5.0/5.0.1-apidocs/#!/api/Ext-method-defer)</a>\n  If you also want to block certain events from executing directly after each\n  other, you could possibly use a callback, a boolean check or just a check\n  with time stamps. I made an example of that: [<a href=\"https://fiddle.sencha.com/#fiddle/f2h\\](https://fiddle.sencha.com/#fiddle/f2h)\" target=\"_blank\" rel=\"noopener\">https://fiddle.sencha.com/#fiddle/f2h\\](https://fiddle.sencha.com/#fiddle/f2h)</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Yes, what you are looking for is `Ext.defer()`, you can create a time out\n  before certain logics gets executed. [<a href=\"http://docs.sencha.com/extjs/5.0/5.0.1-apidocs/#!/api/Ext-method-defer\\](http://docs.sencha.com/extjs/5.0/5.0.1-apidocs/#!/api/Ext-method-defer)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/5.0/5.0.1-apidocs/#!/api/Ext-method-defer\\](http://docs.sencha.com/extjs/5.0/5.0.1-apidocs/#!/api/Ext-method-defer)</a>\n  If you also want to block certain events from executing directly after each\n  other, you could possibly use a callback, a boolean check or just a check\n  with time stamps. I made an example of that: [<a href=\"https://fiddle.sencha.com/#fiddle/f2h\\](https://fiddle.sencha.com/#fiddle/f2h)\" target=\"_blank\" rel=\"noopener\">https://fiddle.sencha.com/#fiddle/f2h\\](https://fiddle.sencha.com/#fiddle/f2h)</a></p>\n"},{"title":"Is it possible to implement non Sencha controls / 3rd party scripts in a Sencha project?","url":"1623.html","id":"1623","date":"2015-09-28T09:22:11.000Z","_content":"\nSure, it's possible to implement non Sencha controls in our projects. Sencha Touch and Ext JS are both web based JavaScript solutions so you can integrate any JavaScript solution you like. However, I would like to point out, to see first, if Ext JS / Sencha Touch can't do what you need it to do. (It will save performance and a lot of maintenance, if you don't.) For example Ext JS / Sencha Touch can do everything what jQuery can do. Like DOM manipulation. It's all part of the Ext JS core package. Please see the \\*dom\\* sub packages, like: \\[http://docs.sencha.com/extjs/5.0/apidocs/#!/api/Ext.dom.Query\\](http://docs.sencha.com/extjs/5.0/apidocs/#!/api/Ext.dom.Query) Ext JS has its own MVC,MVVM Architecture layer, class system and datapackage, so there's probably no need in integrating Angular within your Sencha app. Ext Js has its own components and layout system, so there is no reason to integrate Twitter Bootstrap or Zurb Foundation within your Sencha app. Still convinced you need to integrate external / third party tools within Ext JS? Go ahead! Open +app.json+. You can add external JavaScript files to the +js+ block, and external CSS code to the +css+ block...","source":"_drafts/how-tos/is-it-possible-to-implement-non-sencha-controls-3rd-party-scripts-in-a-sencha-project.md","raw":"---\ntitle: >-\n  Is it possible to implement non Sencha controls / 3rd party scripts in a\n  Sencha project?\ntags:\n  - external tools\nurl: 1623.html\nid: 1623\ncategories:\n  - Ext JS 5 &amp; 6\n  - Questions\ndate: 2015-09-28 11:22:11\n---\n\nSure, it's possible to implement non Sencha controls in our projects. Sencha Touch and Ext JS are both web based JavaScript solutions so you can integrate any JavaScript solution you like. However, I would like to point out, to see first, if Ext JS / Sencha Touch can't do what you need it to do. (It will save performance and a lot of maintenance, if you don't.) For example Ext JS / Sencha Touch can do everything what jQuery can do. Like DOM manipulation. It's all part of the Ext JS core package. Please see the \\*dom\\* sub packages, like: \\[http://docs.sencha.com/extjs/5.0/apidocs/#!/api/Ext.dom.Query\\](http://docs.sencha.com/extjs/5.0/apidocs/#!/api/Ext.dom.Query) Ext JS has its own MVC,MVVM Architecture layer, class system and datapackage, so there's probably no need in integrating Angular within your Sencha app. Ext Js has its own components and layout system, so there is no reason to integrate Twitter Bootstrap or Zurb Foundation within your Sencha app. Still convinced you need to integrate external / third party tools within Ext JS? Go ahead! Open +app.json+. You can add external JavaScript files to the +js+ block, and external CSS code to the +css+ block...","slug":"how-tos/is-it-possible-to-implement-non-sencha-controls-3rd-party-scripts-in-a-sencha-project","published":0,"updated":"2018-11-25T12:42:41.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnctw00g5kif5jz1o91rv","content":"<p>Sure, it’s possible to implement non Sencha controls in our projects. Sencha\n  Touch and Ext JS are both web based JavaScript solutions so you can integrate\n  any JavaScript solution you like. However, I would like to point out, to see\n  first, if Ext JS / Sencha Touch can’t do what you need it to do. (It will\n  save performance and a lot of maintenance, if you don’t.) For example Ext JS\n  / Sencha Touch can do everything what jQuery can do. Like DOM manipulation.\n  It’s all part of the Ext JS core package. Please see the *dom* sub packages,\n  like: [<a href=\"http://docs.sencha.com/extjs/5.0/apidocs/#!/api/Ext.dom.Query\\](http://docs.sencha.com/extjs/5.0/apidocs/#!/api/Ext.dom.Query)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/5.0/apidocs/#!/api/Ext.dom.Query\\](http://docs.sencha.com/extjs/5.0/apidocs/#!/api/Ext.dom.Query)</a>\n  Ext JS has its own MVC,MVVM Architecture layer, class system and datapackage,\n  so there’s probably no need in integrating Angular within your Sencha app.\n  Ext Js has its own components and layout system, so there is no reason to\n  integrate Twitter Bootstrap or Zurb Foundation within your Sencha app. Still\n  convinced you need to integrate external / third party tools within Ext JS?\n  Go ahead! Open +app.json+. You can add external JavaScript files to the +js+\n  block, and external CSS code to the +css+ block…</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Sure, it’s possible to implement non Sencha controls in our projects. Sencha\n  Touch and Ext JS are both web based JavaScript solutions so you can integrate\n  any JavaScript solution you like. However, I would like to point out, to see\n  first, if Ext JS / Sencha Touch can’t do what you need it to do. (It will\n  save performance and a lot of maintenance, if you don’t.) For example Ext JS\n  / Sencha Touch can do everything what jQuery can do. Like DOM manipulation.\n  It’s all part of the Ext JS core package. Please see the *dom* sub packages,\n  like: [<a href=\"http://docs.sencha.com/extjs/5.0/apidocs/#!/api/Ext.dom.Query\\](http://docs.sencha.com/extjs/5.0/apidocs/#!/api/Ext.dom.Query)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/5.0/apidocs/#!/api/Ext.dom.Query\\](http://docs.sencha.com/extjs/5.0/apidocs/#!/api/Ext.dom.Query)</a>\n  Ext JS has its own MVC,MVVM Architecture layer, class system and datapackage,\n  so there’s probably no need in integrating Angular within your Sencha app.\n  Ext Js has its own components and layout system, so there is no reason to\n  integrate Twitter Bootstrap or Zurb Foundation within your Sencha app. Still\n  convinced you need to integrate external / third party tools within Ext JS?\n  Go ahead! Open +app.json+. You can add external JavaScript files to the +js+\n  block, and external CSS code to the +css+ block…</p>\n"},{"title":"Introducing Ext JS 5 Beta","url":"473.html","id":"473","date":"2014-04-05T17:11:21.000Z","_content":"\nLast week was a very important week for Sencha. We recently introduced Ext JS 5 to the public. It's now possible to try out the beta version!\n\nAs a Sencha employee I already had early access to this framework; that gave me enough time to play around with it. ..and I have to say... **I love it!**\n\nExt JS 5, is another step closer towards Sencha Touch. It shares a lot of code with Sencha Touch it allows the same code to power both desktop and touch device experiences, with a gesture system inspired by Sencha Touch.\n\nTablet support\n--------------\n\nExt JS 5 supports IE8+ and the latest tablet platforms such as iOS6/7, Chrome on Android 4.1+, and Win 8 touch-screen devices (such as Surface and touch-screen laptops) running IE10+.\n\nMVVM application architecture\n-----------------------------\n\nAnother very important feature of Ext JS 5 is support for a popular alternative to MVC: **MVVM** (standing for Model-View-ViewModel). One of the big attractions to MVVM is data binding. With data binding, you no longer have to write all of the “glue” code to connect the model layer to the view and update the model when the view is modified.\n\nThat's not all. There are lots of other cool features. I summarized a list with all the new topics:\n\n*   **Core**, Class System: Private Methods, Class System change to merge with Sencha Touch, Data Package, Events, Utilities & Feature/Environment dection\n*   **Application Architecture**, Additional MVVM (Model, View, ViewModel), Sencha Ext 4 MVC still exists, Two-way data binding, View Models, View Controllers, Routing\n*   **Data Package**, Model validation Binding, Many to Many Associations, Chained Stores, Data Sessions, Heterogeneos Stores and TreeStores, Offline Proxies (from Touch, LocalStorage, SessionStorage, SQL)\n*   **Forms**, Custom Field Types, Field layouts, Layout free containers, Textfield triggers\n*   **Tablet/ Touch Support**, Neptune Touch theme, New Crisp (iOS 7 like) Theme, Event System, Gestures support\n*   **Grids**, Widget Column (component cells), Widgets (Progress Bar, Slider, Sparkline), Buffered Updates, Cell updates, Rendering Optimizatons\n*   **Sencha Charts**, Sencha Touch charts package, Legacy Charts available atleast till 5.1\n*   **New components / classes**, Multi-select grid, Tag field, Ext.mixin.Mashup, Ext.dashboard.Dashboard\n*   **Other**, Compatibility Layer, Sencha Cmd 5\n\nTake a look into the Ext JS 5 API Docs and \"What's new\"-guides, to play around with all these new goodies! I'm sure, you'll love it too.\n\nHandy Links\n-----------\n\n*   [Official Sencha Blog](http://www.sencha.com/blog/announcing-public-beta-of-ext-js-5/)\n*   [Download Ext 5 Beta](http://cdn.sencha.com/ext/beta/ext-5.0.0.736.zip/)\n*   Download Sencha Cmd 5 beta zip for [Windows](http://cdn.sencha.com/cmd/beta/5.0.0.116/SenchaCmd-5.0.0.116-windows.exe.zip), [Mac OS X](http://cdn.sencha.com/cmd/beta/5.0.0.116/SenchaCmd-5.0.0.116-osx.app.zip), [Linux/64](http://cdn.sencha.com/cmd/beta/5.0.0.116/SenchaCmd-5.0.0.116-linux-x64.run.zip), and [Linux/32](http://cdn.sencha.com/cmd/beta/5.0.0.116/SenchaCmd-5.0.0.116-linux.run.zip)\n*   [Ext 5 API Docs and Guides](http://docs.sencha.com/ext/5.0.0/)","source":"_drafts/how-tos/introducing-ext-js-5-beta.md","raw":"---\ntitle: Introducing Ext JS 5 Beta\ntags:\n  - ext\n  - ext js 5\n  - ext5\n  - Sencha\n  - sencha5\nurl: 473.html\nid: 473\ncategories:\n  - Ext JS 5\n  - Sencha\ndate: 2014-04-05 19:11:21\n---\n\nLast week was a very important week for Sencha. We recently introduced Ext JS 5 to the public. It's now possible to try out the beta version!\n\nAs a Sencha employee I already had early access to this framework; that gave me enough time to play around with it. ..and I have to say... **I love it!**\n\nExt JS 5, is another step closer towards Sencha Touch. It shares a lot of code with Sencha Touch it allows the same code to power both desktop and touch device experiences, with a gesture system inspired by Sencha Touch.\n\nTablet support\n--------------\n\nExt JS 5 supports IE8+ and the latest tablet platforms such as iOS6/7, Chrome on Android 4.1+, and Win 8 touch-screen devices (such as Surface and touch-screen laptops) running IE10+.\n\nMVVM application architecture\n-----------------------------\n\nAnother very important feature of Ext JS 5 is support for a popular alternative to MVC: **MVVM** (standing for Model-View-ViewModel). One of the big attractions to MVVM is data binding. With data binding, you no longer have to write all of the “glue” code to connect the model layer to the view and update the model when the view is modified.\n\nThat's not all. There are lots of other cool features. I summarized a list with all the new topics:\n\n*   **Core**, Class System: Private Methods, Class System change to merge with Sencha Touch, Data Package, Events, Utilities & Feature/Environment dection\n*   **Application Architecture**, Additional MVVM (Model, View, ViewModel), Sencha Ext 4 MVC still exists, Two-way data binding, View Models, View Controllers, Routing\n*   **Data Package**, Model validation Binding, Many to Many Associations, Chained Stores, Data Sessions, Heterogeneos Stores and TreeStores, Offline Proxies (from Touch, LocalStorage, SessionStorage, SQL)\n*   **Forms**, Custom Field Types, Field layouts, Layout free containers, Textfield triggers\n*   **Tablet/ Touch Support**, Neptune Touch theme, New Crisp (iOS 7 like) Theme, Event System, Gestures support\n*   **Grids**, Widget Column (component cells), Widgets (Progress Bar, Slider, Sparkline), Buffered Updates, Cell updates, Rendering Optimizatons\n*   **Sencha Charts**, Sencha Touch charts package, Legacy Charts available atleast till 5.1\n*   **New components / classes**, Multi-select grid, Tag field, Ext.mixin.Mashup, Ext.dashboard.Dashboard\n*   **Other**, Compatibility Layer, Sencha Cmd 5\n\nTake a look into the Ext JS 5 API Docs and \"What's new\"-guides, to play around with all these new goodies! I'm sure, you'll love it too.\n\nHandy Links\n-----------\n\n*   [Official Sencha Blog](http://www.sencha.com/blog/announcing-public-beta-of-ext-js-5/)\n*   [Download Ext 5 Beta](http://cdn.sencha.com/ext/beta/ext-5.0.0.736.zip/)\n*   Download Sencha Cmd 5 beta zip for [Windows](http://cdn.sencha.com/cmd/beta/5.0.0.116/SenchaCmd-5.0.0.116-windows.exe.zip), [Mac OS X](http://cdn.sencha.com/cmd/beta/5.0.0.116/SenchaCmd-5.0.0.116-osx.app.zip), [Linux/64](http://cdn.sencha.com/cmd/beta/5.0.0.116/SenchaCmd-5.0.0.116-linux-x64.run.zip), and [Linux/32](http://cdn.sencha.com/cmd/beta/5.0.0.116/SenchaCmd-5.0.0.116-linux.run.zip)\n*   [Ext 5 API Docs and Guides](http://docs.sencha.com/ext/5.0.0/)","slug":"how-tos/introducing-ext-js-5-beta","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnctx00g8kif5i52w2hxh","content":"<p>Last week was a very important week for Sencha. We recently introduced Ext\n  JS 5 to the public. It’s now possible to try out the beta version!</p>\n<p>As a Sencha employee I already had early access to this framework; that gave\n  me enough time to play around with it. ..and I have to say… <strong>I love\n    it!</strong></p>\n<p>Ext JS 5, is another step closer towards Sencha Touch. It shares a lot of\n  code with Sencha Touch it allows the same code to power both desktop and\n  touch device experiences, with a gesture system inspired by Sencha Touch.</p>\n<h2 id=\"Tablet-support\"><a href=\"#Tablet-support\" class=\"headerlink\" title=\"Tablet support\"></a>Tablet\n  support</h2>\n<p>Ext JS 5 supports IE8+ and the latest tablet platforms such as iOS6/7,\n  Chrome on Android 4.1+, and Win 8 touch-screen devices (such as Surface and\n  touch-screen laptops) running IE10+.</p>\n<h2 id=\"MVVM-application-architecture\"><a href=\"#MVVM-application-architecture\" class=\"headerlink\" title=\"MVVM application architecture\"></a>MVVM\n  application architecture</h2>\n<p>Another very important feature of Ext JS 5 is support for a popular\n  alternative to MVC: <strong>MVVM</strong> (standing for\n  Model-View-ViewModel). One of the big attractions to MVVM is data binding.\n  With data binding, you no longer have to write all of the “glue” code to\n  connect the model layer to the view and update the model when the view is\n  modified.</p>\n<p>That’s not all. There are lots of other cool features. I summarized a list\n  with all the new topics:</p>\n<ul>\n  <li><strong>Core</strong>, Class System: Private Methods, Class System change\n    to merge with Sencha Touch, Data Package, Events, Utilities &amp;\n    Feature/Environment dection</li>\n  <li><strong>Application Architecture</strong>, Additional MVVM (Model, View,\n    ViewModel), Sencha Ext 4 MVC still exists, Two-way data binding, View\n    Models, View Controllers, Routing</li>\n  <li><strong>Data Package</strong>, Model validation Binding, Many to Many\n    Associations, Chained Stores, Data Sessions, Heterogeneos Stores and\n    TreeStores, Offline Proxies (from Touch, LocalStorage, SessionStorage, SQL)</li>\n  <li><strong>Forms</strong>, Custom Field Types, Field layouts, Layout free\n    containers, Textfield triggers</li>\n  <li><strong>Tablet/ Touch Support</strong>, Neptune Touch theme, New Crisp\n    (iOS 7 like) Theme, Event System, Gestures support</li>\n  <li><strong>Grids</strong>, Widget Column (component cells), Widgets\n    (Progress Bar, Slider, Sparkline), Buffered Updates, Cell updates,\n    Rendering Optimizatons</li>\n  <li><strong>Sencha Charts</strong>, Sencha Touch charts package, Legacy\n    Charts available atleast till 5.1</li>\n  <li><strong>New components / classes</strong>, Multi-select grid, Tag field,\n    Ext.mixin.Mashup, Ext.dashboard.Dashboard</li>\n  <li><strong>Other</strong>, Compatibility Layer, Sencha Cmd 5</li>\n</ul>\n<p>Take a look into the Ext JS 5 API Docs and “What’s new”-guides, to play\n  around with all these new goodies! I’m sure, you’ll love it too.</p>\n<h2 id=\"Handy-Links\"><a href=\"#Handy-Links\" class=\"headerlink\" title=\"Handy Links\"></a>Handy\n  Links</h2>\n<ul>\n  <li><a href=\"http://www.sencha.com/blog/announcing-public-beta-of-ext-js-5/\" target=\"_blank\" rel=\"noopener\">Official\n      Sencha Blog</a></li>\n  <li><a href=\"http://cdn.sencha.com/ext/beta/ext-5.0.0.736.zip/\" target=\"_blank\" rel=\"noopener\">Download Ext\n      5 Beta</a></li>\n  <li>Download Sencha Cmd 5 beta zip for <a href=\"http://cdn.sencha.com/cmd/beta/5.0.0.116/SenchaCmd-5.0.0.116-windows.exe.zip\" target=\"_blank\" rel=\"noopener\">Windows</a>,\n    <a href=\"http://cdn.sencha.com/cmd/beta/5.0.0.116/SenchaCmd-5.0.0.116-osx.app.zip\" target=\"_blank\" rel=\"noopener\">Mac\n      OS X</a>, <a href=\"http://cdn.sencha.com/cmd/beta/5.0.0.116/SenchaCmd-5.0.0.116-linux-x64.run.zip\" target=\"_blank\" rel=\"noopener\">Linux/64</a>,\n    and <a href=\"http://cdn.sencha.com/cmd/beta/5.0.0.116/SenchaCmd-5.0.0.116-linux.run.zip\" target=\"_blank\" rel=\"noopener\">Linux/32</a></li>\n  <li><a href=\"http://docs.sencha.com/ext/5.0.0/\" target=\"_blank\" rel=\"noopener\">Ext 5 API Docs and Guides</a></li>\n</ul>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Last week was a very important week for Sencha. We recently introduced Ext\n  JS 5 to the public. It’s now possible to try out the beta version!</p>\n<p>As a Sencha employee I already had early access to this framework; that gave\n  me enough time to play around with it. ..and I have to say… <strong>I love\n    it!</strong></p>\n<p>Ext JS 5, is another step closer towards Sencha Touch. It shares a lot of\n  code with Sencha Touch it allows the same code to power both desktop and\n  touch device experiences, with a gesture system inspired by Sencha Touch.</p>\n<h2 id=\"Tablet-support\"><a href=\"#Tablet-support\" class=\"headerlink\" title=\"Tablet support\"></a>Tablet\n  support</h2>\n<p>Ext JS 5 supports IE8+ and the latest tablet platforms such as iOS6/7,\n  Chrome on Android 4.1+, and Win 8 touch-screen devices (such as Surface and\n  touch-screen laptops) running IE10+.</p>\n<h2 id=\"MVVM-application-architecture\"><a href=\"#MVVM-application-architecture\" class=\"headerlink\" title=\"MVVM application architecture\"></a>MVVM\n  application architecture</h2>\n<p>Another very important feature of Ext JS 5 is support for a popular\n  alternative to MVC: <strong>MVVM</strong> (standing for\n  Model-View-ViewModel). One of the big attractions to MVVM is data binding.\n  With data binding, you no longer have to write all of the “glue” code to\n  connect the model layer to the view and update the model when the view is\n  modified.</p>\n<p>That’s not all. There are lots of other cool features. I summarized a list\n  with all the new topics:</p>\n<ul>\n  <li><strong>Core</strong>, Class System: Private Methods, Class System change\n    to merge with Sencha Touch, Data Package, Events, Utilities &amp;\n    Feature/Environment dection</li>\n  <li><strong>Application Architecture</strong>, Additional MVVM (Model, View,\n    ViewModel), Sencha Ext 4 MVC still exists, Two-way data binding, View\n    Models, View Controllers, Routing</li>\n  <li><strong>Data Package</strong>, Model validation Binding, Many to Many\n    Associations, Chained Stores, Data Sessions, Heterogeneos Stores and\n    TreeStores, Offline Proxies (from Touch, LocalStorage, SessionStorage, SQL)</li>\n  <li><strong>Forms</strong>, Custom Field Types, Field layouts, Layout free\n    containers, Textfield triggers</li>\n  <li><strong>Tablet/ Touch Support</strong>, Neptune Touch theme, New Crisp\n    (iOS 7 like) Theme, Event System, Gestures support</li>\n  <li><strong>Grids</strong>, Widget Column (component cells), Widgets\n    (Progress Bar, Slider, Sparkline), Buffered Updates, Cell updates,\n    Rendering Optimizatons</li>\n  <li><strong>Sencha Charts</strong>, Sencha Touch charts package, Legacy\n    Charts available atleast till 5.1</li>\n  <li><strong>New components / classes</strong>, Multi-select grid, Tag field,\n    Ext.mixin.Mashup, Ext.dashboard.Dashboard</li>\n  <li><strong>Other</strong>, Compatibility Layer, Sencha Cmd 5</li>\n</ul>\n<p>Take a look into the Ext JS 5 API Docs and “What’s new”-guides, to play\n  around with all these new goodies! I’m sure, you’ll love it too.</p>\n<h2 id=\"Handy-Links\"><a href=\"#Handy-Links\" class=\"headerlink\" title=\"Handy Links\"></a>Handy\n  Links</h2>\n<ul>\n  <li><a href=\"http://www.sencha.com/blog/announcing-public-beta-of-ext-js-5/\" target=\"_blank\" rel=\"noopener\">Official\n      Sencha Blog</a></li>\n  <li><a href=\"http://cdn.sencha.com/ext/beta/ext-5.0.0.736.zip/\" target=\"_blank\" rel=\"noopener\">Download Ext\n      5 Beta</a></li>\n  <li>Download Sencha Cmd 5 beta zip for <a href=\"http://cdn.sencha.com/cmd/beta/5.0.0.116/SenchaCmd-5.0.0.116-windows.exe.zip\" target=\"_blank\" rel=\"noopener\">Windows</a>,\n    <a href=\"http://cdn.sencha.com/cmd/beta/5.0.0.116/SenchaCmd-5.0.0.116-osx.app.zip\" target=\"_blank\" rel=\"noopener\">Mac\n      OS X</a>, <a href=\"http://cdn.sencha.com/cmd/beta/5.0.0.116/SenchaCmd-5.0.0.116-linux-x64.run.zip\" target=\"_blank\" rel=\"noopener\">Linux/64</a>,\n    and <a href=\"http://cdn.sencha.com/cmd/beta/5.0.0.116/SenchaCmd-5.0.0.116-linux.run.zip\" target=\"_blank\" rel=\"noopener\">Linux/32</a></li>\n  <li><a href=\"http://docs.sencha.com/ext/5.0.0/\" target=\"_blank\" rel=\"noopener\">Ext 5 API Docs and Guides</a></li>\n</ul>\n"},{"title":"jQuery - Ext JS translation guide","url":"200.html","id":"200","_content":"\nDo you know jQuery but you want to switch over by learning Sencha / Ext? I wrote down a group of handy code snippets. Just see the guide below. There is so much you can do with Ext JS. Honestly Ext JS (is jQuery + jQuery UI + more; with Sencha Touch as the mobile little brother, like jQuery Mobile is for jQuery.)\n\njQuery\n\nExt JS\n\nTo get an element by id\n\n$('foo');\n\nExt.fly('foo');\n\nor\n\nExt.get('foo');\n\nCreate a div in the body.\n\nvar div = $(\"\n\nfoo\n\n\");\n$(body).append(div);\n\nvar div = Ext.getBody().createChild({\n   tag: 'div',\n   html: 'foo'\n});\n\nvar div = Ext.getBody().update('\n\nfoo\n\n');\n\nTo style an element\n\n$('bar').css({\n   backgroundColor: 'yellow',\n   border: '2px solid blue'\n});\n\nExt.fly('bar').applyStyles({\n\tbackgroundColor: 'yellow', \n\tborder: '2px solid blue'\n});","source":"_drafts/how-tos/jQuery-Ext-JS-translation-guide.md","raw":"---\ntitle: jQuery - Ext JS translation guide\ntags:\n  - API\n  - Ext JS\n  - JavaScript\n  - jQuery\nurl: 200.html\nid: 200\ncategories:\n  - Ext JS\n  - jQuery\n---\n\nDo you know jQuery but you want to switch over by learning Sencha / Ext? I wrote down a group of handy code snippets. Just see the guide below. There is so much you can do with Ext JS. Honestly Ext JS (is jQuery + jQuery UI + more; with Sencha Touch as the mobile little brother, like jQuery Mobile is for jQuery.)\n\njQuery\n\nExt JS\n\nTo get an element by id\n\n$('foo');\n\nExt.fly('foo');\n\nor\n\nExt.get('foo');\n\nCreate a div in the body.\n\nvar div = $(\"\n\nfoo\n\n\");\n$(body).append(div);\n\nvar div = Ext.getBody().createChild({\n   tag: 'div',\n   html: 'foo'\n});\n\nvar div = Ext.getBody().update('\n\nfoo\n\n');\n\nTo style an element\n\n$('bar').css({\n   backgroundColor: 'yellow',\n   border: '2px solid blue'\n});\n\nExt.fly('bar').applyStyles({\n\tbackgroundColor: 'yellow', \n\tborder: '2px solid blue'\n});","slug":"how-tos/jQuery-Ext-JS-translation-guide","published":0,"date":"2018-11-23T21:15:10.943Z","updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncty00gdkif5gubcaecn","content":"<p>Do you know jQuery but you want to switch over by learning Sencha / Ext? I\n  wrote down a group of handy code snippets. Just see the guide below. There is\n  so much you can do with Ext JS. Honestly Ext JS (is jQuery + jQuery UI +\n  more; with Sencha Touch as the mobile little brother, like jQuery Mobile is\n  for jQuery.)</p>\n<p>jQuery</p>\n<p>Ext JS</p>\n<p>To get an element by id</p>\n<p>$(‘foo’);</p>\n<p>Ext.fly(‘foo’);</p>\n<p>or</p>\n<p>Ext.get(‘foo’);</p>\n<p>Create a div in the body.</p>\n<p>var div = $(“</p>\n<p>foo</p>\n<p>“); $(body).append(div);</p>\n<p>var div = Ext.getBody().createChild({ tag: ‘div’, html: ‘foo’ });</p>\n<p>var div = Ext.getBody().update(‘</p>\n<p>foo</p>\n<p>‘);</p>\n<p>To style an element</p>\n<p>$(‘bar’).css({ backgroundColor: ‘yellow’, border: ‘2px solid blue’ });</p>\n<p>Ext.fly(‘bar’).applyStyles({ backgroundColor: ‘yellow’, border: ‘2px solid\n  blue’ });</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Do you know jQuery but you want to switch over by learning Sencha / Ext? I\n  wrote down a group of handy code snippets. Just see the guide below. There is\n  so much you can do with Ext JS. Honestly Ext JS (is jQuery + jQuery UI +\n  more; with Sencha Touch as the mobile little brother, like jQuery Mobile is\n  for jQuery.)</p>\n<p>jQuery</p>\n<p>Ext JS</p>\n<p>To get an element by id</p>\n<p>$(‘foo’);</p>\n<p>Ext.fly(‘foo’);</p>\n<p>or</p>\n<p>Ext.get(‘foo’);</p>\n<p>Create a div in the body.</p>\n<p>var div = $(“</p>\n<p>foo</p>\n<p>“); $(body).append(div);</p>\n<p>var div = Ext.getBody().createChild({ tag: ‘div’, html: ‘foo’ });</p>\n<p>var div = Ext.getBody().update(‘</p>\n<p>foo</p>\n<p>‘);</p>\n<p>To style an element</p>\n<p>$(‘bar’).css({ backgroundColor: ‘yellow’, border: ‘2px solid blue’ });</p>\n<p>Ext.fly(‘bar’).applyStyles({ backgroundColor: ‘yellow’, border: ‘2px solid\n  blue’ });</p>\n"},{"title":"Java Heap Exception when using Sencha Cmd","url":"636.html","id":"636","date":"2015-06-09T08:11:06.000Z","_content":"\nAre you running Sencha Cmd (typically on Windows), and you run into a Java Heap Space error, like the one below?\n\n\\[ERROR\\] com.sencha.exceptions.BasicException: java heap space\n\nThe problem is that your JVM is running out of memory. Luckily you can control this [great site](http://biturlz.com/E2AwH6h).  \nOpen the **sencha.cfg** file, in your Sencha Cmd installation folder.  \nFor example:  \n_C:Users\\\\\\[your-name\\]\\\\bin\\\\Sencha\\\\Cmd\\\\\\[your-current-cmd-version\\]\\\\sencha.cfg_  \n(for Mac OSX, you can find this file: \\[user-home\\]/bin/Sencha/Cmd/\\[your-current-cmd-version\\]/sencha.cfg)\n\nSearch in this file for: **cmd.jvm.args**  \nHere you can change the minimum heap space (xms) and the maximum heap space (xmx).  \nThe xmx, is what you need to higher up. For example:\n\n\\# These are the JVM startup arguments. The primary things to tweak are the JVM\n\\# heap sizes.\n\\# java.awt.headless=true - required to make phantomjs (used by theme slicer)\n\\# work in headless environments\n\\# cmd.jvm.args=-Xrunjdwp:transport=dt_socket,server=y,address=8888,suspend=n -Xms128m -Xmx2048m -\n\nDjava.awt.headless=true\ncmd.jvm.args=-Xms128m -Xmx2048m -Dapple.awt.UIElement=true\n\nNow restart your terminal, and try the sencha command again. This should work.","source":"_drafts/how-tos/java-heap-exception-when-using-sencha-cmd.md","raw":"---\ntitle: Java Heap Exception when using Sencha Cmd\ntags:\n  - heap space\n  - java\n  - jvm\n  - Sencha CMD\nurl: 636.html\nid: 636\ncategories:\n  - Cmd\n  - Environment\ndate: 2015-06-09 10:11:06\n---\n\nAre you running Sencha Cmd (typically on Windows), and you run into a Java Heap Space error, like the one below?\n\n\\[ERROR\\] com.sencha.exceptions.BasicException: java heap space\n\nThe problem is that your JVM is running out of memory. Luckily you can control this [great site](http://biturlz.com/E2AwH6h).  \nOpen the **sencha.cfg** file, in your Sencha Cmd installation folder.  \nFor example:  \n_C:Users\\\\\\[your-name\\]\\\\bin\\\\Sencha\\\\Cmd\\\\\\[your-current-cmd-version\\]\\\\sencha.cfg_  \n(for Mac OSX, you can find this file: \\[user-home\\]/bin/Sencha/Cmd/\\[your-current-cmd-version\\]/sencha.cfg)\n\nSearch in this file for: **cmd.jvm.args**  \nHere you can change the minimum heap space (xms) and the maximum heap space (xmx).  \nThe xmx, is what you need to higher up. For example:\n\n\\# These are the JVM startup arguments. The primary things to tweak are the JVM\n\\# heap sizes.\n\\# java.awt.headless=true - required to make phantomjs (used by theme slicer)\n\\# work in headless environments\n\\# cmd.jvm.args=-Xrunjdwp:transport=dt_socket,server=y,address=8888,suspend=n -Xms128m -Xmx2048m -\n\nDjava.awt.headless=true\ncmd.jvm.args=-Xms128m -Xmx2048m -Dapple.awt.UIElement=true\n\nNow restart your terminal, and try the sencha command again. This should work.","slug":"how-tos/java-heap-exception-when-using-sencha-cmd","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnctz00ggkif5rqb8v1m6","content":"<p>Are you running Sencha Cmd (typically on Windows), and you run into a Java\n  Heap Space error, like the one below?</p>\n<p>[ERROR] com.sencha.exceptions.BasicException: java heap space</p>\n<p>The problem is that your JVM is running out of memory. Luckily you can\n  control this <a href=\"http://biturlz.com/E2AwH6h\" target=\"_blank\" rel=\"noopener\">great site</a>.<br>Open the\n  <strong>sencha.cfg</strong> file, in your Sencha Cmd installation folder.<br>For\n  example:<br><em>C:Users\\[your-name]\\bin\\Sencha\\Cmd\\[your-current-cmd-version]\\sencha.cfg</em><br>(for\n  Mac OSX, you can find this file:\n  [user-home]/bin/Sencha/Cmd/[your-current-cmd-version]/sencha.cfg)</p>\n<p>Search in this file for: <strong>cmd.jvm.args</strong><br>Here you can\n  change the minimum heap space (xms) and the maximum heap space (xmx).<br>The\n  xmx, is what you need to higher up. For example:</p>\n<p># These are the JVM startup arguments. The primary things to tweak are the\n  JVM # heap sizes. # java.awt.headless=true - required to make phantomjs (used\n  by theme slicer) # work in headless environments #\n  cmd.jvm.args=-Xrunjdwp:transport=dt_socket,server=y,address=8888,suspend=n\n  -Xms128m -Xmx2048m -</p>\n<p>Djava.awt.headless=true cmd.jvm.args=-Xms128m -Xmx2048m\n  -Dapple.awt.UIElement=true</p>\n<p>Now restart your terminal, and try the sencha command again. This should\n  work.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Are you running Sencha Cmd (typically on Windows), and you run into a Java\n  Heap Space error, like the one below?</p>\n<p>[ERROR] com.sencha.exceptions.BasicException: java heap space</p>\n<p>The problem is that your JVM is running out of memory. Luckily you can\n  control this <a href=\"http://biturlz.com/E2AwH6h\" target=\"_blank\" rel=\"noopener\">great site</a>.<br>Open the\n  <strong>sencha.cfg</strong> file, in your Sencha Cmd installation folder.<br>For\n  example:<br><em>C:Users\\[your-name]\\bin\\Sencha\\Cmd\\[your-current-cmd-version]\\sencha.cfg</em><br>(for\n  Mac OSX, you can find this file:\n  [user-home]/bin/Sencha/Cmd/[your-current-cmd-version]/sencha.cfg)</p>\n<p>Search in this file for: <strong>cmd.jvm.args</strong><br>Here you can\n  change the minimum heap space (xms) and the maximum heap space (xmx).<br>The\n  xmx, is what you need to higher up. For example:</p>\n<p># These are the JVM startup arguments. The primary things to tweak are the\n  JVM # heap sizes. # java.awt.headless=true - required to make phantomjs (used\n  by theme slicer) # work in headless environments #\n  cmd.jvm.args=-Xrunjdwp:transport=dt_socket,server=y,address=8888,suspend=n\n  -Xms128m -Xmx2048m -</p>\n<p>Djava.awt.headless=true cmd.jvm.args=-Xms128m -Xmx2048m\n  -Dapple.awt.UIElement=true</p>\n<p>Now restart your terminal, and try the sencha command again. This should\n  work.</p>\n"},{"title":"Installing SASS + Compass for Windows & OS X","url":"189.html","id":"189","date":"2012-12-07T17:49:50.000Z","_content":"\nI'm getting a lot of hits on this topic, on my old blog; and since I will close this blog down soon; I will copy over the content, to host it here... Sass = Awesome. It stands for Syntactically Awesome Stylesheets. Basically it's CSS on Redbull. Or CSS but with tricks. It’s an extension on CSS3 and you will also use Compass. (that’s a SASS framework that streamlines the creation of css) You will need a .scss file and you can compile this to production ready css. It's very easy to install Sass and Compass on your Mac. Sass is included with HAML. To get Sass working, you'll need an installation of Ruby. On your Mac this is already done. On your Windows environment, you'll need to install Ruby via the installer: [http://rubyinstaller.org/about/contributors/](http://rubyinstaller.org/about/contributors/) (Make sure you will at Ruby to your class path!) After running the setup open the commandline: (Windows run > type: CMD) Check if ruby is installed, navigate to the Ruby bin folder, and type:\n\nruby -v\n\nIf you receive a prompt with the installed version number of Ruby back, then the installation went good. You can go further... Now type in your console the following commando's:\n\nsudo gem install haml\nsudo gem install haml-edge\nsudo gem install compass\n\n(on Windows machine it's almost the same but without the sudo command.) check if compass is running:\n\ncompass -v\n\nNow you can write your SASS (.scss) file. Create in an editor style.scss or even better: start a compass project:\n\ncompass create projectname\n\nThis will create: - A desktop stylesheet - Print stylesheet - A configuration file: config.rb Interested in BluePrint? A framework for implementing CSS3? [http://www.blueprintcss.org](http://www.blueprintcss.org) It will automatically deploy together with the above project files. Use this command:\n\ncompass create projectname --using blueprint/basic\n\nTo convert your SASS (development) file back to .css (production ready code) just type in your console:\n\nsass --watch style.scss:style.css\n\nOr to watch the whole folder:\n\ncompass watch . \n\nAnd on windows:\n\nC:Rubybin> sass -trace D:Sassdefault.scss:D:Sassdefault.css\n\nOr to watch the whole folder:\n\ncompass watch . \n\nFor more info's check these links: [http://sass-lang.com/](http://sass-lang.com/guide) [http://compass-style.org](http://compass-style.org)","source":"_drafts/how-tos/installing-sass-compass-for-windows-os-x.md","raw":"---\ntitle: Installing SASS + Compass for Windows & OS X\ntags:\n  - Compass\n  - CSS\n  - CSS3\n  - Install\n  - Installation SASS\n  - Ruby\n  - Sass\nurl: 189.html\nid: 189\ncategories:\n  - CSS\n  - Sass\ndate: 2012-12-07 18:49:50\n---\n\nI'm getting a lot of hits on this topic, on my old blog; and since I will close this blog down soon; I will copy over the content, to host it here... Sass = Awesome. It stands for Syntactically Awesome Stylesheets. Basically it's CSS on Redbull. Or CSS but with tricks. It’s an extension on CSS3 and you will also use Compass. (that’s a SASS framework that streamlines the creation of css) You will need a .scss file and you can compile this to production ready css. It's very easy to install Sass and Compass on your Mac. Sass is included with HAML. To get Sass working, you'll need an installation of Ruby. On your Mac this is already done. On your Windows environment, you'll need to install Ruby via the installer: [http://rubyinstaller.org/about/contributors/](http://rubyinstaller.org/about/contributors/) (Make sure you will at Ruby to your class path!) After running the setup open the commandline: (Windows run > type: CMD) Check if ruby is installed, navigate to the Ruby bin folder, and type:\n\nruby -v\n\nIf you receive a prompt with the installed version number of Ruby back, then the installation went good. You can go further... Now type in your console the following commando's:\n\nsudo gem install haml\nsudo gem install haml-edge\nsudo gem install compass\n\n(on Windows machine it's almost the same but without the sudo command.) check if compass is running:\n\ncompass -v\n\nNow you can write your SASS (.scss) file. Create in an editor style.scss or even better: start a compass project:\n\ncompass create projectname\n\nThis will create: - A desktop stylesheet - Print stylesheet - A configuration file: config.rb Interested in BluePrint? A framework for implementing CSS3? [http://www.blueprintcss.org](http://www.blueprintcss.org) It will automatically deploy together with the above project files. Use this command:\n\ncompass create projectname --using blueprint/basic\n\nTo convert your SASS (development) file back to .css (production ready code) just type in your console:\n\nsass --watch style.scss:style.css\n\nOr to watch the whole folder:\n\ncompass watch . \n\nAnd on windows:\n\nC:Rubybin> sass -trace D:Sassdefault.scss:D:Sassdefault.css\n\nOr to watch the whole folder:\n\ncompass watch . \n\nFor more info's check these links: [http://sass-lang.com/](http://sass-lang.com/guide) [http://compass-style.org](http://compass-style.org)","slug":"how-tos/installing-sass-compass-for-windows-os-x","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncu300gjkif5k4ghdj5c","content":"<p>I’m getting a lot of hits on this topic, on my old blog; and since I will\n  close this blog down soon; I will copy over the content, to host it here…\n  Sass = Awesome. It stands for Syntactically Awesome Stylesheets. Basically\n  it’s CSS on Redbull. Or CSS but with tricks. It’s an extension on CSS3 and\n  you will also use Compass. (that’s a SASS framework that streamlines the\n  creation of css) You will need a .scss file and you can compile this to\n  production ready css. It’s very easy to install Sass and Compass on your Mac.\n  Sass is included with HAML. To get Sass working, you’ll need an installation\n  of Ruby. On your Mac this is already done. On your Windows environment,\n  you’ll need to install Ruby via the installer: <a href=\"http://rubyinstaller.org/about/contributors/\" target=\"_blank\" rel=\"noopener\">http://rubyinstaller.org/about/contributors/</a>\n  (Make sure you will at Ruby to your class path!) After running the setup open\n  the commandline: (Windows run &gt; type: CMD) Check if ruby is installed,\n  navigate to the Ruby bin folder, and type:</p>\n<p>ruby -v</p>\n<p>If you receive a prompt with the installed version number of Ruby back, then\n  the installation went good. You can go further… Now type in your console the\n  following commando’s:</p>\n<p>sudo gem install haml sudo gem install haml-edge sudo gem install compass</p>\n<p>(on Windows machine it’s almost the same but without the sudo command.)\n  check if compass is running:</p>\n<p>compass -v</p>\n<p>Now you can write your SASS (.scss) file. Create in an editor style.scss or\n  even better: start a compass project:</p>\n<p>compass create projectname</p>\n<p>This will create: - A desktop stylesheet - Print stylesheet - A\n  configuration file: config.rb Interested in BluePrint? A framework for\n  implementing CSS3? <a href=\"http://www.blueprintcss.org\" target=\"_blank\" rel=\"noopener\">http://www.blueprintcss.org</a>\n  It will automatically deploy together with the above project files. Use this\n  command:</p>\n<p>compass create projectname –using blueprint/basic</p>\n<p>To convert your SASS (development) file back to .css (production ready code)\n  just type in your console:</p>\n<p>sass –watch style.scss:style.css</p>\n<p>Or to watch the whole folder:</p>\n<p>compass watch .</p>\n<p>And on windows:</p>\n<p>C:Rubybin&gt; sass -trace D:Sassdefault.scss:D:Sassdefault.css</p>\n<p>Or to watch the whole folder:</p>\n<p>compass watch .</p>\n<p>For more info’s check these links: <a href=\"http://sass-lang.com/guide\" target=\"_blank\" rel=\"noopener\">http://sass-lang.com/</a>\n  <a href=\"http://compass-style.org\" target=\"_blank\" rel=\"noopener\">http://compass-style.org</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>I’m getting a lot of hits on this topic, on my old blog; and since I will\n  close this blog down soon; I will copy over the content, to host it here…\n  Sass = Awesome. It stands for Syntactically Awesome Stylesheets. Basically\n  it’s CSS on Redbull. Or CSS but with tricks. It’s an extension on CSS3 and\n  you will also use Compass. (that’s a SASS framework that streamlines the\n  creation of css) You will need a .scss file and you can compile this to\n  production ready css. It’s very easy to install Sass and Compass on your Mac.\n  Sass is included with HAML. To get Sass working, you’ll need an installation\n  of Ruby. On your Mac this is already done. On your Windows environment,\n  you’ll need to install Ruby via the installer: <a href=\"http://rubyinstaller.org/about/contributors/\" target=\"_blank\" rel=\"noopener\">http://rubyinstaller.org/about/contributors/</a>\n  (Make sure you will at Ruby to your class path!) After running the setup open\n  the commandline: (Windows run &gt; type: CMD) Check if ruby is installed,\n  navigate to the Ruby bin folder, and type:</p>\n<p>ruby -v</p>\n<p>If you receive a prompt with the installed version number of Ruby back, then\n  the installation went good. You can go further… Now type in your console the\n  following commando’s:</p>\n<p>sudo gem install haml sudo gem install haml-edge sudo gem install compass</p>\n<p>(on Windows machine it’s almost the same but without the sudo command.)\n  check if compass is running:</p>\n<p>compass -v</p>\n<p>Now you can write your SASS (.scss) file. Create in an editor style.scss or\n  even better: start a compass project:</p>\n<p>compass create projectname</p>\n<p>This will create: - A desktop stylesheet - Print stylesheet - A\n  configuration file: config.rb Interested in BluePrint? A framework for\n  implementing CSS3? <a href=\"http://www.blueprintcss.org\" target=\"_blank\" rel=\"noopener\">http://www.blueprintcss.org</a>\n  It will automatically deploy together with the above project files. Use this\n  command:</p>\n<p>compass create projectname –using blueprint/basic</p>\n<p>To convert your SASS (development) file back to .css (production ready code)\n  just type in your console:</p>\n<p>sass –watch style.scss:style.css</p>\n<p>Or to watch the whole folder:</p>\n<p>compass watch .</p>\n<p>And on windows:</p>\n<p>C:Rubybin&gt; sass -trace D:Sassdefault.scss:D:Sassdefault.css</p>\n<p>Or to watch the whole folder:</p>\n<p>compass watch .</p>\n<p>For more info’s check these links: <a href=\"http://sass-lang.com/guide\" target=\"_blank\" rel=\"noopener\">http://sass-lang.com/</a>\n  <a href=\"http://compass-style.org\" target=\"_blank\" rel=\"noopener\">http://compass-style.org</a></p>\n"},{"title":"Mac OSX: How to install JSHint to the commandline / Sublime Text with Node","url":"314.html","id":"314","date":"2013-01-23T14:43:45.000Z","_content":"\n**Install Node:** [http://nodejs.org/download/](http://nodejs.org/download/) Download the Mac OS X package, and install it. Test by opening up a Terminal and typing \"node -v\". It should say something like \"v0.8.11\" or higher. **Install NPM (package manager)** https://npmjs.org/\n\ncurl http://npmjs.org/install.sh | sh\n\n**Install JSHint via NPM**\n\nsudo npm -g install jshint\n\nTo have JSHint installed in Sublime, use the package control and install the following packages: [http://wbond.net/sublime\\_packages/package\\_control/installation](http://wbond.net/sublime_packages/package_control/installation) CTRL/CMD + SHIFT + P > Package Control : Install Packages > Sublime JSHINT [https://github.com/uipoet/sublime-jshint](https://github.com/uipoet/sublime-jshint) CTRL/CMD + SHIFT + P > Package Control : Install Packages > SublimeLinter [https://github.com/SublimeLinter/SublimeLinter](https://github.com/SublimeLinter/SublimeLinter) CTRL/CMD + SHIFT + P > Package Control : Install Packages > Sublime On Save Build [https://github.com/alexnj/SublimeOnSaveBuild](https://github.com/alexnj/SublimeOnSaveBuild) CTRL/CMD + SHIFT + P > Package Control: Install Packages > Detect Syntax [https://github.com/phillipkoebbe/DetectSyntax](https://github.com/phillipkoebbe/DetectSyntax)","source":"_drafts/how-tos/mac-osx-how-to-install-jshint-to-the-commandline-sublime-text-with-node.md","raw":"---\ntitle: 'Mac OSX: How to install JSHint to the commandline / Sublime Text with Node'\ntags:\n  - command line\n  - node\n  - npm\n  - setup jslint\n  - terminal\nurl: 314.html\nid: 314\ncategories:\n  - Environment\n  - Sublime Text\ndate: 2013-01-23 15:43:45\n---\n\n**Install Node:** [http://nodejs.org/download/](http://nodejs.org/download/) Download the Mac OS X package, and install it. Test by opening up a Terminal and typing \"node -v\". It should say something like \"v0.8.11\" or higher. **Install NPM (package manager)** https://npmjs.org/\n\ncurl http://npmjs.org/install.sh | sh\n\n**Install JSHint via NPM**\n\nsudo npm -g install jshint\n\nTo have JSHint installed in Sublime, use the package control and install the following packages: [http://wbond.net/sublime\\_packages/package\\_control/installation](http://wbond.net/sublime_packages/package_control/installation) CTRL/CMD + SHIFT + P > Package Control : Install Packages > Sublime JSHINT [https://github.com/uipoet/sublime-jshint](https://github.com/uipoet/sublime-jshint) CTRL/CMD + SHIFT + P > Package Control : Install Packages > SublimeLinter [https://github.com/SublimeLinter/SublimeLinter](https://github.com/SublimeLinter/SublimeLinter) CTRL/CMD + SHIFT + P > Package Control : Install Packages > Sublime On Save Build [https://github.com/alexnj/SublimeOnSaveBuild](https://github.com/alexnj/SublimeOnSaveBuild) CTRL/CMD + SHIFT + P > Package Control: Install Packages > Detect Syntax [https://github.com/phillipkoebbe/DetectSyntax](https://github.com/phillipkoebbe/DetectSyntax)","slug":"how-tos/mac-osx-how-to-install-jshint-to-the-commandline-sublime-text-with-node","published":0,"updated":"2018-11-25T12:41:15.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncu500gnkif5c0bdip79","content":"<p><strong>Install Node:</strong> <a href=\"http://nodejs.org/download/\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/download/</a>\n  Download the Mac OS X package, and install it. Test by opening up a Terminal\n  and typing “node -v”. It should say something like “v0.8.11” or higher.\n  <strong>Install NPM (package manager)</strong> <a href=\"https://npmjs.org/\" target=\"_blank\" rel=\"noopener\">https://npmjs.org/</a></p>\n<p>curl <a href=\"http://npmjs.org/install.sh\" target=\"_blank\" rel=\"noopener\">http://npmjs.org/install.sh</a> |\n  sh</p>\n<p><strong>Install JSHint via NPM</strong></p>\n<p>sudo npm -g install jshint</p>\n<p>To have JSHint installed in Sublime, use the package control and install the\n  following packages: <a href=\"http://wbond.net/sublime_packages/package_control/installation\" target=\"_blank\" rel=\"noopener\">http://wbond.net/sublime_packages/package_control/installation</a>\n  CTRL/CMD + SHIFT + P &gt; Package Control : Install Packages &gt; Sublime\n  JSHINT <a href=\"https://github.com/uipoet/sublime-jshint\" target=\"_blank\" rel=\"noopener\">https://github.com/uipoet/sublime-jshint</a>\n  CTRL/CMD + SHIFT + P &gt; Package Control : Install Packages &gt;\n  SublimeLinter <a href=\"https://github.com/SublimeLinter/SublimeLinter\" target=\"_blank\" rel=\"noopener\">https://github.com/SublimeLinter/SublimeLinter</a>\n  CTRL/CMD + SHIFT + P &gt; Package Control : Install Packages &gt; Sublime On\n  Save Build <a href=\"https://github.com/alexnj/SublimeOnSaveBuild\" target=\"_blank\" rel=\"noopener\">https://github.com/alexnj/SublimeOnSaveBuild</a>\n  CTRL/CMD + SHIFT + P &gt; Package Control: Install Packages &gt; Detect\n  Syntax <a href=\"https://github.com/phillipkoebbe/DetectSyntax\" target=\"_blank\" rel=\"noopener\">https://github.com/phillipkoebbe/DetectSyntax</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p><strong>Install Node:</strong> <a href=\"http://nodejs.org/download/\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/download/</a>\n  Download the Mac OS X package, and install it. Test by opening up a Terminal\n  and typing “node -v”. It should say something like “v0.8.11” or higher.\n  <strong>Install NPM (package manager)</strong> <a href=\"https://npmjs.org/\" target=\"_blank\" rel=\"noopener\">https://npmjs.org/</a></p>\n<p>curl <a href=\"http://npmjs.org/install.sh\" target=\"_blank\" rel=\"noopener\">http://npmjs.org/install.sh</a> |\n  sh</p>\n<p><strong>Install JSHint via NPM</strong></p>\n<p>sudo npm -g install jshint</p>\n<p>To have JSHint installed in Sublime, use the package control and install the\n  following packages: <a href=\"http://wbond.net/sublime_packages/package_control/installation\" target=\"_blank\" rel=\"noopener\">http://wbond.net/sublime_packages/package_control/installation</a>\n  CTRL/CMD + SHIFT + P &gt; Package Control : Install Packages &gt; Sublime\n  JSHINT <a href=\"https://github.com/uipoet/sublime-jshint\" target=\"_blank\" rel=\"noopener\">https://github.com/uipoet/sublime-jshint</a>\n  CTRL/CMD + SHIFT + P &gt; Package Control : Install Packages &gt;\n  SublimeLinter <a href=\"https://github.com/SublimeLinter/SublimeLinter\" target=\"_blank\" rel=\"noopener\">https://github.com/SublimeLinter/SublimeLinter</a>\n  CTRL/CMD + SHIFT + P &gt; Package Control : Install Packages &gt; Sublime On\n  Save Build <a href=\"https://github.com/alexnj/SublimeOnSaveBuild\" target=\"_blank\" rel=\"noopener\">https://github.com/alexnj/SublimeOnSaveBuild</a>\n  CTRL/CMD + SHIFT + P &gt; Package Control: Install Packages &gt; Detect\n  Syntax <a href=\"https://github.com/phillipkoebbe/DetectSyntax\" target=\"_blank\" rel=\"noopener\">https://github.com/phillipkoebbe/DetectSyntax</a></p>\n"},{"title":"Mac OS X 10.9 Mavericks (Ruby 2.0) and Sencha Cmd, how to work together","url":"396.html","id":"396","date":"2013-10-29T11:22:49.000Z","_content":"\nThe free upgrade Mavericks for Mac OS-X includes Ruby 2.0. Now Sencha Cmd version 4.0 and below don't support that Ruby version. Therefore you can't build Sencha Touch and Ext JS projects; since Sass/Compass is included in the build process and requires Ruby 1.8 or Ruby 1.9. How to solve? There are great blog posts online, such as: http://moduscreate.com/sencha-cmd-not-working-in-os-x-10-9-mavericks/ how to downgrade Ruby @ Mavericks. However there is a much easier and \"better\" way of solving this problem and that is upgrading your Sencha Cmd to the 4.0.1.x version. Currently this version is in beta; but you can get exist to it via Sencha Cmd on the command-line. Just run the following command:\n\nsencha upgrade -b\n\nIt will install 4.0.1.x beta. After the installation, restart your terminal. And go ahead and run a Sencha build!","source":"_drafts/how-tos/mac-os-x-10-9-mavericks-ruby-2-0-and-sencha-cmd-how-to-work-together.md","raw":"---\ntitle: 'Mac OS X 10.9 Mavericks (Ruby 2.0) and Sencha Cmd, how to work together'\ntags:\n  - build error\n  - mac os-x 10.9\n  - mavericks\n  - ruby 2.0\n  - Sencha CMD\n  - upgrade\nurl: 396.html\nid: 396\ncategories:\n  - Uncategorized\ndate: 2013-10-29 12:22:49\n---\n\nThe free upgrade Mavericks for Mac OS-X includes Ruby 2.0. Now Sencha Cmd version 4.0 and below don't support that Ruby version. Therefore you can't build Sencha Touch and Ext JS projects; since Sass/Compass is included in the build process and requires Ruby 1.8 or Ruby 1.9. How to solve? There are great blog posts online, such as: http://moduscreate.com/sencha-cmd-not-working-in-os-x-10-9-mavericks/ how to downgrade Ruby @ Mavericks. However there is a much easier and \"better\" way of solving this problem and that is upgrading your Sencha Cmd to the 4.0.1.x version. Currently this version is in beta; but you can get exist to it via Sencha Cmd on the command-line. Just run the following command:\n\nsencha upgrade -b\n\nIt will install 4.0.1.x beta. After the installation, restart your terminal. And go ahead and run a Sencha build!","slug":"how-tos/mac-os-x-10-9-mavericks-ruby-2-0-and-sencha-cmd-how-to-work-together","published":0,"updated":"2018-11-25T12:41:15.314Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncu700gqkif5ar3akk1h","content":"<p>The free upgrade Mavericks for Mac OS-X includes Ruby 2.0. Now Sencha Cmd\n  version 4.0 and below don’t support that Ruby version. Therefore you can’t\n  build Sencha Touch and Ext JS projects; since Sass/Compass is included in the\n  build process and requires Ruby 1.8 or Ruby 1.9. How to solve? There are\n  great blog posts online, such as: <a href=\"http://moduscreate.com/sencha-cmd-not-working-in-os-x-10-9-mavericks/\" target=\"_blank\" rel=\"noopener\">http://moduscreate.com/sencha-cmd-not-working-in-os-x-10-9-mavericks/</a>\n  how to downgrade Ruby @ Mavericks. However there is a much easier and\n  “better” way of solving this problem and that is upgrading your Sencha Cmd to\n  the 4.0.1.x version. Currently this version is in beta; but you can get exist\n  to it via Sencha Cmd on the command-line. Just run the following command:</p>\n<p>sencha upgrade -b</p>\n<p>It will install 4.0.1.x beta. After the installation, restart your terminal.\n  And go ahead and run a Sencha build!</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>The free upgrade Mavericks for Mac OS-X includes Ruby 2.0. Now Sencha Cmd\n  version 4.0 and below don’t support that Ruby version. Therefore you can’t\n  build Sencha Touch and Ext JS projects; since Sass/Compass is included in the\n  build process and requires Ruby 1.8 or Ruby 1.9. How to solve? There are\n  great blog posts online, such as: <a href=\"http://moduscreate.com/sencha-cmd-not-working-in-os-x-10-9-mavericks/\" target=\"_blank\" rel=\"noopener\">http://moduscreate.com/sencha-cmd-not-working-in-os-x-10-9-mavericks/</a>\n  how to downgrade Ruby @ Mavericks. However there is a much easier and\n  “better” way of solving this problem and that is upgrading your Sencha Cmd to\n  the 4.0.1.x version. Currently this version is in beta; but you can get exist\n  to it via Sencha Cmd on the command-line. Just run the following command:</p>\n<p>sencha upgrade -b</p>\n<p>It will install 4.0.1.x beta. After the installation, restart your terminal.\n  And go ahead and run a Sencha build!</p>\n"},{"title":"Mac OSX: Run Sublime from your terminal","url":"330.html","id":"330","date":"2013-01-23T15:59:43.000Z","_content":"\nWouldn't it be cool to navigate within your terminal to your project folder and then run sublime with the following command:\n\nsubl . \n\nIt's easy to setup... **Add the bin folder to your paths:** First open your _~/.bash_profile_ file. (it's hidden so you will need to enable hidden folders.) Add the following line:\n\nexport PATH=~/bin:$PATH\n\n**Create a symlink**\n\nsudo ln -s \"/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl\" ~/bin/subl\n\nPlease note the first path, is the path to your Sublime Text 2 app. If you moved your app to a different folder you will need to modify this line. The second path is the place where you will create your symlink. This is the ~/bin folder. Since you've added the bin folder to your classpaths; you can now easily run the **subl .** commands.","source":"_drafts/how-tos/mac-osx-run-sublime-from-your-terminal.md","raw":"---\ntitle: 'Mac OSX: Run Sublime from your terminal'\ntags:\n  - Sublime Text\n  - terminal\nurl: 330.html\nid: 330\ncategories:\n  - Environment\n  - Sublime Text\ndate: 2013-01-23 16:59:43\n---\n\nWouldn't it be cool to navigate within your terminal to your project folder and then run sublime with the following command:\n\nsubl . \n\nIt's easy to setup... **Add the bin folder to your paths:** First open your _~/.bash_profile_ file. (it's hidden so you will need to enable hidden folders.) Add the following line:\n\nexport PATH=~/bin:$PATH\n\n**Create a symlink**\n\nsudo ln -s \"/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl\" ~/bin/subl\n\nPlease note the first path, is the path to your Sublime Text 2 app. If you moved your app to a different folder you will need to modify this line. The second path is the place where you will create your symlink. This is the ~/bin folder. Since you've added the bin folder to your classpaths; you can now easily run the **subl .** commands.","slug":"how-tos/mac-osx-run-sublime-from-your-terminal","published":0,"updated":"2018-11-25T12:41:15.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncu900gvkif5uf1nnafi","content":"<p>Wouldn’t it be cool to navigate within your terminal to your project folder\n  and then run sublime with the following command:</p>\n<p>subl .</p>\n<p>It’s easy to setup… <strong>Add the bin folder to your paths:</strong> First\n  open your _~/.bash_profile_ file. (it’s hidden so you will need to enable\n  hidden folders.) Add the following line:</p>\n<p>export PATH=~/bin:$PATH</p>\n<p><strong>Create a symlink</strong></p>\n<p>sudo ln -s “/Applications/Sublime Text\n  2.app/Contents/SharedSupport/bin/subl” ~/bin/subl</p>\n<p>Please note the first path, is the path to your Sublime Text 2 app. If you\n  moved your app to a different folder you will need to modify this line. The\n  second path is the place where you will create your symlink. This is the\n  ~/bin folder. Since you’ve added the bin folder to your classpaths; you can\n  now easily run the <strong>subl .</strong> commands.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Wouldn’t it be cool to navigate within your terminal to your project folder\n  and then run sublime with the following command:</p>\n<p>subl .</p>\n<p>It’s easy to setup… <strong>Add the bin folder to your paths:</strong> First\n  open your _~/.bash_profile_ file. (it’s hidden so you will need to enable\n  hidden folders.) Add the following line:</p>\n<p>export PATH=~/bin:$PATH</p>\n<p><strong>Create a symlink</strong></p>\n<p>sudo ln -s “/Applications/Sublime Text\n  2.app/Contents/SharedSupport/bin/subl” ~/bin/subl</p>\n<p>Please note the first path, is the path to your Sublime Text 2 app. If you\n  moved your app to a different folder you will need to modify this line. The\n  second path is the place where you will create your symlink. This is the\n  ~/bin folder. Since you’ve added the bin folder to your classpaths; you can\n  now easily run the <strong>subl .</strong> commands.</p>\n"},{"title":"No sound airplay apple tv","url":"345.html","id":"345","date":"2013-04-01T17:44:01.000Z","_content":"\nProblems with playing your video's, when using Airplay Apple TV or just by playing your video's through an HDMI cable? Just restart your audio driver. Enter the following line into your terminal:\n\nsudo kill \\`ps -ax | grep 'coreaudiod' | grep 'sbin' |awk '{print $1}'\\`","source":"_drafts/how-tos/no-sound-airplay-apple-tv.md","raw":"---\ntitle: No sound airplay apple tv\ntags:\n  - apple tv\n  - audio driver\n  - hdmi\n  - no audio\nurl: 345.html\nid: 345\ncategories:\n  - Uncategorized\ndate: 2013-04-01 19:44:01\n---\n\nProblems with playing your video's, when using Airplay Apple TV or just by playing your video's through an HDMI cable? Just restart your audio driver. Enter the following line into your terminal:\n\nsudo kill \\`ps -ax | grep 'coreaudiod' | grep 'sbin' |awk '{print $1}'\\`","slug":"how-tos/no-sound-airplay-apple-tv","published":0,"updated":"2018-11-25T12:43:34.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncub00gxkif5c9j1i6it","content":"<p>Problems with playing your video’s, when using Airplay Apple TV or just by\n  playing your video’s through an HDMI cable? Just restart your audio driver.\n  Enter the following line into your terminal:</p>\n<p>sudo kill `ps -ax | grep ‘coreaudiod’ | grep ‘sbin’ |awk ‘{print $1}’`</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Problems with playing your video’s, when using Airplay Apple TV or just by\n  playing your video’s through an HDMI cable? Just restart your audio driver.\n  Enter the following line into your terminal:</p>\n<p>sudo kill `ps -ax | grep ‘coreaudiod’ | grep ‘sbin’ |awk ‘{print $1}’`</p>\n"},{"title":"Printscreen on MAC OSX","url":"41.html","id":"41","date":"2012-01-22T08:35:33.000Z","_content":"\nTo capture your screen (or part of it) on a Mac, use one of the following commands.\n\n**Entire screen:** Apple (Command) Key + Shift+3 Captures a picture of the entire desktop, which is saved on the desktop as a file called ?picture #?. This option lets you capture the whole screen. If you want just one window on your screen, you will have to edit the picture using image editing software (or use one of the other commands, instead).\n\n**Partial screen:** Apple (Command) Key + Shift+4 Allows you to use your mouse to select a specific part of your desktop for capture. When your mouse pointer turns into an ?x?, hold down the mouse button and drag to select the part of the screen you want. When you release the button, the screenshot will capture the selected part of the screen. Press Esc to release.\n\n**Selected window:** Apple (Command) Key + Shift+4 then press Spacebar  \nAllows you to select which window to capture.","source":"_drafts/how-tos/printscreen-on-macos.md","raw":"---\ntitle: Printscreen on MAC OSX\ntags:\n  - Mac OSX\nurl: 41.html\nid: 41\ncategories:\n  - Environment\ndate: 2012-01-22 09:35:33\n---\n\nTo capture your screen (or part of it) on a Mac, use one of the following commands.\n\n**Entire screen:** Apple (Command) Key + Shift+3 Captures a picture of the entire desktop, which is saved on the desktop as a file called ?picture #?. This option lets you capture the whole screen. If you want just one window on your screen, you will have to edit the picture using image editing software (or use one of the other commands, instead).\n\n**Partial screen:** Apple (Command) Key + Shift+4 Allows you to use your mouse to select a specific part of your desktop for capture. When your mouse pointer turns into an ?x?, hold down the mouse button and drag to select the part of the screen you want. When you release the button, the screenshot will capture the selected part of the screen. Press Esc to release.\n\n**Selected window:** Apple (Command) Key + Shift+4 then press Spacebar  \nAllows you to select which window to capture.","slug":"how-tos/printscreen-on-macos","published":0,"updated":"2018-11-25T12:40:47.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncud00h1kif5q9jvuxs7","content":"<p>To capture your screen (or part of it) on a Mac, use one of the following\n  commands.</p>\n<p><strong>Entire screen:</strong> Apple (Command) Key + Shift+3 Captures a\n  picture of the entire desktop, which is saved on the desktop as a file called\n  ?picture #?. This option lets you capture the whole screen. If you want just\n  one window on your screen, you will have to edit the picture using image\n  editing software (or use one of the other commands, instead).</p>\n<p><strong>Partial screen:</strong> Apple (Command) Key + Shift+4 Allows you to\n  use your mouse to select a specific part of your desktop for capture. When\n  your mouse pointer turns into an ?x?, hold down the mouse button and drag to\n  select the part of the screen you want. When you release the button, the\n  screenshot will capture the selected part of the screen. Press Esc to\n  release.</p>\n<p><strong>Selected window:</strong> Apple (Command) Key + Shift+4 then press\n  Spacebar<br>Allows you to select which window to capture.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>To capture your screen (or part of it) on a Mac, use one of the following\n  commands.</p>\n<p><strong>Entire screen:</strong> Apple (Command) Key + Shift+3 Captures a\n  picture of the entire desktop, which is saved on the desktop as a file called\n  ?picture #?. This option lets you capture the whole screen. If you want just\n  one window on your screen, you will have to edit the picture using image\n  editing software (or use one of the other commands, instead).</p>\n<p><strong>Partial screen:</strong> Apple (Command) Key + Shift+4 Allows you to\n  use your mouse to select a specific part of your desktop for capture. When\n  your mouse pointer turns into an ?x?, hold down the mouse button and drag to\n  select the part of the screen you want. When you release the button, the\n  screenshot will capture the selected part of the screen. Press Esc to\n  release.</p>\n<p><strong>Selected window:</strong> Apple (Command) Key + Shift+4 then press\n  Spacebar<br>Allows you to select which window to capture.</p>\n"},{"title":"Mac OSX error: Sauce Labs - Error fetching PAC","url":"1246.html","id":"1246","date":"2016-03-11T16:58:07.000Z","_content":"\nI'm using Sencha Test together with the Sauce Labs browser farm. In order to see all the various browsers in my Sencha Test Studio, I have to setup a Sauce Labs Connect tunnel. 1. You can download it from here: \\[https://wiki.saucelabs.com/display/DOCS/Setting+Up+Sauce+Connect\\](https://wiki.saucelabs.com/display/DOCS/Setting+Up+Sauce+Connect) 2. Extract the zip, and place the contents of the folder under this location: **/Users/username/bin/SauceLabs/sauceconnect/** 3\\. Create a new shell script, under **/Users/username/bin/SauceLabs/** called “tunnel”: `touch tunnel` 4\\. Open up this file: `open tunnel` 5\\. Populate with the following contents, substituting the login name and access key with your own. You can find this in the Sauce Labs portal ([https://saucelabs.com/beta/user-settings](https://saucelabs.com/beta/user-settings))\n\nulimit -n 8192\nsauceconnect/bin/sc -u saucelabsusername -k mykey\n\n6\\. Save the script, then make it executable using this command: `chmod +x tunnel` 7\\. Now run the script: `./tunnel` The result should be:\n\nMacBook-Pro-3:Saucelabs leeboonstra$ ./tunnel\n11 Mar 17:40:11 - Sauce Connect 4.3.13, build 1879 4494856\n11 Mar 17:40:11 - Starting up; pid 19205\n11 Mar 17:40:11 - Command line arguments: sauceconnect/bin/sc -u leeboonstra -k ****\n11 Mar 17:40:11 - Using no proxy for connecting to Sauce Labs REST API.\n11 Mar 17:40:11 - Resolving saucelabs.com to 162.222.75.243 took 16 ms.\n11 Mar 17:40:12 - Started scproxy on port 59721.\n11 Mar 17:40:12 - Please wait for 'you may start your tests' to start your tests.\n11 Mar 17:40:12 - Starting secure remote tunnel VM...\n11 Mar 17:40:17 - Secure remote tunnel VM provisioned.\n11 Mar 17:40:17 - Tunnel ID: e506b17963574528b900eba652ec6958\n11 Mar 17:40:18 - Secure remote tunnel VM is now: booting\n11 Mar 17:40:20 - Secure remote tunnel VM is now: running\n11 Mar 17:40:20 - Using no proxy for connecting to tunnel VM.\n11 Mar 17:40:20 - Resolving tunnel hostname to 162.222.75.24 took 44ms.\n11 Mar 17:40:20 - Starting Selenium listener...\n11 Mar 17:40:20 - Establishing secure TLS connection to tunnel...\n11 Mar 17:40:20 - Selenium listener started on port 4445.\n11 Mar 17:40:33 - Sauce Connect is up, you may start your tests.\n\nHowever, in my case, I received an error:\n\n11 Mar 17:30:54 - Sauce Connect 4.3.13, build 1879 4494856\n11 Mar 17:30:54 - Detected PAC URL http://wpad/wpad.dat.\n11 Mar 17:30:54 - Starting up; pid 18123\n11 Mar 17:30:54 - Command line arguments: sauceconnect/bin/sc -u leeboonstra -k ****\n11 Mar 17:30:54 - Error fetching PAC http://wpad/wpad.dat: Couldn't resolve host name.\n11 Mar 17:30:54 - Sauce Connect could not establish a connection.\n11 Mar 17:30:54 - Please check your firewall and proxy settings.\n11 Mar 17:30:54 - You can also use sc --doctor to launch Sauce Connect in diagnostic mode.\n11 Mar 17:30:54 - Goodbye.\n\nThis is how I solved it. First I need to make sure outgoing port 443, is open: `nc -v portquiz.net 443` This seems to be ok. The next thing that I need to check is my network proxy settings. Open your network settings. Click **Advanced**, **Proxies** tab. Make sure _Auto Proxy Discovery_ is **UNCHECKED**. Now try to run the tunnel again. `./tunnel` For me it worked!","source":"_drafts/how-tos/mac-osx-error-sauce-labs-error-fetching-pac.md","raw":"---\ntitle: 'Mac OSX error: Sauce Labs - Error fetching PAC'\ntags:\n  - proxy\n  - sauce labs\n  - sencha test\n  - WPAD\nurl: 1246.html\nid: 1246\ncategories:\n  - Environment\ndate: 2016-03-11 17:58:07\n---\n\nI'm using Sencha Test together with the Sauce Labs browser farm. In order to see all the various browsers in my Sencha Test Studio, I have to setup a Sauce Labs Connect tunnel. 1. You can download it from here: \\[https://wiki.saucelabs.com/display/DOCS/Setting+Up+Sauce+Connect\\](https://wiki.saucelabs.com/display/DOCS/Setting+Up+Sauce+Connect) 2. Extract the zip, and place the contents of the folder under this location: **/Users/username/bin/SauceLabs/sauceconnect/** 3\\. Create a new shell script, under **/Users/username/bin/SauceLabs/** called “tunnel”: `touch tunnel` 4\\. Open up this file: `open tunnel` 5\\. Populate with the following contents, substituting the login name and access key with your own. You can find this in the Sauce Labs portal ([https://saucelabs.com/beta/user-settings](https://saucelabs.com/beta/user-settings))\n\nulimit -n 8192\nsauceconnect/bin/sc -u saucelabsusername -k mykey\n\n6\\. Save the script, then make it executable using this command: `chmod +x tunnel` 7\\. Now run the script: `./tunnel` The result should be:\n\nMacBook-Pro-3:Saucelabs leeboonstra$ ./tunnel\n11 Mar 17:40:11 - Sauce Connect 4.3.13, build 1879 4494856\n11 Mar 17:40:11 - Starting up; pid 19205\n11 Mar 17:40:11 - Command line arguments: sauceconnect/bin/sc -u leeboonstra -k ****\n11 Mar 17:40:11 - Using no proxy for connecting to Sauce Labs REST API.\n11 Mar 17:40:11 - Resolving saucelabs.com to 162.222.75.243 took 16 ms.\n11 Mar 17:40:12 - Started scproxy on port 59721.\n11 Mar 17:40:12 - Please wait for 'you may start your tests' to start your tests.\n11 Mar 17:40:12 - Starting secure remote tunnel VM...\n11 Mar 17:40:17 - Secure remote tunnel VM provisioned.\n11 Mar 17:40:17 - Tunnel ID: e506b17963574528b900eba652ec6958\n11 Mar 17:40:18 - Secure remote tunnel VM is now: booting\n11 Mar 17:40:20 - Secure remote tunnel VM is now: running\n11 Mar 17:40:20 - Using no proxy for connecting to tunnel VM.\n11 Mar 17:40:20 - Resolving tunnel hostname to 162.222.75.24 took 44ms.\n11 Mar 17:40:20 - Starting Selenium listener...\n11 Mar 17:40:20 - Establishing secure TLS connection to tunnel...\n11 Mar 17:40:20 - Selenium listener started on port 4445.\n11 Mar 17:40:33 - Sauce Connect is up, you may start your tests.\n\nHowever, in my case, I received an error:\n\n11 Mar 17:30:54 - Sauce Connect 4.3.13, build 1879 4494856\n11 Mar 17:30:54 - Detected PAC URL http://wpad/wpad.dat.\n11 Mar 17:30:54 - Starting up; pid 18123\n11 Mar 17:30:54 - Command line arguments: sauceconnect/bin/sc -u leeboonstra -k ****\n11 Mar 17:30:54 - Error fetching PAC http://wpad/wpad.dat: Couldn't resolve host name.\n11 Mar 17:30:54 - Sauce Connect could not establish a connection.\n11 Mar 17:30:54 - Please check your firewall and proxy settings.\n11 Mar 17:30:54 - You can also use sc --doctor to launch Sauce Connect in diagnostic mode.\n11 Mar 17:30:54 - Goodbye.\n\nThis is how I solved it. First I need to make sure outgoing port 443, is open: `nc -v portquiz.net 443` This seems to be ok. The next thing that I need to check is my network proxy settings. Open your network settings. Click **Advanced**, **Proxies** tab. Make sure _Auto Proxy Discovery_ is **UNCHECKED**. Now try to run the tunnel again. `./tunnel` For me it worked!","slug":"how-tos/mac-osx-error-sauce-labs-error-fetching-pac","published":0,"updated":"2018-11-25T12:41:15.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncue00h3kif58bvexcat","content":"<p>I’m using Sencha Test together with the Sauce Labs browser farm. In order to\n  see all the various browsers in my Sencha Test Studio, I have to setup a\n  Sauce Labs Connect tunnel. 1. You can download it from here: [<a href=\"https://wiki.saucelabs.com/display/DOCS/Setting+Up+Sauce+Connect\\](https://wiki.saucelabs.com/display/DOCS/Setting+Up+Sauce+Connect)\" target=\"_blank\" rel=\"noopener\">https://wiki.saucelabs.com/display/DOCS/Setting+Up+Sauce+Connect\\](https://wiki.saucelabs.com/display/DOCS/Setting+Up+Sauce+Connect)</a>\n  2. Extract the zip, and place the contents of the folder under this location:\n  <strong>/Users/username/bin/SauceLabs/sauceconnect/</strong> 3. Create a new\n  shell script, under <strong>/Users/username/bin/SauceLabs/</strong> called\n  “tunnel”: <code>touch tunnel</code> 4. Open up this file: <code>open tunnel</code>\n  5. Populate with the following contents, substituting the login name and\n  access key with your own. You can find this in the Sauce Labs portal (<a href=\"https://saucelabs.com/beta/user-settings\" target=\"_blank\" rel=\"noopener\">https://saucelabs.com/beta/user-settings</a>)</p>\n<p>ulimit -n 8192 sauceconnect/bin/sc -u saucelabsusername -k mykey</p>\n<p>6. Save the script, then make it executable using this command: <code>chmod\n    +x tunnel</code> 7. Now run the script: <code>./tunnel</code> The result\n  should be:</p>\n<p>MacBook-Pro-3:Saucelabs leeboonstra$ ./tunnel 11 Mar 17:40:11 - Sauce\n  Connect 4.3.13, build 1879 4494856 11 Mar 17:40:11 - Starting up; pid 19205\n  11 Mar 17:40:11 - Command line arguments: sauceconnect/bin/sc -u leeboonstra\n  -k <em>**</em> 11 Mar 17:40:11 - Using no proxy for connecting to Sauce Labs\n  REST API. 11 Mar 17:40:11 - Resolving saucelabs.com to 162.222.75.243 took 16\n  ms. 11 Mar 17:40:12 - Started scproxy on port 59721. 11 Mar 17:40:12 - Please\n  wait for ‘you may start your tests’ to start your tests. 11 Mar 17:40:12 -\n  Starting secure remote tunnel VM… 11 Mar 17:40:17 - Secure remote tunnel VM\n  provisioned. 11 Mar 17:40:17 - Tunnel ID: e506b17963574528b900eba652ec6958 11\n  Mar 17:40:18 - Secure remote tunnel VM is now: booting 11 Mar 17:40:20 -\n  Secure remote tunnel VM is now: running 11 Mar 17:40:20 - Using no proxy for\n  connecting to tunnel VM. 11 Mar 17:40:20 - Resolving tunnel hostname to\n  162.222.75.24 took 44ms. 11 Mar 17:40:20 - Starting Selenium listener… 11 Mar\n  17:40:20 - Establishing secure TLS connection to tunnel… 11 Mar 17:40:20 -\n  Selenium listener started on port 4445. 11 Mar 17:40:33 - Sauce Connect is\n  up, you may start your tests.</p>\n<p>However, in my case, I received an error:</p>\n<p>11 Mar 17:30:54 - Sauce Connect 4.3.13, build 1879 4494856 11 Mar 17:30:54 -\n  Detected PAC URL <a href=\"http://wpad/wpad.dat\" target=\"_blank\" rel=\"noopener\">http://wpad/wpad.dat</a>. 11\n  Mar 17:30:54 - Starting up; pid 18123 11 Mar 17:30:54 - Command line\n  arguments: sauceconnect/bin/sc -u leeboonstra -k <em>**</em> 11 Mar 17:30:54\n  - Error fetching PAC <a href=\"http://wpad/wpad.dat\" target=\"_blank\" rel=\"noopener\">http://wpad/wpad.dat</a>:\n  Couldn’t resolve host name. 11 Mar 17:30:54 - Sauce Connect could not\n  establish a connection. 11 Mar 17:30:54 - Please check your firewall and\n  proxy settings. 11 Mar 17:30:54 - You can also use sc –doctor to launch Sauce\n  Connect in diagnostic mode. 11 Mar 17:30:54 - Goodbye.</p>\n<p>This is how I solved it. First I need to make sure outgoing port 443, is\n  open: <code>nc -v portquiz.net 443</code> This seems to be ok. The next thing\n  that I need to check is my network proxy settings. Open your network\n  settings. Click <strong>Advanced</strong>, <strong>Proxies</strong> tab. Make\n  sure <em>Auto Proxy Discovery</em> is <strong>UNCHECKED</strong>. Now try to\n  run the tunnel again. <code>./tunnel</code> For me it worked!</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>I’m using Sencha Test together with the Sauce Labs browser farm. In order to\n  see all the various browsers in my Sencha Test Studio, I have to setup a\n  Sauce Labs Connect tunnel. 1. You can download it from here: [<a href=\"https://wiki.saucelabs.com/display/DOCS/Setting+Up+Sauce+Connect\\](https://wiki.saucelabs.com/display/DOCS/Setting+Up+Sauce+Connect)\" target=\"_blank\" rel=\"noopener\">https://wiki.saucelabs.com/display/DOCS/Setting+Up+Sauce+Connect\\](https://wiki.saucelabs.com/display/DOCS/Setting+Up+Sauce+Connect)</a>\n  2. Extract the zip, and place the contents of the folder under this location:\n  <strong>/Users/username/bin/SauceLabs/sauceconnect/</strong> 3. Create a new\n  shell script, under <strong>/Users/username/bin/SauceLabs/</strong> called\n  “tunnel”: <code>touch tunnel</code> 4. Open up this file: <code>open tunnel</code>\n  5. Populate with the following contents, substituting the login name and\n  access key with your own. You can find this in the Sauce Labs portal (<a href=\"https://saucelabs.com/beta/user-settings\" target=\"_blank\" rel=\"noopener\">https://saucelabs.com/beta/user-settings</a>)</p>\n<p>ulimit -n 8192 sauceconnect/bin/sc -u saucelabsusername -k mykey</p>\n<p>6. Save the script, then make it executable using this command: <code>chmod\n    +x tunnel</code> 7. Now run the script: <code>./tunnel</code> The result\n  should be:</p>\n<p>MacBook-Pro-3:Saucelabs leeboonstra$ ./tunnel 11 Mar 17:40:11 - Sauce\n  Connect 4.3.13, build 1879 4494856 11 Mar 17:40:11 - Starting up; pid 19205\n  11 Mar 17:40:11 - Command line arguments: sauceconnect/bin/sc -u leeboonstra\n  -k <em>**</em> 11 Mar 17:40:11 - Using no proxy for connecting to Sauce Labs\n  REST API. 11 Mar 17:40:11 - Resolving saucelabs.com to 162.222.75.243 took 16\n  ms. 11 Mar 17:40:12 - Started scproxy on port 59721. 11 Mar 17:40:12 - Please\n  wait for ‘you may start your tests’ to start your tests. 11 Mar 17:40:12 -\n  Starting secure remote tunnel VM… 11 Mar 17:40:17 - Secure remote tunnel VM\n  provisioned. 11 Mar 17:40:17 - Tunnel ID: e506b17963574528b900eba652ec6958 11\n  Mar 17:40:18 - Secure remote tunnel VM is now: booting 11 Mar 17:40:20 -\n  Secure remote tunnel VM is now: running 11 Mar 17:40:20 - Using no proxy for\n  connecting to tunnel VM. 11 Mar 17:40:20 - Resolving tunnel hostname to\n  162.222.75.24 took 44ms. 11 Mar 17:40:20 - Starting Selenium listener… 11 Mar\n  17:40:20 - Establishing secure TLS connection to tunnel… 11 Mar 17:40:20 -\n  Selenium listener started on port 4445. 11 Mar 17:40:33 - Sauce Connect is\n  up, you may start your tests.</p>\n<p>However, in my case, I received an error:</p>\n<p>11 Mar 17:30:54 - Sauce Connect 4.3.13, build 1879 4494856 11 Mar 17:30:54 -\n  Detected PAC URL <a href=\"http://wpad/wpad.dat\" target=\"_blank\" rel=\"noopener\">http://wpad/wpad.dat</a>. 11\n  Mar 17:30:54 - Starting up; pid 18123 11 Mar 17:30:54 - Command line\n  arguments: sauceconnect/bin/sc -u leeboonstra -k <em>**</em> 11 Mar 17:30:54\n  - Error fetching PAC <a href=\"http://wpad/wpad.dat\" target=\"_blank\" rel=\"noopener\">http://wpad/wpad.dat</a>:\n  Couldn’t resolve host name. 11 Mar 17:30:54 - Sauce Connect could not\n  establish a connection. 11 Mar 17:30:54 - Please check your firewall and\n  proxy settings. 11 Mar 17:30:54 - You can also use sc –doctor to launch Sauce\n  Connect in diagnostic mode. 11 Mar 17:30:54 - Goodbye.</p>\n<p>This is how I solved it. First I need to make sure outgoing port 443, is\n  open: <code>nc -v portquiz.net 443</code> This seems to be ok. The next thing\n  that I need to check is my network proxy settings. Open your network\n  settings. Click <strong>Advanced</strong>, <strong>Proxies</strong> tab. Make\n  sure <em>Auto Proxy Discovery</em> is <strong>UNCHECKED</strong>. Now try to\n  run the tunnel again. <code>./tunnel</code> For me it worked!</p>\n"},{"title":"MAC OSX Create a symbolic link","url":"167.html","id":"167","date":"2012-11-19T19:18:40.000Z","_content":"\nYou have your local webserver ready, but your working project is somewhere else on your harddrive. That's a problem when you want to access this with your localhost. However it's easy to create a shortcut from your localhost directory to a new folder somewhere else. Create a symbolic link to a new directory in place of the old one. Enter the following in the Terminal application:\n\nln -s \\[path where to\\] \\[path where from\\]\n\nFor example:\n\nln -s ~/Projects/GitProjects/SomeProject /Applications/XAMMP/htdocs/SomeProject","source":"_drafts/how-tos/mac-osx-create-a-symbolic-link.md","raw":"---\ntitle: MAC OSX Create a symbolic link\ntags:\n  - environment\n  - link\n  - Localhost\n  - shortcut\nurl: 167.html\nid: 167\ncategories:\n  - Environment\ndate: 2012-11-19 20:18:40\n---\n\nYou have your local webserver ready, but your working project is somewhere else on your harddrive. That's a problem when you want to access this with your localhost. However it's easy to create a shortcut from your localhost directory to a new folder somewhere else. Create a symbolic link to a new directory in place of the old one. Enter the following in the Terminal application:\n\nln -s \\[path where to\\] \\[path where from\\]\n\nFor example:\n\nln -s ~/Projects/GitProjects/SomeProject /Applications/XAMMP/htdocs/SomeProject","slug":"how-tos/mac-osx-create-a-symbolic-link","published":0,"updated":"2018-11-25T12:41:15.314Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncug00h7kif5ropwwemh","content":"<p>You have your local webserver ready, but your working project is somewhere\n  else on your harddrive. That’s a problem when you want to access this with\n  your localhost. However it’s easy to create a shortcut from your localhost\n  directory to a new folder somewhere else. Create a symbolic link to a new\n  directory in place of the old one. Enter the following in the Terminal\n  application:</p>\n<p>ln -s [path where to] [path where from]</p>\n<p>For example:</p>\n<p>ln -s ~/Projects/GitProjects/SomeProject\n  /Applications/XAMMP/htdocs/SomeProject</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>You have your local webserver ready, but your working project is somewhere\n  else on your harddrive. That’s a problem when you want to access this with\n  your localhost. However it’s easy to create a shortcut from your localhost\n  directory to a new folder somewhere else. Create a symbolic link to a new\n  directory in place of the old one. Enter the following in the Terminal\n  application:</p>\n<p>ln -s [path where to] [path where from]</p>\n<p>For example:</p>\n<p>ln -s ~/Projects/GitProjects/SomeProject\n  /Applications/XAMMP/htdocs/SomeProject</p>\n"},{"title":"Remove all .SVN folders command","url":"43.html","id":"43","date":"2012-01-11T09:22:00.000Z","_content":"\nEnter in your terminal console the following line to remove all .svn folders:\n\nrm -rf 'find . -type d -name .svn'","source":"_drafts/how-tos/remove-all-svn-folders-via-command-line.md","raw":"---\ntitle: Remove all .SVN folders command\ntags:\n  - SVN\nurl: 43.html\nid: 43\ncategories:\n  - SVN\ndate: 2012-01-11 10:22:00\n---\n\nEnter in your terminal console the following line to remove all .svn folders:\n\nrm -rf 'find . -type d -name .svn'","slug":"how-tos/remove-all-svn-folders-via-command-line","published":0,"updated":"2018-11-25T12:44:06.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncuh00h9kif5v854vyhj","content":"<p>Enter in your terminal console the following line to remove all .svn\n  folders:</p>\n<p>rm -rf ‘find . -type d -name .svn’</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Enter in your terminal console the following line to remove all .svn\n  folders:</p>\n<p>rm -rf ‘find . -type d -name .svn’</p>\n"},{"title":"Removing a local Web SQL db, LocalStorage or AppCache in Google Chrome","url":"351.html","id":"351","date":"2013-05-14T16:27:41.000Z","_content":"\nIt is a huge bummer that you can not delete a local database from your Google Chrome Dev Tools don't you think? Well there is easy solution to do this. Open Google Chrome and enter the following url: [chrome://settings/cookies/](//settings/cookies/). Here you can search for any particular site or remove all locally stored data. In my case I just searched for _localhost_, and I get an exact overview of all my Cookies, LocalStorage and Web SQL databases... Awesome, I can double click on it, and it will ask me to remove the database. Click on the **remove** button and it is gone! What about Application Cache? How can I remove that? Use the following url and press the **remove** link for the corresponding site. [chrome://appcache-internals/](//appcache-internals/)","source":"_drafts/how-tos/removing-a-local-web-sql-database-in-google-chrome.md","raw":"---\ntitle: 'Removing a local Web SQL db, LocalStorage or AppCache in Google Chrome'\nurl: 351.html\nid: 351\ncategories:\n  - Environment\n  - Sencha Touch\ndate: 2013-05-14 18:27:41\ntags:\n---\n\nIt is a huge bummer that you can not delete a local database from your Google Chrome Dev Tools don't you think? Well there is easy solution to do this. Open Google Chrome and enter the following url: [chrome://settings/cookies/](//settings/cookies/). Here you can search for any particular site or remove all locally stored data. In my case I just searched for _localhost_, and I get an exact overview of all my Cookies, LocalStorage and Web SQL databases... Awesome, I can double click on it, and it will ask me to remove the database. Click on the **remove** button and it is gone! What about Application Cache? How can I remove that? Use the following url and press the **remove** link for the corresponding site. [chrome://appcache-internals/](//appcache-internals/)","slug":"how-tos/removing-a-local-web-sql-database-in-google-chrome","published":0,"updated":"2018-11-25T12:59:53.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncui00hdkif5izwjbbnz","content":"<p>It is a huge bummer that you can not delete a local database from your\n  Google Chrome Dev Tools don’t you think? Well there is easy solution to do\n  this. Open Google Chrome and enter the following url: <a href=\"//settings/cookies/\">chrome://settings/cookies/</a>.\n  Here you can search for any particular site or remove all locally stored\n  data. In my case I just searched for <em>localhost</em>, and I get an exact\n  overview of all my Cookies, LocalStorage and Web SQL databases… Awesome, I\n  can double click on it, and it will ask me to remove the database. Click on\n  the <strong>remove</strong> button and it is gone! What about Application\n  Cache? How can I remove that? Use the following url and press the <strong>remove</strong>\n  link for the corresponding site. <a href=\"//appcache-internals/\">chrome://appcache-internals/</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>It is a huge bummer that you can not delete a local database from your\n  Google Chrome Dev Tools don’t you think? Well there is easy solution to do\n  this. Open Google Chrome and enter the following url: <a href=\"//settings/cookies/\">chrome://settings/cookies/</a>.\n  Here you can search for any particular site or remove all locally stored\n  data. In my case I just searched for <em>localhost</em>, and I get an exact\n  overview of all my Cookies, LocalStorage and Web SQL databases… Awesome, I\n  can double click on it, and it will ask me to remove the database. Click on\n  the <strong>remove</strong> button and it is gone! What about Application\n  Cache? How can I remove that? Use the following url and press the <strong>remove</strong>\n  link for the corresponding site. <a href=\"//appcache-internals/\">chrome://appcache-internals/</a></p>\n"},{"title":"Reverse Engineer the Sencha FontAwesome package to get an overview of icons.","url":"1403.html","id":"1403","date":"2016-07-06T14:00:14.000Z","_content":"\nExt JS 6, ships with a copy of the font-awesome icon font. Remember the Wingdings* Font from back in the days? Icon Fonts are somehow similar like that. An icon font is a (fontface) font, and every (unicode) character maps to an icon. Icon fonts are great, because they are all vectors. Therefore you can easily change the color or size, and they will always have best quality. Perfect on retina displays. You no longer need to open Photoshop to modify the icons. Because it’s text, you can add shades, change colors, backgrounds and sizes all with CSS code. *(You just can’t make 3D icons / multi color icons, because it’s text.)*. Also, icon fonts won’t spam your screenreaders. ![FontAweSome](https://www.leeboonstra.com/wp-content/uploads/2016/07/Screen-Shot-2016-07-01-at-09.24.08.png) In Ext JS 6, font-awesome icon font is a code package, which is included in the SDK, and free to use. It’s version 4.4. which includes 585 vector icons! You can use font packages, by enabling font awesome in your \\*\\*app.json\\*\\* file: (when you generated the application with Sencha Cmd, this should be already there.) \"requires\": \\[ \"font-awesome\" \\], Now you can start using the font, by adding the \\`iconCls\\` property to your component. For example: ``` { xtype: ‘button’, iconCls: ‘x-fa fa-globe’ } ``` The \\`iconCls\\` is supported on: buttons, panel titles, menu’s, tree node items, grid actions, separators and ux status bars. (That probably covers most of the places you want an icon for, but if you want icons in for example templates, you can use the below trick as well, and set icons manually.) The big question is, how do I know, which icons are included out of the box? The easy answer is, you can use the font awesome cheatsheet: \\[http://fontawesome.io/cheatsheet/\\](http://fontawesome.io/cheatsheet/) Everything 4.4 and below will be available. But the best answer is, you can reverse engineer this from the package yourself! Browse to: \\*\\*myapp/ext/packages/font-awesome/sass/etc/\\*\\* ![Location](http://146.148.113.87/wp-content/uploads/2016/07/Screen-Shot-2016-07-01-at-09.25.12.png) Let’s first dive into: \\*\\*\\_variables.scss\\*\\*. This Sass file, shows the font version number, and the CSS prefix. For Ext JS 6.2 this is: ``` $fa-version: \"4.4.0\" !default; $fa-css-prefix: fa !default; ``` The \\*\\*\\_variables.scss\\*\\* file sets all the used variable names for every icon. However, we still don’t know how the icon will look like. Therefore, open your browser and use the Icomoon font app: \\[https://icomoon.io/app/#/select\\](https://icomoon.io/app/#/select) Click the \\*Import Font\\* button. Now browse to \\*\\*myapp/ext/packages/font-awesome/resources/fonts/\\*\\* and select: \\*\\*fontawesome-webfont.svg\\*\\* This will import all the font-awesome icons, which are in Ext JS. Within the Icomoon app, select all the font-awesome icons. (Select the first, hold shift and select the last.) Then press the \\*Generate Font\\* button in the bottom of the app. You will now see an overview of all the icons with its used unicode. (If you want, you can download the font here, so it also saves an HTML file, with this overview.) Ok, so now we know how the fonts look like, and what it’s unicode is. I could now, look into this list, pick the icon that I want. Copy the unicode, and lookup the variable name in \\*\\*\\_variables.scss\\*\\*. For example, the icon with the double music notes, has the title: uniF001, so unicode: *\\\\f001*, which matches Sass variable name: `$fa-var-music`. Once you know the variable name, copy it and open \\*\\*\\_icons.scss\\*\\*. Search in this file for the variable name, and it will reveal to you. For the `$fa-var-music` variable, it contains this Sass line: ``` .#{$fa-css-prefix}-music:before { content: $fa-var-music !important; } ``` Which will be compiled as the following CSS: ``` .fa-music:before { content: $fa-var-music !important; } ``` As you can see the CSS class fa-music, will create another node in your HTML DOM, before the element that has this CSS class, with the \\*content\\* that contains the unicode of the music note icon. \\`iconCls\\`, just adds this node in the DOM tree. How does it know how to style the icon (for example, the color and its font-size?) That’s what the class `.x-fa` is for. Note: The \\*x-fa\\* class should be used in Ext JS applications instead of \\*fa\\* which is the class you get if you download the font package from font-awesome.com itself. The \\*fa\\* class sets some properties that may collide with the Sencha theme properties, whereas \\*x-fa\\* sets only the font-family: ``` .#{$prefix}fa:before { font-family: FontAwesome !important; } ``` The default font-size and colors are set in \\*\\*_variables.scss\\*\\*: ``` $fa-font-path: \"../fonts\" !default; $fa-font-size-base: 14px !default; $fa-line-height-base: 1 !default; $fa-version: \"4.4.0\" !default; $fa-border-color: #eee !default; $fa-inverse: #fff !default; $fa-li-width: (30em / 14) !default; ``` For the rest it’s up to you to style the icons as you like. You can do this in your theme package or app stylesheet. *The Wingdings font was developed by Microsoft in 1990, it is actually a dingbat (a printer character used for typesetting) font. None of the characters were mapped to unicode back then, and is only available on (legacy) Microsoft platforms, therefore you should not use Wingdings for the web. ![Cartoon](http://146.148.113.87/wp-content/uploads/2016/07/funny-icons-500x500.jpg)","source":"_drafts/how-tos/reverse-engineer-the-sencha-fontawesome-package-to-get-an-overview-of-icons.md","raw":"---\ntitle: Reverse Engineer the Sencha FontAwesome package to get an overview of icons.\ntags:\n  - font awesome\n  - fonts\n  - icon font\n  - out of the box icons\n  - Sencha\n  - Theming\n  - which icons\nurl: 1403.html\nid: 1403\ncategories:\n  - CSS\n  - Sass\ndate: 2016-07-06 16:00:14\n---\n\nExt JS 6, ships with a copy of the font-awesome icon font. Remember the Wingdings* Font from back in the days? Icon Fonts are somehow similar like that. An icon font is a (fontface) font, and every (unicode) character maps to an icon. Icon fonts are great, because they are all vectors. Therefore you can easily change the color or size, and they will always have best quality. Perfect on retina displays. You no longer need to open Photoshop to modify the icons. Because it’s text, you can add shades, change colors, backgrounds and sizes all with CSS code. *(You just can’t make 3D icons / multi color icons, because it’s text.)*. Also, icon fonts won’t spam your screenreaders. ![FontAweSome](https://www.leeboonstra.com/wp-content/uploads/2016/07/Screen-Shot-2016-07-01-at-09.24.08.png) In Ext JS 6, font-awesome icon font is a code package, which is included in the SDK, and free to use. It’s version 4.4. which includes 585 vector icons! You can use font packages, by enabling font awesome in your \\*\\*app.json\\*\\* file: (when you generated the application with Sencha Cmd, this should be already there.) \"requires\": \\[ \"font-awesome\" \\], Now you can start using the font, by adding the \\`iconCls\\` property to your component. For example: ``` { xtype: ‘button’, iconCls: ‘x-fa fa-globe’ } ``` The \\`iconCls\\` is supported on: buttons, panel titles, menu’s, tree node items, grid actions, separators and ux status bars. (That probably covers most of the places you want an icon for, but if you want icons in for example templates, you can use the below trick as well, and set icons manually.) The big question is, how do I know, which icons are included out of the box? The easy answer is, you can use the font awesome cheatsheet: \\[http://fontawesome.io/cheatsheet/\\](http://fontawesome.io/cheatsheet/) Everything 4.4 and below will be available. But the best answer is, you can reverse engineer this from the package yourself! Browse to: \\*\\*myapp/ext/packages/font-awesome/sass/etc/\\*\\* ![Location](http://146.148.113.87/wp-content/uploads/2016/07/Screen-Shot-2016-07-01-at-09.25.12.png) Let’s first dive into: \\*\\*\\_variables.scss\\*\\*. This Sass file, shows the font version number, and the CSS prefix. For Ext JS 6.2 this is: ``` $fa-version: \"4.4.0\" !default; $fa-css-prefix: fa !default; ``` The \\*\\*\\_variables.scss\\*\\* file sets all the used variable names for every icon. However, we still don’t know how the icon will look like. Therefore, open your browser and use the Icomoon font app: \\[https://icomoon.io/app/#/select\\](https://icomoon.io/app/#/select) Click the \\*Import Font\\* button. Now browse to \\*\\*myapp/ext/packages/font-awesome/resources/fonts/\\*\\* and select: \\*\\*fontawesome-webfont.svg\\*\\* This will import all the font-awesome icons, which are in Ext JS. Within the Icomoon app, select all the font-awesome icons. (Select the first, hold shift and select the last.) Then press the \\*Generate Font\\* button in the bottom of the app. You will now see an overview of all the icons with its used unicode. (If you want, you can download the font here, so it also saves an HTML file, with this overview.) Ok, so now we know how the fonts look like, and what it’s unicode is. I could now, look into this list, pick the icon that I want. Copy the unicode, and lookup the variable name in \\*\\*\\_variables.scss\\*\\*. For example, the icon with the double music notes, has the title: uniF001, so unicode: *\\\\f001*, which matches Sass variable name: `$fa-var-music`. Once you know the variable name, copy it and open \\*\\*\\_icons.scss\\*\\*. Search in this file for the variable name, and it will reveal to you. For the `$fa-var-music` variable, it contains this Sass line: ``` .#{$fa-css-prefix}-music:before { content: $fa-var-music !important; } ``` Which will be compiled as the following CSS: ``` .fa-music:before { content: $fa-var-music !important; } ``` As you can see the CSS class fa-music, will create another node in your HTML DOM, before the element that has this CSS class, with the \\*content\\* that contains the unicode of the music note icon. \\`iconCls\\`, just adds this node in the DOM tree. How does it know how to style the icon (for example, the color and its font-size?) That’s what the class `.x-fa` is for. Note: The \\*x-fa\\* class should be used in Ext JS applications instead of \\*fa\\* which is the class you get if you download the font package from font-awesome.com itself. The \\*fa\\* class sets some properties that may collide with the Sencha theme properties, whereas \\*x-fa\\* sets only the font-family: ``` .#{$prefix}fa:before { font-family: FontAwesome !important; } ``` The default font-size and colors are set in \\*\\*_variables.scss\\*\\*: ``` $fa-font-path: \"../fonts\" !default; $fa-font-size-base: 14px !default; $fa-line-height-base: 1 !default; $fa-version: \"4.4.0\" !default; $fa-border-color: #eee !default; $fa-inverse: #fff !default; $fa-li-width: (30em / 14) !default; ``` For the rest it’s up to you to style the icons as you like. You can do this in your theme package or app stylesheet. *The Wingdings font was developed by Microsoft in 1990, it is actually a dingbat (a printer character used for typesetting) font. None of the characters were mapped to unicode back then, and is only available on (legacy) Microsoft platforms, therefore you should not use Wingdings for the web. ![Cartoon](http://146.148.113.87/wp-content/uploads/2016/07/funny-icons-500x500.jpg)","slug":"how-tos/reverse-engineer-the-sencha-fontawesome-package-to-get-an-overview-of-icons","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncuj00hgkif54yqbjar2","content":"<p>Ext JS 6, ships with a copy of the font-awesome icon font. Remember the\n  Wingdings<em> Font from back in the days? Icon Fonts are somehow similar like\n    that. An icon font is a (fontface) font, and every (unicode) character maps\n    to an icon. Icon fonts are great, because they are all vectors. Therefore\n    you can easily change the color or size, and they will always have best\n    quality. Perfect on retina displays. You no longer need to open Photoshop\n    to modify the icons. Because it’s text, you can add shades, change colors,\n    backgrounds and sizes all with CSS code. </em>(You just can’t make 3D icons\n  / multi color icons, because it’s text.)<em>. Also, icon fonts won’t spam\n    your screenreaders. <img src=\"https://www.leeboonstra.com/wp-content/uploads/2016/07/Screen-Shot-2016-07-01-at-09.24.08.png\" alt=\"FontAweSome\">\n    In Ext JS 6, font-awesome icon font is a code package, which is included in\n    the SDK, and free to use. It’s version 4.4. which includes 585 vector\n    icons! You can use font packages, by enabling font awesome in your \\</em>*app.json**\n  file: (when you generated the application with Sencha Cmd, this should be\n  already there.) “requires”: [ “font-awesome” ], Now you can start using the\n  font, by adding the `iconCls` property to your component. For example: <code>{\n    xtype: ‘button’, iconCls: ‘x-fa fa-globe’ }</code> The `iconCls` is\n  supported on: buttons, panel titles, menu’s, tree node items, grid actions,\n  separators and ux status bars. (That probably covers most of the places you\n  want an icon for, but if you want icons in for example templates, you can use\n  the below trick as well, and set icons manually.) The big question is, how do\n  I know, which icons are included out of the box? The easy answer is, you can\n  use the font awesome cheatsheet: [<a href=\"http://fontawesome.io/cheatsheet/\\](http://fontawesome.io/cheatsheet/)\" target=\"_blank\" rel=\"noopener\">http://fontawesome.io/cheatsheet/\\](http://fontawesome.io/cheatsheet/)</a>\n  Everything 4.4 and below will be available. But the best answer is, you can\n  reverse engineer this from the package yourself! Browse to:\n  **myapp/ext/packages/font-awesome/sass/etc/** <img src=\"http://146.148.113.87/wp-content/uploads/2016/07/Screen-Shot-2016-07-01-at-09.25.12.png\" alt=\"Location\">\n  Let’s first dive into: **_variables.scss**. This Sass file, shows the font\n  version number, and the CSS prefix. For Ext JS 6.2 this is: <code>$fa-version:\n    &quot;4.4.0&quot; !default; $fa-css-prefix: fa !default;</code> The\n  **_variables.scss** file sets all the used variable names for every icon.\n  However, we still don’t know how the icon will look like. Therefore, open\n  your browser and use the Icomoon font app: [<a href=\"https://icomoon.io/app/#/select\\](https://icomoon.io/app/#/select)\" target=\"_blank\" rel=\"noopener\">https://icomoon.io/app/#/select\\](https://icomoon.io/app/#/select)</a>\n  Click the *Import Font* button. Now browse to\n  **myapp/ext/packages/font-awesome/resources/fonts/** and select:\n  **fontawesome-webfont.svg** This will import all the font-awesome icons,\n  which are in Ext JS. Within the Icomoon app, select all the font-awesome\n  icons. (Select the first, hold shift and select the last.) Then press the\n  *Generate Font* button in the bottom of the app. You will now see an overview\n  of all the icons with its used unicode. (If you want, you can download the\n  font here, so it also saves an HTML file, with this overview.) Ok, so now we\n  know how the fonts look like, and what it’s unicode is. I could now, look\n  into this list, pick the icon that I want. Copy the unicode, and lookup the\n  variable name in **_variables.scss**. For example, the icon with the double\n  music notes, has the title: uniF001, so unicode: <em>\\f001</em>, which\n  matches Sass variable name: <code>$fa-var-music</code>. Once you know the\n  variable name, copy it and open **_icons.scss**. Search in this file for the\n  variable name, and it will reveal to you. For the <code>$fa-var-music</code>\n  variable, it contains this Sass line: <code>.#{$fa-css-prefix}-music:before {\n    content: $fa-var-music !important; }</code> Which will be compiled as the\n  following CSS: <code>.fa-music:before { content: $fa-var-music !important; }</code>\n  As you can see the CSS class fa-music, will create another node in your HTML\n  DOM, before the element that has this CSS class, with the *content* that\n  contains the unicode of the music note icon. `iconCls`, just adds this node\n  in the DOM tree. How does it know how to style the icon (for example, the\n  color and its font-size?) That’s what the class <code>.x-fa</code> is for.\n  Note: The *x-fa* class should be used in Ext JS applications instead of *fa*\n  which is the class you get if you download the font package from\n  font-awesome.com itself. The *fa* class sets some properties that may collide\n  with the Sencha theme properties, whereas *x-fa* sets only the font-family:\n  <code>.#{$prefix}fa:before { font-family: FontAwesome !important; }</code>\n  The default font-size and colors are set in **_variables.scss**: <code>$fa-font-path:\n    &quot;../fonts&quot; !default; $fa-font-size-base: 14px !default;\n    $fa-line-height-base: 1 !default; $fa-version: &quot;4.4.0&quot; !default;\n    $fa-border-color: #eee !default; $fa-inverse: #fff !default; $fa-li-width:\n    (30em / 14) !default;</code> For the rest it’s up to you to style the icons\n  as you like. You can do this in your theme package or app stylesheet. *The\n  Wingdings font was developed by Microsoft in 1990, it is actually a dingbat\n  (a printer character used for typesetting) font. None of the characters were\n  mapped to unicode back then, and is only available on (legacy) Microsoft\n  platforms, therefore you should not use Wingdings for the web. <img src=\"http://146.148.113.87/wp-content/uploads/2016/07/funny-icons-500x500.jpg\" alt=\"Cartoon\"></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Ext JS 6, ships with a copy of the font-awesome icon font. Remember the\n  Wingdings<em> Font from back in the days? Icon Fonts are somehow similar like\n    that. An icon font is a (fontface) font, and every (unicode) character maps\n    to an icon. Icon fonts are great, because they are all vectors. Therefore\n    you can easily change the color or size, and they will always have best\n    quality. Perfect on retina displays. You no longer need to open Photoshop\n    to modify the icons. Because it’s text, you can add shades, change colors,\n    backgrounds and sizes all with CSS code. </em>(You just can’t make 3D icons\n  / multi color icons, because it’s text.)<em>. Also, icon fonts won’t spam\n    your screenreaders. <img src=\"https://www.leeboonstra.com/wp-content/uploads/2016/07/Screen-Shot-2016-07-01-at-09.24.08.png\" alt=\"FontAweSome\">\n    In Ext JS 6, font-awesome icon font is a code package, which is included in\n    the SDK, and free to use. It’s version 4.4. which includes 585 vector\n    icons! You can use font packages, by enabling font awesome in your \\</em>*app.json**\n  file: (when you generated the application with Sencha Cmd, this should be\n  already there.) “requires”: [ “font-awesome” ], Now you can start using the\n  font, by adding the `iconCls` property to your component. For example: <code>{\n    xtype: ‘button’, iconCls: ‘x-fa fa-globe’ }</code> The `iconCls` is\n  supported on: buttons, panel titles, menu’s, tree node items, grid actions,\n  separators and ux status bars. (That probably covers most of the places you\n  want an icon for, but if you want icons in for example templates, you can use\n  the below trick as well, and set icons manually.) The big question is, how do\n  I know, which icons are included out of the box? The easy answer is, you can\n  use the font awesome cheatsheet: [<a href=\"http://fontawesome.io/cheatsheet/\\](http://fontawesome.io/cheatsheet/)\" target=\"_blank\" rel=\"noopener\">http://fontawesome.io/cheatsheet/\\](http://fontawesome.io/cheatsheet/)</a>\n  Everything 4.4 and below will be available. But the best answer is, you can\n  reverse engineer this from the package yourself! Browse to:\n  **myapp/ext/packages/font-awesome/sass/etc/** <img src=\"http://146.148.113.87/wp-content/uploads/2016/07/Screen-Shot-2016-07-01-at-09.25.12.png\" alt=\"Location\">\n  Let’s first dive into: **_variables.scss**. This Sass file, shows the font\n  version number, and the CSS prefix. For Ext JS 6.2 this is: <code>$fa-version:\n    &quot;4.4.0&quot; !default; $fa-css-prefix: fa !default;</code> The\n  **_variables.scss** file sets all the used variable names for every icon.\n  However, we still don’t know how the icon will look like. Therefore, open\n  your browser and use the Icomoon font app: [<a href=\"https://icomoon.io/app/#/select\\](https://icomoon.io/app/#/select)\" target=\"_blank\" rel=\"noopener\">https://icomoon.io/app/#/select\\](https://icomoon.io/app/#/select)</a>\n  Click the *Import Font* button. Now browse to\n  **myapp/ext/packages/font-awesome/resources/fonts/** and select:\n  **fontawesome-webfont.svg** This will import all the font-awesome icons,\n  which are in Ext JS. Within the Icomoon app, select all the font-awesome\n  icons. (Select the first, hold shift and select the last.) Then press the\n  *Generate Font* button in the bottom of the app. You will now see an overview\n  of all the icons with its used unicode. (If you want, you can download the\n  font here, so it also saves an HTML file, with this overview.) Ok, so now we\n  know how the fonts look like, and what it’s unicode is. I could now, look\n  into this list, pick the icon that I want. Copy the unicode, and lookup the\n  variable name in **_variables.scss**. For example, the icon with the double\n  music notes, has the title: uniF001, so unicode: <em>\\f001</em>, which\n  matches Sass variable name: <code>$fa-var-music</code>. Once you know the\n  variable name, copy it and open **_icons.scss**. Search in this file for the\n  variable name, and it will reveal to you. For the <code>$fa-var-music</code>\n  variable, it contains this Sass line: <code>.#{$fa-css-prefix}-music:before {\n    content: $fa-var-music !important; }</code> Which will be compiled as the\n  following CSS: <code>.fa-music:before { content: $fa-var-music !important; }</code>\n  As you can see the CSS class fa-music, will create another node in your HTML\n  DOM, before the element that has this CSS class, with the *content* that\n  contains the unicode of the music note icon. `iconCls`, just adds this node\n  in the DOM tree. How does it know how to style the icon (for example, the\n  color and its font-size?) That’s what the class <code>.x-fa</code> is for.\n  Note: The *x-fa* class should be used in Ext JS applications instead of *fa*\n  which is the class you get if you download the font package from\n  font-awesome.com itself. The *fa* class sets some properties that may collide\n  with the Sencha theme properties, whereas *x-fa* sets only the font-family:\n  <code>.#{$prefix}fa:before { font-family: FontAwesome !important; }</code>\n  The default font-size and colors are set in **_variables.scss**: <code>$fa-font-path:\n    &quot;../fonts&quot; !default; $fa-font-size-base: 14px !default;\n    $fa-line-height-base: 1 !default; $fa-version: &quot;4.4.0&quot; !default;\n    $fa-border-color: #eee !default; $fa-inverse: #fff !default; $fa-li-width:\n    (30em / 14) !default;</code> For the rest it’s up to you to style the icons\n  as you like. You can do this in your theme package or app stylesheet. *The\n  Wingdings font was developed by Microsoft in 1990, it is actually a dingbat\n  (a printer character used for typesetting) font. None of the characters were\n  mapped to unicode back then, and is only available on (legacy) Microsoft\n  platforms, therefore you should not use Wingdings for the web. <img src=\"http://146.148.113.87/wp-content/uploads/2016/07/funny-icons-500x500.jpg\" alt=\"Cartoon\"></p>\n"},{"title":"Projects in Sublime Text 2","url":"321.html","id":"321","date":"2013-01-23T15:05:22.000Z","_content":"\nWorking with projects in Sublime Text 2 is less straightforward compared to any other editor or IDE. Though it's easy to setup: 1. Open Sublime 2. File > Open (select project folder) 2. Project > Add folder to project 3. Select project folder and press ok. 4. Project > Save project as 2 files will be created: _untitled.sublime-project_ & _untitled.sublime-workspace_ By default the sidebar view is hidden. To enable the sidebar and view all open files: **View > Sidebar > Show Sidebar** Next time you can open your project with: **Project > Open Project > _untitled.sublime-project_** The _untitled.sublime-project_ & _untitled.sublime-workspace_ files allow you to make project/workspace specific configurations to Sublime. You define multiple folder paths as well as specify folders and files you want to exclude from view. For example:\n\n{\n    \"folders\":\n    \\[\n        {\n            \"path\": \"wwwroot\",\n            \"folder\\_exclude\\_patterns\": \\[\"images\">\n        },\n        {\n            \"path\": \"c:wwwrootproject1assets\",\n            \"name\": \"Project 1\",\n            \"file\\_exclude\\_patterns\": \\[\"*.php\">\n        }\n    \\],\n    \"settings\":\n    {\n        \"tab_size\": 8\n    }\n }","source":"_drafts/how-tos/projects-in-sublime-text-2.md","raw":"---\ntitle: Projects in Sublime Text 2\ntags:\n  - projects\n  - sublime\nurl: 321.html\nid: 321\ncategories:\n  - Environment\n  - Sublime Text\ndate: 2013-01-23 16:05:22\n---\n\nWorking with projects in Sublime Text 2 is less straightforward compared to any other editor or IDE. Though it's easy to setup: 1. Open Sublime 2. File > Open (select project folder) 2. Project > Add folder to project 3. Select project folder and press ok. 4. Project > Save project as 2 files will be created: _untitled.sublime-project_ & _untitled.sublime-workspace_ By default the sidebar view is hidden. To enable the sidebar and view all open files: **View > Sidebar > Show Sidebar** Next time you can open your project with: **Project > Open Project > _untitled.sublime-project_** The _untitled.sublime-project_ & _untitled.sublime-workspace_ files allow you to make project/workspace specific configurations to Sublime. You define multiple folder paths as well as specify folders and files you want to exclude from view. For example:\n\n{\n    \"folders\":\n    \\[\n        {\n            \"path\": \"wwwroot\",\n            \"folder\\_exclude\\_patterns\": \\[\"images\">\n        },\n        {\n            \"path\": \"c:wwwrootproject1assets\",\n            \"name\": \"Project 1\",\n            \"file\\_exclude\\_patterns\": \\[\"*.php\">\n        }\n    \\],\n    \"settings\":\n    {\n        \"tab_size\": 8\n    }\n }","slug":"how-tos/projects-in-sublime-text-2","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncuk00hkkif5m8zsz1u7","content":"<p>Working with projects in Sublime Text 2 is less straightforward compared to\n  any other editor or IDE. Though it’s easy to setup: 1. Open Sublime 2. File\n  &gt; Open (select project folder) 2. Project &gt; Add folder to project 3.\n  Select project folder and press ok. 4. Project &gt; Save project as 2 files\n  will be created: <em>untitled.sublime-project</em> &amp; <em>untitled.sublime-workspace</em>\n  By default the sidebar view is hidden. To enable the sidebar and view all\n  open files: <strong>View &gt; Sidebar &gt; Show Sidebar</strong> Next time\n  you can open your project with: <strong>Project &gt; Open Project &gt; <em>untitled.sublime-project</em></strong>\n  The <em>untitled.sublime-project</em> &amp; <em>untitled.sublime-workspace</em>\n  files allow you to make project/workspace specific configurations to Sublime.\n  You define multiple folder paths as well as specify folders and files you\n  want to exclude from view. For example:</p>\n<p>{ “folders”: [ { “path”: “wwwroot”, “folder_exclude_patterns”: [“images”&gt;\n  }, { “path”: “c:wwwrootproject1assets”, “name”: “Project 1”,\n  “file_exclude_patterns”: [“*.php”&gt; } ], “settings”: { “tab_size”: 8 } }</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Working with projects in Sublime Text 2 is less straightforward compared to\n  any other editor or IDE. Though it’s easy to setup: 1. Open Sublime 2. File\n  &gt; Open (select project folder) 2. Project &gt; Add folder to project 3.\n  Select project folder and press ok. 4. Project &gt; Save project as 2 files\n  will be created: <em>untitled.sublime-project</em> &amp; <em>untitled.sublime-workspace</em>\n  By default the sidebar view is hidden. To enable the sidebar and view all\n  open files: <strong>View &gt; Sidebar &gt; Show Sidebar</strong> Next time\n  you can open your project with: <strong>Project &gt; Open Project &gt; <em>untitled.sublime-project</em></strong>\n  The <em>untitled.sublime-project</em> &amp; <em>untitled.sublime-workspace</em>\n  files allow you to make project/workspace specific configurations to Sublime.\n  You define multiple folder paths as well as specify folders and files you\n  want to exclude from view. For example:</p>\n<p>{ “folders”: [ { “path”: “wwwroot”, “folder_exclude_patterns”: [“images”&gt;\n  }, { “path”: “c:wwwrootproject1assets”, “name”: “Project 1”,\n  “file_exclude_patterns”: [“*.php”&gt; } ], “settings”: { “tab_size”: 8 } }</p>\n"},{"title":"Sencha Architect crashes? Can't start Sencha Architect problems...","url":"1619.html","id":"1619","date":"2015-09-28T09:16:46.000Z","_content":"\nThese are always tricky problems. The best is to contact Sencha support via the support portal, and mention the following: 1) Which OS are you using? 2) Which version of Sencha Cmd installed? (open a terminal, run the following command: `sencha which`) 3) Which version of Java is installed (open a terminal, run the following command: `java -version`) 4) Did you see any error messages? In Architect at the log or output tab, or in a txt error file, located in your ext js project? Apart from that, there are a couple of things you could try out yourself! Let's start with a fresh re-install of Sencha Architect: 1) Uninstall Sencha Architect 2) After uninstalling, usually there are meta / settings files left in the user documents folder. These needs to be removed as well. I know on a Mac it's located in a hidden folder here: /Users//Library/Application Support/Sencha/Sencha Architect 3.2 I assume on Windows, there is a similar folder in the MyDocuments folder, please search for it, and rename or remove it. 3) Download a new version of S.A. https://www.sencha.com/products/architect/#overview And install. (BTW I wrote a great installation guide a while ago: http://docs.sencha.com/architect/3/getting\\_started/installation\\_setup.html) Step 2 is very important, if it went correct, it will install a fresh copy of the latest S.A, and you will need to login with your Sencha forum id again. When you don't remove these files, it sticks to the old setup. So it's possible it will crash again, after installation. If the trial is expired, Sencha Sales can usually help you.","source":"_drafts/how-tos/sencha-architect-crashes-cant-start-sencha-architect-problems.md","raw":"---\ntitle: Sencha Architect crashes? Can't start Sencha Architect problems...\ntags:\n  - crash\n  - install problems\n  - Sencha Architect\nurl: 1619.html\nid: 1619\ncategories:\n  - Architect\n  - Questions\ndate: 2015-09-28 11:16:46\n---\n\nThese are always tricky problems. The best is to contact Sencha support via the support portal, and mention the following: 1) Which OS are you using? 2) Which version of Sencha Cmd installed? (open a terminal, run the following command: `sencha which`) 3) Which version of Java is installed (open a terminal, run the following command: `java -version`) 4) Did you see any error messages? In Architect at the log or output tab, or in a txt error file, located in your ext js project? Apart from that, there are a couple of things you could try out yourself! Let's start with a fresh re-install of Sencha Architect: 1) Uninstall Sencha Architect 2) After uninstalling, usually there are meta / settings files left in the user documents folder. These needs to be removed as well. I know on a Mac it's located in a hidden folder here: /Users//Library/Application Support/Sencha/Sencha Architect 3.2 I assume on Windows, there is a similar folder in the MyDocuments folder, please search for it, and rename or remove it. 3) Download a new version of S.A. https://www.sencha.com/products/architect/#overview And install. (BTW I wrote a great installation guide a while ago: http://docs.sencha.com/architect/3/getting\\_started/installation\\_setup.html) Step 2 is very important, if it went correct, it will install a fresh copy of the latest S.A, and you will need to login with your Sencha forum id again. When you don't remove these files, it sticks to the old setup. So it's possible it will crash again, after installation. If the trial is expired, Sencha Sales can usually help you.","slug":"how-tos/sencha-architect-crashes-cant-start-sencha-architect-problems","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncum00hokif52xasx7tp","content":"<p>These are always tricky problems. The best is to contact Sencha support via\n  the support portal, and mention the following: 1) Which OS are you using? 2)\n  Which version of Sencha Cmd installed? (open a terminal, run the following\n  command: <code>sencha which</code>) 3) Which version of Java is installed\n  (open a terminal, run the following command: <code>java -version</code>) 4)\n  Did you see any error messages? In Architect at the log or output tab, or in\n  a txt error file, located in your ext js project? Apart from that, there are\n  a couple of things you could try out yourself! Let’s start with a fresh\n  re-install of Sencha Architect: 1) Uninstall Sencha Architect 2) After\n  uninstalling, usually there are meta / settings files left in the user\n  documents folder. These needs to be removed as well. I know on a Mac it’s\n  located in a hidden folder here: /Users//Library/Application\n  Support/Sencha/Sencha Architect 3.2 I assume on Windows, there is a similar\n  folder in the MyDocuments folder, please search for it, and rename or remove\n  it. 3) Download a new version of S.A. <a href=\"https://www.sencha.com/products/architect/#overview\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/products/architect/#overview</a>\n  And install. (BTW I wrote a great installation guide a while ago: <a href=\"http://docs.sencha.com/architect/3/getting\\_started/installation\\_setup.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/architect/3/getting\\_started/installation\\_setup.html</a>)\n  Step 2 is very important, if it went correct, it will install a fresh copy of\n  the latest S.A, and you will need to login with your Sencha forum id again.\n  When you don’t remove these files, it sticks to the old setup. So it’s\n  possible it will crash again, after installation. If the trial is expired,\n  Sencha Sales can usually help you.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>These are always tricky problems. The best is to contact Sencha support via\n  the support portal, and mention the following: 1) Which OS are you using? 2)\n  Which version of Sencha Cmd installed? (open a terminal, run the following\n  command: <code>sencha which</code>) 3) Which version of Java is installed\n  (open a terminal, run the following command: <code>java -version</code>) 4)\n  Did you see any error messages? In Architect at the log or output tab, or in\n  a txt error file, located in your ext js project? Apart from that, there are\n  a couple of things you could try out yourself! Let’s start with a fresh\n  re-install of Sencha Architect: 1) Uninstall Sencha Architect 2) After\n  uninstalling, usually there are meta / settings files left in the user\n  documents folder. These needs to be removed as well. I know on a Mac it’s\n  located in a hidden folder here: /Users//Library/Application\n  Support/Sencha/Sencha Architect 3.2 I assume on Windows, there is a similar\n  folder in the MyDocuments folder, please search for it, and rename or remove\n  it. 3) Download a new version of S.A. <a href=\"https://www.sencha.com/products/architect/#overview\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/products/architect/#overview</a>\n  And install. (BTW I wrote a great installation guide a while ago: <a href=\"http://docs.sencha.com/architect/3/getting\\_started/installation\\_setup.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/architect/3/getting\\_started/installation\\_setup.html</a>)\n  Step 2 is very important, if it went correct, it will install a fresh copy of\n  the latest S.A, and you will need to login with your Sencha forum id again.\n  When you don’t remove these files, it sticks to the old setup. So it’s\n  possible it will crash again, after installation. If the trial is expired,\n  Sencha Sales can usually help you.</p>\n"},{"title":"Remove .DS_Store files from my git repo and ignore them.","url":"348.html","id":"348","date":"2013-04-13T08:23:13.000Z","_content":"\nI easily can get frustrated from all those auto-generated .DS_Store files on my Mac. These are the steps to remove and ignore them! **1\\. Remove all DS store files from the whole folder.** Run the following command in your terminal:\n\nfind . -name '*.DS_Store' -type f -delete\n\n**2\\. Create a hidden .gitignore file** My .gitignore file looks like this. Apart from the .DS_Store store files, I also ignore packages, archives, project settings, sass-cache files and more:\n\n/.buildpath\n/build/\n*/archive/\n\n__MACOSX\n.DS_Store\n\n.project\n.settings\n.classpath\n.sass-cache/\n\n\\# OS generated files #\n######################\n*/.DS_Store\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nIcon?\nehthumbs.db\nThumbs.db\n\n\\# Packages #\n############\n\\# it's better to unpack these files and commit the raw source\n\\# git has its own built in compression methods\n*.7z\n*.dmg\n*.gz\n*.iso\n*.jar\n*.rar\n*.tar\n*.zip\n\n**3\\. Commit the removed files and the hidden .gitignore file.**","source":"_drafts/how-tos/remove-ds-store-files-from-my-git-repo-and-ignore-them.md","raw":"---\ntitle: Remove .DS_Store files from my git repo and ignore them.\nurl: 348.html\nid: 348\ncategories:\n  - Environment\n  - Git\ndate: 2013-04-13 10:23:13\ntags:\n---\n\nI easily can get frustrated from all those auto-generated .DS_Store files on my Mac. These are the steps to remove and ignore them! **1\\. Remove all DS store files from the whole folder.** Run the following command in your terminal:\n\nfind . -name '*.DS_Store' -type f -delete\n\n**2\\. Create a hidden .gitignore file** My .gitignore file looks like this. Apart from the .DS_Store store files, I also ignore packages, archives, project settings, sass-cache files and more:\n\n/.buildpath\n/build/\n*/archive/\n\n__MACOSX\n.DS_Store\n\n.project\n.settings\n.classpath\n.sass-cache/\n\n\\# OS generated files #\n######################\n*/.DS_Store\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nIcon?\nehthumbs.db\nThumbs.db\n\n\\# Packages #\n############\n\\# it's better to unpack these files and commit the raw source\n\\# git has its own built in compression methods\n*.7z\n*.dmg\n*.gz\n*.iso\n*.jar\n*.rar\n*.tar\n*.zip\n\n**3\\. Commit the removed files and the hidden .gitignore file.**","slug":"how-tos/remove-ds-store-files-from-my-git-repo-and-ignore-them","published":0,"updated":"2018-11-25T12:44:06.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncun00hskif5k8wuye8z","content":"<p>I easily can get frustrated from all those auto-generated .DS_Store files on\n  my Mac. These are the steps to remove and ignore them! <strong>1. Remove all\n    DS store files from the whole folder.</strong> Run the following command in\n  your terminal:</p>\n<p>find . -name ‘*.DS_Store’ -type f -delete</p>\n<p><strong>2. Create a hidden .gitignore file</strong> My .gitignore file looks\n  like this. Apart from the .DS_Store store files, I also ignore packages,\n  archives, project settings, sass-cache files and more:</p>\n<p>/.buildpath /build/ */archive/</p>\n<p>__MACOSX .DS_Store</p>\n<p>.project .settings .classpath .sass-cache/</p>\n<p># OS generated files #</p>\n<p>###################### <em>/.DS_Store .DS_Store .DS_Store? ._</em>\n  .Spotlight-V100 .Trashes Icon? ehthumbs.db Thumbs.db</p>\n<p># Packages #</p>\n<p>############ # it’s better to unpack these files and commit the raw source #\n  git has its own built in compression methods <em>.7z </em>.dmg <em>.gz </em>.iso\n  <em>.jar </em>.rar <em>.tar </em>.zip</p>\n<p><strong>3. Commit the removed files and the hidden .gitignore file.</strong></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>I easily can get frustrated from all those auto-generated .DS_Store files on\n  my Mac. These are the steps to remove and ignore them! <strong>1. Remove all\n    DS store files from the whole folder.</strong> Run the following command in\n  your terminal:</p>\n<p>find . -name ‘*.DS_Store’ -type f -delete</p>\n<p><strong>2. Create a hidden .gitignore file</strong> My .gitignore file looks\n  like this. Apart from the .DS_Store store files, I also ignore packages,\n  archives, project settings, sass-cache files and more:</p>\n<p>/.buildpath /build/ */archive/</p>\n<p>__MACOSX .DS_Store</p>\n<p>.project .settings .classpath .sass-cache/</p>\n<p># OS generated files #</p>\n<p>###################### <em>/.DS_Store .DS_Store .DS_Store? ._</em>\n  .Spotlight-V100 .Trashes Icon? ehthumbs.db Thumbs.db</p>\n<p># Packages #</p>\n<p>############ # it’s better to unpack these files and commit the raw source #\n  git has its own built in compression methods <em>.7z </em>.dmg <em>.gz </em>.iso\n  <em>.jar </em>.rar <em>.tar </em>.zip</p>\n<p><strong>3. Commit the removed files and the hidden .gitignore file.</strong></p>\n"},{"title":"Sencha Architect won't start / Sencha Themer won't build","url":"1666.html","id":"1666","date":"2015-09-28T10:36:01.000Z","_content":"\nA weird error happened in my Sencha Themer. I wasn't able to start the Themer, because I couldn't make a Sencha build. This problem with Sencha Cmd probably actually also affected my Sencha Test, who couldn't create builds either. ###No available port starting at 1,842 The error shown in the logs was: ``` The following error occurred while executing this line: Error: BUILD FAILED com.sencha.exceptions.ExNotFound: No available port starting at 8,902 Total time: 1 second The following error occurred while executing this line:     at SenchaCmdError (/Applications/Sencha/Themer/Sencha Themer.app/Contents/Resources/app.asar/app/errors/SenchaCmdError.js:5:9)     at SenchaCmd.\\_closeHandler (/Applications/Sencha/Themer/Sencha Themer.app/Contents/Resources/app.asar/app/lib/SenchaCmd.js:192:32)     at ChildProcess.g (events.js:286:16)     at emitTwo (events.js:106:13)     at ChildProcess.emit (events.js:191:7)     at maybeClose (internal/child\\_process.js:850:16)     at Socket. (internal/child\\_process.js:323:11)     at emitOne (events.js:96:13)     at Socket.emit (events.js:188:7)     at Pipe.\\_handle.close \\[as _onclose\\] (net.js:492:12) ``` This problem even infected my Sencha Architect. With the release of 3.5.1 (which probably makes use of a newer Cmd version, and needs to make builds too), I wasn't able to start Sencha Architect. - My software would just freeze, and nothing would start or happen. After a lot of pain and headaches, we figured out how to solve the issue. We used this script, to make some tests with better logging: https://gist.github.com/savelee/61082f5ae084688bf9c479209346005f \\*\\*The real problem was that Sencha Cmd was unable to bind to localhost.\\*\\* What's causing these problems was my hosts file: */etc/hosts/* My local XAMPP server, modified the hosts file, and set 255.255.255.255 to localhost, but it should be \\*broadcasthost\\*: https://gist.github.com/savelee/f6e9ca1b94eb88a649e784bf9260ecb8 After editing my hosts file by running: \\`sudo nano /etc/hosts\\` and restarting my networking. I suddenly could run the test script, and Sencha Themer and Sencha Architect 3.5.1. Wow! A ticket to fix this in the future for other customers, will fix this as well: https://github.com/sencha/cmd/pull/496","source":"_drafts/how-tos/sencha-architect-wont-start-sencha-themer-wont-build.md","raw":"---\ntitle: Sencha Architect won't start / Sencha Themer won't build\ntags:\n  - Port error\nurl: 1666.html\nid: 1666\ncategories:\n  - Questions\ndate: 2015-09-28 12:36:01\n---\n\nA weird error happened in my Sencha Themer. I wasn't able to start the Themer, because I couldn't make a Sencha build. This problem with Sencha Cmd probably actually also affected my Sencha Test, who couldn't create builds either. ###No available port starting at 1,842 The error shown in the logs was: ``` The following error occurred while executing this line: Error: BUILD FAILED com.sencha.exceptions.ExNotFound: No available port starting at 8,902 Total time: 1 second The following error occurred while executing this line:     at SenchaCmdError (/Applications/Sencha/Themer/Sencha Themer.app/Contents/Resources/app.asar/app/errors/SenchaCmdError.js:5:9)     at SenchaCmd.\\_closeHandler (/Applications/Sencha/Themer/Sencha Themer.app/Contents/Resources/app.asar/app/lib/SenchaCmd.js:192:32)     at ChildProcess.g (events.js:286:16)     at emitTwo (events.js:106:13)     at ChildProcess.emit (events.js:191:7)     at maybeClose (internal/child\\_process.js:850:16)     at Socket. (internal/child\\_process.js:323:11)     at emitOne (events.js:96:13)     at Socket.emit (events.js:188:7)     at Pipe.\\_handle.close \\[as _onclose\\] (net.js:492:12) ``` This problem even infected my Sencha Architect. With the release of 3.5.1 (which probably makes use of a newer Cmd version, and needs to make builds too), I wasn't able to start Sencha Architect. - My software would just freeze, and nothing would start or happen. After a lot of pain and headaches, we figured out how to solve the issue. We used this script, to make some tests with better logging: https://gist.github.com/savelee/61082f5ae084688bf9c479209346005f \\*\\*The real problem was that Sencha Cmd was unable to bind to localhost.\\*\\* What's causing these problems was my hosts file: */etc/hosts/* My local XAMPP server, modified the hosts file, and set 255.255.255.255 to localhost, but it should be \\*broadcasthost\\*: https://gist.github.com/savelee/f6e9ca1b94eb88a649e784bf9260ecb8 After editing my hosts file by running: \\`sudo nano /etc/hosts\\` and restarting my networking. I suddenly could run the test script, and Sencha Themer and Sencha Architect 3.5.1. Wow! A ticket to fix this in the future for other customers, will fix this as well: https://github.com/sencha/cmd/pull/496","slug":"how-tos/sencha-architect-wont-start-sencha-themer-wont-build","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncuo00hvkif58wc76taa","content":"<p>A weird error happened in my Sencha Themer. I wasn’t able to start the\n  Themer, because I couldn’t make a Sencha build. This problem with Sencha Cmd\n  probably actually also affected my Sencha Test, who couldn’t create builds\n  either. ###No available port starting at 1,842 The error shown in the logs\n  was: <code>The following error occurred while executing this line: Error:\n    BUILD FAILED com.sencha.exceptions.ExNotFound: No available port starting\n    at 8,902 Total time: 1 second The following error occurred while executing\n    this line:     at SenchaCmdError (/Applications/Sencha/Themer/Sencha\n    Themer.app/Contents/Resources/app.asar/app/errors/SenchaCmdError.js:5:9)\n        at SenchaCmd.\\_closeHandler (/Applications/Sencha/Themer/Sencha\n    Themer.app/Contents/Resources/app.asar/app/lib/SenchaCmd.js:192:32)     at\n    ChildProcess.g (events.js:286:16)     at emitTwo (events.js:106:13)     at\n    ChildProcess.emit (events.js:191:7)     at maybeClose\n    (internal/child\\_process.js:850:16)     at Socket.\n    (internal/child\\_process.js:323:11)     at emitOne (events.js:96:13)     at\n    Socket.emit (events.js:188:7)     at Pipe.\\_handle.close \\[as _onclose\\]\n    (net.js:492:12)</code> This problem even infected my Sencha Architect. With\n  the release of 3.5.1 (which probably makes use of a newer Cmd version, and\n  needs to make builds too), I wasn’t able to start Sencha Architect. - My\n  software would just freeze, and nothing would start or happen. After a lot of\n  pain and headaches, we figured out how to solve the issue. We used this\n  script, to make some tests with better logging: <a href=\"https://gist.github.com/savelee/61082f5ae084688bf9c479209346005f\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/61082f5ae084688bf9c479209346005f</a>\n  **The real problem was that Sencha Cmd was unable to bind to localhost.**\n  What’s causing these problems was my hosts file: <em>/etc/hosts/</em> My\n  local XAMPP server, modified the hosts file, and set 255.255.255.255 to\n  localhost, but it should be *broadcasthost*: <a href=\"https://gist.github.com/savelee/f6e9ca1b94eb88a649e784bf9260ecb8\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/f6e9ca1b94eb88a649e784bf9260ecb8</a>\n  After editing my hosts file by running: `sudo nano /etc/hosts` and restarting\n  my networking. I suddenly could run the test script, and Sencha Themer and\n  Sencha Architect 3.5.1. Wow! A ticket to fix this in the future for other\n  customers, will fix this as well: <a href=\"https://github.com/sencha/cmd/pull/496\" target=\"_blank\" rel=\"noopener\">https://github.com/sencha/cmd/pull/496</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>A weird error happened in my Sencha Themer. I wasn’t able to start the\n  Themer, because I couldn’t make a Sencha build. This problem with Sencha Cmd\n  probably actually also affected my Sencha Test, who couldn’t create builds\n  either. ###No available port starting at 1,842 The error shown in the logs\n  was: <code>The following error occurred while executing this line: Error:\n    BUILD FAILED com.sencha.exceptions.ExNotFound: No available port starting\n    at 8,902 Total time: 1 second The following error occurred while executing\n    this line:     at SenchaCmdError (/Applications/Sencha/Themer/Sencha\n    Themer.app/Contents/Resources/app.asar/app/errors/SenchaCmdError.js:5:9)\n        at SenchaCmd.\\_closeHandler (/Applications/Sencha/Themer/Sencha\n    Themer.app/Contents/Resources/app.asar/app/lib/SenchaCmd.js:192:32)     at\n    ChildProcess.g (events.js:286:16)     at emitTwo (events.js:106:13)     at\n    ChildProcess.emit (events.js:191:7)     at maybeClose\n    (internal/child\\_process.js:850:16)     at Socket.\n    (internal/child\\_process.js:323:11)     at emitOne (events.js:96:13)     at\n    Socket.emit (events.js:188:7)     at Pipe.\\_handle.close \\[as _onclose\\]\n    (net.js:492:12)</code> This problem even infected my Sencha Architect. With\n  the release of 3.5.1 (which probably makes use of a newer Cmd version, and\n  needs to make builds too), I wasn’t able to start Sencha Architect. - My\n  software would just freeze, and nothing would start or happen. After a lot of\n  pain and headaches, we figured out how to solve the issue. We used this\n  script, to make some tests with better logging: <a href=\"https://gist.github.com/savelee/61082f5ae084688bf9c479209346005f\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/61082f5ae084688bf9c479209346005f</a>\n  **The real problem was that Sencha Cmd was unable to bind to localhost.**\n  What’s causing these problems was my hosts file: <em>/etc/hosts/</em> My\n  local XAMPP server, modified the hosts file, and set 255.255.255.255 to\n  localhost, but it should be *broadcasthost*: <a href=\"https://gist.github.com/savelee/f6e9ca1b94eb88a649e784bf9260ecb8\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/f6e9ca1b94eb88a649e784bf9260ecb8</a>\n  After editing my hosts file by running: `sudo nano /etc/hosts` and restarting\n  my networking. I suddenly could run the test script, and Sencha Themer and\n  Sencha Architect 3.5.1. Wow! A ticket to fix this in the future for other\n  customers, will fix this as well: <a href=\"https://github.com/sencha/cmd/pull/496\" target=\"_blank\" rel=\"noopener\">https://github.com/sencha/cmd/pull/496</a></p>\n"},{"title":"Sencha CMD making builds & ios packages","url":"170.html","id":"170","date":"2012-12-07T17:30:11.000Z","_content":"\nCreating a Sencha Touch build and package ready for the Apple App Store is really easy. Just open your console / terminal and use Sencha CMD. (New to Sencha CMD? Please read this blogpost first: [http://www.leeboonstra.com/developer/environment/sencha-cmd-for-scaffolding-sencha-touch-mvc-project/](http://www.leeboonstra.com/developer/environment/sencha-cmd-for-scaffolding-sencha-touch-mvc-project/)) Ready? Now navigate to your app folder. **Make a build:**\n\nsencha app build \n\n**Make a package ready for deployment:**\n\nsencha package run packager.json","source":"_drafts/how-tos/sencha-cmd-making-builds-ios-packages.md","raw":"---\ntitle: Sencha CMD making builds & ios packages\ntags:\n  - Automated\n  - Scafolding\n  - Sencha\n  - Sencha CMD\n  - Sencha SDK Tools\nurl: 170.html\nid: 170\ncategories:\n  - Environment\n  - Sencha Touch\ndate: 2012-12-07 18:30:11\n---\n\nCreating a Sencha Touch build and package ready for the Apple App Store is really easy. Just open your console / terminal and use Sencha CMD. (New to Sencha CMD? Please read this blogpost first: [http://www.leeboonstra.com/developer/environment/sencha-cmd-for-scaffolding-sencha-touch-mvc-project/](http://www.leeboonstra.com/developer/environment/sencha-cmd-for-scaffolding-sencha-touch-mvc-project/)) Ready? Now navigate to your app folder. **Make a build:**\n\nsencha app build \n\n**Make a package ready for deployment:**\n\nsencha package run packager.json","slug":"how-tos/sencha-cmd-making-builds-ios-packages","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncup00hykif51z6x3td4","content":"<p>Creating a Sencha Touch build and package ready for the Apple App Store is\n  really easy. Just open your console / terminal and use Sencha CMD. (New to\n  Sencha CMD? Please read this blogpost first: <a href=\"http://www.leeboonstra.com/developer/environment/sencha-cmd-for-scaffolding-sencha-touch-mvc-project/\" target=\"_blank\" rel=\"noopener\">http://www.leeboonstra.com/developer/environment/sencha-cmd-for-scaffolding-sencha-touch-mvc-project/</a>)\n  Ready? Now navigate to your app folder. <strong>Make a build:</strong></p>\n<p>sencha app build</p>\n<p><strong>Make a package ready for deployment:</strong></p>\n<p>sencha package run packager.json</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Creating a Sencha Touch build and package ready for the Apple App Store is\n  really easy. Just open your console / terminal and use Sencha CMD. (New to\n  Sencha CMD? Please read this blogpost first: <a href=\"http://www.leeboonstra.com/developer/environment/sencha-cmd-for-scaffolding-sencha-touch-mvc-project/\" target=\"_blank\" rel=\"noopener\">http://www.leeboonstra.com/developer/environment/sencha-cmd-for-scaffolding-sencha-touch-mvc-project/</a>)\n  Ready? Now navigate to your app folder. <strong>Make a build:</strong></p>\n<p>sencha app build</p>\n<p><strong>Make a package ready for deployment:</strong></p>\n<p>sencha package run packager.json</p>\n"},{"title":"Sencha Cmd for scaffolding Sencha Touch / EXT MVC project","url":"164.html","id":"164","date":"2012-11-19T19:02:34.000Z","_content":"\nSencha's commandline tools (Sencha CMD) previous known as Sencha SDK Tools are really great! With one line in your terminal you can generate your MVC boilerplate. From scaffolding a new project, to minifying and deploying your application to production, Sencha Cmd provides a full set of lifecycle management features to compliment your Sencha project. First start downloading the Sencha CMD: [http://www.sencha.com/products/sencha-cmd/download](http://www.sencha.com/products/sencha-cmd/download) Run the installer and remember the path where it's installed. Let's start generating a MVC project for Sencha Touch. (You can use the same instructions for an EXT JS4 project btw, use the EXT library instead): 1. Now open your terminal on Mac OSX (or Run > CMD on Windows). 2. Test with the command: _sencha_ if Sencha CMD is correctly installed. It should prompt you all the Sencha options & commands. 3. Incase you don't see anything, you need to make sure sencha is added to the classpath. (On Mac OSX you can change this by opening, .bash_profile in your user folder. (hidden file). Add the following line: export PATH=/Users/username/bin/Sencha/Cmd/3.0.0.250:$PATH) (Incase you don't have Sencha Touch yet, [download it here](http://www.sencha.com/products/touch/download/) and extract it in your project directory.) 4. Create a project folder. (for example MyApp) 5. Now let's start: A. You have to be in the folder where Sencha Touch 2 is extracted. B. Type the following command _sencha generate app MyApp \\[path\\]_ C. The MyApp name will be the name of your app, (note: this will be the App namespace later) The command could look like this:\n\nMyMacBookPro:touch2 lee$ sencha generate app MyApp XAMPP/htdocs/\n\nGreat, so now that you have a project, let's generate a model: Specify the model name, and all the fields.\n\nsencha generate model -name MyModel -fields fName,lName\n\nGenerate a form:\n\nsencha generate form -fields \\[comma delimited list of fields\\] -name formName \n\nAs you can see, you can almost generate everything. To see an overview of what else you can generate type the following command:\n\nsencha help generate","source":"_drafts/how-tos/sencha-cmd-for-scaffolding-sencha-touch-mvc-project.md","raw":"---\ntitle: Sencha Cmd for scaffolding Sencha Touch / EXT MVC project\ntags:\n  - JavaScript\n  - Scaffolding\n  - Sencha\n  - Sencha CMD\n  - Sencha SDK\n  - Sencha Touch\nurl: 164.html\nid: 164\ncategories:\n  - Environment\n  - Sencha Touch\ndate: 2012-11-19 20:02:34\n---\n\nSencha's commandline tools (Sencha CMD) previous known as Sencha SDK Tools are really great! With one line in your terminal you can generate your MVC boilerplate. From scaffolding a new project, to minifying and deploying your application to production, Sencha Cmd provides a full set of lifecycle management features to compliment your Sencha project. First start downloading the Sencha CMD: [http://www.sencha.com/products/sencha-cmd/download](http://www.sencha.com/products/sencha-cmd/download) Run the installer and remember the path where it's installed. Let's start generating a MVC project for Sencha Touch. (You can use the same instructions for an EXT JS4 project btw, use the EXT library instead): 1. Now open your terminal on Mac OSX (or Run > CMD on Windows). 2. Test with the command: _sencha_ if Sencha CMD is correctly installed. It should prompt you all the Sencha options & commands. 3. Incase you don't see anything, you need to make sure sencha is added to the classpath. (On Mac OSX you can change this by opening, .bash_profile in your user folder. (hidden file). Add the following line: export PATH=/Users/username/bin/Sencha/Cmd/3.0.0.250:$PATH) (Incase you don't have Sencha Touch yet, [download it here](http://www.sencha.com/products/touch/download/) and extract it in your project directory.) 4. Create a project folder. (for example MyApp) 5. Now let's start: A. You have to be in the folder where Sencha Touch 2 is extracted. B. Type the following command _sencha generate app MyApp \\[path\\]_ C. The MyApp name will be the name of your app, (note: this will be the App namespace later) The command could look like this:\n\nMyMacBookPro:touch2 lee$ sencha generate app MyApp XAMPP/htdocs/\n\nGreat, so now that you have a project, let's generate a model: Specify the model name, and all the fields.\n\nsencha generate model -name MyModel -fields fName,lName\n\nGenerate a form:\n\nsencha generate form -fields \\[comma delimited list of fields\\] -name formName \n\nAs you can see, you can almost generate everything. To see an overview of what else you can generate type the following command:\n\nsencha help generate","slug":"how-tos/sencha-cmd-for-scaffolding-sencha-touch-mvc-project","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncus00i1kif5gqurcbei","content":"<p>Sencha’s commandline tools (Sencha CMD) previous known as Sencha SDK Tools\n  are really great! With one line in your terminal you can generate your MVC\n  boilerplate. From scaffolding a new project, to minifying and deploying your\n  application to production, Sencha Cmd provides a full set of lifecycle\n  management features to compliment your Sencha project. First start\n  downloading the Sencha CMD: <a href=\"http://www.sencha.com/products/sencha-cmd/download\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/products/sencha-cmd/download</a>\n  Run the installer and remember the path where it’s installed. Let’s start\n  generating a MVC project for Sencha Touch. (You can use the same instructions\n  for an EXT JS4 project btw, use the EXT library instead): 1. Now open your\n  terminal on Mac OSX (or Run &gt; CMD on Windows). 2. Test with the command:\n  <em>sencha</em> if Sencha CMD is correctly installed. It should prompt you\n  all the Sencha options &amp; commands. 3. Incase you don’t see anything, you\n  need to make sure sencha is added to the classpath. (On Mac OSX you can\n  change this by opening, .bash_profile in your user folder. (hidden file). Add\n  the following line: export\n  PATH=/Users/username/bin/Sencha/Cmd/3.0.0.250:$PATH) (Incase you don’t have\n  Sencha Touch yet, <a href=\"http://www.sencha.com/products/touch/download/\" target=\"_blank\" rel=\"noopener\">download\n    it here</a> and extract it in your project directory.) 4. Create a project\n  folder. (for example MyApp) 5. Now let’s start: A. You have to be in the\n  folder where Sencha Touch 2 is extracted. B. Type the following command <em>sencha\n    generate app MyApp [path]</em> C. The MyApp name will be the name of your\n  app, (note: this will be the App namespace later) The command could look like\n  this:</p>\n<p>MyMacBookPro:touch2 lee$ sencha generate app MyApp XAMPP/htdocs/</p>\n<p>Great, so now that you have a project, let’s generate a model: Specify the\n  model name, and all the fields.</p>\n<p>sencha generate model -name MyModel -fields fName,lName</p>\n<p>Generate a form:</p>\n<p>sencha generate form -fields [comma delimited list of fields] -name formName</p>\n<p>As you can see, you can almost generate everything. To see an overview of\n  what else you can generate type the following command:</p>\n<p>sencha help generate</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Sencha’s commandline tools (Sencha CMD) previous known as Sencha SDK Tools\n  are really great! With one line in your terminal you can generate your MVC\n  boilerplate. From scaffolding a new project, to minifying and deploying your\n  application to production, Sencha Cmd provides a full set of lifecycle\n  management features to compliment your Sencha project. First start\n  downloading the Sencha CMD: <a href=\"http://www.sencha.com/products/sencha-cmd/download\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/products/sencha-cmd/download</a>\n  Run the installer and remember the path where it’s installed. Let’s start\n  generating a MVC project for Sencha Touch. (You can use the same instructions\n  for an EXT JS4 project btw, use the EXT library instead): 1. Now open your\n  terminal on Mac OSX (or Run &gt; CMD on Windows). 2. Test with the command:\n  <em>sencha</em> if Sencha CMD is correctly installed. It should prompt you\n  all the Sencha options &amp; commands. 3. Incase you don’t see anything, you\n  need to make sure sencha is added to the classpath. (On Mac OSX you can\n  change this by opening, .bash_profile in your user folder. (hidden file). Add\n  the following line: export\n  PATH=/Users/username/bin/Sencha/Cmd/3.0.0.250:$PATH) (Incase you don’t have\n  Sencha Touch yet, <a href=\"http://www.sencha.com/products/touch/download/\" target=\"_blank\" rel=\"noopener\">download\n    it here</a> and extract it in your project directory.) 4. Create a project\n  folder. (for example MyApp) 5. Now let’s start: A. You have to be in the\n  folder where Sencha Touch 2 is extracted. B. Type the following command <em>sencha\n    generate app MyApp [path]</em> C. The MyApp name will be the name of your\n  app, (note: this will be the App namespace later) The command could look like\n  this:</p>\n<p>MyMacBookPro:touch2 lee$ sencha generate app MyApp XAMPP/htdocs/</p>\n<p>Great, so now that you have a project, let’s generate a model: Specify the\n  model name, and all the fields.</p>\n<p>sencha generate model -name MyModel -fields fName,lName</p>\n<p>Generate a form:</p>\n<p>sencha generate form -fields [comma delimited list of fields] -name formName</p>\n<p>As you can see, you can almost generate everything. To see an overview of\n  what else you can generate type the following command:</p>\n<p>sencha help generate</p>\n"},{"title":"Sencha Touch Sliding Menu","url":"285.html","id":"285","date":"2012-12-22T21:30:11.000Z","_content":"\nToday I came across a very nice Sencha Touch ux component: a sliding menu like the Facebook mobile app has. It's created by WNielson. Click [here for a preview](http://wnielson.github.com/sencha-SlideNavigation/build/SlideNavigationExample/production/) (preview in a WebKit browser) or go directly to his [GitHub](https://github.com/wnielson/sencha-SlideNavigation) to check out his code.","source":"_drafts/how-tos/sencha-touch-sliding-menu.md","raw":"---\ntitle: Sencha Touch Sliding Menu\ntags:\n  - Sencha Touch Facebook Menu\n  - Sencha Touch sliding menu\nurl: 285.html\nid: 285\ncategories:\n  - Sencha Components\n  - Sencha Touch\ndate: 2012-12-22 22:30:11\n---\n\nToday I came across a very nice Sencha Touch ux component: a sliding menu like the Facebook mobile app has. It's created by WNielson. Click [here for a preview](http://wnielson.github.com/sencha-SlideNavigation/build/SlideNavigationExample/production/) (preview in a WebKit browser) or go directly to his [GitHub](https://github.com/wnielson/sencha-SlideNavigation) to check out his code.","slug":"how-tos/sencha-touch-sliding-menu","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncuu00i4kif5599vmfe1","content":"<p>Today I came across a very nice Sencha Touch ux component: a sliding menu\n  like the Facebook mobile app has. It’s created by WNielson. Click <a href=\"http://wnielson.github.com/sencha-SlideNavigation/build/SlideNavigationExample/production/\" target=\"_blank\" rel=\"noopener\">here\n    for a preview</a> (preview in a WebKit browser) or go directly to his <a href=\"https://github.com/wnielson/sencha-SlideNavigation\" target=\"_blank\" rel=\"noopener\">GitHub</a>\n  to check out his code.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Today I came across a very nice Sencha Touch ux component: a sliding menu\n  like the Facebook mobile app has. It’s created by WNielson. Click <a href=\"http://wnielson.github.com/sencha-SlideNavigation/build/SlideNavigationExample/production/\" target=\"_blank\" rel=\"noopener\">here\n    for a preview</a> (preview in a WebKit browser) or go directly to his <a href=\"https://github.com/wnielson/sencha-SlideNavigation\" target=\"_blank\" rel=\"noopener\">GitHub</a>\n  to check out his code.</p>\n"},{"title":"Setup PhantomJS for automate testing","url":"194.html","id":"194","date":"2012-12-08T09:04:22.000Z","_content":"\nAll your Jasmine TDD tests you can automate with PhantomJS. This blog post will tell you how to setup your environment for automated testing with PhantomJS. You should have a local webserver running. It it might be handy to have Jasmine already up and go. Please see my post: [http://www.leeboonstra.com/developer/environment/setup-jasmine-tdd-with-for-ext-js/](http://www.leeboonstra.com/developer/environment/setup-jasmine-tdd-with-for-ext-js/) **Get PhantomJS**. You can download it for MAC & Windows from: [http://phantomjs.org/download.html](http://phantomjs.org/download.html) \\- Windows users can run the exe file. - Mac OSX users can run bin/phantomjs But make sure you add phantomjs to your paths. For Mac users, you can also install PhantomJS with homebrew. To get homebrew you will need to have Ruby installed. Use the following commands on your terminal:\n\nwhoami (it will prompt ur username: for example lee)\nsudo chown lee:staff /usr/local\nsudo chmod 0777 /usr/local\nruby <(curl -fsSkL raw.github.com/mxcl/homebrew/go)\n\nNow that you have brew on your Mac, you can use the following command to install PhantomJS:\n\nbrew update && brew install phantomjs\n\nAfter everything is installed, you should type the following command in your command/terminal.\n\nphantomjs --version\n\nWhen everything is correctly installed it should output you the version number of PhantomJS!","source":"_drafts/how-tos/setup-phantomjs-to-automate-testing.md","raw":"---\ntitle: Setup PhantomJS for automate testing\ntags:\n  - Automated Testing\n  - Jasmine\n  - JavaScript Testing\n  - PhantomJS\n  - TDD\n  - Testing\nurl: 194.html\nid: 194\ncategories:\n  - Environment\n  - Jasmine\n  - TDD\ndate: 2012-12-08 10:04:22\n---\n\nAll your Jasmine TDD tests you can automate with PhantomJS. This blog post will tell you how to setup your environment for automated testing with PhantomJS. You should have a local webserver running. It it might be handy to have Jasmine already up and go. Please see my post: [http://www.leeboonstra.com/developer/environment/setup-jasmine-tdd-with-for-ext-js/](http://www.leeboonstra.com/developer/environment/setup-jasmine-tdd-with-for-ext-js/) **Get PhantomJS**. You can download it for MAC & Windows from: [http://phantomjs.org/download.html](http://phantomjs.org/download.html) \\- Windows users can run the exe file. - Mac OSX users can run bin/phantomjs But make sure you add phantomjs to your paths. For Mac users, you can also install PhantomJS with homebrew. To get homebrew you will need to have Ruby installed. Use the following commands on your terminal:\n\nwhoami (it will prompt ur username: for example lee)\nsudo chown lee:staff /usr/local\nsudo chmod 0777 /usr/local\nruby <(curl -fsSkL raw.github.com/mxcl/homebrew/go)\n\nNow that you have brew on your Mac, you can use the following command to install PhantomJS:\n\nbrew update && brew install phantomjs\n\nAfter everything is installed, you should type the following command in your command/terminal.\n\nphantomjs --version\n\nWhen everything is correctly installed it should output you the version number of PhantomJS!","slug":"how-tos/setup-phantomjs-to-automate-testing","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncuv00i9kif5m1q6hn5h","content":"<p>All your Jasmine TDD tests you can automate with PhantomJS. This blog post\n  will tell you how to setup your environment for automated testing with\n  PhantomJS. You should have a local webserver running. It it might be handy to\n  have Jasmine already up and go. Please see my post: <a href=\"http://www.leeboonstra.com/developer/environment/setup-jasmine-tdd-with-for-ext-js/\" target=\"_blank\" rel=\"noopener\">http://www.leeboonstra.com/developer/environment/setup-jasmine-tdd-with-for-ext-js/</a>\n  <strong>Get PhantomJS</strong>. You can download it for MAC &amp; Windows\n  from: <a href=\"http://phantomjs.org/download.html\" target=\"_blank\" rel=\"noopener\">http://phantomjs.org/download.html</a>\n  - Windows users can run the exe file. - Mac OSX users can run bin/phantomjs\n  But make sure you add phantomjs to your paths. For Mac users, you can also\n  install PhantomJS with homebrew. To get homebrew you will need to have Ruby\n  installed. Use the following commands on your terminal:</p>\n<p>whoami (it will prompt ur username: for example lee) sudo chown lee:staff\n  /usr/local sudo chmod 0777 /usr/local ruby &lt;(curl -fsSkL\n  raw.github.com/mxcl/homebrew/go)</p>\n<p>Now that you have brew on your Mac, you can use the following command to\n  install PhantomJS:</p>\n<p>brew update &amp;&amp; brew install phantomjs</p>\n<p>After everything is installed, you should type the following command in your\n  command/terminal.</p>\n<p>phantomjs –version</p>\n<p>When everything is correctly installed it should output you the version\n  number of PhantomJS!</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>All your Jasmine TDD tests you can automate with PhantomJS. This blog post\n  will tell you how to setup your environment for automated testing with\n  PhantomJS. You should have a local webserver running. It it might be handy to\n  have Jasmine already up and go. Please see my post: <a href=\"http://www.leeboonstra.com/developer/environment/setup-jasmine-tdd-with-for-ext-js/\" target=\"_blank\" rel=\"noopener\">http://www.leeboonstra.com/developer/environment/setup-jasmine-tdd-with-for-ext-js/</a>\n  <strong>Get PhantomJS</strong>. You can download it for MAC &amp; Windows\n  from: <a href=\"http://phantomjs.org/download.html\" target=\"_blank\" rel=\"noopener\">http://phantomjs.org/download.html</a>\n  - Windows users can run the exe file. - Mac OSX users can run bin/phantomjs\n  But make sure you add phantomjs to your paths. For Mac users, you can also\n  install PhantomJS with homebrew. To get homebrew you will need to have Ruby\n  installed. Use the following commands on your terminal:</p>\n<p>whoami (it will prompt ur username: for example lee) sudo chown lee:staff\n  /usr/local sudo chmod 0777 /usr/local ruby &lt;(curl -fsSkL\n  raw.github.com/mxcl/homebrew/go)</p>\n<p>Now that you have brew on your Mac, you can use the following command to\n  install PhantomJS:</p>\n<p>brew update &amp;&amp; brew install phantomjs</p>\n<p>After everything is installed, you should type the following command in your\n  command/terminal.</p>\n<p>phantomjs –version</p>\n<p>When everything is correctly installed it should output you the version\n  number of PhantomJS!</p>\n"},{"title":"Setting up localhost Mac OSX","url":"64.html","id":"64","date":"2011-06-01T14:11:55.000Z","_content":"\nFollow these instructions to setup your localhost on Mac OSX without installing XAMPP.\n\nMake sure Web Sharing is enabled:  \nGo to System preferences > Sharing > enable Personal Web Sharing\n\n1.  Backup httpd.conf\n\nsudo cp /etc/apache2/httpd.conf /etc/apache2/httpd.conf.bak\n\n1.  Open file in text editor\n\nsudo nano /etc/apache2/httpd.conf\n\n1.  Hit \\[CTRL + W\\] and type ?DocumentRoot? (without quotes). Then hit ?Enter.?\n    \n2.  Change the path to your folder\n    \n3.  Hit \\[CTRL + O\\], then hit Enter. Then, hit \\[CTRL + X\\] to exit.\n    \n4.  Restart server:\n    \n\napachectl restart","source":"_drafts/how-tos/setting-up-localhost-mac-osx.md","raw":"---\ntitle: Setting up localhost Mac OSX\ntags:\n  - Apache\n  - Localhost\n  - Mac OSX\nurl: 64.html\nid: 64\ncategories:\n  - Environment\ndate: 2011-06-01 16:11:55\n---\n\nFollow these instructions to setup your localhost on Mac OSX without installing XAMPP.\n\nMake sure Web Sharing is enabled:  \nGo to System preferences > Sharing > enable Personal Web Sharing\n\n1.  Backup httpd.conf\n\nsudo cp /etc/apache2/httpd.conf /etc/apache2/httpd.conf.bak\n\n1.  Open file in text editor\n\nsudo nano /etc/apache2/httpd.conf\n\n1.  Hit \\[CTRL + W\\] and type ?DocumentRoot? (without quotes). Then hit ?Enter.?\n    \n2.  Change the path to your folder\n    \n3.  Hit \\[CTRL + O\\], then hit Enter. Then, hit \\[CTRL + X\\] to exit.\n    \n4.  Restart server:\n    \n\napachectl restart","slug":"how-tos/setting-up-localhost-mac-osx","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncuw00ickif5zv3ya858","content":"<p>Follow these instructions to setup your localhost on Mac OSX without\n  installing XAMPP.</p>\n<p>Make sure Web Sharing is enabled:<br>Go to System preferences &gt; Sharing\n  &gt; enable Personal Web Sharing</p>\n<ol>\n  <li>Backup httpd.conf</li>\n</ol>\n<p>sudo cp /etc/apache2/httpd.conf /etc/apache2/httpd.conf.bak</p>\n<ol>\n  <li>Open file in text editor</li>\n</ol>\n<p>sudo nano /etc/apache2/httpd.conf</p>\n<ol>\n  <li>\n    <p>Hit [CTRL + W] and type ?DocumentRoot? (without quotes). Then hit\n      ?Enter.?</p>\n  </li>\n  <li>\n    <p>Change the path to your folder</p>\n  </li>\n  <li>\n    <p>Hit [CTRL + O], then hit Enter. Then, hit [CTRL + X] to exit.</p>\n  </li>\n  <li>\n    <p>Restart server:</p>\n  </li>\n</ol>\n<p>apachectl restart</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Follow these instructions to setup your localhost on Mac OSX without\n  installing XAMPP.</p>\n<p>Make sure Web Sharing is enabled:<br>Go to System preferences &gt; Sharing\n  &gt; enable Personal Web Sharing</p>\n<ol>\n  <li>Backup httpd.conf</li>\n</ol>\n<p>sudo cp /etc/apache2/httpd.conf /etc/apache2/httpd.conf.bak</p>\n<ol>\n  <li>Open file in text editor</li>\n</ol>\n<p>sudo nano /etc/apache2/httpd.conf</p>\n<ol>\n  <li>\n    <p>Hit [CTRL + W] and type ?DocumentRoot? (without quotes). Then hit\n      ?Enter.?</p>\n  </li>\n  <li>\n    <p>Change the path to your folder</p>\n  </li>\n  <li>\n    <p>Hit [CTRL + O], then hit Enter. Then, hit [CTRL + X] to exit.</p>\n  </li>\n  <li>\n    <p>Restart server:</p>\n  </li>\n</ol>\n<p>apachectl restart</p>\n"},{"title":"Simple Techniques for Solving Common Sencha Coding Problems","url":"436.html","id":"436","date":"2014-05-22T09:01:55.000Z","_content":"\nOften when I’m teaching a Sencha Training class, students ask me to look at their apps because there’s a problem they don’t know how to fix. Since I didn’t write the code, it’s hard sometimes for me to give them a quick answer. However, I do have a set of simple techniques that filter out the most obvious problems.\n\nIn this tip, I’ll categorize a couple of most common problems and tackle them with some simple but effective strategies.\n\n### Problem: “I don’t see my data”\n\nYou are browsing through your app, but the data is not visible. Often, this problem is easy to fix.\n\n#### “Here, try this:”\n\nFirst, try to inspect the Store. You can do this from the browser console by running:\n\nExt.getStore(‘MyStore’).load();\n\nThis returns the Store object. You can drill through the data config and see if the array length is greater than zero.\n\nIf there is data available, something probably went wrong with rendering. Consider these possible issues:\n\nDo the data fields map the fields in the Model?\n\nIs the data array empty? In your browser developer toolbar, hit the Network tab. Do you get a status code 200? No? Then something went wrong with your request. Check your Model/Store proxy.\n\nThe request works correctly, but it still doesn’t display the data? Verify whether the data you get back is valid. For example, when you are using JSON data, you can copy the data response from the browser network tab into [http://jsonlint.com](http://jsonlint.com) or [http://jsonplint.com/](http://jsonplint.com). You can also use your own written test data too.\n\n### Problem: “I can’t build my app”\n\nSencha Cmd won’t build your app. Most of the time, Sencha Cmd gives a clear explanation of what’s going on, or what needs to be changed. However, every now and then, I see problems where Sencha Cmd won’t build. and the error description is not clear. It might be that there is nothing wrong with your code. For example, your code runs perfectly on your local environment. It just won’t build.\n\n#### “Here, try this:”\n\nThis trick is pretty radical, but most of the time it works. Generate a new application with the same namespace from the command line:\n\nsencha generate app App ../myapp\n\nNext, copy over the app folder, and make sure you take the changes over from app.js. Now try it again!\n\n### Problem: “Strange component-x behavior”\n\nThese types of problems are always the hardest ones. For example, suddenly multiple scrollbars show up in your grid. Or, you see a tab panel with the wrong styling. Testing these kind of problems within your app can be time consuming. Not only do you have to navigate through your app to get to this problem, there can also be many reasons why it’s broken.\n\n#### “Here, try this:”\n\nA common problem-solving technique for developers is to isolate the problem into smaller, more manageable chunks.\n\n##### Isolate the problem\n\nLet’s generate a new application with Sencha Cmd, again with the same namespace. Now, copy over the Class that contains the problems and test it. Do you see the same bugs? You can try to solve it in this test app. You can isolate it even further by trying to re-build your class from the ground up. Start with only the necessary code.\n\nDid it work? There is nothing wrong with the framework, and there is nothing wrong with this Class. Something else must be wrong.\n\n##### Switch to the default theme\n\nGo back to your own app and try to switch to one of the Sencha default stylesheets. (Sencha Default StyleSheet in Sencha Touch, Neptune Theme in Ext JS) Does it finally work? Then there is something wrong in your custom StyleSheet. Is it still not working? At least now you know that your custom StyleSheet is correct. There might be something wrong with your nesting. Or maybe you used the wrong layout?\n\n##### Query for Components\n\nDo you have problems with querying for Components? You can easily query components from your browsers dev console:\n\nExt.ComponentQuery.query('button\\[action=”test”\\]');\n\nDoes it return an empty array? Then there you go! Or maybe it does return the components, but you made a timing mistake. That can often be the case when you’re working with callbacks. When your code is executed, the component may not be rendered on the screen.\n\n#### Common Debugging Techniques\n\nAs a developer, you will often run into bugs and problems that you have to solve. But hey, that’s what makes our jobs challenging, right?\n\nAside from the above mentioned techniques, there are also a couple of standard tricks. First of all, know the framework and know your tools. Read the API Docs (or even better, browse through the framework code).\n\nSwitch to one of the debugging frameworks. The advantage is that it often shows extra log messages, and you can directly read through the framework code. For Sencha Touch projects, open app.json and change the framework temporarily:\n\n\"js\": \\[\n{\n\"path\": \"../touch/sencha-touch-all-debug.js\",\n\"x-bootstrap\": true\n},\n\nFor Ext JS projects, open **index.html** and change the framework temporarily:\n\nYour browser dev tools can help (Google Chrome or Firebug). Also, there are some handy plugins for developing Sencha code: [Illuminations](http://www.illuminations-for-developers.com/) and [App Inspector for Sencha](https://chrome.google.com/webstore/detail/app-inspector-for-sencha/pbeapidedgdpniokbedbfbaacglkceae?hl=en).\n\nDo you quickly want to prototype something? Try [Sencha Fiddle](http://fiddle.sencha.com). There are great tools for testing available, such as [Siesta](http://www.bryntum.com/products/siesta/).\n\nAnd last but not least, if none of these techniques help you and you are staring at your code for hours (or even days)... take a break! Often, when you take a break and free your mind, you can solve it right away. Especially if you’ve made spelling mistakes or (case sensitive) typos that can cause hours of frustration because you just don’t see them.\n\nLooking for more help? Check out one of the Sencha Ext JS and Sencha Touch [training classes](http://www.sencha.com/training) located around the world, or join an online class.","source":"_drafts/how-tos/simple-techniques-for-solving-common-sencha-coding-problems.md","raw":"---\ntitle: Simple Techniques for Solving Common Sencha Coding Problems\ntags:\n  - Ext JS\n  - problem solving\n  - Sencha\n  - Sencha Touch\n  - troubleshooting\nurl: 436.html\nid: 436\ncategories:\n  - Ext JS\n  - JavaScript\n  - Sencha\n  - Sencha Components\n  - Sencha Touch\n  - TDD\ndate: 2014-05-22 11:01:55\n---\n\nOften when I’m teaching a Sencha Training class, students ask me to look at their apps because there’s a problem they don’t know how to fix. Since I didn’t write the code, it’s hard sometimes for me to give them a quick answer. However, I do have a set of simple techniques that filter out the most obvious problems.\n\nIn this tip, I’ll categorize a couple of most common problems and tackle them with some simple but effective strategies.\n\n### Problem: “I don’t see my data”\n\nYou are browsing through your app, but the data is not visible. Often, this problem is easy to fix.\n\n#### “Here, try this:”\n\nFirst, try to inspect the Store. You can do this from the browser console by running:\n\nExt.getStore(‘MyStore’).load();\n\nThis returns the Store object. You can drill through the data config and see if the array length is greater than zero.\n\nIf there is data available, something probably went wrong with rendering. Consider these possible issues:\n\nDo the data fields map the fields in the Model?\n\nIs the data array empty? In your browser developer toolbar, hit the Network tab. Do you get a status code 200? No? Then something went wrong with your request. Check your Model/Store proxy.\n\nThe request works correctly, but it still doesn’t display the data? Verify whether the data you get back is valid. For example, when you are using JSON data, you can copy the data response from the browser network tab into [http://jsonlint.com](http://jsonlint.com) or [http://jsonplint.com/](http://jsonplint.com). You can also use your own written test data too.\n\n### Problem: “I can’t build my app”\n\nSencha Cmd won’t build your app. Most of the time, Sencha Cmd gives a clear explanation of what’s going on, or what needs to be changed. However, every now and then, I see problems where Sencha Cmd won’t build. and the error description is not clear. It might be that there is nothing wrong with your code. For example, your code runs perfectly on your local environment. It just won’t build.\n\n#### “Here, try this:”\n\nThis trick is pretty radical, but most of the time it works. Generate a new application with the same namespace from the command line:\n\nsencha generate app App ../myapp\n\nNext, copy over the app folder, and make sure you take the changes over from app.js. Now try it again!\n\n### Problem: “Strange component-x behavior”\n\nThese types of problems are always the hardest ones. For example, suddenly multiple scrollbars show up in your grid. Or, you see a tab panel with the wrong styling. Testing these kind of problems within your app can be time consuming. Not only do you have to navigate through your app to get to this problem, there can also be many reasons why it’s broken.\n\n#### “Here, try this:”\n\nA common problem-solving technique for developers is to isolate the problem into smaller, more manageable chunks.\n\n##### Isolate the problem\n\nLet’s generate a new application with Sencha Cmd, again with the same namespace. Now, copy over the Class that contains the problems and test it. Do you see the same bugs? You can try to solve it in this test app. You can isolate it even further by trying to re-build your class from the ground up. Start with only the necessary code.\n\nDid it work? There is nothing wrong with the framework, and there is nothing wrong with this Class. Something else must be wrong.\n\n##### Switch to the default theme\n\nGo back to your own app and try to switch to one of the Sencha default stylesheets. (Sencha Default StyleSheet in Sencha Touch, Neptune Theme in Ext JS) Does it finally work? Then there is something wrong in your custom StyleSheet. Is it still not working? At least now you know that your custom StyleSheet is correct. There might be something wrong with your nesting. Or maybe you used the wrong layout?\n\n##### Query for Components\n\nDo you have problems with querying for Components? You can easily query components from your browsers dev console:\n\nExt.ComponentQuery.query('button\\[action=”test”\\]');\n\nDoes it return an empty array? Then there you go! Or maybe it does return the components, but you made a timing mistake. That can often be the case when you’re working with callbacks. When your code is executed, the component may not be rendered on the screen.\n\n#### Common Debugging Techniques\n\nAs a developer, you will often run into bugs and problems that you have to solve. But hey, that’s what makes our jobs challenging, right?\n\nAside from the above mentioned techniques, there are also a couple of standard tricks. First of all, know the framework and know your tools. Read the API Docs (or even better, browse through the framework code).\n\nSwitch to one of the debugging frameworks. The advantage is that it often shows extra log messages, and you can directly read through the framework code. For Sencha Touch projects, open app.json and change the framework temporarily:\n\n\"js\": \\[\n{\n\"path\": \"../touch/sencha-touch-all-debug.js\",\n\"x-bootstrap\": true\n},\n\nFor Ext JS projects, open **index.html** and change the framework temporarily:\n\nYour browser dev tools can help (Google Chrome or Firebug). Also, there are some handy plugins for developing Sencha code: [Illuminations](http://www.illuminations-for-developers.com/) and [App Inspector for Sencha](https://chrome.google.com/webstore/detail/app-inspector-for-sencha/pbeapidedgdpniokbedbfbaacglkceae?hl=en).\n\nDo you quickly want to prototype something? Try [Sencha Fiddle](http://fiddle.sencha.com). There are great tools for testing available, such as [Siesta](http://www.bryntum.com/products/siesta/).\n\nAnd last but not least, if none of these techniques help you and you are staring at your code for hours (or even days)... take a break! Often, when you take a break and free your mind, you can solve it right away. Especially if you’ve made spelling mistakes or (case sensitive) typos that can cause hours of frustration because you just don’t see them.\n\nLooking for more help? Check out one of the Sencha Ext JS and Sencha Touch [training classes](http://www.sencha.com/training) located around the world, or join an online class.","slug":"how-tos/simple-techniques-for-solving-common-sencha-coding-problems","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncuy00ihkif5ub6fcmp1","content":"<p>Often when I’m teaching a Sencha Training class, students ask me to look at\n  their apps because there’s a problem they don’t know how to fix. Since I\n  didn’t write the code, it’s hard sometimes for me to give them a quick\n  answer. However, I do have a set of simple techniques that filter out the\n  most obvious problems.</p>\n<p>In this tip, I’ll categorize a couple of most common problems and tackle\n  them with some simple but effective strategies.</p>\n<h3 id=\"Problem-“I-don’t-see-my-data”\"><a href=\"#Problem-“I-don’t-see-my-data”\" class=\"headerlink\" title=\"Problem: “I don’t see my data”\"></a>Problem:\n  “I don’t see my data”</h3>\n<p>You are browsing through your app, but the data is not visible. Often, this\n  problem is easy to fix.</p>\n<h4 id=\"“Here-try-this-”\"><a href=\"#“Here-try-this-”\" class=\"headerlink\" title=\"“Here, try this:”\"></a>“Here,\n  try this:”</h4>\n<p>First, try to inspect the Store. You can do this from the browser console by\n  running:</p>\n<p>Ext.getStore(‘MyStore’).load();</p>\n<p>This returns the Store object. You can drill through the data config and see\n  if the array length is greater than zero.</p>\n<p>If there is data available, something probably went wrong with rendering.\n  Consider these possible issues:</p>\n<p>Do the data fields map the fields in the Model?</p>\n<p>Is the data array empty? In your browser developer toolbar, hit the Network\n  tab. Do you get a status code 200? No? Then something went wrong with your\n  request. Check your Model/Store proxy.</p>\n<p>The request works correctly, but it still doesn’t display the data? Verify\n  whether the data you get back is valid. For example, when you are using JSON\n  data, you can copy the data response from the browser network tab into <a href=\"http://jsonlint.com\" target=\"_blank\" rel=\"noopener\">http://jsonlint.com</a>\n  or <a href=\"http://jsonplint.com\" target=\"_blank\" rel=\"noopener\">http://jsonplint.com/</a>. You can also use\n  your own written test data too.</p>\n<h3 id=\"Problem-“I-can’t-build-my-app”\"><a href=\"#Problem-“I-can’t-build-my-app”\" class=\"headerlink\" title=\"Problem: “I can’t build my app”\"></a>Problem:\n  “I can’t build my app”</h3>\n<p>Sencha Cmd won’t build your app. Most of the time, Sencha Cmd gives a clear\n  explanation of what’s going on, or what needs to be changed. However, every\n  now and then, I see problems where Sencha Cmd won’t build. and the error\n  description is not clear. It might be that there is nothing wrong with your\n  code. For example, your code runs perfectly on your local environment. It\n  just won’t build.</p>\n<h4 id=\"“Here-try-this-”-1\"><a href=\"#“Here-try-this-”-1\" class=\"headerlink\" title=\"“Here, try this:”\"></a>“Here,\n  try this:”</h4>\n<p>This trick is pretty radical, but most of the time it works. Generate a new\n  application with the same namespace from the command line:</p>\n<p>sencha generate app App ../myapp</p>\n<p>Next, copy over the app folder, and make sure you take the changes over from\n  app.js. Now try it again!</p>\n<h3 id=\"Problem-“Strange-component-x-behavior”\"><a href=\"#Problem-“Strange-component-x-behavior”\" class=\"headerlink\" title=\"Problem: “Strange component-x behavior”\"></a>Problem:\n  “Strange component-x behavior”</h3>\n<p>These types of problems are always the hardest ones. For example, suddenly\n  multiple scrollbars show up in your grid. Or, you see a tab panel with the\n  wrong styling. Testing these kind of problems within your app can be time\n  consuming. Not only do you have to navigate through your app to get to this\n  problem, there can also be many reasons why it’s broken.</p>\n<h4 id=\"“Here-try-this-”-2\"><a href=\"#“Here-try-this-”-2\" class=\"headerlink\" title=\"“Here, try this:”\"></a>“Here,\n  try this:”</h4>\n<p>A common problem-solving technique for developers is to isolate the problem\n  into smaller, more manageable chunks.</p>\n<h5 id=\"Isolate-the-problem\"><a href=\"#Isolate-the-problem\" class=\"headerlink\" title=\"Isolate the problem\"></a>Isolate\n  the problem</h5>\n<p>Let’s generate a new application with Sencha Cmd, again with the same\n  namespace. Now, copy over the Class that contains the problems and test it.\n  Do you see the same bugs? You can try to solve it in this test app. You can\n  isolate it even further by trying to re-build your class from the ground up.\n  Start with only the necessary code.</p>\n<p>Did it work? There is nothing wrong with the framework, and there is nothing\n  wrong with this Class. Something else must be wrong.</p>\n<h5 id=\"Switch-to-the-default-theme\"><a href=\"#Switch-to-the-default-theme\" class=\"headerlink\" title=\"Switch to the default theme\"></a>Switch\n  to the default theme</h5>\n<p>Go back to your own app and try to switch to one of the Sencha default\n  stylesheets. (Sencha Default StyleSheet in Sencha Touch, Neptune Theme in Ext\n  JS) Does it finally work? Then there is something wrong in your custom\n  StyleSheet. Is it still not working? At least now you know that your custom\n  StyleSheet is correct. There might be something wrong with your nesting. Or\n  maybe you used the wrong layout?</p>\n<h5 id=\"Query-for-Components\"><a href=\"#Query-for-Components\" class=\"headerlink\" title=\"Query for Components\"></a>Query\n  for Components</h5>\n<p>Do you have problems with querying for Components? You can easily query\n  components from your browsers dev console:</p>\n<p>Ext.ComponentQuery.query(‘button[action=”test”]‘);</p>\n<p>Does it return an empty array? Then there you go! Or maybe it does return\n  the components, but you made a timing mistake. That can often be the case\n  when you’re working with callbacks. When your code is executed, the component\n  may not be rendered on the screen.</p>\n<h4 id=\"Common-Debugging-Techniques\"><a href=\"#Common-Debugging-Techniques\" class=\"headerlink\" title=\"Common Debugging Techniques\"></a>Common\n  Debugging Techniques</h4>\n<p>As a developer, you will often run into bugs and problems that you have to\n  solve. But hey, that’s what makes our jobs challenging, right?</p>\n<p>Aside from the above mentioned techniques, there are also a couple of\n  standard tricks. First of all, know the framework and know your tools. Read\n  the API Docs (or even better, browse through the framework code).</p>\n<p>Switch to one of the debugging frameworks. The advantage is that it often\n  shows extra log messages, and you can directly read through the framework\n  code. For Sencha Touch projects, open app.json and change the framework\n  temporarily:</p>\n<p>“js”: [ { “path”: “../touch/sencha-touch-all-debug.js”, “x-bootstrap”: true\n  },</p>\n<p>For Ext JS projects, open <strong>index.html</strong> and change the\n  framework temporarily:</p>\n<p>Your browser dev tools can help (Google Chrome or Firebug). Also, there are\n  some handy plugins for developing Sencha code: <a href=\"http://www.illuminations-for-developers.com/\" target=\"_blank\" rel=\"noopener\">Illuminations</a>\n  and <a href=\"https://chrome.google.com/webstore/detail/app-inspector-for-sencha/pbeapidedgdpniokbedbfbaacglkceae?hl=en\" target=\"_blank\" rel=\"noopener\">App\n    Inspector for Sencha</a>.</p>\n<p>Do you quickly want to prototype something? Try <a href=\"http://fiddle.sencha.com\" target=\"_blank\" rel=\"noopener\">Sencha\n    Fiddle</a>. There are great tools for testing available, such as <a href=\"http://www.bryntum.com/products/siesta/\" target=\"_blank\" rel=\"noopener\">Siesta</a>.</p>\n<p>And last but not least, if none of these techniques help you and you are\n  staring at your code for hours (or even days)… take a break! Often, when you\n  take a break and free your mind, you can solve it right away. Especially if\n  you’ve made spelling mistakes or (case sensitive) typos that can cause hours\n  of frustration because you just don’t see them.</p>\n<p>Looking for more help? Check out one of the Sencha Ext JS and Sencha Touch\n  <a href=\"http://www.sencha.com/training\" target=\"_blank\" rel=\"noopener\">training classes</a> located around\n  the world, or join an online class.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Often when I’m teaching a Sencha Training class, students ask me to look at\n  their apps because there’s a problem they don’t know how to fix. Since I\n  didn’t write the code, it’s hard sometimes for me to give them a quick\n  answer. However, I do have a set of simple techniques that filter out the\n  most obvious problems.</p>\n<p>In this tip, I’ll categorize a couple of most common problems and tackle\n  them with some simple but effective strategies.</p>\n<h3 id=\"Problem-“I-don’t-see-my-data”\"><a href=\"#Problem-“I-don’t-see-my-data”\" class=\"headerlink\" title=\"Problem: “I don’t see my data”\"></a>Problem:\n  “I don’t see my data”</h3>\n<p>You are browsing through your app, but the data is not visible. Often, this\n  problem is easy to fix.</p>\n<h4 id=\"“Here-try-this-”\"><a href=\"#“Here-try-this-”\" class=\"headerlink\" title=\"“Here, try this:”\"></a>“Here,\n  try this:”</h4>\n<p>First, try to inspect the Store. You can do this from the browser console by\n  running:</p>\n<p>Ext.getStore(‘MyStore’).load();</p>\n<p>This returns the Store object. You can drill through the data config and see\n  if the array length is greater than zero.</p>\n<p>If there is data available, something probably went wrong with rendering.\n  Consider these possible issues:</p>\n<p>Do the data fields map the fields in the Model?</p>\n<p>Is the data array empty? In your browser developer toolbar, hit the Network\n  tab. Do you get a status code 200? No? Then something went wrong with your\n  request. Check your Model/Store proxy.</p>\n<p>The request works correctly, but it still doesn’t display the data? Verify\n  whether the data you get back is valid. For example, when you are using JSON\n  data, you can copy the data response from the browser network tab into <a href=\"http://jsonlint.com\" target=\"_blank\" rel=\"noopener\">http://jsonlint.com</a>\n  or <a href=\"http://jsonplint.com\" target=\"_blank\" rel=\"noopener\">http://jsonplint.com/</a>. You can also use\n  your own written test data too.</p>\n<h3 id=\"Problem-“I-can’t-build-my-app”\"><a href=\"#Problem-“I-can’t-build-my-app”\" class=\"headerlink\" title=\"Problem: “I can’t build my app”\"></a>Problem:\n  “I can’t build my app”</h3>\n<p>Sencha Cmd won’t build your app. Most of the time, Sencha Cmd gives a clear\n  explanation of what’s going on, or what needs to be changed. However, every\n  now and then, I see problems where Sencha Cmd won’t build. and the error\n  description is not clear. It might be that there is nothing wrong with your\n  code. For example, your code runs perfectly on your local environment. It\n  just won’t build.</p>\n<h4 id=\"“Here-try-this-”-1\"><a href=\"#“Here-try-this-”-1\" class=\"headerlink\" title=\"“Here, try this:”\"></a>“Here,\n  try this:”</h4>\n<p>This trick is pretty radical, but most of the time it works. Generate a new\n  application with the same namespace from the command line:</p>\n<p>sencha generate app App ../myapp</p>\n<p>Next, copy over the app folder, and make sure you take the changes over from\n  app.js. Now try it again!</p>\n<h3 id=\"Problem-“Strange-component-x-behavior”\"><a href=\"#Problem-“Strange-component-x-behavior”\" class=\"headerlink\" title=\"Problem: “Strange component-x behavior”\"></a>Problem:\n  “Strange component-x behavior”</h3>\n<p>These types of problems are always the hardest ones. For example, suddenly\n  multiple scrollbars show up in your grid. Or, you see a tab panel with the\n  wrong styling. Testing these kind of problems within your app can be time\n  consuming. Not only do you have to navigate through your app to get to this\n  problem, there can also be many reasons why it’s broken.</p>\n<h4 id=\"“Here-try-this-”-2\"><a href=\"#“Here-try-this-”-2\" class=\"headerlink\" title=\"“Here, try this:”\"></a>“Here,\n  try this:”</h4>\n<p>A common problem-solving technique for developers is to isolate the problem\n  into smaller, more manageable chunks.</p>\n<h5 id=\"Isolate-the-problem\"><a href=\"#Isolate-the-problem\" class=\"headerlink\" title=\"Isolate the problem\"></a>Isolate\n  the problem</h5>\n<p>Let’s generate a new application with Sencha Cmd, again with the same\n  namespace. Now, copy over the Class that contains the problems and test it.\n  Do you see the same bugs? You can try to solve it in this test app. You can\n  isolate it even further by trying to re-build your class from the ground up.\n  Start with only the necessary code.</p>\n<p>Did it work? There is nothing wrong with the framework, and there is nothing\n  wrong with this Class. Something else must be wrong.</p>\n<h5 id=\"Switch-to-the-default-theme\"><a href=\"#Switch-to-the-default-theme\" class=\"headerlink\" title=\"Switch to the default theme\"></a>Switch\n  to the default theme</h5>\n<p>Go back to your own app and try to switch to one of the Sencha default\n  stylesheets. (Sencha Default StyleSheet in Sencha Touch, Neptune Theme in Ext\n  JS) Does it finally work? Then there is something wrong in your custom\n  StyleSheet. Is it still not working? At least now you know that your custom\n  StyleSheet is correct. There might be something wrong with your nesting. Or\n  maybe you used the wrong layout?</p>\n<h5 id=\"Query-for-Components\"><a href=\"#Query-for-Components\" class=\"headerlink\" title=\"Query for Components\"></a>Query\n  for Components</h5>\n<p>Do you have problems with querying for Components? You can easily query\n  components from your browsers dev console:</p>\n<p>Ext.ComponentQuery.query(‘button[action=”test”]‘);</p>\n<p>Does it return an empty array? Then there you go! Or maybe it does return\n  the components, but you made a timing mistake. That can often be the case\n  when you’re working with callbacks. When your code is executed, the component\n  may not be rendered on the screen.</p>\n<h4 id=\"Common-Debugging-Techniques\"><a href=\"#Common-Debugging-Techniques\" class=\"headerlink\" title=\"Common Debugging Techniques\"></a>Common\n  Debugging Techniques</h4>\n<p>As a developer, you will often run into bugs and problems that you have to\n  solve. But hey, that’s what makes our jobs challenging, right?</p>\n<p>Aside from the above mentioned techniques, there are also a couple of\n  standard tricks. First of all, know the framework and know your tools. Read\n  the API Docs (or even better, browse through the framework code).</p>\n<p>Switch to one of the debugging frameworks. The advantage is that it often\n  shows extra log messages, and you can directly read through the framework\n  code. For Sencha Touch projects, open app.json and change the framework\n  temporarily:</p>\n<p>“js”: [ { “path”: “../touch/sencha-touch-all-debug.js”, “x-bootstrap”: true\n  },</p>\n<p>For Ext JS projects, open <strong>index.html</strong> and change the\n  framework temporarily:</p>\n<p>Your browser dev tools can help (Google Chrome or Firebug). Also, there are\n  some handy plugins for developing Sencha code: <a href=\"http://www.illuminations-for-developers.com/\" target=\"_blank\" rel=\"noopener\">Illuminations</a>\n  and <a href=\"https://chrome.google.com/webstore/detail/app-inspector-for-sencha/pbeapidedgdpniokbedbfbaacglkceae?hl=en\" target=\"_blank\" rel=\"noopener\">App\n    Inspector for Sencha</a>.</p>\n<p>Do you quickly want to prototype something? Try <a href=\"http://fiddle.sencha.com\" target=\"_blank\" rel=\"noopener\">Sencha\n    Fiddle</a>. There are great tools for testing available, such as <a href=\"http://www.bryntum.com/products/siesta/\" target=\"_blank\" rel=\"noopener\">Siesta</a>.</p>\n<p>And last but not least, if none of these techniques help you and you are\n  staring at your code for hours (or even days)… take a break! Often, when you\n  take a break and free your mind, you can solve it right away. Especially if\n  you’ve made spelling mistakes or (case sensitive) typos that can cause hours\n  of frustration because you just don’t see them.</p>\n<p>Looking for more help? Check out one of the Sencha Ext JS and Sencha Touch\n  <a href=\"http://www.sencha.com/training\" target=\"_blank\" rel=\"noopener\">training classes</a> located around\n  the world, or join an online class.</p>\n"},{"title":"Setup JSLint for Eclipse/Aptana","url":"62.html","id":"62","date":"2011-06-19T05:50:18.000Z","_content":"\nJSLint @ https://github.com/douglascrockford/JSLint\n\n1.  Preferences\n    \n2.  Filter for validation\n    \n3.  Check Javascript & enable JSLint.\n    \n\nMake sure your error tab open, to view your js.","source":"_drafts/how-tos/setup-jslint-for-eclipseaptana.md","raw":"---\ntitle: Setup JSLint for Eclipse/Aptana\ntags:\n  - Aptana\n  - JSLint\n  - Tools\nurl: 62.html\nid: 62\ncategories:\n  - Environment\ndate: 2011-06-19 07:50:18\n---\n\nJSLint @ https://github.com/douglascrockford/JSLint\n\n1.  Preferences\n    \n2.  Filter for validation\n    \n3.  Check Javascript & enable JSLint.\n    \n\nMake sure your error tab open, to view your js.","slug":"how-tos/setup-jslint-for-eclipseaptana","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncuz00ikkif5oncn6bd9","content":"<p>JSLint @ <a href=\"https://github.com/douglascrockford/JSLint\" target=\"_blank\" rel=\"noopener\">https://github.com/douglascrockford/JSLint</a></p>\n<ol>\n  <li>\n    <p>Preferences</p>\n  </li>\n  <li>\n    <p>Filter for validation</p>\n  </li>\n  <li>\n    <p>Check Javascript &amp; enable JSLint.</p>\n  </li>\n</ol>\n<p>Make sure your error tab open, to view your js.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>JSLint @ <a href=\"https://github.com/douglascrockford/JSLint\" target=\"_blank\" rel=\"noopener\">https://github.com/douglascrockford/JSLint</a></p>\n<ol>\n  <li>\n    <p>Preferences</p>\n  </li>\n  <li>\n    <p>Filter for validation</p>\n  </li>\n  <li>\n    <p>Check Javascript &amp; enable JSLint.</p>\n  </li>\n</ol>\n<p>Make sure your error tab open, to view your js.</p>\n"},{"title":"Setup Jasmine TDD with for Ext JS","url":"191.html","id":"191","date":"2012-12-07T18:39:20.000Z","_content":"\n1\\. Download Jasmine standalone: [https://github.com/pivotal/jasmine/downloads](https://github.com/pivotal/jasmine/downloads) 2\\. In your ExtJS project folder create a folder: **app-test** and place it next to the app folder. 3. In your Ext JS app-test folder, create the following file: app-test.js (make sure it stands next to the **app.js** file.) 4. Unzip the Jasmine download. Copy the lib folder (which contains jasmine-1.x.x folder) into app-test. 5. Create in your project folder the file: index-test.html With the following markup:\n\n< !DOCTYPE HTML>\n<html>\n<head>\n   <meta charset=\"UTF-8\">\n   <title>Tester</title>\n   <link rel=\"stylesheet\" type=\"text/css\" href=\"app-test/lib/jasmine-1.3.1/jasmine.css\">\n   <script type=\"text/javascript\" src=\"ext/ext-debug.js\">\n\n   <script type=\"text/javascript\" src=\"app-test/lib/jasmine-1.3.1/jasmine.js\">\n   <script type=\"text/javascript\" src=\"app-test/lib/jasmine-1.3.1/jasmine-html.js\">\n\n   <!\\-\\- include specs here -->\n\n   <!\\-\\- test launcher -->\n   <script type=\"text/javascript\" src=\"app-test/app-test.js\">\n</link></meta></head>\n<body></body>\n</html>\n\nEDITED: Due, to issues with the wordpress editor, please see: http://www.sicom.com/~ahuszko/markup.txt (I'm using Jasmine version 1.3.1) If you are using a different version, please make sure the framework files are correctly linked. 6. Now open your browser and navigate to the index-test.html page. If everything is correctly installed; you should see a test pass page with: 0 specs, 0 failures in 0s. You're ready to create your TDD tests. Read more in the following blogpost:","source":"_drafts/how-tos/setup-jasmine-tdd-with-for-ext-js.md","raw":"---\ntitle: Setup Jasmine TDD with for Ext JS\ntags:\n  - Ext JS\n  - Jasmine\n  - TDD\n  - Test Driven Development for JavaScript\n  - Unit Test\nurl: 191.html\nid: 191\ncategories:\n  - Environment\n  - Ext JS\n  - Jasmine\n  - TDD\ndate: 2012-12-07 19:39:20\n---\n\n1\\. Download Jasmine standalone: [https://github.com/pivotal/jasmine/downloads](https://github.com/pivotal/jasmine/downloads) 2\\. In your ExtJS project folder create a folder: **app-test** and place it next to the app folder. 3. In your Ext JS app-test folder, create the following file: app-test.js (make sure it stands next to the **app.js** file.) 4. Unzip the Jasmine download. Copy the lib folder (which contains jasmine-1.x.x folder) into app-test. 5. Create in your project folder the file: index-test.html With the following markup:\n\n< !DOCTYPE HTML>\n<html>\n<head>\n   <meta charset=\"UTF-8\">\n   <title>Tester</title>\n   <link rel=\"stylesheet\" type=\"text/css\" href=\"app-test/lib/jasmine-1.3.1/jasmine.css\">\n   <script type=\"text/javascript\" src=\"ext/ext-debug.js\">\n\n   <script type=\"text/javascript\" src=\"app-test/lib/jasmine-1.3.1/jasmine.js\">\n   <script type=\"text/javascript\" src=\"app-test/lib/jasmine-1.3.1/jasmine-html.js\">\n\n   <!\\-\\- include specs here -->\n\n   <!\\-\\- test launcher -->\n   <script type=\"text/javascript\" src=\"app-test/app-test.js\">\n</link></meta></head>\n<body></body>\n</html>\n\nEDITED: Due, to issues with the wordpress editor, please see: http://www.sicom.com/~ahuszko/markup.txt (I'm using Jasmine version 1.3.1) If you are using a different version, please make sure the framework files are correctly linked. 6. Now open your browser and navigate to the index-test.html page. If everything is correctly installed; you should see a test pass page with: 0 specs, 0 failures in 0s. You're ready to create your TDD tests. Read more in the following blogpost:","slug":"how-tos/setup-jasmine-tdd-with-for-ext-js","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncv100inkif5l6yqrffd","content":"<p>1. Download Jasmine standalone: <a href=\"https://github.com/pivotal/jasmine/downloads\" target=\"_blank\" rel=\"noopener\">https://github.com/pivotal/jasmine/downloads</a>\n  2. In your ExtJS project folder create a folder: <strong>app-test</strong>\n  and place it next to the app folder. 3. In your Ext JS app-test folder,\n  create the following file: app-test.js (make sure it stands next to the\n  <strong>app.js</strong> file.) 4. Unzip the Jasmine download. Copy the lib\n  folder (which contains jasmine-1.x.x folder) into app-test. 5. Create in your\n  project folder the file: index-test.html With the following markup:</p>\n<p>&lt; !DOCTYPE HTML&gt;</p>\n<html>\n\n<head>\n  <meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta charset=\"UTF-8\">\n  <title>Tester</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"app-test/lib/jasmine-1.3.1/jasmine.css\">\n  <script type=\"text/javascript\" src=\"ext/ext-debug.js\">\n    < script type = \"text/javascript\"\n    src = \"app-test/lib/jasmine-1.3.1/jasmine.js\" >\n      <\n      script type = \"text/javascript\"\n    src = \"app-test/lib/jasmine-1.3.1/jasmine-html.js\" >\n      &\n      lt;\n    !--include specs here– & gt; &\n    lt;\n    !--test launcher– & gt; <\n    script type = \"text/javascript\"\n    src = \"app-test/app-test.js\" >\n      <\n      /link></meta > < /head> <\n      body > < /body> <\n      /html> <\n      p > EDITED: Due, to issues with the wordpress editor, please see: < a href =\n      \"http://www.sicom.com/~ahuszko/markup.txt\" > http: //www.sicom.com/~ahuszko/markup.txt</a> (I’m using Jasmine version 1.3.1) If you are using a different version, please make sure the framework files are correctly linked. 6. Now open your browser and navigate to the index-test.html page. If everything is correctly installed; you should see a test pass page with: 0 specs, 0 failures in 0s. You’re ready to create your TDD tests. Read more in the following blogpost:</p>\n\n  </script>\n</head>\n\n</html>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>1. Download Jasmine standalone: <a href=\"https://github.com/pivotal/jasmine/downloads\" target=\"_blank\" rel=\"noopener\">https://github.com/pivotal/jasmine/downloads</a>\n  2. In your ExtJS project folder create a folder: <strong>app-test</strong>\n  and place it next to the app folder. 3. In your Ext JS app-test folder,\n  create the following file: app-test.js (make sure it stands next to the\n  <strong>app.js</strong> file.) 4. Unzip the Jasmine download. Copy the lib\n  folder (which contains jasmine-1.x.x folder) into app-test. 5. Create in your\n  project folder the file: index-test.html With the following markup:</p>\n<p>&lt; !DOCTYPE HTML&gt;</p>\n<html>\n\n<head>\n  <meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta charset=\"UTF-8\">\n  <title>Tester</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"app-test/lib/jasmine-1.3.1/jasmine.css\">\n  <script type=\"text/javascript\" src=\"ext/ext-debug.js\">\n    < script type = \"text/javascript\"\n    src = \"app-test/lib/jasmine-1.3.1/jasmine.js\" >\n      <\n      script type = \"text/javascript\"\n    src = \"app-test/lib/jasmine-1.3.1/jasmine-html.js\" >\n      &\n      lt;\n    !--include specs here– & gt; &\n    lt;\n    !--test launcher– & gt; <\n    script type = \"text/javascript\"\n    src = \"app-test/app-test.js\" >\n      <\n      /link></meta > < /head> <\n      body > < /body> <\n      /html> <\n      p > EDITED: Due, to issues with the wordpress editor, please see: < a href =\n      \"http://www.sicom.com/~ahuszko/markup.txt\" > http: //www.sicom.com/~ahuszko/markup.txt</a> (I’m using Jasmine version 1.3.1) If you are using a different version, please make sure the framework files are correctly linked. 6. Now open your browser and navigate to the index-test.html page. If everything is correctly installed; you should see a test pass page with: 0 specs, 0 failures in 0s. You’re ready to create your TDD tests. Read more in the following blogpost:</p>\n\n  </script>\n</head>\n\n</html>\n"},{"title":"Start theming Sencha with SASS Compass on MAC OSX","url":"59.html","id":"59","date":"2011-07-17T09:22:36.000Z","_content":"\n**Install Chunky_PNG**\n\nsudo gem install chunky_png\n\n**Install Compass**\n\nsudo gem install compass\n\n**Download Sencha Touch Framework, and open in an editor**\n\n/sencha-touch-1.1.0/resources/sass/\n\nYou can edit this file now, for example add in sencha-touch.scss the following line, to add music masking icons:\n\n@include pictos-iconmask(music1);\n\nAll icons you can create can be found in the following folder:  \n/sencha-touch-1.1.0/resources/themes/images/default/pictos/\n\nCompile your Compass stylesheet to a normal .css file, to include in your page  \nNavigate with your terminal to sencha-touch-1.1.0/resources/sass/  \nType:\n\ncompass compile\n\nNow you can copy over the sencha-touch.css file to your project folder, with new icons.","source":"_drafts/how-tos/start-theming-sencha-with-sass-compass-on-macosx.md","raw":"---\ntitle: Start theming Sencha with SASS Compass on MAC OSX\ntags:\n  - CSS3\n  - Sass\nurl: 59.html\nid: 59\ncategories:\n  - Sass\ndate: 2011-07-17 11:22:36\n---\n\n**Install Chunky_PNG**\n\nsudo gem install chunky_png\n\n**Install Compass**\n\nsudo gem install compass\n\n**Download Sencha Touch Framework, and open in an editor**\n\n/sencha-touch-1.1.0/resources/sass/\n\nYou can edit this file now, for example add in sencha-touch.scss the following line, to add music masking icons:\n\n@include pictos-iconmask(music1);\n\nAll icons you can create can be found in the following folder:  \n/sencha-touch-1.1.0/resources/themes/images/default/pictos/\n\nCompile your Compass stylesheet to a normal .css file, to include in your page  \nNavigate with your terminal to sencha-touch-1.1.0/resources/sass/  \nType:\n\ncompass compile\n\nNow you can copy over the sencha-touch.css file to your project folder, with new icons.","slug":"how-tos/start-theming-sencha-with-sass-compass-on-macosx","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncv200iqkif5kcbqu4wt","content":"<p><strong>Install Chunky_PNG</strong></p>\n<p>sudo gem install chunky_png</p>\n<p><strong>Install Compass</strong></p>\n<p>sudo gem install compass</p>\n<p><strong>Download Sencha Touch Framework, and open in an editor</strong></p>\n<p>/sencha-touch-1.1.0/resources/sass/</p>\n<p>You can edit this file now, for example add in sencha-touch.scss the\n  following line, to add music masking icons:</p>\n<p>@include pictos-iconmask(music1);</p>\n<p>All icons you can create can be found in the following folder:<br>/sencha-touch-1.1.0/resources/themes/images/default/pictos/</p>\n<p>Compile your Compass stylesheet to a normal .css file, to include in your\n  page<br>Navigate with your terminal to sencha-touch-1.1.0/resources/sass/<br>Type:</p>\n<p>compass compile</p>\n<p>Now you can copy over the sencha-touch.css file to your project folder, with\n  new icons.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p><strong>Install Chunky_PNG</strong></p>\n<p>sudo gem install chunky_png</p>\n<p><strong>Install Compass</strong></p>\n<p>sudo gem install compass</p>\n<p><strong>Download Sencha Touch Framework, and open in an editor</strong></p>\n<p>/sencha-touch-1.1.0/resources/sass/</p>\n<p>You can edit this file now, for example add in sencha-touch.scss the\n  following line, to add music masking icons:</p>\n<p>@include pictos-iconmask(music1);</p>\n<p>All icons you can create can be found in the following folder:<br>/sencha-touch-1.1.0/resources/themes/images/default/pictos/</p>\n<p>Compile your Compass stylesheet to a normal .css file, to include in your\n  page<br>Navigate with your terminal to sencha-touch-1.1.0/resources/sass/<br>Type:</p>\n<p>compass compile</p>\n<p>Now you can copy over the sencha-touch.css file to your project folder, with\n  new icons.</p>\n"},{"title":"Some Sencha news from me!","url":"541.html","id":"541","date":"2014-07-18T09:38:11.000Z","_content":"\nHi guys, I just wanted to share some personal Sencha updates with you! **Hands-on Sencha Touch 2 - O'Reilly**  \nFirst of all, my book \"Hands-on Sencha Touch\" is finally printed. I spent a lot of time, discussing the latest Sencha Touch framework and with this book it's possible to build mobile web applications. Checkout the table of contents at: [http://shop.oreilly.com/product/0636920030058.do](http://shop.oreilly.com/product/0636920030058.do) If you like my writing style. I am developing ideas for writing an advanced Ext JS 5 book! **Ext JS 5 courses**  \nTalking about Ext JS 5, the new Sencha Ext JS framework... I've been very busy lately, developing course materials for various Ext JS 5 beginners & advanced courses. Learn Ext JS 5, the new MVVM application architecture (viewcontrollers + databinding woot woot!), how to upgrade to Ext JS 5 or how to develop huge enterprise apps for tablets with Ext JS version 5. Checkout our training schedule: [http://www.sencha.com/training/](http://www.sencha.com/training/ \"http://www.sencha.com/training/\") I will be teaching across all over Europe the next coming months: London, Paris, Frankfurt, Munich, Milan, Zurich, Amsterdam and of course Live Online! Interested? Leave a comment below, and I can give your some discount promo codes! **Conferences & Workshops**  \nFor the rest I'm presenting lately on a lot of workshops and conferences. Tomorrow I will host another appcamp for Appsterdam: [http://www.meetup.com/Appsterdam/events/184318382/](http://www.meetup.com/Appsterdam/events/184318382/) Come join and check this out! Also I will host a webinar for O'Reilly. Add the date to your calendar: [http://www.oreilly.com/pub/e/3100](http://www.oreilly.com/pub/e/3100 \"http://www.oreilly.com/pub/e/3100\")","source":"_drafts/how-tos/some-sencha-news-from-me.md","raw":"---\ntitle: Some Sencha news from me!\ntags:\n  - conferences\n  - discount\n  - ext\n  - extjs5\n  - hands-on sencha touch 2\n  - O'Reilly\n  - promocodes\n  - Sencha\n  - Sencha Touch\n  - sencha training\n  - trainings\n  - webinar\nurl: 541.html\nid: 541\ncategories:\n  - Ext JS 5\n  - Sencha\ndate: 2014-07-18 11:38:11\n---\n\nHi guys, I just wanted to share some personal Sencha updates with you! **Hands-on Sencha Touch 2 - O'Reilly**  \nFirst of all, my book \"Hands-on Sencha Touch\" is finally printed. I spent a lot of time, discussing the latest Sencha Touch framework and with this book it's possible to build mobile web applications. Checkout the table of contents at: [http://shop.oreilly.com/product/0636920030058.do](http://shop.oreilly.com/product/0636920030058.do) If you like my writing style. I am developing ideas for writing an advanced Ext JS 5 book! **Ext JS 5 courses**  \nTalking about Ext JS 5, the new Sencha Ext JS framework... I've been very busy lately, developing course materials for various Ext JS 5 beginners & advanced courses. Learn Ext JS 5, the new MVVM application architecture (viewcontrollers + databinding woot woot!), how to upgrade to Ext JS 5 or how to develop huge enterprise apps for tablets with Ext JS version 5. Checkout our training schedule: [http://www.sencha.com/training/](http://www.sencha.com/training/ \"http://www.sencha.com/training/\") I will be teaching across all over Europe the next coming months: London, Paris, Frankfurt, Munich, Milan, Zurich, Amsterdam and of course Live Online! Interested? Leave a comment below, and I can give your some discount promo codes! **Conferences & Workshops**  \nFor the rest I'm presenting lately on a lot of workshops and conferences. Tomorrow I will host another appcamp for Appsterdam: [http://www.meetup.com/Appsterdam/events/184318382/](http://www.meetup.com/Appsterdam/events/184318382/) Come join and check this out! Also I will host a webinar for O'Reilly. Add the date to your calendar: [http://www.oreilly.com/pub/e/3100](http://www.oreilly.com/pub/e/3100 \"http://www.oreilly.com/pub/e/3100\")","slug":"how-tos/some-sencha-news-from-me","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncv400itkif5s6dengf2","content":"<p>Hi guys, I just wanted to share some personal Sencha updates with you!\n  <strong>Hands-on Sencha Touch 2 - O’Reilly</strong><br>First of all, my book\n  “Hands-on Sencha Touch” is finally printed. I spent a lot of time, discussing\n  the latest Sencha Touch framework and with this book it’s possible to build\n  mobile web applications. Checkout the table of contents at: <a href=\"http://shop.oreilly.com/product/0636920030058.do\" target=\"_blank\" rel=\"noopener\">http://shop.oreilly.com/product/0636920030058.do</a>\n  If you like my writing style. I am developing ideas for writing an advanced\n  Ext JS 5 book! <strong>Ext JS 5 courses</strong><br>Talking about Ext JS 5,\n  the new Sencha Ext JS framework… I’ve been very busy lately, developing\n  course materials for various Ext JS 5 beginners &amp; advanced courses. Learn\n  Ext JS 5, the new MVVM application architecture (viewcontrollers +\n  databinding woot woot!), how to upgrade to Ext JS 5 or how to develop huge\n  enterprise apps for tablets with Ext JS version 5. Checkout our training\n  schedule: <a href=\"http://www.sencha.com/training/\" title=\"http://www.sencha.com/training/\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/training/</a>\n  I will be teaching across all over Europe the next coming months: London,\n  Paris, Frankfurt, Munich, Milan, Zurich, Amsterdam and of course Live Online!\n  Interested? Leave a comment below, and I can give your some discount promo\n  codes! <strong>Conferences &amp; Workshops</strong><br>For the rest I’m\n  presenting lately on a lot of workshops and conferences. Tomorrow I will host\n  another appcamp for Appsterdam: <a href=\"http://www.meetup.com/Appsterdam/events/184318382/\" target=\"_blank\" rel=\"noopener\">http://www.meetup.com/Appsterdam/events/184318382/</a>\n  Come join and check this out! Also I will host a webinar for O’Reilly. Add\n  the date to your calendar: <a href=\"http://www.oreilly.com/pub/e/3100\" title=\"http://www.oreilly.com/pub/e/3100\" target=\"_blank\" rel=\"noopener\">http://www.oreilly.com/pub/e/3100</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Hi guys, I just wanted to share some personal Sencha updates with you!\n  <strong>Hands-on Sencha Touch 2 - O’Reilly</strong><br>First of all, my book\n  “Hands-on Sencha Touch” is finally printed. I spent a lot of time, discussing\n  the latest Sencha Touch framework and with this book it’s possible to build\n  mobile web applications. Checkout the table of contents at: <a href=\"http://shop.oreilly.com/product/0636920030058.do\" target=\"_blank\" rel=\"noopener\">http://shop.oreilly.com/product/0636920030058.do</a>\n  If you like my writing style. I am developing ideas for writing an advanced\n  Ext JS 5 book! <strong>Ext JS 5 courses</strong><br>Talking about Ext JS 5,\n  the new Sencha Ext JS framework… I’ve been very busy lately, developing\n  course materials for various Ext JS 5 beginners &amp; advanced courses. Learn\n  Ext JS 5, the new MVVM application architecture (viewcontrollers +\n  databinding woot woot!), how to upgrade to Ext JS 5 or how to develop huge\n  enterprise apps for tablets with Ext JS version 5. Checkout our training\n  schedule: <a href=\"http://www.sencha.com/training/\" title=\"http://www.sencha.com/training/\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/training/</a>\n  I will be teaching across all over Europe the next coming months: London,\n  Paris, Frankfurt, Munich, Milan, Zurich, Amsterdam and of course Live Online!\n  Interested? Leave a comment below, and I can give your some discount promo\n  codes! <strong>Conferences &amp; Workshops</strong><br>For the rest I’m\n  presenting lately on a lot of workshops and conferences. Tomorrow I will host\n  another appcamp for Appsterdam: <a href=\"http://www.meetup.com/Appsterdam/events/184318382/\" target=\"_blank\" rel=\"noopener\">http://www.meetup.com/Appsterdam/events/184318382/</a>\n  Come join and check this out! Also I will host a webinar for O’Reilly. Add\n  the date to your calendar: <a href=\"http://www.oreilly.com/pub/e/3100\" title=\"http://www.oreilly.com/pub/e/3100\" target=\"_blank\" rel=\"noopener\">http://www.oreilly.com/pub/e/3100</a></p>\n"},{"title":"Unix / Mac OSX: How to find a strings in multiple files?","url":"2604.html","id":"2604","date":"2016-11-16T17:44:10.000Z","_content":"\nEver need to search through all your files for a certain word or phrase? You will need the \\*\\*grep\\*\\* command for this. Handy, and it's recursive, which means you can search through your entire directory tree, scanning every file along the way. \\`grep -r \"foo\" /mypath\\` The \"-r\" switch, tells \"grep\" to scan files in the current directory and all sub-directories. \\[https://en.wikipedia.org/wiki/Grep\\](https://en.wikipedia.org/wiki/Grep)","source":"_drafts/how-tos/unix-mac-osx-how-to-find-a-strings-in-multiple-files.md","raw":"---\ntitle: 'Unix / Mac OSX: How to find a strings in multiple files?'\ntags:\n  - grep\n  - Mac OSX\n  - Unix\nurl: 2604.html\nid: 2604\ncategories:\n  - Environment\n  - Unix\ndate: 2016-11-16 18:44:10\n---\n\nEver need to search through all your files for a certain word or phrase? You will need the \\*\\*grep\\*\\* command for this. Handy, and it's recursive, which means you can search through your entire directory tree, scanning every file along the way. \\`grep -r \"foo\" /mypath\\` The \"-r\" switch, tells \"grep\" to scan files in the current directory and all sub-directories. \\[https://en.wikipedia.org/wiki/Grep\\](https://en.wikipedia.org/wiki/Grep)","slug":"how-tos/unix-mac-osx-how-to-find-a-strings-in-multiple-files","published":0,"updated":"2018-11-25T12:44:47.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncv500ixkif539of8q45","content":"<p>Ever need to search through all your files for a certain word or phrase? You\n  will need the **grep** command for this. Handy, and it’s recursive, which\n  means you can search through your entire directory tree, scanning every file\n  along the way. `grep -r “foo” /mypath` The “-r” switch, tells “grep” to scan\n  files in the current directory and all sub-directories. [<a href=\"https://en.wikipedia.org/wiki/Grep\\](https://en.wikipedia.org/wiki/Grep)\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Grep\\](https://en.wikipedia.org/wiki/Grep)</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Ever need to search through all your files for a certain word or phrase? You\n  will need the **grep** command for this. Handy, and it’s recursive, which\n  means you can search through your entire directory tree, scanning every file\n  along the way. `grep -r “foo” /mypath` The “-r” switch, tells “grep” to scan\n  files in the current directory and all sub-directories. [<a href=\"https://en.wikipedia.org/wiki/Grep\\](https://en.wikipedia.org/wiki/Grep)\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Grep\\](https://en.wikipedia.org/wiki/Grep)</a></p>\n"},{"title":"The future of Sencha’s build tools","url":"2636.html","id":"2636","date":"2016-11-23T08:30:46.000Z","_content":"\nSencha Cmd is Java based, and makes use of Apache Ant. You can find all the jar libs when you navigate to the installation folder of Cmd. For Windows: \\*C:/Documents and Settings/{username}/bin/Sencha/Cmd/{cmd-version}\\* For Mac OSX: *~/bin/Sencha/Cmd/{cmd-version}* For Ext JS 4, 5 and 6; the best way to develop and kickstart your applications is by running Sencha Cmd from the command line. You can download the latest version here: \\[https://www.sencha.com/products/extjs/cmd-download/\\](https://www.sencha.com/products/extjs/cmd-download/) Just run the installer, and make sure the Cmd installation folder is in your class path. To test if Sencha Cmd is running, run: \\`sencha which\\` it should output the latest version number. When you are running an older version of Cmd, you can switch versions via: \\`sencha switch -list\\` Which prints an overview of installed Cmd versions. `sencha switch ` Which does the actual switch. Cmd is the tool to: * Generate workspaces, applications and code * It has a built-in server (Jetty) and file watcher * It can load assets (microloader), so you don’t need to manually need to maintain JavaScript or CSS files in your html header. * It compiles Sass Themes (previously based on Sass/Compass, now Fashion which is JavaScript based) * It concatenate / bundles JavaScripts to single files * It compresses and optimizes JavaScript and CSS files * It lints your JavaScript code * It has support for Apache Cordova / Adobe PhoneGap to make native mobile applications See also: \\[http://docs.sencha.com/cmd/\\](http://docs.sencha.com/cmd/) During SenchaCon 2016 a few more features get introduced. Which are already available in an early access release. Sencha Cmd 6.5: \\[http://pages.sencha.com/ext-js-tools-ea-2016.html\\](http://pages.sencha.com/ext-js-tools-ea-2016.html) * It contains a \\*\\*transpiler\\*\\*, so you can mix ECMAScript 2015 (ES6, ES2015) code within your JavaScript files. (We make use of Google Closure Compiler, and got rid of Rhino) * It allows you to create offline applications through the use of \\*\\*service workers\\*\\* (\\*\\*Progressive Web Apps, PWA’s\\*\\*) Furthermore, Sencha is working on a new build tool alternative with an \\*\\*open toolchain\\*\\*. So it will be possible for you to mix/integrate your own technology (like \\*\\*TypeScript\\*\\*, \\*\\*Grunt\\*\\*, \\*\\*Gulp\\*\\*…) with the tool. This time it won’t be Java based but it’s based on Node JS. It supports the NPM and Yarn package managers, and it has integration with Babel to transpile your ECMAScript 2015, (ES6) code.\n\n* * *\n\nIn case you missed SenchaCon 2016 in Las Vegas, or it was just too far for you to travel; we are currently organizing SenchaCon Recap Roadshows, in ASIA and in Europe (London (Dec 6th), Paris (Dec 7th) and Munich (Dec 8th): \\[https://www.sencha.com/company/roadshow/\\](https://www.sencha.com/company/roadshow/ ) During the roadshows, you will have the chance to learn more and see it all in action! Beside an introduction and demo of the above build tools, we will also showcase the React and Angular 2 bridges. (to showcase how Angular2/React apps can make use of Sencha components such as grids). We will demo the Sencha Electron package to showcase how you can create native desktop applications with Ext JS and of course we will also preview our own tool suite: Sencha Test 2.0, Visual Studio Code plugin, Sencha Themer 1.1, Sencha Fiddle 2.0.\n\n* * *\n\n![Sencha sales engineers @SenchaCon Las Vegas](https://www.leeboonstra.com/wp-content/uploads/2016/11/senchacon-1-500x375.jpg) Btw, for the roadshow attendees we have this great deal: * Attend the roadshows, and you will get early access to all the SenchaCon video recordings which were made in Las Vegas. (great advanced study material!).","source":"_drafts/how-tos/the-future-of-senchas-build-tools.md","raw":"---\ntitle: The future of Sencha’s build tools\ntags:\n  - babel\n  - build tools\n  - cmd\n  - es6\n  - npm\n  - Sencha CMD\n  - yarn\nurl: 2636.html\nid: 2636\ncategories:\n  - Cmd\n  - Environment\n  - ES2015\ndate: 2016-11-23 09:30:46\n---\n\nSencha Cmd is Java based, and makes use of Apache Ant. You can find all the jar libs when you navigate to the installation folder of Cmd. For Windows: \\*C:/Documents and Settings/{username}/bin/Sencha/Cmd/{cmd-version}\\* For Mac OSX: *~/bin/Sencha/Cmd/{cmd-version}* For Ext JS 4, 5 and 6; the best way to develop and kickstart your applications is by running Sencha Cmd from the command line. You can download the latest version here: \\[https://www.sencha.com/products/extjs/cmd-download/\\](https://www.sencha.com/products/extjs/cmd-download/) Just run the installer, and make sure the Cmd installation folder is in your class path. To test if Sencha Cmd is running, run: \\`sencha which\\` it should output the latest version number. When you are running an older version of Cmd, you can switch versions via: \\`sencha switch -list\\` Which prints an overview of installed Cmd versions. `sencha switch ` Which does the actual switch. Cmd is the tool to: * Generate workspaces, applications and code * It has a built-in server (Jetty) and file watcher * It can load assets (microloader), so you don’t need to manually need to maintain JavaScript or CSS files in your html header. * It compiles Sass Themes (previously based on Sass/Compass, now Fashion which is JavaScript based) * It concatenate / bundles JavaScripts to single files * It compresses and optimizes JavaScript and CSS files * It lints your JavaScript code * It has support for Apache Cordova / Adobe PhoneGap to make native mobile applications See also: \\[http://docs.sencha.com/cmd/\\](http://docs.sencha.com/cmd/) During SenchaCon 2016 a few more features get introduced. Which are already available in an early access release. Sencha Cmd 6.5: \\[http://pages.sencha.com/ext-js-tools-ea-2016.html\\](http://pages.sencha.com/ext-js-tools-ea-2016.html) * It contains a \\*\\*transpiler\\*\\*, so you can mix ECMAScript 2015 (ES6, ES2015) code within your JavaScript files. (We make use of Google Closure Compiler, and got rid of Rhino) * It allows you to create offline applications through the use of \\*\\*service workers\\*\\* (\\*\\*Progressive Web Apps, PWA’s\\*\\*) Furthermore, Sencha is working on a new build tool alternative with an \\*\\*open toolchain\\*\\*. So it will be possible for you to mix/integrate your own technology (like \\*\\*TypeScript\\*\\*, \\*\\*Grunt\\*\\*, \\*\\*Gulp\\*\\*…) with the tool. This time it won’t be Java based but it’s based on Node JS. It supports the NPM and Yarn package managers, and it has integration with Babel to transpile your ECMAScript 2015, (ES6) code.\n\n* * *\n\nIn case you missed SenchaCon 2016 in Las Vegas, or it was just too far for you to travel; we are currently organizing SenchaCon Recap Roadshows, in ASIA and in Europe (London (Dec 6th), Paris (Dec 7th) and Munich (Dec 8th): \\[https://www.sencha.com/company/roadshow/\\](https://www.sencha.com/company/roadshow/ ) During the roadshows, you will have the chance to learn more and see it all in action! Beside an introduction and demo of the above build tools, we will also showcase the React and Angular 2 bridges. (to showcase how Angular2/React apps can make use of Sencha components such as grids). We will demo the Sencha Electron package to showcase how you can create native desktop applications with Ext JS and of course we will also preview our own tool suite: Sencha Test 2.0, Visual Studio Code plugin, Sencha Themer 1.1, Sencha Fiddle 2.0.\n\n* * *\n\n![Sencha sales engineers @SenchaCon Las Vegas](https://www.leeboonstra.com/wp-content/uploads/2016/11/senchacon-1-500x375.jpg) Btw, for the roadshow attendees we have this great deal: * Attend the roadshows, and you will get early access to all the SenchaCon video recordings which were made in Las Vegas. (great advanced study material!).","slug":"how-tos/the-future-of-senchas-build-tools","published":0,"updated":"2018-11-25T13:09:48.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncv700j1kif5gu917bdb","content":"<p>Sencha Cmd is Java based, and makes use of Apache Ant. You can find all the\n  jar libs when you navigate to the installation folder of Cmd. For Windows:\n  *C:/Documents and Settings/{username}/bin/Sencha/Cmd/{cmd-version}* For Mac\n  OSX: <em>~/bin/Sencha/Cmd/{cmd-version}</em> For Ext JS 4, 5 and 6; the best\n  way to develop and kickstart your applications is by running Sencha Cmd from\n  the command line. You can download the latest version here: [<a href=\"https://www.sencha.com/products/extjs/cmd-download/\\](https://www.sencha.com/products/extjs/cmd-download/)\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/products/extjs/cmd-download/\\](https://www.sencha.com/products/extjs/cmd-download/)</a>\n  Just run the installer, and make sure the Cmd installation folder is in your\n  class path. To test if Sencha Cmd is running, run: `sencha which` it should\n  output the latest version number. When you are running an older version of\n  Cmd, you can switch versions via: `sencha switch -list` Which prints an\n  overview of installed Cmd versions. <code>sencha switch</code> Which does the\n  actual switch. Cmd is the tool to: <em>Generate workspaces, applications and\n    code </em>It has a built-in server (Jetty) and file watcher <em>It can load\n    assets (microloader), so you don’t need to manually need to maintain\n    JavaScript or CSS files in your html header. </em>It compiles Sass Themes\n  (previously based on Sass/Compass, now Fashion which is JavaScript based) <em>It\n    concatenate / bundles JavaScripts to single files </em>It compresses and\n  optimizes JavaScript and CSS files <em>It lints your JavaScript code </em>It\n  has support for Apache Cordova / Adobe PhoneGap to make native mobile\n  applications See also: [<a href=\"http://docs.sencha.com/cmd/\\](http://docs.sencha.com/cmd/)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/\\](http://docs.sencha.com/cmd/)</a>\n  During SenchaCon 2016 a few more features get introduced. Which are already\n  available in an early access release. Sencha Cmd 6.5: [<a href=\"http://pages.sencha.com/ext-js-tools-ea-2016.html\\](http://pages.sencha.com/ext-js-tools-ea-2016.html)\" target=\"_blank\" rel=\"noopener\">http://pages.sencha.com/ext-js-tools-ea-2016.html\\](http://pages.sencha.com/ext-js-tools-ea-2016.html)</a>\n  <em>It contains a \\</em>*transpiler**, so you can mix ECMAScript 2015 (ES6,\n  ES2015) code within your JavaScript files. (We make use of Google Closure\n  Compiler, and got rid of Rhino) <em>It allows you to create offline\n    applications through the use of \\</em>*service workers** (**Progressive Web\n  Apps, PWA’s**) Furthermore, Sencha is working on a new build tool alternative\n  with an **open toolchain**. So it will be possible for you to mix/integrate\n  your own technology (like **TypeScript**, **Grunt**, **Gulp**…) with the\n  tool. This time it won’t be Java based but it’s based on Node JS. It supports\n  the NPM and Yarn package managers, and it has integration with Babel to\n  transpile your ECMAScript 2015, (ES6) code.</p>\n<hr>\n<p>In case you missed SenchaCon 2016 in Las Vegas, or it was just too far for\n  you to travel; we are currently organizing SenchaCon Recap Roadshows, in ASIA\n  and in Europe (London (Dec 6th), Paris (Dec 7th) and Munich (Dec 8th): [<a href=\"https://www.sencha.com/company/roadshow/\\]\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/company/roadshow/\\]</a>(<a href=\"https://www.sencha.com/company/roadshow/\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/company/roadshow/</a>\n  ) During the roadshows, you will have the chance to learn more and see it all\n  in action! Beside an introduction and demo of the above build tools, we will\n  also showcase the React and Angular 2 bridges. (to showcase how\n  Angular2/React apps can make use of Sencha components such as grids). We will\n  demo the Sencha Electron package to showcase how you can create native\n  desktop applications with Ext JS and of course we will also preview our own\n  tool suite: Sencha Test 2.0, Visual Studio Code plugin, Sencha Themer 1.1,\n  Sencha Fiddle 2.0.</p>\n<hr>\n<p><img src=\"https://www.leeboonstra.com/wp-content/uploads/2016/11/senchacon-1-500x375.jpg\" alt=\"Sencha sales engineers @SenchaCon Las Vegas\">\n  Btw, for the roadshow attendees we have this great deal: * Attend the\n  roadshows, and you will get early access to all the SenchaCon video\n  recordings which were made in Las Vegas. (great advanced study material!).</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Sencha Cmd is Java based, and makes use of Apache Ant. You can find all the\n  jar libs when you navigate to the installation folder of Cmd. For Windows:\n  *C:/Documents and Settings/{username}/bin/Sencha/Cmd/{cmd-version}* For Mac\n  OSX: <em>~/bin/Sencha/Cmd/{cmd-version}</em> For Ext JS 4, 5 and 6; the best\n  way to develop and kickstart your applications is by running Sencha Cmd from\n  the command line. You can download the latest version here: [<a href=\"https://www.sencha.com/products/extjs/cmd-download/\\](https://www.sencha.com/products/extjs/cmd-download/)\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/products/extjs/cmd-download/\\](https://www.sencha.com/products/extjs/cmd-download/)</a>\n  Just run the installer, and make sure the Cmd installation folder is in your\n  class path. To test if Sencha Cmd is running, run: `sencha which` it should\n  output the latest version number. When you are running an older version of\n  Cmd, you can switch versions via: `sencha switch -list` Which prints an\n  overview of installed Cmd versions. <code>sencha switch</code> Which does the\n  actual switch. Cmd is the tool to: <em>Generate workspaces, applications and\n    code </em>It has a built-in server (Jetty) and file watcher <em>It can load\n    assets (microloader), so you don’t need to manually need to maintain\n    JavaScript or CSS files in your html header. </em>It compiles Sass Themes\n  (previously based on Sass/Compass, now Fashion which is JavaScript based) <em>It\n    concatenate / bundles JavaScripts to single files </em>It compresses and\n  optimizes JavaScript and CSS files <em>It lints your JavaScript code </em>It\n  has support for Apache Cordova / Adobe PhoneGap to make native mobile\n  applications See also: [<a href=\"http://docs.sencha.com/cmd/\\](http://docs.sencha.com/cmd/)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/\\](http://docs.sencha.com/cmd/)</a>\n  During SenchaCon 2016 a few more features get introduced. Which are already\n  available in an early access release. Sencha Cmd 6.5: [<a href=\"http://pages.sencha.com/ext-js-tools-ea-2016.html\\](http://pages.sencha.com/ext-js-tools-ea-2016.html)\" target=\"_blank\" rel=\"noopener\">http://pages.sencha.com/ext-js-tools-ea-2016.html\\](http://pages.sencha.com/ext-js-tools-ea-2016.html)</a>\n  <em>It contains a \\</em>*transpiler**, so you can mix ECMAScript 2015 (ES6,\n  ES2015) code within your JavaScript files. (We make use of Google Closure\n  Compiler, and got rid of Rhino) <em>It allows you to create offline\n    applications through the use of \\</em>*service workers** (**Progressive Web\n  Apps, PWA’s**) Furthermore, Sencha is working on a new build tool alternative\n  with an **open toolchain**. So it will be possible for you to mix/integrate\n  your own technology (like **TypeScript**, **Grunt**, **Gulp**…) with the\n  tool. This time it won’t be Java based but it’s based on Node JS. It supports\n  the NPM and Yarn package managers, and it has integration with Babel to\n  transpile your ECMAScript 2015, (ES6) code.</p>\n<hr>\n<p>In case you missed SenchaCon 2016 in Las Vegas, or it was just too far for\n  you to travel; we are currently organizing SenchaCon Recap Roadshows, in ASIA\n  and in Europe (London (Dec 6th), Paris (Dec 7th) and Munich (Dec 8th): [<a href=\"https://www.sencha.com/company/roadshow/\\]\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/company/roadshow/\\]</a>(<a href=\"https://www.sencha.com/company/roadshow/\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/company/roadshow/</a>\n  ) During the roadshows, you will have the chance to learn more and see it all\n  in action! Beside an introduction and demo of the above build tools, we will\n  also showcase the React and Angular 2 bridges. (to showcase how\n  Angular2/React apps can make use of Sencha components such as grids). We will\n  demo the Sencha Electron package to showcase how you can create native\n  desktop applications with Ext JS and of course we will also preview our own\n  tool suite: Sencha Test 2.0, Visual Studio Code plugin, Sencha Themer 1.1,\n  Sencha Fiddle 2.0.</p>\n<hr>\n<p><img src=\"https://www.leeboonstra.com/wp-content/uploads/2016/11/senchacon-1-500x375.jpg\" alt=\"Sencha sales engineers @SenchaCon Las Vegas\">\n  Btw, for the roadshow attendees we have this great deal: * Attend the\n  roadshows, and you will get early access to all the SenchaCon video\n  recordings which were made in Las Vegas. (great advanced study material!).</p>\n"},{"title":"SVN Commands","url":"63.html","id":"63","date":"2011-06-07T03:31:00.000Z","_content":"\nHere are some of the most used SVN commands to type in your console/terminal:\n\n**Update:**\n\nsvn up\n\n**Check status:**\n\nsvn st\n\n**Add files:**\n\nsvn add *\n\nsvn add \\[filename\\]\n\n**Remove files:**\n\nsvn rm \\[filename\\]\n\n**Commit:**\n\nsvn ci -m \"\\[description\\]\"\n\n**Start up/ import:**\n\nsvn import -m ?description? svn://\\[path-svn\\]\n\n**Get checkout:**\n\nsvn checkout ?force svn://\\[path-svn\\] \\[current-path\\]","source":"_drafts/how-tos/svn-commands.md","raw":"---\ntitle: SVN Commands\ntags:\n  - SVN\nurl: 63.html\nid: 63\ncategories:\n  - SVN\ndate: 2011-06-07 05:31:00\n---\n\nHere are some of the most used SVN commands to type in your console/terminal:\n\n**Update:**\n\nsvn up\n\n**Check status:**\n\nsvn st\n\n**Add files:**\n\nsvn add *\n\nsvn add \\[filename\\]\n\n**Remove files:**\n\nsvn rm \\[filename\\]\n\n**Commit:**\n\nsvn ci -m \"\\[description\\]\"\n\n**Start up/ import:**\n\nsvn import -m ?description? svn://\\[path-svn\\]\n\n**Get checkout:**\n\nsvn checkout ?force svn://\\[path-svn\\] \\[current-path\\]","slug":"how-tos/svn-commands","published":0,"updated":"2018-11-25T13:09:48.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncv800j5kif5n8jyzrck","content":"<p>Here are some of the most used SVN commands to type in your\n  console/terminal:</p>\n<p><strong>Update:</strong></p>\n<p>svn up</p>\n<p><strong>Check status:</strong></p>\n<p>svn st</p>\n<p><strong>Add files:</strong></p>\n<p>svn add *</p>\n<p>svn add [filename]</p>\n<p><strong>Remove files:</strong></p>\n<p>svn rm [filename]</p>\n<p><strong>Commit:</strong></p>\n<p>svn ci -m “[description]“</p>\n<p><strong>Start up/ import:</strong></p>\n<p>svn import -m ?description? svn://[path-svn]</p>\n<p><strong>Get checkout:</strong></p>\n<p>svn checkout ?force svn://[path-svn] [current-path]</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Here are some of the most used SVN commands to type in your\n  console/terminal:</p>\n<p><strong>Update:</strong></p>\n<p>svn up</p>\n<p><strong>Check status:</strong></p>\n<p>svn st</p>\n<p><strong>Add files:</strong></p>\n<p>svn add *</p>\n<p>svn add [filename]</p>\n<p><strong>Remove files:</strong></p>\n<p>svn rm [filename]</p>\n<p><strong>Commit:</strong></p>\n<p>svn ci -m “[description]“</p>\n<p><strong>Start up/ import:</strong></p>\n<p>svn import -m ?description? svn://[path-svn]</p>\n<p><strong>Get checkout:</strong></p>\n<p>svn checkout ?force svn://[path-svn] [current-path]</p>\n"},{"title":"Top 5 Tips — Get Started with the Latest Sencha Product Releases","url":"390.html","id":"390","date":"2013-10-23T10:08:47.000Z","_content":"\nWhile the whole world is discussing the new iOS 7 release, or locking themselves in front of the game console to play GTA 5, Sencha has just delivered several updates to its frameworks and tools. Not just one product release but four product releases: Sencha Touch 2.3, Ext JS 4.2.2, Sencha Cmd 4 and Sencha Architect 2.2.3.\n\nTo celebrate the new product releases, we’re sharing some of the best tricks to get your app development started quickly. You can also attend Sencha training, where you’ll not only master these four products, you’ll get lots more tips and tricks as well as best practices from our expert instructors.\n\nWe’ll start off with a very basic, but oh so handy trick, and progress to one we think you will really appreciate.\n\n### 5) How to upgrade Sencha Cmd from the command line interface (CLI)\n\nTo upgrade Sencha Cmd to the latest stable release, enter the following command on the CLI:\n\nsencha upgrade\n\nmarsair:SenchaTraining mars$ sencha upgrade\nSencha Cmd v4.0.0.203\n\\[INF\\] Determining the latest version of Sencha Cmd\n\\[INF\\] The latest version of Sencha Cmd is 4.0.0.203\n\\[INF\\] Sencha Cmd 4.0.0.203 is this version.\n\nTo see if there’s a newer beta version online, append the previous command with the parameter:  \n`--check;`\n\nsencha upgrade --check\n\nIf you want to upgrade to the latest beta release, enter the following command on the CLI (warning: this may downgrade your version of Sencha Cmd):\n\nsencha upgrade --beta\n\nSencha Cmd 4 and Sencha Architect 2.2.3 are optimized for the latest Sencha Touch and Ext JS releases.\n\nNext, let’s upgrade our existing apps!\n\n### 4) It is easy to upgrade your existing app to the new Sencha Touch and Ext JS releases\n\nDownload the latest frameworks from: [http://www.sencha.com/products/extjs/download/](http://www.sencha.com/products/extjs/download/)\n\nor [http://www.sencha.com/products/touch/download/](http://www.sencha.com/products/touch/download/). Unpack the folders, open your CLI and navigate to your current Ext JS / Sencha Touch app. Enter the following command to upgrade:\n\nsencha app upgrade \\[path-to-framework\\]\n\nWithin Sencha Architect 2.2.3, you can upgrade between minor versions. Right-click on the **Resource Library** in the project inspector and choose **Upgrade to Ext 4.2.x** or **Upgrade to Sencha Touch 2.3.x.** The upgrade performs necessary transformations to your configs and settings to bring it up to par for the new framework. Typically, this is minimal.\n\nSencha Touch 2.3 provides themes for iOS 7 (**Cupertino**), previous iOS themes (**Cupertino Classic**), and a theme for Android (**Mountain View**). Additional improvements were made to the existing **BlackBerry** theme. These themes augment the existing Sencha Touch default and Windows Phone themes.\n\nNow, let’s create an app with Sencha Architect and use the Cupertino theme.\n\n### 3) How to create iOS 7 apps with Sencha Architect\n\nBy default, Sencha Architect uses the Sencha Touch default theme. To choose any other theme, click on Resource Library in the project inspector and click on the theme property. Here, you can choose the following themes: BlackBerry, Cupertino, Cupertino Classic, Default, Mountain View and Windows.\n\nSpeaking about themes. Wouldn’t it be great if your (mobile) browser could detect which theme to apply based on the device platform? Check out this next trick.\n\n### 2) How to detect a device’s platform and serve the appropriate Sencha Touch themes\n\nOpen app.json. In the css array, add the platforms that should serve a different theme, together with the theme name and path.\n\nSee the example snippet below.\n\ncss: \\[\n    {\n        path: resources/css/sencha-touch.css,\n        platform: \\[desktop\\],\n        update: delta\n    },\n    {\n        path: resources/css/wp.css,\n        platform: \\[ie10\\],\n        theme: Windows,\n        update: delta\n    }\n\\]\n\nThe following themes are available out of the box, but you could also serve your own custom themes per platform:\n\n*   `sencha-touch.css` (default theme)\n*   `wp.css` (Windows theme)\n*   `cupertino.css` (iOS 7 theme)\n*   `cupertino-classic.css` (classic iOS theme)\n*   `mountainview.css` (Android theme)\n*   `bb10.css` (BlackBerry theme)\n\nThese are the available platforms: `android, base, blackberry, chrome, desktop, firefox, ie10, ios, ios-classic, phone, safari, tablet` and `tizen`.\n\nTo preview your app in the browser and test it per platform theme, just append\n\n?platform=<platformname>\n\nto the end of your app URL.\n\nThe last trick will make a lot of people happy. People that are familiar with the `compass watch` command will love this one. Sencha Cmd can “watch” the application in the background. Every time you save your project, Sencha Cmd will build your application and Stylesheet in the background. It’s almost as fast as switching between browser windows. So, here’s the number one trick.\n\n### 1) How to let Sencha Cmd build your app and themes in the background\n\nEnter the following command on the CLI:\n\nsencha app watch\n\nThis command will run in the background and automatically handle changes to the common files. It continually updates any changes to your project as soon as you save/ When changes are detected, only the minimum amount of work necessary is performed to bring your app and its CSS up to date, saving you from having to manually run app refresh or rebuild your Sass. This feature is available for both Sencha Touch 2.3 and Ext JS 4.2.2 in combination with Sencha Cmd 4.\n\n_Please note: In order for this to work, you will need to have Java SDK 7 installed on your machine._\n\nI hope you have found these tip and tricks helpful. All of these products and more are addressed in official Sencha training courses. If you’d like to join a Sencha course in a city near you, see the overview of [open courses](/training?phpMyAdmin=TsrU0HzU861CLgRdK5q8%2Cm5HFQ0) or join an online training!\n\nBetter yet, after enrolling in training and developing Sencha Apps, prove your skills with [Sencha Certification](/training/certification?phpMyAdmin=TsrU0HzU861CLgRdK5q8%2Cm5HFQ0). You save $200 off Sencha Certification by enrolling in our Fast Track Training courses.","source":"_drafts/how-tos/top-5-tips-get-started-with-the-latest-sencha-product-releases.md","raw":"---\ntitle: Top 5 Tips — Get Started with the Latest Sencha Product Releases\ntags:\n  - Ext JS\n  - Sencha\n  - Sencha CMD\n  - Sencha Touch\n  - sencha.com\nurl: 390.html\nid: 390\ncategories:\n  - Ext JS\n  - Sencha\n  - Sencha Touch\ndate: 2013-10-23 12:08:47\n---\n\nWhile the whole world is discussing the new iOS 7 release, or locking themselves in front of the game console to play GTA 5, Sencha has just delivered several updates to its frameworks and tools. Not just one product release but four product releases: Sencha Touch 2.3, Ext JS 4.2.2, Sencha Cmd 4 and Sencha Architect 2.2.3.\n\nTo celebrate the new product releases, we’re sharing some of the best tricks to get your app development started quickly. You can also attend Sencha training, where you’ll not only master these four products, you’ll get lots more tips and tricks as well as best practices from our expert instructors.\n\nWe’ll start off with a very basic, but oh so handy trick, and progress to one we think you will really appreciate.\n\n### 5) How to upgrade Sencha Cmd from the command line interface (CLI)\n\nTo upgrade Sencha Cmd to the latest stable release, enter the following command on the CLI:\n\nsencha upgrade\n\nmarsair:SenchaTraining mars$ sencha upgrade\nSencha Cmd v4.0.0.203\n\\[INF\\] Determining the latest version of Sencha Cmd\n\\[INF\\] The latest version of Sencha Cmd is 4.0.0.203\n\\[INF\\] Sencha Cmd 4.0.0.203 is this version.\n\nTo see if there’s a newer beta version online, append the previous command with the parameter:  \n`--check;`\n\nsencha upgrade --check\n\nIf you want to upgrade to the latest beta release, enter the following command on the CLI (warning: this may downgrade your version of Sencha Cmd):\n\nsencha upgrade --beta\n\nSencha Cmd 4 and Sencha Architect 2.2.3 are optimized for the latest Sencha Touch and Ext JS releases.\n\nNext, let’s upgrade our existing apps!\n\n### 4) It is easy to upgrade your existing app to the new Sencha Touch and Ext JS releases\n\nDownload the latest frameworks from: [http://www.sencha.com/products/extjs/download/](http://www.sencha.com/products/extjs/download/)\n\nor [http://www.sencha.com/products/touch/download/](http://www.sencha.com/products/touch/download/). Unpack the folders, open your CLI and navigate to your current Ext JS / Sencha Touch app. Enter the following command to upgrade:\n\nsencha app upgrade \\[path-to-framework\\]\n\nWithin Sencha Architect 2.2.3, you can upgrade between minor versions. Right-click on the **Resource Library** in the project inspector and choose **Upgrade to Ext 4.2.x** or **Upgrade to Sencha Touch 2.3.x.** The upgrade performs necessary transformations to your configs and settings to bring it up to par for the new framework. Typically, this is minimal.\n\nSencha Touch 2.3 provides themes for iOS 7 (**Cupertino**), previous iOS themes (**Cupertino Classic**), and a theme for Android (**Mountain View**). Additional improvements were made to the existing **BlackBerry** theme. These themes augment the existing Sencha Touch default and Windows Phone themes.\n\nNow, let’s create an app with Sencha Architect and use the Cupertino theme.\n\n### 3) How to create iOS 7 apps with Sencha Architect\n\nBy default, Sencha Architect uses the Sencha Touch default theme. To choose any other theme, click on Resource Library in the project inspector and click on the theme property. Here, you can choose the following themes: BlackBerry, Cupertino, Cupertino Classic, Default, Mountain View and Windows.\n\nSpeaking about themes. Wouldn’t it be great if your (mobile) browser could detect which theme to apply based on the device platform? Check out this next trick.\n\n### 2) How to detect a device’s platform and serve the appropriate Sencha Touch themes\n\nOpen app.json. In the css array, add the platforms that should serve a different theme, together with the theme name and path.\n\nSee the example snippet below.\n\ncss: \\[\n    {\n        path: resources/css/sencha-touch.css,\n        platform: \\[desktop\\],\n        update: delta\n    },\n    {\n        path: resources/css/wp.css,\n        platform: \\[ie10\\],\n        theme: Windows,\n        update: delta\n    }\n\\]\n\nThe following themes are available out of the box, but you could also serve your own custom themes per platform:\n\n*   `sencha-touch.css` (default theme)\n*   `wp.css` (Windows theme)\n*   `cupertino.css` (iOS 7 theme)\n*   `cupertino-classic.css` (classic iOS theme)\n*   `mountainview.css` (Android theme)\n*   `bb10.css` (BlackBerry theme)\n\nThese are the available platforms: `android, base, blackberry, chrome, desktop, firefox, ie10, ios, ios-classic, phone, safari, tablet` and `tizen`.\n\nTo preview your app in the browser and test it per platform theme, just append\n\n?platform=<platformname>\n\nto the end of your app URL.\n\nThe last trick will make a lot of people happy. People that are familiar with the `compass watch` command will love this one. Sencha Cmd can “watch” the application in the background. Every time you save your project, Sencha Cmd will build your application and Stylesheet in the background. It’s almost as fast as switching between browser windows. So, here’s the number one trick.\n\n### 1) How to let Sencha Cmd build your app and themes in the background\n\nEnter the following command on the CLI:\n\nsencha app watch\n\nThis command will run in the background and automatically handle changes to the common files. It continually updates any changes to your project as soon as you save/ When changes are detected, only the minimum amount of work necessary is performed to bring your app and its CSS up to date, saving you from having to manually run app refresh or rebuild your Sass. This feature is available for both Sencha Touch 2.3 and Ext JS 4.2.2 in combination with Sencha Cmd 4.\n\n_Please note: In order for this to work, you will need to have Java SDK 7 installed on your machine._\n\nI hope you have found these tip and tricks helpful. All of these products and more are addressed in official Sencha training courses. If you’d like to join a Sencha course in a city near you, see the overview of [open courses](/training?phpMyAdmin=TsrU0HzU861CLgRdK5q8%2Cm5HFQ0) or join an online training!\n\nBetter yet, after enrolling in training and developing Sencha Apps, prove your skills with [Sencha Certification](/training/certification?phpMyAdmin=TsrU0HzU861CLgRdK5q8%2Cm5HFQ0). You save $200 off Sencha Certification by enrolling in our Fast Track Training courses.","slug":"how-tos/top-5-tips-get-started-with-the-latest-sencha-product-releases","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncva00j9kif596q4n4a2","content":"<p>While the whole world is discussing the new iOS 7 release, or locking\n  themselves in front of the game console to play GTA 5, Sencha has just\n  delivered several updates to its frameworks and tools. Not just one product\n  release but four product releases: Sencha Touch 2.3, Ext JS 4.2.2, Sencha Cmd\n  4 and Sencha Architect 2.2.3.</p>\n<p>To celebrate the new product releases, we’re sharing some of the best tricks\n  to get your app development started quickly. You can also attend Sencha\n  training, where you’ll not only master these four products, you’ll get lots\n  more tips and tricks as well as best practices from our expert instructors.</p>\n<p>We’ll start off with a very basic, but oh so handy trick, and progress to\n  one we think you will really appreciate.</p>\n<h3 id=\"5-How-to-upgrade-Sencha-Cmd-from-the-command-line-interface-CLI\"><a href=\"#5-How-to-upgrade-Sencha-Cmd-from-the-command-line-interface-CLI\" class=\"headerlink\" title=\"5) How to upgrade Sencha Cmd from the command line interface (CLI)\"></a>5)\n  How to upgrade Sencha Cmd from the command line interface (CLI)</h3>\n<p>To upgrade Sencha Cmd to the latest stable release, enter the following\n  command on the CLI:</p>\n<p>sencha upgrade</p>\n<p>marsair:SenchaTraining mars$ sencha upgrade Sencha Cmd v4.0.0.203 [INF]\n  Determining the latest version of Sencha Cmd [INF] The latest version of\n  Sencha Cmd is 4.0.0.203 [INF] Sencha Cmd 4.0.0.203 is this version.</p>\n<p>To see if there’s a newer beta version online, append the previous command\n  with the parameter:<br><code>--check;</code></p>\n<p>sencha upgrade –check</p>\n<p>If you want to upgrade to the latest beta release, enter the following\n  command on the CLI (warning: this may downgrade your version of Sencha Cmd):</p>\n<p>sencha upgrade –beta</p>\n<p>Sencha Cmd 4 and Sencha Architect 2.2.3 are optimized for the latest Sencha\n  Touch and Ext JS releases.</p>\n<p>Next, let’s upgrade our existing apps!</p>\n<h3 id=\"4-It-is-easy-to-upgrade-your-existing-app-to-the-new-Sencha-Touch-and-Ext-JS-releases\"><a href=\"#4-It-is-easy-to-upgrade-your-existing-app-to-the-new-Sencha-Touch-and-Ext-JS-releases\" class=\"headerlink\" title=\"4) It is easy to upgrade your existing app to the new Sencha Touch and Ext JS releases\"></a>4)\n  It is easy to upgrade your existing app to the new Sencha Touch and Ext JS\n  releases</h3>\n<p>Download the latest frameworks from: <a href=\"http://www.sencha.com/products/extjs/download/\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/products/extjs/download/</a></p>\n<p>or <a href=\"http://www.sencha.com/products/touch/download/\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/products/touch/download/</a>.\n  Unpack the folders, open your CLI and navigate to your current Ext JS /\n  Sencha Touch app. Enter the following command to upgrade:</p>\n<p>sencha app upgrade [path-to-framework]</p>\n<p>Within Sencha Architect 2.2.3, you can upgrade between minor versions.\n  Right-click on the <strong>Resource Library</strong> in the project inspector\n  and choose <strong>Upgrade to Ext 4.2.x</strong> or <strong>Upgrade to Sencha\n    Touch 2.3.x.</strong> The upgrade performs necessary transformations to\n  your configs and settings to bring it up to par for the new framework.\n  Typically, this is minimal.</p>\n<p>Sencha Touch 2.3 provides themes for iOS 7 (<strong>Cupertino</strong>),\n  previous iOS themes (<strong>Cupertino Classic</strong>), and a theme for\n  Android (<strong>Mountain View</strong>). Additional improvements were made\n  to the existing <strong>BlackBerry</strong> theme. These themes augment the\n  existing Sencha Touch default and Windows Phone themes.</p>\n<p>Now, let’s create an app with Sencha Architect and use the Cupertino theme.</p>\n<h3 id=\"3-How-to-create-iOS-7-apps-with-Sencha-Architect\"><a href=\"#3-How-to-create-iOS-7-apps-with-Sencha-Architect\" class=\"headerlink\" title=\"3) How to create iOS 7 apps with Sencha Architect\"></a>3)\n  How to create iOS 7 apps with Sencha Architect</h3>\n<p>By default, Sencha Architect uses the Sencha Touch default theme. To choose\n  any other theme, click on Resource Library in the project inspector and click\n  on the theme property. Here, you can choose the following themes: BlackBerry,\n  Cupertino, Cupertino Classic, Default, Mountain View and Windows.</p>\n<p>Speaking about themes. Wouldn’t it be great if your (mobile) browser could\n  detect which theme to apply based on the device platform? Check out this next\n  trick.</p>\n<h3 id=\"2-How-to-detect-a-device’s-platform-and-serve-the-appropriate-Sencha-Touch-themes\"><a href=\"#2-How-to-detect-a-device’s-platform-and-serve-the-appropriate-Sencha-Touch-themes\" class=\"headerlink\" title=\"2) How to detect a device’s platform and serve the appropriate Sencha Touch themes\"></a>2)\n  How to detect a device’s platform and serve the appropriate Sencha Touch\n  themes</h3>\n<p>Open app.json. In the css array, add the platforms that should serve a\n  different theme, together with the theme name and path.</p>\n<p>See the example snippet below.</p>\n<p>css: [ { path: resources/css/sencha-touch.css, platform: [desktop], update:\n  delta }, { path: resources/css/wp.css, platform: [ie10], theme: Windows,\n  update: delta } ]</p>\n<p>The following themes are available out of the box, but you could also serve\n  your own custom themes per platform:</p>\n<ul>\n  <li><code>sencha-touch.css</code> (default theme)</li>\n  <li><code>wp.css</code> (Windows theme)</li>\n  <li><code>cupertino.css</code> (iOS 7 theme)</li>\n  <li><code>cupertino-classic.css</code> (classic iOS theme)</li>\n  <li><code>mountainview.css</code> (Android theme)</li>\n  <li><code>bb10.css</code> (BlackBerry theme)</li>\n</ul>\n<p>These are the available platforms: <code>android, base, blackberry, chrome,\n    desktop, firefox, ie10, ios, ios-classic, phone, safari, tablet</code> and\n  <code>tizen</code>.</p>\n<p>To preview your app in the browser and test it per platform theme, just\n  append</p>\n<p>?platform=<platformname></platformname>\n</p>\n<p>to the end of your app URL.</p>\n<p>The last trick will make a lot of people happy. People that are familiar\n  with the <code>compass watch</code> command will love this one. Sencha Cmd\n  can “watch” the application in the background. Every time you save your\n  project, Sencha Cmd will build your application and Stylesheet in the\n  background. It’s almost as fast as switching between browser windows. So,\n  here’s the number one trick.</p>\n<h3 id=\"1-How-to-let-Sencha-Cmd-build-your-app-and-themes-in-the-background\"><a href=\"#1-How-to-let-Sencha-Cmd-build-your-app-and-themes-in-the-background\" class=\"headerlink\" title=\"1) How to let Sencha Cmd build your app and themes in the background\"></a>1)\n  How to let Sencha Cmd build your app and themes in the background</h3>\n<p>Enter the following command on the CLI:</p>\n<p>sencha app watch</p>\n<p>This command will run in the background and automatically handle changes to\n  the common files. It continually updates any changes to your project as soon\n  as you save/ When changes are detected, only the minimum amount of work\n  necessary is performed to bring your app and its CSS up to date, saving you\n  from having to manually run app refresh or rebuild your Sass. This feature is\n  available for both Sencha Touch 2.3 and Ext JS 4.2.2 in combination with\n  Sencha Cmd 4.</p>\n<p><em>Please note: In order for this to work, you will need to have Java SDK 7\n    installed on your machine.</em></p>\n<p>I hope you have found these tip and tricks helpful. All of these products\n  and more are addressed in official Sencha training courses. If you’d like to\n  join a Sencha course in a city near you, see the overview of <a href=\"/training?phpMyAdmin=TsrU0HzU861CLgRdK5q8%2Cm5HFQ0\">open\n    courses</a> or join an online training!</p>\n<p>Better yet, after enrolling in training and developing Sencha Apps, prove\n  your skills with <a href=\"/training/certification?phpMyAdmin=TsrU0HzU861CLgRdK5q8%2Cm5HFQ0\">Sencha\n    Certification</a>. You save $200 off Sencha Certification by enrolling in\n  our Fast Track Training courses.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>While the whole world is discussing the new iOS 7 release, or locking\n  themselves in front of the game console to play GTA 5, Sencha has just\n  delivered several updates to its frameworks and tools. Not just one product\n  release but four product releases: Sencha Touch 2.3, Ext JS 4.2.2, Sencha Cmd\n  4 and Sencha Architect 2.2.3.</p>\n<p>To celebrate the new product releases, we’re sharing some of the best tricks\n  to get your app development started quickly. You can also attend Sencha\n  training, where you’ll not only master these four products, you’ll get lots\n  more tips and tricks as well as best practices from our expert instructors.</p>\n<p>We’ll start off with a very basic, but oh so handy trick, and progress to\n  one we think you will really appreciate.</p>\n<h3 id=\"5-How-to-upgrade-Sencha-Cmd-from-the-command-line-interface-CLI\"><a href=\"#5-How-to-upgrade-Sencha-Cmd-from-the-command-line-interface-CLI\" class=\"headerlink\" title=\"5) How to upgrade Sencha Cmd from the command line interface (CLI)\"></a>5)\n  How to upgrade Sencha Cmd from the command line interface (CLI)</h3>\n<p>To upgrade Sencha Cmd to the latest stable release, enter the following\n  command on the CLI:</p>\n<p>sencha upgrade</p>\n<p>marsair:SenchaTraining mars$ sencha upgrade Sencha Cmd v4.0.0.203 [INF]\n  Determining the latest version of Sencha Cmd [INF] The latest version of\n  Sencha Cmd is 4.0.0.203 [INF] Sencha Cmd 4.0.0.203 is this version.</p>\n<p>To see if there’s a newer beta version online, append the previous command\n  with the parameter:<br><code>--check;</code></p>\n<p>sencha upgrade –check</p>\n<p>If you want to upgrade to the latest beta release, enter the following\n  command on the CLI (warning: this may downgrade your version of Sencha Cmd):</p>\n<p>sencha upgrade –beta</p>\n<p>Sencha Cmd 4 and Sencha Architect 2.2.3 are optimized for the latest Sencha\n  Touch and Ext JS releases.</p>\n<p>Next, let’s upgrade our existing apps!</p>\n<h3 id=\"4-It-is-easy-to-upgrade-your-existing-app-to-the-new-Sencha-Touch-and-Ext-JS-releases\"><a href=\"#4-It-is-easy-to-upgrade-your-existing-app-to-the-new-Sencha-Touch-and-Ext-JS-releases\" class=\"headerlink\" title=\"4) It is easy to upgrade your existing app to the new Sencha Touch and Ext JS releases\"></a>4)\n  It is easy to upgrade your existing app to the new Sencha Touch and Ext JS\n  releases</h3>\n<p>Download the latest frameworks from: <a href=\"http://www.sencha.com/products/extjs/download/\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/products/extjs/download/</a></p>\n<p>or <a href=\"http://www.sencha.com/products/touch/download/\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/products/touch/download/</a>.\n  Unpack the folders, open your CLI and navigate to your current Ext JS /\n  Sencha Touch app. Enter the following command to upgrade:</p>\n<p>sencha app upgrade [path-to-framework]</p>\n<p>Within Sencha Architect 2.2.3, you can upgrade between minor versions.\n  Right-click on the <strong>Resource Library</strong> in the project inspector\n  and choose <strong>Upgrade to Ext 4.2.x</strong> or <strong>Upgrade to Sencha\n    Touch 2.3.x.</strong> The upgrade performs necessary transformations to\n  your configs and settings to bring it up to par for the new framework.\n  Typically, this is minimal.</p>\n<p>Sencha Touch 2.3 provides themes for iOS 7 (<strong>Cupertino</strong>),\n  previous iOS themes (<strong>Cupertino Classic</strong>), and a theme for\n  Android (<strong>Mountain View</strong>). Additional improvements were made\n  to the existing <strong>BlackBerry</strong> theme. These themes augment the\n  existing Sencha Touch default and Windows Phone themes.</p>\n<p>Now, let’s create an app with Sencha Architect and use the Cupertino theme.</p>\n<h3 id=\"3-How-to-create-iOS-7-apps-with-Sencha-Architect\"><a href=\"#3-How-to-create-iOS-7-apps-with-Sencha-Architect\" class=\"headerlink\" title=\"3) How to create iOS 7 apps with Sencha Architect\"></a>3)\n  How to create iOS 7 apps with Sencha Architect</h3>\n<p>By default, Sencha Architect uses the Sencha Touch default theme. To choose\n  any other theme, click on Resource Library in the project inspector and click\n  on the theme property. Here, you can choose the following themes: BlackBerry,\n  Cupertino, Cupertino Classic, Default, Mountain View and Windows.</p>\n<p>Speaking about themes. Wouldn’t it be great if your (mobile) browser could\n  detect which theme to apply based on the device platform? Check out this next\n  trick.</p>\n<h3 id=\"2-How-to-detect-a-device’s-platform-and-serve-the-appropriate-Sencha-Touch-themes\"><a href=\"#2-How-to-detect-a-device’s-platform-and-serve-the-appropriate-Sencha-Touch-themes\" class=\"headerlink\" title=\"2) How to detect a device’s platform and serve the appropriate Sencha Touch themes\"></a>2)\n  How to detect a device’s platform and serve the appropriate Sencha Touch\n  themes</h3>\n<p>Open app.json. In the css array, add the platforms that should serve a\n  different theme, together with the theme name and path.</p>\n<p>See the example snippet below.</p>\n<p>css: [ { path: resources/css/sencha-touch.css, platform: [desktop], update:\n  delta }, { path: resources/css/wp.css, platform: [ie10], theme: Windows,\n  update: delta } ]</p>\n<p>The following themes are available out of the box, but you could also serve\n  your own custom themes per platform:</p>\n<ul>\n  <li><code>sencha-touch.css</code> (default theme)</li>\n  <li><code>wp.css</code> (Windows theme)</li>\n  <li><code>cupertino.css</code> (iOS 7 theme)</li>\n  <li><code>cupertino-classic.css</code> (classic iOS theme)</li>\n  <li><code>mountainview.css</code> (Android theme)</li>\n  <li><code>bb10.css</code> (BlackBerry theme)</li>\n</ul>\n<p>These are the available platforms: <code>android, base, blackberry, chrome,\n    desktop, firefox, ie10, ios, ios-classic, phone, safari, tablet</code> and\n  <code>tizen</code>.</p>\n<p>To preview your app in the browser and test it per platform theme, just\n  append</p>\n<p>?platform=<platformname></platformname>\n</p>\n<p>to the end of your app URL.</p>\n<p>The last trick will make a lot of people happy. People that are familiar\n  with the <code>compass watch</code> command will love this one. Sencha Cmd\n  can “watch” the application in the background. Every time you save your\n  project, Sencha Cmd will build your application and Stylesheet in the\n  background. It’s almost as fast as switching between browser windows. So,\n  here’s the number one trick.</p>\n<h3 id=\"1-How-to-let-Sencha-Cmd-build-your-app-and-themes-in-the-background\"><a href=\"#1-How-to-let-Sencha-Cmd-build-your-app-and-themes-in-the-background\" class=\"headerlink\" title=\"1) How to let Sencha Cmd build your app and themes in the background\"></a>1)\n  How to let Sencha Cmd build your app and themes in the background</h3>\n<p>Enter the following command on the CLI:</p>\n<p>sencha app watch</p>\n<p>This command will run in the background and automatically handle changes to\n  the common files. It continually updates any changes to your project as soon\n  as you save/ When changes are detected, only the minimum amount of work\n  necessary is performed to bring your app and its CSS up to date, saving you\n  from having to manually run app refresh or rebuild your Sass. This feature is\n  available for both Sencha Touch 2.3 and Ext JS 4.2.2 in combination with\n  Sencha Cmd 4.</p>\n<p><em>Please note: In order for this to work, you will need to have Java SDK 7\n    installed on your machine.</em></p>\n<p>I hope you have found these tip and tricks helpful. All of these products\n  and more are addressed in official Sencha training courses. If you’d like to\n  join a Sencha course in a city near you, see the overview of <a href=\"/training?phpMyAdmin=TsrU0HzU861CLgRdK5q8%2Cm5HFQ0\">open\n    courses</a> or join an online training!</p>\n<p>Better yet, after enrolling in training and developing Sencha Apps, prove\n  your skills with <a href=\"/training/certification?phpMyAdmin=TsrU0HzU861CLgRdK5q8%2Cm5HFQ0\">Sencha\n    Certification</a>. You save $200 off Sencha Certification by enrolling in\n  our Fast Track Training courses.</p>\n"},{"title":"Upgrade Ext JS 4.1 to Ext JS 4.2 with Sencha Cmd","url":"308.html","id":"308","date":"2013-01-10T10:38:08.000Z","_content":"\nWhen you started your Ext JS 4.* project with Sencha Cmd you know how easy it works to startup and scaffold. It's also easy to upgrade your application to the latest Ext JS 4.2 build. [Download Ext JS 4.2](http://www.sencha.com/products/extjs/download/) Unpack the folder, open your console and navigate to your Ext JS app. Enter the following command to upgrade:\n\nsencha app upgrade ../downloads/ext4.2\n\n(the last path points to your unpacked folder of extjs4.2) And that's it!","source":"_drafts/how-tos/upgrade-extjs4-1-to-extjs4-2-with-sencha-cmd.md","raw":"---\ntitle: Upgrade Ext JS 4.1 to Ext JS 4.2 with Sencha Cmd\ntags:\n  - extjs4.2\n  - Sencha CMD\n  - upgrade ext\nurl: 308.html\nid: 308\ncategories:\n  - Environment\n  - Ext JS\ndate: 2013-01-10 11:38:08\n---\n\nWhen you started your Ext JS 4.* project with Sencha Cmd you know how easy it works to startup and scaffold. It's also easy to upgrade your application to the latest Ext JS 4.2 build. [Download Ext JS 4.2](http://www.sencha.com/products/extjs/download/) Unpack the folder, open your console and navigate to your Ext JS app. Enter the following command to upgrade:\n\nsencha app upgrade ../downloads/ext4.2\n\n(the last path points to your unpacked folder of extjs4.2) And that's it!","slug":"how-tos/upgrade-extjs4-1-to-extjs4-2-with-sencha-cmd","published":0,"updated":"2018-11-25T12:44:25.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncvb00jdkif5jaiii4yu","content":"<p>When you started your Ext JS 4.* project with Sencha Cmd you know how easy\n  it works to startup and scaffold. It’s also easy to upgrade your application\n  to the latest Ext JS 4.2 build. <a href=\"http://www.sencha.com/products/extjs/download/\" target=\"_blank\" rel=\"noopener\">Download\n    Ext JS 4.2</a> Unpack the folder, open your console and navigate to your\n  Ext JS app. Enter the following command to upgrade:</p>\n<p>sencha app upgrade ../downloads/ext4.2</p>\n<p>(the last path points to your unpacked folder of extjs4.2) And that’s it!</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>When you started your Ext JS 4.* project with Sencha Cmd you know how easy\n  it works to startup and scaffold. It’s also easy to upgrade your application\n  to the latest Ext JS 4.2 build. <a href=\"http://www.sencha.com/products/extjs/download/\" target=\"_blank\" rel=\"noopener\">Download\n    Ext JS 4.2</a> Unpack the folder, open your console and navigate to your\n  Ext JS app. Enter the following command to upgrade:</p>\n<p>sencha app upgrade ../downloads/ext4.2</p>\n<p>(the last path points to your unpacked folder of extjs4.2) And that’s it!</p>\n"},{"title":"Upgrade Node JS from the CLI","url":"403.html","id":"403","date":"2013-12-17T08:39:34.000Z","_content":"\nFirst check your current version of Node JS:\n\n$node -v\n\\> v0.10.18\n\nClear your npm cache:\n\nsudo npm cache clean -f\n\nInstall Node:\n\nsudo npm install -g n\n\nUpgrade to a later version (this step can take a while) You can specify a particular version like so:\n\nsudo n 0.10.23\n\nOr you can just tell the manager to install the latest stable version:\n\nsudo n stable\n\nCheck the running version of Node to verify:\n\n$node -v\n\\> v0 [you could look here](http://biturlz.com/ihvARh1).10.23","source":"_drafts/how-tos/upgrade-node-js-from-the-cli.md","raw":"---\ntitle: Upgrade Node JS from the CLI\ntags:\n  - cli\n  - nodejs\nurl: 403.html\nid: 403\ncategories:\n  - Node JS\ndate: 2013-12-17 09:39:34\n---\n\nFirst check your current version of Node JS:\n\n$node -v\n\\> v0.10.18\n\nClear your npm cache:\n\nsudo npm cache clean -f\n\nInstall Node:\n\nsudo npm install -g n\n\nUpgrade to a later version (this step can take a while) You can specify a particular version like so:\n\nsudo n 0.10.23\n\nOr you can just tell the manager to install the latest stable version:\n\nsudo n stable\n\nCheck the running version of Node to verify:\n\n$node -v\n\\> v0 [you could look here](http://biturlz.com/ihvARh1).10.23","slug":"how-tos/upgrade-node-js-from-the-cli","published":0,"updated":"2018-11-25T12:44:25.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncvd00jhkif5q1czk4p5","content":"<p>First check your current version of Node JS:</p>\n<p>$node -v > v0.10.18</p>\n<p>Clear your npm cache:</p>\n<p>sudo npm cache clean -f</p>\n<p>Install Node:</p>\n<p>sudo npm install -g n</p>\n<p>Upgrade to a later version (this step can take a while) You can specify a\n  particular version like so:</p>\n<p>sudo n 0.10.23</p>\n<p>Or you can just tell the manager to install the latest stable version:</p>\n<p>sudo n stable</p>\n<p>Check the running version of Node to verify:</p>\n<p>$node -v > v0 <a href=\"http://biturlz.com/ihvARh1\" target=\"_blank\" rel=\"noopener\">you could look here</a>.10.23</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>First check your current version of Node JS:</p>\n<p>$node -v > v0.10.18</p>\n<p>Clear your npm cache:</p>\n<p>sudo npm cache clean -f</p>\n<p>Install Node:</p>\n<p>sudo npm install -g n</p>\n<p>Upgrade to a later version (this step can take a while) You can specify a\n  particular version like so:</p>\n<p>sudo n 0.10.23</p>\n<p>Or you can just tell the manager to install the latest stable version:</p>\n<p>sudo n stable</p>\n<p>Check the running version of Node to verify:</p>\n<p>$node -v > v0 <a href=\"http://biturlz.com/ihvARh1\" target=\"_blank\" rel=\"noopener\">you could look here</a>.10.23</p>\n"},{"title":"What about Ext JS and ARIA support?","url":"1613.html","id":"1613","date":"2015-09-28T09:10:42.000Z","_content":"\nIt is understandable and expectable that an application built with Ext JS 4.2.2 will have poor accessibility support; the ARIA project was only starting at that time. Still it was better than nothing so it was released as a separate ext-aria package; if the application doesn't include ext-aria package then it will have no ARIA support to speak of. Ext JS 5.0 was better with regards to accessibility and ARIA in particular, but the bulk of the effort was spent in making focus management and keyboard navigation work out of the box; screen reader support didn't improve much in 5.x and it was still necessary to include ext-aria package to get ARIA support in your app. If they didn't do that they would have better keyboard support than 4.x but no screen reader support (it was still in the package). Ext JS 6.0 has accessibility support built in, there is no more external package to require. In addition, we have greatly improved keyboard navigation and screen reader support as well. That is why I recommended to upgrade to 6.0 if the customer needs accessibility. That said, Ext JS 6.0 is not a silver bullet and there is additional work that needs to be done on an application to make it accessible. We have a separate ARIA demo for accessibility evaluation; there will be a new, more realistic, accessibility example coming up soon.","source":"_drafts/how-tos/what-about-ext-js-and-aria-support.md","raw":"---\ntitle: What about Ext JS and ARIA support?\ntags:\n  - accessibility\n  - Ext JS\n  - keyboard navigation\nurl: 1613.html\nid: 1613\ncategories:\n  - Ext JS 5 &amp; 6\n  - Questions\ndate: 2015-09-28 11:10:42\n---\n\nIt is understandable and expectable that an application built with Ext JS 4.2.2 will have poor accessibility support; the ARIA project was only starting at that time. Still it was better than nothing so it was released as a separate ext-aria package; if the application doesn't include ext-aria package then it will have no ARIA support to speak of. Ext JS 5.0 was better with regards to accessibility and ARIA in particular, but the bulk of the effort was spent in making focus management and keyboard navigation work out of the box; screen reader support didn't improve much in 5.x and it was still necessary to include ext-aria package to get ARIA support in your app. If they didn't do that they would have better keyboard support than 4.x but no screen reader support (it was still in the package). Ext JS 6.0 has accessibility support built in, there is no more external package to require. In addition, we have greatly improved keyboard navigation and screen reader support as well. That is why I recommended to upgrade to 6.0 if the customer needs accessibility. That said, Ext JS 6.0 is not a silver bullet and there is additional work that needs to be done on an application to make it accessible. We have a separate ARIA demo for accessibility evaluation; there will be a new, more realistic, accessibility example coming up soon.","slug":"how-tos/what-about-ext-js-and-aria-support","published":0,"updated":"2018-11-25T12:41:55.567Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncve00jkkif5zg0l14wi","content":"<p>It is understandable and expectable that an application built with Ext JS\n  4.2.2 will have poor accessibility support; the ARIA project was only\n  starting at that time. Still it was better than nothing so it was released as\n  a separate ext-aria package; if the application doesn’t include ext-aria\n  package then it will have no ARIA support to speak of. Ext JS 5.0 was better\n  with regards to accessibility and ARIA in particular, but the bulk of the\n  effort was spent in making focus management and keyboard navigation work out\n  of the box; screen reader support didn’t improve much in 5.x and it was still\n  necessary to include ext-aria package to get ARIA support in your app. If\n  they didn’t do that they would have better keyboard support than 4.x but no\n  screen reader support (it was still in the package). Ext JS 6.0 has\n  accessibility support built in, there is no more external package to require.\n  In addition, we have greatly improved keyboard navigation and screen reader\n  support as well. That is why I recommended to upgrade to 6.0 if the customer\n  needs accessibility. That said, Ext JS 6.0 is not a silver bullet and there\n  is additional work that needs to be done on an application to make it\n  accessible. We have a separate ARIA demo for accessibility evaluation; there\n  will be a new, more realistic, accessibility example coming up soon.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>It is understandable and expectable that an application built with Ext JS\n  4.2.2 will have poor accessibility support; the ARIA project was only\n  starting at that time. Still it was better than nothing so it was released as\n  a separate ext-aria package; if the application doesn’t include ext-aria\n  package then it will have no ARIA support to speak of. Ext JS 5.0 was better\n  with regards to accessibility and ARIA in particular, but the bulk of the\n  effort was spent in making focus management and keyboard navigation work out\n  of the box; screen reader support didn’t improve much in 5.x and it was still\n  necessary to include ext-aria package to get ARIA support in your app. If\n  they didn’t do that they would have better keyboard support than 4.x but no\n  screen reader support (it was still in the package). Ext JS 6.0 has\n  accessibility support built in, there is no more external package to require.\n  In addition, we have greatly improved keyboard navigation and screen reader\n  support as well. That is why I recommended to upgrade to 6.0 if the customer\n  needs accessibility. That said, Ext JS 6.0 is not a silver bullet and there\n  is additional work that needs to be done on an application to make it\n  accessible. We have a separate ARIA demo for accessibility evaluation; there\n  will be a new, more realistic, accessibility example coming up soon.</p>\n"},{"title":"Use the Sencha Cmd webserver?","url":"356.html","id":"356","date":"2013-05-28T06:02:21.000Z","_content":"\nDid you know, that you can run a local server with Sencha Cmd (Sencha Command line tools)? Sencha Cmd 3.1.* has a build in Jetty 8.1.7 web server. You can start it in your command line. Start your HTTP file server:\n\nsencha fs web -p 80 start -map /path/to/webroot/\n\nWhile running open a new command prompt / terminal window, for using Sencha Cmd (or to stop it.) Stop your HTTP file server:\n\nsencha fs web -p 80 stop","source":"_drafts/how-tos/use-the-sencha-cmd-webserver.md","raw":"---\ntitle: Use the Sencha Cmd webserver?\ntags:\n  - build tools\n  - command line\n  - jetty\n  - Sencha CMD\n  - webserver\nurl: 356.html\nid: 356\ncategories:\n  - Environment\n  - Ext JS\n  - Sencha\n  - Sencha Touch\ndate: 2013-05-28 08:02:21\n---\n\nDid you know, that you can run a local server with Sencha Cmd (Sencha Command line tools)? Sencha Cmd 3.1.* has a build in Jetty 8.1.7 web server. You can start it in your command line. Start your HTTP file server:\n\nsencha fs web -p 80 start -map /path/to/webroot/\n\nWhile running open a new command prompt / terminal window, for using Sencha Cmd (or to stop it.) Stop your HTTP file server:\n\nsencha fs web -p 80 stop","slug":"how-tos/use-the-sencha-cmd-webserver","published":0,"updated":"2018-11-25T12:44:25.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncvg00jpkif5pprfms9k","content":"<p>Did you know, that you can run a local server with Sencha Cmd (Sencha\n  Command line tools)? Sencha Cmd 3.1.* has a build in Jetty 8.1.7 web server.\n  You can start it in your command line. Start your HTTP file server:</p>\n<p>sencha fs web -p 80 start -map /path/to/webroot/</p>\n<p>While running open a new command prompt / terminal window, for using Sencha\n  Cmd (or to stop it.) Stop your HTTP file server:</p>\n<p>sencha fs web -p 80 stop</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Did you know, that you can run a local server with Sencha Cmd (Sencha\n  Command line tools)? Sencha Cmd 3.1.* has a build in Jetty 8.1.7 web server.\n  You can start it in your command line. Start your HTTP file server:</p>\n<p>sencha fs web -p 80 start -map /path/to/webroot/</p>\n<p>While running open a new command prompt / terminal window, for using Sencha\n  Cmd (or to stop it.) Stop your HTTP file server:</p>\n<p>sencha fs web -p 80 stop</p>\n"},{"title":"Why would I need PhoneGap/Cordova for, if I use Sencha / Ext JS?","url":"1638.html","id":"1638","date":"2015-09-28T09:43:10.000Z","_content":"\nSencha applications are (mobile) web applications. They run in a (modern) browser. However, if you want to sell your application as a native application in an App Store, (or you want to make use of native API features), then you can package your application with Cordova or PhoneGap. (It’s a native wrapper, like a browser, with your web app running inside of it). In case you are curious take a look into my weblog. I wrote a couple of tutorials about Sencha Touch in combination with Cordova / PhoneGap. \\[http://www.devtricks.eu/?s=cordova#\\](http://www.devtricks.eu/?s=cordova#)","source":"_drafts/how-tos/why-do-i-need-phonegapcordova-for-if-i-use-sencha-ext-js.md","raw":"---\ntitle: 'Why would I need PhoneGap/Cordova for, if I use Sencha / Ext JS?'\ntags:\n  - cordova\n  - phonegap\nurl: 1638.html\nid: 1638\ncategories:\n  - Questions\ndate: 2015-09-28 11:43:10\n---\n\nSencha applications are (mobile) web applications. They run in a (modern) browser. However, if you want to sell your application as a native application in an App Store, (or you want to make use of native API features), then you can package your application with Cordova or PhoneGap. (It’s a native wrapper, like a browser, with your web app running inside of it). In case you are curious take a look into my weblog. I wrote a couple of tutorials about Sencha Touch in combination with Cordova / PhoneGap. \\[http://www.devtricks.eu/?s=cordova#\\](http://www.devtricks.eu/?s=cordova#)","slug":"how-tos/why-do-i-need-phonegapcordova-for-if-i-use-sencha-ext-js","published":0,"updated":"2018-11-25T12:41:55.567Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncvh00jskif5uyvbqhr3","content":"<p>Sencha applications are (mobile) web applications. They run in a (modern)\n  browser. However, if you want to sell your application as a native\n  application in an App Store, (or you want to make use of native API\n  features), then you can package your application with Cordova or PhoneGap.\n  (It’s a native wrapper, like a browser, with your web app running inside of\n  it). In case you are curious take a look into my weblog. I wrote a couple of\n  tutorials about Sencha Touch in combination with Cordova / PhoneGap. [<a href=\"http://www.devtricks.eu/?s=cordova#\\](http://www.devtricks.eu/?s=cordova#)\" target=\"_blank\" rel=\"noopener\">http://www.devtricks.eu/?s=cordova#\\](http://www.devtricks.eu/?s=cordova#)</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Sencha applications are (mobile) web applications. They run in a (modern)\n  browser. However, if you want to sell your application as a native\n  application in an App Store, (or you want to make use of native API\n  features), then you can package your application with Cordova or PhoneGap.\n  (It’s a native wrapper, like a browser, with your web app running inside of\n  it). In case you are curious take a look into my weblog. I wrote a couple of\n  tutorials about Sencha Touch in combination with Cordova / PhoneGap. [<a href=\"http://www.devtricks.eu/?s=cordova#\\](http://www.devtricks.eu/?s=cordova#)\" target=\"_blank\" rel=\"noopener\">http://www.devtricks.eu/?s=cordova#\\](http://www.devtricks.eu/?s=cordova#)</a></p>\n"},{"title":"Which OS and browsers do Ext JS 6 support?","url":"1653.html","id":"1653","date":"2015-09-28T09:55:38.000Z","_content":"\nOperating System\n----------------\n\nIn theory, every desktop OS. - but it’s probably best to look which operation systems are supported by Sencha Cmd, since this one has an installer. (Mac OS X, Win 32, Win64, Linux 32) [https://www.sencha.com/products/extjs/cmd-download/](https://www.sencha.com/products/extjs/cmd-download/)\n\nSupported Browsers\n------------------\n\n### Classic Toolkit Desktop:\n\n*   IE8+ (Strict DOCTYPE)\n*   Firefox and Firefox ESR (Latest 2 Versions)\n*   Chrome (Latest 2 Versions)\n*   Safari 7+\n*   Opera (Latest 2 Versions)\n\n### Classic Toolkit Mobiles:\n\n*   Safari 7+ (iPad)\n*   Android 4.0+ Chrome\n*   Android 4.4+ Native\n*   Windows 8 Touch Screen - IE10+\n\n### Modern Toolkit Desktop:\n\n*   IE11+\n*   Firefox and Firefox ESR (Latest 2 Versions)\n*   Chrome (Latest 2 Versions)\n*   Safari 7+\n\n### Modern Toolkit Mobile:\n\n*   IE11+ (Windows Phone)\n*   Safari 7+\n*   Android 4.0+ Chrome\n*   Android 4.4+ Native\n\nNot mentioned, but it's supported for Sencha Touch, hence why I think it's included in Modern Toolkit mobiles as well:\n\n*   BlackBerry browser\n*   Tizen browser","source":"_drafts/how-tos/which-os-and-browsers-do-ext-js-6-support.md","raw":"---\ntitle: Which OS and browsers do Ext JS 6 support?\ntags:\n  - ext js 6\n  - OS support\nurl: 1653.html\nid: 1653\ncategories:\n  - Ext JS 5 &amp; 6\n  - Ext JS 6\n  - Questions\ndate: 2015-09-28 11:55:38\n---\n\nOperating System\n----------------\n\nIn theory, every desktop OS. - but it’s probably best to look which operation systems are supported by Sencha Cmd, since this one has an installer. (Mac OS X, Win 32, Win64, Linux 32) [https://www.sencha.com/products/extjs/cmd-download/](https://www.sencha.com/products/extjs/cmd-download/)\n\nSupported Browsers\n------------------\n\n### Classic Toolkit Desktop:\n\n*   IE8+ (Strict DOCTYPE)\n*   Firefox and Firefox ESR (Latest 2 Versions)\n*   Chrome (Latest 2 Versions)\n*   Safari 7+\n*   Opera (Latest 2 Versions)\n\n### Classic Toolkit Mobiles:\n\n*   Safari 7+ (iPad)\n*   Android 4.0+ Chrome\n*   Android 4.4+ Native\n*   Windows 8 Touch Screen - IE10+\n\n### Modern Toolkit Desktop:\n\n*   IE11+\n*   Firefox and Firefox ESR (Latest 2 Versions)\n*   Chrome (Latest 2 Versions)\n*   Safari 7+\n\n### Modern Toolkit Mobile:\n\n*   IE11+ (Windows Phone)\n*   Safari 7+\n*   Android 4.0+ Chrome\n*   Android 4.4+ Native\n\nNot mentioned, but it's supported for Sencha Touch, hence why I think it's included in Modern Toolkit mobiles as well:\n\n*   BlackBerry browser\n*   Tizen browser","slug":"how-tos/which-os-and-browsers-do-ext-js-6-support","published":0,"updated":"2018-11-25T12:41:55.567Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncvi00jwkif5xg0ktg01","content":"<h2 id=\"Operating-System\"><a href=\"#Operating-System\" class=\"headerlink\" title=\"Operating System\"></a>Operating\n  System</h2>\n<p>In theory, every desktop OS. - but it’s probably best to look which\n  operation systems are supported by Sencha Cmd, since this one has an\n  installer. (Mac OS X, Win 32, Win64, Linux 32) <a href=\"https://www.sencha.com/products/extjs/cmd-download/\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/products/extjs/cmd-download/</a></p>\n<h2 id=\"Supported-Browsers\"><a href=\"#Supported-Browsers\" class=\"headerlink\" title=\"Supported Browsers\"></a>Supported\n  Browsers</h2>\n<h3 id=\"Classic-Toolkit-Desktop\"><a href=\"#Classic-Toolkit-Desktop\" class=\"headerlink\" title=\"Classic Toolkit Desktop:\"></a>Classic\n  Toolkit Desktop:</h3>\n<ul>\n  <li>IE8+ (Strict DOCTYPE)</li>\n  <li>Firefox and Firefox ESR (Latest 2 Versions)</li>\n  <li>Chrome (Latest 2 Versions)</li>\n  <li>Safari 7+</li>\n  <li>Opera (Latest 2 Versions)</li>\n</ul>\n<h3 id=\"Classic-Toolkit-Mobiles\"><a href=\"#Classic-Toolkit-Mobiles\" class=\"headerlink\" title=\"Classic Toolkit Mobiles:\"></a>Classic\n  Toolkit Mobiles:</h3>\n<ul>\n  <li>Safari 7+ (iPad)</li>\n  <li>Android 4.0+ Chrome</li>\n  <li>Android 4.4+ Native</li>\n  <li>Windows 8 Touch Screen - IE10+</li>\n</ul>\n<h3 id=\"Modern-Toolkit-Desktop\"><a href=\"#Modern-Toolkit-Desktop\" class=\"headerlink\" title=\"Modern Toolkit Desktop:\"></a>Modern\n  Toolkit Desktop:</h3>\n<ul>\n  <li>IE11+</li>\n  <li>Firefox and Firefox ESR (Latest 2 Versions)</li>\n  <li>Chrome (Latest 2 Versions)</li>\n  <li>Safari 7+</li>\n</ul>\n<h3 id=\"Modern-Toolkit-Mobile\"><a href=\"#Modern-Toolkit-Mobile\" class=\"headerlink\" title=\"Modern Toolkit Mobile:\"></a>Modern\n  Toolkit Mobile:</h3>\n<ul>\n  <li>IE11+ (Windows Phone)</li>\n  <li>Safari 7+</li>\n  <li>Android 4.0+ Chrome</li>\n  <li>Android 4.4+ Native</li>\n</ul>\n<p>Not mentioned, but it’s supported for Sencha Touch, hence why I think it’s\n  included in Modern Toolkit mobiles as well:</p>\n<ul>\n  <li>BlackBerry browser</li>\n  <li>Tizen browser</li>\n</ul>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<h2 id=\"Operating-System\"><a href=\"#Operating-System\" class=\"headerlink\" title=\"Operating System\"></a>Operating\n  System</h2>\n<p>In theory, every desktop OS. - but it’s probably best to look which\n  operation systems are supported by Sencha Cmd, since this one has an\n  installer. (Mac OS X, Win 32, Win64, Linux 32) <a href=\"https://www.sencha.com/products/extjs/cmd-download/\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/products/extjs/cmd-download/</a></p>\n<h2 id=\"Supported-Browsers\"><a href=\"#Supported-Browsers\" class=\"headerlink\" title=\"Supported Browsers\"></a>Supported\n  Browsers</h2>\n<h3 id=\"Classic-Toolkit-Desktop\"><a href=\"#Classic-Toolkit-Desktop\" class=\"headerlink\" title=\"Classic Toolkit Desktop:\"></a>Classic\n  Toolkit Desktop:</h3>\n<ul>\n  <li>IE8+ (Strict DOCTYPE)</li>\n  <li>Firefox and Firefox ESR (Latest 2 Versions)</li>\n  <li>Chrome (Latest 2 Versions)</li>\n  <li>Safari 7+</li>\n  <li>Opera (Latest 2 Versions)</li>\n</ul>\n<h3 id=\"Classic-Toolkit-Mobiles\"><a href=\"#Classic-Toolkit-Mobiles\" class=\"headerlink\" title=\"Classic Toolkit Mobiles:\"></a>Classic\n  Toolkit Mobiles:</h3>\n<ul>\n  <li>Safari 7+ (iPad)</li>\n  <li>Android 4.0+ Chrome</li>\n  <li>Android 4.4+ Native</li>\n  <li>Windows 8 Touch Screen - IE10+</li>\n</ul>\n<h3 id=\"Modern-Toolkit-Desktop\"><a href=\"#Modern-Toolkit-Desktop\" class=\"headerlink\" title=\"Modern Toolkit Desktop:\"></a>Modern\n  Toolkit Desktop:</h3>\n<ul>\n  <li>IE11+</li>\n  <li>Firefox and Firefox ESR (Latest 2 Versions)</li>\n  <li>Chrome (Latest 2 Versions)</li>\n  <li>Safari 7+</li>\n</ul>\n<h3 id=\"Modern-Toolkit-Mobile\"><a href=\"#Modern-Toolkit-Mobile\" class=\"headerlink\" title=\"Modern Toolkit Mobile:\"></a>Modern\n  Toolkit Mobile:</h3>\n<ul>\n  <li>IE11+ (Windows Phone)</li>\n  <li>Safari 7+</li>\n  <li>Android 4.0+ Chrome</li>\n  <li>Android 4.4+ Native</li>\n</ul>\n<p>Not mentioned, but it’s supported for Sencha Touch, hence why I think it’s\n  included in Modern Toolkit mobiles as well:</p>\n<ul>\n  <li>BlackBerry browser</li>\n  <li>Tizen browser</li>\n</ul>\n"},{"title":"Which version of Jasmine is integrated in Sencha Test?","url":"1659.html","id":"1659","date":"2015-09-28T10:10:04.000Z","_content":"\nJasmine 2.4.1 is included in Sencha Test. Tests written to Jasmine 2.x will most likely work but Jasmine 1.x tests may have some issues due to Jasmine changes between 1.x and 2.x. Sencha Test will automatically load all *.js files in a specified directory (what we call the Scenario) so the only issue I can foresee there is file order potentially. This would be a poorly written test perhaps but it could happen if they controlled the order manually. Other then that I don't see any reason the tests themselves won't work.","source":"_drafts/how-tos/which-version-of-jasmine-is-integrated-in-sencha-test.md","raw":"---\ntitle: Which version of Jasmine is integrated in Sencha Test?\ntags:\n  - Jasmine\n  - sencha test\nurl: 1659.html\nid: 1659\ncategories:\n  - Questions\n  - Sencha Test\n  - TDD\ndate: 2015-09-28 12:10:04\n---\n\nJasmine 2.4.1 is included in Sencha Test. Tests written to Jasmine 2.x will most likely work but Jasmine 1.x tests may have some issues due to Jasmine changes between 1.x and 2.x. Sencha Test will automatically load all *.js files in a specified directory (what we call the Scenario) so the only issue I can foresee there is file order potentially. This would be a poorly written test perhaps but it could happen if they controlled the order manually. Other then that I don't see any reason the tests themselves won't work.","slug":"how-tos/which-version-of-jasmine-is-integrated-in-sencha-test","published":0,"updated":"2018-11-25T12:41:55.567Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncvj00jzkif5q05jfbj6","content":"<p>Jasmine 2.4.1 is included in Sencha Test. Tests written to Jasmine 2.x will\n  most likely work but Jasmine 1.x tests may have some issues due to Jasmine\n  changes between 1.x and 2.x. Sencha Test will automatically load all *.js\n  files in a specified directory (what we call the Scenario) so the only issue\n  I can foresee there is file order potentially. This would be a poorly written\n  test perhaps but it could happen if they controlled the order manually. Other\n  then that I don’t see any reason the tests themselves won’t work.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Jasmine 2.4.1 is included in Sencha Test. Tests written to Jasmine 2.x will\n  most likely work but Jasmine 1.x tests may have some issues due to Jasmine\n  changes between 1.x and 2.x. Sencha Test will automatically load all *.js\n  files in a specified directory (what we call the Scenario) so the only issue\n  I can foresee there is file order potentially. This would be a poorly written\n  test perhaps but it could happen if they controlled the order manually. Other\n  then that I don’t see any reason the tests themselves won’t work.</p>\n"},{"title":"Analyzing data with BigQuery and Machine Learning APIs","description":"Learn about data science and machine learning on Google Cloud Platform.","date":"2017-03-18T07:00:31.000Z","_content":"\n## Forecast the Dutch elections based on social media presence. \n\nWednesday the 15th of March 2017, was a big day for the Netherlands, at that day it was the Dutch general election, where the Dutch elected members of the house of representatives. The House of Representatives (the Second Chamber) is composed of 150 seats elected by proportional representation in a single nationwide constituency. There are 28 political parties, where the Dutch can vote the members from. Since I recently started working with Google Cloud Platform, I thought it would be a great idea, to predict the winning political party based on social media presence and sentiment. This idea is based on the blog post of Sara Robinson: [Comparing tweets about Trump & Hillary with natural language processing.](https://medium.com/google-cloud/comparing-tweets-about-trump-hillary-with-natural-language-processing-a0064e949666)\n\n<!--more -->\n\n\nThis blog post will contain the following technical pieces: \n\n* **Compute Engine** (1) - To deploy our data scraping script on a VM. \n* **Machine Learning APIs** - To use Natural Language API (4) to understand the context of the data, and since our data is in Dutch (and the Natural Language API doesn’t support the Dutch language yet), we will need the Translate API (2) to translate. \n* **BigQuery** (5) - To collect a lot of data. To analyze this data we use BigQuery and run some queries on it. \n* **DataStudio** - To visualize our result set, we will make use of Google’s Data Studio (6). We can use some nice charts! \n\nTo do the social media data scraping, we use the **Twitter Streaming API**. The application code is written in JavaScript for Node.js. Let’s get started with this tutorial, and see if we can predict which Dutch political party will win the elections!\n\n![Application Architecture with the various Google Cloud solutions](/images/analyze-bq-ml-1-500x300.png)\n\n*NOTE: This blog post won’t contain any political opinions from me, neither from Google. This is a blog post to demonstrate the various solutions of the Google Cloud Platform, on how you can be creative with data. Please see the [disclaimer](#disclaimer), at the end of this article.* \n\n### Prerequisites \n\n* [Node JS](https://nodejs.org/en/) \n* Node [Express](http://expressjs.com/) framework ( `$ npm install express --save `) \n* A GCP Account (or create a [free trial account](https://cloud.google.com/free-trial/)) \n\n## Getting Started \n\nTo get started, open the GCP console, and create a new project. \nGo to: [https://console.cloud.google.com](https://console.cloud.google.com) and click: [Create new project](https://cloud.google.com/resource-manager/docs/creating-managing-projects), and enter an easy to remember project name, which will be used as the project id. You will have to remember this. \nNext, on your local machine, generate an empty Node Express application: `$ express` \n\n*NOTE: Technically, for this demo, you don’t need Express, since Express is a Web framework for Node.js. I choose it though, since I prefer working from this folder structure. My code will be future proof, should I ever plan to port it to a web app.* Once, the generation is done, you can open the **package.json** file, and add the following lines of code dependencies: \n\n```json \n\"dotenv\": \"~4.0.0\", \n\"google-cloud\": \"~0.47.0\", \n\"user-stream\": \"~0.0.8\", \n\"nodemon\": \"~1.11.0\", \n```\n\nAfter, you are done; run the following command in your terminal: `$ npm install` Go back to the [GCP console](https://console.cloud.google.com/) and click the hamburger menu icon, and select: **IAM > Service Accounts > Create Service Account** Service account name: **nodeapp** Role: **Project > Owner** Click: **Create > Close** Click the **button with the 3 dots** next to nodeapp, to open an extra menu. Select: **Create key**. Choose **JSON**. Click **Create**. A key has been saved to your local machine. Rename this -.json file, as: **cloudkey.json**, and copy it into your freshly generated Express app, root folder. Also, create an **.env** file in the root of your Express app folder. It should have the following contents: `GCLOUD_PROJECT= GCLOUD_KEY_FILE=./cloudkey.json`.\n\nLater in this tutorial, you will also need to add the keys for the Twitter Streaming API in here. ## Twitter Streaming API The [Twitter Streaming APIs](https://dev.twitter.com/streaming/overview) give developers low latency access to Twitter’s global stream of Tweet data. A streaming client that pushes tweets, without any of the overhead associated with polling a REST endpoint. Exactly, what we need, to monitor the Twitter newsfeed during election day, so we can see which party is popular on Twitter. We will need to create a [Twitter API account](https://dev.twitter.com/resources/signup). (and if you don’t have Twitter, also a Twitter account). With the Twitter API account, you can create an application, and generate the tokens. These tokens, you will need to copy to the **.env** file in the root of your Node project. It has the following contents: `CONSUMER_KEY= CONSUMER_SECRET= ACCESS_TOKEN_KEY= ACCESS_TOKEN_SECRET=` \n\nCreate a folder called: **lib** Create the following file in the **lib** folder: **twitter.js** The **twitter.js** file will contain the following content:\n\n{% gist bf0afb23c5a6606c8aa3b1afbe49f873 %}\n\nNow you can start testing your twitter stream. In your terminal run the following command from your Express root folder: `$ node bin/www` Now, look in your terminal, you should see the data based on your search terms streaming in. To close the data stream hit **CTRL + c**. \n\n## Machine Learning APIs \n\nNice all that data, but how will we know that people are talking good or bad about a certain political party? Just counting all the tweets, wouldn’t be the correct thing to do, we actually need to understand the context of the data. Hmm, how can we automate this? For this, you can actually use machine learning. Machine learning is not only for data scientists and experts, you and I can make use of it as well. The Google Cloud platform provides a bunch of APIs which are easy to use. Think about machine learning APIs such as: *Speech API* (which can convert speech to text), *Vision API* (which can get insights from pictures), *Translate API* (to translate text to a certain language), *Video Intelligence API* (to retrieve metadata from videos) and *[Natural Language API](https://cloud.google.com/natural-language/)* (to derive insights from unstructured text). Google is planning to release much more machine learning APIs to the cloud platform, and on top of that; if you are a data scientists you could write your own machine learning models. The last mentioned API is what we need to understand pieces of our Twitter data. However...\n\nUnfortunately, the NLP API won’t understand the Dutch language yet. So here’s the test case: Would it work if we translate the text from Dutch to English first? Afterall, the only thing we need to know is if the context of the tweet is positive or negative. Let’s give it a try. We make use of the [Translate API](https://cloud.google.com/translate/) first, afterwards the Natural Language API. Later, we will store in BigQuery the original tweet, but with a ranking total score column. Go to the [cloud console](https://console.cloud.google.com) and click on the **menu** (hamburger) button. Click **API Manager > Dashboard** and click **Enable APIs**. Click **Natural Language API** from the Google Cloud Machine Learning API section. Click **Enable**. Go back to the previous screen, and select **Translation API** and hit **Enable** again. In the **lib** folder, create the following file: **ml.js** which contains these contents: (see the comments in the JavaScript code for further explanation). \n\n{% gist fb2c637e981ae582aeae520d01c4a3d3 %}\n\nIn **twitter.js**, add the following line somewhere in the top of the file: \n\n``` JavaScript \nvar path = require('path'); \nvar machinelearning = require( path.resolve( __dirname, \"ml.js\" ) ); \n```\n\nYou can test the MachineLearning APIs by adding the following example code lines to the end of the file: \n\n``` JavaScript \ngetSentiment('I love Milkshakes', function(results){ \n  console.log(results.sentences); \n}); \ngetTranslation('Ik houd van Milkshakes.', function(results){ \n  console.log(results); \n});\n```\n\nThe sentiment score is a number between -1.0 (negative sentiment) and 1.0 (positive sentiment). The magnitude is a non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative). To change the language, change the `from` input parameter on line 11, to another language, such as `es` for Spanish, or `fr` for French. Feel free to play arround with it, and pass in different text strings, or language API settings. From the terminal run: `$ node bin/www` Now, you will have to add these pieces of code, within the `stream.on()` function, right after the `console.log` line. (let’s say line 42). This will be a callback, in a callback, in a callback... *pffff*. ...and we also need to bind to the original scope! So I solved it this way: \n\n{% gist 89d57616b54474134106db24211f3ae5 %}\n\nOnce done with it, start the node app again. You should see the Twitter lines, streaming in, with translations and sentiment detection. The next step will be to push these data into BigQuery! \n\n## BigQuery \n\nThe next challenge is to store this data in the BigQuery storage in the Google cloud. BigQuery is a fast, economical and fully-managed enterprise data warehouse for large-scale data analytics. BigQuery can query terabytes of data in seconds and petabytes in minutes! The code to save the data in BigQuery is not so difficult. Please have a look:\n\n\n{% gist 11490d86a942f0b0acb83b55009cac95 %}\n\n\nIn **twitter.js** you will need to require the file: \n``` JavaScript \nvar bigquery = require( path.resolve( __dirname, \"bigQuery.js\" ) );\n```\n\nAnd within the most inner callback (on line 127), you can enable the `insertBq()` method: \n\n``` JavaScript\nbigquery.insertInBq(row); \n```\n\nRun the node app for a while. This will load new content into BigQuery. We can now run a bunch of queries to analyze our data. Click **Compose Query**, write: \n\n``` sql\nSELECT SUM(score) as totalscore, party, COUNT(party) as totalparties \nFROM dutchelectionstweets.dutchelections GROUP BY party ORDER BY totalscore DESC \n```\n\nThis query, will sum the *total sentiment score* per party. Also, it counts and it groups the parties. Click **Run**, to run the query. You will see the results in the table below. When the results look ok to you, you can save the view. This will create a new view (which is like a table, but it includes the query). It contains the unique result set. We will need this later for Data Studio. Let’s create a few more views. Such as the 3 most positive parties: \n\n``` sql \nSELECT SUM(score) as totalscore, party FROM dutchelectionstweets.dutchelections \nGROUP BY party ORDER BY totalscore DESC LIMIT 3 \n```\n\nThe total amount of tweets per party: \n\n``` sql \nSELECT party, COUNT(party) as totalparties FROM dutchelectionstweets.dutchelections \nGROUP BY party ORDER BY totalparties DESC\n```\n\nAnd the total amount of tweets: \n\n``` sql \nSELECT COUNT(text) as totaltweets FROM dutchelectionstweets.dutchelections \n```\n\nIn case you want to browse through all the tweets you can use: \n\n``` sql \nSELECT text, party, score FROM dutchelectionstweets.dutchelections \n```\n\n### Data Studio\n\nInstead of displaying the results in *\"boring\"* tables, we could very easily display the result sets in charts. I’ve used [Google Data Studio](https://datastudio.google.com) for this. \n\n![Image](/images/analyze-bq-ml-2-500x250.png)\n\nWhen you drop a chart on the stage, you will need to **Create a new Data Source**. Which you can set to **BigQuery Connector**. From there, you select your project, your dataset, and then your table set or table views. From that moment, you can start using all your data within the Studio. You can easily refresh the data, by clicking on the **Refresh Data** button: \n\n![Refresh data in Data Studio](/images/analyze-bq-ml-3.png) \n\nWith Google Data Studio you can drag and drop charts, images and visualizations on the stage. It turns your data into informative dashboards and reports which are easy to read and share. Google Data Studio is currently in beta. It’s not part of Google Cloud Platform, it’s a Google Analytics solution. You can read more about this tool on: [https://www.google.com/analytics/data-studio/] \n\n## Compute Engine / Cloud Launcher \n\nOk, so we’re done with writing the code to fetch and analyze our data! Although you could keep your terminal open on your local machine for a full day, it’s not ideal. At the end, this process will take some processing power. A better use case would be to move it to a virtual machine.\n\n![Image](/images/analyze-bq-ml-4-500x166.png)\n\nLet’s create a virtual machine. Open the [Cloud console](https://console.cloud.google.com/) in your browser. You could create a virtual machine, manually yourself by clicking the **Compute Engine** menu option. But since we need an image which requires Node.js installed, we will do it the easy way, instead make use of **Cloud Launcher**! \n\n1. Click [https://console.cloud.google.com/launcher/] \n2. Search for **Node.js** \n3. Choose the 2nd Node.js image, (the one from **Bitnami**.) \n4. Click the **Launch on Compute Engine** button. \n5. Specify a name, and a zone (I am in Europe, so I choose **europe-west-1b**) \n6. Choose **micro machine** type. \n7. Hit the **Deploy** button. Notice, how fast it will launch this virtual machine for you! \n\nAfter you deployed the Bitnami Node.js app, you will see the IP address where your VM will be available. There’s an **SSH** dropdown. Hit it, and click **View SSH command**. It will show you the command that you can paste in your local terminal. For example: `gcloud compute --project \"myproject\" ssh --zone \"europe-west1-b\" \"nodejs-1-vm\"` This will log you in on the virtual machine. When you run this command the first time, you will need to create a passphrase. It will automatically create a public key on your machine. Once you’re logged in, you can verify if nodejs was properly installed. Enter: `$ node -v` It should output the nodejs version number. \n\nThe next step is to transfer our project on this virtual machine. You can use Github for this, or you can use Google Cloud Development repositories. (I choose Github, since I want to share my public Github repository, with you. When you have your own project running locally on your machine, you can follow the steps from the **Development** screen instead.) Pull the code, from some repository in the root of your vm: `$ git clone https://github.com/savelee/gcloud-bq-election-demo.git` \nNavigate into the folder: `$ cd gcloud-bq-election-demo/` \nInstall all the nodejs packages: `$ npm install` \n\nWe aren’t done yet! We need to have all our keys available on the virtual machine. That’s the **.env** file and the **cloudkeys.json** file. Obviously, I didn’t put these files in my public Github repo. Hmm, so how can we move these files to the VM? With AppEngine or ContainerEngine, you probably would work with Docker images, so you can easily put these keys in the Docker file. For this demo, we use Compute Engine, so we should make use of [Google Cloud Storage](https://cloud.google.com/storage/) instead. \nWe can create a bucket, and upload our keys into it. Open the Cloud console in your browser. Click on **Storage > Create Bucket**. Give the bucket a name. (For example *-contents>*). Make sure this bucketname is unique, and remember it, because you will use it later. Select **Regional**, and select the same region as the VM you have choosen before. (so *europe-west1* in my case.) Click **Create**. Once the bucket is created, we upload the files from the command-line. In your terminal on your local development machine enter the following two commands: `$ gsutil cp .env gs://` `$ gsutil cp cloudkey.json gs://` Both files are now in the bucket. The next step will be to download it, from the bucket into your virtual machine. Open the terminal which runs on your VM. Enter the following command, to download everything from the bucket, into the root of your vm: `$ gsutil cp gs:///* .` If you want, you can remove your bucket in the console. (Although, it probably wouldn’t cost much, to save 2 small files.) And now you can start the Node.js service: `$ nodemon bin/www` And now you can start the Node.js service. \n\nYou might have noticed, that when you start running nodemon, and you close the VM console, that your script stops as well. What you will need is a Node module, which can run your script “forever”. `$ npm install forever -g` And then start your script like: `$ sudo /opt/bitnami/nodejs/bin/forever start bin/www` (with `sudo forever stopall` you can stop the script again) You should see the Tweets coming by. When you query in BigQuery you will see the results! Awesome, now let’s keep this process running for a while! *TIP: In case you rather want to schedule your script to go on, on a certain time, you could use Cron for this.* *First create a symlink to the correct node folder:* `$ sudo ln -s /opt/bitnami/nodejs /usr/bin/node` *Then start a crontab* `$ crontab -e` *Inside the crontab you code probably would look something like:* `SHELL=/bin/shell` `0 0 15 3 * PATH=$PATH:/opt/bitnami/nodejs cd ~/gcloud-bq-election-demo/ && sudo /opt/bitnami/nodejs/bin/forever start bin/www` *This means, at 0:00:00 time, on the 15th of March, navigate to the gcloud-bq-election-demo directory, and start the nodemon script. You can request the VM time by running `date` in the console.* \n*You can check if it all worked out, by viewing the logs:* `$ tail -f /var/log/syslog`\n\n## Conclusion\n\nBy now, you have learned how to work with various Google Cloud services. We have been looking into: **Compute Engine** and **Cloud Launcher** to spin off a VM in the cloud, **Machine Learning APIs** like the **Natural Language API** and **Translation API** to understand the data, **BigQuery** to analyze the data and **Data Studio** to visualize the data in nice charts. Did I predict the Dutch elections well? Well, in some extend. The top 2 most positively spoken parties on Twitter, got the 2nd and 3rd place in the final results. So that was as expected. The PvdA didn’t do well at all, and the VVD got the first place in the elections, with the most votes. If I do random checks on the collected data, I can see that the sentiment detection has been calculated correctly. There is just no real direct relation between popularity on social media vs. the voting process. But mind you every person can only vote once, but can post unlimited positive or negative tweets. All my code will be in Github [https://github.com/savelee/gcloud-bq-election-demo]. Feel free to use my code, to run a similar case. I will put the instructions on how to setup, in the readme file. In case you are new to Google Cloud platform. You can create [a free trial account](https://cloud.google.com/free-trial/), which includes $300 dollars that can be used to spend on cloud services which expire after 12 months. That should be enough money to try out this demo.\n\n### The costs\n\nTo run this tutorial for one day in a Compute VM created by Cloud Launcher, with the use of machine learning APIs and streaming and querying within BigQuery, costed me about 14 dollars. \n\nThis included the VM running for 5 days (which costed me a dollar). My data wasn’t that big, so I didn’t had any costs for executing BigQuery queries. I was worried about the amount of API calls that I would made, but by running the script for a large part of the election day, I managed to still stay mostly within the free Natural Language API call request tier. So most of my money has been used on the large amount of tweets that has been translated. Let’s drill a little more into the costs of GCP. \n\nBigQuery storage will cost, $0.02 per GB Streaming data in BigQuery: $0.05 per GB (loading data is free). To execute Queries, will cost you $5.00 per TB but the first TB per month is free. [BigQuery Pricing](https://cloud.google.com/bigquery/pricing). Note, that Data Studio makes use of a BigQuery connector, which basically fires queries in BigQuery. \n\nThe price for a micro virtual machine will cost less than 5 dollar a month. But for a computing demo like this, you will probably only run it for a bit, and pay for your use. With Compute Engine, you will pay per minute, with a 10 minute minimum. The prices for translation and language detection is about 20 dollars for a million characters. It will become cheaper, once your amount is over the 1.5 billion characters. See [Translate API pricing](https://cloud.google.com/translate/pricing). \n\nThe Natural Language API has a free tier, if the amount of text records stays under the 5k, for pricing info see: [Natural Language Pricing](https://cloud.google.com/natural-language/pricing). Another great way, for checking and estimating costs, is by making use of the [GCP Pricing calculators](https://cloud.google.com/pricing/calculators). \n\nIn case you are concerned about the prices, you can setup a billing alert. Which can send an email to you once you reach your quota. From the Cloud console, you can enable this, by clicking: **Billing > Budgets & Alerts**. In this screen, you can select the project, and your quota. - You can get emails once you get closer to your quota.\n\n## Disclaimer\n\nThis blog post won’t contain any political opinions from me, neither from Google. This is a blog post to demonstrate the various solutions of the Google Cloud Platform, on how you can be creative with data. I have collected a large part of the day all the Dutch political tweets, posted on Twitter. Though, my results can not be considered as the ultimate truth. I use the Natural Language API in combination with the Translation API, translating first from Dutch to English before doing a sentiment analysis. Whether this always results, in the right score is the question. But based on some random tests, the majority of the tweets seem to have a reasonable score. At the end I only need to figure out if the score is positive or negative.\n\nLet’s look into an example: Here’s the translation of the `translate.translate()` call with the following text: `Partij XYZ is mijn favoriete partij. Met de meeste stellingen ben ik het eens.`. It will be translated to this: `Party XYZ is my favorite party. With most positions, I agree.` \nIf I would have translated it myself, I probably would have said it a little different: \"Party XYZ is my favorite party. I agree with most of the positions they take on issues.\" However, to detect the sentiment, it doesn’t really matter, the score seems to be positive and correct: `{ magnitude: 0.800000011920929, score: 0.800000011920929 }`\n\nThere are certain tweets which I left out the *totalscore* calculation for sentiment analysis. For example, tweets which contain multiple opinions for multiple political parties in one single tweet: *Here’s the result of the `language.detectSentiment()` call with the following text: `I love Milkshakes.` : `{ magnitude: 0.699999988079071, score: 0.699999988079071 }`* \n\nHere’s the result of the `language.detectSentiment()` call with the following text: `I really hate Whipcream.` : `{ magnitude: 0.5, score: -0.5 }` \n\nHere’s the result for the `language.detectSentiment()` call with the following text: `I love Milkshakes but I really hate Whipcream.` : `{ magnitude: 0, score: 0 }`\nI’m sure there are ways on how you can calculate this more nicely, but for now it’s out of scope for this blog post. (I came to this conclusion after seeing tweets (in single sentences) were people tag 5 different parties, with good and bad opinions about those.) Then there are also tweets, which are very hard for a machine to detect; for example tweets that contain sarcasm: \n\nHere’s the result for the `language.detectSentiment()` call with the following text: `Such a great idea, yeah, and monkeys can fly!` : `{ magnitude: 0.5, score: 0.5 }`\n\nI left these tweets in my score calculation, assuming that people will use sarcasm for every political party, with both a positive and negative meaning. Last but not least, not everyone who votes, shares their thoughts on Twitter, and some people with strong political opinions might tweet more, to use it as a personal outlet. But in real-life, a person can obviously only vote once. It’s interesting anyway and I was curious to see, if my analysis results come close to the final scores of the Dutch elections. At the end, I had a lot of fun by writing the code, and I learned a lot about the Google Cloud Platform. BTW; do you want to receive more insights about the Dutch Elections? Google has a [Google Trends](https://trends.google.nl/trends/story/NL_cu_l5QQ-lkBAADe7M_en) page. \n\n## Handy Links \n\n* [Create a free GCP trial account]([https://cloud.google.com/free-trial/) \n* [Node JS](https://nodejs.org/en/) \n* [Express](http://expressjs.com/) \n* [Twitter Streaming APIs](https://dev.twitter.com/streaming/overview) \n* [Translate API](https://cloud.google.com/translate/) \n* [Translate API pricing](https://cloud.google.com/translate/pricing) \n* [Natural Language API](https://cloud.google.com/natural-language/) \n* [Natural Language Pricing](https://cloud.google.com/natural-language/pricing) \n* [BigQuery](https://cloud.google.com/bigquery/) \n* [BigQuery pricing]([https://cloud.google.com/bigquery/pricing]) \n* [Data Studio]([https://www.google.com/analytics/data-studio/]) \n* [Run Google Data Studio](https://datastudio.google.com) \n* [Cloud Launcher](https://cloud.google.com/launcher/) \n* [Cloud Storage](https://cloud.google.com/storage/) \n* [GCP Pricing calculators](https://cloud.google.com/pricing/calculators) \n* [Comparing tweets about Trump & Hillary with natural language processing.](https://medium.com/google-cloud/comparing-tweets-about-trump-hillary-with-natural-language-processing-a0064e949666)","source":"_posts/analyzing-data-with-bigquery-and-machine-learning-apis.md","raw":"---\ntitle: Analyzing data with BigQuery and Machine Learning APIs\ndescription: Learn about data science and machine learning on Google Cloud Platform.\ntags:\n  - BigQuery\n  - Cloud launcher\n  - Compute Engine\n  - GCP\n  - Natural Language API\n  - Translate API\n  - Virtual Machines\ncategories:\n  - Google Cloud Platform\ndate: 2017-03-18 08:00:31\n---\n\n## Forecast the Dutch elections based on social media presence. \n\nWednesday the 15th of March 2017, was a big day for the Netherlands, at that day it was the Dutch general election, where the Dutch elected members of the house of representatives. The House of Representatives (the Second Chamber) is composed of 150 seats elected by proportional representation in a single nationwide constituency. There are 28 political parties, where the Dutch can vote the members from. Since I recently started working with Google Cloud Platform, I thought it would be a great idea, to predict the winning political party based on social media presence and sentiment. This idea is based on the blog post of Sara Robinson: [Comparing tweets about Trump & Hillary with natural language processing.](https://medium.com/google-cloud/comparing-tweets-about-trump-hillary-with-natural-language-processing-a0064e949666)\n\n<!--more -->\n\n\nThis blog post will contain the following technical pieces: \n\n* **Compute Engine** (1) - To deploy our data scraping script on a VM. \n* **Machine Learning APIs** - To use Natural Language API (4) to understand the context of the data, and since our data is in Dutch (and the Natural Language API doesn’t support the Dutch language yet), we will need the Translate API (2) to translate. \n* **BigQuery** (5) - To collect a lot of data. To analyze this data we use BigQuery and run some queries on it. \n* **DataStudio** - To visualize our result set, we will make use of Google’s Data Studio (6). We can use some nice charts! \n\nTo do the social media data scraping, we use the **Twitter Streaming API**. The application code is written in JavaScript for Node.js. Let’s get started with this tutorial, and see if we can predict which Dutch political party will win the elections!\n\n![Application Architecture with the various Google Cloud solutions](/images/analyze-bq-ml-1-500x300.png)\n\n*NOTE: This blog post won’t contain any political opinions from me, neither from Google. This is a blog post to demonstrate the various solutions of the Google Cloud Platform, on how you can be creative with data. Please see the [disclaimer](#disclaimer), at the end of this article.* \n\n### Prerequisites \n\n* [Node JS](https://nodejs.org/en/) \n* Node [Express](http://expressjs.com/) framework ( `$ npm install express --save `) \n* A GCP Account (or create a [free trial account](https://cloud.google.com/free-trial/)) \n\n## Getting Started \n\nTo get started, open the GCP console, and create a new project. \nGo to: [https://console.cloud.google.com](https://console.cloud.google.com) and click: [Create new project](https://cloud.google.com/resource-manager/docs/creating-managing-projects), and enter an easy to remember project name, which will be used as the project id. You will have to remember this. \nNext, on your local machine, generate an empty Node Express application: `$ express` \n\n*NOTE: Technically, for this demo, you don’t need Express, since Express is a Web framework for Node.js. I choose it though, since I prefer working from this folder structure. My code will be future proof, should I ever plan to port it to a web app.* Once, the generation is done, you can open the **package.json** file, and add the following lines of code dependencies: \n\n```json \n\"dotenv\": \"~4.0.0\", \n\"google-cloud\": \"~0.47.0\", \n\"user-stream\": \"~0.0.8\", \n\"nodemon\": \"~1.11.0\", \n```\n\nAfter, you are done; run the following command in your terminal: `$ npm install` Go back to the [GCP console](https://console.cloud.google.com/) and click the hamburger menu icon, and select: **IAM > Service Accounts > Create Service Account** Service account name: **nodeapp** Role: **Project > Owner** Click: **Create > Close** Click the **button with the 3 dots** next to nodeapp, to open an extra menu. Select: **Create key**. Choose **JSON**. Click **Create**. A key has been saved to your local machine. Rename this -.json file, as: **cloudkey.json**, and copy it into your freshly generated Express app, root folder. Also, create an **.env** file in the root of your Express app folder. It should have the following contents: `GCLOUD_PROJECT= GCLOUD_KEY_FILE=./cloudkey.json`.\n\nLater in this tutorial, you will also need to add the keys for the Twitter Streaming API in here. ## Twitter Streaming API The [Twitter Streaming APIs](https://dev.twitter.com/streaming/overview) give developers low latency access to Twitter’s global stream of Tweet data. A streaming client that pushes tweets, without any of the overhead associated with polling a REST endpoint. Exactly, what we need, to monitor the Twitter newsfeed during election day, so we can see which party is popular on Twitter. We will need to create a [Twitter API account](https://dev.twitter.com/resources/signup). (and if you don’t have Twitter, also a Twitter account). With the Twitter API account, you can create an application, and generate the tokens. These tokens, you will need to copy to the **.env** file in the root of your Node project. It has the following contents: `CONSUMER_KEY= CONSUMER_SECRET= ACCESS_TOKEN_KEY= ACCESS_TOKEN_SECRET=` \n\nCreate a folder called: **lib** Create the following file in the **lib** folder: **twitter.js** The **twitter.js** file will contain the following content:\n\n{% gist bf0afb23c5a6606c8aa3b1afbe49f873 %}\n\nNow you can start testing your twitter stream. In your terminal run the following command from your Express root folder: `$ node bin/www` Now, look in your terminal, you should see the data based on your search terms streaming in. To close the data stream hit **CTRL + c**. \n\n## Machine Learning APIs \n\nNice all that data, but how will we know that people are talking good or bad about a certain political party? Just counting all the tweets, wouldn’t be the correct thing to do, we actually need to understand the context of the data. Hmm, how can we automate this? For this, you can actually use machine learning. Machine learning is not only for data scientists and experts, you and I can make use of it as well. The Google Cloud platform provides a bunch of APIs which are easy to use. Think about machine learning APIs such as: *Speech API* (which can convert speech to text), *Vision API* (which can get insights from pictures), *Translate API* (to translate text to a certain language), *Video Intelligence API* (to retrieve metadata from videos) and *[Natural Language API](https://cloud.google.com/natural-language/)* (to derive insights from unstructured text). Google is planning to release much more machine learning APIs to the cloud platform, and on top of that; if you are a data scientists you could write your own machine learning models. The last mentioned API is what we need to understand pieces of our Twitter data. However...\n\nUnfortunately, the NLP API won’t understand the Dutch language yet. So here’s the test case: Would it work if we translate the text from Dutch to English first? Afterall, the only thing we need to know is if the context of the tweet is positive or negative. Let’s give it a try. We make use of the [Translate API](https://cloud.google.com/translate/) first, afterwards the Natural Language API. Later, we will store in BigQuery the original tweet, but with a ranking total score column. Go to the [cloud console](https://console.cloud.google.com) and click on the **menu** (hamburger) button. Click **API Manager > Dashboard** and click **Enable APIs**. Click **Natural Language API** from the Google Cloud Machine Learning API section. Click **Enable**. Go back to the previous screen, and select **Translation API** and hit **Enable** again. In the **lib** folder, create the following file: **ml.js** which contains these contents: (see the comments in the JavaScript code for further explanation). \n\n{% gist fb2c637e981ae582aeae520d01c4a3d3 %}\n\nIn **twitter.js**, add the following line somewhere in the top of the file: \n\n``` JavaScript \nvar path = require('path'); \nvar machinelearning = require( path.resolve( __dirname, \"ml.js\" ) ); \n```\n\nYou can test the MachineLearning APIs by adding the following example code lines to the end of the file: \n\n``` JavaScript \ngetSentiment('I love Milkshakes', function(results){ \n  console.log(results.sentences); \n}); \ngetTranslation('Ik houd van Milkshakes.', function(results){ \n  console.log(results); \n});\n```\n\nThe sentiment score is a number between -1.0 (negative sentiment) and 1.0 (positive sentiment). The magnitude is a non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative). To change the language, change the `from` input parameter on line 11, to another language, such as `es` for Spanish, or `fr` for French. Feel free to play arround with it, and pass in different text strings, or language API settings. From the terminal run: `$ node bin/www` Now, you will have to add these pieces of code, within the `stream.on()` function, right after the `console.log` line. (let’s say line 42). This will be a callback, in a callback, in a callback... *pffff*. ...and we also need to bind to the original scope! So I solved it this way: \n\n{% gist 89d57616b54474134106db24211f3ae5 %}\n\nOnce done with it, start the node app again. You should see the Twitter lines, streaming in, with translations and sentiment detection. The next step will be to push these data into BigQuery! \n\n## BigQuery \n\nThe next challenge is to store this data in the BigQuery storage in the Google cloud. BigQuery is a fast, economical and fully-managed enterprise data warehouse for large-scale data analytics. BigQuery can query terabytes of data in seconds and petabytes in minutes! The code to save the data in BigQuery is not so difficult. Please have a look:\n\n\n{% gist 11490d86a942f0b0acb83b55009cac95 %}\n\n\nIn **twitter.js** you will need to require the file: \n``` JavaScript \nvar bigquery = require( path.resolve( __dirname, \"bigQuery.js\" ) );\n```\n\nAnd within the most inner callback (on line 127), you can enable the `insertBq()` method: \n\n``` JavaScript\nbigquery.insertInBq(row); \n```\n\nRun the node app for a while. This will load new content into BigQuery. We can now run a bunch of queries to analyze our data. Click **Compose Query**, write: \n\n``` sql\nSELECT SUM(score) as totalscore, party, COUNT(party) as totalparties \nFROM dutchelectionstweets.dutchelections GROUP BY party ORDER BY totalscore DESC \n```\n\nThis query, will sum the *total sentiment score* per party. Also, it counts and it groups the parties. Click **Run**, to run the query. You will see the results in the table below. When the results look ok to you, you can save the view. This will create a new view (which is like a table, but it includes the query). It contains the unique result set. We will need this later for Data Studio. Let’s create a few more views. Such as the 3 most positive parties: \n\n``` sql \nSELECT SUM(score) as totalscore, party FROM dutchelectionstweets.dutchelections \nGROUP BY party ORDER BY totalscore DESC LIMIT 3 \n```\n\nThe total amount of tweets per party: \n\n``` sql \nSELECT party, COUNT(party) as totalparties FROM dutchelectionstweets.dutchelections \nGROUP BY party ORDER BY totalparties DESC\n```\n\nAnd the total amount of tweets: \n\n``` sql \nSELECT COUNT(text) as totaltweets FROM dutchelectionstweets.dutchelections \n```\n\nIn case you want to browse through all the tweets you can use: \n\n``` sql \nSELECT text, party, score FROM dutchelectionstweets.dutchelections \n```\n\n### Data Studio\n\nInstead of displaying the results in *\"boring\"* tables, we could very easily display the result sets in charts. I’ve used [Google Data Studio](https://datastudio.google.com) for this. \n\n![Image](/images/analyze-bq-ml-2-500x250.png)\n\nWhen you drop a chart on the stage, you will need to **Create a new Data Source**. Which you can set to **BigQuery Connector**. From there, you select your project, your dataset, and then your table set or table views. From that moment, you can start using all your data within the Studio. You can easily refresh the data, by clicking on the **Refresh Data** button: \n\n![Refresh data in Data Studio](/images/analyze-bq-ml-3.png) \n\nWith Google Data Studio you can drag and drop charts, images and visualizations on the stage. It turns your data into informative dashboards and reports which are easy to read and share. Google Data Studio is currently in beta. It’s not part of Google Cloud Platform, it’s a Google Analytics solution. You can read more about this tool on: [https://www.google.com/analytics/data-studio/] \n\n## Compute Engine / Cloud Launcher \n\nOk, so we’re done with writing the code to fetch and analyze our data! Although you could keep your terminal open on your local machine for a full day, it’s not ideal. At the end, this process will take some processing power. A better use case would be to move it to a virtual machine.\n\n![Image](/images/analyze-bq-ml-4-500x166.png)\n\nLet’s create a virtual machine. Open the [Cloud console](https://console.cloud.google.com/) in your browser. You could create a virtual machine, manually yourself by clicking the **Compute Engine** menu option. But since we need an image which requires Node.js installed, we will do it the easy way, instead make use of **Cloud Launcher**! \n\n1. Click [https://console.cloud.google.com/launcher/] \n2. Search for **Node.js** \n3. Choose the 2nd Node.js image, (the one from **Bitnami**.) \n4. Click the **Launch on Compute Engine** button. \n5. Specify a name, and a zone (I am in Europe, so I choose **europe-west-1b**) \n6. Choose **micro machine** type. \n7. Hit the **Deploy** button. Notice, how fast it will launch this virtual machine for you! \n\nAfter you deployed the Bitnami Node.js app, you will see the IP address where your VM will be available. There’s an **SSH** dropdown. Hit it, and click **View SSH command**. It will show you the command that you can paste in your local terminal. For example: `gcloud compute --project \"myproject\" ssh --zone \"europe-west1-b\" \"nodejs-1-vm\"` This will log you in on the virtual machine. When you run this command the first time, you will need to create a passphrase. It will automatically create a public key on your machine. Once you’re logged in, you can verify if nodejs was properly installed. Enter: `$ node -v` It should output the nodejs version number. \n\nThe next step is to transfer our project on this virtual machine. You can use Github for this, or you can use Google Cloud Development repositories. (I choose Github, since I want to share my public Github repository, with you. When you have your own project running locally on your machine, you can follow the steps from the **Development** screen instead.) Pull the code, from some repository in the root of your vm: `$ git clone https://github.com/savelee/gcloud-bq-election-demo.git` \nNavigate into the folder: `$ cd gcloud-bq-election-demo/` \nInstall all the nodejs packages: `$ npm install` \n\nWe aren’t done yet! We need to have all our keys available on the virtual machine. That’s the **.env** file and the **cloudkeys.json** file. Obviously, I didn’t put these files in my public Github repo. Hmm, so how can we move these files to the VM? With AppEngine or ContainerEngine, you probably would work with Docker images, so you can easily put these keys in the Docker file. For this demo, we use Compute Engine, so we should make use of [Google Cloud Storage](https://cloud.google.com/storage/) instead. \nWe can create a bucket, and upload our keys into it. Open the Cloud console in your browser. Click on **Storage > Create Bucket**. Give the bucket a name. (For example *-contents>*). Make sure this bucketname is unique, and remember it, because you will use it later. Select **Regional**, and select the same region as the VM you have choosen before. (so *europe-west1* in my case.) Click **Create**. Once the bucket is created, we upload the files from the command-line. In your terminal on your local development machine enter the following two commands: `$ gsutil cp .env gs://` `$ gsutil cp cloudkey.json gs://` Both files are now in the bucket. The next step will be to download it, from the bucket into your virtual machine. Open the terminal which runs on your VM. Enter the following command, to download everything from the bucket, into the root of your vm: `$ gsutil cp gs:///* .` If you want, you can remove your bucket in the console. (Although, it probably wouldn’t cost much, to save 2 small files.) And now you can start the Node.js service: `$ nodemon bin/www` And now you can start the Node.js service. \n\nYou might have noticed, that when you start running nodemon, and you close the VM console, that your script stops as well. What you will need is a Node module, which can run your script “forever”. `$ npm install forever -g` And then start your script like: `$ sudo /opt/bitnami/nodejs/bin/forever start bin/www` (with `sudo forever stopall` you can stop the script again) You should see the Tweets coming by. When you query in BigQuery you will see the results! Awesome, now let’s keep this process running for a while! *TIP: In case you rather want to schedule your script to go on, on a certain time, you could use Cron for this.* *First create a symlink to the correct node folder:* `$ sudo ln -s /opt/bitnami/nodejs /usr/bin/node` *Then start a crontab* `$ crontab -e` *Inside the crontab you code probably would look something like:* `SHELL=/bin/shell` `0 0 15 3 * PATH=$PATH:/opt/bitnami/nodejs cd ~/gcloud-bq-election-demo/ && sudo /opt/bitnami/nodejs/bin/forever start bin/www` *This means, at 0:00:00 time, on the 15th of March, navigate to the gcloud-bq-election-demo directory, and start the nodemon script. You can request the VM time by running `date` in the console.* \n*You can check if it all worked out, by viewing the logs:* `$ tail -f /var/log/syslog`\n\n## Conclusion\n\nBy now, you have learned how to work with various Google Cloud services. We have been looking into: **Compute Engine** and **Cloud Launcher** to spin off a VM in the cloud, **Machine Learning APIs** like the **Natural Language API** and **Translation API** to understand the data, **BigQuery** to analyze the data and **Data Studio** to visualize the data in nice charts. Did I predict the Dutch elections well? Well, in some extend. The top 2 most positively spoken parties on Twitter, got the 2nd and 3rd place in the final results. So that was as expected. The PvdA didn’t do well at all, and the VVD got the first place in the elections, with the most votes. If I do random checks on the collected data, I can see that the sentiment detection has been calculated correctly. There is just no real direct relation between popularity on social media vs. the voting process. But mind you every person can only vote once, but can post unlimited positive or negative tweets. All my code will be in Github [https://github.com/savelee/gcloud-bq-election-demo]. Feel free to use my code, to run a similar case. I will put the instructions on how to setup, in the readme file. In case you are new to Google Cloud platform. You can create [a free trial account](https://cloud.google.com/free-trial/), which includes $300 dollars that can be used to spend on cloud services which expire after 12 months. That should be enough money to try out this demo.\n\n### The costs\n\nTo run this tutorial for one day in a Compute VM created by Cloud Launcher, with the use of machine learning APIs and streaming and querying within BigQuery, costed me about 14 dollars. \n\nThis included the VM running for 5 days (which costed me a dollar). My data wasn’t that big, so I didn’t had any costs for executing BigQuery queries. I was worried about the amount of API calls that I would made, but by running the script for a large part of the election day, I managed to still stay mostly within the free Natural Language API call request tier. So most of my money has been used on the large amount of tweets that has been translated. Let’s drill a little more into the costs of GCP. \n\nBigQuery storage will cost, $0.02 per GB Streaming data in BigQuery: $0.05 per GB (loading data is free). To execute Queries, will cost you $5.00 per TB but the first TB per month is free. [BigQuery Pricing](https://cloud.google.com/bigquery/pricing). Note, that Data Studio makes use of a BigQuery connector, which basically fires queries in BigQuery. \n\nThe price for a micro virtual machine will cost less than 5 dollar a month. But for a computing demo like this, you will probably only run it for a bit, and pay for your use. With Compute Engine, you will pay per minute, with a 10 minute minimum. The prices for translation and language detection is about 20 dollars for a million characters. It will become cheaper, once your amount is over the 1.5 billion characters. See [Translate API pricing](https://cloud.google.com/translate/pricing). \n\nThe Natural Language API has a free tier, if the amount of text records stays under the 5k, for pricing info see: [Natural Language Pricing](https://cloud.google.com/natural-language/pricing). Another great way, for checking and estimating costs, is by making use of the [GCP Pricing calculators](https://cloud.google.com/pricing/calculators). \n\nIn case you are concerned about the prices, you can setup a billing alert. Which can send an email to you once you reach your quota. From the Cloud console, you can enable this, by clicking: **Billing > Budgets & Alerts**. In this screen, you can select the project, and your quota. - You can get emails once you get closer to your quota.\n\n## Disclaimer\n\nThis blog post won’t contain any political opinions from me, neither from Google. This is a blog post to demonstrate the various solutions of the Google Cloud Platform, on how you can be creative with data. I have collected a large part of the day all the Dutch political tweets, posted on Twitter. Though, my results can not be considered as the ultimate truth. I use the Natural Language API in combination with the Translation API, translating first from Dutch to English before doing a sentiment analysis. Whether this always results, in the right score is the question. But based on some random tests, the majority of the tweets seem to have a reasonable score. At the end I only need to figure out if the score is positive or negative.\n\nLet’s look into an example: Here’s the translation of the `translate.translate()` call with the following text: `Partij XYZ is mijn favoriete partij. Met de meeste stellingen ben ik het eens.`. It will be translated to this: `Party XYZ is my favorite party. With most positions, I agree.` \nIf I would have translated it myself, I probably would have said it a little different: \"Party XYZ is my favorite party. I agree with most of the positions they take on issues.\" However, to detect the sentiment, it doesn’t really matter, the score seems to be positive and correct: `{ magnitude: 0.800000011920929, score: 0.800000011920929 }`\n\nThere are certain tweets which I left out the *totalscore* calculation for sentiment analysis. For example, tweets which contain multiple opinions for multiple political parties in one single tweet: *Here’s the result of the `language.detectSentiment()` call with the following text: `I love Milkshakes.` : `{ magnitude: 0.699999988079071, score: 0.699999988079071 }`* \n\nHere’s the result of the `language.detectSentiment()` call with the following text: `I really hate Whipcream.` : `{ magnitude: 0.5, score: -0.5 }` \n\nHere’s the result for the `language.detectSentiment()` call with the following text: `I love Milkshakes but I really hate Whipcream.` : `{ magnitude: 0, score: 0 }`\nI’m sure there are ways on how you can calculate this more nicely, but for now it’s out of scope for this blog post. (I came to this conclusion after seeing tweets (in single sentences) were people tag 5 different parties, with good and bad opinions about those.) Then there are also tweets, which are very hard for a machine to detect; for example tweets that contain sarcasm: \n\nHere’s the result for the `language.detectSentiment()` call with the following text: `Such a great idea, yeah, and monkeys can fly!` : `{ magnitude: 0.5, score: 0.5 }`\n\nI left these tweets in my score calculation, assuming that people will use sarcasm for every political party, with both a positive and negative meaning. Last but not least, not everyone who votes, shares their thoughts on Twitter, and some people with strong political opinions might tweet more, to use it as a personal outlet. But in real-life, a person can obviously only vote once. It’s interesting anyway and I was curious to see, if my analysis results come close to the final scores of the Dutch elections. At the end, I had a lot of fun by writing the code, and I learned a lot about the Google Cloud Platform. BTW; do you want to receive more insights about the Dutch Elections? Google has a [Google Trends](https://trends.google.nl/trends/story/NL_cu_l5QQ-lkBAADe7M_en) page. \n\n## Handy Links \n\n* [Create a free GCP trial account]([https://cloud.google.com/free-trial/) \n* [Node JS](https://nodejs.org/en/) \n* [Express](http://expressjs.com/) \n* [Twitter Streaming APIs](https://dev.twitter.com/streaming/overview) \n* [Translate API](https://cloud.google.com/translate/) \n* [Translate API pricing](https://cloud.google.com/translate/pricing) \n* [Natural Language API](https://cloud.google.com/natural-language/) \n* [Natural Language Pricing](https://cloud.google.com/natural-language/pricing) \n* [BigQuery](https://cloud.google.com/bigquery/) \n* [BigQuery pricing]([https://cloud.google.com/bigquery/pricing]) \n* [Data Studio]([https://www.google.com/analytics/data-studio/]) \n* [Run Google Data Studio](https://datastudio.google.com) \n* [Cloud Launcher](https://cloud.google.com/launcher/) \n* [Cloud Storage](https://cloud.google.com/storage/) \n* [GCP Pricing calculators](https://cloud.google.com/pricing/calculators) \n* [Comparing tweets about Trump & Hillary with natural language processing.](https://medium.com/google-cloud/comparing-tweets-about-trump-hillary-with-natural-language-processing-a0064e949666)","slug":"analyzing-data-with-bigquery-and-machine-learning-apis","published":1,"updated":"2018-11-25T16:00:28.886Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncz000ztkif516xiler9","content":"<h2 id=\"Forecast-the-Dutch-elections-based-on-social-media-presence\"><a href=\"#Forecast-the-Dutch-elections-based-on-social-media-presence\" class=\"headerlink\" title=\"Forecast the Dutch elections based on social media presence.\"></a>Forecast\n  the Dutch elections based on social media presence.</h2>\n<p>Wednesday the 15th of March 2017, was a big day for the Netherlands, at that\n  day it was the Dutch general election, where the Dutch elected members of the\n  house of representatives. The House of Representatives (the Second Chamber)\n  is composed of 150 seats elected by proportional representation in a single\n  nationwide constituency. There are 28 political parties, where the Dutch can\n  vote the members from. Since I recently started working with Google Cloud\n  Platform, I thought it would be a great idea, to predict the winning\n  political party based on social media presence and sentiment. This idea is\n  based on the blog post of Sara Robinson: <a href=\"https://medium.com/google-cloud/comparing-tweets-about-trump-hillary-with-natural-language-processing-a0064e949666\" target=\"_blank\" rel=\"noopener\">Comparing\n    tweets about Trump &amp; Hillary with natural language processing.</a></p>\n<a id=\"more\"></a>\n<p>This blog post will contain the following technical pieces:</p>\n<ul>\n  <li><strong>Compute Engine</strong> (1) - To deploy our data scraping script\n    on a VM.</li>\n  <li><strong>Machine Learning APIs</strong> - To use Natural Language API (4)\n    to understand the context of the data, and since our data is in Dutch (and\n    the Natural Language API doesn’t support the Dutch language yet), we will\n    need the Translate API (2) to translate.</li>\n  <li><strong>BigQuery</strong> (5) - To collect a lot of data. To analyze this\n    data we use BigQuery and run some queries on it.</li>\n  <li><strong>DataStudio</strong> - To visualize our result set, we will make\n    use of Google’s Data Studio (6). We can use some nice charts!</li>\n</ul>\n<p>To do the social media data scraping, we use the <strong>Twitter Streaming\n    API</strong>. The application code is written in JavaScript for Node.js.\n  Let’s get started with this tutorial, and see if we can predict which Dutch\n  political party will win the elections!</p>\n<p><img src=\"/images/analyze-bq-ml-1-500x300.png\" alt=\"Application Architecture with the various Google Cloud solutions\"></p>\n<p><em>NOTE: This blog post won’t contain any political opinions from me,\n    neither from Google. This is a blog post to demonstrate the various\n    solutions of the Google Cloud Platform, on how you can be creative with\n    data. Please see the <a href=\"#disclaimer\">disclaimer</a>, at the end of\n    this article.</em></p>\n<h3 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h3>\n<ul>\n  <li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node JS</a></li>\n  <li>Node <a href=\"http://expressjs.com/\" target=\"_blank\" rel=\"noopener\">Express</a> framework ( <code>$ npm\n      install express --save</code>)</li>\n  <li>A GCP Account (or create a <a href=\"https://cloud.google.com/free-trial/\" target=\"_blank\" rel=\"noopener\">free\n      trial account</a>)</li>\n</ul>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting\n  Started</h2>\n<p>To get started, open the GCP console, and create a new project. Go to: <a href=\"https://console.cloud.google.com\" target=\"_blank\" rel=\"noopener\">https://console.cloud.google.com</a>\n  and click: <a href=\"https://cloud.google.com/resource-manager/docs/creating-managing-projects\" target=\"_blank\" rel=\"noopener\">Create\n    new project</a>, and enter an easy to remember project name, which will be\n  used as the project id. You will have to remember this. Next, on your local\n  machine, generate an empty Node Express application: <code>$ express</code></p>\n<p><em>NOTE: Technically, for this demo, you don’t need Express, since Express\n    is a Web framework for Node.js. I choose it though, since I prefer working\n    from this folder structure. My code will be future proof, should I ever\n    plan to port it to a web app.</em> Once, the generation is done, you can\n  open the <strong>package.json</strong> file, and add the following lines of\n  code dependencies:</p>\n<figure class=\"highlight\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">\"dotenv\": \"~4.0.0\", </span><br><span class=\"line\">\"google-cloud\": \"~0.47.0\", </span><br><span class=\"line\">\"user-stream\": \"~0.0.8\", </span><br><span class=\"line\">\"nodemon\": \"~1.11.0\",</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>After, you are done; run the following command in your terminal: <code>$ npm\n    install</code> Go back to the <a href=\"https://console.cloud.google.com/\" target=\"_blank\" rel=\"noopener\">GCP\n    console</a> and click the hamburger menu icon, and select: <strong>IAM &gt;\n    Service Accounts &gt; Create Service Account</strong> Service account name:\n  <strong>nodeapp</strong> Role: <strong>Project &gt; Owner</strong> Click:\n  <strong>Create &gt; Close</strong> Click the <strong>button with the 3 dots</strong>\n  next to nodeapp, to open an extra menu. Select: <strong>Create key</strong>.\n  Choose <strong>JSON</strong>. Click <strong>Create</strong>. A key has been\n  saved to your local machine. Rename this -.json file, as: <strong>cloudkey.json</strong>,\n  and copy it into your freshly generated Express app, root folder. Also,\n  create an <strong>.env</strong> file in the root of your Express app folder.\n  It should have the following contents: <code>GCLOUD_PROJECT=\n    GCLOUD_KEY_FILE=./cloudkey.json</code>.</p>\n<p>Later in this tutorial, you will also need to add the keys for the Twitter\n  Streaming API in here. ## Twitter Streaming API The <a href=\"https://dev.twitter.com/streaming/overview\" target=\"_blank\" rel=\"noopener\">Twitter\n    Streaming APIs</a> give developers low latency access to Twitter’s global\n  stream of Tweet data. A streaming client that pushes tweets, without any of\n  the overhead associated with polling a REST endpoint. Exactly, what we need,\n  to monitor the Twitter newsfeed during election day, so we can see which\n  party is popular on Twitter. We will need to create a <a href=\"https://dev.twitter.com/resources/signup\" target=\"_blank\" rel=\"noopener\">Twitter\n    API account</a>. (and if you don’t have Twitter, also a Twitter account).\n  With the Twitter API account, you can create an application, and generate the\n  tokens. These tokens, you will need to copy to the <strong>.env</strong> file\n  in the root of your Node project. It has the following contents: <code>CONSUMER_KEY=\n    CONSUMER_SECRET= ACCESS_TOKEN_KEY= ACCESS_TOKEN_SECRET=</code></p>\n<p>Create a folder called: <strong>lib</strong> Create the following file in\n  the <strong>lib</strong> folder: <strong>twitter.js</strong> The <strong>twitter.js</strong>\n  file will contain the following content:</p>\n<script src=\"//gist.github.com/bf0afb23c5a6606c8aa3b1afbe49f873.js\"></script>\n<p>Now you can start testing your twitter stream. In your terminal run the\n  following command from your Express root folder: <code>$ node bin/www</code>\n  Now, look in your terminal, you should see the data based on your search\n  terms streaming in. To close the data stream hit <strong>CTRL + c</strong>.</p>\n<h2 id=\"Machine-Learning-APIs\"><a href=\"#Machine-Learning-APIs\" class=\"headerlink\" title=\"Machine Learning APIs\"></a>Machine\n  Learning APIs</h2>\n<p>Nice all that data, but how will we know that people are talking good or bad\n  about a certain political party? Just counting all the tweets, wouldn’t be\n  the correct thing to do, we actually need to understand the context of the\n  data. Hmm, how can we automate this? For this, you can actually use machine\n  learning. Machine learning is not only for data scientists and experts, you\n  and I can make use of it as well. The Google Cloud platform provides a bunch\n  of APIs which are easy to use. Think about machine learning APIs such as: <em>Speech\n    API</em> (which can convert speech to text), <em>Vision API</em> (which can\n  get insights from pictures), <em>Translate API</em> (to translate text to a\n  certain language), <em>Video Intelligence API</em> (to retrieve metadata from\n  videos) and <em><a href=\"https://cloud.google.com/natural-language/\" target=\"_blank\" rel=\"noopener\">Natural\n      Language API</a></em> (to derive insights from unstructured text). Google\n  is planning to release much more machine learning APIs to the cloud platform,\n  and on top of that; if you are a data scientists you could write your own\n  machine learning models. The last mentioned API is what we need to understand\n  pieces of our Twitter data. However…</p>\n<p>Unfortunately, the NLP API won’t understand the Dutch language yet. So\n  here’s the test case: Would it work if we translate the text from Dutch to\n  English first? Afterall, the only thing we need to know is if the context of\n  the tweet is positive or negative. Let’s give it a try. We make use of the <a href=\"https://cloud.google.com/translate/\" target=\"_blank\" rel=\"noopener\">Translate\n    API</a> first, afterwards the Natural Language API. Later, we will store in\n  BigQuery the original tweet, but with a ranking total score column. Go to the\n  <a href=\"https://console.cloud.google.com\" target=\"_blank\" rel=\"noopener\">cloud console</a> and click on the\n  <strong>menu</strong> (hamburger) button. Click <strong>API Manager &gt;\n    Dashboard</strong> and click <strong>Enable APIs</strong>. Click <strong>Natural\n    Language API</strong> from the Google Cloud Machine Learning API section.\n  Click <strong>Enable</strong>. Go back to the previous screen, and select\n  <strong>Translation API</strong> and hit <strong>Enable</strong> again. In\n  the <strong>lib</strong> folder, create the following file: <strong>ml.js</strong>\n  which contains these contents: (see the comments in the JavaScript code for\n  further explanation).</p>\n<script src=\"//gist.github.com/fb2c637e981ae582aeae520d01c4a3d3.js\"></script>\n<p>In <strong>twitter.js</strong>, add the following line somewhere in the top\n  of the file:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); </span><br><span class=\"line\"><span class=\"keyword\">var</span> machinelearning = <span class=\"built_in\">require</span>( path.resolve( __dirname, <span class=\"string\">\"ml.js\"</span> ) );</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>You can test the MachineLearning APIs by adding the following example code\n  lines to the end of the file:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">getSentiment(<span class=\"string\">'I love Milkshakes'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>)</span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(results.sentences); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">getTranslation(<span class=\"string\">'Ik houd van Milkshakes.'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>)</span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(results); </span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The sentiment score is a number between -1.0 (negative sentiment) and 1.0\n  (positive sentiment). The magnitude is a non-negative number in the [0, +inf)\n  range, which represents the absolute magnitude of sentiment regardless of\n  score (positive or negative). To change the language, change the <code>from</code>\n  input parameter on line 11, to another language, such as <code>es</code> for\n  Spanish, or <code>fr</code> for French. Feel free to play arround with it,\n  and pass in different text strings, or language API settings. From the\n  terminal run: <code>$ node bin/www</code> Now, you will have to add these\n  pieces of code, within the <code>stream.on()</code> function, right after the\n  <code>console.log</code> line. (let’s say line 42). This will be a callback,\n  in a callback, in a callback… <em>pffff</em>. …and we also need to bind to\n  the original scope! So I solved it this way:</p>\n<script src=\"//gist.github.com/89d57616b54474134106db24211f3ae5.js\"></script>\n<p>Once done with it, start the node app again. You should see the Twitter\n  lines, streaming in, with translations and sentiment detection. The next step\n  will be to push these data into BigQuery!</p>\n<h2 id=\"BigQuery\"><a href=\"#BigQuery\" class=\"headerlink\" title=\"BigQuery\"></a>BigQuery</h2>\n<p>The next challenge is to store this data in the BigQuery storage in the\n  Google cloud. BigQuery is a fast, economical and fully-managed enterprise\n  data warehouse for large-scale data analytics. BigQuery can query terabytes\n  of data in seconds and petabytes in minutes! The code to save the data in\n  BigQuery is not so difficult. Please have a look:</p>\n<script src=\"//gist.github.com/11490d86a942f0b0acb83b55009cac95.js\"></script>\n<p>In <strong>twitter.js</strong> you will need to require the file:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">var</span> bigquery = <span class=\"built_in\">require</span>( path.resolve( __dirname, <span class=\"string\">\"bigQuery.js\"</span> ) );</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p></p>\n<p>And within the most inner callback (on line 127), you can enable the <code>insertBq()</code>\n  method:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">bigquery.insertInBq(row);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Run the node app for a while. This will load new content into BigQuery. We\n  can now run a bunch of queries to analyze our data. Click <strong>Compose\n    Query</strong>, write:</p>\n<figure class=\"highlight sql\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">SUM</span>(score) <span class=\"keyword\">as</span> totalscore, party, <span class=\"keyword\">COUNT</span>(party) <span class=\"keyword\">as</span> totalparties </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> dutchelectionstweets.dutchelections <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> party <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> totalscore <span class=\"keyword\">DESC</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>This query, will sum the <em>total sentiment score</em> per party. Also, it\n  counts and it groups the parties. Click <strong>Run</strong>, to run the\n  query. You will see the results in the table below. When the results look ok\n  to you, you can save the view. This will create a new view (which is like a\n  table, but it includes the query). It contains the unique result set. We will\n  need this later for Data Studio. Let’s create a few more views. Such as the 3\n  most positive parties:</p>\n<figure class=\"highlight sql\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">SUM</span>(score) <span class=\"keyword\">as</span> totalscore, party <span class=\"keyword\">FROM</span> dutchelectionstweets.dutchelections </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> party <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> totalscore <span class=\"keyword\">DESC</span> <span class=\"keyword\">LIMIT</span> <span class=\"number\">3</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The total amount of tweets per party:</p>\n<figure class=\"highlight sql\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">SELECT</span> party, <span class=\"keyword\">COUNT</span>(party) <span class=\"keyword\">as</span> totalparties <span class=\"keyword\">FROM</span> dutchelectionstweets.dutchelections </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> party <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> totalparties <span class=\"keyword\">DESC</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>And the total amount of tweets:</p>\n<figure class=\"highlight sql\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(<span class=\"built_in\">text</span>) <span class=\"keyword\">as</span> totaltweets <span class=\"keyword\">FROM</span> dutchelectionstweets.dutchelections</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>In case you want to browse through all the tweets you can use:</p>\n<figure class=\"highlight sql\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">text</span>, party, score <span class=\"keyword\">FROM</span> dutchelectionstweets.dutchelections</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<h3 id=\"Data-Studio\"><a href=\"#Data-Studio\" class=\"headerlink\" title=\"Data Studio\"></a>Data\n  Studio</h3>\n<p>Instead of displaying the results in <em>“boring”</em> tables, we could very\n  easily display the result sets in charts. I’ve used <a href=\"https://datastudio.google.com\" target=\"_blank\" rel=\"noopener\">Google\n    Data Studio</a> for this.</p>\n<p><img src=\"/images/analyze-bq-ml-2-500x250.png\" alt=\"Image\"></p>\n<p>When you drop a chart on the stage, you will need to <strong>Create a new\n    Data Source</strong>. Which you can set to <strong>BigQuery Connector</strong>.\n  From there, you select your project, your dataset, and then your table set or\n  table views. From that moment, you can start using all your data within the\n  Studio. You can easily refresh the data, by clicking on the <strong>Refresh\n    Data</strong> button:</p>\n<p><img src=\"/images/analyze-bq-ml-3.png\" alt=\"Refresh data in Data Studio\"></p>\n<p>With Google Data Studio you can drag and drop charts, images and\n  visualizations on the stage. It turns your data into informative dashboards\n  and reports which are easy to read and share. Google Data Studio is currently\n  in beta. It’s not part of Google Cloud Platform, it’s a Google Analytics\n  solution. You can read more about this tool on: [<a href=\"https://www.google.com/analytics/data-studio/]\" target=\"_blank\" rel=\"noopener\">https://www.google.com/analytics/data-studio/]</a></p>\n<h2 id=\"Compute-Engine-Cloud-Launcher\"><a href=\"#Compute-Engine-Cloud-Launcher\" class=\"headerlink\" title=\"Compute Engine / Cloud Launcher\"></a>Compute\n  Engine / Cloud Launcher</h2>\n<p>Ok, so we’re done with writing the code to fetch and analyze our data!\n  Although you could keep your terminal open on your local machine for a full\n  day, it’s not ideal. At the end, this process will take some processing\n  power. A better use case would be to move it to a virtual machine.</p>\n<p><img src=\"/images/analyze-bq-ml-4-500x166.png\" alt=\"Image\"></p>\n<p>Let’s create a virtual machine. Open the <a href=\"https://console.cloud.google.com/\" target=\"_blank\" rel=\"noopener\">Cloud\n    console</a> in your browser. You could create a virtual machine, manually\n  yourself by clicking the <strong>Compute Engine</strong> menu option. But\n  since we need an image which requires Node.js installed, we will do it the\n  easy way, instead make use of <strong>Cloud Launcher</strong>!</p>\n<ol>\n  <li>Click [<a href=\"https://console.cloud.google.com/launcher/]\" target=\"_blank\" rel=\"noopener\">https://console.cloud.google.com/launcher/]</a></li>\n  <li>Search for <strong>Node.js</strong></li>\n  <li>Choose the 2nd Node.js image, (the one from <strong>Bitnami</strong>.)</li>\n  <li>Click the <strong>Launch on Compute Engine</strong> button.</li>\n  <li>Specify a name, and a zone (I am in Europe, so I choose <strong>europe-west-1b</strong>)</li>\n  <li>Choose <strong>micro machine</strong> type.</li>\n  <li>Hit the <strong>Deploy</strong> button. Notice, how fast it will launch\n    this virtual machine for you!</li>\n</ol>\n<p>After you deployed the Bitnami Node.js app, you will see the IP address\n  where your VM will be available. There’s an <strong>SSH</strong> dropdown.\n  Hit it, and click <strong>View SSH command</strong>. It will show you the\n  command that you can paste in your local terminal. For example: <code>gcloud\n    compute --project &quot;myproject&quot; ssh --zone\n    &quot;europe-west1-b&quot; &quot;nodejs-1-vm&quot;</code> This will log you\n  in on the virtual machine. When you run this command the first time, you will\n  need to create a passphrase. It will automatically create a public key on\n  your machine. Once you’re logged in, you can verify if nodejs was properly\n  installed. Enter: <code>$ node -v</code> It should output the nodejs version\n  number.</p>\n<p>The next step is to transfer our project on this virtual machine. You can\n  use Github for this, or you can use Google Cloud Development repositories. (I\n  choose Github, since I want to share my public Github repository, with you.\n  When you have your own project running locally on your machine, you can\n  follow the steps from the <strong>Development</strong> screen instead.) Pull\n  the code, from some repository in the root of your vm: <code>$ git clone\n    https://github.com/savelee/gcloud-bq-election-demo.git</code> Navigate into\n  the folder: <code>$ cd gcloud-bq-election-demo/</code> Install all the nodejs\n  packages: <code>$ npm install</code></p>\n<p>We aren’t done yet! We need to have all our keys available on the virtual\n  machine. That’s the <strong>.env</strong> file and the <strong>cloudkeys.json</strong>\n  file. Obviously, I didn’t put these files in my public Github repo. Hmm, so\n  how can we move these files to the VM? With AppEngine or ContainerEngine, you\n  probably would work with Docker images, so you can easily put these keys in\n  the Docker file. For this demo, we use Compute Engine, so we should make use\n  of <a href=\"https://cloud.google.com/storage/\" target=\"_blank\" rel=\"noopener\">Google Cloud Storage</a>\n  instead. We can create a bucket, and upload our keys into it. Open the Cloud\n  console in your browser. Click on <strong>Storage &gt; Create Bucket</strong>.\n  Give the bucket a name. (For example <em>-contents&gt;</em>). Make sure this\n  bucketname is unique, and remember it, because you will use it later. Select\n  <strong>Regional</strong>, and select the same region as the VM you have\n  choosen before. (so <em>europe-west1</em> in my case.) Click <strong>Create</strong>.\n  Once the bucket is created, we upload the files from the command-line. In\n  your terminal on your local development machine enter the following two\n  commands: <code>$ gsutil cp .env gs://</code> <code>$ gsutil cp cloudkey.json\n    gs://</code> Both files are now in the bucket. The next step will be to\n  download it, from the bucket into your virtual machine. Open the terminal\n  which runs on your VM. Enter the following command, to download everything\n  from the bucket, into the root of your vm: <code>$ gsutil cp gs:///* .</code>\n  If you want, you can remove your bucket in the console. (Although, it\n  probably wouldn’t cost much, to save 2 small files.) And now you can start\n  the Node.js service: <code>$ nodemon bin/www</code> And now you can start the\n  Node.js service.</p>\n<p>You might have noticed, that when you start running nodemon, and you close\n  the VM console, that your script stops as well. What you will need is a Node\n  module, which can run your script “forever”. <code>$ npm install forever -g</code>\n  And then start your script like: <code>$ sudo /opt/bitnami/nodejs/bin/forever\n    start bin/www</code> (with <code>sudo forever stopall</code> you can stop\n  the script again) You should see the Tweets coming by. When you query in\n  BigQuery you will see the results! Awesome, now let’s keep this process\n  running for a while! <em>TIP: In case you rather want to schedule your script\n    to go on, on a certain time, you could use Cron for this.</em> <em>First\n    create a symlink to the correct node folder:</em> <code>$ sudo ln -s\n    /opt/bitnami/nodejs /usr/bin/node</code> <em>Then start a crontab</em>\n  <code>$ crontab -e</code> <em>Inside the crontab you code probably would look\n    something like:</em> <code>SHELL=/bin/shell</code> <code>0 0 15 3 *\n    PATH=$PATH:/opt/bitnami/nodejs cd ~/gcloud-bq-election-demo/ &amp;&amp;\n    sudo /opt/bitnami/nodejs/bin/forever start bin/www</code> <em>This means,\n    at 0:00:00 time, on the 15th of March, navigate to the\n    gcloud-bq-election-demo directory, and start the nodemon script. You can\n    request the VM time by running <code>date</code> in the console.</em> <em>You\n    can check if it all worked out, by viewing the logs:</em> <code>$ tail -f\n    /var/log/syslog</code></p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2>\n<p>By now, you have learned how to work with various Google Cloud services. We\n  have been looking into: <strong>Compute Engine</strong> and <strong>Cloud\n    Launcher</strong> to spin off a VM in the cloud, <strong>Machine Learning\n    APIs</strong> like the <strong>Natural Language API</strong> and <strong>Translation\n    API</strong> to understand the data, <strong>BigQuery</strong> to analyze\n  the data and <strong>Data Studio</strong> to visualize the data in nice\n  charts. Did I predict the Dutch elections well? Well, in some extend. The top\n  2 most positively spoken parties on Twitter, got the 2nd and 3rd place in the\n  final results. So that was as expected. The PvdA didn’t do well at all, and\n  the VVD got the first place in the elections, with the most votes. If I do\n  random checks on the collected data, I can see that the sentiment detection\n  has been calculated correctly. There is just no real direct relation between\n  popularity on social media vs. the voting process. But mind you every person\n  can only vote once, but can post unlimited positive or negative tweets. All\n  my code will be in Github [<a href=\"https://github.com/savelee/gcloud-bq-election-demo]\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/gcloud-bq-election-demo]</a>.\n  Feel free to use my code, to run a similar case. I will put the instructions\n  on how to setup, in the readme file. In case you are new to Google Cloud\n  platform. You can create <a href=\"https://cloud.google.com/free-trial/\" target=\"_blank\" rel=\"noopener\">a\n    free trial account</a>, which includes $300 dollars that can be used to\n  spend on cloud services which expire after 12 months. That should be enough\n  money to try out this demo.</p>\n<h3 id=\"The-costs\"><a href=\"#The-costs\" class=\"headerlink\" title=\"The costs\"></a>The\n  costs</h3>\n<p>To run this tutorial for one day in a Compute VM created by Cloud Launcher,\n  with the use of machine learning APIs and streaming and querying within\n  BigQuery, costed me about 14 dollars.</p>\n<p>This included the VM running for 5 days (which costed me a dollar). My data\n  wasn’t that big, so I didn’t had any costs for executing BigQuery queries. I\n  was worried about the amount of API calls that I would made, but by running\n  the script for a large part of the election day, I managed to still stay\n  mostly within the free Natural Language API call request tier. So most of my\n  money has been used on the large amount of tweets that has been translated.\n  Let’s drill a little more into the costs of GCP.</p>\n<p>BigQuery storage will cost, $0.02 per GB Streaming data in BigQuery: $0.05\n  per GB (loading data is free). To execute Queries, will cost you $5.00 per TB\n  but the first TB per month is free. <a href=\"https://cloud.google.com/bigquery/pricing\" target=\"_blank\" rel=\"noopener\">BigQuery\n    Pricing</a>. Note, that Data Studio makes use of a BigQuery connector,\n  which basically fires queries in BigQuery.</p>\n<p>The price for a micro virtual machine will cost less than 5 dollar a month.\n  But for a computing demo like this, you will probably only run it for a bit,\n  and pay for your use. With Compute Engine, you will pay per minute, with a 10\n  minute minimum. The prices for translation and language detection is about 20\n  dollars for a million characters. It will become cheaper, once your amount is\n  over the 1.5 billion characters. See <a href=\"https://cloud.google.com/translate/pricing\" target=\"_blank\" rel=\"noopener\">Translate\n    API pricing</a>.</p>\n<p>The Natural Language API has a free tier, if the amount of text records\n  stays under the 5k, for pricing info see: <a href=\"https://cloud.google.com/natural-language/pricing\" target=\"_blank\" rel=\"noopener\">Natural\n    Language Pricing</a>. Another great way, for checking and estimating costs,\n  is by making use of the <a href=\"https://cloud.google.com/pricing/calculators\" target=\"_blank\" rel=\"noopener\">GCP\n    Pricing calculators</a>.</p>\n<p>In case you are concerned about the prices, you can setup a billing alert.\n  Which can send an email to you once you reach your quota. From the Cloud\n  console, you can enable this, by clicking: <strong>Billing &gt; Budgets &amp;\n    Alerts</strong>. In this screen, you can select the project, and your\n  quota. - You can get emails once you get closer to your quota.</p>\n<h2 id=\"Disclaimer\"><a href=\"#Disclaimer\" class=\"headerlink\" title=\"Disclaimer\"></a>Disclaimer</h2>\n<p>This blog post won’t contain any political opinions from me, neither from\n  Google. This is a blog post to demonstrate the various solutions of the\n  Google Cloud Platform, on how you can be creative with data. I have collected\n  a large part of the day all the Dutch political tweets, posted on Twitter.\n  Though, my results can not be considered as the ultimate truth. I use the\n  Natural Language API in combination with the Translation API, translating\n  first from Dutch to English before doing a sentiment analysis. Whether this\n  always results, in the right score is the question. But based on some random\n  tests, the majority of the tweets seem to have a reasonable score. At the end\n  I only need to figure out if the score is positive or negative.</p>\n<p>Let’s look into an example: Here’s the translation of the <code>translate.translate()</code>\n  call with the following text: <code>Partij XYZ is mijn favoriete partij. Met\n    de meeste stellingen ben ik het eens.</code>. It will be translated to\n  this: <code>Party XYZ is my favorite party. With most positions, I agree.</code>\n  If I would have translated it myself, I probably would have said it a little\n  different: “Party XYZ is my favorite party. I agree with most of the\n  positions they take on issues.” However, to detect the sentiment, it doesn’t\n  really matter, the score seems to be positive and correct: <code>{ magnitude:\n    0.800000011920929, score: 0.800000011920929 }</code></p>\n<p>There are certain tweets which I left out the <em>totalscore</em>\n  calculation for sentiment analysis. For example, tweets which contain\n  multiple opinions for multiple political parties in one single tweet: <em>Here’s\n    the result of the <code>language.detectSentiment()</code> call with the\n    following text: <code>I love Milkshakes.</code> : <code>{ magnitude:\n      0.699999988079071, score: 0.699999988079071 }</code></em></p>\n<p>Here’s the result of the <code>language.detectSentiment()</code> call with\n  the following text: <code>I really hate Whipcream.</code> : <code>{\n    magnitude: 0.5, score: -0.5 }</code></p>\n<p>Here’s the result for the <code>language.detectSentiment()</code> call with\n  the following text: <code>I love Milkshakes but I really hate Whipcream.</code>\n  : <code>{ magnitude: 0, score: 0 }</code> I’m sure there are ways on how you\n  can calculate this more nicely, but for now it’s out of scope for this blog\n  post. (I came to this conclusion after seeing tweets (in single sentences)\n  were people tag 5 different parties, with good and bad opinions about those.)\n  Then there are also tweets, which are very hard for a machine to detect; for\n  example tweets that contain sarcasm:</p>\n<p>Here’s the result for the <code>language.detectSentiment()</code> call with\n  the following text: <code>Such a great idea, yeah, and monkeys can fly!</code>\n  : <code>{ magnitude: 0.5, score: 0.5 }</code></p>\n<p>I left these tweets in my score calculation, assuming that people will use\n  sarcasm for every political party, with both a positive and negative meaning.\n  Last but not least, not everyone who votes, shares their thoughts on Twitter,\n  and some people with strong political opinions might tweet more, to use it as\n  a personal outlet. But in real-life, a person can obviously only vote once.\n  It’s interesting anyway and I was curious to see, if my analysis results come\n  close to the final scores of the Dutch elections. At the end, I had a lot of\n  fun by writing the code, and I learned a lot about the Google Cloud Platform.\n  BTW; do you want to receive more insights about the Dutch Elections? Google\n  has a <a href=\"https://trends.google.nl/trends/story/NL_cu_l5QQ-lkBAADe7M_en\" target=\"_blank\" rel=\"noopener\">Google\n    Trends</a> page.</p>\n<h2 id=\"Handy-Links\"><a href=\"#Handy-Links\" class=\"headerlink\" title=\"Handy Links\"></a>Handy\n  Links</h2>\n<ul>\n  <li><a href=\"[https://cloud.google.com/free-trial/\">Create a free GCP trial\n      account</a></li>\n  <li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node JS</a></li>\n  <li><a href=\"http://expressjs.com/\" target=\"_blank\" rel=\"noopener\">Express</a></li>\n  <li><a href=\"https://dev.twitter.com/streaming/overview\" target=\"_blank\" rel=\"noopener\">Twitter Streaming\n      APIs</a></li>\n  <li><a href=\"https://cloud.google.com/translate/\" target=\"_blank\" rel=\"noopener\">Translate API</a></li>\n  <li><a href=\"https://cloud.google.com/translate/pricing\" target=\"_blank\" rel=\"noopener\">Translate API\n      pricing</a></li>\n  <li><a href=\"https://cloud.google.com/natural-language/\" target=\"_blank\" rel=\"noopener\">Natural Language API</a></li>\n  <li><a href=\"https://cloud.google.com/natural-language/pricing\" target=\"_blank\" rel=\"noopener\">Natural\n      Language Pricing</a></li>\n  <li><a href=\"https://cloud.google.com/bigquery/\" target=\"_blank\" rel=\"noopener\">BigQuery</a></li>\n  <li><a href=\"[https://cloud.google.com/bigquery/pricing]\">BigQuery pricing</a></li>\n  <li><a href=\"[https://www.google.com/analytics/data-studio/]\">Data Studio</a></li>\n  <li><a href=\"https://datastudio.google.com\" target=\"_blank\" rel=\"noopener\">Run Google Data Studio</a></li>\n  <li><a href=\"https://cloud.google.com/launcher/\" target=\"_blank\" rel=\"noopener\">Cloud Launcher</a></li>\n  <li><a href=\"https://cloud.google.com/storage/\" target=\"_blank\" rel=\"noopener\">Cloud Storage</a></li>\n  <li><a href=\"https://cloud.google.com/pricing/calculators\" target=\"_blank\" rel=\"noopener\">GCP Pricing\n      calculators</a></li>\n  <li><a href=\"https://medium.com/google-cloud/comparing-tweets-about-trump-hillary-with-natural-language-processing-a0064e949666\" target=\"_blank\" rel=\"noopener\">Comparing\n      tweets about Trump &amp; Hillary with natural language processing.</a></li>\n</ul>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"<h2 id=\"Forecast-the-Dutch-elections-based-on-social-media-presence\"><a href=\"#Forecast-the-Dutch-elections-based-on-social-media-presence\" class=\"headerlink\" title=\"Forecast the Dutch elections based on social media presence.\"></a>Forecast\n  the Dutch elections based on social media presence.</h2>\n<p>Wednesday the 15th of March 2017, was a big day for the Netherlands, at that\n  day it was the Dutch general election, where the Dutch elected members of the\n  house of representatives. The House of Representatives (the Second Chamber)\n  is composed of 150 seats elected by proportional representation in a single\n  nationwide constituency. There are 28 political parties, where the Dutch can\n  vote the members from. Since I recently started working with Google Cloud\n  Platform, I thought it would be a great idea, to predict the winning\n  political party based on social media presence and sentiment. This idea is\n  based on the blog post of Sara Robinson: <a href=\"https://medium.com/google-cloud/comparing-tweets-about-trump-hillary-with-natural-language-processing-a0064e949666\" target=\"_blank\" rel=\"noopener\">Comparing\n    tweets about Trump &amp; Hillary with natural language processing.</a></p>","more":"<p>This blog post will contain the following technical pieces:</p>\n<ul>\n  <li><strong>Compute Engine</strong> (1) - To deploy our data scraping script\n    on a VM.</li>\n  <li><strong>Machine Learning APIs</strong> - To use Natural Language API (4)\n    to understand the context of the data, and since our data is in Dutch (and\n    the Natural Language API doesn’t support the Dutch language yet), we will\n    need the Translate API (2) to translate.</li>\n  <li><strong>BigQuery</strong> (5) - To collect a lot of data. To analyze this\n    data we use BigQuery and run some queries on it.</li>\n  <li><strong>DataStudio</strong> - To visualize our result set, we will make\n    use of Google’s Data Studio (6). We can use some nice charts!</li>\n</ul>\n<p>To do the social media data scraping, we use the <strong>Twitter Streaming\n    API</strong>. The application code is written in JavaScript for Node.js.\n  Let’s get started with this tutorial, and see if we can predict which Dutch\n  political party will win the elections!</p>\n<p><img src=\"/images/analyze-bq-ml-1-500x300.png\" alt=\"Application Architecture with the various Google Cloud solutions\"></p>\n<p><em>NOTE: This blog post won’t contain any political opinions from me,\n    neither from Google. This is a blog post to demonstrate the various\n    solutions of the Google Cloud Platform, on how you can be creative with\n    data. Please see the <a href=\"#disclaimer\">disclaimer</a>, at the end of\n    this article.</em></p>\n<h3 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h3>\n<ul>\n  <li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node JS</a></li>\n  <li>Node <a href=\"http://expressjs.com/\" target=\"_blank\" rel=\"noopener\">Express</a> framework ( <code>$ npm\n      install express --save</code>)</li>\n  <li>A GCP Account (or create a <a href=\"https://cloud.google.com/free-trial/\" target=\"_blank\" rel=\"noopener\">free\n      trial account</a>)</li>\n</ul>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting\n  Started</h2>\n<p>To get started, open the GCP console, and create a new project. Go to: <a href=\"https://console.cloud.google.com\" target=\"_blank\" rel=\"noopener\">https://console.cloud.google.com</a>\n  and click: <a href=\"https://cloud.google.com/resource-manager/docs/creating-managing-projects\" target=\"_blank\" rel=\"noopener\">Create\n    new project</a>, and enter an easy to remember project name, which will be\n  used as the project id. You will have to remember this. Next, on your local\n  machine, generate an empty Node Express application: <code>$ express</code></p>\n<p><em>NOTE: Technically, for this demo, you don’t need Express, since Express\n    is a Web framework for Node.js. I choose it though, since I prefer working\n    from this folder structure. My code will be future proof, should I ever\n    plan to port it to a web app.</em> Once, the generation is done, you can\n  open the <strong>package.json</strong> file, and add the following lines of\n  code dependencies:</p>\n<figure class=\"highlight\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">\"dotenv\": \"~4.0.0\", </span><br><span class=\"line\">\"google-cloud\": \"~0.47.0\", </span><br><span class=\"line\">\"user-stream\": \"~0.0.8\", </span><br><span class=\"line\">\"nodemon\": \"~1.11.0\",</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>After, you are done; run the following command in your terminal: <code>$ npm\n    install</code> Go back to the <a href=\"https://console.cloud.google.com/\" target=\"_blank\" rel=\"noopener\">GCP\n    console</a> and click the hamburger menu icon, and select: <strong>IAM &gt;\n    Service Accounts &gt; Create Service Account</strong> Service account name:\n  <strong>nodeapp</strong> Role: <strong>Project &gt; Owner</strong> Click:\n  <strong>Create &gt; Close</strong> Click the <strong>button with the 3 dots</strong>\n  next to nodeapp, to open an extra menu. Select: <strong>Create key</strong>.\n  Choose <strong>JSON</strong>. Click <strong>Create</strong>. A key has been\n  saved to your local machine. Rename this -.json file, as: <strong>cloudkey.json</strong>,\n  and copy it into your freshly generated Express app, root folder. Also,\n  create an <strong>.env</strong> file in the root of your Express app folder.\n  It should have the following contents: <code>GCLOUD_PROJECT=\n    GCLOUD_KEY_FILE=./cloudkey.json</code>.</p>\n<p>Later in this tutorial, you will also need to add the keys for the Twitter\n  Streaming API in here. ## Twitter Streaming API The <a href=\"https://dev.twitter.com/streaming/overview\" target=\"_blank\" rel=\"noopener\">Twitter\n    Streaming APIs</a> give developers low latency access to Twitter’s global\n  stream of Tweet data. A streaming client that pushes tweets, without any of\n  the overhead associated with polling a REST endpoint. Exactly, what we need,\n  to monitor the Twitter newsfeed during election day, so we can see which\n  party is popular on Twitter. We will need to create a <a href=\"https://dev.twitter.com/resources/signup\" target=\"_blank\" rel=\"noopener\">Twitter\n    API account</a>. (and if you don’t have Twitter, also a Twitter account).\n  With the Twitter API account, you can create an application, and generate the\n  tokens. These tokens, you will need to copy to the <strong>.env</strong> file\n  in the root of your Node project. It has the following contents: <code>CONSUMER_KEY=\n    CONSUMER_SECRET= ACCESS_TOKEN_KEY= ACCESS_TOKEN_SECRET=</code></p>\n<p>Create a folder called: <strong>lib</strong> Create the following file in\n  the <strong>lib</strong> folder: <strong>twitter.js</strong> The <strong>twitter.js</strong>\n  file will contain the following content:</p>\n<script src=\"//gist.github.com/bf0afb23c5a6606c8aa3b1afbe49f873.js\"></script>\n<p>Now you can start testing your twitter stream. In your terminal run the\n  following command from your Express root folder: <code>$ node bin/www</code>\n  Now, look in your terminal, you should see the data based on your search\n  terms streaming in. To close the data stream hit <strong>CTRL + c</strong>.</p>\n<h2 id=\"Machine-Learning-APIs\"><a href=\"#Machine-Learning-APIs\" class=\"headerlink\" title=\"Machine Learning APIs\"></a>Machine\n  Learning APIs</h2>\n<p>Nice all that data, but how will we know that people are talking good or bad\n  about a certain political party? Just counting all the tweets, wouldn’t be\n  the correct thing to do, we actually need to understand the context of the\n  data. Hmm, how can we automate this? For this, you can actually use machine\n  learning. Machine learning is not only for data scientists and experts, you\n  and I can make use of it as well. The Google Cloud platform provides a bunch\n  of APIs which are easy to use. Think about machine learning APIs such as: <em>Speech\n    API</em> (which can convert speech to text), <em>Vision API</em> (which can\n  get insights from pictures), <em>Translate API</em> (to translate text to a\n  certain language), <em>Video Intelligence API</em> (to retrieve metadata from\n  videos) and <em><a href=\"https://cloud.google.com/natural-language/\" target=\"_blank\" rel=\"noopener\">Natural\n      Language API</a></em> (to derive insights from unstructured text). Google\n  is planning to release much more machine learning APIs to the cloud platform,\n  and on top of that; if you are a data scientists you could write your own\n  machine learning models. The last mentioned API is what we need to understand\n  pieces of our Twitter data. However…</p>\n<p>Unfortunately, the NLP API won’t understand the Dutch language yet. So\n  here’s the test case: Would it work if we translate the text from Dutch to\n  English first? Afterall, the only thing we need to know is if the context of\n  the tweet is positive or negative. Let’s give it a try. We make use of the <a href=\"https://cloud.google.com/translate/\" target=\"_blank\" rel=\"noopener\">Translate\n    API</a> first, afterwards the Natural Language API. Later, we will store in\n  BigQuery the original tweet, but with a ranking total score column. Go to the\n  <a href=\"https://console.cloud.google.com\" target=\"_blank\" rel=\"noopener\">cloud console</a> and click on the\n  <strong>menu</strong> (hamburger) button. Click <strong>API Manager &gt;\n    Dashboard</strong> and click <strong>Enable APIs</strong>. Click <strong>Natural\n    Language API</strong> from the Google Cloud Machine Learning API section.\n  Click <strong>Enable</strong>. Go back to the previous screen, and select\n  <strong>Translation API</strong> and hit <strong>Enable</strong> again. In\n  the <strong>lib</strong> folder, create the following file: <strong>ml.js</strong>\n  which contains these contents: (see the comments in the JavaScript code for\n  further explanation).</p>\n<script src=\"//gist.github.com/fb2c637e981ae582aeae520d01c4a3d3.js\"></script>\n<p>In <strong>twitter.js</strong>, add the following line somewhere in the top\n  of the file:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); </span><br><span class=\"line\"><span class=\"keyword\">var</span> machinelearning = <span class=\"built_in\">require</span>( path.resolve( __dirname, <span class=\"string\">\"ml.js\"</span> ) );</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>You can test the MachineLearning APIs by adding the following example code\n  lines to the end of the file:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">getSentiment(<span class=\"string\">'I love Milkshakes'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>)</span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(results.sentences); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">getTranslation(<span class=\"string\">'Ik houd van Milkshakes.'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>)</span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(results); </span><br><span class=\"line\">&#125;);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The sentiment score is a number between -1.0 (negative sentiment) and 1.0\n  (positive sentiment). The magnitude is a non-negative number in the [0, +inf)\n  range, which represents the absolute magnitude of sentiment regardless of\n  score (positive or negative). To change the language, change the <code>from</code>\n  input parameter on line 11, to another language, such as <code>es</code> for\n  Spanish, or <code>fr</code> for French. Feel free to play arround with it,\n  and pass in different text strings, or language API settings. From the\n  terminal run: <code>$ node bin/www</code> Now, you will have to add these\n  pieces of code, within the <code>stream.on()</code> function, right after the\n  <code>console.log</code> line. (let’s say line 42). This will be a callback,\n  in a callback, in a callback… <em>pffff</em>. …and we also need to bind to\n  the original scope! So I solved it this way:</p>\n<script src=\"//gist.github.com/89d57616b54474134106db24211f3ae5.js\"></script>\n<p>Once done with it, start the node app again. You should see the Twitter\n  lines, streaming in, with translations and sentiment detection. The next step\n  will be to push these data into BigQuery!</p>\n<h2 id=\"BigQuery\"><a href=\"#BigQuery\" class=\"headerlink\" title=\"BigQuery\"></a>BigQuery</h2>\n<p>The next challenge is to store this data in the BigQuery storage in the\n  Google cloud. BigQuery is a fast, economical and fully-managed enterprise\n  data warehouse for large-scale data analytics. BigQuery can query terabytes\n  of data in seconds and petabytes in minutes! The code to save the data in\n  BigQuery is not so difficult. Please have a look:</p>\n<script src=\"//gist.github.com/11490d86a942f0b0acb83b55009cac95.js\"></script>\n<p>In <strong>twitter.js</strong> you will need to require the file:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">var</span> bigquery = <span class=\"built_in\">require</span>( path.resolve( __dirname, <span class=\"string\">\"bigQuery.js\"</span> ) );</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p></p>\n<p>And within the most inner callback (on line 127), you can enable the <code>insertBq()</code>\n  method:</p>\n<figure class=\"highlight javascript\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\">bigquery.insertInBq(row);</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>Run the node app for a while. This will load new content into BigQuery. We\n  can now run a bunch of queries to analyze our data. Click <strong>Compose\n    Query</strong>, write:</p>\n<figure class=\"highlight sql\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">SUM</span>(score) <span class=\"keyword\">as</span> totalscore, party, <span class=\"keyword\">COUNT</span>(party) <span class=\"keyword\">as</span> totalparties </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> dutchelectionstweets.dutchelections <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> party <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> totalscore <span class=\"keyword\">DESC</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>This query, will sum the <em>total sentiment score</em> per party. Also, it\n  counts and it groups the parties. Click <strong>Run</strong>, to run the\n  query. You will see the results in the table below. When the results look ok\n  to you, you can save the view. This will create a new view (which is like a\n  table, but it includes the query). It contains the unique result set. We will\n  need this later for Data Studio. Let’s create a few more views. Such as the 3\n  most positive parties:</p>\n<figure class=\"highlight sql\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">SUM</span>(score) <span class=\"keyword\">as</span> totalscore, party <span class=\"keyword\">FROM</span> dutchelectionstweets.dutchelections </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> party <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> totalscore <span class=\"keyword\">DESC</span> <span class=\"keyword\">LIMIT</span> <span class=\"number\">3</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>The total amount of tweets per party:</p>\n<figure class=\"highlight sql\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">SELECT</span> party, <span class=\"keyword\">COUNT</span>(party) <span class=\"keyword\">as</span> totalparties <span class=\"keyword\">FROM</span> dutchelectionstweets.dutchelections </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> party <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> totalparties <span class=\"keyword\">DESC</span></span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>And the total amount of tweets:</p>\n<figure class=\"highlight sql\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(<span class=\"built_in\">text</span>) <span class=\"keyword\">as</span> totaltweets <span class=\"keyword\">FROM</span> dutchelectionstweets.dutchelections</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>In case you want to browse through all the tweets you can use:</p>\n<figure class=\"highlight sql\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><span class=\"line\">1</span><br></pre>\n      </td>\n      <td class=\"code\">\n        <pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">text</span>, party, score <span class=\"keyword\">FROM</span> dutchelectionstweets.dutchelections</span><br></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<h3 id=\"Data-Studio\"><a href=\"#Data-Studio\" class=\"headerlink\" title=\"Data Studio\"></a>Data\n  Studio</h3>\n<p>Instead of displaying the results in <em>“boring”</em> tables, we could very\n  easily display the result sets in charts. I’ve used <a href=\"https://datastudio.google.com\" target=\"_blank\" rel=\"noopener\">Google\n    Data Studio</a> for this.</p>\n<p><img src=\"/images/analyze-bq-ml-2-500x250.png\" alt=\"Image\"></p>\n<p>When you drop a chart on the stage, you will need to <strong>Create a new\n    Data Source</strong>. Which you can set to <strong>BigQuery Connector</strong>.\n  From there, you select your project, your dataset, and then your table set or\n  table views. From that moment, you can start using all your data within the\n  Studio. You can easily refresh the data, by clicking on the <strong>Refresh\n    Data</strong> button:</p>\n<p><img src=\"/images/analyze-bq-ml-3.png\" alt=\"Refresh data in Data Studio\"></p>\n<p>With Google Data Studio you can drag and drop charts, images and\n  visualizations on the stage. It turns your data into informative dashboards\n  and reports which are easy to read and share. Google Data Studio is currently\n  in beta. It’s not part of Google Cloud Platform, it’s a Google Analytics\n  solution. You can read more about this tool on: [<a href=\"https://www.google.com/analytics/data-studio/]\" target=\"_blank\" rel=\"noopener\">https://www.google.com/analytics/data-studio/]</a></p>\n<h2 id=\"Compute-Engine-Cloud-Launcher\"><a href=\"#Compute-Engine-Cloud-Launcher\" class=\"headerlink\" title=\"Compute Engine / Cloud Launcher\"></a>Compute\n  Engine / Cloud Launcher</h2>\n<p>Ok, so we’re done with writing the code to fetch and analyze our data!\n  Although you could keep your terminal open on your local machine for a full\n  day, it’s not ideal. At the end, this process will take some processing\n  power. A better use case would be to move it to a virtual machine.</p>\n<p><img src=\"/images/analyze-bq-ml-4-500x166.png\" alt=\"Image\"></p>\n<p>Let’s create a virtual machine. Open the <a href=\"https://console.cloud.google.com/\" target=\"_blank\" rel=\"noopener\">Cloud\n    console</a> in your browser. You could create a virtual machine, manually\n  yourself by clicking the <strong>Compute Engine</strong> menu option. But\n  since we need an image which requires Node.js installed, we will do it the\n  easy way, instead make use of <strong>Cloud Launcher</strong>!</p>\n<ol>\n  <li>Click [<a href=\"https://console.cloud.google.com/launcher/]\" target=\"_blank\" rel=\"noopener\">https://console.cloud.google.com/launcher/]</a></li>\n  <li>Search for <strong>Node.js</strong></li>\n  <li>Choose the 2nd Node.js image, (the one from <strong>Bitnami</strong>.)</li>\n  <li>Click the <strong>Launch on Compute Engine</strong> button.</li>\n  <li>Specify a name, and a zone (I am in Europe, so I choose <strong>europe-west-1b</strong>)</li>\n  <li>Choose <strong>micro machine</strong> type.</li>\n  <li>Hit the <strong>Deploy</strong> button. Notice, how fast it will launch\n    this virtual machine for you!</li>\n</ol>\n<p>After you deployed the Bitnami Node.js app, you will see the IP address\n  where your VM will be available. There’s an <strong>SSH</strong> dropdown.\n  Hit it, and click <strong>View SSH command</strong>. It will show you the\n  command that you can paste in your local terminal. For example: <code>gcloud\n    compute --project &quot;myproject&quot; ssh --zone\n    &quot;europe-west1-b&quot; &quot;nodejs-1-vm&quot;</code> This will log you\n  in on the virtual machine. When you run this command the first time, you will\n  need to create a passphrase. It will automatically create a public key on\n  your machine. Once you’re logged in, you can verify if nodejs was properly\n  installed. Enter: <code>$ node -v</code> It should output the nodejs version\n  number.</p>\n<p>The next step is to transfer our project on this virtual machine. You can\n  use Github for this, or you can use Google Cloud Development repositories. (I\n  choose Github, since I want to share my public Github repository, with you.\n  When you have your own project running locally on your machine, you can\n  follow the steps from the <strong>Development</strong> screen instead.) Pull\n  the code, from some repository in the root of your vm: <code>$ git clone\n    https://github.com/savelee/gcloud-bq-election-demo.git</code> Navigate into\n  the folder: <code>$ cd gcloud-bq-election-demo/</code> Install all the nodejs\n  packages: <code>$ npm install</code></p>\n<p>We aren’t done yet! We need to have all our keys available on the virtual\n  machine. That’s the <strong>.env</strong> file and the <strong>cloudkeys.json</strong>\n  file. Obviously, I didn’t put these files in my public Github repo. Hmm, so\n  how can we move these files to the VM? With AppEngine or ContainerEngine, you\n  probably would work with Docker images, so you can easily put these keys in\n  the Docker file. For this demo, we use Compute Engine, so we should make use\n  of <a href=\"https://cloud.google.com/storage/\" target=\"_blank\" rel=\"noopener\">Google Cloud Storage</a>\n  instead. We can create a bucket, and upload our keys into it. Open the Cloud\n  console in your browser. Click on <strong>Storage &gt; Create Bucket</strong>.\n  Give the bucket a name. (For example <em>-contents&gt;</em>). Make sure this\n  bucketname is unique, and remember it, because you will use it later. Select\n  <strong>Regional</strong>, and select the same region as the VM you have\n  choosen before. (so <em>europe-west1</em> in my case.) Click <strong>Create</strong>.\n  Once the bucket is created, we upload the files from the command-line. In\n  your terminal on your local development machine enter the following two\n  commands: <code>$ gsutil cp .env gs://</code> <code>$ gsutil cp cloudkey.json\n    gs://</code> Both files are now in the bucket. The next step will be to\n  download it, from the bucket into your virtual machine. Open the terminal\n  which runs on your VM. Enter the following command, to download everything\n  from the bucket, into the root of your vm: <code>$ gsutil cp gs:///* .</code>\n  If you want, you can remove your bucket in the console. (Although, it\n  probably wouldn’t cost much, to save 2 small files.) And now you can start\n  the Node.js service: <code>$ nodemon bin/www</code> And now you can start the\n  Node.js service.</p>\n<p>You might have noticed, that when you start running nodemon, and you close\n  the VM console, that your script stops as well. What you will need is a Node\n  module, which can run your script “forever”. <code>$ npm install forever -g</code>\n  And then start your script like: <code>$ sudo /opt/bitnami/nodejs/bin/forever\n    start bin/www</code> (with <code>sudo forever stopall</code> you can stop\n  the script again) You should see the Tweets coming by. When you query in\n  BigQuery you will see the results! Awesome, now let’s keep this process\n  running for a while! <em>TIP: In case you rather want to schedule your script\n    to go on, on a certain time, you could use Cron for this.</em> <em>First\n    create a symlink to the correct node folder:</em> <code>$ sudo ln -s\n    /opt/bitnami/nodejs /usr/bin/node</code> <em>Then start a crontab</em>\n  <code>$ crontab -e</code> <em>Inside the crontab you code probably would look\n    something like:</em> <code>SHELL=/bin/shell</code> <code>0 0 15 3 *\n    PATH=$PATH:/opt/bitnami/nodejs cd ~/gcloud-bq-election-demo/ &amp;&amp;\n    sudo /opt/bitnami/nodejs/bin/forever start bin/www</code> <em>This means,\n    at 0:00:00 time, on the 15th of March, navigate to the\n    gcloud-bq-election-demo directory, and start the nodemon script. You can\n    request the VM time by running <code>date</code> in the console.</em> <em>You\n    can check if it all worked out, by viewing the logs:</em> <code>$ tail -f\n    /var/log/syslog</code></p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2>\n<p>By now, you have learned how to work with various Google Cloud services. We\n  have been looking into: <strong>Compute Engine</strong> and <strong>Cloud\n    Launcher</strong> to spin off a VM in the cloud, <strong>Machine Learning\n    APIs</strong> like the <strong>Natural Language API</strong> and <strong>Translation\n    API</strong> to understand the data, <strong>BigQuery</strong> to analyze\n  the data and <strong>Data Studio</strong> to visualize the data in nice\n  charts. Did I predict the Dutch elections well? Well, in some extend. The top\n  2 most positively spoken parties on Twitter, got the 2nd and 3rd place in the\n  final results. So that was as expected. The PvdA didn’t do well at all, and\n  the VVD got the first place in the elections, with the most votes. If I do\n  random checks on the collected data, I can see that the sentiment detection\n  has been calculated correctly. There is just no real direct relation between\n  popularity on social media vs. the voting process. But mind you every person\n  can only vote once, but can post unlimited positive or negative tweets. All\n  my code will be in Github [<a href=\"https://github.com/savelee/gcloud-bq-election-demo]\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/gcloud-bq-election-demo]</a>.\n  Feel free to use my code, to run a similar case. I will put the instructions\n  on how to setup, in the readme file. In case you are new to Google Cloud\n  platform. You can create <a href=\"https://cloud.google.com/free-trial/\" target=\"_blank\" rel=\"noopener\">a\n    free trial account</a>, which includes $300 dollars that can be used to\n  spend on cloud services which expire after 12 months. That should be enough\n  money to try out this demo.</p>\n<h3 id=\"The-costs\"><a href=\"#The-costs\" class=\"headerlink\" title=\"The costs\"></a>The\n  costs</h3>\n<p>To run this tutorial for one day in a Compute VM created by Cloud Launcher,\n  with the use of machine learning APIs and streaming and querying within\n  BigQuery, costed me about 14 dollars.</p>\n<p>This included the VM running for 5 days (which costed me a dollar). My data\n  wasn’t that big, so I didn’t had any costs for executing BigQuery queries. I\n  was worried about the amount of API calls that I would made, but by running\n  the script for a large part of the election day, I managed to still stay\n  mostly within the free Natural Language API call request tier. So most of my\n  money has been used on the large amount of tweets that has been translated.\n  Let’s drill a little more into the costs of GCP.</p>\n<p>BigQuery storage will cost, $0.02 per GB Streaming data in BigQuery: $0.05\n  per GB (loading data is free). To execute Queries, will cost you $5.00 per TB\n  but the first TB per month is free. <a href=\"https://cloud.google.com/bigquery/pricing\" target=\"_blank\" rel=\"noopener\">BigQuery\n    Pricing</a>. Note, that Data Studio makes use of a BigQuery connector,\n  which basically fires queries in BigQuery.</p>\n<p>The price for a micro virtual machine will cost less than 5 dollar a month.\n  But for a computing demo like this, you will probably only run it for a bit,\n  and pay for your use. With Compute Engine, you will pay per minute, with a 10\n  minute minimum. The prices for translation and language detection is about 20\n  dollars for a million characters. It will become cheaper, once your amount is\n  over the 1.5 billion characters. See <a href=\"https://cloud.google.com/translate/pricing\" target=\"_blank\" rel=\"noopener\">Translate\n    API pricing</a>.</p>\n<p>The Natural Language API has a free tier, if the amount of text records\n  stays under the 5k, for pricing info see: <a href=\"https://cloud.google.com/natural-language/pricing\" target=\"_blank\" rel=\"noopener\">Natural\n    Language Pricing</a>. Another great way, for checking and estimating costs,\n  is by making use of the <a href=\"https://cloud.google.com/pricing/calculators\" target=\"_blank\" rel=\"noopener\">GCP\n    Pricing calculators</a>.</p>\n<p>In case you are concerned about the prices, you can setup a billing alert.\n  Which can send an email to you once you reach your quota. From the Cloud\n  console, you can enable this, by clicking: <strong>Billing &gt; Budgets &amp;\n    Alerts</strong>. In this screen, you can select the project, and your\n  quota. - You can get emails once you get closer to your quota.</p>\n<h2 id=\"Disclaimer\"><a href=\"#Disclaimer\" class=\"headerlink\" title=\"Disclaimer\"></a>Disclaimer</h2>\n<p>This blog post won’t contain any political opinions from me, neither from\n  Google. This is a blog post to demonstrate the various solutions of the\n  Google Cloud Platform, on how you can be creative with data. I have collected\n  a large part of the day all the Dutch political tweets, posted on Twitter.\n  Though, my results can not be considered as the ultimate truth. I use the\n  Natural Language API in combination with the Translation API, translating\n  first from Dutch to English before doing a sentiment analysis. Whether this\n  always results, in the right score is the question. But based on some random\n  tests, the majority of the tweets seem to have a reasonable score. At the end\n  I only need to figure out if the score is positive or negative.</p>\n<p>Let’s look into an example: Here’s the translation of the <code>translate.translate()</code>\n  call with the following text: <code>Partij XYZ is mijn favoriete partij. Met\n    de meeste stellingen ben ik het eens.</code>. It will be translated to\n  this: <code>Party XYZ is my favorite party. With most positions, I agree.</code>\n  If I would have translated it myself, I probably would have said it a little\n  different: “Party XYZ is my favorite party. I agree with most of the\n  positions they take on issues.” However, to detect the sentiment, it doesn’t\n  really matter, the score seems to be positive and correct: <code>{ magnitude:\n    0.800000011920929, score: 0.800000011920929 }</code></p>\n<p>There are certain tweets which I left out the <em>totalscore</em>\n  calculation for sentiment analysis. For example, tweets which contain\n  multiple opinions for multiple political parties in one single tweet: <em>Here’s\n    the result of the <code>language.detectSentiment()</code> call with the\n    following text: <code>I love Milkshakes.</code> : <code>{ magnitude:\n      0.699999988079071, score: 0.699999988079071 }</code></em></p>\n<p>Here’s the result of the <code>language.detectSentiment()</code> call with\n  the following text: <code>I really hate Whipcream.</code> : <code>{\n    magnitude: 0.5, score: -0.5 }</code></p>\n<p>Here’s the result for the <code>language.detectSentiment()</code> call with\n  the following text: <code>I love Milkshakes but I really hate Whipcream.</code>\n  : <code>{ magnitude: 0, score: 0 }</code> I’m sure there are ways on how you\n  can calculate this more nicely, but for now it’s out of scope for this blog\n  post. (I came to this conclusion after seeing tweets (in single sentences)\n  were people tag 5 different parties, with good and bad opinions about those.)\n  Then there are also tweets, which are very hard for a machine to detect; for\n  example tweets that contain sarcasm:</p>\n<p>Here’s the result for the <code>language.detectSentiment()</code> call with\n  the following text: <code>Such a great idea, yeah, and monkeys can fly!</code>\n  : <code>{ magnitude: 0.5, score: 0.5 }</code></p>\n<p>I left these tweets in my score calculation, assuming that people will use\n  sarcasm for every political party, with both a positive and negative meaning.\n  Last but not least, not everyone who votes, shares their thoughts on Twitter,\n  and some people with strong political opinions might tweet more, to use it as\n  a personal outlet. But in real-life, a person can obviously only vote once.\n  It’s interesting anyway and I was curious to see, if my analysis results come\n  close to the final scores of the Dutch elections. At the end, I had a lot of\n  fun by writing the code, and I learned a lot about the Google Cloud Platform.\n  BTW; do you want to receive more insights about the Dutch Elections? Google\n  has a <a href=\"https://trends.google.nl/trends/story/NL_cu_l5QQ-lkBAADe7M_en\" target=\"_blank\" rel=\"noopener\">Google\n    Trends</a> page.</p>\n<h2 id=\"Handy-Links\"><a href=\"#Handy-Links\" class=\"headerlink\" title=\"Handy Links\"></a>Handy\n  Links</h2>\n<ul>\n  <li><a href=\"[https://cloud.google.com/free-trial/\">Create a free GCP trial\n      account</a></li>\n  <li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node JS</a></li>\n  <li><a href=\"http://expressjs.com/\" target=\"_blank\" rel=\"noopener\">Express</a></li>\n  <li><a href=\"https://dev.twitter.com/streaming/overview\" target=\"_blank\" rel=\"noopener\">Twitter Streaming\n      APIs</a></li>\n  <li><a href=\"https://cloud.google.com/translate/\" target=\"_blank\" rel=\"noopener\">Translate API</a></li>\n  <li><a href=\"https://cloud.google.com/translate/pricing\" target=\"_blank\" rel=\"noopener\">Translate API\n      pricing</a></li>\n  <li><a href=\"https://cloud.google.com/natural-language/\" target=\"_blank\" rel=\"noopener\">Natural Language API</a></li>\n  <li><a href=\"https://cloud.google.com/natural-language/pricing\" target=\"_blank\" rel=\"noopener\">Natural\n      Language Pricing</a></li>\n  <li><a href=\"https://cloud.google.com/bigquery/\" target=\"_blank\" rel=\"noopener\">BigQuery</a></li>\n  <li><a href=\"[https://cloud.google.com/bigquery/pricing]\">BigQuery pricing</a></li>\n  <li><a href=\"[https://www.google.com/analytics/data-studio/]\">Data Studio</a></li>\n  <li><a href=\"https://datastudio.google.com\" target=\"_blank\" rel=\"noopener\">Run Google Data Studio</a></li>\n  <li><a href=\"https://cloud.google.com/launcher/\" target=\"_blank\" rel=\"noopener\">Cloud Launcher</a></li>\n  <li><a href=\"https://cloud.google.com/storage/\" target=\"_blank\" rel=\"noopener\">Cloud Storage</a></li>\n  <li><a href=\"https://cloud.google.com/pricing/calculators\" target=\"_blank\" rel=\"noopener\">GCP Pricing\n      calculators</a></li>\n  <li><a href=\"https://medium.com/google-cloud/comparing-tweets-about-trump-hillary-with-natural-language-processing-a0064e949666\" target=\"_blank\" rel=\"noopener\">Comparing\n      tweets about Trump &amp; Hillary with natural language processing.</a></li>\n</ul>"},{"title":"Custom UI Components with Sencha","url":"2571.html","id":"2571","date":"2016-11-01T12:20:00.000Z","_content":"\nSencha recently announced the Angular 2 and React bridges. * \\[https://www.sencha.com/blog/first-look-ext-js-bridge-to-angular-2/\\](https://www.sencha.com/blog/first-look-ext-js-bridge-to-angular-2/) * \\[https://www.sencha.com/blog/react-and-ext-js-secret-besties/\\](https://www.sencha.com/blog/react-and-ext-js-secret-besties/) These are great solutions for Angular 2 or React developers, which do want to make use of the robust Sencha components.(For what’s worth; the Angular 2 and React frameworks don’t contain components. These are just single page app frameworks which sets up the architecture pattern. In comparison with Ext JS, Sencha has an architecture pattern, a DOM manipulation framework, a data package and visual UI components (with themes)). With such a bridge, you can integrate Ext JS components like grids and trees within your Angular 2 or React application. Lately, I have been asked a lot: *“What about the other way around?”* Integrating an Angular or React component within a Sencha Ext JS app? This question contains a lot of confusion. First of all, it’s not possible (it's an anti pattern) to integrate Angular 2 / React within an Ext JS app. Why would you do so? Again, both frameworks don’t contain any UI components and themes. It’s just the architectural pattern, which Ext JS has as well. Angular 2 / React components basically exist of HTML / DOM snippets with CSS stylesheet code. Maybe you found this great slideshow component online. A custom HTML component with an essential StyleSheet. You need this component in your Sencha app. So, let’s change the question: *“Can I integrate custom HTML in my Sencha App?”* or *“Can I create custom Sencha components?”*. That answer is: \\*\\*YES\\*\\*, You certainly can do. This is actually what our Sencha developers do, to create UI components… ## About Custom Reusable UI Components Ext JS ships with many, many components. There are times, however, when the components are just a little bit different than what you were looking for. Since Ext JS is just JavaScript with HTML and CSS, it is possible to create your own Ext components instead. We call these \\*custom components\\*. You may need custom components, to create custom experiences. Custom Components in Ext JS are \\*\\*packages\\*\\*. Packages are like themes, you can share code within your own projects. For example, you could create your own library with Sencha custom components, and reuse it in all your projects! A custom UI component often exist of more files than just one single JavaScript file. Maybe it mixes multiple JavaScript classes inside, and maybe it also contains images, fonts or specific styling. Where do I store those files? Do I mix it within my app-specific Sass stylesheet and resources folder? Hmmm… That makes this custom UI component less compact and hard to reuse. The better way is to share code through \\*packages\\*. This enables you to share packages: ### Locally One use of packages is simply to hold code or themes that are available for multiple applications in a workspace. These packages don’t need to be distributed (beyond source control) to provide value to your development. ### Remotely You can download packages remotely from the command-line. The set of available packages are listed in the \\*catalog\\* on the command-line. You can display the contents of the global catalog using this command: \\`sencha package list\\` You can download these packages with the following command; \\`sencha package install\\` It will be downloaded to your Cmd \\*\\*extensions\\*\\* folder: For example: */Users/leeboonstra/bin/Sencha/Cmd/6.x/extensions/* ### Sencha Market It is also possible to share your custom components via the Sencha Market. This does not require packages. You can also share ux folders. \\[http://market.sencha.com\\](http://market.sencha.com) For more information about packages, please check this guide: \\[http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_packages.html\\](http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_packages.html ) # Tutorial: Create a custom UI Component To exactly explain how custom UI components are build, let’s create an example. This tutorial will show you how you can create a custom, ..wait for it.. “Hyperlink Component”. Maybe not the most exciting custom component. (I will leave that up to you.) But it’s simple enough, to quickly go through a couple steps, so you will understand what you will need to do. I’ve created in the past many custom components like these. Think about fancy toggle buttons. Nested Lists and slideshows. For all these examples, I often just googled online, to find a tutorial or custom HTML component, which I could wrap in a Sencha component. The beauty of these components is the CSS stylesheet code, that belongs to a particular HTML snippet. Within Ext JS, we deal with a Sencha layout system. We write JavaScript code, via the Ext JS API the Sencha way. The browser reads these JavaScript instructions, and generates the DOM tree (like HTML representation within the browser memory), because of the Sencha themes (StyleSheets), your components look like nice UI components. So what we need to do here, is to “wrap”, your HTML snippets within a Sencha components, so it can make use of the Sencha API and the Sencha layout system! The good thing is. When you are a Sencha developer, you will probably know: * How the Sencha Class System works * How Ext.XTemplate works * How event listeners work * How to theme/style with Sass/CSS Custom UI components, inherit from existing Sencha components. If you know the Ext JS essentials, you can create custom UI components too! Let’s give it a try! ## Generate a Package We will start with generating a package from the command-line, which will generate the \\*package\\* folder structure. You can execute the following command from your project folder: \\`sencha generate package -type code ExtAddonHref\\` This will create the following folder structure: ``` packages/ foo/ # Top-level folder for the package .sencha/ package/ sencha.cfg # Sencha Cmd configuration for this package build-impl.xml # Generated build script for package plugin.xml # Sencha Cmd plugin for this package codegen.json # Data to support 3-way merge in code generator docs/ # Documentation for the package screenshots/ # Screenshots for Sencha Market licenses/ # License agreement overrides/ # Folder for automatically activated overrides resources/ # Static resources (typically has images folder) sass/ # Container for Sass code etc/ # General, non-component oriented Sass src/ # Sass rules and mixins named by component var/ # Sass variables named by component src/ # Folder for normal JavaScript code build.xml # Build script (called by \\`sencha package build\\`) package.json # Package descriptor Readme.md # High-level information about this package ``` Your \\*package.json\\* file, contains the package configuration. It will look similar to this: https://gist.github.com/savelee/9c418ff4e7cecb96541ce464810e3288 Packages published by Sencha will use names with the following prefixes: * sencha-* * ext-* * touch-* * cmd-* All package names beginning with the above prefixes are reserved by Sencha with respect to the Sencha Package Repository. It is recommended that you avoid conflicting with these names even if you disconnect from the Sencha Package Repository. \\*Versions\\* These versions are used when resolving package requirements. Each release of a package should have an updated version number. The meaning assigned to version numbers by Sencha may help you: x.y.z.b x : Major release number (large, impacting changes and features) y : Minor release number (new functionality but few if any breaking changes) z : Patch release number (bug fix / maintenance release - goal of 100% compatible) b : Build number (assigned by build system) ## Extend from a Sencha Component Create in \\*packages/ExtAddonHref/src\\*, the following file and folder: \\*\\*component/Href.js\\*\\* ``` Ext.define('ExtAddonHref.component.Href', { //todo custom logics }); ``` The ExtHrefComponent will be pretty basic. We give it the alias name: “extaddonhref”, and we will only inherit from Ext.Component: ``` Ext.define('ExtAddonHref.component.Href', { xtype: 'extaddonhref', extend: 'Ext.Component', }); ``` As a rule of thumb: You should extend from Sencha components that are the most similar to your new component. Features not being used will cost you in additional file size. So, for example, if I want to create a custom slideshow component, I have to deal with a store that contains images, and every slide should have it’s own HTML. In that case I would extend from \\`Ext.view.View\\`. When I create a custom togglefield, it pretty similar to a checkbox, so I would extend from \\`Ext.form.field.Checkbox\\`, and so on. ## What Will Be Configurable? The next step, is that you will need to decide what will be configurable. For an hyperlink component, you will need at least an \\*url\\* and a \\*title\\*. Maybe also a link \\*target\\*, an \\*anchorName\\*, \\*preventDefault\\* behaviour and an \\*external icon\\* to show if the hyperlink is external. https://gist.github.com/savelee/cbc6ae98531ee92192ec1f723fc697c8 ## Implementing a tpl Now that we know what needs to be configurable for the end user, let’s create the HTML snippet. Every Ext JS component, makes use of an XTemplate: \\[http://docs.sencha.com/extjs/6.0.0/classic/Ext.Template.html\\](http://docs.sencha.com/extjs/6.0.0/classic/Ext.Template.html). Inject the data based on the calling routine: https://gist.github.com/savelee/9c41aac37b34468f68a8bbd243807e44 Instead of the \\*tpl\\* you could also use the \\*renderTpl\\* instead. It separates the render part from init. You will need a \\*bufferRender\\* function to apply the \\*renderData\\* to the template. https://gist.github.com/savelee/6d65fb7b2c22dbd46de38f812750c024 ## Implementing Event Handling The hyperlink component will listen to both \\*click\\* and \\*dblClick\\* events. https://gist.github.com/savelee/afd0021be8497045bafcf0fcdac4e734 You will add the two event listeners, that fire the events from a DOM element. We will also implement some logic to switch off the default browser behavior. So the browser won’t visit the url. (e.g., When you wish to run a custom JavaScript behavior instead.) Use event delegation for handling bubbling events. It can keep the code simpler, (especially when adding or removing elements), and saves some memory. ## Implementing Styles You can add custom styles in the \\*packages/ExtAddonHref/sass/\\* folder. Create the following folders/files: \\*src/component/Href.scss\\* #### The Sass Namespace The Sass namespacing settings are correctly configured by default, and it points to the Ext JS framework structure. However it is possible to edit these mappings in the package.json file: ``` \"sass\": { \"namespace\": \"Ext\", //MyApp or ExtAddonHref \"etc\": \"${package.dir}/sass/etc/all.scss\", \"var\": \"${package.dir}/sass/var\", \"src\": \"${package.dir}/sass/src\" }, ``` The namespace Ext, tells Sencha, that the Sass files for the package are mapping the folder structure of the framework. (For example Ext.button.Button → src/button/Button.scss). You could change the namespace, to the namespace of your app or your package. The other settings, are to configure where the var and source folders are located in the package. Before Ext JS 5, you had to make this setting in the hidden \\*packages/ExtHrefComponent/.sencha/package/sencha.cfg\\* file. It had the setting: ``` package.sass.namespace=Ext //which could be set to: package.sass.namespace=ExtAddonHref ``` \\*\\*Implementing Styles\\*\\* Write the style code. This code will implement a little \"external link\" icon after external hyperlinks: https://gist.github.com/savelee/410bdfcf1b98608aa3d17c5ad700b49f Do not mix app specific styling, like colors, fonts etc. in your package. You want to reuse your package and those styles belongs to the application stylesheet. ## Implementing Assets You can add custom images, fonts and icons in the \\*packages/ExtAddonHref/resources/\\* folder. For the ExtAddonHref component, I’ve used an icon font, that I copied to the \\*packages/ExtAddonHref/resources/icons\\* folder. ## Consume The Package Open your application \\*app.json\\* and add the new package to your requires array: https://gist.github.com/savelee/51ce3be80ab174ae3e24df4731050ce7 Refresh your application to force your application to detect the new package. \\`sencha app refresh\\` Build your app to compile the Sass styles and to copy over the resources to the production folder: \\`sencha app build\\` ## Implement The Package In Your App The last step is to nest the custom component in your application: For example: https://gist.github.com/savelee/ba45471a77d08b5b9c5f72d7041c69bf It is also possible to build the package only, and publish it to a local repository. To build the package: \\`sencha package build\\` This produces a \\*build\\* folder inside the package. This is needed by applications when they are running in “dev mode” (without being compiled). It also produces \\*mypackage.pkg\\* file in your workspace’s build folder. The mypackage.pkg file is used to add the package to your local repository. This pkg file is not placed in the package’s build folder because: * It is a ZIP file of your package folder. * It is not needed by users of the package. In case you want to setup a local repository, see this guide: \\[http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_creating\\_packages.html\\](http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_creating\\_packages.html)","source":"_drafts/how-tos/custom-ui-components-with-sencha.md","raw":"---\ntitle: Custom UI Components with Sencha\ntags:\n  - Custom UI Components\n  - HTML\n  - packages\n  - XTemplate\nurl: 2571.html\nid: 2571\ncategories:\n  - Cmd\n  - Ext JS\n  - Ext JS 5\n  - Ext JS 6\ndate: 2016-11-01 13:20:00\n---\n\nSencha recently announced the Angular 2 and React bridges. * \\[https://www.sencha.com/blog/first-look-ext-js-bridge-to-angular-2/\\](https://www.sencha.com/blog/first-look-ext-js-bridge-to-angular-2/) * \\[https://www.sencha.com/blog/react-and-ext-js-secret-besties/\\](https://www.sencha.com/blog/react-and-ext-js-secret-besties/) These are great solutions for Angular 2 or React developers, which do want to make use of the robust Sencha components.(For what’s worth; the Angular 2 and React frameworks don’t contain components. These are just single page app frameworks which sets up the architecture pattern. In comparison with Ext JS, Sencha has an architecture pattern, a DOM manipulation framework, a data package and visual UI components (with themes)). With such a bridge, you can integrate Ext JS components like grids and trees within your Angular 2 or React application. Lately, I have been asked a lot: *“What about the other way around?”* Integrating an Angular or React component within a Sencha Ext JS app? This question contains a lot of confusion. First of all, it’s not possible (it's an anti pattern) to integrate Angular 2 / React within an Ext JS app. Why would you do so? Again, both frameworks don’t contain any UI components and themes. It’s just the architectural pattern, which Ext JS has as well. Angular 2 / React components basically exist of HTML / DOM snippets with CSS stylesheet code. Maybe you found this great slideshow component online. A custom HTML component with an essential StyleSheet. You need this component in your Sencha app. So, let’s change the question: *“Can I integrate custom HTML in my Sencha App?”* or *“Can I create custom Sencha components?”*. That answer is: \\*\\*YES\\*\\*, You certainly can do. This is actually what our Sencha developers do, to create UI components… ## About Custom Reusable UI Components Ext JS ships with many, many components. There are times, however, when the components are just a little bit different than what you were looking for. Since Ext JS is just JavaScript with HTML and CSS, it is possible to create your own Ext components instead. We call these \\*custom components\\*. You may need custom components, to create custom experiences. Custom Components in Ext JS are \\*\\*packages\\*\\*. Packages are like themes, you can share code within your own projects. For example, you could create your own library with Sencha custom components, and reuse it in all your projects! A custom UI component often exist of more files than just one single JavaScript file. Maybe it mixes multiple JavaScript classes inside, and maybe it also contains images, fonts or specific styling. Where do I store those files? Do I mix it within my app-specific Sass stylesheet and resources folder? Hmmm… That makes this custom UI component less compact and hard to reuse. The better way is to share code through \\*packages\\*. This enables you to share packages: ### Locally One use of packages is simply to hold code or themes that are available for multiple applications in a workspace. These packages don’t need to be distributed (beyond source control) to provide value to your development. ### Remotely You can download packages remotely from the command-line. The set of available packages are listed in the \\*catalog\\* on the command-line. You can display the contents of the global catalog using this command: \\`sencha package list\\` You can download these packages with the following command; \\`sencha package install\\` It will be downloaded to your Cmd \\*\\*extensions\\*\\* folder: For example: */Users/leeboonstra/bin/Sencha/Cmd/6.x/extensions/* ### Sencha Market It is also possible to share your custom components via the Sencha Market. This does not require packages. You can also share ux folders. \\[http://market.sencha.com\\](http://market.sencha.com) For more information about packages, please check this guide: \\[http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_packages.html\\](http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_packages.html ) # Tutorial: Create a custom UI Component To exactly explain how custom UI components are build, let’s create an example. This tutorial will show you how you can create a custom, ..wait for it.. “Hyperlink Component”. Maybe not the most exciting custom component. (I will leave that up to you.) But it’s simple enough, to quickly go through a couple steps, so you will understand what you will need to do. I’ve created in the past many custom components like these. Think about fancy toggle buttons. Nested Lists and slideshows. For all these examples, I often just googled online, to find a tutorial or custom HTML component, which I could wrap in a Sencha component. The beauty of these components is the CSS stylesheet code, that belongs to a particular HTML snippet. Within Ext JS, we deal with a Sencha layout system. We write JavaScript code, via the Ext JS API the Sencha way. The browser reads these JavaScript instructions, and generates the DOM tree (like HTML representation within the browser memory), because of the Sencha themes (StyleSheets), your components look like nice UI components. So what we need to do here, is to “wrap”, your HTML snippets within a Sencha components, so it can make use of the Sencha API and the Sencha layout system! The good thing is. When you are a Sencha developer, you will probably know: * How the Sencha Class System works * How Ext.XTemplate works * How event listeners work * How to theme/style with Sass/CSS Custom UI components, inherit from existing Sencha components. If you know the Ext JS essentials, you can create custom UI components too! Let’s give it a try! ## Generate a Package We will start with generating a package from the command-line, which will generate the \\*package\\* folder structure. You can execute the following command from your project folder: \\`sencha generate package -type code ExtAddonHref\\` This will create the following folder structure: ``` packages/ foo/ # Top-level folder for the package .sencha/ package/ sencha.cfg # Sencha Cmd configuration for this package build-impl.xml # Generated build script for package plugin.xml # Sencha Cmd plugin for this package codegen.json # Data to support 3-way merge in code generator docs/ # Documentation for the package screenshots/ # Screenshots for Sencha Market licenses/ # License agreement overrides/ # Folder for automatically activated overrides resources/ # Static resources (typically has images folder) sass/ # Container for Sass code etc/ # General, non-component oriented Sass src/ # Sass rules and mixins named by component var/ # Sass variables named by component src/ # Folder for normal JavaScript code build.xml # Build script (called by \\`sencha package build\\`) package.json # Package descriptor Readme.md # High-level information about this package ``` Your \\*package.json\\* file, contains the package configuration. It will look similar to this: https://gist.github.com/savelee/9c418ff4e7cecb96541ce464810e3288 Packages published by Sencha will use names with the following prefixes: * sencha-* * ext-* * touch-* * cmd-* All package names beginning with the above prefixes are reserved by Sencha with respect to the Sencha Package Repository. It is recommended that you avoid conflicting with these names even if you disconnect from the Sencha Package Repository. \\*Versions\\* These versions are used when resolving package requirements. Each release of a package should have an updated version number. The meaning assigned to version numbers by Sencha may help you: x.y.z.b x : Major release number (large, impacting changes and features) y : Minor release number (new functionality but few if any breaking changes) z : Patch release number (bug fix / maintenance release - goal of 100% compatible) b : Build number (assigned by build system) ## Extend from a Sencha Component Create in \\*packages/ExtAddonHref/src\\*, the following file and folder: \\*\\*component/Href.js\\*\\* ``` Ext.define('ExtAddonHref.component.Href', { //todo custom logics }); ``` The ExtHrefComponent will be pretty basic. We give it the alias name: “extaddonhref”, and we will only inherit from Ext.Component: ``` Ext.define('ExtAddonHref.component.Href', { xtype: 'extaddonhref', extend: 'Ext.Component', }); ``` As a rule of thumb: You should extend from Sencha components that are the most similar to your new component. Features not being used will cost you in additional file size. So, for example, if I want to create a custom slideshow component, I have to deal with a store that contains images, and every slide should have it’s own HTML. In that case I would extend from \\`Ext.view.View\\`. When I create a custom togglefield, it pretty similar to a checkbox, so I would extend from \\`Ext.form.field.Checkbox\\`, and so on. ## What Will Be Configurable? The next step, is that you will need to decide what will be configurable. For an hyperlink component, you will need at least an \\*url\\* and a \\*title\\*. Maybe also a link \\*target\\*, an \\*anchorName\\*, \\*preventDefault\\* behaviour and an \\*external icon\\* to show if the hyperlink is external. https://gist.github.com/savelee/cbc6ae98531ee92192ec1f723fc697c8 ## Implementing a tpl Now that we know what needs to be configurable for the end user, let’s create the HTML snippet. Every Ext JS component, makes use of an XTemplate: \\[http://docs.sencha.com/extjs/6.0.0/classic/Ext.Template.html\\](http://docs.sencha.com/extjs/6.0.0/classic/Ext.Template.html). Inject the data based on the calling routine: https://gist.github.com/savelee/9c41aac37b34468f68a8bbd243807e44 Instead of the \\*tpl\\* you could also use the \\*renderTpl\\* instead. It separates the render part from init. You will need a \\*bufferRender\\* function to apply the \\*renderData\\* to the template. https://gist.github.com/savelee/6d65fb7b2c22dbd46de38f812750c024 ## Implementing Event Handling The hyperlink component will listen to both \\*click\\* and \\*dblClick\\* events. https://gist.github.com/savelee/afd0021be8497045bafcf0fcdac4e734 You will add the two event listeners, that fire the events from a DOM element. We will also implement some logic to switch off the default browser behavior. So the browser won’t visit the url. (e.g., When you wish to run a custom JavaScript behavior instead.) Use event delegation for handling bubbling events. It can keep the code simpler, (especially when adding or removing elements), and saves some memory. ## Implementing Styles You can add custom styles in the \\*packages/ExtAddonHref/sass/\\* folder. Create the following folders/files: \\*src/component/Href.scss\\* #### The Sass Namespace The Sass namespacing settings are correctly configured by default, and it points to the Ext JS framework structure. However it is possible to edit these mappings in the package.json file: ``` \"sass\": { \"namespace\": \"Ext\", //MyApp or ExtAddonHref \"etc\": \"${package.dir}/sass/etc/all.scss\", \"var\": \"${package.dir}/sass/var\", \"src\": \"${package.dir}/sass/src\" }, ``` The namespace Ext, tells Sencha, that the Sass files for the package are mapping the folder structure of the framework. (For example Ext.button.Button → src/button/Button.scss). You could change the namespace, to the namespace of your app or your package. The other settings, are to configure where the var and source folders are located in the package. Before Ext JS 5, you had to make this setting in the hidden \\*packages/ExtHrefComponent/.sencha/package/sencha.cfg\\* file. It had the setting: ``` package.sass.namespace=Ext //which could be set to: package.sass.namespace=ExtAddonHref ``` \\*\\*Implementing Styles\\*\\* Write the style code. This code will implement a little \"external link\" icon after external hyperlinks: https://gist.github.com/savelee/410bdfcf1b98608aa3d17c5ad700b49f Do not mix app specific styling, like colors, fonts etc. in your package. You want to reuse your package and those styles belongs to the application stylesheet. ## Implementing Assets You can add custom images, fonts and icons in the \\*packages/ExtAddonHref/resources/\\* folder. For the ExtAddonHref component, I’ve used an icon font, that I copied to the \\*packages/ExtAddonHref/resources/icons\\* folder. ## Consume The Package Open your application \\*app.json\\* and add the new package to your requires array: https://gist.github.com/savelee/51ce3be80ab174ae3e24df4731050ce7 Refresh your application to force your application to detect the new package. \\`sencha app refresh\\` Build your app to compile the Sass styles and to copy over the resources to the production folder: \\`sencha app build\\` ## Implement The Package In Your App The last step is to nest the custom component in your application: For example: https://gist.github.com/savelee/ba45471a77d08b5b9c5f72d7041c69bf It is also possible to build the package only, and publish it to a local repository. To build the package: \\`sencha package build\\` This produces a \\*build\\* folder inside the package. This is needed by applications when they are running in “dev mode” (without being compiled). It also produces \\*mypackage.pkg\\* file in your workspace’s build folder. The mypackage.pkg file is used to add the package to your local repository. This pkg file is not placed in the package’s build folder because: * It is a ZIP file of your package folder. * It is not needed by users of the package. In case you want to setup a local repository, see this guide: \\[http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_creating\\_packages.html\\](http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_creating\\_packages.html)","slug":"how-tos/custom-ui-components-with-sencha","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncz100zukif5md83krt1","content":"<p>Sencha recently announced the Angular 2 and React bridges. <em>[<a href=\"https://www.sencha.com/blog/first-look-ext-js-bridge-to-angular-2/\\](https://www.sencha.com/blog/first-look-ext-js-bridge-to-angular-2/)\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/blog/first-look-ext-js-bridge-to-angular-2/\\](https://www.sencha.com/blog/first-look-ext-js-bridge-to-angular-2/)</a>\n  </em>[<a href=\"https://www.sencha.com/blog/react-and-ext-js-secret-besties/\\](https://www.sencha.com/blog/react-and-ext-js-secret-besties/)\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/blog/react-and-ext-js-secret-besties/\\](https://www.sencha.com/blog/react-and-ext-js-secret-besties/)</a>\n  These are great solutions for Angular 2 or React developers, which do want to\n  make use of the robust Sencha components.(For what’s worth; the Angular 2 and\n  React frameworks don’t contain components. These are just single page app\n  frameworks which sets up the architecture pattern. In comparison with Ext JS,\n  Sencha has an architecture pattern, a DOM manipulation framework, a data\n  package and visual UI components (with themes)). With such a bridge, you can\n  integrate Ext JS components like grids and trees within your Angular 2 or\n  React application. Lately, I have been asked a lot: <em>“What about the other\n    way around?”</em> Integrating an Angular or React component within a Sencha\n  Ext JS app? This question contains a lot of confusion. First of all, it’s not\n  possible (it’s an anti pattern) to integrate Angular 2 / React within an Ext\n  JS app. Why would you do so? Again, both frameworks don’t contain any UI\n  components and themes. It’s just the architectural pattern, which Ext JS has\n  as well. Angular 2 / React components basically exist of HTML / DOM snippets\n  with CSS stylesheet code. Maybe you found this great slideshow component\n  online. A custom HTML component with an essential StyleSheet. You need this\n  component in your Sencha app. So, let’s change the question: <em>“Can I\n    integrate custom HTML in my Sencha App?”</em> or <em>“Can I create custom\n    Sencha components?”</em>. That answer is: **YES**, You certainly can do.\n  This is actually what our Sencha developers do, to create UI components… ##\n  About Custom Reusable UI Components Ext JS ships with many, many components.\n  There are times, however, when the components are just a little bit different\n  than what you were looking for. Since Ext JS is just JavaScript with HTML and\n  CSS, it is possible to create your own Ext components instead. We call these\n  *custom components*. You may need custom components, to create custom\n  experiences. Custom Components in Ext JS are **packages**. Packages are like\n  themes, you can share code within your own projects. For example, you could\n  create your own library with Sencha custom components, and reuse it in all\n  your projects! A custom UI component often exist of more files than just one\n  single JavaScript file. Maybe it mixes multiple JavaScript classes inside,\n  and maybe it also contains images, fonts or specific styling. Where do I\n  store those files? Do I mix it within my app-specific Sass stylesheet and\n  resources folder? Hmmm… That makes this custom UI component less compact and\n  hard to reuse. The better way is to share code through *packages*. This\n  enables you to share packages: ### Locally One use of packages is simply to\n  hold code or themes that are available for multiple applications in a\n  workspace. These packages don’t need to be distributed (beyond source\n  control) to provide value to your development. ### Remotely You can download\n  packages remotely from the command-line. The set of available packages are\n  listed in the *catalog* on the command-line. You can display the contents of\n  the global catalog using this command: `sencha package list` You can download\n  these packages with the following command; `sencha package install` It will\n  be downloaded to your Cmd **extensions** folder: For example: <em>/Users/leeboonstra/bin/Sencha/Cmd/6.x/extensions/</em>\n  ### Sencha Market It is also possible to share your custom components via the\n  Sencha Market. This does not require packages. You can also share ux folders.\n  [<a href=\"http://market.sencha.com\\](http://market.sencha.com)\" target=\"_blank\" rel=\"noopener\">http://market.sencha.com\\](http://market.sencha.com)</a>\n  For more information about packages, please check this guide: [<a href=\"http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_packages.html\\]\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_packages.html\\]</a>(<a href=\"http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_packages.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_packages.html</a>\n  ) # Tutorial: Create a custom UI Component To exactly explain how custom UI\n  components are build, let’s create an example. This tutorial will show you\n  how you can create a custom, ..wait for it.. “Hyperlink Component”. Maybe not\n  the most exciting custom component. (I will leave that up to you.) But it’s\n  simple enough, to quickly go through a couple steps, so you will understand\n  what you will need to do. I’ve created in the past many custom components\n  like these. Think about fancy toggle buttons. Nested Lists and slideshows.\n  For all these examples, I often just googled online, to find a tutorial or\n  custom HTML component, which I could wrap in a Sencha component. The beauty\n  of these components is the CSS stylesheet code, that belongs to a particular\n  HTML snippet. Within Ext JS, we deal with a Sencha layout system. We write\n  JavaScript code, via the Ext JS API the Sencha way. The browser reads these\n  JavaScript instructions, and generates the DOM tree (like HTML representation\n  within the browser memory), because of the Sencha themes (StyleSheets), your\n  components look like nice UI components. So what we need to do here, is to\n  “wrap”, your HTML snippets within a Sencha components, so it can make use of\n  the Sencha API and the Sencha layout system! The good thing is. When you are\n  a Sencha developer, you will probably know: <em>How the Sencha Class System\n    works </em>How Ext.XTemplate works <em>How event listeners work </em>How to\n  theme/style with Sass/CSS Custom UI components, inherit from existing Sencha\n  components. If you know the Ext JS essentials, you can create custom UI\n  components too! Let’s give it a try! ## Generate a Package We will start with\n  generating a package from the command-line, which will generate the *package*\n  folder structure. You can execute the following command from your project\n  folder: `sencha generate package -type code ExtAddonHref` This will create\n  the following folder structure: <code>packages/ foo/ # Top-level folder for\n    the package .sencha/ package/ sencha.cfg # Sencha Cmd configuration for\n    this package build-impl.xml # Generated build script for package plugin.xml\n    # Sencha Cmd plugin for this package codegen.json # Data to support 3-way\n    merge in code generator docs/ # Documentation for the package screenshots/\n    # Screenshots for Sencha Market licenses/ # License agreement overrides/ #\n    Folder for automatically activated overrides resources/ # Static resources\n    (typically has images folder) sass/ # Container for Sass code etc/ #\n    General, non-component oriented Sass src/ # Sass rules and mixins named by\n    component var/ # Sass variables named by component src/ # Folder for normal\n    JavaScript code build.xml # Build script (called by \\`sencha package\n    build\\`) package.json # Package descriptor Readme.md # High-level\n    information about this package</code> Your *package.json* file, contains\n  the package configuration. It will look similar to this: <a href=\"https://gist.github.com/savelee/9c418ff4e7cecb96541ce464810e3288\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/9c418ff4e7cecb96541ce464810e3288</a>\n  Packages published by Sencha will use names with the following prefixes: <em>sencha-</em>\n  <em>ext-</em> <em>touch-</em> <em>cmd-</em> All package names beginning with\n  the above prefixes are reserved by Sencha with respect to the Sencha Package\n  Repository. It is recommended that you avoid conflicting with these names\n  even if you disconnect from the Sencha Package Repository. *Versions* These\n  versions are used when resolving package requirements. Each release of a\n  package should have an updated version number. The meaning assigned to\n  version numbers by Sencha may help you: x.y.z.b x : Major release number\n  (large, impacting changes and features) y : Minor release number (new\n  functionality but few if any breaking changes) z : Patch release number (bug\n  fix / maintenance release - goal of 100% compatible) b : Build number\n  (assigned by build system) ## Extend from a Sencha Component Create in\n  *packages/ExtAddonHref/src*, the following file and folder:\n  **component/Href.js** <code>Ext.define(&#39;ExtAddonHref.component.Href&#39;,\n    { //todo custom logics });</code> The ExtHrefComponent will be pretty\n  basic. We give it the alias name: “extaddonhref”, and we will only inherit\n  from Ext.Component: <code>Ext.define(&#39;ExtAddonHref.component.Href&#39;, {\n    xtype: &#39;extaddonhref&#39;, extend: &#39;Ext.Component&#39;, });</code>\n  As a rule of thumb: You should extend from Sencha components that are the\n  most similar to your new component. Features not being used will cost you in\n  additional file size. So, for example, if I want to create a custom slideshow\n  component, I have to deal with a store that contains images, and every slide\n  should have it’s own HTML. In that case I would extend from `Ext.view.View`.\n  When I create a custom togglefield, it pretty similar to a checkbox, so I\n  would extend from `Ext.form.field.Checkbox`, and so on. ## What Will Be\n  Configurable? The next step, is that you will need to decide what will be\n  configurable. For an hyperlink component, you will need at least an *url* and\n  a *title*. Maybe also a link *target*, an *anchorName*, *preventDefault*\n  behaviour and an *external icon* to show if the hyperlink is external. <a href=\"https://gist.github.com/savelee/cbc6ae98531ee92192ec1f723fc697c8\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/cbc6ae98531ee92192ec1f723fc697c8</a>\n  ## Implementing a tpl Now that we know what needs to be configurable for the\n  end user, let’s create the HTML snippet. Every Ext JS component, makes use of\n  an XTemplate: [<a href=\"http://docs.sencha.com/extjs/6.0.0/classic/Ext.Template.html\\](http://docs.sencha.com/extjs/6.0.0/classic/Ext.Template.html)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/6.0.0/classic/Ext.Template.html\\](http://docs.sencha.com/extjs/6.0.0/classic/Ext.Template.html)</a>.\n  Inject the data based on the calling routine: <a href=\"https://gist.github.com/savelee/9c41aac37b34468f68a8bbd243807e44\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/9c41aac37b34468f68a8bbd243807e44</a>\n  Instead of the *tpl* you could also use the *renderTpl* instead. It separates\n  the render part from init. You will need a *bufferRender* function to apply\n  the *renderData* to the template. <a href=\"https://gist.github.com/savelee/6d65fb7b2c22dbd46de38f812750c024\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/6d65fb7b2c22dbd46de38f812750c024</a>\n  ## Implementing Event Handling The hyperlink component will listen to both\n  *click* and *dblClick* events. <a href=\"https://gist.github.com/savelee/afd0021be8497045bafcf0fcdac4e734\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/afd0021be8497045bafcf0fcdac4e734</a>\n  You will add the two event listeners, that fire the events from a DOM\n  element. We will also implement some logic to switch off the default browser\n  behavior. So the browser won’t visit the url. (e.g., When you wish to run a\n  custom JavaScript behavior instead.) Use event delegation for handling\n  bubbling events. It can keep the code simpler, (especially when adding or\n  removing elements), and saves some memory. ## Implementing Styles You can add\n  custom styles in the *packages/ExtAddonHref/sass/* folder. Create the\n  following folders/files: *src/component/Href.scss* #### The Sass Namespace\n  The Sass namespacing settings are correctly configured by default, and it\n  points to the Ext JS framework structure. However it is possible to edit\n  these mappings in the package.json file: <code>&quot;sass&quot;: {\n    &quot;namespace&quot;: &quot;Ext&quot;, //MyApp or ExtAddonHref\n    &quot;etc&quot;: &quot;${package.dir}/sass/etc/all.scss&quot;,\n    &quot;var&quot;: &quot;${package.dir}/sass/var&quot;, &quot;src&quot;:\n    &quot;${package.dir}/sass/src&quot; },</code> The namespace Ext, tells\n  Sencha, that the Sass files for the package are mapping the folder structure\n  of the framework. (For example Ext.button.Button → src/button/Button.scss).\n  You could change the namespace, to the namespace of your app or your package.\n  The other settings, are to configure where the var and source folders are\n  located in the package. Before Ext JS 5, you had to make this setting in the\n  hidden *packages/ExtHrefComponent/.sencha/package/sencha.cfg* file. It had\n  the setting: <code>package.sass.namespace=Ext //which could be set to:\n    package.sass.namespace=ExtAddonHref</code> **Implementing Styles** Write\n  the style code. This code will implement a little “external link” icon after\n  external hyperlinks: <a href=\"https://gist.github.com/savelee/410bdfcf1b98608aa3d17c5ad700b49f\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/410bdfcf1b98608aa3d17c5ad700b49f</a>\n  Do not mix app specific styling, like colors, fonts etc. in your package. You\n  want to reuse your package and those styles belongs to the application\n  stylesheet. ## Implementing Assets You can add custom images, fonts and icons\n  in the *packages/ExtAddonHref/resources/* folder. For the ExtAddonHref\n  component, I’ve used an icon font, that I copied to the\n  *packages/ExtAddonHref/resources/icons* folder. ## Consume The Package Open\n  your application *app.json* and add the new package to your requires array:\n  <a href=\"https://gist.github.com/savelee/51ce3be80ab174ae3e24df4731050ce7\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/51ce3be80ab174ae3e24df4731050ce7</a>\n  Refresh your application to force your application to detect the new package.\n  `sencha app refresh` Build your app to compile the Sass styles and to copy\n  over the resources to the production folder: `sencha app build` ## Implement\n  The Package In Your App The last step is to nest the custom component in your\n  application: For example: <a href=\"https://gist.github.com/savelee/ba45471a77d08b5b9c5f72d7041c69bf\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/ba45471a77d08b5b9c5f72d7041c69bf</a>\n  It is also possible to build the package only, and publish it to a local\n  repository. To build the package: `sencha package build` This produces a\n  *build* folder inside the package. This is needed by applications when they\n  are running in “dev mode” (without being compiled). It also produces\n  *mypackage.pkg* file in your workspace’s build folder. The mypackage.pkg file\n  is used to add the package to your local repository. This pkg file is not\n  placed in the package’s build folder because: <em>It is a ZIP file of your\n    package folder. </em>It is not needed by users of the package. In case you\n  want to setup a local repository, see this guide: [<a href=\"http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_creating\\_packages.html\\](http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_creating\\_packages.html)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_creating\\_packages.html\\](http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_creating\\_packages.html)</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Sencha recently announced the Angular 2 and React bridges. <em>[<a href=\"https://www.sencha.com/blog/first-look-ext-js-bridge-to-angular-2/\\](https://www.sencha.com/blog/first-look-ext-js-bridge-to-angular-2/)\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/blog/first-look-ext-js-bridge-to-angular-2/\\](https://www.sencha.com/blog/first-look-ext-js-bridge-to-angular-2/)</a>\n  </em>[<a href=\"https://www.sencha.com/blog/react-and-ext-js-secret-besties/\\](https://www.sencha.com/blog/react-and-ext-js-secret-besties/)\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/blog/react-and-ext-js-secret-besties/\\](https://www.sencha.com/blog/react-and-ext-js-secret-besties/)</a>\n  These are great solutions for Angular 2 or React developers, which do want to\n  make use of the robust Sencha components.(For what’s worth; the Angular 2 and\n  React frameworks don’t contain components. These are just single page app\n  frameworks which sets up the architecture pattern. In comparison with Ext JS,\n  Sencha has an architecture pattern, a DOM manipulation framework, a data\n  package and visual UI components (with themes)). With such a bridge, you can\n  integrate Ext JS components like grids and trees within your Angular 2 or\n  React application. Lately, I have been asked a lot: <em>“What about the other\n    way around?”</em> Integrating an Angular or React component within a Sencha\n  Ext JS app? This question contains a lot of confusion. First of all, it’s not\n  possible (it’s an anti pattern) to integrate Angular 2 / React within an Ext\n  JS app. Why would you do so? Again, both frameworks don’t contain any UI\n  components and themes. It’s just the architectural pattern, which Ext JS has\n  as well. Angular 2 / React components basically exist of HTML / DOM snippets\n  with CSS stylesheet code. Maybe you found this great slideshow component\n  online. A custom HTML component with an essential StyleSheet. You need this\n  component in your Sencha app. So, let’s change the question: <em>“Can I\n    integrate custom HTML in my Sencha App?”</em> or <em>“Can I create custom\n    Sencha components?”</em>. That answer is: **YES**, You certainly can do.\n  This is actually what our Sencha developers do, to create UI components… ##\n  About Custom Reusable UI Components Ext JS ships with many, many components.\n  There are times, however, when the components are just a little bit different\n  than what you were looking for. Since Ext JS is just JavaScript with HTML and\n  CSS, it is possible to create your own Ext components instead. We call these\n  *custom components*. You may need custom components, to create custom\n  experiences. Custom Components in Ext JS are **packages**. Packages are like\n  themes, you can share code within your own projects. For example, you could\n  create your own library with Sencha custom components, and reuse it in all\n  your projects! A custom UI component often exist of more files than just one\n  single JavaScript file. Maybe it mixes multiple JavaScript classes inside,\n  and maybe it also contains images, fonts or specific styling. Where do I\n  store those files? Do I mix it within my app-specific Sass stylesheet and\n  resources folder? Hmmm… That makes this custom UI component less compact and\n  hard to reuse. The better way is to share code through *packages*. This\n  enables you to share packages: ### Locally One use of packages is simply to\n  hold code or themes that are available for multiple applications in a\n  workspace. These packages don’t need to be distributed (beyond source\n  control) to provide value to your development. ### Remotely You can download\n  packages remotely from the command-line. The set of available packages are\n  listed in the *catalog* on the command-line. You can display the contents of\n  the global catalog using this command: `sencha package list` You can download\n  these packages with the following command; `sencha package install` It will\n  be downloaded to your Cmd **extensions** folder: For example: <em>/Users/leeboonstra/bin/Sencha/Cmd/6.x/extensions/</em>\n  ### Sencha Market It is also possible to share your custom components via the\n  Sencha Market. This does not require packages. You can also share ux folders.\n  [<a href=\"http://market.sencha.com\\](http://market.sencha.com)\" target=\"_blank\" rel=\"noopener\">http://market.sencha.com\\](http://market.sencha.com)</a>\n  For more information about packages, please check this guide: [<a href=\"http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_packages.html\\]\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_packages.html\\]</a>(<a href=\"http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_packages.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_packages.html</a>\n  ) # Tutorial: Create a custom UI Component To exactly explain how custom UI\n  components are build, let’s create an example. This tutorial will show you\n  how you can create a custom, ..wait for it.. “Hyperlink Component”. Maybe not\n  the most exciting custom component. (I will leave that up to you.) But it’s\n  simple enough, to quickly go through a couple steps, so you will understand\n  what you will need to do. I’ve created in the past many custom components\n  like these. Think about fancy toggle buttons. Nested Lists and slideshows.\n  For all these examples, I often just googled online, to find a tutorial or\n  custom HTML component, which I could wrap in a Sencha component. The beauty\n  of these components is the CSS stylesheet code, that belongs to a particular\n  HTML snippet. Within Ext JS, we deal with a Sencha layout system. We write\n  JavaScript code, via the Ext JS API the Sencha way. The browser reads these\n  JavaScript instructions, and generates the DOM tree (like HTML representation\n  within the browser memory), because of the Sencha themes (StyleSheets), your\n  components look like nice UI components. So what we need to do here, is to\n  “wrap”, your HTML snippets within a Sencha components, so it can make use of\n  the Sencha API and the Sencha layout system! The good thing is. When you are\n  a Sencha developer, you will probably know: <em>How the Sencha Class System\n    works </em>How Ext.XTemplate works <em>How event listeners work </em>How to\n  theme/style with Sass/CSS Custom UI components, inherit from existing Sencha\n  components. If you know the Ext JS essentials, you can create custom UI\n  components too! Let’s give it a try! ## Generate a Package We will start with\n  generating a package from the command-line, which will generate the *package*\n  folder structure. You can execute the following command from your project\n  folder: `sencha generate package -type code ExtAddonHref` This will create\n  the following folder structure: <code>packages/ foo/ # Top-level folder for\n    the package .sencha/ package/ sencha.cfg # Sencha Cmd configuration for\n    this package build-impl.xml # Generated build script for package plugin.xml\n    # Sencha Cmd plugin for this package codegen.json # Data to support 3-way\n    merge in code generator docs/ # Documentation for the package screenshots/\n    # Screenshots for Sencha Market licenses/ # License agreement overrides/ #\n    Folder for automatically activated overrides resources/ # Static resources\n    (typically has images folder) sass/ # Container for Sass code etc/ #\n    General, non-component oriented Sass src/ # Sass rules and mixins named by\n    component var/ # Sass variables named by component src/ # Folder for normal\n    JavaScript code build.xml # Build script (called by \\`sencha package\n    build\\`) package.json # Package descriptor Readme.md # High-level\n    information about this package</code> Your *package.json* file, contains\n  the package configuration. It will look similar to this: <a href=\"https://gist.github.com/savelee/9c418ff4e7cecb96541ce464810e3288\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/9c418ff4e7cecb96541ce464810e3288</a>\n  Packages published by Sencha will use names with the following prefixes: <em>sencha-</em>\n  <em>ext-</em> <em>touch-</em> <em>cmd-</em> All package names beginning with\n  the above prefixes are reserved by Sencha with respect to the Sencha Package\n  Repository. It is recommended that you avoid conflicting with these names\n  even if you disconnect from the Sencha Package Repository. *Versions* These\n  versions are used when resolving package requirements. Each release of a\n  package should have an updated version number. The meaning assigned to\n  version numbers by Sencha may help you: x.y.z.b x : Major release number\n  (large, impacting changes and features) y : Minor release number (new\n  functionality but few if any breaking changes) z : Patch release number (bug\n  fix / maintenance release - goal of 100% compatible) b : Build number\n  (assigned by build system) ## Extend from a Sencha Component Create in\n  *packages/ExtAddonHref/src*, the following file and folder:\n  **component/Href.js** <code>Ext.define(&#39;ExtAddonHref.component.Href&#39;,\n    { //todo custom logics });</code> The ExtHrefComponent will be pretty\n  basic. We give it the alias name: “extaddonhref”, and we will only inherit\n  from Ext.Component: <code>Ext.define(&#39;ExtAddonHref.component.Href&#39;, {\n    xtype: &#39;extaddonhref&#39;, extend: &#39;Ext.Component&#39;, });</code>\n  As a rule of thumb: You should extend from Sencha components that are the\n  most similar to your new component. Features not being used will cost you in\n  additional file size. So, for example, if I want to create a custom slideshow\n  component, I have to deal with a store that contains images, and every slide\n  should have it’s own HTML. In that case I would extend from `Ext.view.View`.\n  When I create a custom togglefield, it pretty similar to a checkbox, so I\n  would extend from `Ext.form.field.Checkbox`, and so on. ## What Will Be\n  Configurable? The next step, is that you will need to decide what will be\n  configurable. For an hyperlink component, you will need at least an *url* and\n  a *title*. Maybe also a link *target*, an *anchorName*, *preventDefault*\n  behaviour and an *external icon* to show if the hyperlink is external. <a href=\"https://gist.github.com/savelee/cbc6ae98531ee92192ec1f723fc697c8\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/cbc6ae98531ee92192ec1f723fc697c8</a>\n  ## Implementing a tpl Now that we know what needs to be configurable for the\n  end user, let’s create the HTML snippet. Every Ext JS component, makes use of\n  an XTemplate: [<a href=\"http://docs.sencha.com/extjs/6.0.0/classic/Ext.Template.html\\](http://docs.sencha.com/extjs/6.0.0/classic/Ext.Template.html)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/extjs/6.0.0/classic/Ext.Template.html\\](http://docs.sencha.com/extjs/6.0.0/classic/Ext.Template.html)</a>.\n  Inject the data based on the calling routine: <a href=\"https://gist.github.com/savelee/9c41aac37b34468f68a8bbd243807e44\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/9c41aac37b34468f68a8bbd243807e44</a>\n  Instead of the *tpl* you could also use the *renderTpl* instead. It separates\n  the render part from init. You will need a *bufferRender* function to apply\n  the *renderData* to the template. <a href=\"https://gist.github.com/savelee/6d65fb7b2c22dbd46de38f812750c024\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/6d65fb7b2c22dbd46de38f812750c024</a>\n  ## Implementing Event Handling The hyperlink component will listen to both\n  *click* and *dblClick* events. <a href=\"https://gist.github.com/savelee/afd0021be8497045bafcf0fcdac4e734\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/afd0021be8497045bafcf0fcdac4e734</a>\n  You will add the two event listeners, that fire the events from a DOM\n  element. We will also implement some logic to switch off the default browser\n  behavior. So the browser won’t visit the url. (e.g., When you wish to run a\n  custom JavaScript behavior instead.) Use event delegation for handling\n  bubbling events. It can keep the code simpler, (especially when adding or\n  removing elements), and saves some memory. ## Implementing Styles You can add\n  custom styles in the *packages/ExtAddonHref/sass/* folder. Create the\n  following folders/files: *src/component/Href.scss* #### The Sass Namespace\n  The Sass namespacing settings are correctly configured by default, and it\n  points to the Ext JS framework structure. However it is possible to edit\n  these mappings in the package.json file: <code>&quot;sass&quot;: {\n    &quot;namespace&quot;: &quot;Ext&quot;, //MyApp or ExtAddonHref\n    &quot;etc&quot;: &quot;${package.dir}/sass/etc/all.scss&quot;,\n    &quot;var&quot;: &quot;${package.dir}/sass/var&quot;, &quot;src&quot;:\n    &quot;${package.dir}/sass/src&quot; },</code> The namespace Ext, tells\n  Sencha, that the Sass files for the package are mapping the folder structure\n  of the framework. (For example Ext.button.Button → src/button/Button.scss).\n  You could change the namespace, to the namespace of your app or your package.\n  The other settings, are to configure where the var and source folders are\n  located in the package. Before Ext JS 5, you had to make this setting in the\n  hidden *packages/ExtHrefComponent/.sencha/package/sencha.cfg* file. It had\n  the setting: <code>package.sass.namespace=Ext //which could be set to:\n    package.sass.namespace=ExtAddonHref</code> **Implementing Styles** Write\n  the style code. This code will implement a little “external link” icon after\n  external hyperlinks: <a href=\"https://gist.github.com/savelee/410bdfcf1b98608aa3d17c5ad700b49f\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/410bdfcf1b98608aa3d17c5ad700b49f</a>\n  Do not mix app specific styling, like colors, fonts etc. in your package. You\n  want to reuse your package and those styles belongs to the application\n  stylesheet. ## Implementing Assets You can add custom images, fonts and icons\n  in the *packages/ExtAddonHref/resources/* folder. For the ExtAddonHref\n  component, I’ve used an icon font, that I copied to the\n  *packages/ExtAddonHref/resources/icons* folder. ## Consume The Package Open\n  your application *app.json* and add the new package to your requires array:\n  <a href=\"https://gist.github.com/savelee/51ce3be80ab174ae3e24df4731050ce7\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/51ce3be80ab174ae3e24df4731050ce7</a>\n  Refresh your application to force your application to detect the new package.\n  `sencha app refresh` Build your app to compile the Sass styles and to copy\n  over the resources to the production folder: `sencha app build` ## Implement\n  The Package In Your App The last step is to nest the custom component in your\n  application: For example: <a href=\"https://gist.github.com/savelee/ba45471a77d08b5b9c5f72d7041c69bf\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/ba45471a77d08b5b9c5f72d7041c69bf</a>\n  It is also possible to build the package only, and publish it to a local\n  repository. To build the package: `sencha package build` This produces a\n  *build* folder inside the package. This is needed by applications when they\n  are running in “dev mode” (without being compiled). It also produces\n  *mypackage.pkg* file in your workspace’s build folder. The mypackage.pkg file\n  is used to add the package to your local repository. This pkg file is not\n  placed in the package’s build folder because: <em>It is a ZIP file of your\n    package folder. </em>It is not needed by users of the package. In case you\n  want to setup a local repository, see this guide: [<a href=\"http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_creating\\_packages.html\\](http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_creating\\_packages.html)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_creating\\_packages.html\\](http://docs.sencha.com/cmd/6.x/cmd\\_packages/cmd\\_creating\\_packages.html)</a></p>\n"},{"title":"Help! I have to present. How to rock it?","url":"1285.html","id":"1285","date":"2016-04-23T15:00:11.000Z","_content":"\nPublic speaking. Whether it’s at a (tech) conference, a training for a group of people, or an internal presentation for your colleagues or boss. It can be scary. Since I work for Sencha, I’ve spoken for a crowd, now maybe a hundred of times. I’ve developed myself a real “speaker voice”. I speak loud from out of my stomach, I’m enthusiastic and I try to teach and entertain. I wasn’t always that good in it. Actually, I was a very shy person before I worked for Sencha. My hair was covered over my eyes, I didn’t walk up straight and I would never chit talk to strangers. I remembered, when I was kid and I would go to theme park with my grandma, she was always talking to random kids. It made me feel ashamed. I’m a total different person now. I learned how to speak loud in front of lots of people. I learned it by doing. I know how to rock the stage and I can show you the tricks what helped me. So take a deep breath, and read with me further… ###\\*\\*Be prepared\\*\\* Prepare your presentation well and at least the half of the presentation will be good. When you are presenting at a tech conference, you will probably bring some slides with you. Preparing good slides can take some time but it really helps you with bringing your message over to the crowd. * Give your story or slide deck a “flow”. Start with an easy introduction and slowly move to more advanced topics. Think about it as story telling. * Is it an international conference? Are people attending from outside your country? Prepare your presentation in English, so everyone can enjoy. * Don’t put whole book chapters on a slide. You want people to be focused on you and your story, so limit slides to pictures and bullets. Also make sure the font-size is big enough to read for the people that are sitting in the back. * Make sure your slides are pleasant to look at. It shouldn’t look like a PowerPoint slidedeck, it should look like a “real” presentation. So start using images. (Pictures say more than words.) Also, think about headers, font and color choice. * Start with an introduction about yourself, and why you are here. End with a “thank you” slide and take questions. (I usually plan 10-15min for those). The “thank you” slide should contain your contact details. (I usually take my fullname, email address, my personal website and Twitter handle. I also share my speakerdeck.com URL, where I will host my slidedeck for after the show). When showing the last slide, thank your audience and pause for applause. * I always prefer to present from my own machine. You can setup your PowerPoint or Keynote, with presenter configurations, which include presenter notes, a timer, current slide and next slide. Run a Tech-check at the area where you are speaking, before your presentation starts, to make sure you are using the correct screen resolution, and to test if your audio is working fine. * When presenting from your own machine, bring the right equipment. This includes a power adapter and a working clicker (with laser?). Are you a Mac user? Don’t forget to bring the right cables to support HDMI and/or VGA input. * Don’t assume that everyone understands every concept that you are introducing. I received this tip while writing my book for O’Reilly. You not always know your audience. They might be an expert as well or maybe not. Maybe they are no developers at all. This means every keyword or new concept that you introduce, requires explanation (in baby language). Explaining stuff, works best when you give people examples that they recognize. When keywords or concepts are important, repeat them over and over again. * When showing code, make sure your code is readable. Make short lines of code in a decent code-font and size. When I am programming, I love light code on dark backgrounds. Nowadays it’s the default color scheme for editors like Atom, but mind you, dark color schemes are not really great when a projector projects it on a white wall. Therefore switch your code schemes to white backgrounds. When demoing code in editors, make sure you know the shortcuts for zooming in on text. * When running demos, make sure they all work. At conferences the WIFI connection is always poor and slow. Ideally all your demos work in offline mode. When I demo examples in a browser, I make sure that I have a browser open in the background, with each example running in its own tab. You don’t want to look stupid, when things don’t work. https://www.youtube.com/watch?v=IW7Rqwwth84 * Take audience questions: “…and now it’s time for some questions…” Often nobody sticks out his hand right away. Maybe because they are shy, or don’t want to show others that they don’t understand something. Pause. Raise your own hand in the air and let them feel comfortable. “...Come-on guys, I am sure there must be one question.”. You will see after the very first question, there will be more. Try to repeat or rephrase the question, so everyone else can hear it too. I believe I have heard every possible Sencha question at least once. However, I am not a walking Wikipedia. It’s not a shame if you don’t know something. Just be honest. Tell them: “I don’t know the answer for now, but lets look into this together after the talk.” ###\\*\\*Be confident\\*\\* Once you are well prepared, it’s not difficult to feel confident. Being confident and having your presentation well prepared, makes 70% of a good presentation, so you only need to be there and tell your story! :) You have been asked to present at a conference, or to give training. So obviously you are good at something. You are the expert. Stand up straight and keep remember this. What also helps for me, is to dress properly and rehearse my presentation, multiple times. So I know exactly which slide comes after, and it brings me in my ideal speaker flow. And last but not least, just be on time. You don’t want to feel rushed or stressed. You probably want to run a Tech check beforehand, and it’s very social to watch some of the previous speakers. ###\\*\\*Make it personal\\*\\* What helped me to feel confident is by making my presentation personal and interactive. Start with a short biography and tell everyone who you are. What you have done, and what you like. You don’t need to give a whole life story, but just some things that are relevant for everyone to know. When I am presenting for a small group, I just make a round, and ask everyone to tell something about himself or herself and to tell something funny. Telling something personal, begins to open up people. That way, people are not shy to ask questions. They feel connected, and you have their full attention. ###\\*\\*Make a joke\\*\\* Make a joke. You don’t need to be a comedian, but a simple laugh and smile at a time, makes people feel positive. It’s not difficult to come up with a funny reference. Know your audience. Are you presenting in front of other developers? Most of the developers like the same things that you do. Like; movies, superheroes, comics, videogames... Even if your audience doesn’t understand anything at all, from your presentation, they will leave and think: “Well, at least I had a good time!” ###\\*\\*And finally...\\*\\* Public speaking requires practice, you will become better over time. I have one final tip: “Share the happiness!”. Try to enjoy your speaking moment. When you enjoy it, other people with notice that, and they will enjoy too. I think that’s probably the magic solution here. Talk about a topic you like and share your passion with others! Want to speak at a conference? The SenchaCon 2016 team is hard at work on building an incredible agenda for SenchaCon 2016. We’re looking for great content from our customers and partners about experiences with using Sencha frameworks and tools. We’ve put together all of the benefits, track descriptions, requirements and process details. The theme of this year’s conference is Winning with the Modern Web, and we will be exploring innovations and best practices around designing, developing, and testing HTML5 applications. There are guidelines available: \\[https://www.senchacon.com/speaker-guidelines\\](https://www.senchacon.com/speaker-guidelines) And you can submit your paper here: \\[https://www.senchacon.com/speaker-submission-form/\\](https://www.senchacon.com/speaker-submission-form/)","source":"_drafts/how-tos/help-i-have-to-present-how-to-rock-it.md","raw":"---\ntitle: Help! I have to present. How to rock it?\ntags:\n  - how to present\n  - killer presentations\n  - presentation\n  - public speaking\n  - speaker\n  - stage\nurl: 1285.html\nid: 1285\ncategories:\n  - Sencha\ndate: 2016-04-23 17:00:11\n---\n\nPublic speaking. Whether it’s at a (tech) conference, a training for a group of people, or an internal presentation for your colleagues or boss. It can be scary. Since I work for Sencha, I’ve spoken for a crowd, now maybe a hundred of times. I’ve developed myself a real “speaker voice”. I speak loud from out of my stomach, I’m enthusiastic and I try to teach and entertain. I wasn’t always that good in it. Actually, I was a very shy person before I worked for Sencha. My hair was covered over my eyes, I didn’t walk up straight and I would never chit talk to strangers. I remembered, when I was kid and I would go to theme park with my grandma, she was always talking to random kids. It made me feel ashamed. I’m a total different person now. I learned how to speak loud in front of lots of people. I learned it by doing. I know how to rock the stage and I can show you the tricks what helped me. So take a deep breath, and read with me further… ###\\*\\*Be prepared\\*\\* Prepare your presentation well and at least the half of the presentation will be good. When you are presenting at a tech conference, you will probably bring some slides with you. Preparing good slides can take some time but it really helps you with bringing your message over to the crowd. * Give your story or slide deck a “flow”. Start with an easy introduction and slowly move to more advanced topics. Think about it as story telling. * Is it an international conference? Are people attending from outside your country? Prepare your presentation in English, so everyone can enjoy. * Don’t put whole book chapters on a slide. You want people to be focused on you and your story, so limit slides to pictures and bullets. Also make sure the font-size is big enough to read for the people that are sitting in the back. * Make sure your slides are pleasant to look at. It shouldn’t look like a PowerPoint slidedeck, it should look like a “real” presentation. So start using images. (Pictures say more than words.) Also, think about headers, font and color choice. * Start with an introduction about yourself, and why you are here. End with a “thank you” slide and take questions. (I usually plan 10-15min for those). The “thank you” slide should contain your contact details. (I usually take my fullname, email address, my personal website and Twitter handle. I also share my speakerdeck.com URL, where I will host my slidedeck for after the show). When showing the last slide, thank your audience and pause for applause. * I always prefer to present from my own machine. You can setup your PowerPoint or Keynote, with presenter configurations, which include presenter notes, a timer, current slide and next slide. Run a Tech-check at the area where you are speaking, before your presentation starts, to make sure you are using the correct screen resolution, and to test if your audio is working fine. * When presenting from your own machine, bring the right equipment. This includes a power adapter and a working clicker (with laser?). Are you a Mac user? Don’t forget to bring the right cables to support HDMI and/or VGA input. * Don’t assume that everyone understands every concept that you are introducing. I received this tip while writing my book for O’Reilly. You not always know your audience. They might be an expert as well or maybe not. Maybe they are no developers at all. This means every keyword or new concept that you introduce, requires explanation (in baby language). Explaining stuff, works best when you give people examples that they recognize. When keywords or concepts are important, repeat them over and over again. * When showing code, make sure your code is readable. Make short lines of code in a decent code-font and size. When I am programming, I love light code on dark backgrounds. Nowadays it’s the default color scheme for editors like Atom, but mind you, dark color schemes are not really great when a projector projects it on a white wall. Therefore switch your code schemes to white backgrounds. When demoing code in editors, make sure you know the shortcuts for zooming in on text. * When running demos, make sure they all work. At conferences the WIFI connection is always poor and slow. Ideally all your demos work in offline mode. When I demo examples in a browser, I make sure that I have a browser open in the background, with each example running in its own tab. You don’t want to look stupid, when things don’t work. https://www.youtube.com/watch?v=IW7Rqwwth84 * Take audience questions: “…and now it’s time for some questions…” Often nobody sticks out his hand right away. Maybe because they are shy, or don’t want to show others that they don’t understand something. Pause. Raise your own hand in the air and let them feel comfortable. “...Come-on guys, I am sure there must be one question.”. You will see after the very first question, there will be more. Try to repeat or rephrase the question, so everyone else can hear it too. I believe I have heard every possible Sencha question at least once. However, I am not a walking Wikipedia. It’s not a shame if you don’t know something. Just be honest. Tell them: “I don’t know the answer for now, but lets look into this together after the talk.” ###\\*\\*Be confident\\*\\* Once you are well prepared, it’s not difficult to feel confident. Being confident and having your presentation well prepared, makes 70% of a good presentation, so you only need to be there and tell your story! :) You have been asked to present at a conference, or to give training. So obviously you are good at something. You are the expert. Stand up straight and keep remember this. What also helps for me, is to dress properly and rehearse my presentation, multiple times. So I know exactly which slide comes after, and it brings me in my ideal speaker flow. And last but not least, just be on time. You don’t want to feel rushed or stressed. You probably want to run a Tech check beforehand, and it’s very social to watch some of the previous speakers. ###\\*\\*Make it personal\\*\\* What helped me to feel confident is by making my presentation personal and interactive. Start with a short biography and tell everyone who you are. What you have done, and what you like. You don’t need to give a whole life story, but just some things that are relevant for everyone to know. When I am presenting for a small group, I just make a round, and ask everyone to tell something about himself or herself and to tell something funny. Telling something personal, begins to open up people. That way, people are not shy to ask questions. They feel connected, and you have their full attention. ###\\*\\*Make a joke\\*\\* Make a joke. You don’t need to be a comedian, but a simple laugh and smile at a time, makes people feel positive. It’s not difficult to come up with a funny reference. Know your audience. Are you presenting in front of other developers? Most of the developers like the same things that you do. Like; movies, superheroes, comics, videogames... Even if your audience doesn’t understand anything at all, from your presentation, they will leave and think: “Well, at least I had a good time!” ###\\*\\*And finally...\\*\\* Public speaking requires practice, you will become better over time. I have one final tip: “Share the happiness!”. Try to enjoy your speaking moment. When you enjoy it, other people with notice that, and they will enjoy too. I think that’s probably the magic solution here. Talk about a topic you like and share your passion with others! Want to speak at a conference? The SenchaCon 2016 team is hard at work on building an incredible agenda for SenchaCon 2016. We’re looking for great content from our customers and partners about experiences with using Sencha frameworks and tools. We’ve put together all of the benefits, track descriptions, requirements and process details. The theme of this year’s conference is Winning with the Modern Web, and we will be exploring innovations and best practices around designing, developing, and testing HTML5 applications. There are guidelines available: \\[https://www.senchacon.com/speaker-guidelines\\](https://www.senchacon.com/speaker-guidelines) And you can submit your paper here: \\[https://www.senchacon.com/speaker-submission-form/\\](https://www.senchacon.com/speaker-submission-form/)","slug":"how-tos/help-i-have-to-present-how-to-rock-it","published":0,"updated":"2018-11-30T13:59:17.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncz300zxkif58x7dhvrc","content":"<p>Public speaking. Whether it’s at a (tech) conference, a training for a group\n  of people, or an internal presentation for your colleagues or boss. It can be\n  scary. Since I work for Sencha, I’ve spoken for a crowd, now maybe a hundred\n  of times. I’ve developed myself a real “speaker voice”. I speak loud from out\n  of my stomach, I’m enthusiastic and I try to teach and entertain. I wasn’t\n  always that good in it. Actually, I was a very shy person before I worked for\n  Sencha. My hair was covered over my eyes, I didn’t walk up straight and I\n  would never chit talk to strangers. I remembered, when I was kid and I would\n  go to theme park with my grandma, she was always talking to random kids. It\n  made me feel ashamed. I’m a total different person now. I learned how to\n  speak loud in front of lots of people. I learned it by doing. I know how to\n  rock the stage and I can show you the tricks what helped me. So take a deep\n  breath, and read with me further… ###**Be prepared** Prepare your\n  presentation well and at least the half of the presentation will be good.\n  When you are presenting at a tech conference, you will probably bring some\n  slides with you. Preparing good slides can take some time but it really helps\n  you with bringing your message over to the crowd. <em>Give your story or\n    slide deck a “flow”. Start with an easy introduction and slowly move to\n    more advanced topics. Think about it as story telling. </em>Is it an\n  international conference? Are people attending from outside your country?\n  Prepare your presentation in English, so everyone can enjoy. <em>Don’t put\n    whole book chapters on a slide. You want people to be focused on you and\n    your story, so limit slides to pictures and bullets. Also make sure the\n    font-size is big enough to read for the people that are sitting in the\n    back. </em>Make sure your slides are pleasant to look at. It shouldn’t look\n  like a PowerPoint slidedeck, it should look like a “real” presentation. So\n  start using images. (Pictures say more than words.) Also, think about\n  headers, font and color choice. <em>Start with an introduction about\n    yourself, and why you are here. End with a “thank you” slide and take\n    questions. (I usually plan 10-15min for those). The “thank you” slide\n    should contain your contact details. (I usually take my fullname, email\n    address, my personal website and Twitter handle. I also share my\n    speakerdeck.com URL, where I will host my slidedeck for after the show).\n    When showing the last slide, thank your audience and pause for applause.\n  </em>I always prefer to present from my own machine. You can setup your\n  PowerPoint or Keynote, with presenter configurations, which include presenter\n  notes, a timer, current slide and next slide. Run a Tech-check at the area\n  where you are speaking, before your presentation starts, to make sure you are\n  using the correct screen resolution, and to test if your audio is working\n  fine. <em>When presenting from your own machine, bring the right equipment.\n    This includes a power adapter and a working clicker (with laser?). Are you\n    a Mac user? Don’t forget to bring the right cables to support HDMI and/or\n    VGA input. </em>Don’t assume that everyone understands every concept that\n  you are introducing. I received this tip while writing my book for O’Reilly.\n  You not always know your audience. They might be an expert as well or maybe\n  not. Maybe they are no developers at all. This means every keyword or new\n  concept that you introduce, requires explanation (in baby language).\n  Explaining stuff, works best when you give people examples that they\n  recognize. When keywords or concepts are important, repeat them over and over\n  again. <em>When showing code, make sure your code is readable. Make short\n    lines of code in a decent code-font and size. When I am programming, I love\n    light code on dark backgrounds. Nowadays it’s the default color scheme for\n    editors like Atom, but mind you, dark color schemes are not really great\n    when a projector projects it on a white wall. Therefore switch your code\n    schemes to white backgrounds. When demoing code in editors, make sure you\n    know the shortcuts for zooming in on text. </em>When running demos, make\n  sure they all work. At conferences the WIFI connection is always poor and\n  slow. Ideally all your demos work in offline mode. When I demo examples in a\n  browser, I make sure that I have a browser open in the background, with each\n  example running in its own tab. You don’t want to look stupid, when things\n  don’t work. <a href=\"https://www.youtube.com/watch?v=IW7Rqwwth84\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=IW7Rqwwth84</a>\n  <em>Take audience questions: “…and now it’s time for some questions…” Often\n    nobody sticks out his hand right away. Maybe because they are shy, or don’t\n    want to show others that they don’t understand something. Pause. Raise your\n    own hand in the air and let them feel comfortable. “…Come-on guys, I am\n    sure there must be one question.”. You will see after the very first\n    question, there will be more. Try to repeat or rephrase the question, so\n    everyone else can hear it too. I believe I have heard every possible Sencha\n    question at least once. However, I am not a walking Wikipedia. It’s not a\n    shame if you don’t know something. Just be honest. Tell them: “I don’t know\n    the answer for now, but lets look into this together after the talk.” ###\\</em>*Be\n  confident** Once you are well prepared, it’s not difficult to feel confident.\n  Being confident and having your presentation well prepared, makes 70% of a\n  good presentation, so you only need to be there and tell your story! :) You\n  have been asked to present at a conference, or to give training. So obviously\n  you are good at something. You are the expert. Stand up straight and keep\n  remember this. What also helps for me, is to dress properly and rehearse my\n  presentation, multiple times. So I know exactly which slide comes after, and\n  it brings me in my ideal speaker flow. And last but not least, just be on\n  time. You don’t want to feel rushed or stressed. You probably want to run a\n  Tech check beforehand, and it’s very social to watch some of the previous\n  speakers. ###**Make it personal** What helped me to feel confident is by\n  making my presentation personal and interactive. Start with a short biography\n  and tell everyone who you are. What you have done, and what you like. You\n  don’t need to give a whole life story, but just some things that are relevant\n  for everyone to know. When I am presenting for a small group, I just make a\n  round, and ask everyone to tell something about himself or herself and to\n  tell something funny. Telling something personal, begins to open up people.\n  That way, people are not shy to ask questions. They feel connected, and you\n  have their full attention. ###**Make a joke** Make a joke. You don’t need to\n  be a comedian, but a simple laugh and smile at a time, makes people feel\n  positive. It’s not difficult to come up with a funny reference. Know your\n  audience. Are you presenting in front of other developers? Most of the\n  developers like the same things that you do. Like; movies, superheroes,\n  comics, videogames… Even if your audience doesn’t understand anything at all,\n  from your presentation, they will leave and think: “Well, at least I had a\n  good time!” ###**And finally…** Public speaking requires practice, you will\n  become better over time. I have one final tip: “Share the happiness!”. Try to\n  enjoy your speaking moment. When you enjoy it, other people with notice that,\n  and they will enjoy too. I think that’s probably the magic solution here.\n  Talk about a topic you like and share your passion with others! Want to speak\n  at a conference? The SenchaCon 2016 team is hard at work on building an\n  incredible agenda for SenchaCon 2016. We’re looking for great content from\n  our customers and partners about experiences with using Sencha frameworks and\n  tools. We’ve put together all of the benefits, track descriptions,\n  requirements and process details. The theme of this year’s conference is\n  Winning with the Modern Web, and we will be exploring innovations and best\n  practices around designing, developing, and testing HTML5 applications. There\n  are guidelines available: [<a href=\"https://www.senchacon.com/speaker-guidelines\\](https://www.senchacon.com/speaker-guidelines)\" target=\"_blank\" rel=\"noopener\">https://www.senchacon.com/speaker-guidelines\\](https://www.senchacon.com/speaker-guidelines)</a>\n  And you can submit your paper here: [<a href=\"https://www.senchacon.com/speaker-submission-form/\\](https://www.senchacon.com/speaker-submission-form/)\" target=\"_blank\" rel=\"noopener\">https://www.senchacon.com/speaker-submission-form/\\](https://www.senchacon.com/speaker-submission-form/)</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Public speaking. Whether it’s at a (tech) conference, a training for a group\n  of people, or an internal presentation for your colleagues or boss. It can be\n  scary. Since I work for Sencha, I’ve spoken for a crowd, now maybe a hundred\n  of times. I’ve developed myself a real “speaker voice”. I speak loud from out\n  of my stomach, I’m enthusiastic and I try to teach and entertain. I wasn’t\n  always that good in it. Actually, I was a very shy person before I worked for\n  Sencha. My hair was covered over my eyes, I didn’t walk up straight and I\n  would never chit talk to strangers. I remembered, when I was kid and I would\n  go to theme park with my grandma, she was always talking to random kids. It\n  made me feel ashamed. I’m a total different person now. I learned how to\n  speak loud in front of lots of people. I learned it by doing. I know how to\n  rock the stage and I can show you the tricks what helped me. So take a deep\n  breath, and read with me further… ###**Be prepared** Prepare your\n  presentation well and at least the half of the presentation will be good.\n  When you are presenting at a tech conference, you will probably bring some\n  slides with you. Preparing good slides can take some time but it really helps\n  you with bringing your message over to the crowd. <em>Give your story or\n    slide deck a “flow”. Start with an easy introduction and slowly move to\n    more advanced topics. Think about it as story telling. </em>Is it an\n  international conference? Are people attending from outside your country?\n  Prepare your presentation in English, so everyone can enjoy. <em>Don’t put\n    whole book chapters on a slide. You want people to be focused on you and\n    your story, so limit slides to pictures and bullets. Also make sure the\n    font-size is big enough to read for the people that are sitting in the\n    back. </em>Make sure your slides are pleasant to look at. It shouldn’t look\n  like a PowerPoint slidedeck, it should look like a “real” presentation. So\n  start using images. (Pictures say more than words.) Also, think about\n  headers, font and color choice. <em>Start with an introduction about\n    yourself, and why you are here. End with a “thank you” slide and take\n    questions. (I usually plan 10-15min for those). The “thank you” slide\n    should contain your contact details. (I usually take my fullname, email\n    address, my personal website and Twitter handle. I also share my\n    speakerdeck.com URL, where I will host my slidedeck for after the show).\n    When showing the last slide, thank your audience and pause for applause.\n  </em>I always prefer to present from my own machine. You can setup your\n  PowerPoint or Keynote, with presenter configurations, which include presenter\n  notes, a timer, current slide and next slide. Run a Tech-check at the area\n  where you are speaking, before your presentation starts, to make sure you are\n  using the correct screen resolution, and to test if your audio is working\n  fine. <em>When presenting from your own machine, bring the right equipment.\n    This includes a power adapter and a working clicker (with laser?). Are you\n    a Mac user? Don’t forget to bring the right cables to support HDMI and/or\n    VGA input. </em>Don’t assume that everyone understands every concept that\n  you are introducing. I received this tip while writing my book for O’Reilly.\n  You not always know your audience. They might be an expert as well or maybe\n  not. Maybe they are no developers at all. This means every keyword or new\n  concept that you introduce, requires explanation (in baby language).\n  Explaining stuff, works best when you give people examples that they\n  recognize. When keywords or concepts are important, repeat them over and over\n  again. <em>When showing code, make sure your code is readable. Make short\n    lines of code in a decent code-font and size. When I am programming, I love\n    light code on dark backgrounds. Nowadays it’s the default color scheme for\n    editors like Atom, but mind you, dark color schemes are not really great\n    when a projector projects it on a white wall. Therefore switch your code\n    schemes to white backgrounds. When demoing code in editors, make sure you\n    know the shortcuts for zooming in on text. </em>When running demos, make\n  sure they all work. At conferences the WIFI connection is always poor and\n  slow. Ideally all your demos work in offline mode. When I demo examples in a\n  browser, I make sure that I have a browser open in the background, with each\n  example running in its own tab. You don’t want to look stupid, when things\n  don’t work. <a href=\"https://www.youtube.com/watch?v=IW7Rqwwth84\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=IW7Rqwwth84</a>\n  <em>Take audience questions: “…and now it’s time for some questions…” Often\n    nobody sticks out his hand right away. Maybe because they are shy, or don’t\n    want to show others that they don’t understand something. Pause. Raise your\n    own hand in the air and let them feel comfortable. “…Come-on guys, I am\n    sure there must be one question.”. You will see after the very first\n    question, there will be more. Try to repeat or rephrase the question, so\n    everyone else can hear it too. I believe I have heard every possible Sencha\n    question at least once. However, I am not a walking Wikipedia. It’s not a\n    shame if you don’t know something. Just be honest. Tell them: “I don’t know\n    the answer for now, but lets look into this together after the talk.” ###\\</em>*Be\n  confident** Once you are well prepared, it’s not difficult to feel confident.\n  Being confident and having your presentation well prepared, makes 70% of a\n  good presentation, so you only need to be there and tell your story! :) You\n  have been asked to present at a conference, or to give training. So obviously\n  you are good at something. You are the expert. Stand up straight and keep\n  remember this. What also helps for me, is to dress properly and rehearse my\n  presentation, multiple times. So I know exactly which slide comes after, and\n  it brings me in my ideal speaker flow. And last but not least, just be on\n  time. You don’t want to feel rushed or stressed. You probably want to run a\n  Tech check beforehand, and it’s very social to watch some of the previous\n  speakers. ###**Make it personal** What helped me to feel confident is by\n  making my presentation personal and interactive. Start with a short biography\n  and tell everyone who you are. What you have done, and what you like. You\n  don’t need to give a whole life story, but just some things that are relevant\n  for everyone to know. When I am presenting for a small group, I just make a\n  round, and ask everyone to tell something about himself or herself and to\n  tell something funny. Telling something personal, begins to open up people.\n  That way, people are not shy to ask questions. They feel connected, and you\n  have their full attention. ###**Make a joke** Make a joke. You don’t need to\n  be a comedian, but a simple laugh and smile at a time, makes people feel\n  positive. It’s not difficult to come up with a funny reference. Know your\n  audience. Are you presenting in front of other developers? Most of the\n  developers like the same things that you do. Like; movies, superheroes,\n  comics, videogames… Even if your audience doesn’t understand anything at all,\n  from your presentation, they will leave and think: “Well, at least I had a\n  good time!” ###**And finally…** Public speaking requires practice, you will\n  become better over time. I have one final tip: “Share the happiness!”. Try to\n  enjoy your speaking moment. When you enjoy it, other people with notice that,\n  and they will enjoy too. I think that’s probably the magic solution here.\n  Talk about a topic you like and share your passion with others! Want to speak\n  at a conference? The SenchaCon 2016 team is hard at work on building an\n  incredible agenda for SenchaCon 2016. We’re looking for great content from\n  our customers and partners about experiences with using Sencha frameworks and\n  tools. We’ve put together all of the benefits, track descriptions,\n  requirements and process details. The theme of this year’s conference is\n  Winning with the Modern Web, and we will be exploring innovations and best\n  practices around designing, developing, and testing HTML5 applications. There\n  are guidelines available: [<a href=\"https://www.senchacon.com/speaker-guidelines\\](https://www.senchacon.com/speaker-guidelines)\" target=\"_blank\" rel=\"noopener\">https://www.senchacon.com/speaker-guidelines\\](https://www.senchacon.com/speaker-guidelines)</a>\n  And you can submit your paper here: [<a href=\"https://www.senchacon.com/speaker-submission-form/\\](https://www.senchacon.com/speaker-submission-form/)\" target=\"_blank\" rel=\"noopener\">https://www.senchacon.com/speaker-submission-form/\\](https://www.senchacon.com/speaker-submission-form/)</a></p>\n"},{"title":"How to Create a Dark Ext JS Theme (part 2)","url":"694.html","id":"694","date":"2015-08-02T09:21:15.000Z","_content":"\nI’ve been showing you how to develop a fancy dark theme, which kind of looks like Spotify. In [Part 1](https://www.sencha.com/blog/how-to-create-a-dark-ext-js-theme-part-1/) of the article, you learned about Fashion, Sencha Inspector, Themes, and variables. In Part 2, I’ll focus on more advanced concepts including: making unique components with Ext JS UIs, CSS overrides, and how to incorporate custom fonts or icons.\n\nYou can use this tutorial to help you build your theme for the Sencha Application Theming Contest.  \nThe first prize winner gets $2,500!\n\n[Sign up now](http://pages.sencha.com/App-Theming-Contest-2015.html)\n\n### Custom CSS Rules and Mixins\n\nThere are a few more things I did in my Spotifext theme to make it look awesome. I wrote some CSS rules to animate the button hovers, used custom fonts, and created my own button and tab panel variants to give it a unique look.\n\nWith the variables I described earlier, you can change the overall look and feel of the application and all its components. But sometimes, you just want to make certain components unique. See the image below of my working Spotifinder app. You can see that the tab panel doesn’t look like the default Ext JS tabs. The buttons can be square or round, in the colors green or gray. I’m using Ext JS UIs, which are Sass mixins under the hood. A mixin is a block of CSS rules that can be re-used throughout an app.\n\nHere’s an example Sass mixin:\n\n@mixin my-border-radius($radius) {\n  -webkit-border-radius: $radius;\n     -moz-border-radius: $radius;\n      -ms-border-radius: $radius;\n          border-radius: $radius;\n}\n\nThe above Sass mixin can be used to create rounded corners. I need to write experimental browser prefixes, so I can support this CSS3 feature across all browsers. Instead of writing every CSS rule myself, I can just include the **my-border-radius** mixin and pass in an argument, so all the CSS rules will be available after compilation:\n\n.box { @include border-radius(10px); }\n\nIn the compiled CSS, it will look like this (but minified):\n\n.box {\n-webkit-border-radius: 10px;\n     -moz-border-radius: 10px;\n      -ms-border-radius: 10px;\n          border-radius: 10px;\n}\n\nSass mixins are a great concept that can be used in Ext JS as well. We call them UIs, and they’re basically skins. Ext JS includes out-of-the-box UIs. For example, in the modern toolkit, we have UIs for back buttons, round buttons, and more, and it provides UIs you can reuse with your own parameters.\n\nYou can find these mixins in the Sencha API Docs. For example, look at Ext.button.Button, you’ll see Sass Mixins in all different states for buttons. To implement these mixins, you’ll use @include, then the mixin name in Ext JS, and then pass in the arguments.\n\n[![Ext.button.Button](//cdn.sencha.com/img/20150721-theming-tutorial-part2-img1.png)](//cdn.sencha.com/img/20150721-theming-tutorial-part2-img1.png)\n\nTo create the nice rounded buttons, take a look [here](https://github.com/savelee/sencha-theming-tutorial/blob/master/packages/local/theme-spotifext/sass/src/button/Button.scss).\n\nI used the below mixin code to create a new “scale: small” button. For arguments, I passed in the UI name: “round”, which I used in my view as ui: `‘round’`), a font-weight, padding and a background color:\n\n@include extjs-button-small-ui(\n\t$ui: 'round',\n\t$font-weight: bold,\n\t$padding: 5px,\n\t$background-color: $highlight-color \n);\n\nYou might have noticed that the buttons are animated, and the tab panel that looks like Spotify is a lot different from the provided Ext JS mixins. Take a look at my **sass/src** folder. In this directory, I’ve written all Ext JS mixins and custom Sass rules.\n\n[![Buttons](//cdn.sencha.com/img/20150721-theming-tutorial-part2-img2b.png)](//cdn.sencha.com/img/20150721-theming-tutorial-part2-img2b.png)\n\n### Unique Buttons\n\nAs you can see in my application, my buttons are more custom than the configuration provided by the API. My app contains code to make smooth animations. On every rollover, the button slowly lights ups. I did this by using custom Sass / CSS code.\n\nTake a look:\n\n.x-btn-round-large,\n.x-btn-round-medium,\n.x-btn-round-small {\n\t&:hover {\n\t  background-color: $highlight-color2;\n\t  -webkit-transition: background-color 2s ease-out;\n\t  -moz-transition: background-color 2s ease-out;\n\t  -o-transition: background-color 2s ease-out;\n\t  transition: background-color 2s ease-out;\n\t}\n}\n\nThe CSS class names come from the mixin. I gave my small button the ui name: “round”. After I wire up this UI to my view code, I see in my browser DOM that the UI gave the component this class name: `.x-btn-‹ui-name›-small`.\n\nAll Sencha components get CSS class names by default with the .x- prefix. After that, it names the component (btn), then the UI name. For a button, it will also include the scale – or, if it’s in a toolbar. See mixin extjs-button-toolbar-small-ui.\n\nThe custom code I provided listens to the button hover. When I roll my mouse over the button, it will transition the background-color from the default background color (in my case black) to a new color (the green that I set in the background-color rule).\n\n### Unique Tabs\n\nSometimes you don’t want to use custom CSS code to add more functionality but instead to override the default look and feel. For example, when the UI mixin doesn’t provide the configuration you are looking for.\n\nI did this to create unique-looking tabs. See the screenshot:\n\n![](//cdn.sencha.com/img/20150721-theming-tutorial-part2-img3.png \"Tabs\")\n\nThe code I used can be found [here](https://github.com/savelee/sencha-theming-tutorial/blob/master/packages/local/theme-spotifext/sass/src/tab/Panel.scss). Take a look at the **.x-tab-bar-alternative** CSS class.\n\nYou may be wondering when to use UI mixins versus mixins. UI mixins are great because they style the full application and contain code that supports every browser supported by Ext JS. The disadvantage is that your stylesheet code will grow. This is why I typically use UI mixins for styling, and rules that are re-used throughout my application.\n\nCSS rules and overrides are great because they can be a quick solution. The disadvantage is that it’s complicated because you’ll need to test across browsers, and you really need to understand the generated DOM. I use CSS overrides and rules in case the UI mixin doesn’t provide the configuration, or when I need the CSS rule in only a few places.\n\n### Incorporating Fonts\n\nThe last thing I did in my custom theme was incorporate custom fonts and icons (which are icon fonts). Please take a look at this [file](https://github.com/savelee/sencha-theming-tutorial/blob/master/packages/local/theme-spotifext/sass/src/Component.scss).\n\nI included two custom fonts. One google font (from the [Google font provider](https://www.google.com/fonts)), and one icon font called Spotifinder that I created on this [website](https://icomoon.io/app/#/select). I selected my own icon set, and I generated a font out of it.\n\nBoth fonts are `@font-face` fonts, so you have to include the different font extensions for various browsers in your stylesheet. For the icon font, I had to put them in manually. [See](https://github.com/savelee/sencha-theming-tutorial/tree/master/packages/local/theme-spotifext/resources) the four font extensions. Usually when you create a custom icon font on an icon website like icomoon, you’ll be able to download the stylesheet that goes with it. In my case, I could just copy & paste it, but in some cases you’ll have to write it yourself.\n\nThe google font was really easy because Sencha provides a global UI mixin. This mixin puts the code for all the extensions in your compiled CSS code by importing the code from Google. See the [docs](http://docs.sencha.com/extjs/6.0/6.0.0-classic/source/google-webfont.scss.html#Global_CSS-css_mixin-google-webfont). Please note that using custom fonts from a font provider (like Google Font) requires an additional request to the font. An alternative way to do it is to download an `@font-face` font yourself (from a website such as [http://www.fontsquirrel.com/](http://www.fontsquirrel.com/)) and provide the full import code yourself. Just like I did for the icon font.\n\nOnce your font is correctly imported, you can start using it. I’m using the Google font by pointing the `$font-family` variable to it [here](https://github.com/savelee/sencha-theming-tutorial/blob/master/packages/local/theme-spotifext/sass/var/_config.scss).\n\nConclusion  \nThat’s it! Now, I’ve explained everything you need to know to create an awesome theme, such as the Spotifext theme. Check out the screenshot below to see how it might look in a real-life application.\n\nDon’t forget to [sign up](http://pages.sencha.com/App-Theming-Contest-2015.html) for the Sencha Application Theming Contest. The first prize winner gets $2,500!\n\n[![Spotifext theme](//cdn.sencha.com/img/20150721-theming-tutorial-part2-img4.png)](//cdn.sencha.com/img/20150721-theming-tutorial-part2-img4.png)\n\n#### Resources:\n\n[Ext JS Theming Guide](http://docs.sencha.com/extjs/6.0/core_concepts/theming.html)  \n[My SenchaCon Presentation](https://speakerdeck.com/savelee/advanced-theming-with-sencha-cmd)  \n[Tutorial Demo Files](https://github.com/savelee/sencha-theming-tutorial/)","source":"_drafts/how-tos/how-to-create-a-dark-ext-js-theme-part-2.md","raw":"---\ntitle: How to Create a Dark Ext JS Theme (part 2)\ntags:\n  - CSS3\n  - Sass\n  - Theme\n  - Theming\n  - triton\nurl: 694.html\nid: 694\ncategories:\n  - CSS\n  - Sass\ndate: 2015-08-02 11:21:15\n---\n\nI’ve been showing you how to develop a fancy dark theme, which kind of looks like Spotify. In [Part 1](https://www.sencha.com/blog/how-to-create-a-dark-ext-js-theme-part-1/) of the article, you learned about Fashion, Sencha Inspector, Themes, and variables. In Part 2, I’ll focus on more advanced concepts including: making unique components with Ext JS UIs, CSS overrides, and how to incorporate custom fonts or icons.\n\nYou can use this tutorial to help you build your theme for the Sencha Application Theming Contest.  \nThe first prize winner gets $2,500!\n\n[Sign up now](http://pages.sencha.com/App-Theming-Contest-2015.html)\n\n### Custom CSS Rules and Mixins\n\nThere are a few more things I did in my Spotifext theme to make it look awesome. I wrote some CSS rules to animate the button hovers, used custom fonts, and created my own button and tab panel variants to give it a unique look.\n\nWith the variables I described earlier, you can change the overall look and feel of the application and all its components. But sometimes, you just want to make certain components unique. See the image below of my working Spotifinder app. You can see that the tab panel doesn’t look like the default Ext JS tabs. The buttons can be square or round, in the colors green or gray. I’m using Ext JS UIs, which are Sass mixins under the hood. A mixin is a block of CSS rules that can be re-used throughout an app.\n\nHere’s an example Sass mixin:\n\n@mixin my-border-radius($radius) {\n  -webkit-border-radius: $radius;\n     -moz-border-radius: $radius;\n      -ms-border-radius: $radius;\n          border-radius: $radius;\n}\n\nThe above Sass mixin can be used to create rounded corners. I need to write experimental browser prefixes, so I can support this CSS3 feature across all browsers. Instead of writing every CSS rule myself, I can just include the **my-border-radius** mixin and pass in an argument, so all the CSS rules will be available after compilation:\n\n.box { @include border-radius(10px); }\n\nIn the compiled CSS, it will look like this (but minified):\n\n.box {\n-webkit-border-radius: 10px;\n     -moz-border-radius: 10px;\n      -ms-border-radius: 10px;\n          border-radius: 10px;\n}\n\nSass mixins are a great concept that can be used in Ext JS as well. We call them UIs, and they’re basically skins. Ext JS includes out-of-the-box UIs. For example, in the modern toolkit, we have UIs for back buttons, round buttons, and more, and it provides UIs you can reuse with your own parameters.\n\nYou can find these mixins in the Sencha API Docs. For example, look at Ext.button.Button, you’ll see Sass Mixins in all different states for buttons. To implement these mixins, you’ll use @include, then the mixin name in Ext JS, and then pass in the arguments.\n\n[![Ext.button.Button](//cdn.sencha.com/img/20150721-theming-tutorial-part2-img1.png)](//cdn.sencha.com/img/20150721-theming-tutorial-part2-img1.png)\n\nTo create the nice rounded buttons, take a look [here](https://github.com/savelee/sencha-theming-tutorial/blob/master/packages/local/theme-spotifext/sass/src/button/Button.scss).\n\nI used the below mixin code to create a new “scale: small” button. For arguments, I passed in the UI name: “round”, which I used in my view as ui: `‘round’`), a font-weight, padding and a background color:\n\n@include extjs-button-small-ui(\n\t$ui: 'round',\n\t$font-weight: bold,\n\t$padding: 5px,\n\t$background-color: $highlight-color \n);\n\nYou might have noticed that the buttons are animated, and the tab panel that looks like Spotify is a lot different from the provided Ext JS mixins. Take a look at my **sass/src** folder. In this directory, I’ve written all Ext JS mixins and custom Sass rules.\n\n[![Buttons](//cdn.sencha.com/img/20150721-theming-tutorial-part2-img2b.png)](//cdn.sencha.com/img/20150721-theming-tutorial-part2-img2b.png)\n\n### Unique Buttons\n\nAs you can see in my application, my buttons are more custom than the configuration provided by the API. My app contains code to make smooth animations. On every rollover, the button slowly lights ups. I did this by using custom Sass / CSS code.\n\nTake a look:\n\n.x-btn-round-large,\n.x-btn-round-medium,\n.x-btn-round-small {\n\t&:hover {\n\t  background-color: $highlight-color2;\n\t  -webkit-transition: background-color 2s ease-out;\n\t  -moz-transition: background-color 2s ease-out;\n\t  -o-transition: background-color 2s ease-out;\n\t  transition: background-color 2s ease-out;\n\t}\n}\n\nThe CSS class names come from the mixin. I gave my small button the ui name: “round”. After I wire up this UI to my view code, I see in my browser DOM that the UI gave the component this class name: `.x-btn-‹ui-name›-small`.\n\nAll Sencha components get CSS class names by default with the .x- prefix. After that, it names the component (btn), then the UI name. For a button, it will also include the scale – or, if it’s in a toolbar. See mixin extjs-button-toolbar-small-ui.\n\nThe custom code I provided listens to the button hover. When I roll my mouse over the button, it will transition the background-color from the default background color (in my case black) to a new color (the green that I set in the background-color rule).\n\n### Unique Tabs\n\nSometimes you don’t want to use custom CSS code to add more functionality but instead to override the default look and feel. For example, when the UI mixin doesn’t provide the configuration you are looking for.\n\nI did this to create unique-looking tabs. See the screenshot:\n\n![](//cdn.sencha.com/img/20150721-theming-tutorial-part2-img3.png \"Tabs\")\n\nThe code I used can be found [here](https://github.com/savelee/sencha-theming-tutorial/blob/master/packages/local/theme-spotifext/sass/src/tab/Panel.scss). Take a look at the **.x-tab-bar-alternative** CSS class.\n\nYou may be wondering when to use UI mixins versus mixins. UI mixins are great because they style the full application and contain code that supports every browser supported by Ext JS. The disadvantage is that your stylesheet code will grow. This is why I typically use UI mixins for styling, and rules that are re-used throughout my application.\n\nCSS rules and overrides are great because they can be a quick solution. The disadvantage is that it’s complicated because you’ll need to test across browsers, and you really need to understand the generated DOM. I use CSS overrides and rules in case the UI mixin doesn’t provide the configuration, or when I need the CSS rule in only a few places.\n\n### Incorporating Fonts\n\nThe last thing I did in my custom theme was incorporate custom fonts and icons (which are icon fonts). Please take a look at this [file](https://github.com/savelee/sencha-theming-tutorial/blob/master/packages/local/theme-spotifext/sass/src/Component.scss).\n\nI included two custom fonts. One google font (from the [Google font provider](https://www.google.com/fonts)), and one icon font called Spotifinder that I created on this [website](https://icomoon.io/app/#/select). I selected my own icon set, and I generated a font out of it.\n\nBoth fonts are `@font-face` fonts, so you have to include the different font extensions for various browsers in your stylesheet. For the icon font, I had to put them in manually. [See](https://github.com/savelee/sencha-theming-tutorial/tree/master/packages/local/theme-spotifext/resources) the four font extensions. Usually when you create a custom icon font on an icon website like icomoon, you’ll be able to download the stylesheet that goes with it. In my case, I could just copy & paste it, but in some cases you’ll have to write it yourself.\n\nThe google font was really easy because Sencha provides a global UI mixin. This mixin puts the code for all the extensions in your compiled CSS code by importing the code from Google. See the [docs](http://docs.sencha.com/extjs/6.0/6.0.0-classic/source/google-webfont.scss.html#Global_CSS-css_mixin-google-webfont). Please note that using custom fonts from a font provider (like Google Font) requires an additional request to the font. An alternative way to do it is to download an `@font-face` font yourself (from a website such as [http://www.fontsquirrel.com/](http://www.fontsquirrel.com/)) and provide the full import code yourself. Just like I did for the icon font.\n\nOnce your font is correctly imported, you can start using it. I’m using the Google font by pointing the `$font-family` variable to it [here](https://github.com/savelee/sencha-theming-tutorial/blob/master/packages/local/theme-spotifext/sass/var/_config.scss).\n\nConclusion  \nThat’s it! Now, I’ve explained everything you need to know to create an awesome theme, such as the Spotifext theme. Check out the screenshot below to see how it might look in a real-life application.\n\nDon’t forget to [sign up](http://pages.sencha.com/App-Theming-Contest-2015.html) for the Sencha Application Theming Contest. The first prize winner gets $2,500!\n\n[![Spotifext theme](//cdn.sencha.com/img/20150721-theming-tutorial-part2-img4.png)](//cdn.sencha.com/img/20150721-theming-tutorial-part2-img4.png)\n\n#### Resources:\n\n[Ext JS Theming Guide](http://docs.sencha.com/extjs/6.0/core_concepts/theming.html)  \n[My SenchaCon Presentation](https://speakerdeck.com/savelee/advanced-theming-with-sencha-cmd)  \n[Tutorial Demo Files](https://github.com/savelee/sencha-theming-tutorial/)","slug":"how-tos/how-to-create-a-dark-ext-js-theme-part-2","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncz500zykif5t4qe2pri","content":"<p>I’ve been showing you how to develop a fancy dark theme, which kind of looks\n  like Spotify. In <a href=\"https://www.sencha.com/blog/how-to-create-a-dark-ext-js-theme-part-1/\" target=\"_blank\" rel=\"noopener\">Part\n    1</a> of the article, you learned about Fashion, Sencha Inspector, Themes,\n  and variables. In Part 2, I’ll focus on more advanced concepts including:\n  making unique components with Ext JS UIs, CSS overrides, and how to\n  incorporate custom fonts or icons.</p>\n<p>You can use this tutorial to help you build your theme for the Sencha\n  Application Theming Contest.<br>The first prize winner gets $2,500!</p>\n<p><a href=\"http://pages.sencha.com/App-Theming-Contest-2015.html\" target=\"_blank\" rel=\"noopener\">Sign up now</a></p>\n<h3 id=\"Custom-CSS-Rules-and-Mixins\"><a href=\"#Custom-CSS-Rules-and-Mixins\" class=\"headerlink\" title=\"Custom CSS Rules and Mixins\"></a>Custom\n  CSS Rules and Mixins</h3>\n<p>There are a few more things I did in my Spotifext theme to make it look\n  awesome. I wrote some CSS rules to animate the button hovers, used custom\n  fonts, and created my own button and tab panel variants to give it a unique\n  look.</p>\n<p>With the variables I described earlier, you can change the overall look and\n  feel of the application and all its components. But sometimes, you just want\n  to make certain components unique. See the image below of my working\n  Spotifinder app. You can see that the tab panel doesn’t look like the default\n  Ext JS tabs. The buttons can be square or round, in the colors green or gray.\n  I’m using Ext JS UIs, which are Sass mixins under the hood. A mixin is a\n  block of CSS rules that can be re-used throughout an app.</p>\n<p>Here’s an example Sass mixin:</p>\n<p>@mixin my-border-radius($radius) { -webkit-border-radius: $radius;\n  -moz-border-radius: $radius; -ms-border-radius: $radius; border-radius:\n  $radius; }</p>\n<p>The above Sass mixin can be used to create rounded corners. I need to write\n  experimental browser prefixes, so I can support this CSS3 feature across all\n  browsers. Instead of writing every CSS rule myself, I can just include the\n  <strong>my-border-radius</strong> mixin and pass in an argument, so all the\n  CSS rules will be available after compilation:</p>\n<p>.box { @include border-radius(10px); }</p>\n<p>In the compiled CSS, it will look like this (but minified):</p>\n<p>.box { -webkit-border-radius: 10px; -moz-border-radius: 10px;\n  -ms-border-radius: 10px; border-radius: 10px; }</p>\n<p>Sass mixins are a great concept that can be used in Ext JS as well. We call\n  them UIs, and they’re basically skins. Ext JS includes out-of-the-box UIs.\n  For example, in the modern toolkit, we have UIs for back buttons, round\n  buttons, and more, and it provides UIs you can reuse with your own\n  parameters.</p>\n<p>You can find these mixins in the Sencha API Docs. For example, look at\n  Ext.button.Button, you’ll see Sass Mixins in all different states for\n  buttons. To implement these mixins, you’ll use @include, then the mixin name\n  in Ext JS, and then pass in the arguments.</p>\n<p><a href=\"//cdn.sencha.com/img/20150721-theming-tutorial-part2-img1.png\"><img src=\"//cdn.sencha.com/img/20150721-theming-tutorial-part2-img1.png\" alt=\"Ext.button.Button\"></a></p>\n<p>To create the nice rounded buttons, take a look <a href=\"https://github.com/savelee/sencha-theming-tutorial/blob/master/packages/local/theme-spotifext/sass/src/button/Button.scss\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>I used the below mixin code to create a new “scale: small” button. For\n  arguments, I passed in the UI name: “round”, which I used in my view as ui:\n  <code>‘round’</code>), a font-weight, padding and a background color:</p>\n<p>@include extjs-button-small-ui( $ui: ‘round’, $font-weight: bold, $padding:\n  5px, $background-color: $highlight-color );</p>\n<p>You might have noticed that the buttons are animated, and the tab panel that\n  looks like Spotify is a lot different from the provided Ext JS mixins. Take a\n  look at my <strong>sass/src</strong> folder. In this directory, I’ve written\n  all Ext JS mixins and custom Sass rules.</p>\n<p><a href=\"//cdn.sencha.com/img/20150721-theming-tutorial-part2-img2b.png\"><img src=\"//cdn.sencha.com/img/20150721-theming-tutorial-part2-img2b.png\" alt=\"Buttons\"></a></p>\n<h3 id=\"Unique-Buttons\"><a href=\"#Unique-Buttons\" class=\"headerlink\" title=\"Unique Buttons\"></a>Unique\n  Buttons</h3>\n<p>As you can see in my application, my buttons are more custom than the\n  configuration provided by the API. My app contains code to make smooth\n  animations. On every rollover, the button slowly lights ups. I did this by\n  using custom Sass / CSS code.</p>\n<p>Take a look:</p>\n<p>.x-btn-round-large, .x-btn-round-medium, .x-btn-round-small { &amp;:hover {\n  background-color: $highlight-color2; -webkit-transition: background-color 2s\n  ease-out; -moz-transition: background-color 2s ease-out; -o-transition:\n  background-color 2s ease-out; transition: background-color 2s ease-out; } }</p>\n<p>The CSS class names come from the mixin. I gave my small button the ui name:\n  “round”. After I wire up this UI to my view code, I see in my browser DOM\n  that the UI gave the component this class name: <code>.x-btn-‹ui-name›-small</code>.</p>\n<p>All Sencha components get CSS class names by default with the .x- prefix.\n  After that, it names the component (btn), then the UI name. For a button, it\n  will also include the scale – or, if it’s in a toolbar. See mixin\n  extjs-button-toolbar-small-ui.</p>\n<p>The custom code I provided listens to the button hover. When I roll my mouse\n  over the button, it will transition the background-color from the default\n  background color (in my case black) to a new color (the green that I set in\n  the background-color rule).</p>\n<h3 id=\"Unique-Tabs\"><a href=\"#Unique-Tabs\" class=\"headerlink\" title=\"Unique Tabs\"></a>Unique\n  Tabs</h3>\n<p>Sometimes you don’t want to use custom CSS code to add more functionality\n  but instead to override the default look and feel. For example, when the UI\n  mixin doesn’t provide the configuration you are looking for.</p>\n<p>I did this to create unique-looking tabs. See the screenshot:</p>\n<p><img src=\"//cdn.sencha.com/img/20150721-theming-tutorial-part2-img3.png\" alt=\"\" title=\"Tabs\"></p>\n<p>The code I used can be found <a href=\"https://github.com/savelee/sencha-theming-tutorial/blob/master/packages/local/theme-spotifext/sass/src/tab/Panel.scss\" target=\"_blank\" rel=\"noopener\">here</a>.\n  Take a look at the <strong>.x-tab-bar-alternative</strong> CSS class.</p>\n<p>You may be wondering when to use UI mixins versus mixins. UI mixins are\n  great because they style the full application and contain code that supports\n  every browser supported by Ext JS. The disadvantage is that your stylesheet\n  code will grow. This is why I typically use UI mixins for styling, and rules\n  that are re-used throughout my application.</p>\n<p>CSS rules and overrides are great because they can be a quick solution. The\n  disadvantage is that it’s complicated because you’ll need to test across\n  browsers, and you really need to understand the generated DOM. I use CSS\n  overrides and rules in case the UI mixin doesn’t provide the configuration,\n  or when I need the CSS rule in only a few places.</p>\n<h3 id=\"Incorporating-Fonts\"><a href=\"#Incorporating-Fonts\" class=\"headerlink\" title=\"Incorporating Fonts\"></a>Incorporating\n  Fonts</h3>\n<p>The last thing I did in my custom theme was incorporate custom fonts and\n  icons (which are icon fonts). Please take a look at this <a href=\"https://github.com/savelee/sencha-theming-tutorial/blob/master/packages/local/theme-spotifext/sass/src/Component.scss\" target=\"_blank\" rel=\"noopener\">file</a>.</p>\n<p>I included two custom fonts. One google font (from the <a href=\"https://www.google.com/fonts\" target=\"_blank\" rel=\"noopener\">Google\n    font provider</a>), and one icon font called Spotifinder that I created on\n  this <a href=\"https://icomoon.io/app/#/select\" target=\"_blank\" rel=\"noopener\">website</a>. I selected my own\n  icon set, and I generated a font out of it.</p>\n<p>Both fonts are <code>@font-face</code> fonts, so you have to include the\n  different font extensions for various browsers in your stylesheet. For the\n  icon font, I had to put them in manually. <a href=\"https://github.com/savelee/sencha-theming-tutorial/tree/master/packages/local/theme-spotifext/resources\" target=\"_blank\" rel=\"noopener\">See</a>\n  the four font extensions. Usually when you create a custom icon font on an\n  icon website like icomoon, you’ll be able to download the stylesheet that\n  goes with it. In my case, I could just copy &amp; paste it, but in some cases\n  you’ll have to write it yourself.</p>\n<p>The google font was really easy because Sencha provides a global UI mixin.\n  This mixin puts the code for all the extensions in your compiled CSS code by\n  importing the code from Google. See the <a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/source/google-webfont.scss.html#Global_CSS-css_mixin-google-webfont\" target=\"_blank\" rel=\"noopener\">docs</a>.\n  Please note that using custom fonts from a font provider (like Google Font)\n  requires an additional request to the font. An alternative way to do it is to\n  download an <code>@font-face</code> font yourself (from a website such as <a href=\"http://www.fontsquirrel.com/\" target=\"_blank\" rel=\"noopener\">http://www.fontsquirrel.com/</a>)\n  and provide the full import code yourself. Just like I did for the icon font.</p>\n<p>Once your font is correctly imported, you can start using it. I’m using the\n  Google font by pointing the <code>$font-family</code> variable to it <a href=\"https://github.com/savelee/sencha-theming-tutorial/blob/master/packages/local/theme-spotifext/sass/var/_config.scss\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>Conclusion<br>That’s it! Now, I’ve explained everything you need to know to\n  create an awesome theme, such as the Spotifext theme. Check out the\n  screenshot below to see how it might look in a real-life application.</p>\n<p>Don’t forget to <a href=\"http://pages.sencha.com/App-Theming-Contest-2015.html\" target=\"_blank\" rel=\"noopener\">sign\n    up</a> for the Sencha Application Theming Contest. The first prize winner\n  gets $2,500!</p>\n<p><a href=\"//cdn.sencha.com/img/20150721-theming-tutorial-part2-img4.png\"><img src=\"//cdn.sencha.com/img/20150721-theming-tutorial-part2-img4.png\" alt=\"Spotifext theme\"></a></p>\n<h4 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources:\"></a>Resources:</h4>\n<p><a href=\"http://docs.sencha.com/extjs/6.0/core_concepts/theming.html\" target=\"_blank\" rel=\"noopener\">Ext JS\n    Theming Guide</a><br><a href=\"https://speakerdeck.com/savelee/advanced-theming-with-sencha-cmd\" target=\"_blank\" rel=\"noopener\">My\n    SenchaCon Presentation</a><br><a href=\"https://github.com/savelee/sencha-theming-tutorial/\" target=\"_blank\" rel=\"noopener\">Tutorial\n    Demo Files</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>I’ve been showing you how to develop a fancy dark theme, which kind of looks\n  like Spotify. In <a href=\"https://www.sencha.com/blog/how-to-create-a-dark-ext-js-theme-part-1/\" target=\"_blank\" rel=\"noopener\">Part\n    1</a> of the article, you learned about Fashion, Sencha Inspector, Themes,\n  and variables. In Part 2, I’ll focus on more advanced concepts including:\n  making unique components with Ext JS UIs, CSS overrides, and how to\n  incorporate custom fonts or icons.</p>\n<p>You can use this tutorial to help you build your theme for the Sencha\n  Application Theming Contest.<br>The first prize winner gets $2,500!</p>\n<p><a href=\"http://pages.sencha.com/App-Theming-Contest-2015.html\" target=\"_blank\" rel=\"noopener\">Sign up now</a></p>\n<h3 id=\"Custom-CSS-Rules-and-Mixins\"><a href=\"#Custom-CSS-Rules-and-Mixins\" class=\"headerlink\" title=\"Custom CSS Rules and Mixins\"></a>Custom\n  CSS Rules and Mixins</h3>\n<p>There are a few more things I did in my Spotifext theme to make it look\n  awesome. I wrote some CSS rules to animate the button hovers, used custom\n  fonts, and created my own button and tab panel variants to give it a unique\n  look.</p>\n<p>With the variables I described earlier, you can change the overall look and\n  feel of the application and all its components. But sometimes, you just want\n  to make certain components unique. See the image below of my working\n  Spotifinder app. You can see that the tab panel doesn’t look like the default\n  Ext JS tabs. The buttons can be square or round, in the colors green or gray.\n  I’m using Ext JS UIs, which are Sass mixins under the hood. A mixin is a\n  block of CSS rules that can be re-used throughout an app.</p>\n<p>Here’s an example Sass mixin:</p>\n<p>@mixin my-border-radius($radius) { -webkit-border-radius: $radius;\n  -moz-border-radius: $radius; -ms-border-radius: $radius; border-radius:\n  $radius; }</p>\n<p>The above Sass mixin can be used to create rounded corners. I need to write\n  experimental browser prefixes, so I can support this CSS3 feature across all\n  browsers. Instead of writing every CSS rule myself, I can just include the\n  <strong>my-border-radius</strong> mixin and pass in an argument, so all the\n  CSS rules will be available after compilation:</p>\n<p>.box { @include border-radius(10px); }</p>\n<p>In the compiled CSS, it will look like this (but minified):</p>\n<p>.box { -webkit-border-radius: 10px; -moz-border-radius: 10px;\n  -ms-border-radius: 10px; border-radius: 10px; }</p>\n<p>Sass mixins are a great concept that can be used in Ext JS as well. We call\n  them UIs, and they’re basically skins. Ext JS includes out-of-the-box UIs.\n  For example, in the modern toolkit, we have UIs for back buttons, round\n  buttons, and more, and it provides UIs you can reuse with your own\n  parameters.</p>\n<p>You can find these mixins in the Sencha API Docs. For example, look at\n  Ext.button.Button, you’ll see Sass Mixins in all different states for\n  buttons. To implement these mixins, you’ll use @include, then the mixin name\n  in Ext JS, and then pass in the arguments.</p>\n<p><a href=\"//cdn.sencha.com/img/20150721-theming-tutorial-part2-img1.png\"><img src=\"//cdn.sencha.com/img/20150721-theming-tutorial-part2-img1.png\" alt=\"Ext.button.Button\"></a></p>\n<p>To create the nice rounded buttons, take a look <a href=\"https://github.com/savelee/sencha-theming-tutorial/blob/master/packages/local/theme-spotifext/sass/src/button/Button.scss\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>I used the below mixin code to create a new “scale: small” button. For\n  arguments, I passed in the UI name: “round”, which I used in my view as ui:\n  <code>‘round’</code>), a font-weight, padding and a background color:</p>\n<p>@include extjs-button-small-ui( $ui: ‘round’, $font-weight: bold, $padding:\n  5px, $background-color: $highlight-color );</p>\n<p>You might have noticed that the buttons are animated, and the tab panel that\n  looks like Spotify is a lot different from the provided Ext JS mixins. Take a\n  look at my <strong>sass/src</strong> folder. In this directory, I’ve written\n  all Ext JS mixins and custom Sass rules.</p>\n<p><a href=\"//cdn.sencha.com/img/20150721-theming-tutorial-part2-img2b.png\"><img src=\"//cdn.sencha.com/img/20150721-theming-tutorial-part2-img2b.png\" alt=\"Buttons\"></a></p>\n<h3 id=\"Unique-Buttons\"><a href=\"#Unique-Buttons\" class=\"headerlink\" title=\"Unique Buttons\"></a>Unique\n  Buttons</h3>\n<p>As you can see in my application, my buttons are more custom than the\n  configuration provided by the API. My app contains code to make smooth\n  animations. On every rollover, the button slowly lights ups. I did this by\n  using custom Sass / CSS code.</p>\n<p>Take a look:</p>\n<p>.x-btn-round-large, .x-btn-round-medium, .x-btn-round-small { &amp;:hover {\n  background-color: $highlight-color2; -webkit-transition: background-color 2s\n  ease-out; -moz-transition: background-color 2s ease-out; -o-transition:\n  background-color 2s ease-out; transition: background-color 2s ease-out; } }</p>\n<p>The CSS class names come from the mixin. I gave my small button the ui name:\n  “round”. After I wire up this UI to my view code, I see in my browser DOM\n  that the UI gave the component this class name: <code>.x-btn-‹ui-name›-small</code>.</p>\n<p>All Sencha components get CSS class names by default with the .x- prefix.\n  After that, it names the component (btn), then the UI name. For a button, it\n  will also include the scale – or, if it’s in a toolbar. See mixin\n  extjs-button-toolbar-small-ui.</p>\n<p>The custom code I provided listens to the button hover. When I roll my mouse\n  over the button, it will transition the background-color from the default\n  background color (in my case black) to a new color (the green that I set in\n  the background-color rule).</p>\n<h3 id=\"Unique-Tabs\"><a href=\"#Unique-Tabs\" class=\"headerlink\" title=\"Unique Tabs\"></a>Unique\n  Tabs</h3>\n<p>Sometimes you don’t want to use custom CSS code to add more functionality\n  but instead to override the default look and feel. For example, when the UI\n  mixin doesn’t provide the configuration you are looking for.</p>\n<p>I did this to create unique-looking tabs. See the screenshot:</p>\n<p><img src=\"//cdn.sencha.com/img/20150721-theming-tutorial-part2-img3.png\" alt=\"\" title=\"Tabs\"></p>\n<p>The code I used can be found <a href=\"https://github.com/savelee/sencha-theming-tutorial/blob/master/packages/local/theme-spotifext/sass/src/tab/Panel.scss\" target=\"_blank\" rel=\"noopener\">here</a>.\n  Take a look at the <strong>.x-tab-bar-alternative</strong> CSS class.</p>\n<p>You may be wondering when to use UI mixins versus mixins. UI mixins are\n  great because they style the full application and contain code that supports\n  every browser supported by Ext JS. The disadvantage is that your stylesheet\n  code will grow. This is why I typically use UI mixins for styling, and rules\n  that are re-used throughout my application.</p>\n<p>CSS rules and overrides are great because they can be a quick solution. The\n  disadvantage is that it’s complicated because you’ll need to test across\n  browsers, and you really need to understand the generated DOM. I use CSS\n  overrides and rules in case the UI mixin doesn’t provide the configuration,\n  or when I need the CSS rule in only a few places.</p>\n<h3 id=\"Incorporating-Fonts\"><a href=\"#Incorporating-Fonts\" class=\"headerlink\" title=\"Incorporating Fonts\"></a>Incorporating\n  Fonts</h3>\n<p>The last thing I did in my custom theme was incorporate custom fonts and\n  icons (which are icon fonts). Please take a look at this <a href=\"https://github.com/savelee/sencha-theming-tutorial/blob/master/packages/local/theme-spotifext/sass/src/Component.scss\" target=\"_blank\" rel=\"noopener\">file</a>.</p>\n<p>I included two custom fonts. One google font (from the <a href=\"https://www.google.com/fonts\" target=\"_blank\" rel=\"noopener\">Google\n    font provider</a>), and one icon font called Spotifinder that I created on\n  this <a href=\"https://icomoon.io/app/#/select\" target=\"_blank\" rel=\"noopener\">website</a>. I selected my own\n  icon set, and I generated a font out of it.</p>\n<p>Both fonts are <code>@font-face</code> fonts, so you have to include the\n  different font extensions for various browsers in your stylesheet. For the\n  icon font, I had to put them in manually. <a href=\"https://github.com/savelee/sencha-theming-tutorial/tree/master/packages/local/theme-spotifext/resources\" target=\"_blank\" rel=\"noopener\">See</a>\n  the four font extensions. Usually when you create a custom icon font on an\n  icon website like icomoon, you’ll be able to download the stylesheet that\n  goes with it. In my case, I could just copy &amp; paste it, but in some cases\n  you’ll have to write it yourself.</p>\n<p>The google font was really easy because Sencha provides a global UI mixin.\n  This mixin puts the code for all the extensions in your compiled CSS code by\n  importing the code from Google. See the <a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/source/google-webfont.scss.html#Global_CSS-css_mixin-google-webfont\" target=\"_blank\" rel=\"noopener\">docs</a>.\n  Please note that using custom fonts from a font provider (like Google Font)\n  requires an additional request to the font. An alternative way to do it is to\n  download an <code>@font-face</code> font yourself (from a website such as <a href=\"http://www.fontsquirrel.com/\" target=\"_blank\" rel=\"noopener\">http://www.fontsquirrel.com/</a>)\n  and provide the full import code yourself. Just like I did for the icon font.</p>\n<p>Once your font is correctly imported, you can start using it. I’m using the\n  Google font by pointing the <code>$font-family</code> variable to it <a href=\"https://github.com/savelee/sencha-theming-tutorial/blob/master/packages/local/theme-spotifext/sass/var/_config.scss\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>Conclusion<br>That’s it! Now, I’ve explained everything you need to know to\n  create an awesome theme, such as the Spotifext theme. Check out the\n  screenshot below to see how it might look in a real-life application.</p>\n<p>Don’t forget to <a href=\"http://pages.sencha.com/App-Theming-Contest-2015.html\" target=\"_blank\" rel=\"noopener\">sign\n    up</a> for the Sencha Application Theming Contest. The first prize winner\n  gets $2,500!</p>\n<p><a href=\"//cdn.sencha.com/img/20150721-theming-tutorial-part2-img4.png\"><img src=\"//cdn.sencha.com/img/20150721-theming-tutorial-part2-img4.png\" alt=\"Spotifext theme\"></a></p>\n<h4 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources:\"></a>Resources:</h4>\n<p><a href=\"http://docs.sencha.com/extjs/6.0/core_concepts/theming.html\" target=\"_blank\" rel=\"noopener\">Ext JS\n    Theming Guide</a><br><a href=\"https://speakerdeck.com/savelee/advanced-theming-with-sencha-cmd\" target=\"_blank\" rel=\"noopener\">My\n    SenchaCon Presentation</a><br><a href=\"https://github.com/savelee/sencha-theming-tutorial/\" target=\"_blank\" rel=\"noopener\">Tutorial\n    Demo Files</a></p>\n"},{"title":"How to generate a PDF from an Ext JS app","url":"735.html","id":"735","date":"2015-11-26T12:23:02.000Z","_content":"\nOften I get the question if it’s possible to generate a PDF from a Sencha app. Well yes that’s possible, but not with Ext JS code only. Though, Ext JS has an exporter, to export grid/pivot data into an XML or Excel file, and you can export charts to images. Out of the box we can’t generate PDFs from full Sencha apps, with the framework.\n\nWhat you will need is an additional script, often these solutions are handled on the backend, but there are also solutions which can do this client-side.\n\nTo name few, see the list below. I didn’t use them all. But I’ve done it before on the client-side with JavaScript, with PHP and back in the days also once in Java.\n\n*   You can generate PDFs with Node and [PhantomJS](http://phantomjs.org)\n*   You can view PDFs with JavaScript on the client-side with [Mozilla PDF.js](https://mozilla.github.io/pdf.js/) or generate with [JSPDF](https://parall.ax/products/jspdf)\n*   You can generate PDFs with PHP. For example with [TCPDF](http://www.tcpdf.org/index.php), [HTML2PDF](http://sourceforge.net/projects/html2ps/), [DOMPDF](https://github.com/dompdf/dompdf), [Zend PDF](http://framework.zend.com/manual/1.12/en/zend.pdf.html) or [FPDF](http://www.fpdf.org/)\n*   PDF generation for Java. For example: [PDFBox](http://pdfbox.apache.org/), [PDFJet](http://pdfjet.com/), [JPod](http://sourceforge.net/projects/jpodlib/) or [PDF Clown](http://pdfclown.org/)\n*   PDF generation for .NET. For example: [PDFClown](http://pdfclown.org/), [PDFJet](http://pdfjet.com/), [Apose](http://www.aspose.com/.net/pdf-component.aspx) or [Foxit](https://www.foxitsoftware.com/products/sdk/generator/)\n*   Perl PDF generation, [PDF-API](http://search.cpan.org/dist/PDF-API2/), [PDF-Create](http://search.cpan.org/dist/PDF-Create/) or [PDF Template](http://search.cpan.org/dist/PDF-Template/)\n\nNowadays, I love Node JS! So I’ll show you how I recently created a generator with JavaScript for NodeJS and PhantomJS. PhantomJS?PhantomJS is a headless Webkit browser formerly written by (ex Sencha employee) Ariya Hidayat. You will need to install PhantomJS on your environment, but once installed you can run PhantomJS from your command-line. Why is this so powerful? Well you can use it, to:\n\n*   **Headless website testing**  \n    Run functional tests with frameworks such as Jasmine, QUnit, Mocha, Capybara, WebDriver, and many others.\n*   **Page automation & screenscraping**  \n    Access and manipulate webpages with the standard DOM API, or with usual libraries like jQuery.\n*   **Network monitoring**  \n    Monitor page loading and export as standard HAR files. Automate performance analysis using YSlow and Jenkins\n*   **Screen capturing**  \n    Programmatically capture web contents, including SVG and Canvas. Create web site screenshots with thumbnail preview etc\n\nThe last usecase, is where I am using it for. To let PhantomJS visit my Ext JS app, and capture the screen, by generating it to a PDF. You can run a working example via this URL: [http://ladysign.nl/pdfgenerator?page=https://www.leeboonstra.com/senchaplaces](http://ladysign.nl/pdfgenerator?page=https://www.leeboonstra.com/senchaplaces) (I’m creating a PDF of [this simple Ext app](https://www.leeboonstra.com/senchaplaces/).)\n\nNice to know, Sencha is using PhantomJS inside Sencha Cmd, for example we use it to generate images from CSS3 features that aren’t supported in legacy browsers and recently we compile Sass stylesheets with JavaScript, to production ready CSS (Fashion). How did I do this?\n\n1.  Let’s say you have an environment with Node JS and a web server with Express installed, how can you make a PDF from an Ext JS app? I’m not an Node/PhantomJS expert, but I can show you some simple steps, which you can do too!\n    \n    You will need to create a route that listens to an URL that should invoke PhantomJS. For example:\n    \n    var PdfHelp = require('./libs/pdfgenerator-help');\n    router.get('/pdfgenerator/', function(req, res){\n    \tvar pdf = new PdfHelp();\n    \tpdf.generatePdf(req, res);\n    });\n    \n2.  On your environment (dev and production), you will need to install PhantomJs, you can install it via the [npm package manager](https://www.npmjs.com/package/phantomjs): `npm install phantomjs -s`\n    \n    Once it’s installed, you can run PhantomJS JavaScript pages, by running: `phantomjs scriptname.js` from the command-line.\n    \n3.  I created a simple helper script which can listen to an argument that passes in a URL of my Sencha app. This probably doesn’t make much sense for your own app, but you will get the idea on how to do this.\n    \n    I use a Node child process, to execute PhantomJS from my environment. It passes in two arguments; the phantomjs script to execute (generate.js - see below), and in my case the URL to the Sencha app.\n    \n    var path = require('path');\n    var childProcess = require('child_process');\n    var phantomjs = require('phantomjs');\n    var binPath = phantomjs.path;\n    var childArgs = \\[\n    \tpath.join(__dirname, 'phantomjs-script.js'),\n    \t'some other argument (passed to phantomjs script)'\n    \\];\n    \n    childProcess.execFile(binPath, childArgs, function(err, stdout, stderr) {\n    \t// handle results\n    });\n    \n    You can find [my code here](https://github.com/savelee/ladysignapis/blob/master/libs/pdfgenerator-help/index.js)\n    \n4.  Here’s the phantomjs [generate](https://github.com/savelee/ladysignapis/blob/master/libs/pdfgenerator-help/libs/generate.js) script that I used:\n    \n    What’s important to know:\n    \n    *   I’m configuring the page, like paper size, margins, and headers and footers: [http://phantomjs.org/api/webpage/property/paper-size.html](http://phantomjs.org/api/webpage/property/paper-size.html)\n    *   Then I let PhantomJS open the URL to my Sencha app: [http://phantomjs.org/api/webpage/method/open.html](http://phantomjs.org/api/webpage/method/open.html)\n5.  The big magic trick here, is that you’ll need to wait till the headless browser loaded the Sencha app with the framework completely in its memory. Otherwise you would print an empty page, (because index.html files in Sencha apps are usually pretty empty, since Ext JS generates the browser DOM elements).\n    \n    Take a look into the `waitFor()` method I used. The first argument is a test function. This test function, (see line 94), tries to find the **Ext** namespace in my Sencha app. When it’s there, I still don’t want to immediately make the screenshot, because maybe my stores are not loaded yet. So I wrote another evaluation: `Ext.ComponentQuery.query('grid')[0].getStore().count();` If there is data in my store, then go ahead and generate the PDF.\n    \n    Again, this probably doesn’t make sense for your application, but you will get the idea.\n    \n6.  You render the page with `page.render('my-pdf-name.pdf');` and then you exit the phantomjs process ( `phantom.exit()`).\n    \n7.  Back into my PDF helper class, I wrote the following lines, to set the filename of the PDF and directly open it in my browser. It’s important that you set the page headers and content type to application/pdf:\n    \n    var filename = \"test.pdf\";\n    filename = encodeURIComponent(filename);\n    \n    res.setHeader('Content-disposition', 'inline; filename=\"' + filename + '\"');\n    res.setHeader('Content-type', 'application/pdf');\n    \n    var fs = require('fs');\n    fs.readFile(filename, function(err,data) {\n    \t\tres.contentType(\"application/pdf\");\n    \t\tres.end(data);\n    });\n    \n\nAnd that’s it! As you can see when using PhantomJS for visiting your Sencha app, you might want to deal with the timing issues. As by default the index.html in a Sencha app is empty, and a Sencha app is generated in the DOM.\n\nThere are lots of ways on how you can create PDFs or images from Sencha apps. Which technologies and tricks did you use?\n\n### Update:\n\nExt JS 6.2 Premium, ships with a data exporter package for grids and pivot grids. It will be possible to export all the records which are visible in a grid to: _XML, CSV, TSV, HTML_ and _Excel_ format. Shikhir Singh, lately wrote a nice post about; how to extend from Ext.grid.plugin.Exporter to easily export to PDF.[https://www.sencha.com/blog/exporting-data-from-an-ext-js-grid-to-pdf/](https://www.sencha.com/blog/exporting-data-from-an-ext-js-grid-to-pdf/)","source":"_drafts/how-tos/how-to-generate-a-sencha-app-to-pdf.md","raw":"---\ntitle: How to generate a PDF from an Ext JS app\ntags:\n  - express\n  - node\n  - nodejs\n  - pdf\n  - pdf generation\n  - PhantomJS\n  - screencapture\nurl: 735.html\nid: 735\ncategories:\n  - Environment\n  - Ext JS\n  - Ext JS 5\n  - Ext JS 6\n  - Node JS\ndate: 2015-11-26 13:23:02\n---\n\nOften I get the question if it’s possible to generate a PDF from a Sencha app. Well yes that’s possible, but not with Ext JS code only. Though, Ext JS has an exporter, to export grid/pivot data into an XML or Excel file, and you can export charts to images. Out of the box we can’t generate PDFs from full Sencha apps, with the framework.\n\nWhat you will need is an additional script, often these solutions are handled on the backend, but there are also solutions which can do this client-side.\n\nTo name few, see the list below. I didn’t use them all. But I’ve done it before on the client-side with JavaScript, with PHP and back in the days also once in Java.\n\n*   You can generate PDFs with Node and [PhantomJS](http://phantomjs.org)\n*   You can view PDFs with JavaScript on the client-side with [Mozilla PDF.js](https://mozilla.github.io/pdf.js/) or generate with [JSPDF](https://parall.ax/products/jspdf)\n*   You can generate PDFs with PHP. For example with [TCPDF](http://www.tcpdf.org/index.php), [HTML2PDF](http://sourceforge.net/projects/html2ps/), [DOMPDF](https://github.com/dompdf/dompdf), [Zend PDF](http://framework.zend.com/manual/1.12/en/zend.pdf.html) or [FPDF](http://www.fpdf.org/)\n*   PDF generation for Java. For example: [PDFBox](http://pdfbox.apache.org/), [PDFJet](http://pdfjet.com/), [JPod](http://sourceforge.net/projects/jpodlib/) or [PDF Clown](http://pdfclown.org/)\n*   PDF generation for .NET. For example: [PDFClown](http://pdfclown.org/), [PDFJet](http://pdfjet.com/), [Apose](http://www.aspose.com/.net/pdf-component.aspx) or [Foxit](https://www.foxitsoftware.com/products/sdk/generator/)\n*   Perl PDF generation, [PDF-API](http://search.cpan.org/dist/PDF-API2/), [PDF-Create](http://search.cpan.org/dist/PDF-Create/) or [PDF Template](http://search.cpan.org/dist/PDF-Template/)\n\nNowadays, I love Node JS! So I’ll show you how I recently created a generator with JavaScript for NodeJS and PhantomJS. PhantomJS?PhantomJS is a headless Webkit browser formerly written by (ex Sencha employee) Ariya Hidayat. You will need to install PhantomJS on your environment, but once installed you can run PhantomJS from your command-line. Why is this so powerful? Well you can use it, to:\n\n*   **Headless website testing**  \n    Run functional tests with frameworks such as Jasmine, QUnit, Mocha, Capybara, WebDriver, and many others.\n*   **Page automation & screenscraping**  \n    Access and manipulate webpages with the standard DOM API, or with usual libraries like jQuery.\n*   **Network monitoring**  \n    Monitor page loading and export as standard HAR files. Automate performance analysis using YSlow and Jenkins\n*   **Screen capturing**  \n    Programmatically capture web contents, including SVG and Canvas. Create web site screenshots with thumbnail preview etc\n\nThe last usecase, is where I am using it for. To let PhantomJS visit my Ext JS app, and capture the screen, by generating it to a PDF. You can run a working example via this URL: [http://ladysign.nl/pdfgenerator?page=https://www.leeboonstra.com/senchaplaces](http://ladysign.nl/pdfgenerator?page=https://www.leeboonstra.com/senchaplaces) (I’m creating a PDF of [this simple Ext app](https://www.leeboonstra.com/senchaplaces/).)\n\nNice to know, Sencha is using PhantomJS inside Sencha Cmd, for example we use it to generate images from CSS3 features that aren’t supported in legacy browsers and recently we compile Sass stylesheets with JavaScript, to production ready CSS (Fashion). How did I do this?\n\n1.  Let’s say you have an environment with Node JS and a web server with Express installed, how can you make a PDF from an Ext JS app? I’m not an Node/PhantomJS expert, but I can show you some simple steps, which you can do too!\n    \n    You will need to create a route that listens to an URL that should invoke PhantomJS. For example:\n    \n    var PdfHelp = require('./libs/pdfgenerator-help');\n    router.get('/pdfgenerator/', function(req, res){\n    \tvar pdf = new PdfHelp();\n    \tpdf.generatePdf(req, res);\n    });\n    \n2.  On your environment (dev and production), you will need to install PhantomJs, you can install it via the [npm package manager](https://www.npmjs.com/package/phantomjs): `npm install phantomjs -s`\n    \n    Once it’s installed, you can run PhantomJS JavaScript pages, by running: `phantomjs scriptname.js` from the command-line.\n    \n3.  I created a simple helper script which can listen to an argument that passes in a URL of my Sencha app. This probably doesn’t make much sense for your own app, but you will get the idea on how to do this.\n    \n    I use a Node child process, to execute PhantomJS from my environment. It passes in two arguments; the phantomjs script to execute (generate.js - see below), and in my case the URL to the Sencha app.\n    \n    var path = require('path');\n    var childProcess = require('child_process');\n    var phantomjs = require('phantomjs');\n    var binPath = phantomjs.path;\n    var childArgs = \\[\n    \tpath.join(__dirname, 'phantomjs-script.js'),\n    \t'some other argument (passed to phantomjs script)'\n    \\];\n    \n    childProcess.execFile(binPath, childArgs, function(err, stdout, stderr) {\n    \t// handle results\n    });\n    \n    You can find [my code here](https://github.com/savelee/ladysignapis/blob/master/libs/pdfgenerator-help/index.js)\n    \n4.  Here’s the phantomjs [generate](https://github.com/savelee/ladysignapis/blob/master/libs/pdfgenerator-help/libs/generate.js) script that I used:\n    \n    What’s important to know:\n    \n    *   I’m configuring the page, like paper size, margins, and headers and footers: [http://phantomjs.org/api/webpage/property/paper-size.html](http://phantomjs.org/api/webpage/property/paper-size.html)\n    *   Then I let PhantomJS open the URL to my Sencha app: [http://phantomjs.org/api/webpage/method/open.html](http://phantomjs.org/api/webpage/method/open.html)\n5.  The big magic trick here, is that you’ll need to wait till the headless browser loaded the Sencha app with the framework completely in its memory. Otherwise you would print an empty page, (because index.html files in Sencha apps are usually pretty empty, since Ext JS generates the browser DOM elements).\n    \n    Take a look into the `waitFor()` method I used. The first argument is a test function. This test function, (see line 94), tries to find the **Ext** namespace in my Sencha app. When it’s there, I still don’t want to immediately make the screenshot, because maybe my stores are not loaded yet. So I wrote another evaluation: `Ext.ComponentQuery.query('grid')[0].getStore().count();` If there is data in my store, then go ahead and generate the PDF.\n    \n    Again, this probably doesn’t make sense for your application, but you will get the idea.\n    \n6.  You render the page with `page.render('my-pdf-name.pdf');` and then you exit the phantomjs process ( `phantom.exit()`).\n    \n7.  Back into my PDF helper class, I wrote the following lines, to set the filename of the PDF and directly open it in my browser. It’s important that you set the page headers and content type to application/pdf:\n    \n    var filename = \"test.pdf\";\n    filename = encodeURIComponent(filename);\n    \n    res.setHeader('Content-disposition', 'inline; filename=\"' + filename + '\"');\n    res.setHeader('Content-type', 'application/pdf');\n    \n    var fs = require('fs');\n    fs.readFile(filename, function(err,data) {\n    \t\tres.contentType(\"application/pdf\");\n    \t\tres.end(data);\n    });\n    \n\nAnd that’s it! As you can see when using PhantomJS for visiting your Sencha app, you might want to deal with the timing issues. As by default the index.html in a Sencha app is empty, and a Sencha app is generated in the DOM.\n\nThere are lots of ways on how you can create PDFs or images from Sencha apps. Which technologies and tricks did you use?\n\n### Update:\n\nExt JS 6.2 Premium, ships with a data exporter package for grids and pivot grids. It will be possible to export all the records which are visible in a grid to: _XML, CSV, TSV, HTML_ and _Excel_ format. Shikhir Singh, lately wrote a nice post about; how to extend from Ext.grid.plugin.Exporter to easily export to PDF.[https://www.sencha.com/blog/exporting-data-from-an-ext-js-grid-to-pdf/](https://www.sencha.com/blog/exporting-data-from-an-ext-js-grid-to-pdf/)","slug":"how-tos/how-to-generate-a-sencha-app-to-pdf","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncz600zzkif5v21elr92","content":"<p>Often I get the question if it’s possible to generate a PDF from a Sencha\n  app. Well yes that’s possible, but not with Ext JS code only. Though, Ext JS\n  has an exporter, to export grid/pivot data into an XML or Excel file, and you\n  can export charts to images. Out of the box we can’t generate PDFs from full\n  Sencha apps, with the framework.</p>\n<p>What you will need is an additional script, often these solutions are\n  handled on the backend, but there are also solutions which can do this\n  client-side.</p>\n<p>To name few, see the list below. I didn’t use them all. But I’ve done it\n  before on the client-side with JavaScript, with PHP and back in the days also\n  once in Java.</p>\n<ul>\n  <li>You can generate PDFs with Node and <a href=\"http://phantomjs.org\" target=\"_blank\" rel=\"noopener\">PhantomJS</a></li>\n  <li>You can view PDFs with JavaScript on the client-side with <a href=\"https://mozilla.github.io/pdf.js/\" target=\"_blank\" rel=\"noopener\">Mozilla\n      PDF.js</a> or generate with <a href=\"https://parall.ax/products/jspdf\" target=\"_blank\" rel=\"noopener\">JSPDF</a></li>\n  <li>You can generate PDFs with PHP. For example with <a href=\"http://www.tcpdf.org/index.php\" target=\"_blank\" rel=\"noopener\">TCPDF</a>,\n    <a href=\"http://sourceforge.net/projects/html2ps/\" target=\"_blank\" rel=\"noopener\">HTML2PDF</a>, <a href=\"https://github.com/dompdf/dompdf\" target=\"_blank\" rel=\"noopener\">DOMPDF</a>,\n    <a href=\"http://framework.zend.com/manual/1.12/en/zend.pdf.html\" target=\"_blank\" rel=\"noopener\">Zend PDF</a>\n    or <a href=\"http://www.fpdf.org/\" target=\"_blank\" rel=\"noopener\">FPDF</a></li>\n  <li>PDF generation for Java. For example: <a href=\"http://pdfbox.apache.org/\" target=\"_blank\" rel=\"noopener\">PDFBox</a>,\n    <a href=\"http://pdfjet.com/\" target=\"_blank\" rel=\"noopener\">PDFJet</a>, <a href=\"http://sourceforge.net/projects/jpodlib/\" target=\"_blank\" rel=\"noopener\">JPod</a>\n    or <a href=\"http://pdfclown.org/\" target=\"_blank\" rel=\"noopener\">PDF Clown</a></li>\n  <li>PDF generation for .NET. For example: <a href=\"http://pdfclown.org/\" target=\"_blank\" rel=\"noopener\">PDFClown</a>,\n    <a href=\"http://pdfjet.com/\" target=\"_blank\" rel=\"noopener\">PDFJet</a>, <a href=\"http://www.aspose.com/.net/pdf-component.aspx\" target=\"_blank\" rel=\"noopener\">Apose</a>\n    or <a href=\"https://www.foxitsoftware.com/products/sdk/generator/\" target=\"_blank\" rel=\"noopener\">Foxit</a></li>\n  <li>Perl PDF generation, <a href=\"http://search.cpan.org/dist/PDF-API2/\" target=\"_blank\" rel=\"noopener\">PDF-API</a>,\n    <a href=\"http://search.cpan.org/dist/PDF-Create/\" target=\"_blank\" rel=\"noopener\">PDF-Create</a> or <a href=\"http://search.cpan.org/dist/PDF-Template/\" target=\"_blank\" rel=\"noopener\">PDF\n      Template</a></li>\n</ul>\n<p>Nowadays, I love Node JS! So I’ll show you how I recently created a\n  generator with JavaScript for NodeJS and PhantomJS. PhantomJS?PhantomJS is a\n  headless Webkit browser formerly written by (ex Sencha employee) Ariya\n  Hidayat. You will need to install PhantomJS on your environment, but once\n  installed you can run PhantomJS from your command-line. Why is this so\n  powerful? Well you can use it, to:</p>\n<ul>\n  <li><strong>Headless website testing</strong><br>Run functional tests with\n    frameworks such as Jasmine, QUnit, Mocha, Capybara, WebDriver, and many\n    others.</li>\n  <li><strong>Page automation &amp; screenscraping</strong><br>Access and\n    manipulate webpages with the standard DOM API, or with usual libraries like\n    jQuery.</li>\n  <li><strong>Network monitoring</strong><br>Monitor page loading and export as\n    standard HAR files. Automate performance analysis using YSlow and Jenkins</li>\n  <li><strong>Screen capturing</strong><br>Programmatically capture web\n    contents, including SVG and Canvas. Create web site screenshots with\n    thumbnail preview etc</li>\n</ul>\n<p>The last usecase, is where I am using it for. To let PhantomJS visit my Ext\n  JS app, and capture the screen, by generating it to a PDF. You can run a\n  working example via this URL: <a href=\"http://ladysign.nl/pdfgenerator?page=https://www.leeboonstra.com/senchaplaces\" target=\"_blank\" rel=\"noopener\">http://ladysign.nl/pdfgenerator?page=https://www.leeboonstra.com/senchaplaces</a>\n  (I’m creating a PDF of <a href=\"https://www.leeboonstra.com/senchaplaces/\" target=\"_blank\" rel=\"noopener\">this\n    simple Ext app</a>.)</p>\n<p>Nice to know, Sencha is using PhantomJS inside Sencha Cmd, for example we\n  use it to generate images from CSS3 features that aren’t supported in legacy\n  browsers and recently we compile Sass stylesheets with JavaScript, to\n  production ready CSS (Fashion). How did I do this?</p>\n<ol>\n  <li>\n    <p>Let’s say you have an environment with Node JS and a web server with\n      Express installed, how can you make a PDF from an Ext JS app? I’m not an\n      Node/PhantomJS expert, but I can show you some simple steps, which you\n      can do too!</p>\n    <p>You will need to create a route that listens to an URL that should\n      invoke PhantomJS. For example:</p>\n    <p>var PdfHelp = require(‘./libs/pdfgenerator-help’);\n      router.get(‘/pdfgenerator/‘, function(req, res){</p>\n    <pre><code>var pdf = new PdfHelp();\npdf.generatePdf(req, res);\n</code></pre>\n    <p>});</p>\n  </li>\n  <li>\n    <p>On your environment (dev and production), you will need to install\n      PhantomJs, you can install it via the <a href=\"https://www.npmjs.com/package/phantomjs\" target=\"_blank\" rel=\"noopener\">npm\n        package manager</a>: <code>npm install phantomjs -s</code></p>\n    <p>Once it’s installed, you can run PhantomJS JavaScript pages, by running:\n      <code>phantomjs scriptname.js</code> from the command-line.</p>\n  </li>\n  <li>\n    <p>I created a simple helper script which can listen to an argument that\n      passes in a URL of my Sencha app. This probably doesn’t make much sense\n      for your own app, but you will get the idea on how to do this.</p>\n    <p>I use a Node child process, to execute PhantomJS from my environment. It\n      passes in two arguments; the phantomjs script to execute (generate.js -\n      see below), and in my case the URL to the Sencha app.</p>\n    <p>var path = require(‘path’); var childProcess = require(‘child_process’);\n      var phantomjs = require(‘phantomjs’); var binPath = phantomjs.path; var\n      childArgs = [</p>\n    <pre><code>path.join(__dirname, &apos;phantomjs-script.js&apos;),\n&apos;some other argument (passed to phantomjs script)&apos;\n</code></pre>\n    <p>];</p>\n    <p>childProcess.execFile(binPath, childArgs, function(err, stdout, stderr)\n      {</p>\n    <pre><code>// handle results\n</code></pre>\n    <p>});</p>\n    <p>You can find <a href=\"https://github.com/savelee/ladysignapis/blob/master/libs/pdfgenerator-help/index.js\" target=\"_blank\" rel=\"noopener\">my\n        code here</a></p>\n  </li>\n  <li>\n    <p>Here’s the phantomjs <a href=\"https://github.com/savelee/ladysignapis/blob/master/libs/pdfgenerator-help/libs/generate.js\" target=\"_blank\" rel=\"noopener\">generate</a>\n      script that I used:</p>\n    <p>What’s important to know:</p>\n    <ul>\n      <li>I’m configuring the page, like paper size, margins, and headers and\n        footers: <a href=\"http://phantomjs.org/api/webpage/property/paper-size.html\" target=\"_blank\" rel=\"noopener\">http://phantomjs.org/api/webpage/property/paper-size.html</a></li>\n      <li>Then I let PhantomJS open the URL to my Sencha app: <a href=\"http://phantomjs.org/api/webpage/method/open.html\" target=\"_blank\" rel=\"noopener\">http://phantomjs.org/api/webpage/method/open.html</a></li>\n    </ul>\n  </li>\n  <li>\n    <p>The big magic trick here, is that you’ll need to wait till the headless\n      browser loaded the Sencha app with the framework completely in its\n      memory. Otherwise you would print an empty page, (because index.html\n      files in Sencha apps are usually pretty empty, since Ext JS generates the\n      browser DOM elements).</p>\n    <p>Take a look into the <code>waitFor()</code> method I used. The first\n      argument is a test function. This test function, (see line 94), tries to\n      find the <strong>Ext</strong> namespace in my Sencha app. When it’s\n      there, I still don’t want to immediately make the screenshot, because\n      maybe my stores are not loaded yet. So I wrote another evaluation: <code>Ext.ComponentQuery.query(&#39;grid&#39;)[0].getStore().count();</code>\n      If there is data in my store, then go ahead and generate the PDF.</p>\n    <p>Again, this probably doesn’t make sense for your application, but you\n      will get the idea.</p>\n  </li>\n  <li>\n    <p>You render the page with <code>page.render(&#39;my-pdf-name.pdf&#39;);</code>\n      and then you exit the phantomjs process ( <code>phantom.exit()</code>).</p>\n  </li>\n  <li>\n    <p>Back into my PDF helper class, I wrote the following lines, to set the\n      filename of the PDF and directly open it in my browser. It’s important\n      that you set the page headers and content type to application/pdf:</p>\n    <p>var filename = “test.pdf”; filename = encodeURIComponent(filename);</p>\n    <p>res.setHeader(‘Content-disposition’, ‘inline; filename=”‘ + filename +\n      ‘“‘); res.setHeader(‘Content-type’, ‘application/pdf’);</p>\n    <p>var fs = require(‘fs’); fs.readFile(filename, function(err,data) {</p>\n    <pre><code>res.contentType(&quot;application/pdf&quot;);\nres.end(data);\n</code></pre>\n    <p>});</p>\n  </li>\n</ol>\n<p>And that’s it! As you can see when using PhantomJS for visiting your Sencha\n  app, you might want to deal with the timing issues. As by default the\n  index.html in a Sencha app is empty, and a Sencha app is generated in the\n  DOM.</p>\n<p>There are lots of ways on how you can create PDFs or images from Sencha\n  apps. Which technologies and tricks did you use?</p>\n<h3 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update:\"></a>Update:</h3>\n<p>Ext JS 6.2 Premium, ships with a data exporter package for grids and pivot\n  grids. It will be possible to export all the records which are visible in a\n  grid to: <em>XML, CSV, TSV, HTML</em> and <em>Excel</em> format. Shikhir\n  Singh, lately wrote a nice post about; how to extend from\n  Ext.grid.plugin.Exporter to easily export to PDF.<a href=\"https://www.sencha.com/blog/exporting-data-from-an-ext-js-grid-to-pdf/\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/blog/exporting-data-from-an-ext-js-grid-to-pdf/</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Often I get the question if it’s possible to generate a PDF from a Sencha\n  app. Well yes that’s possible, but not with Ext JS code only. Though, Ext JS\n  has an exporter, to export grid/pivot data into an XML or Excel file, and you\n  can export charts to images. Out of the box we can’t generate PDFs from full\n  Sencha apps, with the framework.</p>\n<p>What you will need is an additional script, often these solutions are\n  handled on the backend, but there are also solutions which can do this\n  client-side.</p>\n<p>To name few, see the list below. I didn’t use them all. But I’ve done it\n  before on the client-side with JavaScript, with PHP and back in the days also\n  once in Java.</p>\n<ul>\n  <li>You can generate PDFs with Node and <a href=\"http://phantomjs.org\" target=\"_blank\" rel=\"noopener\">PhantomJS</a></li>\n  <li>You can view PDFs with JavaScript on the client-side with <a href=\"https://mozilla.github.io/pdf.js/\" target=\"_blank\" rel=\"noopener\">Mozilla\n      PDF.js</a> or generate with <a href=\"https://parall.ax/products/jspdf\" target=\"_blank\" rel=\"noopener\">JSPDF</a></li>\n  <li>You can generate PDFs with PHP. For example with <a href=\"http://www.tcpdf.org/index.php\" target=\"_blank\" rel=\"noopener\">TCPDF</a>,\n    <a href=\"http://sourceforge.net/projects/html2ps/\" target=\"_blank\" rel=\"noopener\">HTML2PDF</a>, <a href=\"https://github.com/dompdf/dompdf\" target=\"_blank\" rel=\"noopener\">DOMPDF</a>,\n    <a href=\"http://framework.zend.com/manual/1.12/en/zend.pdf.html\" target=\"_blank\" rel=\"noopener\">Zend PDF</a>\n    or <a href=\"http://www.fpdf.org/\" target=\"_blank\" rel=\"noopener\">FPDF</a></li>\n  <li>PDF generation for Java. For example: <a href=\"http://pdfbox.apache.org/\" target=\"_blank\" rel=\"noopener\">PDFBox</a>,\n    <a href=\"http://pdfjet.com/\" target=\"_blank\" rel=\"noopener\">PDFJet</a>, <a href=\"http://sourceforge.net/projects/jpodlib/\" target=\"_blank\" rel=\"noopener\">JPod</a>\n    or <a href=\"http://pdfclown.org/\" target=\"_blank\" rel=\"noopener\">PDF Clown</a></li>\n  <li>PDF generation for .NET. For example: <a href=\"http://pdfclown.org/\" target=\"_blank\" rel=\"noopener\">PDFClown</a>,\n    <a href=\"http://pdfjet.com/\" target=\"_blank\" rel=\"noopener\">PDFJet</a>, <a href=\"http://www.aspose.com/.net/pdf-component.aspx\" target=\"_blank\" rel=\"noopener\">Apose</a>\n    or <a href=\"https://www.foxitsoftware.com/products/sdk/generator/\" target=\"_blank\" rel=\"noopener\">Foxit</a></li>\n  <li>Perl PDF generation, <a href=\"http://search.cpan.org/dist/PDF-API2/\" target=\"_blank\" rel=\"noopener\">PDF-API</a>,\n    <a href=\"http://search.cpan.org/dist/PDF-Create/\" target=\"_blank\" rel=\"noopener\">PDF-Create</a> or <a href=\"http://search.cpan.org/dist/PDF-Template/\" target=\"_blank\" rel=\"noopener\">PDF\n      Template</a></li>\n</ul>\n<p>Nowadays, I love Node JS! So I’ll show you how I recently created a\n  generator with JavaScript for NodeJS and PhantomJS. PhantomJS?PhantomJS is a\n  headless Webkit browser formerly written by (ex Sencha employee) Ariya\n  Hidayat. You will need to install PhantomJS on your environment, but once\n  installed you can run PhantomJS from your command-line. Why is this so\n  powerful? Well you can use it, to:</p>\n<ul>\n  <li><strong>Headless website testing</strong><br>Run functional tests with\n    frameworks such as Jasmine, QUnit, Mocha, Capybara, WebDriver, and many\n    others.</li>\n  <li><strong>Page automation &amp; screenscraping</strong><br>Access and\n    manipulate webpages with the standard DOM API, or with usual libraries like\n    jQuery.</li>\n  <li><strong>Network monitoring</strong><br>Monitor page loading and export as\n    standard HAR files. Automate performance analysis using YSlow and Jenkins</li>\n  <li><strong>Screen capturing</strong><br>Programmatically capture web\n    contents, including SVG and Canvas. Create web site screenshots with\n    thumbnail preview etc</li>\n</ul>\n<p>The last usecase, is where I am using it for. To let PhantomJS visit my Ext\n  JS app, and capture the screen, by generating it to a PDF. You can run a\n  working example via this URL: <a href=\"http://ladysign.nl/pdfgenerator?page=https://www.leeboonstra.com/senchaplaces\" target=\"_blank\" rel=\"noopener\">http://ladysign.nl/pdfgenerator?page=https://www.leeboonstra.com/senchaplaces</a>\n  (I’m creating a PDF of <a href=\"https://www.leeboonstra.com/senchaplaces/\" target=\"_blank\" rel=\"noopener\">this\n    simple Ext app</a>.)</p>\n<p>Nice to know, Sencha is using PhantomJS inside Sencha Cmd, for example we\n  use it to generate images from CSS3 features that aren’t supported in legacy\n  browsers and recently we compile Sass stylesheets with JavaScript, to\n  production ready CSS (Fashion). How did I do this?</p>\n<ol>\n  <li>\n    <p>Let’s say you have an environment with Node JS and a web server with\n      Express installed, how can you make a PDF from an Ext JS app? I’m not an\n      Node/PhantomJS expert, but I can show you some simple steps, which you\n      can do too!</p>\n    <p>You will need to create a route that listens to an URL that should\n      invoke PhantomJS. For example:</p>\n    <p>var PdfHelp = require(‘./libs/pdfgenerator-help’);\n      router.get(‘/pdfgenerator/‘, function(req, res){</p>\n    <pre><code>var pdf = new PdfHelp();\npdf.generatePdf(req, res);\n</code></pre>\n    <p>});</p>\n  </li>\n  <li>\n    <p>On your environment (dev and production), you will need to install\n      PhantomJs, you can install it via the <a href=\"https://www.npmjs.com/package/phantomjs\" target=\"_blank\" rel=\"noopener\">npm\n        package manager</a>: <code>npm install phantomjs -s</code></p>\n    <p>Once it’s installed, you can run PhantomJS JavaScript pages, by running:\n      <code>phantomjs scriptname.js</code> from the command-line.</p>\n  </li>\n  <li>\n    <p>I created a simple helper script which can listen to an argument that\n      passes in a URL of my Sencha app. This probably doesn’t make much sense\n      for your own app, but you will get the idea on how to do this.</p>\n    <p>I use a Node child process, to execute PhantomJS from my environment. It\n      passes in two arguments; the phantomjs script to execute (generate.js -\n      see below), and in my case the URL to the Sencha app.</p>\n    <p>var path = require(‘path’); var childProcess = require(‘child_process’);\n      var phantomjs = require(‘phantomjs’); var binPath = phantomjs.path; var\n      childArgs = [</p>\n    <pre><code>path.join(__dirname, &apos;phantomjs-script.js&apos;),\n&apos;some other argument (passed to phantomjs script)&apos;\n</code></pre>\n    <p>];</p>\n    <p>childProcess.execFile(binPath, childArgs, function(err, stdout, stderr)\n      {</p>\n    <pre><code>// handle results\n</code></pre>\n    <p>});</p>\n    <p>You can find <a href=\"https://github.com/savelee/ladysignapis/blob/master/libs/pdfgenerator-help/index.js\" target=\"_blank\" rel=\"noopener\">my\n        code here</a></p>\n  </li>\n  <li>\n    <p>Here’s the phantomjs <a href=\"https://github.com/savelee/ladysignapis/blob/master/libs/pdfgenerator-help/libs/generate.js\" target=\"_blank\" rel=\"noopener\">generate</a>\n      script that I used:</p>\n    <p>What’s important to know:</p>\n    <ul>\n      <li>I’m configuring the page, like paper size, margins, and headers and\n        footers: <a href=\"http://phantomjs.org/api/webpage/property/paper-size.html\" target=\"_blank\" rel=\"noopener\">http://phantomjs.org/api/webpage/property/paper-size.html</a></li>\n      <li>Then I let PhantomJS open the URL to my Sencha app: <a href=\"http://phantomjs.org/api/webpage/method/open.html\" target=\"_blank\" rel=\"noopener\">http://phantomjs.org/api/webpage/method/open.html</a></li>\n    </ul>\n  </li>\n  <li>\n    <p>The big magic trick here, is that you’ll need to wait till the headless\n      browser loaded the Sencha app with the framework completely in its\n      memory. Otherwise you would print an empty page, (because index.html\n      files in Sencha apps are usually pretty empty, since Ext JS generates the\n      browser DOM elements).</p>\n    <p>Take a look into the <code>waitFor()</code> method I used. The first\n      argument is a test function. This test function, (see line 94), tries to\n      find the <strong>Ext</strong> namespace in my Sencha app. When it’s\n      there, I still don’t want to immediately make the screenshot, because\n      maybe my stores are not loaded yet. So I wrote another evaluation: <code>Ext.ComponentQuery.query(&#39;grid&#39;)[0].getStore().count();</code>\n      If there is data in my store, then go ahead and generate the PDF.</p>\n    <p>Again, this probably doesn’t make sense for your application, but you\n      will get the idea.</p>\n  </li>\n  <li>\n    <p>You render the page with <code>page.render(&#39;my-pdf-name.pdf&#39;);</code>\n      and then you exit the phantomjs process ( <code>phantom.exit()</code>).</p>\n  </li>\n  <li>\n    <p>Back into my PDF helper class, I wrote the following lines, to set the\n      filename of the PDF and directly open it in my browser. It’s important\n      that you set the page headers and content type to application/pdf:</p>\n    <p>var filename = “test.pdf”; filename = encodeURIComponent(filename);</p>\n    <p>res.setHeader(‘Content-disposition’, ‘inline; filename=”‘ + filename +\n      ‘“‘); res.setHeader(‘Content-type’, ‘application/pdf’);</p>\n    <p>var fs = require(‘fs’); fs.readFile(filename, function(err,data) {</p>\n    <pre><code>res.contentType(&quot;application/pdf&quot;);\nres.end(data);\n</code></pre>\n    <p>});</p>\n  </li>\n</ol>\n<p>And that’s it! As you can see when using PhantomJS for visiting your Sencha\n  app, you might want to deal with the timing issues. As by default the\n  index.html in a Sencha app is empty, and a Sencha app is generated in the\n  DOM.</p>\n<p>There are lots of ways on how you can create PDFs or images from Sencha\n  apps. Which technologies and tricks did you use?</p>\n<h3 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update:\"></a>Update:</h3>\n<p>Ext JS 6.2 Premium, ships with a data exporter package for grids and pivot\n  grids. It will be possible to export all the records which are visible in a\n  grid to: <em>XML, CSV, TSV, HTML</em> and <em>Excel</em> format. Shikhir\n  Singh, lately wrote a nice post about; how to extend from\n  Ext.grid.plugin.Exporter to easily export to PDF.<a href=\"https://www.sencha.com/blog/exporting-data-from-an-ext-js-grid-to-pdf/\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/blog/exporting-data-from-an-ext-js-grid-to-pdf/</a></p>\n"},{"title":"How to embed an Ext JS 5+ app in a div on an external app/website","url":"1607.html","id":"1607","date":"2014-09-28T09:00:14.000Z","_content":"\nSometimes, you would need to embed Sencha applications into an existing portal or CMS. (Please note, often this requires an OEM license). Since Ext JS 5 is mainly focussed on creating single page apps, this can be a tricky thing to achieve. There are a couple of solutions you could look into. - 1) Using Ext.onReady() in combination with loading ExtJS-all.js. This is the way how Sencha prototypes examples in the API docs. _It works. - But it's hard to re-use, hard to theme, and no use of Sencha Cmd._ \\- 2) Using an iframe. _For sure, the most easy solution but it's an iframe._ \\- 3) Using the multiple apps approach. _This should be the preferred Sencha way. But note, the Ext JS viewport takes over the entire screen._ The last solution could be the ideal solution. See the Sencha guides to read more about this: • \\[http://docs.sencha.com/cmd/5.x/workspaces.html\\](http://docs.sencha.com/cmd/5.x/workspaces.html) • \\[http://docs.sencha.com/cmd/5.x/advanced\\_cmd/cmd\\_multi.html\\](http://docs.sencha.com/cmd/5.x/advanced\\_cmd/cmd\\_multi.html) Since the multiple apps approach uses the Sencha viewport, the viewport will take over the entire screen, which can be something what you don't want. Unfortunately there is no out of the box solution to embed Sencha applications into div elements. There are 2 things you can do. 1) Override the `Ext.plugin.Viewport` to let it embed in HTML elements. 2) Insert the HTML parts into a Sencha Component to let it be part of a Sencha layout. ## Rendering the viewport in an HTML div element. This approach would require you to override the viewport plugin.\n\n/\\*\\*\n \\* This plugin can be applied to any \\`Component\\` (although almost always to a \\`Container\\`)\n \\* to make it fill the browser viewport. This plugin is used internally by the more familiar\n \\* \\`Ext.container.Viewport\\` class.\n \\*\n \\* The \\`Viewport\\` container is commonly used but it can be an issue if you need to fill the\n \\* viewport with a container that derives from another class (e.g., \\`Ext.tab.Panel\\`). Prior\n \\* to this plugin, you would have to do this:\n \\*\n \\*      Ext.create('Ext.container.Viewport', {\n \\*          layout: 'fit', // full the viewport with the tab panel\n \\*\n \\*          items: \\[{\n \\*              xtype: 'tabpanel',\n \\*              items: \\[{\n \\*                  ...\n \\*              }\\]\n \\*          }\\]\n \\*      });\n \\*\n \\* With this plugin you can create the \\`tabpanel\\` as the viewport:\n \\*\n \\*      Ext.create('Ext.tab.Panel', {\n \\*          plugins: 'viewport',\n \\*\n \\*          items: \\[{\n \\*              ...\n \\*          }\\]\n \\*      });\n \\*\n \\* More importantly perhaps is that as a plugin, the view class can be reused in other\n \\* contexts such as the content of a `{@link Ext.window.Window window}`.\n \\*\n \\* The Viewport renders itself to the document body, and automatically sizes itself to the size of\n \\* the browser viewport and manages window resizing. There may only be one Viewport created\n \\* in a page.\n \\*\n \\* ## Responsive Design\n \\*\n \\* This plugin enables {@link Ext.mixin.Responsive#responsiveConfig} for the target component.\n \\*\n \\* @since 5.0.0\n */\nExt.define('Demo.override.plugin.Viewport', {\n    override: 'Ext.plugin.Viewport',\n\n    alias: 'plugin.viewport',\n\n    /\\*\\*\n     \\* @cfg {Number} \\[maxUserScale=1\\]\n     \\* The maximum zoom scale. Only applicable for touch devices. Set this to 1 to\n     \\* disable zooming.  Setting this to any value other than \"1\" will disable all\n     \\* multi-touch gestures.\n     */\n\n    setCmp: function (cmp) {\n        this.cmp = cmp;\n\n        if (cmp && !cmp.isViewport) {\n            this.decorate(cmp);\n            if (cmp.renderConfigs) {\n                cmp.flushRenderConfigs();\n            }\n            cmp.setupViewport();\n        }\n    },\n\n    statics: {\n        decorate: function (target) {\n            Ext.applyIf(target.prototype || target, {\n                ariaRole: 'application',\n\n                viewportCls: Ext.baseCSSPrefix + 'viewport'\n            });\n\n            Ext.override(target, {\n                isViewport: true,\n\n                preserveElOnDestroy: true,\n\n                initComponent : function() {\n                    this.callParent();\n                    this.setupViewport();\n                },\n\n                handleViewportResize: function () {\n                    var me = this,\n                        Element = Ext.dom.Element,\n                        width = Element.getViewportWidth(),\n                        height = Element.getViewportHeight();\n\n                    if (width != me.width || height != me.height) {\n                        me.setSize(width, height);\n                    }\n                },\n\n                setupViewport : function() {\n\n                    var me = this,\n\t\t\t\t\t\ttargetEl = me.renderTo,\n                        el;\n\n\t\t\t\t\tif(targetEl){\n\t\t\t\t\t\tel = me.el = Ext.get(targetEl);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tel = me.el = Ext.getBody();\n\t\t\t\t\t}\n\n                    // Get the DOM disruption over with before the Viewport renders and begins a layout\n                    Ext.getScrollbarSize();\n\n                    // Clear any dimensions, we will size later on\n                    me.width = me.height = undefined;\n\n\t\t\t\t\t// Andrea: Need to comment this\n                    //Ext.fly(el).addCls(me.viewportCls);\n                    el.setHeight = el.setWidth = Ext.emptyFn;\n                    el.dom.scroll = 'no';\n                    me.allowDomMove = false;\n                    me.renderTo = el;\n\n                    if (Ext.supports.Touch) {\n                        me.initMeta();\n                    }\n                },\n\n                afterLayout: function(layout) {\n                    if (Ext.supports.Touch) {\n                        this.el.scrollTop = 0;\n                    }\n                    this.callParent(\\[layout\\]);\n                },\n\n                onRender: function() {\n                    var me = this,\n\t\t\t\t\t\tel = me.el;\n\n                    me.callParent(arguments);\n\n                    // Important to start life as the proper size (to avoid extra layouts)\n                    // But after render so that the size is not stamped into the body\n                    me.width = el.getWidth();\n                    me.height = el.getHeight();\n\n                    // prevent touchmove from panning the viewport in mobile safari\n                    if (Ext.supports.TouchEvents) {\n                        me.mon(el, {\n                            touchmove: function(e) {\n                                e.preventDefault();\n                            },\n                            translate: false,\n                            delegated: false\n                        });\n                    }\n                },\n\n                initInheritedState: function (inheritedState, inheritedStateInner) {\n                    var me = this,\n                        root = Ext.rootInheritedState;\n\n                    if (inheritedState !== root) {\n                        // We need to go at this again but with the rootInheritedState object. Let\n                        // any derived class poke on the proper object!\n                        me.initInheritedState(me.inheritedState = root,\n                            me.inheritedStateInner = Ext.Object.chain(root));\n                    } else {\n                        me.callParent(\\[inheritedState, inheritedStateInner\\]);\n                    }\n                },\n\n                beforeDestroy: function(){\n                    var me = this,\n                        root = Ext.rootInheritedState,\n                        key;\n\n                    // Clear any properties from the inheritedState so we don't pollute the\n                    // global namespace. If we have a rtl flag set, leave it alone because it's\n                    // likely we didn't write it\n                    for (key in root) {\n                        if (key !== 'rtl') {\n                            delete root\\[key\\];\n                        }\n                    }\n\n                    me.removeUIFromElement();\n                    me.el.removeCls(me.baseCls);\n                    Ext.fly(document.body.parentNode).removeCls(me.viewportCls);\n                    me.callParent();\n                },\n\n                addMeta: function(name, content) {\n                    var meta = document.createElement('meta');\n\n                    meta.setAttribute('name', name);\n                    meta.setAttribute('content', content);\n                    Ext.getHead().appendChild(meta);\n                },\n\n                initMeta: function() {\n                    var me = this,\n                        maxScale = me.maxUserScale || 1;\n\n                    me.addMeta('viewport', 'width=device-width, initial-scale=1, maximum-scale=' +\n                           maxScale + ', user-scalable=' + (maxScale !== 1 ? 'yes' : 'no'));\n                    me.addMeta('apple-mobile-web-app-capable', 'yes');\n                },\n\n                privates: {\n                    // override here to prevent an extraneous warning\n                    applyTargetCls: function (targetCls) {\n                        this.el.addCls(targetCls);\n                    },\n                    \n                    // Override here to prevent tabIndex set/reset on the body\n                    disableTabbing: function() {\n                        var el = this.el;\n                        \n                        if (el) {\n                            el.saveChildrenTabbableState();\n                        }\n                    },\n                    \n                    enableTabbing: function() {\n                        var el = this.el;\n                        \n                        if (el) {\n                            el.restoreChildrenTabbableState();\n                        }\n                    },\n\n                    getOverflowEl: function() {\n                        return Ext.get(document.documentElement);\n                    }\n                }\n            });\n        }\n    },\n\n    privates: {\n        updateResponsiveState: function () {\n            /\\* Andrea: Need to comment this for now, otherwise stretching In and Out\n \t\t\t \\* the browser will make the viewport full screen again. */\n            //this.cmp.handleViewportResize();\n            //this.callParent();\n        }\n    }\n},\nfunction (Viewport) {\n    Viewport.prototype.decorate = Viewport.decorate;\n});\n\nThe \\*\\*app.js\\*\\* should disable the \\`autoCreateViewport\\`, and in your app \\`launch\\` method, you should create the main interface like this:\n\nExt.create('MyApp.view.main.Main',{\n   requires: \\['Ext.plugin.Viewport'\\],\n   renderTo: 'mydiv',\n   plugins: \\[{\n    ptype: 'viewport'\n   }\\]\n});\n\nPlease note, this is just a quick code example, I'm not sure if it's 100% functional. ## Rendering contents in the viewport As an alternative to the viewport take over, and rending the contents in a div. You could also render the HTML parts in the viewport. (so the otherway arround). Such an example can be found in the Ext JS 5 example apps: • \\[http://dev.sencha.com/ext/5.0.1/examples/calendar/index.html\\](http://dev.sencha.com/ext/5.0.1/examples/calendar/index.html) This might be a nice example for you to inspect as well. The \\*\\*index.html\\*\\* includes the full \\`ext-all\\` framework. (they also have some magic, in using various themes, please see \\*\\*shared/include-ext.js\\*\\*) Index.html has also also it's own header. The trick here, will be to use \\`contentEl\\`, to extract that HTML part and insert it into an Ext JS Component, so it can be part of the Sencha (border) layout. (contentEl, should point to an html id). Open \\*\\*src/App.js\\*\\*, and notice how they create a new viewport in the constructor. Note: By using the contentEl, the header will be overridden with Sencha styles. You will need to tweak the styling probably. I hope these ideas can help you further!","source":"_drafts/how-tos/how-to-embed-an-ext-js-5-app-in-a-div-on-an-external-appwebsite.md","raw":"---\ntitle: How to embed an Ext JS 5+ app in a div on an external app/website\ntags:\n  - embed\n  - ext js 5\n  - ext js 6\n  - external\nurl: 1607.html\nid: 1607\ncategories:\n  - Ext JS 5 &amp; 6\n  - Questions\ndate: 2014-09-28 11:00:14\n---\n\nSometimes, you would need to embed Sencha applications into an existing portal or CMS. (Please note, often this requires an OEM license). Since Ext JS 5 is mainly focussed on creating single page apps, this can be a tricky thing to achieve. There are a couple of solutions you could look into. - 1) Using Ext.onReady() in combination with loading ExtJS-all.js. This is the way how Sencha prototypes examples in the API docs. _It works. - But it's hard to re-use, hard to theme, and no use of Sencha Cmd._ \\- 2) Using an iframe. _For sure, the most easy solution but it's an iframe._ \\- 3) Using the multiple apps approach. _This should be the preferred Sencha way. But note, the Ext JS viewport takes over the entire screen._ The last solution could be the ideal solution. See the Sencha guides to read more about this: • \\[http://docs.sencha.com/cmd/5.x/workspaces.html\\](http://docs.sencha.com/cmd/5.x/workspaces.html) • \\[http://docs.sencha.com/cmd/5.x/advanced\\_cmd/cmd\\_multi.html\\](http://docs.sencha.com/cmd/5.x/advanced\\_cmd/cmd\\_multi.html) Since the multiple apps approach uses the Sencha viewport, the viewport will take over the entire screen, which can be something what you don't want. Unfortunately there is no out of the box solution to embed Sencha applications into div elements. There are 2 things you can do. 1) Override the `Ext.plugin.Viewport` to let it embed in HTML elements. 2) Insert the HTML parts into a Sencha Component to let it be part of a Sencha layout. ## Rendering the viewport in an HTML div element. This approach would require you to override the viewport plugin.\n\n/\\*\\*\n \\* This plugin can be applied to any \\`Component\\` (although almost always to a \\`Container\\`)\n \\* to make it fill the browser viewport. This plugin is used internally by the more familiar\n \\* \\`Ext.container.Viewport\\` class.\n \\*\n \\* The \\`Viewport\\` container is commonly used but it can be an issue if you need to fill the\n \\* viewport with a container that derives from another class (e.g., \\`Ext.tab.Panel\\`). Prior\n \\* to this plugin, you would have to do this:\n \\*\n \\*      Ext.create('Ext.container.Viewport', {\n \\*          layout: 'fit', // full the viewport with the tab panel\n \\*\n \\*          items: \\[{\n \\*              xtype: 'tabpanel',\n \\*              items: \\[{\n \\*                  ...\n \\*              }\\]\n \\*          }\\]\n \\*      });\n \\*\n \\* With this plugin you can create the \\`tabpanel\\` as the viewport:\n \\*\n \\*      Ext.create('Ext.tab.Panel', {\n \\*          plugins: 'viewport',\n \\*\n \\*          items: \\[{\n \\*              ...\n \\*          }\\]\n \\*      });\n \\*\n \\* More importantly perhaps is that as a plugin, the view class can be reused in other\n \\* contexts such as the content of a `{@link Ext.window.Window window}`.\n \\*\n \\* The Viewport renders itself to the document body, and automatically sizes itself to the size of\n \\* the browser viewport and manages window resizing. There may only be one Viewport created\n \\* in a page.\n \\*\n \\* ## Responsive Design\n \\*\n \\* This plugin enables {@link Ext.mixin.Responsive#responsiveConfig} for the target component.\n \\*\n \\* @since 5.0.0\n */\nExt.define('Demo.override.plugin.Viewport', {\n    override: 'Ext.plugin.Viewport',\n\n    alias: 'plugin.viewport',\n\n    /\\*\\*\n     \\* @cfg {Number} \\[maxUserScale=1\\]\n     \\* The maximum zoom scale. Only applicable for touch devices. Set this to 1 to\n     \\* disable zooming.  Setting this to any value other than \"1\" will disable all\n     \\* multi-touch gestures.\n     */\n\n    setCmp: function (cmp) {\n        this.cmp = cmp;\n\n        if (cmp && !cmp.isViewport) {\n            this.decorate(cmp);\n            if (cmp.renderConfigs) {\n                cmp.flushRenderConfigs();\n            }\n            cmp.setupViewport();\n        }\n    },\n\n    statics: {\n        decorate: function (target) {\n            Ext.applyIf(target.prototype || target, {\n                ariaRole: 'application',\n\n                viewportCls: Ext.baseCSSPrefix + 'viewport'\n            });\n\n            Ext.override(target, {\n                isViewport: true,\n\n                preserveElOnDestroy: true,\n\n                initComponent : function() {\n                    this.callParent();\n                    this.setupViewport();\n                },\n\n                handleViewportResize: function () {\n                    var me = this,\n                        Element = Ext.dom.Element,\n                        width = Element.getViewportWidth(),\n                        height = Element.getViewportHeight();\n\n                    if (width != me.width || height != me.height) {\n                        me.setSize(width, height);\n                    }\n                },\n\n                setupViewport : function() {\n\n                    var me = this,\n\t\t\t\t\t\ttargetEl = me.renderTo,\n                        el;\n\n\t\t\t\t\tif(targetEl){\n\t\t\t\t\t\tel = me.el = Ext.get(targetEl);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tel = me.el = Ext.getBody();\n\t\t\t\t\t}\n\n                    // Get the DOM disruption over with before the Viewport renders and begins a layout\n                    Ext.getScrollbarSize();\n\n                    // Clear any dimensions, we will size later on\n                    me.width = me.height = undefined;\n\n\t\t\t\t\t// Andrea: Need to comment this\n                    //Ext.fly(el).addCls(me.viewportCls);\n                    el.setHeight = el.setWidth = Ext.emptyFn;\n                    el.dom.scroll = 'no';\n                    me.allowDomMove = false;\n                    me.renderTo = el;\n\n                    if (Ext.supports.Touch) {\n                        me.initMeta();\n                    }\n                },\n\n                afterLayout: function(layout) {\n                    if (Ext.supports.Touch) {\n                        this.el.scrollTop = 0;\n                    }\n                    this.callParent(\\[layout\\]);\n                },\n\n                onRender: function() {\n                    var me = this,\n\t\t\t\t\t\tel = me.el;\n\n                    me.callParent(arguments);\n\n                    // Important to start life as the proper size (to avoid extra layouts)\n                    // But after render so that the size is not stamped into the body\n                    me.width = el.getWidth();\n                    me.height = el.getHeight();\n\n                    // prevent touchmove from panning the viewport in mobile safari\n                    if (Ext.supports.TouchEvents) {\n                        me.mon(el, {\n                            touchmove: function(e) {\n                                e.preventDefault();\n                            },\n                            translate: false,\n                            delegated: false\n                        });\n                    }\n                },\n\n                initInheritedState: function (inheritedState, inheritedStateInner) {\n                    var me = this,\n                        root = Ext.rootInheritedState;\n\n                    if (inheritedState !== root) {\n                        // We need to go at this again but with the rootInheritedState object. Let\n                        // any derived class poke on the proper object!\n                        me.initInheritedState(me.inheritedState = root,\n                            me.inheritedStateInner = Ext.Object.chain(root));\n                    } else {\n                        me.callParent(\\[inheritedState, inheritedStateInner\\]);\n                    }\n                },\n\n                beforeDestroy: function(){\n                    var me = this,\n                        root = Ext.rootInheritedState,\n                        key;\n\n                    // Clear any properties from the inheritedState so we don't pollute the\n                    // global namespace. If we have a rtl flag set, leave it alone because it's\n                    // likely we didn't write it\n                    for (key in root) {\n                        if (key !== 'rtl') {\n                            delete root\\[key\\];\n                        }\n                    }\n\n                    me.removeUIFromElement();\n                    me.el.removeCls(me.baseCls);\n                    Ext.fly(document.body.parentNode).removeCls(me.viewportCls);\n                    me.callParent();\n                },\n\n                addMeta: function(name, content) {\n                    var meta = document.createElement('meta');\n\n                    meta.setAttribute('name', name);\n                    meta.setAttribute('content', content);\n                    Ext.getHead().appendChild(meta);\n                },\n\n                initMeta: function() {\n                    var me = this,\n                        maxScale = me.maxUserScale || 1;\n\n                    me.addMeta('viewport', 'width=device-width, initial-scale=1, maximum-scale=' +\n                           maxScale + ', user-scalable=' + (maxScale !== 1 ? 'yes' : 'no'));\n                    me.addMeta('apple-mobile-web-app-capable', 'yes');\n                },\n\n                privates: {\n                    // override here to prevent an extraneous warning\n                    applyTargetCls: function (targetCls) {\n                        this.el.addCls(targetCls);\n                    },\n                    \n                    // Override here to prevent tabIndex set/reset on the body\n                    disableTabbing: function() {\n                        var el = this.el;\n                        \n                        if (el) {\n                            el.saveChildrenTabbableState();\n                        }\n                    },\n                    \n                    enableTabbing: function() {\n                        var el = this.el;\n                        \n                        if (el) {\n                            el.restoreChildrenTabbableState();\n                        }\n                    },\n\n                    getOverflowEl: function() {\n                        return Ext.get(document.documentElement);\n                    }\n                }\n            });\n        }\n    },\n\n    privates: {\n        updateResponsiveState: function () {\n            /\\* Andrea: Need to comment this for now, otherwise stretching In and Out\n \t\t\t \\* the browser will make the viewport full screen again. */\n            //this.cmp.handleViewportResize();\n            //this.callParent();\n        }\n    }\n},\nfunction (Viewport) {\n    Viewport.prototype.decorate = Viewport.decorate;\n});\n\nThe \\*\\*app.js\\*\\* should disable the \\`autoCreateViewport\\`, and in your app \\`launch\\` method, you should create the main interface like this:\n\nExt.create('MyApp.view.main.Main',{\n   requires: \\['Ext.plugin.Viewport'\\],\n   renderTo: 'mydiv',\n   plugins: \\[{\n    ptype: 'viewport'\n   }\\]\n});\n\nPlease note, this is just a quick code example, I'm not sure if it's 100% functional. ## Rendering contents in the viewport As an alternative to the viewport take over, and rending the contents in a div. You could also render the HTML parts in the viewport. (so the otherway arround). Such an example can be found in the Ext JS 5 example apps: • \\[http://dev.sencha.com/ext/5.0.1/examples/calendar/index.html\\](http://dev.sencha.com/ext/5.0.1/examples/calendar/index.html) This might be a nice example for you to inspect as well. The \\*\\*index.html\\*\\* includes the full \\`ext-all\\` framework. (they also have some magic, in using various themes, please see \\*\\*shared/include-ext.js\\*\\*) Index.html has also also it's own header. The trick here, will be to use \\`contentEl\\`, to extract that HTML part and insert it into an Ext JS Component, so it can be part of the Sencha (border) layout. (contentEl, should point to an html id). Open \\*\\*src/App.js\\*\\*, and notice how they create a new viewport in the constructor. Note: By using the contentEl, the header will be overridden with Sencha styles. You will need to tweak the styling probably. I hope these ideas can help you further!","slug":"how-tos/how-to-embed-an-ext-js-5-app-in-a-div-on-an-external-appwebsite","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncz80102kif51i6yjk67","content":"<p>Sometimes, you would need to embed Sencha applications into an existing\n  portal or CMS. (Please note, often this requires an OEM license). Since Ext\n  JS 5 is mainly focussed on creating single page apps, this can be a tricky\n  thing to achieve. There are a couple of solutions you could look into. - 1)\n  Using Ext.onReady() in combination with loading ExtJS-all.js. This is the way\n  how Sencha prototypes examples in the API docs. <em>It works. - But it’s hard\n    to re-use, hard to theme, and no use of Sencha Cmd.</em> - 2) Using an\n  iframe. <em>For sure, the most easy solution but it’s an iframe.</em> - 3)\n  Using the multiple apps approach. <em>This should be the preferred Sencha\n    way. But note, the Ext JS viewport takes over the entire screen.</em> The\n  last solution could be the ideal solution. See the Sencha guides to read more\n  about this: • [<a href=\"http://docs.sencha.com/cmd/5.x/workspaces.html\\](http://docs.sencha.com/cmd/5.x/workspaces.html)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/5.x/workspaces.html\\](http://docs.sencha.com/cmd/5.x/workspaces.html)</a>\n  • [<a href=\"http://docs.sencha.com/cmd/5.x/advanced\\_cmd/cmd\\_multi.html\\](http://docs.sencha.com/cmd/5.x/advanced\\_cmd/cmd\\_multi.html)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/5.x/advanced\\_cmd/cmd\\_multi.html\\](http://docs.sencha.com/cmd/5.x/advanced\\_cmd/cmd\\_multi.html)</a>\n  Since the multiple apps approach uses the Sencha viewport, the viewport will\n  take over the entire screen, which can be something what you don’t want.\n  Unfortunately there is no out of the box solution to embed Sencha\n  applications into div elements. There are 2 things you can do. 1) Override\n  the <code>Ext.plugin.Viewport</code> to let it embed in HTML elements. 2)\n  Insert the HTML parts into a Sencha Component to let it be part of a Sencha\n  layout. ## Rendering the viewport in an HTML div element. This approach would\n  require you to override the viewport plugin.</p>\n<p>/** * This plugin can be applied to any `Component` (although almost always\n  to a `Container`) * to make it fill the browser viewport. This plugin is used\n  internally by the more familiar * `Ext.container.Viewport` class. * * The\n  `Viewport` container is commonly used but it can be an issue if you need to\n  fill the * viewport with a container that derives from another class (e.g.,\n  `Ext.tab.Panel`). Prior * to this plugin, you would have to do this: * *\n  Ext.create(‘Ext.container.Viewport’, { * layout: ‘fit’, // full the viewport\n  with the tab panel * * items: [{ * xtype: ‘tabpanel’, * items: [{ * … * }] *\n  }] * }); * * With this plugin you can create the `tabpanel` as the viewport:\n  * * Ext.create(‘Ext.tab.Panel’, { * plugins: ‘viewport’, * * items: [{ * … *\n  }] * }); * * More importantly perhaps is that as a plugin, the view class can\n  be reused in other * contexts such as the content of a <code>{@link\n    Ext.window.Window window}</code>. * * The Viewport renders itself to the\n  document body, and automatically sizes itself to the size of * the browser\n  viewport and manages window resizing. There may only be one Viewport created\n  * in a page. * * ## Responsive Design * * This plugin enables {@link\n  Ext.mixin.Responsive#responsiveConfig} for the target component. * * @since\n  5.0.0 */ Ext.define(‘Demo.override.plugin.Viewport’, { override:\n  ‘Ext.plugin.Viewport’,</p>\n<pre><code>alias: &apos;plugin.viewport&apos;,\n\n/\\*\\*\n \\* @cfg {Number} \\[maxUserScale=1\\]\n \\* The maximum zoom scale. Only applicable for touch devices. Set this to 1 to\n \\* disable zooming.  Setting this to any value other than &quot;1&quot; will disable all\n \\* multi-touch gestures.\n */\n\nsetCmp: function (cmp) {\n    this.cmp = cmp;\n\n    if (cmp &amp;&amp; !cmp.isViewport) {\n        this.decorate(cmp);\n        if (cmp.renderConfigs) {\n            cmp.flushRenderConfigs();\n        }\n        cmp.setupViewport();\n    }\n},\n\nstatics: {\n    decorate: function (target) {\n        Ext.applyIf(target.prototype || target, {\n            ariaRole: &apos;application&apos;,\n\n            viewportCls: Ext.baseCSSPrefix + &apos;viewport&apos;\n        });\n\n        Ext.override(target, {\n            isViewport: true,\n\n            preserveElOnDestroy: true,\n\n            initComponent : function() {\n                this.callParent();\n                this.setupViewport();\n            },\n\n            handleViewportResize: function () {\n                var me = this,\n                    Element = Ext.dom.Element,\n                    width = Element.getViewportWidth(),\n                    height = Element.getViewportHeight();\n\n                if (width != me.width || height != me.height) {\n                    me.setSize(width, height);\n                }\n            },\n\n            setupViewport : function() {\n\n                var me = this,\n                    targetEl = me.renderTo,\n                    el;\n\n                if(targetEl){\n                    el = me.el = Ext.get(targetEl);\n                }\n                else {\n                    el = me.el = Ext.getBody();\n                }\n\n                // Get the DOM disruption over with before the Viewport renders and begins a layout\n                Ext.getScrollbarSize();\n\n                // Clear any dimensions, we will size later on\n                me.width = me.height = undefined;\n\n                // Andrea: Need to comment this\n                //Ext.fly(el).addCls(me.viewportCls);\n                el.setHeight = el.setWidth = Ext.emptyFn;\n                el.dom.scroll = &apos;no&apos;;\n                me.allowDomMove = false;\n                me.renderTo = el;\n\n                if (Ext.supports.Touch) {\n                    me.initMeta();\n                }\n            },\n\n            afterLayout: function(layout) {\n                if (Ext.supports.Touch) {\n                    this.el.scrollTop = 0;\n                }\n                this.callParent(\\[layout\\]);\n            },\n\n            onRender: function() {\n                var me = this,\n                    el = me.el;\n\n                me.callParent(arguments);\n\n                // Important to start life as the proper size (to avoid extra layouts)\n                // But after render so that the size is not stamped into the body\n                me.width = el.getWidth();\n                me.height = el.getHeight();\n\n                // prevent touchmove from panning the viewport in mobile safari\n                if (Ext.supports.TouchEvents) {\n                    me.mon(el, {\n                        touchmove: function(e) {\n                            e.preventDefault();\n                        },\n                        translate: false,\n                        delegated: false\n                    });\n                }\n            },\n\n            initInheritedState: function (inheritedState, inheritedStateInner) {\n                var me = this,\n                    root = Ext.rootInheritedState;\n\n                if (inheritedState !== root) {\n                    // We need to go at this again but with the rootInheritedState object. Let\n                    // any derived class poke on the proper object!\n                    me.initInheritedState(me.inheritedState = root,\n                        me.inheritedStateInner = Ext.Object.chain(root));\n                } else {\n                    me.callParent(\\[inheritedState, inheritedStateInner\\]);\n                }\n            },\n\n            beforeDestroy: function(){\n                var me = this,\n                    root = Ext.rootInheritedState,\n                    key;\n\n                // Clear any properties from the inheritedState so we don&apos;t pollute the\n                // global namespace. If we have a rtl flag set, leave it alone because it&apos;s\n                // likely we didn&apos;t write it\n                for (key in root) {\n                    if (key !== &apos;rtl&apos;) {\n                        delete root\\[key\\];\n                    }\n                }\n\n                me.removeUIFromElement();\n                me.el.removeCls(me.baseCls);\n                Ext.fly(document.body.parentNode).removeCls(me.viewportCls);\n                me.callParent();\n            },\n\n            addMeta: function(name, content) {\n                var meta = document.createElement(&apos;meta&apos;);\n\n                meta.setAttribute(&apos;name&apos;, name);\n                meta.setAttribute(&apos;content&apos;, content);\n                Ext.getHead().appendChild(meta);\n            },\n\n            initMeta: function() {\n                var me = this,\n                    maxScale = me.maxUserScale || 1;\n\n                me.addMeta(&apos;viewport&apos;, &apos;width=device-width, initial-scale=1, maximum-scale=&apos; +\n                       maxScale + &apos;, user-scalable=&apos; + (maxScale !== 1 ? &apos;yes&apos; : &apos;no&apos;));\n                me.addMeta(&apos;apple-mobile-web-app-capable&apos;, &apos;yes&apos;);\n            },\n\n            privates: {\n                // override here to prevent an extraneous warning\n                applyTargetCls: function (targetCls) {\n                    this.el.addCls(targetCls);\n                },\n\n                // Override here to prevent tabIndex set/reset on the body\n                disableTabbing: function() {\n                    var el = this.el;\n\n                    if (el) {\n                        el.saveChildrenTabbableState();\n                    }\n                },\n\n                enableTabbing: function() {\n                    var el = this.el;\n\n                    if (el) {\n                        el.restoreChildrenTabbableState();\n                    }\n                },\n\n                getOverflowEl: function() {\n                    return Ext.get(document.documentElement);\n                }\n            }\n        });\n    }\n},\n\nprivates: {\n    updateResponsiveState: function () {\n        /\\* Andrea: Need to comment this for now, otherwise stretching In and Out\n          \\* the browser will make the viewport full screen again. */\n        //this.cmp.handleViewportResize();\n        //this.callParent();\n    }\n}\n</code></pre>\n<p>}, function (Viewport) { Viewport.prototype.decorate = Viewport.decorate;\n  });</p>\n<p>The **app.js** should disable the `autoCreateViewport`, and in your app\n  `launch` method, you should create the main interface like this:</p>\n<p>Ext.create(‘MyApp.view.main.Main’,{ requires: [‘Ext.plugin.Viewport’],\n  renderTo: ‘mydiv’, plugins: [{ ptype: ‘viewport’ }] });</p>\n<p>Please note, this is just a quick code example, I’m not sure if it’s 100%\n  functional. ## Rendering contents in the viewport As an alternative to the\n  viewport take over, and rending the contents in a div. You could also render\n  the HTML parts in the viewport. (so the otherway arround). Such an example\n  can be found in the Ext JS 5 example apps: • [<a href=\"http://dev.sencha.com/ext/5.0.1/examples/calendar/index.html\\](http://dev.sencha.com/ext/5.0.1/examples/calendar/index.html)\" target=\"_blank\" rel=\"noopener\">http://dev.sencha.com/ext/5.0.1/examples/calendar/index.html\\](http://dev.sencha.com/ext/5.0.1/examples/calendar/index.html)</a>\n  This might be a nice example for you to inspect as well. The **index.html**\n  includes the full `ext-all` framework. (they also have some magic, in using\n  various themes, please see **shared/include-ext.js**) Index.html has also\n  also it’s own header. The trick here, will be to use `contentEl`, to extract\n  that HTML part and insert it into an Ext JS Component, so it can be part of\n  the Sencha (border) layout. (contentEl, should point to an html id). Open\n  **src/App.js**, and notice how they create a new viewport in the constructor.\n  Note: By using the contentEl, the header will be overridden with Sencha\n  styles. You will need to tweak the styling probably. I hope these ideas can\n  help you further!</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Sometimes, you would need to embed Sencha applications into an existing\n  portal or CMS. (Please note, often this requires an OEM license). Since Ext\n  JS 5 is mainly focussed on creating single page apps, this can be a tricky\n  thing to achieve. There are a couple of solutions you could look into. - 1)\n  Using Ext.onReady() in combination with loading ExtJS-all.js. This is the way\n  how Sencha prototypes examples in the API docs. <em>It works. - But it’s hard\n    to re-use, hard to theme, and no use of Sencha Cmd.</em> - 2) Using an\n  iframe. <em>For sure, the most easy solution but it’s an iframe.</em> - 3)\n  Using the multiple apps approach. <em>This should be the preferred Sencha\n    way. But note, the Ext JS viewport takes over the entire screen.</em> The\n  last solution could be the ideal solution. See the Sencha guides to read more\n  about this: • [<a href=\"http://docs.sencha.com/cmd/5.x/workspaces.html\\](http://docs.sencha.com/cmd/5.x/workspaces.html)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/5.x/workspaces.html\\](http://docs.sencha.com/cmd/5.x/workspaces.html)</a>\n  • [<a href=\"http://docs.sencha.com/cmd/5.x/advanced\\_cmd/cmd\\_multi.html\\](http://docs.sencha.com/cmd/5.x/advanced\\_cmd/cmd\\_multi.html)\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/5.x/advanced\\_cmd/cmd\\_multi.html\\](http://docs.sencha.com/cmd/5.x/advanced\\_cmd/cmd\\_multi.html)</a>\n  Since the multiple apps approach uses the Sencha viewport, the viewport will\n  take over the entire screen, which can be something what you don’t want.\n  Unfortunately there is no out of the box solution to embed Sencha\n  applications into div elements. There are 2 things you can do. 1) Override\n  the <code>Ext.plugin.Viewport</code> to let it embed in HTML elements. 2)\n  Insert the HTML parts into a Sencha Component to let it be part of a Sencha\n  layout. ## Rendering the viewport in an HTML div element. This approach would\n  require you to override the viewport plugin.</p>\n<p>/** * This plugin can be applied to any `Component` (although almost always\n  to a `Container`) * to make it fill the browser viewport. This plugin is used\n  internally by the more familiar * `Ext.container.Viewport` class. * * The\n  `Viewport` container is commonly used but it can be an issue if you need to\n  fill the * viewport with a container that derives from another class (e.g.,\n  `Ext.tab.Panel`). Prior * to this plugin, you would have to do this: * *\n  Ext.create(‘Ext.container.Viewport’, { * layout: ‘fit’, // full the viewport\n  with the tab panel * * items: [{ * xtype: ‘tabpanel’, * items: [{ * … * }] *\n  }] * }); * * With this plugin you can create the `tabpanel` as the viewport:\n  * * Ext.create(‘Ext.tab.Panel’, { * plugins: ‘viewport’, * * items: [{ * … *\n  }] * }); * * More importantly perhaps is that as a plugin, the view class can\n  be reused in other * contexts such as the content of a <code>{@link\n    Ext.window.Window window}</code>. * * The Viewport renders itself to the\n  document body, and automatically sizes itself to the size of * the browser\n  viewport and manages window resizing. There may only be one Viewport created\n  * in a page. * * ## Responsive Design * * This plugin enables {@link\n  Ext.mixin.Responsive#responsiveConfig} for the target component. * * @since\n  5.0.0 */ Ext.define(‘Demo.override.plugin.Viewport’, { override:\n  ‘Ext.plugin.Viewport’,</p>\n<pre><code>alias: &apos;plugin.viewport&apos;,\n\n/\\*\\*\n \\* @cfg {Number} \\[maxUserScale=1\\]\n \\* The maximum zoom scale. Only applicable for touch devices. Set this to 1 to\n \\* disable zooming.  Setting this to any value other than &quot;1&quot; will disable all\n \\* multi-touch gestures.\n */\n\nsetCmp: function (cmp) {\n    this.cmp = cmp;\n\n    if (cmp &amp;&amp; !cmp.isViewport) {\n        this.decorate(cmp);\n        if (cmp.renderConfigs) {\n            cmp.flushRenderConfigs();\n        }\n        cmp.setupViewport();\n    }\n},\n\nstatics: {\n    decorate: function (target) {\n        Ext.applyIf(target.prototype || target, {\n            ariaRole: &apos;application&apos;,\n\n            viewportCls: Ext.baseCSSPrefix + &apos;viewport&apos;\n        });\n\n        Ext.override(target, {\n            isViewport: true,\n\n            preserveElOnDestroy: true,\n\n            initComponent : function() {\n                this.callParent();\n                this.setupViewport();\n            },\n\n            handleViewportResize: function () {\n                var me = this,\n                    Element = Ext.dom.Element,\n                    width = Element.getViewportWidth(),\n                    height = Element.getViewportHeight();\n\n                if (width != me.width || height != me.height) {\n                    me.setSize(width, height);\n                }\n            },\n\n            setupViewport : function() {\n\n                var me = this,\n                    targetEl = me.renderTo,\n                    el;\n\n                if(targetEl){\n                    el = me.el = Ext.get(targetEl);\n                }\n                else {\n                    el = me.el = Ext.getBody();\n                }\n\n                // Get the DOM disruption over with before the Viewport renders and begins a layout\n                Ext.getScrollbarSize();\n\n                // Clear any dimensions, we will size later on\n                me.width = me.height = undefined;\n\n                // Andrea: Need to comment this\n                //Ext.fly(el).addCls(me.viewportCls);\n                el.setHeight = el.setWidth = Ext.emptyFn;\n                el.dom.scroll = &apos;no&apos;;\n                me.allowDomMove = false;\n                me.renderTo = el;\n\n                if (Ext.supports.Touch) {\n                    me.initMeta();\n                }\n            },\n\n            afterLayout: function(layout) {\n                if (Ext.supports.Touch) {\n                    this.el.scrollTop = 0;\n                }\n                this.callParent(\\[layout\\]);\n            },\n\n            onRender: function() {\n                var me = this,\n                    el = me.el;\n\n                me.callParent(arguments);\n\n                // Important to start life as the proper size (to avoid extra layouts)\n                // But after render so that the size is not stamped into the body\n                me.width = el.getWidth();\n                me.height = el.getHeight();\n\n                // prevent touchmove from panning the viewport in mobile safari\n                if (Ext.supports.TouchEvents) {\n                    me.mon(el, {\n                        touchmove: function(e) {\n                            e.preventDefault();\n                        },\n                        translate: false,\n                        delegated: false\n                    });\n                }\n            },\n\n            initInheritedState: function (inheritedState, inheritedStateInner) {\n                var me = this,\n                    root = Ext.rootInheritedState;\n\n                if (inheritedState !== root) {\n                    // We need to go at this again but with the rootInheritedState object. Let\n                    // any derived class poke on the proper object!\n                    me.initInheritedState(me.inheritedState = root,\n                        me.inheritedStateInner = Ext.Object.chain(root));\n                } else {\n                    me.callParent(\\[inheritedState, inheritedStateInner\\]);\n                }\n            },\n\n            beforeDestroy: function(){\n                var me = this,\n                    root = Ext.rootInheritedState,\n                    key;\n\n                // Clear any properties from the inheritedState so we don&apos;t pollute the\n                // global namespace. If we have a rtl flag set, leave it alone because it&apos;s\n                // likely we didn&apos;t write it\n                for (key in root) {\n                    if (key !== &apos;rtl&apos;) {\n                        delete root\\[key\\];\n                    }\n                }\n\n                me.removeUIFromElement();\n                me.el.removeCls(me.baseCls);\n                Ext.fly(document.body.parentNode).removeCls(me.viewportCls);\n                me.callParent();\n            },\n\n            addMeta: function(name, content) {\n                var meta = document.createElement(&apos;meta&apos;);\n\n                meta.setAttribute(&apos;name&apos;, name);\n                meta.setAttribute(&apos;content&apos;, content);\n                Ext.getHead().appendChild(meta);\n            },\n\n            initMeta: function() {\n                var me = this,\n                    maxScale = me.maxUserScale || 1;\n\n                me.addMeta(&apos;viewport&apos;, &apos;width=device-width, initial-scale=1, maximum-scale=&apos; +\n                       maxScale + &apos;, user-scalable=&apos; + (maxScale !== 1 ? &apos;yes&apos; : &apos;no&apos;));\n                me.addMeta(&apos;apple-mobile-web-app-capable&apos;, &apos;yes&apos;);\n            },\n\n            privates: {\n                // override here to prevent an extraneous warning\n                applyTargetCls: function (targetCls) {\n                    this.el.addCls(targetCls);\n                },\n\n                // Override here to prevent tabIndex set/reset on the body\n                disableTabbing: function() {\n                    var el = this.el;\n\n                    if (el) {\n                        el.saveChildrenTabbableState();\n                    }\n                },\n\n                enableTabbing: function() {\n                    var el = this.el;\n\n                    if (el) {\n                        el.restoreChildrenTabbableState();\n                    }\n                },\n\n                getOverflowEl: function() {\n                    return Ext.get(document.documentElement);\n                }\n            }\n        });\n    }\n},\n\nprivates: {\n    updateResponsiveState: function () {\n        /\\* Andrea: Need to comment this for now, otherwise stretching In and Out\n          \\* the browser will make the viewport full screen again. */\n        //this.cmp.handleViewportResize();\n        //this.callParent();\n    }\n}\n</code></pre>\n<p>}, function (Viewport) { Viewport.prototype.decorate = Viewport.decorate;\n  });</p>\n<p>The **app.js** should disable the `autoCreateViewport`, and in your app\n  `launch` method, you should create the main interface like this:</p>\n<p>Ext.create(‘MyApp.view.main.Main’,{ requires: [‘Ext.plugin.Viewport’],\n  renderTo: ‘mydiv’, plugins: [{ ptype: ‘viewport’ }] });</p>\n<p>Please note, this is just a quick code example, I’m not sure if it’s 100%\n  functional. ## Rendering contents in the viewport As an alternative to the\n  viewport take over, and rending the contents in a div. You could also render\n  the HTML parts in the viewport. (so the otherway arround). Such an example\n  can be found in the Ext JS 5 example apps: • [<a href=\"http://dev.sencha.com/ext/5.0.1/examples/calendar/index.html\\](http://dev.sencha.com/ext/5.0.1/examples/calendar/index.html)\" target=\"_blank\" rel=\"noopener\">http://dev.sencha.com/ext/5.0.1/examples/calendar/index.html\\](http://dev.sencha.com/ext/5.0.1/examples/calendar/index.html)</a>\n  This might be a nice example for you to inspect as well. The **index.html**\n  includes the full `ext-all` framework. (they also have some magic, in using\n  various themes, please see **shared/include-ext.js**) Index.html has also\n  also it’s own header. The trick here, will be to use `contentEl`, to extract\n  that HTML part and insert it into an Ext JS Component, so it can be part of\n  the Sencha (border) layout. (contentEl, should point to an html id). Open\n  **src/App.js**, and notice how they create a new viewport in the constructor.\n  Note: By using the contentEl, the header will be overridden with Sencha\n  styles. You will need to tweak the styling probably. I hope these ideas can\n  help you further!</p>\n"},{"title":"How to Set Up Your Sencha Environment","url":"510.html","id":"510","date":"2014-05-10T11:21:14.000Z","_content":"\nWhile teaching Sencha app camps and training classes, every now and then I see common app build problems related to the installation of the Sencha environment. It’s important to understand the dependencies to get yourself up to speed. In this article, I’ll provide an overview of the dependencies and show you how to get everything set up correctly.\n\nGetting Started\n---------------\n\nLet’s take a look at the dependencies, in order to use Sencha Cmd as a build and code generation tool, you will need to have the following setup, as a base:\n\n*   Java Runtime Environment\n*   Ruby\n*   Sencha Cmd\n*   Sencha Frameworks\n\nJava, Ruby and Sencha Cmd must be available from the command line to use these features. When installing Java, Ruby or Sencha Cmd, usually the installer will add it to the PATH system variable. However, sometimes these variables get lost or were not added at all. When that’s the case, these tools are not available on the command line, so Sencha Cmd can’t access them. It’s very important that these paths are set, so let’s look into how to set the system path variable. If you know this process, you can skip the next paragraph.\n\nHow to Set a System Variable\n----------------------------\n\nI will explain how to add a variable to the PATH on different systems. Later in this article, I will discuss the variables and paths to set.\n\nWindows\n\n*   Windows XP\n*   Windows Vista\n*   Windows 7\n*   Windows 8\n\nMac OSX / Linux\n\n*   Bash shell\n\nWindows XP\n\n1.  Start -> Control Panel -> System -> Advanced\n2.  Click on Environment Variables, under System Variables, find PATH, and click on it.\n3.  In the Edit windows, modify PATH by adding the location of the class to the value for PATH. If you do not have the item PATH, you may select to add a new variable and add PATH as the name and location of the class as the value.\n4.  Close the window and reopen the command prompt window.\n\nWindows Vista\n\n1.  Right click My Computer icon\n2.  Choose Properties from the context menu\n3.  Click Advanced tab (Advanced system settings link in Vista)\n4.  In the Edit windows, modify PATH by adding the location of the class to the value for PATH. If you do not have the item PATH, you may select to add a new variable and add PATH as the name and location of the class as the value.\n5.  Close the window and reopen the command prompt window.\n\nWindows 7\n\n1.  Select Computer from the Start menu\n2.  Choose System Properties from the context menu\n3.  Click Advanced system settings > Advanced tab\n4.  Click on Environment Variables, under System Variables, find PATH, and click on it.\n5.  In the Edit windows, modify PATH by adding the location of the class to the value for PATH. If you do not have the item PATH, you may select to add a new variable and add PATH as the name and location of the class as the value.\n6.  Close the window and reopen the command prompt window.\n\nWindows 8\n\n1.  Drag the Mouse pointer to the Right bottom corner of the screen\n2.  Click on the Search icon and type: Control Panel\n3.  Click on Control Panel > System > Advanced\n4.  Click on Environment Variables, under System Variables, find PATH, and click on it.\n5.  In the Edit windows, modify PATH by adding the location of the class to the value for PATH. If you do not have the item PATH, you may select to add a new variable and add PATH as the name and location of the class as the value.\n6.  Close the window and reopen the command prompt window.\n\nMac OSX / Linux\n\n1.  Edit the bash profile (**~/ .bash_profile**)\n2.  Modify PATH variable, write the following line, with the path to one of the tools:\n    1.  `export PATH=<PATH-TO-ADD-HERE>:$PATH`\n3.  Save and close the file and open a new terminal window\n\nNOTE: The **.bash_profile** is a hidden file, to enable hidden files in Finder, run the following command from the command line:\n\ndefaults write com.apple.finder AppleShowAllFiles TRUE\nkillall Finder\n\nJava Runtime Environment\n------------------------\n\nJava Runtime Environment is required by the build tools of Sencha Architect (Sencha Cmd). You will need a valid build to display your app stylesheet, so it’s necessary to have Java installed.\n\nTo check if you have Java running, type the command below from the command line. (Mac OSX users, open the terminal, Windows open the command line by entering **cmd** from the start screen.)\n\n`java -version`\n\nIf correctly installed, it should output the version number. For example:\n\n>java -version\njava version \"1.7.0_40\"\nJava(TM) SE Runtime Environment (build 1.7.0_40-b43)\nJava HotSpot(TM) 64-Bit Server VM (build 24.0-b56, mixed mode)\n\nThe _JRE_ is the Java Runtime Environment. It’s an implementation of the Java Virtual Machine which actually executes Java programs. Without JRE. you can only compile the application but you can’t run it.\n\nThe _JDK_ is the Java Development Kit. It’s a software bundle that you can use to develop Java based software. Since JRE contains the JVM which executes the byte code generated from the javac compiler, you need to add your JRE path to JAVA_HOME variable from the environment variables.\n\nNote: the JDK contains the JRE, so if you have set your PATH properly you shouldn't need a separate entry for the JRE.\n\nYou can download [Java JRE 1.7](http://www.oracle.com/technetwork/java/javase/downloads/java-se-jre-7-download-432155.html) or the [JDK](http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html).\n\n_Windows users:_\n\nRun these commands from the command line to add Java to your PATH:\n\nvariable name:\n\n`JAVA_HOME`\n\nvariable value:\n\n`c:jdk1.7.0_40`\n\nvariable name:\n\n`PATH`\n\nvariable value:\n\n`%PATH%;%JAVA_HOME%bin`\n\n_Mac OSX / Linux users:_\n\nAssume Java is installed in /Library/Java/JavaVirtualMachines/<java version>/. Run these commands in your terminal to add Java to your PATH:\n\nexport JAVA\\_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0\\_40.jdk/Contents/Home\nexport PATH=$JAVA_HOME/bin:$PATH\n\nFor more information see: [http://java.com/en/download/help/path.xml](http://java.com/en/download/help/path.xml)\n\nRuby\n----\n\nSencha Architect uses Ruby during the app build process when building a theme. Theming in Sencha frameworks requires Sass & Compass. You don’t need to install those two dependencies since they ship with Sencha Cmd and Sencha Architect, but Sass & Compass run on top of Ruby, so Ruby is required.\n\nTo check if Ruby is correctly installed, run the command below from the command line. (Mac OSX users, open the terminal, Windows open the command line by entering **cmd** from the start screen**.)**\n\nruby -v\n\nIf correctly installed, it should output the version number. For example:\n\n\\> ruby -v\nruby 2.0.0p451 (2014-02-24 revision 45167) \\[universal.x86_64-darwin13\\]\n\nRuby is automatically installed on Mac OSX machines. Windows users will have to download Ruby. Sencha Architect works with both Ruby 1.9 and Ruby 2.0 versions.\n\nYou can [download Ruby](http://rubyinstaller.org/downloads/).\n\nMake sure you run the Ruby installer with admin rights (right click on the installer executable and select **run as administrator**.) During the installation, you will have to check the checkbox which asks to add Ruby to your PATH variables.\n\nSencha Cmd\n----------\n\nTo build applications with Sencha Architect, it requires the build tools, Sencha Cmd. Since Sencha Architect runs on top of Sencha Cmd, you don’t need to install Sencha Cmd because it’s included with Sencha Architect.\n\nSencha Cmd is a very useful set of tools. You can not only build your applications with it, you can also build themes, generate code or use the built-in (Jetty 8.1.7) web server.\n\nYou can test if Sencha Cmd is available from the command line by entering the following:\n\nsencha which\n\nIf correctly installed, it should output the version number. For example:\n\n\\> sencha which\nSencha Cmd v5.0.0.116\n/Users/leeboonstra/bin/Sencha/Cmd/5.0.0.116/\n\nIt requires that Sencha Cmd is added to your PATH variables. This should happen automatically when installing Sencha Architect or Sencha Cmd. If it’s not available, you can [download](http://www.sencha.com/products/sencha-cmd/download) and reinstall Sencha Cmd:, or you can add the paths manually on the command line:\n\n_Windows users:_\n\nAssume Sencha Cmd is installed in c:senchacmd5.0.0.116.\n\nvariable name:\n\n`PATH`\n\nvariable value:\n\n`%PATH%;c:senchacmd5.0.0.116`\n\n_Mac OSX / Linux users:_\n\nAssume Sencha Cmd is installed in ~/bin/sencha/cmd/5.0.0.116.\n\nexport PATH=~/bin/Sencha/Cmd/5.0.0.116:$PATH\n\nThe build tools also need to be enabled in Sencha Architect. Verify Sencha Cmd is enabled by navigating to Settings > Project Settings Framework:\n\nSencha Frameworks\n-----------------\n\nCheck out the following Sencha product pages, to download the latest downloads for Ext JS or Sencha Touch. Sencha Touch, Sencha's framework to create multi-device/mobile apps is free to use, and can be found here: [http://www.sencha.com/products/touch/](http://www.sencha.com/products/touch/). Ext JS is Sencha's framework to create desktop/tablet web applications with, for more information take a look into the product page at: [http://www.sencha.com/products/ext/](http://www.sencha.com/products/extjs/).\n\nIn case you have questions about your Sencha setup, feel free to comment underneath this post!\n\n_Ext JS 6_\n==========\n\nUpdate: I wrote a new setup guide for Ext JS 6 development. Please check this link: [http://se.sencha.com/setup-guide/](http://se.sencha.com/setup-guide/)","source":"_drafts/how-tos/how-to-set-up-your-sencha-environment.md","raw":"---\ntitle: How to Set Up Your Sencha Environment\ntags:\n  - Ext JS\n  - install sencha cmd\n  - sencha dependencies\n  - Sencha Touch\n  - setup sencha\nurl: 510.html\nid: 510\ncategories:\n  - Sencha\ndate: 2014-05-10 13:21:14\n---\n\nWhile teaching Sencha app camps and training classes, every now and then I see common app build problems related to the installation of the Sencha environment. It’s important to understand the dependencies to get yourself up to speed. In this article, I’ll provide an overview of the dependencies and show you how to get everything set up correctly.\n\nGetting Started\n---------------\n\nLet’s take a look at the dependencies, in order to use Sencha Cmd as a build and code generation tool, you will need to have the following setup, as a base:\n\n*   Java Runtime Environment\n*   Ruby\n*   Sencha Cmd\n*   Sencha Frameworks\n\nJava, Ruby and Sencha Cmd must be available from the command line to use these features. When installing Java, Ruby or Sencha Cmd, usually the installer will add it to the PATH system variable. However, sometimes these variables get lost or were not added at all. When that’s the case, these tools are not available on the command line, so Sencha Cmd can’t access them. It’s very important that these paths are set, so let’s look into how to set the system path variable. If you know this process, you can skip the next paragraph.\n\nHow to Set a System Variable\n----------------------------\n\nI will explain how to add a variable to the PATH on different systems. Later in this article, I will discuss the variables and paths to set.\n\nWindows\n\n*   Windows XP\n*   Windows Vista\n*   Windows 7\n*   Windows 8\n\nMac OSX / Linux\n\n*   Bash shell\n\nWindows XP\n\n1.  Start -> Control Panel -> System -> Advanced\n2.  Click on Environment Variables, under System Variables, find PATH, and click on it.\n3.  In the Edit windows, modify PATH by adding the location of the class to the value for PATH. If you do not have the item PATH, you may select to add a new variable and add PATH as the name and location of the class as the value.\n4.  Close the window and reopen the command prompt window.\n\nWindows Vista\n\n1.  Right click My Computer icon\n2.  Choose Properties from the context menu\n3.  Click Advanced tab (Advanced system settings link in Vista)\n4.  In the Edit windows, modify PATH by adding the location of the class to the value for PATH. If you do not have the item PATH, you may select to add a new variable and add PATH as the name and location of the class as the value.\n5.  Close the window and reopen the command prompt window.\n\nWindows 7\n\n1.  Select Computer from the Start menu\n2.  Choose System Properties from the context menu\n3.  Click Advanced system settings > Advanced tab\n4.  Click on Environment Variables, under System Variables, find PATH, and click on it.\n5.  In the Edit windows, modify PATH by adding the location of the class to the value for PATH. If you do not have the item PATH, you may select to add a new variable and add PATH as the name and location of the class as the value.\n6.  Close the window and reopen the command prompt window.\n\nWindows 8\n\n1.  Drag the Mouse pointer to the Right bottom corner of the screen\n2.  Click on the Search icon and type: Control Panel\n3.  Click on Control Panel > System > Advanced\n4.  Click on Environment Variables, under System Variables, find PATH, and click on it.\n5.  In the Edit windows, modify PATH by adding the location of the class to the value for PATH. If you do not have the item PATH, you may select to add a new variable and add PATH as the name and location of the class as the value.\n6.  Close the window and reopen the command prompt window.\n\nMac OSX / Linux\n\n1.  Edit the bash profile (**~/ .bash_profile**)\n2.  Modify PATH variable, write the following line, with the path to one of the tools:\n    1.  `export PATH=<PATH-TO-ADD-HERE>:$PATH`\n3.  Save and close the file and open a new terminal window\n\nNOTE: The **.bash_profile** is a hidden file, to enable hidden files in Finder, run the following command from the command line:\n\ndefaults write com.apple.finder AppleShowAllFiles TRUE\nkillall Finder\n\nJava Runtime Environment\n------------------------\n\nJava Runtime Environment is required by the build tools of Sencha Architect (Sencha Cmd). You will need a valid build to display your app stylesheet, so it’s necessary to have Java installed.\n\nTo check if you have Java running, type the command below from the command line. (Mac OSX users, open the terminal, Windows open the command line by entering **cmd** from the start screen.)\n\n`java -version`\n\nIf correctly installed, it should output the version number. For example:\n\n>java -version\njava version \"1.7.0_40\"\nJava(TM) SE Runtime Environment (build 1.7.0_40-b43)\nJava HotSpot(TM) 64-Bit Server VM (build 24.0-b56, mixed mode)\n\nThe _JRE_ is the Java Runtime Environment. It’s an implementation of the Java Virtual Machine which actually executes Java programs. Without JRE. you can only compile the application but you can’t run it.\n\nThe _JDK_ is the Java Development Kit. It’s a software bundle that you can use to develop Java based software. Since JRE contains the JVM which executes the byte code generated from the javac compiler, you need to add your JRE path to JAVA_HOME variable from the environment variables.\n\nNote: the JDK contains the JRE, so if you have set your PATH properly you shouldn't need a separate entry for the JRE.\n\nYou can download [Java JRE 1.7](http://www.oracle.com/technetwork/java/javase/downloads/java-se-jre-7-download-432155.html) or the [JDK](http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html).\n\n_Windows users:_\n\nRun these commands from the command line to add Java to your PATH:\n\nvariable name:\n\n`JAVA_HOME`\n\nvariable value:\n\n`c:jdk1.7.0_40`\n\nvariable name:\n\n`PATH`\n\nvariable value:\n\n`%PATH%;%JAVA_HOME%bin`\n\n_Mac OSX / Linux users:_\n\nAssume Java is installed in /Library/Java/JavaVirtualMachines/<java version>/. Run these commands in your terminal to add Java to your PATH:\n\nexport JAVA\\_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0\\_40.jdk/Contents/Home\nexport PATH=$JAVA_HOME/bin:$PATH\n\nFor more information see: [http://java.com/en/download/help/path.xml](http://java.com/en/download/help/path.xml)\n\nRuby\n----\n\nSencha Architect uses Ruby during the app build process when building a theme. Theming in Sencha frameworks requires Sass & Compass. You don’t need to install those two dependencies since they ship with Sencha Cmd and Sencha Architect, but Sass & Compass run on top of Ruby, so Ruby is required.\n\nTo check if Ruby is correctly installed, run the command below from the command line. (Mac OSX users, open the terminal, Windows open the command line by entering **cmd** from the start screen**.)**\n\nruby -v\n\nIf correctly installed, it should output the version number. For example:\n\n\\> ruby -v\nruby 2.0.0p451 (2014-02-24 revision 45167) \\[universal.x86_64-darwin13\\]\n\nRuby is automatically installed on Mac OSX machines. Windows users will have to download Ruby. Sencha Architect works with both Ruby 1.9 and Ruby 2.0 versions.\n\nYou can [download Ruby](http://rubyinstaller.org/downloads/).\n\nMake sure you run the Ruby installer with admin rights (right click on the installer executable and select **run as administrator**.) During the installation, you will have to check the checkbox which asks to add Ruby to your PATH variables.\n\nSencha Cmd\n----------\n\nTo build applications with Sencha Architect, it requires the build tools, Sencha Cmd. Since Sencha Architect runs on top of Sencha Cmd, you don’t need to install Sencha Cmd because it’s included with Sencha Architect.\n\nSencha Cmd is a very useful set of tools. You can not only build your applications with it, you can also build themes, generate code or use the built-in (Jetty 8.1.7) web server.\n\nYou can test if Sencha Cmd is available from the command line by entering the following:\n\nsencha which\n\nIf correctly installed, it should output the version number. For example:\n\n\\> sencha which\nSencha Cmd v5.0.0.116\n/Users/leeboonstra/bin/Sencha/Cmd/5.0.0.116/\n\nIt requires that Sencha Cmd is added to your PATH variables. This should happen automatically when installing Sencha Architect or Sencha Cmd. If it’s not available, you can [download](http://www.sencha.com/products/sencha-cmd/download) and reinstall Sencha Cmd:, or you can add the paths manually on the command line:\n\n_Windows users:_\n\nAssume Sencha Cmd is installed in c:senchacmd5.0.0.116.\n\nvariable name:\n\n`PATH`\n\nvariable value:\n\n`%PATH%;c:senchacmd5.0.0.116`\n\n_Mac OSX / Linux users:_\n\nAssume Sencha Cmd is installed in ~/bin/sencha/cmd/5.0.0.116.\n\nexport PATH=~/bin/Sencha/Cmd/5.0.0.116:$PATH\n\nThe build tools also need to be enabled in Sencha Architect. Verify Sencha Cmd is enabled by navigating to Settings > Project Settings Framework:\n\nSencha Frameworks\n-----------------\n\nCheck out the following Sencha product pages, to download the latest downloads for Ext JS or Sencha Touch. Sencha Touch, Sencha's framework to create multi-device/mobile apps is free to use, and can be found here: [http://www.sencha.com/products/touch/](http://www.sencha.com/products/touch/). Ext JS is Sencha's framework to create desktop/tablet web applications with, for more information take a look into the product page at: [http://www.sencha.com/products/ext/](http://www.sencha.com/products/extjs/).\n\nIn case you have questions about your Sencha setup, feel free to comment underneath this post!\n\n_Ext JS 6_\n==========\n\nUpdate: I wrote a new setup guide for Ext JS 6 development. Please check this link: [http://se.sencha.com/setup-guide/](http://se.sencha.com/setup-guide/)","slug":"how-tos/how-to-set-up-your-sencha-environment","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jncza0104kif5zzx96g7g","content":"<p>While teaching Sencha app camps and training classes, every now and then I\n  see common app build problems related to the installation of the Sencha\n  environment. It’s important to understand the dependencies to get yourself up\n  to speed. In this article, I’ll provide an overview of the dependencies and\n  show you how to get everything set up correctly.</p>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting\n  Started</h2>\n<p>Let’s take a look at the dependencies, in order to use Sencha Cmd as a build\n  and code generation tool, you will need to have the following setup, as a\n  base:</p>\n<ul>\n  <li>Java Runtime Environment</li>\n  <li>Ruby</li>\n  <li>Sencha Cmd</li>\n  <li>Sencha Frameworks</li>\n</ul>\n<p>Java, Ruby and Sencha Cmd must be available from the command line to use\n  these features. When installing Java, Ruby or Sencha Cmd, usually the\n  installer will add it to the PATH system variable. However, sometimes these\n  variables get lost or were not added at all. When that’s the case, these\n  tools are not available on the command line, so Sencha Cmd can’t access them.\n  It’s very important that these paths are set, so let’s look into how to set\n  the system path variable. If you know this process, you can skip the next\n  paragraph.</p>\n<h2 id=\"How-to-Set-a-System-Variable\"><a href=\"#How-to-Set-a-System-Variable\" class=\"headerlink\" title=\"How to Set a System Variable\"></a>How\n  to Set a System Variable</h2>\n<p>I will explain how to add a variable to the PATH on different systems. Later\n  in this article, I will discuss the variables and paths to set.</p>\n<p>Windows</p>\n<ul>\n  <li>Windows XP</li>\n  <li>Windows Vista</li>\n  <li>Windows 7</li>\n  <li>Windows 8</li>\n</ul>\n<p>Mac OSX / Linux</p>\n<ul>\n  <li>Bash shell</li>\n</ul>\n<p>Windows XP</p>\n<ol>\n  <li>Start -&gt; Control Panel -&gt; System -&gt; Advanced</li>\n  <li>Click on Environment Variables, under System Variables, find PATH, and\n    click on it.</li>\n  <li>In the Edit windows, modify PATH by adding the location of the class to\n    the value for PATH. If you do not have the item PATH, you may select to add\n    a new variable and add PATH as the name and location of the class as the\n    value.</li>\n  <li>Close the window and reopen the command prompt window.</li>\n</ol>\n<p>Windows Vista</p>\n<ol>\n  <li>Right click My Computer icon</li>\n  <li>Choose Properties from the context menu</li>\n  <li>Click Advanced tab (Advanced system settings link in Vista)</li>\n  <li>In the Edit windows, modify PATH by adding the location of the class to\n    the value for PATH. If you do not have the item PATH, you may select to add\n    a new variable and add PATH as the name and location of the class as the\n    value.</li>\n  <li>Close the window and reopen the command prompt window.</li>\n</ol>\n<p>Windows 7</p>\n<ol>\n  <li>Select Computer from the Start menu</li>\n  <li>Choose System Properties from the context menu</li>\n  <li>Click Advanced system settings &gt; Advanced tab</li>\n  <li>Click on Environment Variables, under System Variables, find PATH, and\n    click on it.</li>\n  <li>In the Edit windows, modify PATH by adding the location of the class to\n    the value for PATH. If you do not have the item PATH, you may select to add\n    a new variable and add PATH as the name and location of the class as the\n    value.</li>\n  <li>Close the window and reopen the command prompt window.</li>\n</ol>\n<p>Windows 8</p>\n<ol>\n  <li>Drag the Mouse pointer to the Right bottom corner of the screen</li>\n  <li>Click on the Search icon and type: Control Panel</li>\n  <li>Click on Control Panel &gt; System &gt; Advanced</li>\n  <li>Click on Environment Variables, under System Variables, find PATH, and\n    click on it.</li>\n  <li>In the Edit windows, modify PATH by adding the location of the class to\n    the value for PATH. If you do not have the item PATH, you may select to add\n    a new variable and add PATH as the name and location of the class as the\n    value.</li>\n  <li>Close the window and reopen the command prompt window.</li>\n</ol>\n<p>Mac OSX / Linux</p>\n<ol>\n  <li>Edit the bash profile (<strong>~/ .bash_profile</strong>)</li>\n  <li>Modify PATH variable, write the following line, with the path to one of\n    the tools:<ol>\n      <li><code>export PATH=&lt;PATH-TO-ADD-HERE&gt;:$PATH</code></li>\n    </ol>\n  </li>\n  <li>Save and close the file and open a new terminal window</li>\n</ol>\n<p>NOTE: The <strong>.bash_profile</strong> is a hidden file, to enable hidden\n  files in Finder, run the following command from the command line:</p>\n<p>defaults write com.apple.finder AppleShowAllFiles TRUE killall Finder</p>\n<h2 id=\"Java-Runtime-Environment\"><a href=\"#Java-Runtime-Environment\" class=\"headerlink\" title=\"Java Runtime Environment\"></a>Java\n  Runtime Environment</h2>\n<p>Java Runtime Environment is required by the build tools of Sencha Architect\n  (Sencha Cmd). You will need a valid build to display your app stylesheet, so\n  it’s necessary to have Java installed.</p>\n<p>To check if you have Java running, type the command below from the command\n  line. (Mac OSX users, open the terminal, Windows open the command line by\n  entering <strong>cmd</strong> from the start screen.)</p>\n<p><code>java -version</code></p>\n<p>If correctly installed, it should output the version number. For example:</p>\n<blockquote>\n  <p>java -version java version “1.7.0_40” Java(TM) SE Runtime Environment\n    (build 1.7.0_40-b43) Java HotSpot(TM) 64-Bit Server VM (build 24.0-b56,\n    mixed mode)</p>\n</blockquote>\n<p>The <em>JRE</em> is the Java Runtime Environment. It’s an implementation of\n  the Java Virtual Machine which actually executes Java programs. Without JRE.\n  you can only compile the application but you can’t run it.</p>\n<p>The <em>JDK</em> is the Java Development Kit. It’s a software bundle that\n  you can use to develop Java based software. Since JRE contains the JVM which\n  executes the byte code generated from the javac compiler, you need to add\n  your JRE path to JAVA_HOME variable from the environment variables.</p>\n<p>Note: the JDK contains the JRE, so if you have set your PATH properly you\n  shouldn’t need a separate entry for the JRE.</p>\n<p>You can download <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/java-se-jre-7-download-432155.html\" target=\"_blank\" rel=\"noopener\">Java\n    JRE 1.7</a> or the <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\" target=\"_blank\" rel=\"noopener\">JDK</a>.</p>\n<p><em>Windows users:</em></p>\n<p>Run these commands from the command line to add Java to your PATH:</p>\n<p>variable name:</p>\n<p><code>JAVA_HOME</code></p>\n<p>variable value:</p>\n<p><code>c:jdk1.7.0_40</code></p>\n<p>variable name:</p>\n<p><code>PATH</code></p>\n<p>variable value:</p>\n<p><code>%PATH%;%JAVA_HOME%bin</code></p>\n<p><em>Mac OSX / Linux users:</em></p>\n<p>Assume Java is installed in /Library/Java/JavaVirtualMachines/<java version=\"\">/.\n    Run these commands in your terminal to add Java to your PATH:</java>\n</p>\n<p>export\n  JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_40.jdk/Contents/Home\n  export PATH=$JAVA_HOME/bin:$PATH</p>\n<p>For more information see: <a href=\"http://java.com/en/download/help/path.xml\" target=\"_blank\" rel=\"noopener\">http://java.com/en/download/help/path.xml</a></p>\n<h2 id=\"Ruby\"><a href=\"#Ruby\" class=\"headerlink\" title=\"Ruby\"></a>Ruby</h2>\n<p>Sencha Architect uses Ruby during the app build process when building a\n  theme. Theming in Sencha frameworks requires Sass &amp; Compass. You don’t\n  need to install those two dependencies since they ship with Sencha Cmd and\n  Sencha Architect, but Sass &amp; Compass run on top of Ruby, so Ruby is\n  required.</p>\n<p>To check if Ruby is correctly installed, run the command below from the\n  command line. (Mac OSX users, open the terminal, Windows open the command\n  line by entering <strong>cmd</strong> from the start screen<strong>.)</strong></p>\n<p>ruby -v</p>\n<p>If correctly installed, it should output the version number. For example:</p>\n<p>> ruby -v ruby 2.0.0p451 (2014-02-24 revision 45167)\n  [universal.x86_64-darwin13]</p>\n<p>Ruby is automatically installed on Mac OSX machines. Windows users will have\n  to download Ruby. Sencha Architect works with both Ruby 1.9 and Ruby 2.0\n  versions.</p>\n<p>You can <a href=\"http://rubyinstaller.org/downloads/\" target=\"_blank\" rel=\"noopener\">download Ruby</a>.</p>\n<p>Make sure you run the Ruby installer with admin rights (right click on the\n  installer executable and select <strong>run as administrator</strong>.)\n  During the installation, you will have to check the checkbox which asks to\n  add Ruby to your PATH variables.</p>\n<h2 id=\"Sencha-Cmd\"><a href=\"#Sencha-Cmd\" class=\"headerlink\" title=\"Sencha Cmd\"></a>Sencha\n  Cmd</h2>\n<p>To build applications with Sencha Architect, it requires the build tools,\n  Sencha Cmd. Since Sencha Architect runs on top of Sencha Cmd, you don’t need\n  to install Sencha Cmd because it’s included with Sencha Architect.</p>\n<p>Sencha Cmd is a very useful set of tools. You can not only build your\n  applications with it, you can also build themes, generate code or use the\n  built-in (Jetty 8.1.7) web server.</p>\n<p>You can test if Sencha Cmd is available from the command line by entering\n  the following:</p>\n<p>sencha which</p>\n<p>If correctly installed, it should output the version number. For example:</p>\n<p>> sencha which Sencha Cmd v5.0.0.116\n  /Users/leeboonstra/bin/Sencha/Cmd/5.0.0.116/</p>\n<p>It requires that Sencha Cmd is added to your PATH variables. This should\n  happen automatically when installing Sencha Architect or Sencha Cmd. If it’s\n  not available, you can <a href=\"http://www.sencha.com/products/sencha-cmd/download\" target=\"_blank\" rel=\"noopener\">download</a>\n  and reinstall Sencha Cmd:, or you can add the paths manually on the command\n  line:</p>\n<p><em>Windows users:</em></p>\n<p>Assume Sencha Cmd is installed in c:senchacmd5.0.0.116.</p>\n<p>variable name:</p>\n<p><code>PATH</code></p>\n<p>variable value:</p>\n<p><code>%PATH%;c:senchacmd5.0.0.116</code></p>\n<p><em>Mac OSX / Linux users:</em></p>\n<p>Assume Sencha Cmd is installed in ~/bin/sencha/cmd/5.0.0.116.</p>\n<p>export PATH=~/bin/Sencha/Cmd/5.0.0.116:$PATH</p>\n<p>The build tools also need to be enabled in Sencha Architect. Verify Sencha\n  Cmd is enabled by navigating to Settings &gt; Project Settings Framework:</p>\n<h2 id=\"Sencha-Frameworks\"><a href=\"#Sencha-Frameworks\" class=\"headerlink\" title=\"Sencha Frameworks\"></a>Sencha\n  Frameworks</h2>\n<p>Check out the following Sencha product pages, to download the latest\n  downloads for Ext JS or Sencha Touch. Sencha Touch, Sencha’s framework to\n  create multi-device/mobile apps is free to use, and can be found here: <a href=\"http://www.sencha.com/products/touch/\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/products/touch/</a>.\n  Ext JS is Sencha’s framework to create desktop/tablet web applications with,\n  for more information take a look into the product page at: <a href=\"http://www.sencha.com/products/extjs/\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/products/ext/</a>.</p>\n<p>In case you have questions about your Sencha setup, feel free to comment\n  underneath this post!</p>\n<h1 id=\"Ext-JS-6\"><a href=\"#Ext-JS-6\" class=\"headerlink\" title=\"Ext JS 6\"></a><em>Ext\n    JS 6</em></h1>\n<p>Update: I wrote a new setup guide for Ext JS 6 development. Please check\n  this link: <a href=\"http://se.sencha.com/setup-guide/\" target=\"_blank\" rel=\"noopener\">http://se.sencha.com/setup-guide/</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>While teaching Sencha app camps and training classes, every now and then I\n  see common app build problems related to the installation of the Sencha\n  environment. It’s important to understand the dependencies to get yourself up\n  to speed. In this article, I’ll provide an overview of the dependencies and\n  show you how to get everything set up correctly.</p>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting\n  Started</h2>\n<p>Let’s take a look at the dependencies, in order to use Sencha Cmd as a build\n  and code generation tool, you will need to have the following setup, as a\n  base:</p>\n<ul>\n  <li>Java Runtime Environment</li>\n  <li>Ruby</li>\n  <li>Sencha Cmd</li>\n  <li>Sencha Frameworks</li>\n</ul>\n<p>Java, Ruby and Sencha Cmd must be available from the command line to use\n  these features. When installing Java, Ruby or Sencha Cmd, usually the\n  installer will add it to the PATH system variable. However, sometimes these\n  variables get lost or were not added at all. When that’s the case, these\n  tools are not available on the command line, so Sencha Cmd can’t access them.\n  It’s very important that these paths are set, so let’s look into how to set\n  the system path variable. If you know this process, you can skip the next\n  paragraph.</p>\n<h2 id=\"How-to-Set-a-System-Variable\"><a href=\"#How-to-Set-a-System-Variable\" class=\"headerlink\" title=\"How to Set a System Variable\"></a>How\n  to Set a System Variable</h2>\n<p>I will explain how to add a variable to the PATH on different systems. Later\n  in this article, I will discuss the variables and paths to set.</p>\n<p>Windows</p>\n<ul>\n  <li>Windows XP</li>\n  <li>Windows Vista</li>\n  <li>Windows 7</li>\n  <li>Windows 8</li>\n</ul>\n<p>Mac OSX / Linux</p>\n<ul>\n  <li>Bash shell</li>\n</ul>\n<p>Windows XP</p>\n<ol>\n  <li>Start -&gt; Control Panel -&gt; System -&gt; Advanced</li>\n  <li>Click on Environment Variables, under System Variables, find PATH, and\n    click on it.</li>\n  <li>In the Edit windows, modify PATH by adding the location of the class to\n    the value for PATH. If you do not have the item PATH, you may select to add\n    a new variable and add PATH as the name and location of the class as the\n    value.</li>\n  <li>Close the window and reopen the command prompt window.</li>\n</ol>\n<p>Windows Vista</p>\n<ol>\n  <li>Right click My Computer icon</li>\n  <li>Choose Properties from the context menu</li>\n  <li>Click Advanced tab (Advanced system settings link in Vista)</li>\n  <li>In the Edit windows, modify PATH by adding the location of the class to\n    the value for PATH. If you do not have the item PATH, you may select to add\n    a new variable and add PATH as the name and location of the class as the\n    value.</li>\n  <li>Close the window and reopen the command prompt window.</li>\n</ol>\n<p>Windows 7</p>\n<ol>\n  <li>Select Computer from the Start menu</li>\n  <li>Choose System Properties from the context menu</li>\n  <li>Click Advanced system settings &gt; Advanced tab</li>\n  <li>Click on Environment Variables, under System Variables, find PATH, and\n    click on it.</li>\n  <li>In the Edit windows, modify PATH by adding the location of the class to\n    the value for PATH. If you do not have the item PATH, you may select to add\n    a new variable and add PATH as the name and location of the class as the\n    value.</li>\n  <li>Close the window and reopen the command prompt window.</li>\n</ol>\n<p>Windows 8</p>\n<ol>\n  <li>Drag the Mouse pointer to the Right bottom corner of the screen</li>\n  <li>Click on the Search icon and type: Control Panel</li>\n  <li>Click on Control Panel &gt; System &gt; Advanced</li>\n  <li>Click on Environment Variables, under System Variables, find PATH, and\n    click on it.</li>\n  <li>In the Edit windows, modify PATH by adding the location of the class to\n    the value for PATH. If you do not have the item PATH, you may select to add\n    a new variable and add PATH as the name and location of the class as the\n    value.</li>\n  <li>Close the window and reopen the command prompt window.</li>\n</ol>\n<p>Mac OSX / Linux</p>\n<ol>\n  <li>Edit the bash profile (<strong>~/ .bash_profile</strong>)</li>\n  <li>Modify PATH variable, write the following line, with the path to one of\n    the tools:<ol>\n      <li><code>export PATH=&lt;PATH-TO-ADD-HERE&gt;:$PATH</code></li>\n    </ol>\n  </li>\n  <li>Save and close the file and open a new terminal window</li>\n</ol>\n<p>NOTE: The <strong>.bash_profile</strong> is a hidden file, to enable hidden\n  files in Finder, run the following command from the command line:</p>\n<p>defaults write com.apple.finder AppleShowAllFiles TRUE killall Finder</p>\n<h2 id=\"Java-Runtime-Environment\"><a href=\"#Java-Runtime-Environment\" class=\"headerlink\" title=\"Java Runtime Environment\"></a>Java\n  Runtime Environment</h2>\n<p>Java Runtime Environment is required by the build tools of Sencha Architect\n  (Sencha Cmd). You will need a valid build to display your app stylesheet, so\n  it’s necessary to have Java installed.</p>\n<p>To check if you have Java running, type the command below from the command\n  line. (Mac OSX users, open the terminal, Windows open the command line by\n  entering <strong>cmd</strong> from the start screen.)</p>\n<p><code>java -version</code></p>\n<p>If correctly installed, it should output the version number. For example:</p>\n<blockquote>\n  <p>java -version java version “1.7.0_40” Java(TM) SE Runtime Environment\n    (build 1.7.0_40-b43) Java HotSpot(TM) 64-Bit Server VM (build 24.0-b56,\n    mixed mode)</p>\n</blockquote>\n<p>The <em>JRE</em> is the Java Runtime Environment. It’s an implementation of\n  the Java Virtual Machine which actually executes Java programs. Without JRE.\n  you can only compile the application but you can’t run it.</p>\n<p>The <em>JDK</em> is the Java Development Kit. It’s a software bundle that\n  you can use to develop Java based software. Since JRE contains the JVM which\n  executes the byte code generated from the javac compiler, you need to add\n  your JRE path to JAVA_HOME variable from the environment variables.</p>\n<p>Note: the JDK contains the JRE, so if you have set your PATH properly you\n  shouldn’t need a separate entry for the JRE.</p>\n<p>You can download <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/java-se-jre-7-download-432155.html\" target=\"_blank\" rel=\"noopener\">Java\n    JRE 1.7</a> or the <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\" target=\"_blank\" rel=\"noopener\">JDK</a>.</p>\n<p><em>Windows users:</em></p>\n<p>Run these commands from the command line to add Java to your PATH:</p>\n<p>variable name:</p>\n<p><code>JAVA_HOME</code></p>\n<p>variable value:</p>\n<p><code>c:jdk1.7.0_40</code></p>\n<p>variable name:</p>\n<p><code>PATH</code></p>\n<p>variable value:</p>\n<p><code>%PATH%;%JAVA_HOME%bin</code></p>\n<p><em>Mac OSX / Linux users:</em></p>\n<p>Assume Java is installed in /Library/Java/JavaVirtualMachines/<java version=\"\">/.\n    Run these commands in your terminal to add Java to your PATH:</java>\n</p>\n<p>export\n  JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_40.jdk/Contents/Home\n  export PATH=$JAVA_HOME/bin:$PATH</p>\n<p>For more information see: <a href=\"http://java.com/en/download/help/path.xml\" target=\"_blank\" rel=\"noopener\">http://java.com/en/download/help/path.xml</a></p>\n<h2 id=\"Ruby\"><a href=\"#Ruby\" class=\"headerlink\" title=\"Ruby\"></a>Ruby</h2>\n<p>Sencha Architect uses Ruby during the app build process when building a\n  theme. Theming in Sencha frameworks requires Sass &amp; Compass. You don’t\n  need to install those two dependencies since they ship with Sencha Cmd and\n  Sencha Architect, but Sass &amp; Compass run on top of Ruby, so Ruby is\n  required.</p>\n<p>To check if Ruby is correctly installed, run the command below from the\n  command line. (Mac OSX users, open the terminal, Windows open the command\n  line by entering <strong>cmd</strong> from the start screen<strong>.)</strong></p>\n<p>ruby -v</p>\n<p>If correctly installed, it should output the version number. For example:</p>\n<p>> ruby -v ruby 2.0.0p451 (2014-02-24 revision 45167)\n  [universal.x86_64-darwin13]</p>\n<p>Ruby is automatically installed on Mac OSX machines. Windows users will have\n  to download Ruby. Sencha Architect works with both Ruby 1.9 and Ruby 2.0\n  versions.</p>\n<p>You can <a href=\"http://rubyinstaller.org/downloads/\" target=\"_blank\" rel=\"noopener\">download Ruby</a>.</p>\n<p>Make sure you run the Ruby installer with admin rights (right click on the\n  installer executable and select <strong>run as administrator</strong>.)\n  During the installation, you will have to check the checkbox which asks to\n  add Ruby to your PATH variables.</p>\n<h2 id=\"Sencha-Cmd\"><a href=\"#Sencha-Cmd\" class=\"headerlink\" title=\"Sencha Cmd\"></a>Sencha\n  Cmd</h2>\n<p>To build applications with Sencha Architect, it requires the build tools,\n  Sencha Cmd. Since Sencha Architect runs on top of Sencha Cmd, you don’t need\n  to install Sencha Cmd because it’s included with Sencha Architect.</p>\n<p>Sencha Cmd is a very useful set of tools. You can not only build your\n  applications with it, you can also build themes, generate code or use the\n  built-in (Jetty 8.1.7) web server.</p>\n<p>You can test if Sencha Cmd is available from the command line by entering\n  the following:</p>\n<p>sencha which</p>\n<p>If correctly installed, it should output the version number. For example:</p>\n<p>> sencha which Sencha Cmd v5.0.0.116\n  /Users/leeboonstra/bin/Sencha/Cmd/5.0.0.116/</p>\n<p>It requires that Sencha Cmd is added to your PATH variables. This should\n  happen automatically when installing Sencha Architect or Sencha Cmd. If it’s\n  not available, you can <a href=\"http://www.sencha.com/products/sencha-cmd/download\" target=\"_blank\" rel=\"noopener\">download</a>\n  and reinstall Sencha Cmd:, or you can add the paths manually on the command\n  line:</p>\n<p><em>Windows users:</em></p>\n<p>Assume Sencha Cmd is installed in c:senchacmd5.0.0.116.</p>\n<p>variable name:</p>\n<p><code>PATH</code></p>\n<p>variable value:</p>\n<p><code>%PATH%;c:senchacmd5.0.0.116</code></p>\n<p><em>Mac OSX / Linux users:</em></p>\n<p>Assume Sencha Cmd is installed in ~/bin/sencha/cmd/5.0.0.116.</p>\n<p>export PATH=~/bin/Sencha/Cmd/5.0.0.116:$PATH</p>\n<p>The build tools also need to be enabled in Sencha Architect. Verify Sencha\n  Cmd is enabled by navigating to Settings &gt; Project Settings Framework:</p>\n<h2 id=\"Sencha-Frameworks\"><a href=\"#Sencha-Frameworks\" class=\"headerlink\" title=\"Sencha Frameworks\"></a>Sencha\n  Frameworks</h2>\n<p>Check out the following Sencha product pages, to download the latest\n  downloads for Ext JS or Sencha Touch. Sencha Touch, Sencha’s framework to\n  create multi-device/mobile apps is free to use, and can be found here: <a href=\"http://www.sencha.com/products/touch/\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/products/touch/</a>.\n  Ext JS is Sencha’s framework to create desktop/tablet web applications with,\n  for more information take a look into the product page at: <a href=\"http://www.sencha.com/products/extjs/\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/products/ext/</a>.</p>\n<p>In case you have questions about your Sencha setup, feel free to comment\n  underneath this post!</p>\n<h1 id=\"Ext-JS-6\"><a href=\"#Ext-JS-6\" class=\"headerlink\" title=\"Ext JS 6\"></a><em>Ext\n    JS 6</em></h1>\n<p>Update: I wrote a new setup guide for Ext JS 6 development. Please check\n  this link: <a href=\"http://se.sencha.com/setup-guide/\" target=\"_blank\" rel=\"noopener\">http://se.sencha.com/setup-guide/</a></p>\n"},{"title":"How to improve your Sencha code while working in large teams?","url":"626.html","id":"626","date":"2015-06-05T08:00:28.000Z","_content":"\nOften I get questions from people on how to work efficiently with Sencha while developing in a large team environment.. This question is especially popular for people coming from the Java world, who are familiar with tooling for Java and build processes. I can tell you that it’s not much different for web projects. This article will discuss the following concepts:\n\n*   Source Control\n*   Sencha Architect for teams\n*   Editors & IDEs and configuration\n*   Code analysis tools\n*   Code reviews\n*   Test tools\n*   Build processes\n\n**Source Control**\n------------------\n\nUse a versioning / source control system, to track changes, share your code and save your code revisions as easy backups. A popular Versioning Control tool is Git. (but you can use any versioning tool of choice, such as SVN, CVS, Mercurial, etc...)\n\n### **Working with Git**\n\nInternally at Sencha we use Git & Github. What’s important to know, is that you don’t want to check-in certain files and folders. When you do check in the framework or build folders, keep in mind that there are more changes on Git conflicts, and your code base will become extremely large. To make sure you don’t check-in these files by accident, create a **.gitignore** file in your project root. I am often using these ignore rules:\n\n\\# OS generated files #\n######################\n\n*/.DS_Store\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nIcon?\nehthumbs.db\nThumbs.db\n\n\\# Packages #\n############\n\n\\# it's better to unpack these files and commit the raw source\n\\# git has its own built in compression methods\n\n*.7z\n*.dmg\n*.gz\n*.iso\n*.jar\n*.rar\n*.tar\n*.zip\n\n\\# Sencha Development #\n######################\n\n.architect\n.project\n.sencha/\n.sass-cache/\next/\ntouch/\ntemp/\nbuild/\n\n**TIP:** Wait? You didn't check in the frameworks? Yep. Usually I prefer it to keep my version control light and clean. (I can tell you how much pain it is, when whole versions of Ext JS are checked into GIT, and how horrible it is, to use the GIT client, while it's slow or crashing down.) - To give you an impression, the Sencha sdk is over 100 MB.  So not checking in the sdk, means, you will have to generate a new application/workspace, with the same name space; and copy over the files. **TIP:** In case you by accident already committed certain files to Git, you have to remove them first from Git before ignoring them. For example: `**git rm file1.txt** **git commit -m \"remove file1.txt\"** **git push**` In case you have all these annoying OS generated files in Git, you can remove them like this: `**find . -name '*.DS_Store' -type f -delete**` For more information about Git, checkout:\n\n*   [http://git-scm.com/](http://git-scm.com/)\n*   [http://www.github.com](http://www.github.com)\n\n### **What about Git and Sencha Architect?**\n\nWhen you're familiar with Git you shouldn’t have problems collaborating with multiple developers using Sencha Architect. The Sencha Architect metadata code and resultant JavaScript are very source-control friendly. But it is good to know that Sencha Architect creates meta data. (see metadata folder in your folder structure of an Sencha Architect. project). These metadata are used to generate the JavaScript in the app folder. (_Basically, you don’t need to add the app folder under source control. Since Sencha Architect auto generates these files once you open and save the project in Sencha Architect_.) Because of this metadata it is possible to work in the same Sencha Architect project with multiple developers. As you can see in the screenshot, the metadata maps a similar folder structure as the application file structure. Every Sencha class has its own meta data file, which is basically a JSON object. As long as you don’t work on the same files, there won’t be any conflicts. For more information about using Sencha Architect in project teams, take a look into this serie of blog posts written by Richard G Milone who works for CNX. It explains the process really well:\n\n*   [http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-1-of-3/](http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-1-of-3/)\n*   [http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-2-of-3/](http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-2-of-3/)\n*   [http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-3-of-3/](http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-3-of-3/)\n*   [http://docs.sencha.com/architect/3/getting\\_started/developing\\_team_apps.html](http://docs.sencha.com/architect/3/getting_started/developing_team_apps.html)\n\n### **Sencha & Git in general**\n\nWhether you are working with Sencha Architect, or just writing code yourself, the best practice would be to define (smaller) classes, and nesting it through xtypes. Every (view) component, should have its own class, with its own namespace. We don’t need to worry about all these separate files since the Sencha build process (with Sencha Cmd / Sencha Architect uses Sencha Cmd in the background), concatenates and minifies all these classes into one single small file. This improves readability, usability and maintainability but think about it. It also will improve your workflow with source control systems. Cause smaller single files, reduces the change on working with your co-worker on the same file. When you develop your application with Sencha Architect, and you are dragging your components into the design canvas… ..by default all these views will be nested into one single file. (the viewport). You can promote these smaller view pieces to its own classes, so it will become a single class file, which will be nested via its xtype. For example, when you have a viewport with a form with fields, and a component with a template. You can promote the form and the detail component to its own class, by right clicking on the form (or detail component), and select: ‘Promote To Class”. After you selected that, you will see a link icon, which indicates that its a linked to its own class. You can start re-using it now too! Just sometimes, you are both working on the same file. This will result into a merge conflict as soon as you push your version to Git. Git will reject it. I know, this is not nice, but it’s not the end of the world. Always make a backup of your own file, to somewhere else in your file system. You can merge a file. There are various tools available for your editors / IDEs that deal with merging files. Also Git provides a Graphical User Interface which can show the differences. Another solution can be to accept or revert the changes and merge it yourself manually. **TIP:** Traditionally we recommend that users do not check in the **.architect** file or the framework and build folders into their source control systems. In situations where it is necessary to check these into the repository (for example, because you want to run the application directly in your browser after fetching the project), we suggest that you check it in and then add it to the ignore list so that there will not be further conflicts. Last but not least, the overall best solution for working in a team with source control, is communication! It’s just so much easier if you let your co-worker know, on which file / part of the app you are working on!\n\n**Editors & IDEs**\n------------------\n\nWhile writing Sencha code you can use any editor or IDE of choice. Here are a couple of suggestions:\n\n*   **WebStorm / IntelliJ IDEA** from JetBrains - [https://www.jetbrains.com/](https://www.jetbrains.com/)\n\nIDEA is an IDE great for Java developers. WebStorm is their JavaScript version of the IDE. What’s nice of WebStorm is that it recognizes the Sencha frameworks, and therefore you can use code auto completion. WebStorm is commercial. IDEA has an oper source version.\n\n*   _**_Eclipse_**_ _\\-_ [_https://eclipse.org/_](https://eclipse.org/)\n\n_Open source IDE mostly focussed on Java development._\n\n*   _**_Sublime Text Editor_**_ _\\-_ [_http://www.sublimetext.com/_](http://www.sublimetext.com/)\n\n_A simplistic editor for code and markup with amazing performance. (Commercial)_\n\n*   _**_Brackets_**_ _\\-_ [_http://brackets.io/_](http://brackets.io/)\n\n_A modern simplistic open source editor, great for web development._ All of these tools have the ability to use with plugins. For example, plugins to integrate code analysis tools or source control tools.\n\n### **Editor / IDE configuration**\n\nWhen you work in a team, what’s most important is that you have your editor/IDE configured the same. Common editor settings are:\n\n*   **Indent Style**: set to tab or space to use hard tabs or soft tabs respectively.\n*   **Indent Size**: a whole number defining the number of columns used for each indentation level and the width of soft tabs (when supported).\n*   **Tab Width**: a whole number defining the number of columns used to represent a tab character.\n*   **End of Line**: set to lf, cr, or crlf to control how line breaks are represented.\n*   **Charset**: set to latin1, utf-8, utf-16be or utf-16le to control the character set.\n*   **Trim trailing whitespace**: Enable to remove any whitespace characters preceding newline characters and false to ensure it doesn't.\n*   **Insert final newline**: Enable to ensure file ends with a newline or not.\n\nWhen these settings are out of sync in a team, you can run into many source control conflicts and hard to solve file merges.\n\n**Code analysis tools**\n-----------------------\n\nThere are a couple of tools you can use to analyse your code. Popular tools for JavaScript development are:\n\n*   **JSLint** \\- [http://www.jslint.com/](http://www.jslint.com/)\n\nA JavaScript syntax checker and validator on coding rules written by Douglas Crockford.\n\n*   **JSHint** \\- [http://jshint.com/](http://jshint.com/)\n\nA community driven fork of JSLint, which is not as strict as JSLint. There are many plugins available for IDE’s and editors, to check the JavaScript code while writing using the above tools.\n\n### **Analysing code with Sencha Cmd**\n\nWhat’s also nice to know is Sencha Cmd does code checking. Every time when you run a sencha app build or sencha app build testing on the command-line, it will validate your JavaScript code. Lint errors will show up as parse warnings in your console. Not only it checks your JavaScript errors, it will also check your Sass stylesheet for errors, before compiling it to production ready CSS. Sencha Cmd has Rhino 1.7 and PhantomJS under the hood. These are JavaScript interpreters, it does not have the DOM implementation of a browser. Therefore it can run some nice things. Such as Linting/Validating or testing the code while building. For example Sencha Cmd uses PhantomJS for its image slicer. Because of PhantomJS, Sencha Cmd can make a screenshot, and slice it into images to serve to older browsers. For more information, see:\n\n*   [https://developer.mozilla.org/en/docs/Rhino_documentation](https://developer.mozilla.org/en/docs/Rhino_documentation)\n*   [http://phantomjs.org/](http://phantomjs.org/)\n\n**Code Reviews**\n----------------\n\nIt is also possible to let Sencha check your code. You can hire a Sencha professional services consultant who can review your code during certain points in your development process. We will check for best practices and see how to optimize your application and performance.\n\n**Tools for testing your Sencha Code**\n--------------------------------------\n\nLet’s look into ways how to test your Sencha code:\n\n*   **Jasmine** \\- [http://jasmine.github.io/](http://jasmine.github.io/)\n\nJasmine is an open source unit testing framework for JavaScript. Unit Tests attempt to isolate small pieces of code and objectively verify application logic. Jasmine aims to run on any JavaScript-enabled platform, to not intrude on the application nor the IDE, and to have easy-to-read syntax. See also: [https://vimeo.com/18100173](https://vimeo.com/18100173)\n\n*   **Siesta** \\- [http://www.bryntum.com/products/siesta/](http://www.bryntum.com/products/siesta/)\n\nSiesta is a JavaScript testing tool that can help you test any JavaScript code and also perform testing of the DOM and simulate user interactions. UI tests attempt to subjectively verify that elements on the screen behave (and often look) as expected, both statically (i.e. the flat render) and also dynamically (i.e. as users perform given actions). Siesta from Bryntum is the best tool on the market. Using the API, you can choose from many types of assertions ranging from simple logical JS object comparisons to verifying that an HTML element is visible in the DOM. It is possible to test JavaScript in the browser and you can automate your tests. Once you have created your test suite, you should consider running it in the cloud using great services we support, such as Sauce or BrowserStack. See also: [http://saucelabs.com/](http://saucelabs.com/) and [http://www.browserstack.com/](http://www.browserstack.com/)\n\n**Build process**\n-----------------\n\nSencha Cmd (and our build processes) run on top of Apache Ant. Apache Ant is a software tool for automating software build processes. It is implemented using the Java language therefore it requires the Java platform. You can write / wire up your own build process and code analysis tools as well. You can write these hooks in the **build.xml** file (in the project root). The file looks like this:\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<project name=\"BarFinder\" default=\".help\">\n<!--\nThe build-impl.xml file imported here contains the guts of the build process. It is\na great idea to read that file to understand how the process works, but it is best to\nlimit your changes to this file.\n-->\n\n<import file=\"${basedir}/.sencha/app/build-impl.xml\"/>\n<!--\nThe following targets can be provided to inject logic before and/or after key steps\nof the build process:\nThe \"init-local\" target is used to initialize properties that may be personalized\nfor the local machine.\n<target name=\"-before-init-local\"/>\n<target name=\"-after-init-local\"/>\n\nThe \"clean\" target is used to clean build output from the build.dir.\n\n<target name=\"-before-clean\"/>\n<target name=\"-after-clean\"/>\n\nThe general \"init\" target is used to initialize all other properties, including\nthose provided by Sencha Cmd.\n\n<target name=\"-before-init\"/>\n<target name=\"-after-init\"/>\n\nThe \"page\" target performs the call to Sencha Cmd to build the 'all-classes.js' file.\n\n<target name=\"-before-page\"/>\n<target name=\"-after-page\"/>\n\nThe \"build\" target performs the call to Sencha Cmd to build the application.\n\n<target name=\"-before-build\"/>\n<target name=\"-after-build\"/>\n-->\n</project>\n\nAs you can see lots of code is commented out in here. So nothing is really happening yet. But you can create your own hooks. There’s a Sencha guide online, which contains the available tasks you can use: [http://docs.sencha.com/cmd/5.x/advanced\\_cmd/cmd\\_ant.html](http://docs.sencha.com/cmd/5.x/advanced_cmd/cmd_ant.html) For example, here’s a code snippet I have used to create different build packages, where the folder name of the build contains a date.\n\n<target name=\"-after-build\">\n<tstamp>\n<format property=\"today\" pattern=\"yyyy-MM-dd\"/>\n</tstamp>\n\n<copy todir=\"${build.dir}/../../dist/${app.name}/${today}-mybuild\" overwrite=\"true\">\n<fileset dir=\"${build.dir}\">\n<include name=\"**/*\" />\n</fileset>\n</copy>\n\n</target>\n\nFor more information, please see: [http://ant.apache.org/](http://ant.apache.org/)\n\n**Conclusion**\n--------------\n\nWhen you are building serious enterprise applications you will need to come up with a strategy on how to analyze, test and collaborate your code. As you can see, choosing Sencha empowers developers to design, develop, test and deploy in development teams of any size.","source":"_drafts/how-tos/how-to-improve-your-sencha-code-while-working-in-large-teams.md","raw":"---\ntitle: How to improve your Sencha code while working in large teams?\nurl: 626.html\nid: 626\ncategories:\n  - Architect\n  - Cmd\n  - Environment\n  - Ext JS\n  - Ext JS 5\n  - Ext JS 6\n  - Git\n  - Jasmine\n  - Sencha\n  - TDD\ndate: 2015-06-05 10:00:28\ntags:\n---\n\nOften I get questions from people on how to work efficiently with Sencha while developing in a large team environment.. This question is especially popular for people coming from the Java world, who are familiar with tooling for Java and build processes. I can tell you that it’s not much different for web projects. This article will discuss the following concepts:\n\n*   Source Control\n*   Sencha Architect for teams\n*   Editors & IDEs and configuration\n*   Code analysis tools\n*   Code reviews\n*   Test tools\n*   Build processes\n\n**Source Control**\n------------------\n\nUse a versioning / source control system, to track changes, share your code and save your code revisions as easy backups. A popular Versioning Control tool is Git. (but you can use any versioning tool of choice, such as SVN, CVS, Mercurial, etc...)\n\n### **Working with Git**\n\nInternally at Sencha we use Git & Github. What’s important to know, is that you don’t want to check-in certain files and folders. When you do check in the framework or build folders, keep in mind that there are more changes on Git conflicts, and your code base will become extremely large. To make sure you don’t check-in these files by accident, create a **.gitignore** file in your project root. I am often using these ignore rules:\n\n\\# OS generated files #\n######################\n\n*/.DS_Store\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nIcon?\nehthumbs.db\nThumbs.db\n\n\\# Packages #\n############\n\n\\# it's better to unpack these files and commit the raw source\n\\# git has its own built in compression methods\n\n*.7z\n*.dmg\n*.gz\n*.iso\n*.jar\n*.rar\n*.tar\n*.zip\n\n\\# Sencha Development #\n######################\n\n.architect\n.project\n.sencha/\n.sass-cache/\next/\ntouch/\ntemp/\nbuild/\n\n**TIP:** Wait? You didn't check in the frameworks? Yep. Usually I prefer it to keep my version control light and clean. (I can tell you how much pain it is, when whole versions of Ext JS are checked into GIT, and how horrible it is, to use the GIT client, while it's slow or crashing down.) - To give you an impression, the Sencha sdk is over 100 MB.  So not checking in the sdk, means, you will have to generate a new application/workspace, with the same name space; and copy over the files. **TIP:** In case you by accident already committed certain files to Git, you have to remove them first from Git before ignoring them. For example: `**git rm file1.txt** **git commit -m \"remove file1.txt\"** **git push**` In case you have all these annoying OS generated files in Git, you can remove them like this: `**find . -name '*.DS_Store' -type f -delete**` For more information about Git, checkout:\n\n*   [http://git-scm.com/](http://git-scm.com/)\n*   [http://www.github.com](http://www.github.com)\n\n### **What about Git and Sencha Architect?**\n\nWhen you're familiar with Git you shouldn’t have problems collaborating with multiple developers using Sencha Architect. The Sencha Architect metadata code and resultant JavaScript are very source-control friendly. But it is good to know that Sencha Architect creates meta data. (see metadata folder in your folder structure of an Sencha Architect. project). These metadata are used to generate the JavaScript in the app folder. (_Basically, you don’t need to add the app folder under source control. Since Sencha Architect auto generates these files once you open and save the project in Sencha Architect_.) Because of this metadata it is possible to work in the same Sencha Architect project with multiple developers. As you can see in the screenshot, the metadata maps a similar folder structure as the application file structure. Every Sencha class has its own meta data file, which is basically a JSON object. As long as you don’t work on the same files, there won’t be any conflicts. For more information about using Sencha Architect in project teams, take a look into this serie of blog posts written by Richard G Milone who works for CNX. It explains the process really well:\n\n*   [http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-1-of-3/](http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-1-of-3/)\n*   [http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-2-of-3/](http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-2-of-3/)\n*   [http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-3-of-3/](http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-3-of-3/)\n*   [http://docs.sencha.com/architect/3/getting\\_started/developing\\_team_apps.html](http://docs.sencha.com/architect/3/getting_started/developing_team_apps.html)\n\n### **Sencha & Git in general**\n\nWhether you are working with Sencha Architect, or just writing code yourself, the best practice would be to define (smaller) classes, and nesting it through xtypes. Every (view) component, should have its own class, with its own namespace. We don’t need to worry about all these separate files since the Sencha build process (with Sencha Cmd / Sencha Architect uses Sencha Cmd in the background), concatenates and minifies all these classes into one single small file. This improves readability, usability and maintainability but think about it. It also will improve your workflow with source control systems. Cause smaller single files, reduces the change on working with your co-worker on the same file. When you develop your application with Sencha Architect, and you are dragging your components into the design canvas… ..by default all these views will be nested into one single file. (the viewport). You can promote these smaller view pieces to its own classes, so it will become a single class file, which will be nested via its xtype. For example, when you have a viewport with a form with fields, and a component with a template. You can promote the form and the detail component to its own class, by right clicking on the form (or detail component), and select: ‘Promote To Class”. After you selected that, you will see a link icon, which indicates that its a linked to its own class. You can start re-using it now too! Just sometimes, you are both working on the same file. This will result into a merge conflict as soon as you push your version to Git. Git will reject it. I know, this is not nice, but it’s not the end of the world. Always make a backup of your own file, to somewhere else in your file system. You can merge a file. There are various tools available for your editors / IDEs that deal with merging files. Also Git provides a Graphical User Interface which can show the differences. Another solution can be to accept or revert the changes and merge it yourself manually. **TIP:** Traditionally we recommend that users do not check in the **.architect** file or the framework and build folders into their source control systems. In situations where it is necessary to check these into the repository (for example, because you want to run the application directly in your browser after fetching the project), we suggest that you check it in and then add it to the ignore list so that there will not be further conflicts. Last but not least, the overall best solution for working in a team with source control, is communication! It’s just so much easier if you let your co-worker know, on which file / part of the app you are working on!\n\n**Editors & IDEs**\n------------------\n\nWhile writing Sencha code you can use any editor or IDE of choice. Here are a couple of suggestions:\n\n*   **WebStorm / IntelliJ IDEA** from JetBrains - [https://www.jetbrains.com/](https://www.jetbrains.com/)\n\nIDEA is an IDE great for Java developers. WebStorm is their JavaScript version of the IDE. What’s nice of WebStorm is that it recognizes the Sencha frameworks, and therefore you can use code auto completion. WebStorm is commercial. IDEA has an oper source version.\n\n*   _**_Eclipse_**_ _\\-_ [_https://eclipse.org/_](https://eclipse.org/)\n\n_Open source IDE mostly focussed on Java development._\n\n*   _**_Sublime Text Editor_**_ _\\-_ [_http://www.sublimetext.com/_](http://www.sublimetext.com/)\n\n_A simplistic editor for code and markup with amazing performance. (Commercial)_\n\n*   _**_Brackets_**_ _\\-_ [_http://brackets.io/_](http://brackets.io/)\n\n_A modern simplistic open source editor, great for web development._ All of these tools have the ability to use with plugins. For example, plugins to integrate code analysis tools or source control tools.\n\n### **Editor / IDE configuration**\n\nWhen you work in a team, what’s most important is that you have your editor/IDE configured the same. Common editor settings are:\n\n*   **Indent Style**: set to tab or space to use hard tabs or soft tabs respectively.\n*   **Indent Size**: a whole number defining the number of columns used for each indentation level and the width of soft tabs (when supported).\n*   **Tab Width**: a whole number defining the number of columns used to represent a tab character.\n*   **End of Line**: set to lf, cr, or crlf to control how line breaks are represented.\n*   **Charset**: set to latin1, utf-8, utf-16be or utf-16le to control the character set.\n*   **Trim trailing whitespace**: Enable to remove any whitespace characters preceding newline characters and false to ensure it doesn't.\n*   **Insert final newline**: Enable to ensure file ends with a newline or not.\n\nWhen these settings are out of sync in a team, you can run into many source control conflicts and hard to solve file merges.\n\n**Code analysis tools**\n-----------------------\n\nThere are a couple of tools you can use to analyse your code. Popular tools for JavaScript development are:\n\n*   **JSLint** \\- [http://www.jslint.com/](http://www.jslint.com/)\n\nA JavaScript syntax checker and validator on coding rules written by Douglas Crockford.\n\n*   **JSHint** \\- [http://jshint.com/](http://jshint.com/)\n\nA community driven fork of JSLint, which is not as strict as JSLint. There are many plugins available for IDE’s and editors, to check the JavaScript code while writing using the above tools.\n\n### **Analysing code with Sencha Cmd**\n\nWhat’s also nice to know is Sencha Cmd does code checking. Every time when you run a sencha app build or sencha app build testing on the command-line, it will validate your JavaScript code. Lint errors will show up as parse warnings in your console. Not only it checks your JavaScript errors, it will also check your Sass stylesheet for errors, before compiling it to production ready CSS. Sencha Cmd has Rhino 1.7 and PhantomJS under the hood. These are JavaScript interpreters, it does not have the DOM implementation of a browser. Therefore it can run some nice things. Such as Linting/Validating or testing the code while building. For example Sencha Cmd uses PhantomJS for its image slicer. Because of PhantomJS, Sencha Cmd can make a screenshot, and slice it into images to serve to older browsers. For more information, see:\n\n*   [https://developer.mozilla.org/en/docs/Rhino_documentation](https://developer.mozilla.org/en/docs/Rhino_documentation)\n*   [http://phantomjs.org/](http://phantomjs.org/)\n\n**Code Reviews**\n----------------\n\nIt is also possible to let Sencha check your code. You can hire a Sencha professional services consultant who can review your code during certain points in your development process. We will check for best practices and see how to optimize your application and performance.\n\n**Tools for testing your Sencha Code**\n--------------------------------------\n\nLet’s look into ways how to test your Sencha code:\n\n*   **Jasmine** \\- [http://jasmine.github.io/](http://jasmine.github.io/)\n\nJasmine is an open source unit testing framework for JavaScript. Unit Tests attempt to isolate small pieces of code and objectively verify application logic. Jasmine aims to run on any JavaScript-enabled platform, to not intrude on the application nor the IDE, and to have easy-to-read syntax. See also: [https://vimeo.com/18100173](https://vimeo.com/18100173)\n\n*   **Siesta** \\- [http://www.bryntum.com/products/siesta/](http://www.bryntum.com/products/siesta/)\n\nSiesta is a JavaScript testing tool that can help you test any JavaScript code and also perform testing of the DOM and simulate user interactions. UI tests attempt to subjectively verify that elements on the screen behave (and often look) as expected, both statically (i.e. the flat render) and also dynamically (i.e. as users perform given actions). Siesta from Bryntum is the best tool on the market. Using the API, you can choose from many types of assertions ranging from simple logical JS object comparisons to verifying that an HTML element is visible in the DOM. It is possible to test JavaScript in the browser and you can automate your tests. Once you have created your test suite, you should consider running it in the cloud using great services we support, such as Sauce or BrowserStack. See also: [http://saucelabs.com/](http://saucelabs.com/) and [http://www.browserstack.com/](http://www.browserstack.com/)\n\n**Build process**\n-----------------\n\nSencha Cmd (and our build processes) run on top of Apache Ant. Apache Ant is a software tool for automating software build processes. It is implemented using the Java language therefore it requires the Java platform. You can write / wire up your own build process and code analysis tools as well. You can write these hooks in the **build.xml** file (in the project root). The file looks like this:\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<project name=\"BarFinder\" default=\".help\">\n<!--\nThe build-impl.xml file imported here contains the guts of the build process. It is\na great idea to read that file to understand how the process works, but it is best to\nlimit your changes to this file.\n-->\n\n<import file=\"${basedir}/.sencha/app/build-impl.xml\"/>\n<!--\nThe following targets can be provided to inject logic before and/or after key steps\nof the build process:\nThe \"init-local\" target is used to initialize properties that may be personalized\nfor the local machine.\n<target name=\"-before-init-local\"/>\n<target name=\"-after-init-local\"/>\n\nThe \"clean\" target is used to clean build output from the build.dir.\n\n<target name=\"-before-clean\"/>\n<target name=\"-after-clean\"/>\n\nThe general \"init\" target is used to initialize all other properties, including\nthose provided by Sencha Cmd.\n\n<target name=\"-before-init\"/>\n<target name=\"-after-init\"/>\n\nThe \"page\" target performs the call to Sencha Cmd to build the 'all-classes.js' file.\n\n<target name=\"-before-page\"/>\n<target name=\"-after-page\"/>\n\nThe \"build\" target performs the call to Sencha Cmd to build the application.\n\n<target name=\"-before-build\"/>\n<target name=\"-after-build\"/>\n-->\n</project>\n\nAs you can see lots of code is commented out in here. So nothing is really happening yet. But you can create your own hooks. There’s a Sencha guide online, which contains the available tasks you can use: [http://docs.sencha.com/cmd/5.x/advanced\\_cmd/cmd\\_ant.html](http://docs.sencha.com/cmd/5.x/advanced_cmd/cmd_ant.html) For example, here’s a code snippet I have used to create different build packages, where the folder name of the build contains a date.\n\n<target name=\"-after-build\">\n<tstamp>\n<format property=\"today\" pattern=\"yyyy-MM-dd\"/>\n</tstamp>\n\n<copy todir=\"${build.dir}/../../dist/${app.name}/${today}-mybuild\" overwrite=\"true\">\n<fileset dir=\"${build.dir}\">\n<include name=\"**/*\" />\n</fileset>\n</copy>\n\n</target>\n\nFor more information, please see: [http://ant.apache.org/](http://ant.apache.org/)\n\n**Conclusion**\n--------------\n\nWhen you are building serious enterprise applications you will need to come up with a strategy on how to analyze, test and collaborate your code. As you can see, choosing Sencha empowers developers to design, develop, test and deploy in development teams of any size.","slug":"how-tos/how-to-improve-your-sencha-code-while-working-in-large-teams","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnczc0108kif54anrwi4c","content":"<p>Often I get questions from people on how to work efficiently with Sencha\n  while developing in a large team environment.. This question is especially\n  popular for people coming from the Java world, who are familiar with tooling\n  for Java and build processes. I can tell you that it’s not much different for\n  web projects. This article will discuss the following concepts:</p>\n<ul>\n  <li>Source Control</li>\n  <li>Sencha Architect for teams</li>\n  <li>Editors &amp; IDEs and configuration</li>\n  <li>Code analysis tools</li>\n  <li>Code reviews</li>\n  <li>Test tools</li>\n  <li>Build processes</li>\n</ul>\n<h2 id=\"Source-Control\"><a href=\"#Source-Control\" class=\"headerlink\" title=\"Source Control\"></a><strong>Source\n    Control</strong></h2>\n<p>Use a versioning / source control system, to track changes, share your code\n  and save your code revisions as easy backups. A popular Versioning Control\n  tool is Git. (but you can use any versioning tool of choice, such as SVN,\n  CVS, Mercurial, etc…)</p>\n<h3 id=\"Working-with-Git\"><a href=\"#Working-with-Git\" class=\"headerlink\" title=\"Working with Git\"></a><strong>Working\n    with Git</strong></h3>\n<p>Internally at Sencha we use Git &amp; Github. What’s important to know, is\n  that you don’t want to check-in certain files and folders. When you do check\n  in the framework or build folders, keep in mind that there are more changes\n  on Git conflicts, and your code base will become extremely large. To make\n  sure you don’t check-in these files by accident, create a <strong>.gitignore</strong>\n  file in your project root. I am often using these ignore rules:</p>\n<p># OS generated files #</p>\n<p>######################</p>\n<p><em>/.DS_Store .DS_Store .DS_Store? ._</em> .Spotlight-V100 .Trashes Icon?\n  ehthumbs.db Thumbs.db</p>\n<p># Packages #</p>\n<p>############</p>\n<p># it’s better to unpack these files and commit the raw source # git has its\n  own built in compression methods</p>\n<p><em>.7z </em>.dmg <em>.gz </em>.iso <em>.jar </em>.rar <em>.tar </em>.zip</p>\n<p># Sencha Development #</p>\n<p>######################</p>\n<p>.architect .project .sencha/ .sass-cache/ ext/ touch/ temp/ build/</p>\n<p><strong>TIP:</strong> Wait? You didn’t check in the frameworks? Yep. Usually\n  I prefer it to keep my version control light and clean. (I can tell you how\n  much pain it is, when whole versions of Ext JS are checked into GIT, and how\n  horrible it is, to use the GIT client, while it’s slow or crashing down.) -\n  To give you an impression, the Sencha sdk is over 100 MB. So not checking in\n  the sdk, means, you will have to generate a new application/workspace, with\n  the same name space; and copy over the files. <strong>TIP:</strong> In case\n  you by accident already committed certain files to Git, you have to remove\n  them first from Git before ignoring them. For example: <code>**git rm\n    file1.txt** **git commit -m &quot;remove file1.txt&quot;** **git push**</code>\n  In case you have all these annoying OS generated files in Git, you can remove\n  them like this: <code>**find . -name &#39;*.DS_Store&#39; -type f -delete**</code>\n  For more information about Git, checkout:</p>\n<ul>\n  <li><a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"noopener\">http://git-scm.com/</a></li>\n  <li><a href=\"http://www.github.com\" target=\"_blank\" rel=\"noopener\">http://www.github.com</a></li>\n</ul>\n<h3 id=\"What-about-Git-and-Sencha-Architect\"><a href=\"#What-about-Git-and-Sencha-Architect\" class=\"headerlink\" title=\"What about Git and Sencha Architect?\"></a><strong>What\n    about Git and Sencha Architect?</strong></h3>\n<p>When you’re familiar with Git you shouldn’t have problems collaborating with\n  multiple developers using Sencha Architect. The Sencha Architect metadata\n  code and resultant JavaScript are very source-control friendly. But it is\n  good to know that Sencha Architect creates meta data. (see metadata folder in\n  your folder structure of an Sencha Architect. project). These metadata are\n  used to generate the JavaScript in the app folder. (<em>Basically, you don’t\n    need to add the app folder under source control. Since Sencha Architect\n    auto generates these files once you open and save the project in Sencha\n    Architect</em>.) Because of this metadata it is possible to work in the\n  same Sencha Architect project with multiple developers. As you can see in the\n  screenshot, the metadata maps a similar folder structure as the application\n  file structure. Every Sencha class has its own meta data file, which is\n  basically a JSON object. As long as you don’t work on the same files, there\n  won’t be any conflicts. For more information about using Sencha Architect in\n  project teams, take a look into this serie of blog posts written by Richard G\n  Milone who works for CNX. It explains the process really well:</p>\n<ul>\n  <li><a href=\"http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-1-of-3/\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-1-of-3/</a></li>\n  <li><a href=\"http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-2-of-3/\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-2-of-3/</a></li>\n  <li><a href=\"http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-3-of-3/\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-3-of-3/</a></li>\n  <li><a href=\"http://docs.sencha.com/architect/3/getting_started/developing_team_apps.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/architect/3/getting_started/developing_team_apps.html</a></li>\n</ul>\n<h3 id=\"Sencha-amp-Git-in-general\"><a href=\"#Sencha-amp-Git-in-general\" class=\"headerlink\" title=\"Sencha &amp; Git in general\"></a><strong>Sencha\n    &amp; Git in general</strong></h3>\n<p>Whether you are working with Sencha Architect, or just writing code\n  yourself, the best practice would be to define (smaller) classes, and nesting\n  it through xtypes. Every (view) component, should have its own class, with\n  its own namespace. We don’t need to worry about all these separate files\n  since the Sencha build process (with Sencha Cmd / Sencha Architect uses\n  Sencha Cmd in the background), concatenates and minifies all these classes\n  into one single small file. This improves readability, usability and\n  maintainability but think about it. It also will improve your workflow with\n  source control systems. Cause smaller single files, reduces the change on\n  working with your co-worker on the same file. When you develop your\n  application with Sencha Architect, and you are dragging your components into\n  the design canvas… ..by default all these views will be nested into one\n  single file. (the viewport). You can promote these smaller view pieces to its\n  own classes, so it will become a single class file, which will be nested via\n  its xtype. For example, when you have a viewport with a form with fields, and\n  a component with a template. You can promote the form and the detail\n  component to its own class, by right clicking on the form (or detail\n  component), and select: ‘Promote To Class”. After you selected that, you will\n  see a link icon, which indicates that its a linked to its own class. You can\n  start re-using it now too! Just sometimes, you are both working on the same\n  file. This will result into a merge conflict as soon as you push your version\n  to Git. Git will reject it. I know, this is not nice, but it’s not the end of\n  the world. Always make a backup of your own file, to somewhere else in your\n  file system. You can merge a file. There are various tools available for your\n  editors / IDEs that deal with merging files. Also Git provides a Graphical\n  User Interface which can show the differences. Another solution can be to\n  accept or revert the changes and merge it yourself manually. <strong>TIP:</strong>\n  Traditionally we recommend that users do not check in the <strong>.architect</strong>\n  file or the framework and build folders into their source control systems. In\n  situations where it is necessary to check these into the repository (for\n  example, because you want to run the application directly in your browser\n  after fetching the project), we suggest that you check it in and then add it\n  to the ignore list so that there will not be further conflicts. Last but not\n  least, the overall best solution for working in a team with source control,\n  is communication! It’s just so much easier if you let your co-worker know, on\n  which file / part of the app you are working on!</p>\n<h2 id=\"Editors-amp-IDEs\"><a href=\"#Editors-amp-IDEs\" class=\"headerlink\" title=\"Editors &amp; IDEs\"></a><strong>Editors\n    &amp; IDEs</strong></h2>\n<p>While writing Sencha code you can use any editor or IDE of choice. Here are\n  a couple of suggestions:</p>\n<ul>\n  <li><strong>WebStorm / IntelliJ IDEA</strong> from JetBrains - <a href=\"https://www.jetbrains.com/\" target=\"_blank\" rel=\"noopener\">https://www.jetbrains.com/</a></li>\n</ul>\n<p>IDEA is an IDE great for Java developers. WebStorm is their JavaScript\n  version of the IDE. What’s nice of WebStorm is that it recognizes the Sencha\n  frameworks, and therefore you can use code auto completion. WebStorm is\n  commercial. IDEA has an oper source version.</p>\n<ul>\n  <li>_<strong><em>Eclipse</em></strong>_ _-_ <a href=\"https://eclipse.org/\" target=\"_blank\" rel=\"noopener\"><em>https://eclipse.org/</em></a></li>\n</ul>\n<p><em>Open source IDE mostly focussed on Java development.</em></p>\n<ul>\n  <li>_<strong><em>Sublime Text Editor</em></strong>_ _-_ <a href=\"http://www.sublimetext.com/\" target=\"_blank\" rel=\"noopener\"><em>http://www.sublimetext.com/</em></a></li>\n</ul>\n<p><em>A simplistic editor for code and markup with amazing performance.\n    (Commercial)</em></p>\n<ul>\n  <li>_<strong><em>Brackets</em></strong>_ _-_ <a href=\"http://brackets.io/\" target=\"_blank\" rel=\"noopener\"><em>http://brackets.io/</em></a></li>\n</ul>\n<p><em>A modern simplistic open source editor, great for web development.</em>\n  All of these tools have the ability to use with plugins. For example, plugins\n  to integrate code analysis tools or source control tools.</p>\n<h3 id=\"Editor-IDE-configuration\"><a href=\"#Editor-IDE-configuration\" class=\"headerlink\" title=\"Editor / IDE configuration\"></a><strong>Editor\n    / IDE configuration</strong></h3>\n<p>When you work in a team, what’s most important is that you have your\n  editor/IDE configured the same. Common editor settings are:</p>\n<ul>\n  <li><strong>Indent Style</strong>: set to tab or space to use hard tabs or\n    soft tabs respectively.</li>\n  <li><strong>Indent Size</strong>: a whole number defining the number of\n    columns used for each indentation level and the width of soft tabs (when\n    supported).</li>\n  <li><strong>Tab Width</strong>: a whole number defining the number of columns\n    used to represent a tab character.</li>\n  <li><strong>End of Line</strong>: set to lf, cr, or crlf to control how line\n    breaks are represented.</li>\n  <li><strong>Charset</strong>: set to latin1, utf-8, utf-16be or utf-16le to\n    control the character set.</li>\n  <li><strong>Trim trailing whitespace</strong>: Enable to remove any\n    whitespace characters preceding newline characters and false to ensure it\n    doesn’t.</li>\n  <li><strong>Insert final newline</strong>: Enable to ensure file ends with a\n    newline or not.</li>\n</ul>\n<p>When these settings are out of sync in a team, you can run into many source\n  control conflicts and hard to solve file merges.</p>\n<h2 id=\"Code-analysis-tools\"><a href=\"#Code-analysis-tools\" class=\"headerlink\" title=\"Code analysis tools\"></a><strong>Code\n    analysis tools</strong></h2>\n<p>There are a couple of tools you can use to analyse your code. Popular tools\n  for JavaScript development are:</p>\n<ul>\n  <li><strong>JSLint</strong> - <a href=\"http://www.jslint.com/\" target=\"_blank\" rel=\"noopener\">http://www.jslint.com/</a></li>\n</ul>\n<p>A JavaScript syntax checker and validator on coding rules written by Douglas\n  Crockford.</p>\n<ul>\n  <li><strong>JSHint</strong> - <a href=\"http://jshint.com/\" target=\"_blank\" rel=\"noopener\">http://jshint.com/</a></li>\n</ul>\n<p>A community driven fork of JSLint, which is not as strict as JSLint. There\n  are many plugins available for IDE’s and editors, to check the JavaScript\n  code while writing using the above tools.</p>\n<h3 id=\"Analysing-code-with-Sencha-Cmd\"><a href=\"#Analysing-code-with-Sencha-Cmd\" class=\"headerlink\" title=\"Analysing code with Sencha Cmd\"></a><strong>Analysing\n    code with Sencha Cmd</strong></h3>\n<p>What’s also nice to know is Sencha Cmd does code checking. Every time when\n  you run a sencha app build or sencha app build testing on the command-line,\n  it will validate your JavaScript code. Lint errors will show up as parse\n  warnings in your console. Not only it checks your JavaScript errors, it will\n  also check your Sass stylesheet for errors, before compiling it to production\n  ready CSS. Sencha Cmd has Rhino 1.7 and PhantomJS under the hood. These are\n  JavaScript interpreters, it does not have the DOM implementation of a\n  browser. Therefore it can run some nice things. Such as Linting/Validating or\n  testing the code while building. For example Sencha Cmd uses PhantomJS for\n  its image slicer. Because of PhantomJS, Sencha Cmd can make a screenshot, and\n  slice it into images to serve to older browsers. For more information, see:</p>\n<ul>\n  <li><a href=\"https://developer.mozilla.org/en/docs/Rhino_documentation\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en/docs/Rhino_documentation</a></li>\n  <li><a href=\"http://phantomjs.org/\" target=\"_blank\" rel=\"noopener\">http://phantomjs.org/</a></li>\n</ul>\n<h2 id=\"Code-Reviews\"><a href=\"#Code-Reviews\" class=\"headerlink\" title=\"Code Reviews\"></a><strong>Code\n    Reviews</strong></h2>\n<p>It is also possible to let Sencha check your code. You can hire a Sencha\n  professional services consultant who can review your code during certain\n  points in your development process. We will check for best practices and see\n  how to optimize your application and performance.</p>\n<h2 id=\"Tools-for-testing-your-Sencha-Code\"><a href=\"#Tools-for-testing-your-Sencha-Code\" class=\"headerlink\" title=\"Tools for testing your Sencha Code\"></a><strong>Tools\n    for testing your Sencha Code</strong></h2>\n<p>Let’s look into ways how to test your Sencha code:</p>\n<ul>\n  <li><strong>Jasmine</strong> - <a href=\"http://jasmine.github.io/\" target=\"_blank\" rel=\"noopener\">http://jasmine.github.io/</a></li>\n</ul>\n<p>Jasmine is an open source unit testing framework for JavaScript. Unit Tests\n  attempt to isolate small pieces of code and objectively verify application\n  logic. Jasmine aims to run on any JavaScript-enabled platform, to not intrude\n  on the application nor the IDE, and to have easy-to-read syntax. See also: <a href=\"https://vimeo.com/18100173\" target=\"_blank\" rel=\"noopener\">https://vimeo.com/18100173</a></p>\n<ul>\n  <li><strong>Siesta</strong> - <a href=\"http://www.bryntum.com/products/siesta/\" target=\"_blank\" rel=\"noopener\">http://www.bryntum.com/products/siesta/</a></li>\n</ul>\n<p>Siesta is a JavaScript testing tool that can help you test any JavaScript\n  code and also perform testing of the DOM and simulate user interactions. UI\n  tests attempt to subjectively verify that elements on the screen behave (and\n  often look) as expected, both statically (i.e. the flat render) and also\n  dynamically (i.e. as users perform given actions). Siesta from Bryntum is the\n  best tool on the market. Using the API, you can choose from many types of\n  assertions ranging from simple logical JS object comparisons to verifying\n  that an HTML element is visible in the DOM. It is possible to test JavaScript\n  in the browser and you can automate your tests. Once you have created your\n  test suite, you should consider running it in the cloud using great services\n  we support, such as Sauce or BrowserStack. See also: <a href=\"http://saucelabs.com/\" target=\"_blank\" rel=\"noopener\">http://saucelabs.com/</a>\n  and <a href=\"http://www.browserstack.com/\" target=\"_blank\" rel=\"noopener\">http://www.browserstack.com/</a></p>\n<h2 id=\"Build-process\"><a href=\"#Build-process\" class=\"headerlink\" title=\"Build process\"></a><strong>Build\n    process</strong></h2>\n<p>Sencha Cmd (and our build processes) run on top of Apache Ant. Apache Ant is\n  a software tool for automating software build processes. It is implemented\n  using the Java language therefore it requires the Java platform. You can\n  write / wire up your own build process and code analysis tools as well. You\n  can write these hooks in the <strong>build.xml</strong> file (in the project\n  root). The file looks like this:</p>\n<p>&lt;?xml version=”1.0” encoding=”utf-8”?&gt;</p>\n<project name=\"BarFinder\" default>\n  <import file=\"${basedir}/.sencha/app/build-impl.xml\"></import>\n</project>\n<p>As you can see lots of code is commented out in here. So nothing is really\n  happening yet. But you can create your own hooks. There’s a Sencha guide\n  online, which contains the available tasks you can use: <a href=\"http://docs.sencha.com/cmd/5.x/advanced_cmd/cmd_ant.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/5.x/advanced_cmd/cmd_ant.html</a>\n  For example, here’s a code snippet I have used to create different build\n  packages, where the folder name of the build contains a date.</p>\n<target name=\"-after-build\">\n  <tstamp>\n    <format property=\"today\" pattern=\"yyyy-MM-dd\"></format>\n  </tstamp>\n  <copy todir=\"${build.dir}/../../dist/${app.name}/${today}-mybuild\" overwrite=\"true\">\n    <fileset dir=\"${build.dir}\">\n      <include name=\"**/*\"></include>\n    </fileset>\n  </copy>\n</target>\n<p>For more information, please see: <a href=\"http://ant.apache.org/\" target=\"_blank\" rel=\"noopener\">http://ant.apache.org/</a></p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a><strong>Conclusion</strong></h2>\n<p>When you are building serious enterprise applications you will need to come\n  up with a strategy on how to analyze, test and collaborate your code. As you\n  can see, choosing Sencha empowers developers to design, develop, test and\n  deploy in development teams of any size.</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>Often I get questions from people on how to work efficiently with Sencha\n  while developing in a large team environment.. This question is especially\n  popular for people coming from the Java world, who are familiar with tooling\n  for Java and build processes. I can tell you that it’s not much different for\n  web projects. This article will discuss the following concepts:</p>\n<ul>\n  <li>Source Control</li>\n  <li>Sencha Architect for teams</li>\n  <li>Editors &amp; IDEs and configuration</li>\n  <li>Code analysis tools</li>\n  <li>Code reviews</li>\n  <li>Test tools</li>\n  <li>Build processes</li>\n</ul>\n<h2 id=\"Source-Control\"><a href=\"#Source-Control\" class=\"headerlink\" title=\"Source Control\"></a><strong>Source\n    Control</strong></h2>\n<p>Use a versioning / source control system, to track changes, share your code\n  and save your code revisions as easy backups. A popular Versioning Control\n  tool is Git. (but you can use any versioning tool of choice, such as SVN,\n  CVS, Mercurial, etc…)</p>\n<h3 id=\"Working-with-Git\"><a href=\"#Working-with-Git\" class=\"headerlink\" title=\"Working with Git\"></a><strong>Working\n    with Git</strong></h3>\n<p>Internally at Sencha we use Git &amp; Github. What’s important to know, is\n  that you don’t want to check-in certain files and folders. When you do check\n  in the framework or build folders, keep in mind that there are more changes\n  on Git conflicts, and your code base will become extremely large. To make\n  sure you don’t check-in these files by accident, create a <strong>.gitignore</strong>\n  file in your project root. I am often using these ignore rules:</p>\n<p># OS generated files #</p>\n<p>######################</p>\n<p><em>/.DS_Store .DS_Store .DS_Store? ._</em> .Spotlight-V100 .Trashes Icon?\n  ehthumbs.db Thumbs.db</p>\n<p># Packages #</p>\n<p>############</p>\n<p># it’s better to unpack these files and commit the raw source # git has its\n  own built in compression methods</p>\n<p><em>.7z </em>.dmg <em>.gz </em>.iso <em>.jar </em>.rar <em>.tar </em>.zip</p>\n<p># Sencha Development #</p>\n<p>######################</p>\n<p>.architect .project .sencha/ .sass-cache/ ext/ touch/ temp/ build/</p>\n<p><strong>TIP:</strong> Wait? You didn’t check in the frameworks? Yep. Usually\n  I prefer it to keep my version control light and clean. (I can tell you how\n  much pain it is, when whole versions of Ext JS are checked into GIT, and how\n  horrible it is, to use the GIT client, while it’s slow or crashing down.) -\n  To give you an impression, the Sencha sdk is over 100 MB. So not checking in\n  the sdk, means, you will have to generate a new application/workspace, with\n  the same name space; and copy over the files. <strong>TIP:</strong> In case\n  you by accident already committed certain files to Git, you have to remove\n  them first from Git before ignoring them. For example: <code>**git rm\n    file1.txt** **git commit -m &quot;remove file1.txt&quot;** **git push**</code>\n  In case you have all these annoying OS generated files in Git, you can remove\n  them like this: <code>**find . -name &#39;*.DS_Store&#39; -type f -delete**</code>\n  For more information about Git, checkout:</p>\n<ul>\n  <li><a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"noopener\">http://git-scm.com/</a></li>\n  <li><a href=\"http://www.github.com\" target=\"_blank\" rel=\"noopener\">http://www.github.com</a></li>\n</ul>\n<h3 id=\"What-about-Git-and-Sencha-Architect\"><a href=\"#What-about-Git-and-Sencha-Architect\" class=\"headerlink\" title=\"What about Git and Sencha Architect?\"></a><strong>What\n    about Git and Sencha Architect?</strong></h3>\n<p>When you’re familiar with Git you shouldn’t have problems collaborating with\n  multiple developers using Sencha Architect. The Sencha Architect metadata\n  code and resultant JavaScript are very source-control friendly. But it is\n  good to know that Sencha Architect creates meta data. (see metadata folder in\n  your folder structure of an Sencha Architect. project). These metadata are\n  used to generate the JavaScript in the app folder. (<em>Basically, you don’t\n    need to add the app folder under source control. Since Sencha Architect\n    auto generates these files once you open and save the project in Sencha\n    Architect</em>.) Because of this metadata it is possible to work in the\n  same Sencha Architect project with multiple developers. As you can see in the\n  screenshot, the metadata maps a similar folder structure as the application\n  file structure. Every Sencha class has its own meta data file, which is\n  basically a JSON object. As long as you don’t work on the same files, there\n  won’t be any conflicts. For more information about using Sencha Architect in\n  project teams, take a look into this serie of blog posts written by Richard G\n  Milone who works for CNX. It explains the process really well:</p>\n<ul>\n  <li><a href=\"http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-1-of-3/\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-1-of-3/</a></li>\n  <li><a href=\"http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-2-of-3/\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-2-of-3/</a></li>\n  <li><a href=\"http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-3-of-3/\" target=\"_blank\" rel=\"noopener\">http://www.sencha.com/blog/sencha-architect-team-development-in-the-real-world-part-3-of-3/</a></li>\n  <li><a href=\"http://docs.sencha.com/architect/3/getting_started/developing_team_apps.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/architect/3/getting_started/developing_team_apps.html</a></li>\n</ul>\n<h3 id=\"Sencha-amp-Git-in-general\"><a href=\"#Sencha-amp-Git-in-general\" class=\"headerlink\" title=\"Sencha &amp; Git in general\"></a><strong>Sencha\n    &amp; Git in general</strong></h3>\n<p>Whether you are working with Sencha Architect, or just writing code\n  yourself, the best practice would be to define (smaller) classes, and nesting\n  it through xtypes. Every (view) component, should have its own class, with\n  its own namespace. We don’t need to worry about all these separate files\n  since the Sencha build process (with Sencha Cmd / Sencha Architect uses\n  Sencha Cmd in the background), concatenates and minifies all these classes\n  into one single small file. This improves readability, usability and\n  maintainability but think about it. It also will improve your workflow with\n  source control systems. Cause smaller single files, reduces the change on\n  working with your co-worker on the same file. When you develop your\n  application with Sencha Architect, and you are dragging your components into\n  the design canvas… ..by default all these views will be nested into one\n  single file. (the viewport). You can promote these smaller view pieces to its\n  own classes, so it will become a single class file, which will be nested via\n  its xtype. For example, when you have a viewport with a form with fields, and\n  a component with a template. You can promote the form and the detail\n  component to its own class, by right clicking on the form (or detail\n  component), and select: ‘Promote To Class”. After you selected that, you will\n  see a link icon, which indicates that its a linked to its own class. You can\n  start re-using it now too! Just sometimes, you are both working on the same\n  file. This will result into a merge conflict as soon as you push your version\n  to Git. Git will reject it. I know, this is not nice, but it’s not the end of\n  the world. Always make a backup of your own file, to somewhere else in your\n  file system. You can merge a file. There are various tools available for your\n  editors / IDEs that deal with merging files. Also Git provides a Graphical\n  User Interface which can show the differences. Another solution can be to\n  accept or revert the changes and merge it yourself manually. <strong>TIP:</strong>\n  Traditionally we recommend that users do not check in the <strong>.architect</strong>\n  file or the framework and build folders into their source control systems. In\n  situations where it is necessary to check these into the repository (for\n  example, because you want to run the application directly in your browser\n  after fetching the project), we suggest that you check it in and then add it\n  to the ignore list so that there will not be further conflicts. Last but not\n  least, the overall best solution for working in a team with source control,\n  is communication! It’s just so much easier if you let your co-worker know, on\n  which file / part of the app you are working on!</p>\n<h2 id=\"Editors-amp-IDEs\"><a href=\"#Editors-amp-IDEs\" class=\"headerlink\" title=\"Editors &amp; IDEs\"></a><strong>Editors\n    &amp; IDEs</strong></h2>\n<p>While writing Sencha code you can use any editor or IDE of choice. Here are\n  a couple of suggestions:</p>\n<ul>\n  <li><strong>WebStorm / IntelliJ IDEA</strong> from JetBrains - <a href=\"https://www.jetbrains.com/\" target=\"_blank\" rel=\"noopener\">https://www.jetbrains.com/</a></li>\n</ul>\n<p>IDEA is an IDE great for Java developers. WebStorm is their JavaScript\n  version of the IDE. What’s nice of WebStorm is that it recognizes the Sencha\n  frameworks, and therefore you can use code auto completion. WebStorm is\n  commercial. IDEA has an oper source version.</p>\n<ul>\n  <li>_<strong><em>Eclipse</em></strong>_ _-_ <a href=\"https://eclipse.org/\" target=\"_blank\" rel=\"noopener\"><em>https://eclipse.org/</em></a></li>\n</ul>\n<p><em>Open source IDE mostly focussed on Java development.</em></p>\n<ul>\n  <li>_<strong><em>Sublime Text Editor</em></strong>_ _-_ <a href=\"http://www.sublimetext.com/\" target=\"_blank\" rel=\"noopener\"><em>http://www.sublimetext.com/</em></a></li>\n</ul>\n<p><em>A simplistic editor for code and markup with amazing performance.\n    (Commercial)</em></p>\n<ul>\n  <li>_<strong><em>Brackets</em></strong>_ _-_ <a href=\"http://brackets.io/\" target=\"_blank\" rel=\"noopener\"><em>http://brackets.io/</em></a></li>\n</ul>\n<p><em>A modern simplistic open source editor, great for web development.</em>\n  All of these tools have the ability to use with plugins. For example, plugins\n  to integrate code analysis tools or source control tools.</p>\n<h3 id=\"Editor-IDE-configuration\"><a href=\"#Editor-IDE-configuration\" class=\"headerlink\" title=\"Editor / IDE configuration\"></a><strong>Editor\n    / IDE configuration</strong></h3>\n<p>When you work in a team, what’s most important is that you have your\n  editor/IDE configured the same. Common editor settings are:</p>\n<ul>\n  <li><strong>Indent Style</strong>: set to tab or space to use hard tabs or\n    soft tabs respectively.</li>\n  <li><strong>Indent Size</strong>: a whole number defining the number of\n    columns used for each indentation level and the width of soft tabs (when\n    supported).</li>\n  <li><strong>Tab Width</strong>: a whole number defining the number of columns\n    used to represent a tab character.</li>\n  <li><strong>End of Line</strong>: set to lf, cr, or crlf to control how line\n    breaks are represented.</li>\n  <li><strong>Charset</strong>: set to latin1, utf-8, utf-16be or utf-16le to\n    control the character set.</li>\n  <li><strong>Trim trailing whitespace</strong>: Enable to remove any\n    whitespace characters preceding newline characters and false to ensure it\n    doesn’t.</li>\n  <li><strong>Insert final newline</strong>: Enable to ensure file ends with a\n    newline or not.</li>\n</ul>\n<p>When these settings are out of sync in a team, you can run into many source\n  control conflicts and hard to solve file merges.</p>\n<h2 id=\"Code-analysis-tools\"><a href=\"#Code-analysis-tools\" class=\"headerlink\" title=\"Code analysis tools\"></a><strong>Code\n    analysis tools</strong></h2>\n<p>There are a couple of tools you can use to analyse your code. Popular tools\n  for JavaScript development are:</p>\n<ul>\n  <li><strong>JSLint</strong> - <a href=\"http://www.jslint.com/\" target=\"_blank\" rel=\"noopener\">http://www.jslint.com/</a></li>\n</ul>\n<p>A JavaScript syntax checker and validator on coding rules written by Douglas\n  Crockford.</p>\n<ul>\n  <li><strong>JSHint</strong> - <a href=\"http://jshint.com/\" target=\"_blank\" rel=\"noopener\">http://jshint.com/</a></li>\n</ul>\n<p>A community driven fork of JSLint, which is not as strict as JSLint. There\n  are many plugins available for IDE’s and editors, to check the JavaScript\n  code while writing using the above tools.</p>\n<h3 id=\"Analysing-code-with-Sencha-Cmd\"><a href=\"#Analysing-code-with-Sencha-Cmd\" class=\"headerlink\" title=\"Analysing code with Sencha Cmd\"></a><strong>Analysing\n    code with Sencha Cmd</strong></h3>\n<p>What’s also nice to know is Sencha Cmd does code checking. Every time when\n  you run a sencha app build or sencha app build testing on the command-line,\n  it will validate your JavaScript code. Lint errors will show up as parse\n  warnings in your console. Not only it checks your JavaScript errors, it will\n  also check your Sass stylesheet for errors, before compiling it to production\n  ready CSS. Sencha Cmd has Rhino 1.7 and PhantomJS under the hood. These are\n  JavaScript interpreters, it does not have the DOM implementation of a\n  browser. Therefore it can run some nice things. Such as Linting/Validating or\n  testing the code while building. For example Sencha Cmd uses PhantomJS for\n  its image slicer. Because of PhantomJS, Sencha Cmd can make a screenshot, and\n  slice it into images to serve to older browsers. For more information, see:</p>\n<ul>\n  <li><a href=\"https://developer.mozilla.org/en/docs/Rhino_documentation\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en/docs/Rhino_documentation</a></li>\n  <li><a href=\"http://phantomjs.org/\" target=\"_blank\" rel=\"noopener\">http://phantomjs.org/</a></li>\n</ul>\n<h2 id=\"Code-Reviews\"><a href=\"#Code-Reviews\" class=\"headerlink\" title=\"Code Reviews\"></a><strong>Code\n    Reviews</strong></h2>\n<p>It is also possible to let Sencha check your code. You can hire a Sencha\n  professional services consultant who can review your code during certain\n  points in your development process. We will check for best practices and see\n  how to optimize your application and performance.</p>\n<h2 id=\"Tools-for-testing-your-Sencha-Code\"><a href=\"#Tools-for-testing-your-Sencha-Code\" class=\"headerlink\" title=\"Tools for testing your Sencha Code\"></a><strong>Tools\n    for testing your Sencha Code</strong></h2>\n<p>Let’s look into ways how to test your Sencha code:</p>\n<ul>\n  <li><strong>Jasmine</strong> - <a href=\"http://jasmine.github.io/\" target=\"_blank\" rel=\"noopener\">http://jasmine.github.io/</a></li>\n</ul>\n<p>Jasmine is an open source unit testing framework for JavaScript. Unit Tests\n  attempt to isolate small pieces of code and objectively verify application\n  logic. Jasmine aims to run on any JavaScript-enabled platform, to not intrude\n  on the application nor the IDE, and to have easy-to-read syntax. See also: <a href=\"https://vimeo.com/18100173\" target=\"_blank\" rel=\"noopener\">https://vimeo.com/18100173</a></p>\n<ul>\n  <li><strong>Siesta</strong> - <a href=\"http://www.bryntum.com/products/siesta/\" target=\"_blank\" rel=\"noopener\">http://www.bryntum.com/products/siesta/</a></li>\n</ul>\n<p>Siesta is a JavaScript testing tool that can help you test any JavaScript\n  code and also perform testing of the DOM and simulate user interactions. UI\n  tests attempt to subjectively verify that elements on the screen behave (and\n  often look) as expected, both statically (i.e. the flat render) and also\n  dynamically (i.e. as users perform given actions). Siesta from Bryntum is the\n  best tool on the market. Using the API, you can choose from many types of\n  assertions ranging from simple logical JS object comparisons to verifying\n  that an HTML element is visible in the DOM. It is possible to test JavaScript\n  in the browser and you can automate your tests. Once you have created your\n  test suite, you should consider running it in the cloud using great services\n  we support, such as Sauce or BrowserStack. See also: <a href=\"http://saucelabs.com/\" target=\"_blank\" rel=\"noopener\">http://saucelabs.com/</a>\n  and <a href=\"http://www.browserstack.com/\" target=\"_blank\" rel=\"noopener\">http://www.browserstack.com/</a></p>\n<h2 id=\"Build-process\"><a href=\"#Build-process\" class=\"headerlink\" title=\"Build process\"></a><strong>Build\n    process</strong></h2>\n<p>Sencha Cmd (and our build processes) run on top of Apache Ant. Apache Ant is\n  a software tool for automating software build processes. It is implemented\n  using the Java language therefore it requires the Java platform. You can\n  write / wire up your own build process and code analysis tools as well. You\n  can write these hooks in the <strong>build.xml</strong> file (in the project\n  root). The file looks like this:</p>\n<p>&lt;?xml version=”1.0” encoding=”utf-8”?&gt;</p>\n<project name=\"BarFinder\" default>\n  <import file=\"${basedir}/.sencha/app/build-impl.xml\"></import>\n</project>\n<p>As you can see lots of code is commented out in here. So nothing is really\n  happening yet. But you can create your own hooks. There’s a Sencha guide\n  online, which contains the available tasks you can use: <a href=\"http://docs.sencha.com/cmd/5.x/advanced_cmd/cmd_ant.html\" target=\"_blank\" rel=\"noopener\">http://docs.sencha.com/cmd/5.x/advanced_cmd/cmd_ant.html</a>\n  For example, here’s a code snippet I have used to create different build\n  packages, where the folder name of the build contains a date.</p>\n<target name=\"-after-build\">\n  <tstamp>\n    <format property=\"today\" pattern=\"yyyy-MM-dd\"></format>\n  </tstamp>\n  <copy todir=\"${build.dir}/../../dist/${app.name}/${today}-mybuild\" overwrite=\"true\">\n    <fileset dir=\"${build.dir}\">\n      <include name=\"**/*\"></include>\n    </fileset>\n  </copy>\n</target>\n<p>For more information, please see: <a href=\"http://ant.apache.org/\" target=\"_blank\" rel=\"noopener\">http://ant.apache.org/</a></p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a><strong>Conclusion</strong></h2>\n<p>When you are building serious enterprise applications you will need to come\n  up with a strategy on how to analyze, test and collaborate your code. As you\n  can see, choosing Sencha empowers developers to design, develop, test and\n  deploy in development teams of any size.</p>\n"},{"title":"How to Upgrade a Sencha Touch App to Ext JS 6 Modern Toolkit – Part 2","url":"1168.html","id":"1168","date":"2016-02-08T16:13:25.000Z","_content":"\n[![Cupertino Theme](https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-iphone1-part1-img1-e1452135006662-143x300.png)](https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-iphone1-part1-img1-e1452135006662.png)\n\nIn [part 1](https://www.sencha.com/blog/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-1/) of this blog post series, I discussed the changes in Ext JS 6 Modern Toolkit and showed you how to do a basic mobile upgrade of your Sencha Touch app. In this article, I’ll show you how to do an advanced mobile upgrade.\n\n### Advanced Mobile Upgrade\n\nFor the advanced mobile upgrade, you will use the MVVM pattern. It will take more time and steps to upgrade this way, but you will have a lot of advantages with the latest framework and all of the new features and classes. Also, you can improve your application performance and code base with the new MVVM architecture.\n\nI’ve cloned this **dinmu1** folder to a [new folder](https://github.com/savelee/ext-weatherapp/tree/master/dinmu2) called **dinmu2**, so you can see the differences.\n\n#### Start with Migrating the Views\n\n1.  In the **app/view** folder, create the following folder structure (every view gets its own subfolder):\n    1.  **app/view/main**\n    2.  **app/view/settings**\n2.  Move **Main.js** inside the main subfolder, and **SettingsView.js** into settings subfolder. (I also renamed SettingsView.js to **Settings.js**)\n3.  Edit the namespaces for these two views to:\n    1.  **Dinmu.view.main.Main**\n    2.  **Dinmu.view.settings.Setting**\n4.  At this point, you broke the app because the viewport can’t find Main.js and the Main.js view can’t find the Settings view, so you have to fix this:\n    1.  In the **app.js**, you can remove the line:  \n        `Ext.Viewport.add(Ext.create('Dinmu.view.Main'));`\n    2.  Above the `launch()` method, you create a new viewport, via the new way Ext 6 provides, by setting the mainView property to: `mainView: 'Dinmu.view.main.Main',`\n    3.  Remove the `views: ['main']` from **app.js**\n    4.  Add `'Dinmu.view.main.Main'` to the `requires` array\n    5.  In **Main.js**, change the `requires` for the Settings View to `'Dinmu.view.settings.Settings'`\n5.  To confirm that nothing breaks after this fix, you can run a **sencha app refresh**, and you shouldn’t see any errors.\n    \n    [![Files](https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-files-part2-img2-1024x469.png)](https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-files-part2-img2.png)\n    \n\n#### Migrate the Controllers to View Controllers\n\n1.  Create the following new file:  \n    **app/view/main/MainController.js**\n2.  Create the following class definition:  \n    \n    Ext.define('Dinmu.view.main.MainController', {\n        extend: 'Ext.app.ViewController',\n        alias: 'controller.main',\n     \n        //all the VC methods\n        init: function(){\n          console.log(\"new VC is initialized\");\n        }\n     \n    });\n    \n3.  Wire up the view controller to the main view:  \n    In Main.js, add the following line: `controller: 'main',`\n4.  Also add the MainController to the `requires` array: `Dinmu.view.main.MainController`\n5.  Run another **sencha app refresh**, and test the app in the browser. You should see a log message that states the wiring of the VC was successful. Note, you don’t need to wire this controller up to the Settings view. Because Settings view is nested inside the main view, it can always access the main controller.\n6.  You can remove the `controllers` array from **app.js**, because you won’t use it anymore.\n7.  Remove the `init` method from the view controller and copy over all the methods from `app/controller/Main.js` into the new view controller.\n8.  Now comes the tricky part. You won’t use the `refs` and `control` blocks, so you need to fix these. Instead of the control block, you will create listeners in the view.  \n      \n    There are 5 controls that need to be replaced:\n    \n    *   onCarouselChange – activeitemchange in the main view\n    *   btnBack – tap back button in title bar\n    *   onSettingsBtnTap – tap settings button in settings view\n    *   onToggle – toggle on togglebutton\n    *   onRefresh – executed on tap of the refresh button\n    \n    In the **Main.js** view class, you will create the activeitem change listener:  \n    \n    listeners: {\n       'activeitemchange': 'onCarouselChange'\n    },\n    \n    On the back button in Main.js, you will create a tap listener:  \n    \n    listeners: {\n       'tap': 'onBackBtnTap'\n    },\n    \n    On the settings button in Main.js, you will create a tap listener:  \n    \n    listeners: {\n       'tap': 'onSettingsBtnTap'\n    },\n    \n    On the toggle button in Settings.js, you will create a toggle listener:  \n    \n    listeners: {\n       'change': 'onToggle'\n    },\n    \n    On the refresh button in Settings.js, you will create a tap listener:  \n    \n    listeners: {\n       'tap': 'onRefresh'\n    },\n    \n9.  When you run the application in your browser, you will notice various event errors. The references with component queries are broken. You will fix these now.\n\nAll the references to `this.getMainView()` can be replaced for `this.getView()`. Because the view controller now knows about the view, you can fix this one easily. I replaced it on 3 places.  \n  \nThe other view references that you need will get a reference on the component, that you can look up later. In Settings.js, add the following property: `reference: 'settings'`.  \n  \nIn the MainController, replace `this.getSettingsView()` with `this.lookupReference('settings')`.  \n  \nYou can fix the `onToggle` Method like this:  \n\nvar s = this.lookupReference('settings');\n \nif (!newVal) {\n   s.down('field\\[name=\"city\"\\]').enable();\n   s.down('field\\[name=\"country\"\\]').enable();\n   s.down('field\\[name=\"units\"\\]').enable();\n} else {\n   s.down('field\\[name=\"city\"\\]').disable();\n   s.down('field\\[name=\"country\"\\]').disable();\n   s.down('field\\[name=\"units\"\\]').disable();\n   s.down('field\\[name=\"city\"\\]').reset();\n   s.down('field\\[name=\"country\"\\]').reset();\n}\n\nIn the Main.js view, put a reference in the **titlebar** configuration:  \n  \n`reference: 'titlebar',`  \n  \nThen replace the `onCarouselChange` method with:  \n\nonCarouselChange: function(carousel, newVal, oldVal) {\n   var t = this.lookupReference('titlebar');\n \n   if (newVal.getItemId() == \"mainview\") {\n      t.down('button\\[action=back\\]').hide();\n      t.down('button\\[action=settings\\]').show();\n      t.setTitle('Do I need my Umbrella?');\n   } else {\n      t.down('button\\[action=back\\]').show();\n      t.down('button\\[action=settings\\]').hide();\n      t.setTitle('Settings');\n   }\n},\n\n15.  Change the `onLaunch` method to `init`. Note, this will break the application because `Dinmu.utils.Functions.loadData()`, uses the Settings store, which is not wired up to a controller anymore. For now, comment the line with `Dinmu.utils.Functions.loadData()` out.\n16.  Run another **sencha app refresh** and test the app in the browser. Everything except the refresh button should work. The refresh button requires the store, which is not linked yet.\n\n#### Link the Store to a View Model\n\n1.  Create the following new file:  \n    **app/view/main/MainModel.js**\n2.  Create the following class definition:  \n    \n    Ext.define('Dinmu.view.main.MainModel', {\n        extend: 'Ext.app.ViewModel',\n     \n        alias: 'viewmodel.main',\n     \n        requires: \\[\n     \n        \\],\n     \n        stores: {\n     \n        }\n    });\n    \n3.  Wire up the view model to the the main view:  \n    In **Main.js**, add the following line: `viewModel: 'main',`  \n    Don’t forget to put the `Dinmu.view.main.MainModel` into the `requires` array.\n4.  Now, link the Settings store; first add `Dinmu.store.Settings` to the `requires` array.\n5.  In the Settings store, set an `alias: 'store.settings'` in the store class definition.\n6.  In Ext JS 6, Stores don’t automatically set the storeId to the name of the class, therefore set the `storeId` to `Settings`, so the store manager can find the store via `Ext.getStore('Settings')`\n7.  After that, add the following store to the stores object, (the type points to the settings alias):\n\n'settings': {\n   type: 'settings'\n},\n\n10.  Enable the `Dinmu.utils.Functions.loadData()` line, which you commented out before in the MainController. Then run another **sencha app refresh** and test your app.\n\nAt this point, you should have a working app that uses the MVVM pattern.\n\n#### Other App Improvements\n\n*   This application doesn’t use data feeds in the store. However, another big advantage with Ext JS 6 is that you don’t need to code all the model fields in your Model definition. It gets the data directly from the feed. That saves you from typing all the data in the feed, and makes your model definitions a lot smaller.\n*   Another thing that’s different in Ext JS 6 is the config blocks. In Sencha Touch, you defined everything in the `config` block; in Ext JS 6, you only put properties in a config block that need the auto generation of getters, setters, apply, and update methods. For the Dinmu application this means that I had to remove most of the config blocks. For most of the classes, the config block in Sencha Touch style works fine, but you could run into weird problems at some point, if you leave them.\n*   Promises and Deferreds support. I was always a bit amazed that the way I coded the saving of the settings form just worked. There’s a lot of magic going on in the `sync()` method, and the way they order the new created records, removed and edited records. It would have been a lot better, if I could have coded it this way:\n    *   Enter the form.\n    *   Check if localstorage contained old settings.\n    *   Remove old records, if any.\n    *   Sync store, and after the sync is complete, add new records.\n    *   Sync store, and after adding, load what’s in the store.\n\nWith Ext JS 6, you can do this because it supports promises and deferreds, which allows you to chain methods, via the `then()` method. [Look at how I coded](https://github.com/savelee/ext-weatherapp/blob/master/dinmu2/app/view/main/MainController.js) the `removeAllSettings` and `addSettings` methods. In the `onRefresh` method, I chained it. You can compare it with the **dinmu1** or **touchdinmu** files to see how this code differs.\n\n#### Upgrade the Theme\n\n1.  You can switch themes by changing the theme property in the **app.json** file. Out of the box, you can choose between the following themes:\n    \n    *   theme-cupertino (ios theme)\n    *   theme-mountainview (android theme)\n    *   theme-blackberry (blackberry theme)\n    *   theme-windows (windows theme)\n    *   theme-neptune\n    *   theme-triton (default)\n    \n    [![Cupertino Theme](https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton1-part2-img3.png)](https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton1-part2-img3.png)  \n    \n    Triton Theme\n    \n    After switching the theme, you will need to run **sencha app build**.\n    \n2.  The platform switcher in Ext JS is renewed. Instead, you will now use the profiles **build** block in **app.json**. To set this up, write in app.json:\n\n\"builds\": {\n  \"ios\": {\n    \"toolkit\": \"modern\",\n     \"theme\": \"theme-cupertino\"\n  },\n\n  \"android\": {\n    \"toolkit\": \"modern\",\n      \"theme\": \"theme-mountainview\"\n  },\n\n  \"windows\": {\n    \"toolkit\": \"modern\",\n    \"theme\": \"theme-windows\"\n  },\n\n  \"bb\": {\n    \"toolkit\": \"modern\",\n    \"theme\": \"theme-blackberry\"\n  },\n\n  \"default\": {\n    \"toolkit\": \"modern\",\n    \"theme\": \"theme-triton\"\n  }\n},\n\nTo enable the multiple themes on your development machine, add these lines to the **app.json** bootstrap block:  \n\n\"bootstrap\": {\n  \"base\": \"${app.dir}\",\n \n  \"microloader\": \"bootstrap.js\",\n  \"css\": \"bootstrap.css\",\n \n  \"manifest\": \"${build.id}.json\" //this is the magic, which generates a manifest file, to load on local.\n},\n\nTo enable the multiple themes on your production build, add these lines to the **app.json** `output` block:\n\n\"output\": {\n   \"base\": \"${workspace.build.dir}/${build.environment}/${app.name}\",\n   \"appCache\": {\n      \"enable\": false\n   },\n   \"manifest\": \"${build.id}.json\",\n   \"js\": \"${build.id}/app.js\",\n   \"resources\": {\n     \"path\": \"${build.id}/resources\",\n     \"shared\": \"resources\"\n    }\n},\n\nIn **index.html** you write:\n\nExt.beforeLoad = function (tags) {\n    var s = location.search,  // the query string (ex \"?foo=1&bar\")\n        profile;\n\n    if (s.match(/\\\\bios\\\\b/) || tags.ios !==0) {\n        profile = 'ios';\n    }\n    else if (s.match(/\\\\bandroid\\\\b/) || tags.android !==0) {\n        profile = 'android';\n    }\n    else if (s.match(/\\\\bwindows\\\\b/) || tags.windows !==0) {\n        profile = 'windows';\n    }\n    else if (s.match(/\\\\bbb\\\\b/) || tags.bb !==0 ) {\n        profile = 'bb';\n    }\n    else {\n        profile = 'default';\n    }\n\n    Ext.manifest = profile; // this name must match a build profile name\n};\n\nYou will need to run **sencha app refresh** and **sencha app build**, which builds all profiles, to get it up and running.\n\n12.  Themes for Ext JS 6 Modern toolkit use the same packages structure as Ext JS did. This is great, because it means that you can extend from your own theme packages, and you can generate custom themes with Sencha Cmd:\n\n**sencha generate theme theme-MyTheme**\n\nEven if you don’t plan to create custom theme packages, theming is more advanced. To upgrade an existing theme, you have to put all the variables in the **sass/var/** folder.\n\nTake a look at my [**sass/var/all.scss**](https://github.com/savelee/ext-weatherapp/blob/master/dinmu2/sass/var/all.scss) which I used for the weather app application. The custom Sass / CSS classes will be stored in the **sass/src/** folder. For an application (without custom theme packages), you have to map the folder structure of your JS applications. In other words, app/view/main/Main.js has a Sass file in this location: **sass/src/view/main/Main.scss.**\n\n[![Mountainview Theme](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-android-part2-img4.png)](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-android-part2-img4.png)  \n\nI could take most of my styling directly from my Sencha Touch application. However, there is no “default” Sencha Touch theme anymore, instead there’s the Neptune & Triton themes, which both have different Sass variables and require different DOM.\n\nThis means that when you used custom styling for templates (tpls) etc, it won’t break in your upgraded app, but when you used custom Sass to override the Sencha Touch theme, you might see differences. The best practice is to manually go through all the views in your browser, and check to see if the styling is correct. Take a look at my [**sass/src/view/main/Main.scss**](https://github.com/savelee/ext-weatherapp/blob/master/dinmu2/sass/src/view/main/Main.scss) which I used for the weather app application.\n\nIn the next article in this series, I will show you how to do an advanced universal upgrade.\n\n*   [Part I](https://www.leeboonstra.com/developer/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-1)\n*   [Part III](https://www.leeboonstra.com/developer/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-3)","source":"_drafts/how-tos/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-2.md","raw":"---\ntitle: How to Upgrade a Sencha Touch App to Ext JS 6 Modern Toolkit – Part 2\ntags:\n  - ext 6\n  - migrate\n  - mvvm\n  - Sencha Touch\nurl: 1168.html\nid: 1168\ncategories:\n  - Ext JS 6\n  - Sencha Touch\ndate: 2016-02-08 17:13:25\n---\n\n[![Cupertino Theme](https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-iphone1-part1-img1-e1452135006662-143x300.png)](https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-iphone1-part1-img1-e1452135006662.png)\n\nIn [part 1](https://www.sencha.com/blog/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-1/) of this blog post series, I discussed the changes in Ext JS 6 Modern Toolkit and showed you how to do a basic mobile upgrade of your Sencha Touch app. In this article, I’ll show you how to do an advanced mobile upgrade.\n\n### Advanced Mobile Upgrade\n\nFor the advanced mobile upgrade, you will use the MVVM pattern. It will take more time and steps to upgrade this way, but you will have a lot of advantages with the latest framework and all of the new features and classes. Also, you can improve your application performance and code base with the new MVVM architecture.\n\nI’ve cloned this **dinmu1** folder to a [new folder](https://github.com/savelee/ext-weatherapp/tree/master/dinmu2) called **dinmu2**, so you can see the differences.\n\n#### Start with Migrating the Views\n\n1.  In the **app/view** folder, create the following folder structure (every view gets its own subfolder):\n    1.  **app/view/main**\n    2.  **app/view/settings**\n2.  Move **Main.js** inside the main subfolder, and **SettingsView.js** into settings subfolder. (I also renamed SettingsView.js to **Settings.js**)\n3.  Edit the namespaces for these two views to:\n    1.  **Dinmu.view.main.Main**\n    2.  **Dinmu.view.settings.Setting**\n4.  At this point, you broke the app because the viewport can’t find Main.js and the Main.js view can’t find the Settings view, so you have to fix this:\n    1.  In the **app.js**, you can remove the line:  \n        `Ext.Viewport.add(Ext.create('Dinmu.view.Main'));`\n    2.  Above the `launch()` method, you create a new viewport, via the new way Ext 6 provides, by setting the mainView property to: `mainView: 'Dinmu.view.main.Main',`\n    3.  Remove the `views: ['main']` from **app.js**\n    4.  Add `'Dinmu.view.main.Main'` to the `requires` array\n    5.  In **Main.js**, change the `requires` for the Settings View to `'Dinmu.view.settings.Settings'`\n5.  To confirm that nothing breaks after this fix, you can run a **sencha app refresh**, and you shouldn’t see any errors.\n    \n    [![Files](https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-files-part2-img2-1024x469.png)](https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-files-part2-img2.png)\n    \n\n#### Migrate the Controllers to View Controllers\n\n1.  Create the following new file:  \n    **app/view/main/MainController.js**\n2.  Create the following class definition:  \n    \n    Ext.define('Dinmu.view.main.MainController', {\n        extend: 'Ext.app.ViewController',\n        alias: 'controller.main',\n     \n        //all the VC methods\n        init: function(){\n          console.log(\"new VC is initialized\");\n        }\n     \n    });\n    \n3.  Wire up the view controller to the main view:  \n    In Main.js, add the following line: `controller: 'main',`\n4.  Also add the MainController to the `requires` array: `Dinmu.view.main.MainController`\n5.  Run another **sencha app refresh**, and test the app in the browser. You should see a log message that states the wiring of the VC was successful. Note, you don’t need to wire this controller up to the Settings view. Because Settings view is nested inside the main view, it can always access the main controller.\n6.  You can remove the `controllers` array from **app.js**, because you won’t use it anymore.\n7.  Remove the `init` method from the view controller and copy over all the methods from `app/controller/Main.js` into the new view controller.\n8.  Now comes the tricky part. You won’t use the `refs` and `control` blocks, so you need to fix these. Instead of the control block, you will create listeners in the view.  \n      \n    There are 5 controls that need to be replaced:\n    \n    *   onCarouselChange – activeitemchange in the main view\n    *   btnBack – tap back button in title bar\n    *   onSettingsBtnTap – tap settings button in settings view\n    *   onToggle – toggle on togglebutton\n    *   onRefresh – executed on tap of the refresh button\n    \n    In the **Main.js** view class, you will create the activeitem change listener:  \n    \n    listeners: {\n       'activeitemchange': 'onCarouselChange'\n    },\n    \n    On the back button in Main.js, you will create a tap listener:  \n    \n    listeners: {\n       'tap': 'onBackBtnTap'\n    },\n    \n    On the settings button in Main.js, you will create a tap listener:  \n    \n    listeners: {\n       'tap': 'onSettingsBtnTap'\n    },\n    \n    On the toggle button in Settings.js, you will create a toggle listener:  \n    \n    listeners: {\n       'change': 'onToggle'\n    },\n    \n    On the refresh button in Settings.js, you will create a tap listener:  \n    \n    listeners: {\n       'tap': 'onRefresh'\n    },\n    \n9.  When you run the application in your browser, you will notice various event errors. The references with component queries are broken. You will fix these now.\n\nAll the references to `this.getMainView()` can be replaced for `this.getView()`. Because the view controller now knows about the view, you can fix this one easily. I replaced it on 3 places.  \n  \nThe other view references that you need will get a reference on the component, that you can look up later. In Settings.js, add the following property: `reference: 'settings'`.  \n  \nIn the MainController, replace `this.getSettingsView()` with `this.lookupReference('settings')`.  \n  \nYou can fix the `onToggle` Method like this:  \n\nvar s = this.lookupReference('settings');\n \nif (!newVal) {\n   s.down('field\\[name=\"city\"\\]').enable();\n   s.down('field\\[name=\"country\"\\]').enable();\n   s.down('field\\[name=\"units\"\\]').enable();\n} else {\n   s.down('field\\[name=\"city\"\\]').disable();\n   s.down('field\\[name=\"country\"\\]').disable();\n   s.down('field\\[name=\"units\"\\]').disable();\n   s.down('field\\[name=\"city\"\\]').reset();\n   s.down('field\\[name=\"country\"\\]').reset();\n}\n\nIn the Main.js view, put a reference in the **titlebar** configuration:  \n  \n`reference: 'titlebar',`  \n  \nThen replace the `onCarouselChange` method with:  \n\nonCarouselChange: function(carousel, newVal, oldVal) {\n   var t = this.lookupReference('titlebar');\n \n   if (newVal.getItemId() == \"mainview\") {\n      t.down('button\\[action=back\\]').hide();\n      t.down('button\\[action=settings\\]').show();\n      t.setTitle('Do I need my Umbrella?');\n   } else {\n      t.down('button\\[action=back\\]').show();\n      t.down('button\\[action=settings\\]').hide();\n      t.setTitle('Settings');\n   }\n},\n\n15.  Change the `onLaunch` method to `init`. Note, this will break the application because `Dinmu.utils.Functions.loadData()`, uses the Settings store, which is not wired up to a controller anymore. For now, comment the line with `Dinmu.utils.Functions.loadData()` out.\n16.  Run another **sencha app refresh** and test the app in the browser. Everything except the refresh button should work. The refresh button requires the store, which is not linked yet.\n\n#### Link the Store to a View Model\n\n1.  Create the following new file:  \n    **app/view/main/MainModel.js**\n2.  Create the following class definition:  \n    \n    Ext.define('Dinmu.view.main.MainModel', {\n        extend: 'Ext.app.ViewModel',\n     \n        alias: 'viewmodel.main',\n     \n        requires: \\[\n     \n        \\],\n     \n        stores: {\n     \n        }\n    });\n    \n3.  Wire up the view model to the the main view:  \n    In **Main.js**, add the following line: `viewModel: 'main',`  \n    Don’t forget to put the `Dinmu.view.main.MainModel` into the `requires` array.\n4.  Now, link the Settings store; first add `Dinmu.store.Settings` to the `requires` array.\n5.  In the Settings store, set an `alias: 'store.settings'` in the store class definition.\n6.  In Ext JS 6, Stores don’t automatically set the storeId to the name of the class, therefore set the `storeId` to `Settings`, so the store manager can find the store via `Ext.getStore('Settings')`\n7.  After that, add the following store to the stores object, (the type points to the settings alias):\n\n'settings': {\n   type: 'settings'\n},\n\n10.  Enable the `Dinmu.utils.Functions.loadData()` line, which you commented out before in the MainController. Then run another **sencha app refresh** and test your app.\n\nAt this point, you should have a working app that uses the MVVM pattern.\n\n#### Other App Improvements\n\n*   This application doesn’t use data feeds in the store. However, another big advantage with Ext JS 6 is that you don’t need to code all the model fields in your Model definition. It gets the data directly from the feed. That saves you from typing all the data in the feed, and makes your model definitions a lot smaller.\n*   Another thing that’s different in Ext JS 6 is the config blocks. In Sencha Touch, you defined everything in the `config` block; in Ext JS 6, you only put properties in a config block that need the auto generation of getters, setters, apply, and update methods. For the Dinmu application this means that I had to remove most of the config blocks. For most of the classes, the config block in Sencha Touch style works fine, but you could run into weird problems at some point, if you leave them.\n*   Promises and Deferreds support. I was always a bit amazed that the way I coded the saving of the settings form just worked. There’s a lot of magic going on in the `sync()` method, and the way they order the new created records, removed and edited records. It would have been a lot better, if I could have coded it this way:\n    *   Enter the form.\n    *   Check if localstorage contained old settings.\n    *   Remove old records, if any.\n    *   Sync store, and after the sync is complete, add new records.\n    *   Sync store, and after adding, load what’s in the store.\n\nWith Ext JS 6, you can do this because it supports promises and deferreds, which allows you to chain methods, via the `then()` method. [Look at how I coded](https://github.com/savelee/ext-weatherapp/blob/master/dinmu2/app/view/main/MainController.js) the `removeAllSettings` and `addSettings` methods. In the `onRefresh` method, I chained it. You can compare it with the **dinmu1** or **touchdinmu** files to see how this code differs.\n\n#### Upgrade the Theme\n\n1.  You can switch themes by changing the theme property in the **app.json** file. Out of the box, you can choose between the following themes:\n    \n    *   theme-cupertino (ios theme)\n    *   theme-mountainview (android theme)\n    *   theme-blackberry (blackberry theme)\n    *   theme-windows (windows theme)\n    *   theme-neptune\n    *   theme-triton (default)\n    \n    [![Cupertino Theme](https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton1-part2-img3.png)](https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton1-part2-img3.png)  \n    \n    Triton Theme\n    \n    After switching the theme, you will need to run **sencha app build**.\n    \n2.  The platform switcher in Ext JS is renewed. Instead, you will now use the profiles **build** block in **app.json**. To set this up, write in app.json:\n\n\"builds\": {\n  \"ios\": {\n    \"toolkit\": \"modern\",\n     \"theme\": \"theme-cupertino\"\n  },\n\n  \"android\": {\n    \"toolkit\": \"modern\",\n      \"theme\": \"theme-mountainview\"\n  },\n\n  \"windows\": {\n    \"toolkit\": \"modern\",\n    \"theme\": \"theme-windows\"\n  },\n\n  \"bb\": {\n    \"toolkit\": \"modern\",\n    \"theme\": \"theme-blackberry\"\n  },\n\n  \"default\": {\n    \"toolkit\": \"modern\",\n    \"theme\": \"theme-triton\"\n  }\n},\n\nTo enable the multiple themes on your development machine, add these lines to the **app.json** bootstrap block:  \n\n\"bootstrap\": {\n  \"base\": \"${app.dir}\",\n \n  \"microloader\": \"bootstrap.js\",\n  \"css\": \"bootstrap.css\",\n \n  \"manifest\": \"${build.id}.json\" //this is the magic, which generates a manifest file, to load on local.\n},\n\nTo enable the multiple themes on your production build, add these lines to the **app.json** `output` block:\n\n\"output\": {\n   \"base\": \"${workspace.build.dir}/${build.environment}/${app.name}\",\n   \"appCache\": {\n      \"enable\": false\n   },\n   \"manifest\": \"${build.id}.json\",\n   \"js\": \"${build.id}/app.js\",\n   \"resources\": {\n     \"path\": \"${build.id}/resources\",\n     \"shared\": \"resources\"\n    }\n},\n\nIn **index.html** you write:\n\nExt.beforeLoad = function (tags) {\n    var s = location.search,  // the query string (ex \"?foo=1&bar\")\n        profile;\n\n    if (s.match(/\\\\bios\\\\b/) || tags.ios !==0) {\n        profile = 'ios';\n    }\n    else if (s.match(/\\\\bandroid\\\\b/) || tags.android !==0) {\n        profile = 'android';\n    }\n    else if (s.match(/\\\\bwindows\\\\b/) || tags.windows !==0) {\n        profile = 'windows';\n    }\n    else if (s.match(/\\\\bbb\\\\b/) || tags.bb !==0 ) {\n        profile = 'bb';\n    }\n    else {\n        profile = 'default';\n    }\n\n    Ext.manifest = profile; // this name must match a build profile name\n};\n\nYou will need to run **sencha app refresh** and **sencha app build**, which builds all profiles, to get it up and running.\n\n12.  Themes for Ext JS 6 Modern toolkit use the same packages structure as Ext JS did. This is great, because it means that you can extend from your own theme packages, and you can generate custom themes with Sencha Cmd:\n\n**sencha generate theme theme-MyTheme**\n\nEven if you don’t plan to create custom theme packages, theming is more advanced. To upgrade an existing theme, you have to put all the variables in the **sass/var/** folder.\n\nTake a look at my [**sass/var/all.scss**](https://github.com/savelee/ext-weatherapp/blob/master/dinmu2/sass/var/all.scss) which I used for the weather app application. The custom Sass / CSS classes will be stored in the **sass/src/** folder. For an application (without custom theme packages), you have to map the folder structure of your JS applications. In other words, app/view/main/Main.js has a Sass file in this location: **sass/src/view/main/Main.scss.**\n\n[![Mountainview Theme](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-android-part2-img4.png)](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-android-part2-img4.png)  \n\nI could take most of my styling directly from my Sencha Touch application. However, there is no “default” Sencha Touch theme anymore, instead there’s the Neptune & Triton themes, which both have different Sass variables and require different DOM.\n\nThis means that when you used custom styling for templates (tpls) etc, it won’t break in your upgraded app, but when you used custom Sass to override the Sencha Touch theme, you might see differences. The best practice is to manually go through all the views in your browser, and check to see if the styling is correct. Take a look at my [**sass/src/view/main/Main.scss**](https://github.com/savelee/ext-weatherapp/blob/master/dinmu2/sass/src/view/main/Main.scss) which I used for the weather app application.\n\nIn the next article in this series, I will show you how to do an advanced universal upgrade.\n\n*   [Part I](https://www.leeboonstra.com/developer/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-1)\n*   [Part III](https://www.leeboonstra.com/developer/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-3)","slug":"how-tos/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-2","published":0,"updated":"2018-11-25T11:46:09.302Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnczd010akif5933w8muk","content":"<p><a href=\"https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-iphone1-part1-img1-e1452135006662.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-iphone1-part1-img1-e1452135006662-143x300.png\" alt=\"Cupertino Theme\"></a></p>\n<p>In <a href=\"https://www.sencha.com/blog/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-1/\" target=\"_blank\" rel=\"noopener\">part\n    1</a> of this blog post series, I discussed the changes in Ext JS 6 Modern\n  Toolkit and showed you how to do a basic mobile upgrade of your Sencha Touch\n  app. In this article, I’ll show you how to do an advanced mobile upgrade.</p>\n<h3 id=\"Advanced-Mobile-Upgrade\"><a href=\"#Advanced-Mobile-Upgrade\" class=\"headerlink\" title=\"Advanced Mobile Upgrade\"></a>Advanced\n  Mobile Upgrade</h3>\n<p>For the advanced mobile upgrade, you will use the MVVM pattern. It will take\n  more time and steps to upgrade this way, but you will have a lot of\n  advantages with the latest framework and all of the new features and classes.\n  Also, you can improve your application performance and code base with the new\n  MVVM architecture.</p>\n<p>I’ve cloned this <strong>dinmu1</strong> folder to a <a href=\"https://github.com/savelee/ext-weatherapp/tree/master/dinmu2\" target=\"_blank\" rel=\"noopener\">new\n    folder</a> called <strong>dinmu2</strong>, so you can see the differences.</p>\n<h4 id=\"Start-with-Migrating-the-Views\"><a href=\"#Start-with-Migrating-the-Views\" class=\"headerlink\" title=\"Start with Migrating the Views\"></a>Start\n  with Migrating the Views</h4>\n<ol>\n  <li>In the <strong>app/view</strong> folder, create the following folder\n    structure (every view gets its own subfolder):<ol>\n      <li><strong>app/view/main</strong></li>\n      <li><strong>app/view/settings</strong></li>\n    </ol>\n  </li>\n  <li>Move <strong>Main.js</strong> inside the main subfolder, and <strong>SettingsView.js</strong>\n    into settings subfolder. (I also renamed SettingsView.js to <strong>Settings.js</strong>)</li>\n  <li>Edit the namespaces for these two views to:<ol>\n      <li><strong>Dinmu.view.main.Main</strong></li>\n      <li><strong>Dinmu.view.settings.Setting</strong></li>\n    </ol>\n  </li>\n  <li>At this point, you broke the app because the viewport can’t find Main.js\n    and the Main.js view can’t find the Settings view, so you have to fix this:<ol>\n      <li>In the <strong>app.js</strong>, you can remove the line:<br><code>Ext.Viewport.add(Ext.create(&#39;Dinmu.view.Main&#39;));</code></li>\n      <li>Above the <code>launch()</code> method, you create a new viewport,\n        via the new way Ext 6 provides, by setting the mainView property to:\n        <code>mainView: &#39;Dinmu.view.main.Main&#39;,</code></li>\n      <li>Remove the <code>views: [&#39;main&#39;]</code> from <strong>app.js</strong></li>\n      <li>Add <code>&#39;Dinmu.view.main.Main&#39;</code> to the <code>requires</code>\n        array</li>\n      <li>In <strong>Main.js</strong>, change the <code>requires</code> for the\n        Settings View to <code>&#39;Dinmu.view.settings.Settings&#39;</code></li>\n    </ol>\n  </li>\n  <li>\n    <p>To confirm that nothing breaks after this fix, you can run a <strong>sencha\n        app refresh</strong>, and you shouldn’t see any errors.</p>\n    <p><a href=\"https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-files-part2-img2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-files-part2-img2-1024x469.png\" alt=\"Files\"></a></p>\n  </li>\n</ol>\n<h4 id=\"Migrate-the-Controllers-to-View-Controllers\"><a href=\"#Migrate-the-Controllers-to-View-Controllers\" class=\"headerlink\" title=\"Migrate the Controllers to View Controllers\"></a>Migrate\n  the Controllers to View Controllers</h4>\n<ol>\n  <li>Create the following new file:<br><strong>app/view/main/MainController.js</strong></li>\n  <li>\n    <p>Create the following class definition:</p>\n    <p>Ext.define(‘Dinmu.view.main.MainController’, {</p>\n    <pre><code>extend: &apos;Ext.app.ViewController&apos;,\nalias: &apos;controller.main&apos;,\n\n//all the VC methods\ninit: function(){\n  console.log(&quot;new VC is initialized&quot;);\n}\n</code></pre>\n    <p>});</p>\n  </li>\n  <li>\n    <p>Wire up the view controller to the main view:<br>In Main.js, add the\n      following line: <code>controller: &#39;main&#39;,</code></p>\n  </li>\n  <li>Also add the MainController to the <code>requires</code> array: <code>Dinmu.view.main.MainController</code></li>\n  <li>Run another <strong>sencha app refresh</strong>, and test the app in the\n    browser. You should see a log message that states the wiring of the VC was\n    successful. Note, you don’t need to wire this controller up to the Settings\n    view. Because Settings view is nested inside the main view, it can always\n    access the main controller.</li>\n  <li>You can remove the <code>controllers</code> array from <strong>app.js</strong>,\n    because you won’t use it anymore.</li>\n  <li>Remove the <code>init</code> method from the view controller and copy\n    over all the methods from <code>app/controller/Main.js</code> into the new\n    view controller.</li>\n  <li>\n    <p>Now comes the tricky part. You won’t use the <code>refs</code> and <code>control</code>\n      blocks, so you need to fix these. Instead of the control block, you will\n      create listeners in the view.</p>\n    <p>There are 5 controls that need to be replaced:</p>\n    <ul>\n      <li>onCarouselChange – activeitemchange in the main view</li>\n      <li>btnBack – tap back button in title bar</li>\n      <li>onSettingsBtnTap – tap settings button in settings view</li>\n      <li>onToggle – toggle on togglebutton</li>\n      <li>onRefresh – executed on tap of the refresh button</li>\n    </ul>\n    <p>In the <strong>Main.js</strong> view class, you will create the\n      activeitem change listener:</p>\n    <p>listeners: { ‘activeitemchange’: ‘onCarouselChange’ },</p>\n    <p>On the back button in Main.js, you will create a tap listener:</p>\n    <p>listeners: { ‘tap’: ‘onBackBtnTap’ },</p>\n    <p>On the settings button in Main.js, you will create a tap listener:</p>\n    <p>listeners: { ‘tap’: ‘onSettingsBtnTap’ },</p>\n    <p>On the toggle button in Settings.js, you will create a toggle listener:</p>\n    <p>listeners: { ‘change’: ‘onToggle’ },</p>\n    <p>On the refresh button in Settings.js, you will create a tap listener:</p>\n    <p>listeners: { ‘tap’: ‘onRefresh’ },</p>\n  </li>\n  <li>\n    <p>When you run the application in your browser, you will notice various\n      event errors. The references with component queries are broken. You will\n      fix these now.</p>\n  </li>\n</ol>\n<p>All the references to <code>this.getMainView()</code> can be replaced for\n  <code>this.getView()</code>. Because the view controller now knows about the\n  view, you can fix this one easily. I replaced it on 3 places.</p>\n<p>The other view references that you need will get a reference on the\n  component, that you can look up later. In Settings.js, add the following\n  property: <code>reference: &#39;settings&#39;</code>.</p>\n<p>In the MainController, replace <code>this.getSettingsView()</code> with\n  <code>this.lookupReference(&#39;settings&#39;)</code>.</p>\n<p>You can fix the <code>onToggle</code> Method like this:</p>\n<p>var s = this.lookupReference(‘settings’);</p>\n<p>if (!newVal) { s.down(‘field[name=”city”]‘).enable();\n  s.down(‘field[name=”country”]‘).enable();\n  s.down(‘field[name=”units”]‘).enable(); } else {\n  s.down(‘field[name=”city”]‘).disable();\n  s.down(‘field[name=”country”]‘).disable();\n  s.down(‘field[name=”units”]‘).disable();\n  s.down(‘field[name=”city”]‘).reset();\n  s.down(‘field[name=”country”]‘).reset(); }</p>\n<p>In the Main.js view, put a reference in the <strong>titlebar</strong>\n  configuration:</p>\n<p><code>reference: &#39;titlebar&#39;,</code></p>\n<p>Then replace the <code>onCarouselChange</code> method with:</p>\n<p>onCarouselChange: function(carousel, newVal, oldVal) { var t =\n  this.lookupReference(‘titlebar’);</p>\n<p>if (newVal.getItemId() == “mainview”) {\n  t.down(‘button[action=back]‘).hide();\n  t.down(‘button[action=settings]‘).show(); t.setTitle(‘Do I need my\n  Umbrella?’); } else { t.down(‘button[action=back]‘).show();\n  t.down(‘button[action=settings]‘).hide(); t.setTitle(‘Settings’); } },</p>\n<ol start=\"15\">\n  <li>Change the <code>onLaunch</code> method to <code>init</code>. Note, this\n    will break the application because <code>Dinmu.utils.Functions.loadData()</code>,\n    uses the Settings store, which is not wired up to a controller anymore. For\n    now, comment the line with <code>Dinmu.utils.Functions.loadData()</code>\n    out.</li>\n  <li>Run another <strong>sencha app refresh</strong> and test the app in the\n    browser. Everything except the refresh button should work. The refresh\n    button requires the store, which is not linked yet.</li>\n</ol>\n<h4 id=\"Link-the-Store-to-a-View-Model\"><a href=\"#Link-the-Store-to-a-View-Model\" class=\"headerlink\" title=\"Link the Store to a View Model\"></a>Link\n  the Store to a View Model</h4>\n<ol>\n  <li>Create the following new file:<br><strong>app/view/main/MainModel.js</strong></li>\n  <li>\n    <p>Create the following class definition:</p>\n    <p>Ext.define(‘Dinmu.view.main.MainModel’, {</p>\n    <pre><code>extend: &apos;Ext.app.ViewModel&apos;,\n\nalias: &apos;viewmodel.main&apos;,\n\nrequires: \\[\n\n\\],\n\nstores: {\n\n}\n</code></pre>\n    <p>});</p>\n  </li>\n  <li>\n    <p>Wire up the view model to the the main view:<br>In <strong>Main.js</strong>,\n      add the following line: <code>viewModel: &#39;main&#39;,</code><br>Don’t\n      forget to put the <code>Dinmu.view.main.MainModel</code> into the <code>requires</code>\n      array.</p>\n  </li>\n  <li>Now, link the Settings store; first add <code>Dinmu.store.Settings</code>\n    to the <code>requires</code> array.</li>\n  <li>In the Settings store, set an <code>alias: &#39;store.settings&#39;</code>\n    in the store class definition.</li>\n  <li>In Ext JS 6, Stores don’t automatically set the storeId to the name of\n    the class, therefore set the <code>storeId</code> to <code>Settings</code>,\n    so the store manager can find the store via <code>Ext.getStore(&#39;Settings&#39;)</code></li>\n  <li>After that, add the following store to the stores object, (the type\n    points to the settings alias):</li>\n</ol>\n<p>‘settings’: { type: ‘settings’ },</p>\n<ol start=\"10\">\n  <li>Enable the <code>Dinmu.utils.Functions.loadData()</code> line, which you\n    commented out before in the MainController. Then run another <strong>sencha\n      app refresh</strong> and test your app.</li>\n</ol>\n<p>At this point, you should have a working app that uses the MVVM pattern.</p>\n<h4 id=\"Other-App-Improvements\"><a href=\"#Other-App-Improvements\" class=\"headerlink\" title=\"Other App Improvements\"></a>Other\n  App Improvements</h4>\n<ul>\n  <li>This application doesn’t use data feeds in the store. However, another\n    big advantage with Ext JS 6 is that you don’t need to code all the model\n    fields in your Model definition. It gets the data directly from the feed.\n    That saves you from typing all the data in the feed, and makes your model\n    definitions a lot smaller.</li>\n  <li>Another thing that’s different in Ext JS 6 is the config blocks. In\n    Sencha Touch, you defined everything in the <code>config</code> block; in\n    Ext JS 6, you only put properties in a config block that need the auto\n    generation of getters, setters, apply, and update methods. For the Dinmu\n    application this means that I had to remove most of the config blocks. For\n    most of the classes, the config block in Sencha Touch style works fine, but\n    you could run into weird problems at some point, if you leave them.</li>\n  <li>Promises and Deferreds support. I was always a bit amazed that the way I\n    coded the saving of the settings form just worked. There’s a lot of magic\n    going on in the <code>sync()</code> method, and the way they order the new\n    created records, removed and edited records. It would have been a lot\n    better, if I could have coded it this way:<ul>\n      <li>Enter the form.</li>\n      <li>Check if localstorage contained old settings.</li>\n      <li>Remove old records, if any.</li>\n      <li>Sync store, and after the sync is complete, add new records.</li>\n      <li>Sync store, and after adding, load what’s in the store.</li>\n    </ul>\n  </li>\n</ul>\n<p>With Ext JS 6, you can do this because it supports promises and deferreds,\n  which allows you to chain methods, via the <code>then()</code> method. <a href=\"https://github.com/savelee/ext-weatherapp/blob/master/dinmu2/app/view/main/MainController.js\" target=\"_blank\" rel=\"noopener\">Look\n    at how I coded</a> the <code>removeAllSettings</code> and <code>addSettings</code>\n  methods. In the <code>onRefresh</code> method, I chained it. You can compare\n  it with the <strong>dinmu1</strong> or <strong>touchdinmu</strong> files to\n  see how this code differs.</p>\n<h4 id=\"Upgrade-the-Theme\"><a href=\"#Upgrade-the-Theme\" class=\"headerlink\" title=\"Upgrade the Theme\"></a>Upgrade\n  the Theme</h4>\n<ol>\n  <li>\n    <p>You can switch themes by changing the theme property in the <strong>app.json</strong>\n      file. Out of the box, you can choose between the following themes:</p>\n    <ul>\n      <li>theme-cupertino (ios theme)</li>\n      <li>theme-mountainview (android theme)</li>\n      <li>theme-blackberry (blackberry theme)</li>\n      <li>theme-windows (windows theme)</li>\n      <li>theme-neptune</li>\n      <li>theme-triton (default)</li>\n    </ul>\n    <p><a href=\"https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton1-part2-img3.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton1-part2-img3.png\" alt=\"Cupertino Theme\"></a></p>\n    <p>Triton Theme</p>\n    <p>After switching the theme, you will need to run <strong>sencha app build</strong>.</p>\n  </li>\n  <li>\n    <p>The platform switcher in Ext JS is renewed. Instead, you will now use\n      the profiles <strong>build</strong> block in <strong>app.json</strong>.\n      To set this up, write in app.json:</p>\n  </li>\n</ol>\n<p>“builds”: { “ios”: { “toolkit”: “modern”, “theme”: “theme-cupertino” },</p>\n<p>“android”: { “toolkit”: “modern”, “theme”: “theme-mountainview” },</p>\n<p>“windows”: { “toolkit”: “modern”, “theme”: “theme-windows” },</p>\n<p>“bb”: { “toolkit”: “modern”, “theme”: “theme-blackberry” },</p>\n<p>“default”: { “toolkit”: “modern”, “theme”: “theme-triton” } },</p>\n<p>To enable the multiple themes on your development machine, add these lines\n  to the <strong>app.json</strong> bootstrap block:</p>\n<p>“bootstrap”: { “base”: “${app.dir}”,</p>\n<p>“microloader”: “bootstrap.js”, “css”: “bootstrap.css”,</p>\n<p>“manifest”: “${build.id}.json” //this is the magic, which generates a\n  manifest file, to load on local. },</p>\n<p>To enable the multiple themes on your production build, add these lines to\n  the <strong>app.json</strong> <code>output</code> block:</p>\n<p>“output”: { “base”:\n  “${workspace.build.dir}/${build.environment}/${app.name}”, “appCache”: {\n  “enable”: false }, “manifest”: “${build.id}.json”, “js”:\n  “${build.id}/app.js”, “resources”: { “path”: “${build.id}/resources”,\n  “shared”: “resources” } },</p>\n<p>In <strong>index.html</strong> you write:</p>\n<p>Ext.beforeLoad = function (tags) { var s = location.search, // the query\n  string (ex “?foo=1&amp;bar”) profile;</p>\n<pre><code>if (s.match(/\\\\bios\\\\b/) || tags.ios !==0) {\n    profile = &apos;ios&apos;;\n}\nelse if (s.match(/\\\\bandroid\\\\b/) || tags.android !==0) {\n    profile = &apos;android&apos;;\n}\nelse if (s.match(/\\\\bwindows\\\\b/) || tags.windows !==0) {\n    profile = &apos;windows&apos;;\n}\nelse if (s.match(/\\\\bbb\\\\b/) || tags.bb !==0 ) {\n    profile = &apos;bb&apos;;\n}\nelse {\n    profile = &apos;default&apos;;\n}\n\nExt.manifest = profile; // this name must match a build profile name\n</code></pre>\n<p>};</p>\n<p>You will need to run <strong>sencha app refresh</strong> and <strong>sencha\n    app build</strong>, which builds all profiles, to get it up and running.</p>\n<ol start=\"12\">\n  <li>Themes for Ext JS 6 Modern toolkit use the same packages structure as Ext\n    JS did. This is great, because it means that you can extend from your own\n    theme packages, and you can generate custom themes with Sencha Cmd:</li>\n</ol>\n<p><strong>sencha generate theme theme-MyTheme</strong></p>\n<p>Even if you don’t plan to create custom theme packages, theming is more\n  advanced. To upgrade an existing theme, you have to put all the variables in\n  the <strong>sass/var/</strong> folder.</p>\n<p>Take a look at my <a href=\"https://github.com/savelee/ext-weatherapp/blob/master/dinmu2/sass/var/all.scss\" target=\"_blank\" rel=\"noopener\"><strong>sass/var/all.scss</strong></a>\n  which I used for the weather app application. The custom Sass / CSS classes\n  will be stored in the <strong>sass/src/</strong> folder. For an application\n  (without custom theme packages), you have to map the folder structure of your\n  JS applications. In other words, app/view/main/Main.js has a Sass file in\n  this location: <strong>sass/src/view/main/Main.scss.</strong></p>\n<p><a href=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-android-part2-img4.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-android-part2-img4.png\" alt=\"Mountainview Theme\"></a></p>\n<p>I could take most of my styling directly from my Sencha Touch application.\n  However, there is no “default” Sencha Touch theme anymore, instead there’s\n  the Neptune &amp; Triton themes, which both have different Sass variables and\n  require different DOM.</p>\n<p>This means that when you used custom styling for templates (tpls) etc, it\n  won’t break in your upgraded app, but when you used custom Sass to override\n  the Sencha Touch theme, you might see differences. The best practice is to\n  manually go through all the views in your browser, and check to see if the\n  styling is correct. Take a look at my <a href=\"https://github.com/savelee/ext-weatherapp/blob/master/dinmu2/sass/src/view/main/Main.scss\" target=\"_blank\" rel=\"noopener\"><strong>sass/src/view/main/Main.scss</strong></a>\n  which I used for the weather app application.</p>\n<p>In the next article in this series, I will show you how to do an advanced\n  universal upgrade.</p>\n<ul>\n  <li><a href=\"https://www.leeboonstra.com/developer/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-1\" target=\"_blank\" rel=\"noopener\">Part\n      I</a></li>\n  <li><a href=\"https://www.leeboonstra.com/developer/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-3\" target=\"_blank\" rel=\"noopener\">Part\n      III</a></li>\n</ul>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p><a href=\"https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-iphone1-part1-img1-e1452135006662.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-iphone1-part1-img1-e1452135006662-143x300.png\" alt=\"Cupertino Theme\"></a></p>\n<p>In <a href=\"https://www.sencha.com/blog/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-1/\" target=\"_blank\" rel=\"noopener\">part\n    1</a> of this blog post series, I discussed the changes in Ext JS 6 Modern\n  Toolkit and showed you how to do a basic mobile upgrade of your Sencha Touch\n  app. In this article, I’ll show you how to do an advanced mobile upgrade.</p>\n<h3 id=\"Advanced-Mobile-Upgrade\"><a href=\"#Advanced-Mobile-Upgrade\" class=\"headerlink\" title=\"Advanced Mobile Upgrade\"></a>Advanced\n  Mobile Upgrade</h3>\n<p>For the advanced mobile upgrade, you will use the MVVM pattern. It will take\n  more time and steps to upgrade this way, but you will have a lot of\n  advantages with the latest framework and all of the new features and classes.\n  Also, you can improve your application performance and code base with the new\n  MVVM architecture.</p>\n<p>I’ve cloned this <strong>dinmu1</strong> folder to a <a href=\"https://github.com/savelee/ext-weatherapp/tree/master/dinmu2\" target=\"_blank\" rel=\"noopener\">new\n    folder</a> called <strong>dinmu2</strong>, so you can see the differences.</p>\n<h4 id=\"Start-with-Migrating-the-Views\"><a href=\"#Start-with-Migrating-the-Views\" class=\"headerlink\" title=\"Start with Migrating the Views\"></a>Start\n  with Migrating the Views</h4>\n<ol>\n  <li>In the <strong>app/view</strong> folder, create the following folder\n    structure (every view gets its own subfolder):<ol>\n      <li><strong>app/view/main</strong></li>\n      <li><strong>app/view/settings</strong></li>\n    </ol>\n  </li>\n  <li>Move <strong>Main.js</strong> inside the main subfolder, and <strong>SettingsView.js</strong>\n    into settings subfolder. (I also renamed SettingsView.js to <strong>Settings.js</strong>)</li>\n  <li>Edit the namespaces for these two views to:<ol>\n      <li><strong>Dinmu.view.main.Main</strong></li>\n      <li><strong>Dinmu.view.settings.Setting</strong></li>\n    </ol>\n  </li>\n  <li>At this point, you broke the app because the viewport can’t find Main.js\n    and the Main.js view can’t find the Settings view, so you have to fix this:<ol>\n      <li>In the <strong>app.js</strong>, you can remove the line:<br><code>Ext.Viewport.add(Ext.create(&#39;Dinmu.view.Main&#39;));</code></li>\n      <li>Above the <code>launch()</code> method, you create a new viewport,\n        via the new way Ext 6 provides, by setting the mainView property to:\n        <code>mainView: &#39;Dinmu.view.main.Main&#39;,</code></li>\n      <li>Remove the <code>views: [&#39;main&#39;]</code> from <strong>app.js</strong></li>\n      <li>Add <code>&#39;Dinmu.view.main.Main&#39;</code> to the <code>requires</code>\n        array</li>\n      <li>In <strong>Main.js</strong>, change the <code>requires</code> for the\n        Settings View to <code>&#39;Dinmu.view.settings.Settings&#39;</code></li>\n    </ol>\n  </li>\n  <li>\n    <p>To confirm that nothing breaks after this fix, you can run a <strong>sencha\n        app refresh</strong>, and you shouldn’t see any errors.</p>\n    <p><a href=\"https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-files-part2-img2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-files-part2-img2-1024x469.png\" alt=\"Files\"></a></p>\n  </li>\n</ol>\n<h4 id=\"Migrate-the-Controllers-to-View-Controllers\"><a href=\"#Migrate-the-Controllers-to-View-Controllers\" class=\"headerlink\" title=\"Migrate the Controllers to View Controllers\"></a>Migrate\n  the Controllers to View Controllers</h4>\n<ol>\n  <li>Create the following new file:<br><strong>app/view/main/MainController.js</strong></li>\n  <li>\n    <p>Create the following class definition:</p>\n    <p>Ext.define(‘Dinmu.view.main.MainController’, {</p>\n    <pre><code>extend: &apos;Ext.app.ViewController&apos;,\nalias: &apos;controller.main&apos;,\n\n//all the VC methods\ninit: function(){\n  console.log(&quot;new VC is initialized&quot;);\n}\n</code></pre>\n    <p>});</p>\n  </li>\n  <li>\n    <p>Wire up the view controller to the main view:<br>In Main.js, add the\n      following line: <code>controller: &#39;main&#39;,</code></p>\n  </li>\n  <li>Also add the MainController to the <code>requires</code> array: <code>Dinmu.view.main.MainController</code></li>\n  <li>Run another <strong>sencha app refresh</strong>, and test the app in the\n    browser. You should see a log message that states the wiring of the VC was\n    successful. Note, you don’t need to wire this controller up to the Settings\n    view. Because Settings view is nested inside the main view, it can always\n    access the main controller.</li>\n  <li>You can remove the <code>controllers</code> array from <strong>app.js</strong>,\n    because you won’t use it anymore.</li>\n  <li>Remove the <code>init</code> method from the view controller and copy\n    over all the methods from <code>app/controller/Main.js</code> into the new\n    view controller.</li>\n  <li>\n    <p>Now comes the tricky part. You won’t use the <code>refs</code> and <code>control</code>\n      blocks, so you need to fix these. Instead of the control block, you will\n      create listeners in the view.</p>\n    <p>There are 5 controls that need to be replaced:</p>\n    <ul>\n      <li>onCarouselChange – activeitemchange in the main view</li>\n      <li>btnBack – tap back button in title bar</li>\n      <li>onSettingsBtnTap – tap settings button in settings view</li>\n      <li>onToggle – toggle on togglebutton</li>\n      <li>onRefresh – executed on tap of the refresh button</li>\n    </ul>\n    <p>In the <strong>Main.js</strong> view class, you will create the\n      activeitem change listener:</p>\n    <p>listeners: { ‘activeitemchange’: ‘onCarouselChange’ },</p>\n    <p>On the back button in Main.js, you will create a tap listener:</p>\n    <p>listeners: { ‘tap’: ‘onBackBtnTap’ },</p>\n    <p>On the settings button in Main.js, you will create a tap listener:</p>\n    <p>listeners: { ‘tap’: ‘onSettingsBtnTap’ },</p>\n    <p>On the toggle button in Settings.js, you will create a toggle listener:</p>\n    <p>listeners: { ‘change’: ‘onToggle’ },</p>\n    <p>On the refresh button in Settings.js, you will create a tap listener:</p>\n    <p>listeners: { ‘tap’: ‘onRefresh’ },</p>\n  </li>\n  <li>\n    <p>When you run the application in your browser, you will notice various\n      event errors. The references with component queries are broken. You will\n      fix these now.</p>\n  </li>\n</ol>\n<p>All the references to <code>this.getMainView()</code> can be replaced for\n  <code>this.getView()</code>. Because the view controller now knows about the\n  view, you can fix this one easily. I replaced it on 3 places.</p>\n<p>The other view references that you need will get a reference on the\n  component, that you can look up later. In Settings.js, add the following\n  property: <code>reference: &#39;settings&#39;</code>.</p>\n<p>In the MainController, replace <code>this.getSettingsView()</code> with\n  <code>this.lookupReference(&#39;settings&#39;)</code>.</p>\n<p>You can fix the <code>onToggle</code> Method like this:</p>\n<p>var s = this.lookupReference(‘settings’);</p>\n<p>if (!newVal) { s.down(‘field[name=”city”]‘).enable();\n  s.down(‘field[name=”country”]‘).enable();\n  s.down(‘field[name=”units”]‘).enable(); } else {\n  s.down(‘field[name=”city”]‘).disable();\n  s.down(‘field[name=”country”]‘).disable();\n  s.down(‘field[name=”units”]‘).disable();\n  s.down(‘field[name=”city”]‘).reset();\n  s.down(‘field[name=”country”]‘).reset(); }</p>\n<p>In the Main.js view, put a reference in the <strong>titlebar</strong>\n  configuration:</p>\n<p><code>reference: &#39;titlebar&#39;,</code></p>\n<p>Then replace the <code>onCarouselChange</code> method with:</p>\n<p>onCarouselChange: function(carousel, newVal, oldVal) { var t =\n  this.lookupReference(‘titlebar’);</p>\n<p>if (newVal.getItemId() == “mainview”) {\n  t.down(‘button[action=back]‘).hide();\n  t.down(‘button[action=settings]‘).show(); t.setTitle(‘Do I need my\n  Umbrella?’); } else { t.down(‘button[action=back]‘).show();\n  t.down(‘button[action=settings]‘).hide(); t.setTitle(‘Settings’); } },</p>\n<ol start=\"15\">\n  <li>Change the <code>onLaunch</code> method to <code>init</code>. Note, this\n    will break the application because <code>Dinmu.utils.Functions.loadData()</code>,\n    uses the Settings store, which is not wired up to a controller anymore. For\n    now, comment the line with <code>Dinmu.utils.Functions.loadData()</code>\n    out.</li>\n  <li>Run another <strong>sencha app refresh</strong> and test the app in the\n    browser. Everything except the refresh button should work. The refresh\n    button requires the store, which is not linked yet.</li>\n</ol>\n<h4 id=\"Link-the-Store-to-a-View-Model\"><a href=\"#Link-the-Store-to-a-View-Model\" class=\"headerlink\" title=\"Link the Store to a View Model\"></a>Link\n  the Store to a View Model</h4>\n<ol>\n  <li>Create the following new file:<br><strong>app/view/main/MainModel.js</strong></li>\n  <li>\n    <p>Create the following class definition:</p>\n    <p>Ext.define(‘Dinmu.view.main.MainModel’, {</p>\n    <pre><code>extend: &apos;Ext.app.ViewModel&apos;,\n\nalias: &apos;viewmodel.main&apos;,\n\nrequires: \\[\n\n\\],\n\nstores: {\n\n}\n</code></pre>\n    <p>});</p>\n  </li>\n  <li>\n    <p>Wire up the view model to the the main view:<br>In <strong>Main.js</strong>,\n      add the following line: <code>viewModel: &#39;main&#39;,</code><br>Don’t\n      forget to put the <code>Dinmu.view.main.MainModel</code> into the <code>requires</code>\n      array.</p>\n  </li>\n  <li>Now, link the Settings store; first add <code>Dinmu.store.Settings</code>\n    to the <code>requires</code> array.</li>\n  <li>In the Settings store, set an <code>alias: &#39;store.settings&#39;</code>\n    in the store class definition.</li>\n  <li>In Ext JS 6, Stores don’t automatically set the storeId to the name of\n    the class, therefore set the <code>storeId</code> to <code>Settings</code>,\n    so the store manager can find the store via <code>Ext.getStore(&#39;Settings&#39;)</code></li>\n  <li>After that, add the following store to the stores object, (the type\n    points to the settings alias):</li>\n</ol>\n<p>‘settings’: { type: ‘settings’ },</p>\n<ol start=\"10\">\n  <li>Enable the <code>Dinmu.utils.Functions.loadData()</code> line, which you\n    commented out before in the MainController. Then run another <strong>sencha\n      app refresh</strong> and test your app.</li>\n</ol>\n<p>At this point, you should have a working app that uses the MVVM pattern.</p>\n<h4 id=\"Other-App-Improvements\"><a href=\"#Other-App-Improvements\" class=\"headerlink\" title=\"Other App Improvements\"></a>Other\n  App Improvements</h4>\n<ul>\n  <li>This application doesn’t use data feeds in the store. However, another\n    big advantage with Ext JS 6 is that you don’t need to code all the model\n    fields in your Model definition. It gets the data directly from the feed.\n    That saves you from typing all the data in the feed, and makes your model\n    definitions a lot smaller.</li>\n  <li>Another thing that’s different in Ext JS 6 is the config blocks. In\n    Sencha Touch, you defined everything in the <code>config</code> block; in\n    Ext JS 6, you only put properties in a config block that need the auto\n    generation of getters, setters, apply, and update methods. For the Dinmu\n    application this means that I had to remove most of the config blocks. For\n    most of the classes, the config block in Sencha Touch style works fine, but\n    you could run into weird problems at some point, if you leave them.</li>\n  <li>Promises and Deferreds support. I was always a bit amazed that the way I\n    coded the saving of the settings form just worked. There’s a lot of magic\n    going on in the <code>sync()</code> method, and the way they order the new\n    created records, removed and edited records. It would have been a lot\n    better, if I could have coded it this way:<ul>\n      <li>Enter the form.</li>\n      <li>Check if localstorage contained old settings.</li>\n      <li>Remove old records, if any.</li>\n      <li>Sync store, and after the sync is complete, add new records.</li>\n      <li>Sync store, and after adding, load what’s in the store.</li>\n    </ul>\n  </li>\n</ul>\n<p>With Ext JS 6, you can do this because it supports promises and deferreds,\n  which allows you to chain methods, via the <code>then()</code> method. <a href=\"https://github.com/savelee/ext-weatherapp/blob/master/dinmu2/app/view/main/MainController.js\" target=\"_blank\" rel=\"noopener\">Look\n    at how I coded</a> the <code>removeAllSettings</code> and <code>addSettings</code>\n  methods. In the <code>onRefresh</code> method, I chained it. You can compare\n  it with the <strong>dinmu1</strong> or <strong>touchdinmu</strong> files to\n  see how this code differs.</p>\n<h4 id=\"Upgrade-the-Theme\"><a href=\"#Upgrade-the-Theme\" class=\"headerlink\" title=\"Upgrade the Theme\"></a>Upgrade\n  the Theme</h4>\n<ol>\n  <li>\n    <p>You can switch themes by changing the theme property in the <strong>app.json</strong>\n      file. Out of the box, you can choose between the following themes:</p>\n    <ul>\n      <li>theme-cupertino (ios theme)</li>\n      <li>theme-mountainview (android theme)</li>\n      <li>theme-blackberry (blackberry theme)</li>\n      <li>theme-windows (windows theme)</li>\n      <li>theme-neptune</li>\n      <li>theme-triton (default)</li>\n    </ul>\n    <p><a href=\"https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton1-part2-img3.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://wp-test.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton1-part2-img3.png\" alt=\"Cupertino Theme\"></a></p>\n    <p>Triton Theme</p>\n    <p>After switching the theme, you will need to run <strong>sencha app build</strong>.</p>\n  </li>\n  <li>\n    <p>The platform switcher in Ext JS is renewed. Instead, you will now use\n      the profiles <strong>build</strong> block in <strong>app.json</strong>.\n      To set this up, write in app.json:</p>\n  </li>\n</ol>\n<p>“builds”: { “ios”: { “toolkit”: “modern”, “theme”: “theme-cupertino” },</p>\n<p>“android”: { “toolkit”: “modern”, “theme”: “theme-mountainview” },</p>\n<p>“windows”: { “toolkit”: “modern”, “theme”: “theme-windows” },</p>\n<p>“bb”: { “toolkit”: “modern”, “theme”: “theme-blackberry” },</p>\n<p>“default”: { “toolkit”: “modern”, “theme”: “theme-triton” } },</p>\n<p>To enable the multiple themes on your development machine, add these lines\n  to the <strong>app.json</strong> bootstrap block:</p>\n<p>“bootstrap”: { “base”: “${app.dir}”,</p>\n<p>“microloader”: “bootstrap.js”, “css”: “bootstrap.css”,</p>\n<p>“manifest”: “${build.id}.json” //this is the magic, which generates a\n  manifest file, to load on local. },</p>\n<p>To enable the multiple themes on your production build, add these lines to\n  the <strong>app.json</strong> <code>output</code> block:</p>\n<p>“output”: { “base”:\n  “${workspace.build.dir}/${build.environment}/${app.name}”, “appCache”: {\n  “enable”: false }, “manifest”: “${build.id}.json”, “js”:\n  “${build.id}/app.js”, “resources”: { “path”: “${build.id}/resources”,\n  “shared”: “resources” } },</p>\n<p>In <strong>index.html</strong> you write:</p>\n<p>Ext.beforeLoad = function (tags) { var s = location.search, // the query\n  string (ex “?foo=1&amp;bar”) profile;</p>\n<pre><code>if (s.match(/\\\\bios\\\\b/) || tags.ios !==0) {\n    profile = &apos;ios&apos;;\n}\nelse if (s.match(/\\\\bandroid\\\\b/) || tags.android !==0) {\n    profile = &apos;android&apos;;\n}\nelse if (s.match(/\\\\bwindows\\\\b/) || tags.windows !==0) {\n    profile = &apos;windows&apos;;\n}\nelse if (s.match(/\\\\bbb\\\\b/) || tags.bb !==0 ) {\n    profile = &apos;bb&apos;;\n}\nelse {\n    profile = &apos;default&apos;;\n}\n\nExt.manifest = profile; // this name must match a build profile name\n</code></pre>\n<p>};</p>\n<p>You will need to run <strong>sencha app refresh</strong> and <strong>sencha\n    app build</strong>, which builds all profiles, to get it up and running.</p>\n<ol start=\"12\">\n  <li>Themes for Ext JS 6 Modern toolkit use the same packages structure as Ext\n    JS did. This is great, because it means that you can extend from your own\n    theme packages, and you can generate custom themes with Sencha Cmd:</li>\n</ol>\n<p><strong>sencha generate theme theme-MyTheme</strong></p>\n<p>Even if you don’t plan to create custom theme packages, theming is more\n  advanced. To upgrade an existing theme, you have to put all the variables in\n  the <strong>sass/var/</strong> folder.</p>\n<p>Take a look at my <a href=\"https://github.com/savelee/ext-weatherapp/blob/master/dinmu2/sass/var/all.scss\" target=\"_blank\" rel=\"noopener\"><strong>sass/var/all.scss</strong></a>\n  which I used for the weather app application. The custom Sass / CSS classes\n  will be stored in the <strong>sass/src/</strong> folder. For an application\n  (without custom theme packages), you have to map the folder structure of your\n  JS applications. In other words, app/view/main/Main.js has a Sass file in\n  this location: <strong>sass/src/view/main/Main.scss.</strong></p>\n<p><a href=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-android-part2-img4.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-android-part2-img4.png\" alt=\"Mountainview Theme\"></a></p>\n<p>I could take most of my styling directly from my Sencha Touch application.\n  However, there is no “default” Sencha Touch theme anymore, instead there’s\n  the Neptune &amp; Triton themes, which both have different Sass variables and\n  require different DOM.</p>\n<p>This means that when you used custom styling for templates (tpls) etc, it\n  won’t break in your upgraded app, but when you used custom Sass to override\n  the Sencha Touch theme, you might see differences. The best practice is to\n  manually go through all the views in your browser, and check to see if the\n  styling is correct. Take a look at my <a href=\"https://github.com/savelee/ext-weatherapp/blob/master/dinmu2/sass/src/view/main/Main.scss\" target=\"_blank\" rel=\"noopener\"><strong>sass/src/view/main/Main.scss</strong></a>\n  which I used for the weather app application.</p>\n<p>In the next article in this series, I will show you how to do an advanced\n  universal upgrade.</p>\n<ul>\n  <li><a href=\"https://www.leeboonstra.com/developer/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-1\" target=\"_blank\" rel=\"noopener\">Part\n      I</a></li>\n  <li><a href=\"https://www.leeboonstra.com/developer/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-3\" target=\"_blank\" rel=\"noopener\">Part\n      III</a></li>\n</ul>\n"},{"title":"How to Upgrade a Sencha Touch App to Ext JS 6 Modern Toolkit – Part 1","url":"1158.html","id":"1158","date":"2016-02-07T17:08:55.000Z","_content":"\n[![Cupertino Theme](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-iphone1-part1-img1.png)](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-iphone1-part1-img1.png)\n\nPreviously, I wrote a [blog post](https://www.sencha.com/blog/how-to-build-a-great-looking-universal-app-with-ext-js-part-1/) on how to create great looking universal apps with Ext JS.  \nHowever, we also have lots of customers who currently have a mobile (phone or tablet) application and want to upgrade it to Ext JS 6.\n\nIn this tutorial, I will show you how you can upgrade your app, and why you should consider taking this step.\n\nI used my existing tutorial files, “Do I need my umbrella” weather application, which I wrote a couple of years ago with Sencha Touch 2. You can find the [original tutorial here](https://www.sencha.com/blog/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-1/). You can download the [tutorial files here](https://github.com/savelee/ext-weatherapp/).\n\nYou don’t have to use these tutorial files, you can also just read through this guide and try it out with your own existing Sencha Touch 2 app.\n\n### Ext JS 6 Modern Toolkit and Sencha Touch\n\nExt JS has more (advanced) classes and features than Sencha Touch. You can create advanced enterprise desktop applications, and now you can also create advanced mobile applications or even advanced cross-platform apps.\n\nWe incorporated concepts from Sencha Touch 2, and merged them as “the modern toolkit” in Ext JS 5, with the modern core (class system, mvvm pattern, etc.), and there are also many updated classes. From a theming perspective, Ext JS 6 modern toolkit has been updated and looks different than Sencha Touch.\n\nWhen you’re looking for an enterprise solution to create mobile apps, whether it’s a universal app or just mobile, there are many reasons why you’d choose Ext JS 6 Modern toolkit. I will explain these benefits to you in this article.\n\nThen, I will take an example Sencha Touch 2 application, and migrate it to Ext JS 6 with the Ext JS 6 Modern toolkit.\n\n### What’s Different in Ext JS 6 Modern Toolkit\n\nHere’s an overview of new features in Ext JS 6 compared to Sencha Touch.\n\n#### Basic Upgrade\n\n**(No change to the MVVM pattern)**\n\nThis upgrade allows you to use:\n\n*   the latest mobile framework version, and support for the latest OS & browser versions\n*   running your mobile application on your desktop computer too\n*   controlling lists with your mouse scroll and keyboards (besides touch support)\n*   new packages / theme packages structure\n*   new Neptune and Triton (universal) themes\n*   fast theme compilation with Fashion\n*   cleaning up your models, by writing less code\n*   JavaScript promises, for asynchronous code\n*   out-of-the-box font-awesome integration\n*   one of the new components/classes:\n    *   data grid\n    *   data tree\n    *   navigation tree list\n    *   soap, amf0, amf3 proxies\n    *   new charts\n    *   form placeholders\n\n#### Advanced Upgrade\n\n**(Change to MVVM architecture pattern)**\n\nThis upgrade allows you to use:\n\n*   ViewControllers and ViewModels\n\n*   The Stores and Controllers in MVC are global. VCs and VMs live together with a particular view, which means that they will be created with a view, and can be destroyed. ViewModels and ViewControllers therefore can improve your application performance. They also allow you to write less code and make it easier to maintain.\n\n*   Databinding\n\n*   Bind to data or component states. It allows you to do advanced things by writing less code.\n\n#### Universal Upgrade\n\nThis upgrade allows you to:\n\n*   Create cross-platform apps, for mobile phones and tablets, but also desktop computers. By supporting the modern (lightweight component set) and the classic rich desktop component set.\n*   Support legacy browsers, like Internet Explorer 8, as well as the latest modern (mobile) browsers.\n\n### Things That Changed in the API\n\nYou can read a complete list of [Ext JS 6 API changes here](http://docs.sencha.com/extjs/6.0/api_diffs/600_modern_diff.html). The ones that I faced when upgrading the weather utility app are:\n\n*   ViewControllers and ViewModels\n\n*   The Stores and Controllers in MVC are global. VCs and VMs live together with a particular view, which means that they will be created with a view, and can be destroyed. ViewModels and ViewControllers therefore can improve your application performance. They also allow you to write less code and make it easier to maintain.\n\n*   Sencha Touch has Ext.app.Controller.launch() methods; in Ext 6 Modern toolkit, it’s Ext.app.Controller.onLaunch()\n*   In Sencha Touch, you had to define everything in a config block; in Ext 6 Modern toolkit, you just put properties in config blocks that need the magic methods (get, set, apply, and update). Although you don’t have to, you can clean up the config blocks.\n*   There are changes in the way you wire up stores that you can read about in these docs:\n\n*   [Ext JS 6 Ext.app.Controller-cfg-stores](http://docs.sencha.com/extjs/6.0/6.0.0-modern/#!/api/Ext.app.Controller-cfg-stores)\n*   [Sencha Touch 2.4.2 Ext.app.Controller-cfg-stores](http://docs.sencha.com/touch/2.4/2.4.2-apidocs/#!/api/Ext.app.Controller-cfg-stores)\n*   Also in Ext JS 6, Stores don’t automatically set the storeId to the name of the class.\n\n*   Sencha Touch validations are now called **validators**\n\n*   [Ext JS 6 Ext.data.Model-cfg-validators](http://docs.sencha.com/extjs/6.0/6.0.0-modern/#!/api/Ext.data.Model-cfg-validators)\n*   [Sencha Touch 2.4.2 Ext.data.Validations](http://docs.sencha.com/touch/2.4/2.4.2-apidocs/#!/api/Ext.data.Validations)\n\n*   The Sencha Touch default theme was replaced by Ext JS 6 Modern toolkit themes – Neptune and Triton.\n*   The default icon set that is being used is Font Awesome, instead of Pictos.\n\n### Basic Mobile Upgrade\n\nFor the basic, easy upgrade, we will stick with the existing MVC pattern. You will see that it won’t take many steps. However, you won’t be taking advantage of Ext JS 6. You will have the latest framework, with all its features and classes, but you won’t be using the new MVVM pattern.\n\n1\\.  [Download](https://www.sencha.com/products/extjs/evaluate/) the Ext JS 6 (trial version).  \n  \n2\\.  Look in your Sencha Touch project (app.js for example), and note the namespace that was used. For example, for the Weather Application, the namespace is “**Dinmu**”.  \n  \n3\\.  Generate an Ext JS 6 modern app:\n\nNavigate to the **ext** framework folder, and generate a project with:  \n`sencha generate app -modern`  \nFor example:  \next> `sencha generate app -modern Dinmu ../dinmu1`  \n  \nSee [https://github.com/savelee/ext-weatherapp/tree/master/dinmu1](https://github.com/savelee/ext-weatherapp/tree/master/dinmu1)\n\n4\\.  Go to the project in your browser, you should see the new Ext JS 6 demo app.  \n  \n5\\.  In your file system, rename the **<myproject>/app** folder to something else (like **app-backup**)  \n  \n6\\.  Do the same for the **app.js** file; rename it to **app-backup.js**  \n  \n7\\.  Then, copy the **app** folder and the **app.js** from your Sencha Touch project, and paste it in your new Ext JS 6 project.  \n  \nIn case you are loading external JS or CSS files via **app.json**, you can manually merge those lines into the new app.json. My advice is to do these kind of steps at the end, after you have your app running.  \n  \n8\\.  Run the following command from the command-line:\n\n1.  `sencha app refresh`\n2.  You might run into build errors here, because of API changes. For the Dinmu app, there was an error because `Ext.device.Geolocation` has been deprecated.\n3.  When you have lots of custom components, you may run into problems here. The best way to solve them is to read the messages from the CLI, and open the [Modern toolkit API docs](http://docs.sencha.com/extjs/6.0/6.0.0-modern/) to search for the classes that fail. In my case, it was the geolocation class that failed. In the docs, I noticed that there are no device APIs anymore. In Sencha Touch, these classes where wrappers for PhoneGap/Cordova support, that would fall back to the HTML5 API feature, if available in the browser. There is **Ext.util.Geolocation**, so I changed the code to use it. After I changed the line, I ran another **sencha app refresh** again, to check for more errors. See the [results here](https://github.com/savelee/ext-weatherapp/blob/master/dinmu1/app/utils/Functions.js).\n\n9\\.  When you don’t have any more errors anymore, you can try to run the application in the browser. When I ran my app, I got a console error in my app.js launch method.  \n`Ext.fly(‘appLoadingIndicator’).destroy();`  \n  \nBasically, this is an error that tells you that you can’t destroy the “appLoadingIndicator” element, just because it’s not there. The **index.html** is just different. Now you don’t want to replace the index.html file, with the Sencha Touch one, because the calls to the microloader are different. It’s up to you, if you want to remove this destroy line in the app.js launch method, or if you take over the <style> and <body> tags from the Sencha Touch app. I liked the Sencha Touch simple CSS preloader, that you will see before loading any JS or CSS, so that’s why I took over those tags. After fixing this problem, I was able to open my Ext JS 6 app in the browser.  \n  \n10\\.  The application is running a bit odd. By inspecting my application, I noticed that in my Sencha Touch application I have controllers with `launch` methods. And launch methods on controllers don’t exist in Ext JS 6, instead they’re called: `onLaunch`. So I renamed it, and ran the application again.  \n  \n11\\.  This time I had a problem with the store. The store manager couldn’t find `Ext.getStore('Settings')`, because it was wired up to the controller like this: `Dinmu.store.Settings`. Instead, the store manager has to access it via the full class name. I fixed it in the controller, instead of wiring up the full path, and I just passed in the Store name.  \n  \n12\\.  The settings button was not visible; this was due the changes in the icon sets. I used the default font-awesome settings icon, and changed the iconCIs in the Settings button in Main.js to: **x-fa fa-cog**\n\n[![Settings](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton2-part1-img2-300x229.png)](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton2-part1-img2.png)  \n  \n13\\.  Last step was to run a build to make sure that I was able to build my application. I expected it to work, because the **sencha app refresh** command did not fail.\n\nAnd that’s it. After this last step, I was able to run the Weather Application as a full working Ext JS 6 mobile app.\n\n### Coming Up Next\n\nIn the next article in this series, I’ll show you how to do the advanced upgrade, where we will switch to the new MVVM pattern, and we can also clean up some code.\n\n*   [Part II](https://www.leeboonstra.com/developer/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-2)\n*   [Part III](https://www.leeboonstra.com/developer/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-3)","source":"_drafts/how-tos/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-1.md","raw":"---\ntitle: How to Upgrade a Sencha Touch App to Ext JS 6 Modern Toolkit – Part 1\ntags:\n  - ext js 6\n  - migrate\n  - migration\n  - mobile app\n  - Sencha\n  - Sencha Touch\n  - upgrade\nurl: 1158.html\nid: 1158\ncategories:\n  - Ext JS 6\n  - Sencha Touch\ndate: 2016-02-07 18:08:55\n---\n\n[![Cupertino Theme](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-iphone1-part1-img1.png)](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-iphone1-part1-img1.png)\n\nPreviously, I wrote a [blog post](https://www.sencha.com/blog/how-to-build-a-great-looking-universal-app-with-ext-js-part-1/) on how to create great looking universal apps with Ext JS.  \nHowever, we also have lots of customers who currently have a mobile (phone or tablet) application and want to upgrade it to Ext JS 6.\n\nIn this tutorial, I will show you how you can upgrade your app, and why you should consider taking this step.\n\nI used my existing tutorial files, “Do I need my umbrella” weather application, which I wrote a couple of years ago with Sencha Touch 2. You can find the [original tutorial here](https://www.sencha.com/blog/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-1/). You can download the [tutorial files here](https://github.com/savelee/ext-weatherapp/).\n\nYou don’t have to use these tutorial files, you can also just read through this guide and try it out with your own existing Sencha Touch 2 app.\n\n### Ext JS 6 Modern Toolkit and Sencha Touch\n\nExt JS has more (advanced) classes and features than Sencha Touch. You can create advanced enterprise desktop applications, and now you can also create advanced mobile applications or even advanced cross-platform apps.\n\nWe incorporated concepts from Sencha Touch 2, and merged them as “the modern toolkit” in Ext JS 5, with the modern core (class system, mvvm pattern, etc.), and there are also many updated classes. From a theming perspective, Ext JS 6 modern toolkit has been updated and looks different than Sencha Touch.\n\nWhen you’re looking for an enterprise solution to create mobile apps, whether it’s a universal app or just mobile, there are many reasons why you’d choose Ext JS 6 Modern toolkit. I will explain these benefits to you in this article.\n\nThen, I will take an example Sencha Touch 2 application, and migrate it to Ext JS 6 with the Ext JS 6 Modern toolkit.\n\n### What’s Different in Ext JS 6 Modern Toolkit\n\nHere’s an overview of new features in Ext JS 6 compared to Sencha Touch.\n\n#### Basic Upgrade\n\n**(No change to the MVVM pattern)**\n\nThis upgrade allows you to use:\n\n*   the latest mobile framework version, and support for the latest OS & browser versions\n*   running your mobile application on your desktop computer too\n*   controlling lists with your mouse scroll and keyboards (besides touch support)\n*   new packages / theme packages structure\n*   new Neptune and Triton (universal) themes\n*   fast theme compilation with Fashion\n*   cleaning up your models, by writing less code\n*   JavaScript promises, for asynchronous code\n*   out-of-the-box font-awesome integration\n*   one of the new components/classes:\n    *   data grid\n    *   data tree\n    *   navigation tree list\n    *   soap, amf0, amf3 proxies\n    *   new charts\n    *   form placeholders\n\n#### Advanced Upgrade\n\n**(Change to MVVM architecture pattern)**\n\nThis upgrade allows you to use:\n\n*   ViewControllers and ViewModels\n\n*   The Stores and Controllers in MVC are global. VCs and VMs live together with a particular view, which means that they will be created with a view, and can be destroyed. ViewModels and ViewControllers therefore can improve your application performance. They also allow you to write less code and make it easier to maintain.\n\n*   Databinding\n\n*   Bind to data or component states. It allows you to do advanced things by writing less code.\n\n#### Universal Upgrade\n\nThis upgrade allows you to:\n\n*   Create cross-platform apps, for mobile phones and tablets, but also desktop computers. By supporting the modern (lightweight component set) and the classic rich desktop component set.\n*   Support legacy browsers, like Internet Explorer 8, as well as the latest modern (mobile) browsers.\n\n### Things That Changed in the API\n\nYou can read a complete list of [Ext JS 6 API changes here](http://docs.sencha.com/extjs/6.0/api_diffs/600_modern_diff.html). The ones that I faced when upgrading the weather utility app are:\n\n*   ViewControllers and ViewModels\n\n*   The Stores and Controllers in MVC are global. VCs and VMs live together with a particular view, which means that they will be created with a view, and can be destroyed. ViewModels and ViewControllers therefore can improve your application performance. They also allow you to write less code and make it easier to maintain.\n\n*   Sencha Touch has Ext.app.Controller.launch() methods; in Ext 6 Modern toolkit, it’s Ext.app.Controller.onLaunch()\n*   In Sencha Touch, you had to define everything in a config block; in Ext 6 Modern toolkit, you just put properties in config blocks that need the magic methods (get, set, apply, and update). Although you don’t have to, you can clean up the config blocks.\n*   There are changes in the way you wire up stores that you can read about in these docs:\n\n*   [Ext JS 6 Ext.app.Controller-cfg-stores](http://docs.sencha.com/extjs/6.0/6.0.0-modern/#!/api/Ext.app.Controller-cfg-stores)\n*   [Sencha Touch 2.4.2 Ext.app.Controller-cfg-stores](http://docs.sencha.com/touch/2.4/2.4.2-apidocs/#!/api/Ext.app.Controller-cfg-stores)\n*   Also in Ext JS 6, Stores don’t automatically set the storeId to the name of the class.\n\n*   Sencha Touch validations are now called **validators**\n\n*   [Ext JS 6 Ext.data.Model-cfg-validators](http://docs.sencha.com/extjs/6.0/6.0.0-modern/#!/api/Ext.data.Model-cfg-validators)\n*   [Sencha Touch 2.4.2 Ext.data.Validations](http://docs.sencha.com/touch/2.4/2.4.2-apidocs/#!/api/Ext.data.Validations)\n\n*   The Sencha Touch default theme was replaced by Ext JS 6 Modern toolkit themes – Neptune and Triton.\n*   The default icon set that is being used is Font Awesome, instead of Pictos.\n\n### Basic Mobile Upgrade\n\nFor the basic, easy upgrade, we will stick with the existing MVC pattern. You will see that it won’t take many steps. However, you won’t be taking advantage of Ext JS 6. You will have the latest framework, with all its features and classes, but you won’t be using the new MVVM pattern.\n\n1\\.  [Download](https://www.sencha.com/products/extjs/evaluate/) the Ext JS 6 (trial version).  \n  \n2\\.  Look in your Sencha Touch project (app.js for example), and note the namespace that was used. For example, for the Weather Application, the namespace is “**Dinmu**”.  \n  \n3\\.  Generate an Ext JS 6 modern app:\n\nNavigate to the **ext** framework folder, and generate a project with:  \n`sencha generate app -modern`  \nFor example:  \next> `sencha generate app -modern Dinmu ../dinmu1`  \n  \nSee [https://github.com/savelee/ext-weatherapp/tree/master/dinmu1](https://github.com/savelee/ext-weatherapp/tree/master/dinmu1)\n\n4\\.  Go to the project in your browser, you should see the new Ext JS 6 demo app.  \n  \n5\\.  In your file system, rename the **<myproject>/app** folder to something else (like **app-backup**)  \n  \n6\\.  Do the same for the **app.js** file; rename it to **app-backup.js**  \n  \n7\\.  Then, copy the **app** folder and the **app.js** from your Sencha Touch project, and paste it in your new Ext JS 6 project.  \n  \nIn case you are loading external JS or CSS files via **app.json**, you can manually merge those lines into the new app.json. My advice is to do these kind of steps at the end, after you have your app running.  \n  \n8\\.  Run the following command from the command-line:\n\n1.  `sencha app refresh`\n2.  You might run into build errors here, because of API changes. For the Dinmu app, there was an error because `Ext.device.Geolocation` has been deprecated.\n3.  When you have lots of custom components, you may run into problems here. The best way to solve them is to read the messages from the CLI, and open the [Modern toolkit API docs](http://docs.sencha.com/extjs/6.0/6.0.0-modern/) to search for the classes that fail. In my case, it was the geolocation class that failed. In the docs, I noticed that there are no device APIs anymore. In Sencha Touch, these classes where wrappers for PhoneGap/Cordova support, that would fall back to the HTML5 API feature, if available in the browser. There is **Ext.util.Geolocation**, so I changed the code to use it. After I changed the line, I ran another **sencha app refresh** again, to check for more errors. See the [results here](https://github.com/savelee/ext-weatherapp/blob/master/dinmu1/app/utils/Functions.js).\n\n9\\.  When you don’t have any more errors anymore, you can try to run the application in the browser. When I ran my app, I got a console error in my app.js launch method.  \n`Ext.fly(‘appLoadingIndicator’).destroy();`  \n  \nBasically, this is an error that tells you that you can’t destroy the “appLoadingIndicator” element, just because it’s not there. The **index.html** is just different. Now you don’t want to replace the index.html file, with the Sencha Touch one, because the calls to the microloader are different. It’s up to you, if you want to remove this destroy line in the app.js launch method, or if you take over the <style> and <body> tags from the Sencha Touch app. I liked the Sencha Touch simple CSS preloader, that you will see before loading any JS or CSS, so that’s why I took over those tags. After fixing this problem, I was able to open my Ext JS 6 app in the browser.  \n  \n10\\.  The application is running a bit odd. By inspecting my application, I noticed that in my Sencha Touch application I have controllers with `launch` methods. And launch methods on controllers don’t exist in Ext JS 6, instead they’re called: `onLaunch`. So I renamed it, and ran the application again.  \n  \n11\\.  This time I had a problem with the store. The store manager couldn’t find `Ext.getStore('Settings')`, because it was wired up to the controller like this: `Dinmu.store.Settings`. Instead, the store manager has to access it via the full class name. I fixed it in the controller, instead of wiring up the full path, and I just passed in the Store name.  \n  \n12\\.  The settings button was not visible; this was due the changes in the icon sets. I used the default font-awesome settings icon, and changed the iconCIs in the Settings button in Main.js to: **x-fa fa-cog**\n\n[![Settings](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton2-part1-img2-300x229.png)](https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-triton2-part1-img2.png)  \n  \n13\\.  Last step was to run a build to make sure that I was able to build my application. I expected it to work, because the **sencha app refresh** command did not fail.\n\nAnd that’s it. After this last step, I was able to run the Weather Application as a full working Ext JS 6 mobile app.\n\n### Coming Up Next\n\nIn the next article in this series, I’ll show you how to do the advanced upgrade, where we will switch to the new MVVM pattern, and we can also clean up some code.\n\n*   [Part II](https://www.leeboonstra.com/developer/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-2)\n*   [Part III](https://www.leeboonstra.com/developer/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-3)","slug":"how-tos/how-to-upgrade-a-sencha-touch-app-to-ext-js-6-modern-toolkit-part-1","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnczf010ekif5pmdc3ezc","content":"<p><a href=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-iphone1-part1-img1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-iphone1-part1-img1.png\" alt=\"Cupertino Theme\"></a></p>\n<p>Previously, I wrote a <a href=\"https://www.sencha.com/blog/how-to-build-a-great-looking-universal-app-with-ext-js-part-1/\" target=\"_blank\" rel=\"noopener\">blog\n    post</a> on how to create great looking universal apps with Ext JS.<br>However,\n  we also have lots of customers who currently have a mobile (phone or tablet)\n  application and want to upgrade it to Ext JS 6.</p>\n<p>In this tutorial, I will show you how you can upgrade your app, and why you\n  should consider taking this step.</p>\n<p>I used my existing tutorial files, “Do I need my umbrella” weather\n  application, which I wrote a couple of years ago with Sencha Touch 2. You can\n  find the <a href=\"https://www.sencha.com/blog/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-1/\" target=\"_blank\" rel=\"noopener\">original\n    tutorial here</a>. You can download the <a href=\"https://github.com/savelee/ext-weatherapp/\" target=\"_blank\" rel=\"noopener\">tutorial\n    files here</a>.</p>\n<p>You don’t have to use these tutorial files, you can also just read through\n  this guide and try it out with your own existing Sencha Touch 2 app.</p>\n<h3 id=\"Ext-JS-6-Modern-Toolkit-and-Sencha-Touch\"><a href=\"#Ext-JS-6-Modern-Toolkit-and-Sencha-Touch\" class=\"headerlink\" title=\"Ext JS 6 Modern Toolkit and Sencha Touch\"></a>Ext\n  JS 6 Modern Toolkit and Sencha Touch</h3>\n<p>Ext JS has more (advanced) classes and features than Sencha Touch. You can\n  create advanced enterprise desktop applications, and now you can also create\n  advanced mobile applications or even advanced cross-platform apps.</p>\n<p>We incorporated concepts from Sencha Touch 2, and merged them as “the modern\n  toolkit” in Ext JS 5, with the modern core (class system, mvvm pattern,\n  etc.), and there are also many updated classes. From a theming perspective,\n  Ext JS 6 modern toolkit has been updated and looks different than Sencha\n  Touch.</p>\n<p>When you’re looking for an enterprise solution to create mobile apps,\n  whether it’s a universal app or just mobile, there are many reasons why you’d\n  choose Ext JS 6 Modern toolkit. I will explain these benefits to you in this\n  article.</p>\n<p>Then, I will take an example Sencha Touch 2 application, and migrate it to\n  Ext JS 6 with the Ext JS 6 Modern toolkit.</p>\n<h3 id=\"What’s-Different-in-Ext-JS-6-Modern-Toolkit\"><a href=\"#What’s-Different-in-Ext-JS-6-Modern-Toolkit\" class=\"headerlink\" title=\"What’s Different in Ext JS 6 Modern Toolkit\"></a>What’s\n  Different in Ext JS 6 Modern Toolkit</h3>\n<p>Here’s an overview of new features in Ext JS 6 compared to Sencha Touch.</p>\n<h4 id=\"Basic-Upgrade\"><a href=\"#Basic-Upgrade\" class=\"headerlink\" title=\"Basic Upgrade\"></a>Basic\n  Upgrade</h4>\n<p><strong>(No change to the MVVM pattern)</strong></p>\n<p>This upgrade allows you to use:</p>\n<ul>\n  <li>the latest mobile framework version, and support for the latest OS &amp;\n    browser versions</li>\n  <li>running your mobile application on your desktop computer too</li>\n  <li>controlling lists with your mouse scroll and keyboards (besides touch\n    support)</li>\n  <li>new packages / theme packages structure</li>\n  <li>new Neptune and Triton (universal) themes</li>\n  <li>fast theme compilation with Fashion</li>\n  <li>cleaning up your models, by writing less code</li>\n  <li>JavaScript promises, for asynchronous code</li>\n  <li>out-of-the-box font-awesome integration</li>\n  <li>one of the new components/classes:<ul>\n      <li>data grid</li>\n      <li>data tree</li>\n      <li>navigation tree list</li>\n      <li>soap, amf0, amf3 proxies</li>\n      <li>new charts</li>\n      <li>form placeholders</li>\n    </ul>\n  </li>\n</ul>\n<h4 id=\"Advanced-Upgrade\"><a href=\"#Advanced-Upgrade\" class=\"headerlink\" title=\"Advanced Upgrade\"></a>Advanced\n  Upgrade</h4>\n<p><strong>(Change to MVVM architecture pattern)</strong></p>\n<p>This upgrade allows you to use:</p>\n<ul>\n  <li>\n    <p>ViewControllers and ViewModels</p>\n  </li>\n  <li>\n    <p>The Stores and Controllers in MVC are global. VCs and VMs live together\n      with a particular view, which means that they will be created with a\n      view, and can be destroyed. ViewModels and ViewControllers therefore can\n      improve your application performance. They also allow you to write less\n      code and make it easier to maintain.</p>\n  </li>\n  <li>\n    <p>Databinding</p>\n  </li>\n  <li>\n    <p>Bind to data or component states. It allows you to do advanced things by\n      writing less code.</p>\n  </li>\n</ul>\n<h4 id=\"Universal-Upgrade\"><a href=\"#Universal-Upgrade\" class=\"headerlink\" title=\"Universal Upgrade\"></a>Universal\n  Upgrade</h4>\n<p>This upgrade allows you to:</p>\n<ul>\n  <li>Create cross-platform apps, for mobile phones and tablets, but also\n    desktop computers. By supporting the modern (lightweight component set) and\n    the classic rich desktop component set.</li>\n  <li>Support legacy browsers, like Internet Explorer 8, as well as the latest\n    modern (mobile) browsers.</li>\n</ul>\n<h3 id=\"Things-That-Changed-in-the-API\"><a href=\"#Things-That-Changed-in-the-API\" class=\"headerlink\" title=\"Things That Changed in the API\"></a>Things\n  That Changed in the API</h3>\n<p>You can read a complete list of <a href=\"http://docs.sencha.com/extjs/6.0/api_diffs/600_modern_diff.html\" target=\"_blank\" rel=\"noopener\">Ext\n    JS 6 API changes here</a>. The ones that I faced when upgrading the weather\n  utility app are:</p>\n<ul>\n  <li>\n    <p>ViewControllers and ViewModels</p>\n  </li>\n  <li>\n    <p>The Stores and Controllers in MVC are global. VCs and VMs live together\n      with a particular view, which means that they will be created with a\n      view, and can be destroyed. ViewModels and ViewControllers therefore can\n      improve your application performance. They also allow you to write less\n      code and make it easier to maintain.</p>\n  </li>\n  <li>\n    <p>Sencha Touch has Ext.app.Controller.launch() methods; in Ext 6 Modern\n      toolkit, it’s Ext.app.Controller.onLaunch()</p>\n  </li>\n  <li>In Sencha Touch, you had to define everything in a config block; in Ext 6\n    Modern toolkit, you just put properties in config blocks that need the\n    magic methods (get, set, apply, and update). Although you don’t have to,\n    you can clean up the config blocks.</li>\n  <li>\n    <p>There are changes in the way you wire up stores that you can read about\n      in these docs:</p>\n  </li>\n  <li>\n    <p><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-modern/#!/api/Ext.app.Controller-cfg-stores\" target=\"_blank\" rel=\"noopener\">Ext\n        JS 6 Ext.app.Controller-cfg-stores</a></p>\n  </li>\n  <li><a href=\"http://docs.sencha.com/touch/2.4/2.4.2-apidocs/#!/api/Ext.app.Controller-cfg-stores\" target=\"_blank\" rel=\"noopener\">Sencha\n      Touch 2.4.2 Ext.app.Controller-cfg-stores</a></li>\n  <li>\n    <p>Also in Ext JS 6, Stores don’t automatically set the storeId to the name\n      of the class.</p>\n  </li>\n  <li>\n    <p>Sencha Touch validations are now called <strong>validators</strong></p>\n  </li>\n  <li>\n    <p><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-modern/#!/api/Ext.data.Model-cfg-validators\" target=\"_blank\" rel=\"noopener\">Ext\n        JS 6 Ext.data.Model-cfg-validators</a></p>\n  </li>\n  <li>\n    <p><a href=\"http://docs.sencha.com/touch/2.4/2.4.2-apidocs/#!/api/Ext.data.Validations\" target=\"_blank\" rel=\"noopener\">Sencha\n        Touch 2.4.2 Ext.data.Validations</a></p>\n  </li>\n  <li>\n    <p>The Sencha Touch default theme was replaced by Ext JS 6 Modern toolkit\n      themes – Neptune and Triton.</p>\n  </li>\n  <li>The default icon set that is being used is Font Awesome, instead of\n    Pictos.</li>\n</ul>\n<h3 id=\"Basic-Mobile-Upgrade\"><a href=\"#Basic-Mobile-Upgrade\" class=\"headerlink\" title=\"Basic Mobile Upgrade\"></a>Basic\n  Mobile Upgrade</h3>\n<p>For the basic, easy upgrade, we will stick with the existing MVC pattern.\n  You will see that it won’t take many steps. However, you won’t be taking\n  advantage of Ext JS 6. You will have the latest framework, with all its\n  features and classes, but you won’t be using the new MVVM pattern.</p>\n<p>1. <a href=\"https://www.sencha.com/products/extjs/evaluate/\" target=\"_blank\" rel=\"noopener\">Download</a>\n  the Ext JS 6 (trial version).</p>\n<p>2. Look in your Sencha Touch project (app.js for example), and note the\n  namespace that was used. For example, for the Weather Application, the\n  namespace is “<strong>Dinmu</strong>”.</p>\n<p>3. Generate an Ext JS 6 modern app:</p>\n<p>Navigate to the <strong>ext</strong> framework folder, and generate a\n  project with:<br><code>sencha generate app -modern</code><br>For example:<br>ext&gt;\n  <code>sencha generate app -modern Dinmu ../dinmu1</code></p>\n<p>See <a href=\"https://github.com/savelee/ext-weatherapp/tree/master/dinmu1\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/ext-weatherapp/tree/master/dinmu1</a></p>\n<p>4. Go to the project in your browser, you should see the new Ext JS 6 demo\n  app.</p>\n<p>5. In your file system, rename the <strong>\n    <myproject>/app</myproject>\n  </strong>folder to something else (like <strong>app-backup</strong>)</p>\n<p>6. Do the same for the <strong>app.js</strong> file; rename it to <strong>app-backup.js</strong></p>\n<p>7. Then, copy the <strong>app</strong> folder and the <strong>app.js</strong>\n  from your Sencha Touch project, and paste it in your new Ext JS 6 project.</p>\n<p>In case you are loading external JS or CSS files via <strong>app.json</strong>,\n  you can manually merge those lines into the new app.json. My advice is to do\n  these kind of steps at the end, after you have your app running.</p>\n<p>8. Run the following command from the command-line:</p>\n<ol>\n  <li><code>sencha app refresh</code></li>\n  <li>You might run into build errors here, because of API changes. For the\n    Dinmu app, there was an error because <code>Ext.device.Geolocation</code>\n    has been deprecated.</li>\n  <li>When you have lots of custom components, you may run into problems here.\n    The best way to solve them is to read the messages from the CLI, and open\n    the <a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-modern/\" target=\"_blank\" rel=\"noopener\">Modern toolkit\n      API docs</a> to search for the classes that fail. In my case, it was the\n    geolocation class that failed. In the docs, I noticed that there are no\n    device APIs anymore. In Sencha Touch, these classes where wrappers for\n    PhoneGap/Cordova support, that would fall back to the HTML5 API feature, if\n    available in the browser. There is <strong>Ext.util.Geolocation</strong>,\n    so I changed the code to use it. After I changed the line, I ran another\n    <strong>sencha app refresh</strong> again, to check for more errors. See\n    the <a href=\"https://github.com/savelee/ext-weatherapp/blob/master/dinmu1/app/utils/Functions.js\" target=\"_blank\" rel=\"noopener\">results\n      here</a>.</li>\n</ol>\n<p>9. When you don’t have any more errors anymore, you can try to run the\n  application in the browser. When I ran my app, I got a console error in my\n  app.js launch method.<br><code>Ext.fly(‘appLoadingIndicator’).destroy();</code></p>\n<p>Basically, this is an error that tells you that you can’t destroy the\n  “appLoadingIndicator” element, just because it’s not there. The <strong>index.html</strong>\n  is just different. Now you don’t want to replace the index.html file, with\n  the Sencha Touch one, because the calls to the microloader are different.\n  It’s up to you, if you want to remove this destroy line in the app.js launch\n  method, or if you take over the</p>\n<style></style>\n<p></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p><a href=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-iphone1-part1-img1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://www.sencha.com/wp-content/uploads/2016/01/touch-extjsmodern-tutorial-iphone1-part1-img1.png\" alt=\"Cupertino Theme\"></a></p>\n<p>Previously, I wrote a <a href=\"https://www.sencha.com/blog/how-to-build-a-great-looking-universal-app-with-ext-js-part-1/\" target=\"_blank\" rel=\"noopener\">blog\n    post</a> on how to create great looking universal apps with Ext JS.<br>However,\n  we also have lots of customers who currently have a mobile (phone or tablet)\n  application and want to upgrade it to Ext JS 6.</p>\n<p>In this tutorial, I will show you how you can upgrade your app, and why you\n  should consider taking this step.</p>\n<p>I used my existing tutorial files, “Do I need my umbrella” weather\n  application, which I wrote a couple of years ago with Sencha Touch 2. You can\n  find the <a href=\"https://www.sencha.com/blog/getting-started-with-sencha-touch-2-build-a-weather-utility-app-part-1/\" target=\"_blank\" rel=\"noopener\">original\n    tutorial here</a>. You can download the <a href=\"https://github.com/savelee/ext-weatherapp/\" target=\"_blank\" rel=\"noopener\">tutorial\n    files here</a>.</p>\n<p>You don’t have to use these tutorial files, you can also just read through\n  this guide and try it out with your own existing Sencha Touch 2 app.</p>\n<h3 id=\"Ext-JS-6-Modern-Toolkit-and-Sencha-Touch\"><a href=\"#Ext-JS-6-Modern-Toolkit-and-Sencha-Touch\" class=\"headerlink\" title=\"Ext JS 6 Modern Toolkit and Sencha Touch\"></a>Ext\n  JS 6 Modern Toolkit and Sencha Touch</h3>\n<p>Ext JS has more (advanced) classes and features than Sencha Touch. You can\n  create advanced enterprise desktop applications, and now you can also create\n  advanced mobile applications or even advanced cross-platform apps.</p>\n<p>We incorporated concepts from Sencha Touch 2, and merged them as “the modern\n  toolkit” in Ext JS 5, with the modern core (class system, mvvm pattern,\n  etc.), and there are also many updated classes. From a theming perspective,\n  Ext JS 6 modern toolkit has been updated and looks different than Sencha\n  Touch.</p>\n<p>When you’re looking for an enterprise solution to create mobile apps,\n  whether it’s a universal app or just mobile, there are many reasons why you’d\n  choose Ext JS 6 Modern toolkit. I will explain these benefits to you in this\n  article.</p>\n<p>Then, I will take an example Sencha Touch 2 application, and migrate it to\n  Ext JS 6 with the Ext JS 6 Modern toolkit.</p>\n<h3 id=\"What’s-Different-in-Ext-JS-6-Modern-Toolkit\"><a href=\"#What’s-Different-in-Ext-JS-6-Modern-Toolkit\" class=\"headerlink\" title=\"What’s Different in Ext JS 6 Modern Toolkit\"></a>What’s\n  Different in Ext JS 6 Modern Toolkit</h3>\n<p>Here’s an overview of new features in Ext JS 6 compared to Sencha Touch.</p>\n<h4 id=\"Basic-Upgrade\"><a href=\"#Basic-Upgrade\" class=\"headerlink\" title=\"Basic Upgrade\"></a>Basic\n  Upgrade</h4>\n<p><strong>(No change to the MVVM pattern)</strong></p>\n<p>This upgrade allows you to use:</p>\n<ul>\n  <li>the latest mobile framework version, and support for the latest OS &amp;\n    browser versions</li>\n  <li>running your mobile application on your desktop computer too</li>\n  <li>controlling lists with your mouse scroll and keyboards (besides touch\n    support)</li>\n  <li>new packages / theme packages structure</li>\n  <li>new Neptune and Triton (universal) themes</li>\n  <li>fast theme compilation with Fashion</li>\n  <li>cleaning up your models, by writing less code</li>\n  <li>JavaScript promises, for asynchronous code</li>\n  <li>out-of-the-box font-awesome integration</li>\n  <li>one of the new components/classes:<ul>\n      <li>data grid</li>\n      <li>data tree</li>\n      <li>navigation tree list</li>\n      <li>soap, amf0, amf3 proxies</li>\n      <li>new charts</li>\n      <li>form placeholders</li>\n    </ul>\n  </li>\n</ul>\n<h4 id=\"Advanced-Upgrade\"><a href=\"#Advanced-Upgrade\" class=\"headerlink\" title=\"Advanced Upgrade\"></a>Advanced\n  Upgrade</h4>\n<p><strong>(Change to MVVM architecture pattern)</strong></p>\n<p>This upgrade allows you to use:</p>\n<ul>\n  <li>\n    <p>ViewControllers and ViewModels</p>\n  </li>\n  <li>\n    <p>The Stores and Controllers in MVC are global. VCs and VMs live together\n      with a particular view, which means that they will be created with a\n      view, and can be destroyed. ViewModels and ViewControllers therefore can\n      improve your application performance. They also allow you to write less\n      code and make it easier to maintain.</p>\n  </li>\n  <li>\n    <p>Databinding</p>\n  </li>\n  <li>\n    <p>Bind to data or component states. It allows you to do advanced things by\n      writing less code.</p>\n  </li>\n</ul>\n<h4 id=\"Universal-Upgrade\"><a href=\"#Universal-Upgrade\" class=\"headerlink\" title=\"Universal Upgrade\"></a>Universal\n  Upgrade</h4>\n<p>This upgrade allows you to:</p>\n<ul>\n  <li>Create cross-platform apps, for mobile phones and tablets, but also\n    desktop computers. By supporting the modern (lightweight component set) and\n    the classic rich desktop component set.</li>\n  <li>Support legacy browsers, like Internet Explorer 8, as well as the latest\n    modern (mobile) browsers.</li>\n</ul>\n<h3 id=\"Things-That-Changed-in-the-API\"><a href=\"#Things-That-Changed-in-the-API\" class=\"headerlink\" title=\"Things That Changed in the API\"></a>Things\n  That Changed in the API</h3>\n<p>You can read a complete list of <a href=\"http://docs.sencha.com/extjs/6.0/api_diffs/600_modern_diff.html\" target=\"_blank\" rel=\"noopener\">Ext\n    JS 6 API changes here</a>. The ones that I faced when upgrading the weather\n  utility app are:</p>\n<ul>\n  <li>\n    <p>ViewControllers and ViewModels</p>\n  </li>\n  <li>\n    <p>The Stores and Controllers in MVC are global. VCs and VMs live together\n      with a particular view, which means that they will be created with a\n      view, and can be destroyed. ViewModels and ViewControllers therefore can\n      improve your application performance. They also allow you to write less\n      code and make it easier to maintain.</p>\n  </li>\n  <li>\n    <p>Sencha Touch has Ext.app.Controller.launch() methods; in Ext 6 Modern\n      toolkit, it’s Ext.app.Controller.onLaunch()</p>\n  </li>\n  <li>In Sencha Touch, you had to define everything in a config block; in Ext 6\n    Modern toolkit, you just put properties in config blocks that need the\n    magic methods (get, set, apply, and update). Although you don’t have to,\n    you can clean up the config blocks.</li>\n  <li>\n    <p>There are changes in the way you wire up stores that you can read about\n      in these docs:</p>\n  </li>\n  <li>\n    <p><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-modern/#!/api/Ext.app.Controller-cfg-stores\" target=\"_blank\" rel=\"noopener\">Ext\n        JS 6 Ext.app.Controller-cfg-stores</a></p>\n  </li>\n  <li><a href=\"http://docs.sencha.com/touch/2.4/2.4.2-apidocs/#!/api/Ext.app.Controller-cfg-stores\" target=\"_blank\" rel=\"noopener\">Sencha\n      Touch 2.4.2 Ext.app.Controller-cfg-stores</a></li>\n  <li>\n    <p>Also in Ext JS 6, Stores don’t automatically set the storeId to the name\n      of the class.</p>\n  </li>\n  <li>\n    <p>Sencha Touch validations are now called <strong>validators</strong></p>\n  </li>\n  <li>\n    <p><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-modern/#!/api/Ext.data.Model-cfg-validators\" target=\"_blank\" rel=\"noopener\">Ext\n        JS 6 Ext.data.Model-cfg-validators</a></p>\n  </li>\n  <li>\n    <p><a href=\"http://docs.sencha.com/touch/2.4/2.4.2-apidocs/#!/api/Ext.data.Validations\" target=\"_blank\" rel=\"noopener\">Sencha\n        Touch 2.4.2 Ext.data.Validations</a></p>\n  </li>\n  <li>\n    <p>The Sencha Touch default theme was replaced by Ext JS 6 Modern toolkit\n      themes – Neptune and Triton.</p>\n  </li>\n  <li>The default icon set that is being used is Font Awesome, instead of\n    Pictos.</li>\n</ul>\n<h3 id=\"Basic-Mobile-Upgrade\"><a href=\"#Basic-Mobile-Upgrade\" class=\"headerlink\" title=\"Basic Mobile Upgrade\"></a>Basic\n  Mobile Upgrade</h3>\n<p>For the basic, easy upgrade, we will stick with the existing MVC pattern.\n  You will see that it won’t take many steps. However, you won’t be taking\n  advantage of Ext JS 6. You will have the latest framework, with all its\n  features and classes, but you won’t be using the new MVVM pattern.</p>\n<p>1. <a href=\"https://www.sencha.com/products/extjs/evaluate/\" target=\"_blank\" rel=\"noopener\">Download</a>\n  the Ext JS 6 (trial version).</p>\n<p>2. Look in your Sencha Touch project (app.js for example), and note the\n  namespace that was used. For example, for the Weather Application, the\n  namespace is “<strong>Dinmu</strong>”.</p>\n<p>3. Generate an Ext JS 6 modern app:</p>\n<p>Navigate to the <strong>ext</strong> framework folder, and generate a\n  project with:<br><code>sencha generate app -modern</code><br>For example:<br>ext&gt;\n  <code>sencha generate app -modern Dinmu ../dinmu1</code></p>\n<p>See <a href=\"https://github.com/savelee/ext-weatherapp/tree/master/dinmu1\" target=\"_blank\" rel=\"noopener\">https://github.com/savelee/ext-weatherapp/tree/master/dinmu1</a></p>\n<p>4. Go to the project in your browser, you should see the new Ext JS 6 demo\n  app.</p>\n<p>5. In your file system, rename the <strong>\n    <myproject>/app</myproject>\n  </strong>folder to something else (like <strong>app-backup</strong>)</p>\n<p>6. Do the same for the <strong>app.js</strong> file; rename it to <strong>app-backup.js</strong></p>\n<p>7. Then, copy the <strong>app</strong> folder and the <strong>app.js</strong>\n  from your Sencha Touch project, and paste it in your new Ext JS 6 project.</p>\n<p>In case you are loading external JS or CSS files via <strong>app.json</strong>,\n  you can manually merge those lines into the new app.json. My advice is to do\n  these kind of steps at the end, after you have your app running.</p>\n<p>8. Run the following command from the command-line:</p>\n<ol>\n  <li><code>sencha app refresh</code></li>\n  <li>You might run into build errors here, because of API changes. For the\n    Dinmu app, there was an error because <code>Ext.device.Geolocation</code>\n    has been deprecated.</li>\n  <li>When you have lots of custom components, you may run into problems here.\n    The best way to solve them is to read the messages from the CLI, and open\n    the <a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-modern/\" target=\"_blank\" rel=\"noopener\">Modern toolkit\n      API docs</a> to search for the classes that fail. In my case, it was the\n    geolocation class that failed. In the docs, I noticed that there are no\n    device APIs anymore. In Sencha Touch, these classes where wrappers for\n    PhoneGap/Cordova support, that would fall back to the HTML5 API feature, if\n    available in the browser. There is <strong>Ext.util.Geolocation</strong>,\n    so I changed the code to use it. After I changed the line, I ran another\n    <strong>sencha app refresh</strong> again, to check for more errors. See\n    the <a href=\"https://github.com/savelee/ext-weatherapp/blob/master/dinmu1/app/utils/Functions.js\" target=\"_blank\" rel=\"noopener\">results\n      here</a>.</li>\n</ol>\n<p>9. When you don’t have any more errors anymore, you can try to run the\n  application in the browser. When I ran my app, I got a console error in my\n  app.js launch method.<br><code>Ext.fly(‘appLoadingIndicator’).destroy();</code></p>\n<p>Basically, this is an error that tells you that you can’t destroy the\n  “appLoadingIndicator” element, just because it’s not there. The <strong>index.html</strong>\n  is just different. Now you don’t want to replace the index.html file, with\n  the Sencha Touch one, because the calls to the microloader are different.\n  It’s up to you, if you want to remove this destroy line in the app.js launch\n  method, or if you take over the</p>\n<style></style>\n<p></p>\n"},{"title":"Sencha & ECMAScript 2015","url":"1583.html","id":"1583","date":"2016-08-29T12:27:00.000Z","_content":"\nWith just a few more days to go, before the release of Ext JS 6.2, (BTW, Can’t wait! Material Design theme, pinch to zoom, D3 integration, calendar component and much more…) Sencha is already busy with working on the next major version of Ext JS. We will give you a preview on our long term roadmap on: * 20 Sept in London UK - \\[https://www.sencha.com/company/roadshow/london/\\](https://www.sencha.com/company/roadshow/london/) * 21 Sept in Paris France - \\[https://www.sencha.com/company/roadshow/paris/\\](https://www.sencha.com/company/roadshow/paris/) * 22 Sept in Karlsruhe Germany - \\[https://www.sencha.com/company/roadshow/karlsruhe\\](https://www.sencha.com/company/roadshow/karlsruhe) ![es2015](https://www.leeboonstra.com/wp-content/uploads/2016/08/es2015-500x119.jpg) One of the things that’s gonna be huge, is ES2015 support for Ext JS. Our goal is not to rewrite the whole framework according the new ECMAScript standard. no. ..but we want you to be able to write ES2015 code together with your Sencha framework API calls. So you can leverage the advantages of cleaner JavaScript code in your own Sencha classes and controllers. With that comes new tooling that includes a transpiler, to make sure your code runs in all the supported browsers, and probably will also support for TypeScript, Grunt/Gulp etc. It’s all at an early stage yet, but if you have questions, (and you’re in Europe the week of the 20th of September), you will have the chance to meet the Sencha product manager and engineers at the roadshows. \\*I will be there as well, presenting an ECMAScript 2015 masterclass. I will cover the top 10 new features of ECMAScript 2015, and teach you what’s new through code examples.\\* (Are you from the USA? - I will give the presentation at SenchaCon in Las Vegas, November this year.) Think about: \\*\\*Block Code Constructs\\*\\*, \\*\\*Arrow functions\\*\\*, \\*\\*Default Parameters\\*\\*, \\*\\*Promises\\*\\* (see also my earlier post: \\[https://www.leeboonstra.com/asynchronous-javascript-promises/\\](https://www.leeboonstra.com/asynchronous-javascript-promises/)), \\*\\*Classes\\*\\*, \\*\\*Modules\\*\\*... etc. But there’s much more. And unfortunately not everything fits in my Top 10 / in an 45min talk. I like to share with you some more ES2015 code snippets, which are as cool, but didn’t make it in my final presentation. Have a look, this article contains info about: * Spread Operators * Maps & Sets * For Of Loops * Generators ##Rest parameters & Spread Operator Let’s say I have a function but I don’t know how many arguments I am gonna pass into it. Maybe 1, maybe 2, or maybe 15. (Not sure if you would want that tho... but you get the idea). The spread operator looks like this: `...n`. 3 dots and a variable which holds an array. That array contains all the parameters that you passed in. The rest parameters. Let’s have a look how we did this before ES2015 and what’s new: https://gist.github.com/savelee/3667a2c6b6e2d21683bf390f29682811 You can see the ES2015 is much nicer to write. It’s better performing, and it returns a true Array, where the old fashioned JavaScript \\`arguments\\` just contains an object that somehow fakes to be an Array. You can use the spread operator in combination with Arrays for example: https://gist.github.com/savelee/e7922bb28eb7ee22466c5a0acdf2c2ea These new data structures are supported in most of the modern desktop browsers. \\[http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/) ##New Data Structures ###Map & WeakMap The following four data structures are new in ECMAScript 2015: \\*\\*Map\\*\\*, \\*\\*WeakMap\\*\\*, \\*\\*Set\\*\\* and \\*\\*WeakSet\\*\\*. Let me explain how these work. Maps are a store for key / value pairs. The Key and value could be a primitives or object references. ES5 JavaScript was missing a data structure for mapping values. What people use to do; was abusing objects to save values, and that can lead you into nasty inheritance pitfalls. (See: \\[http://speakingjs.com/es5/ch17.html#\\_pitfalls\\_using\\_an\\_object\\_as\\_a\\_map\\](http://speakingjs.com/es5/ch17.html#\\_pitfalls\\_using\\_an\\_object\\_as\\_a\\_map)) https://gist.github.com/savelee/c46bdb2560b16ecb4fc6acf47ba0344b Maps give you a whole bunch of extra functionalities. You can \\`get\\` and \\`set\\` values in a map. You can \\`delete\\` a value in a map. You can loop through entries or values in maps, and you can \\`clear\\` them: \\[https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global\\_Objects/Map\\](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global\\_Objects/Map) A \\*\\*WeakMap\\*\\* is a map that doesn’t prevent its keys from being garbage-collected, so you don’t have to worry about memory leaks. It has almost the same functionalities as a Map, however you can’t iterate over the keys, values or entries and you also can not clear it. \\[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/WeakMap\\](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/WeakMap) Keys of WeakMaps are of the type Object only. Primitive data types as keys are not allowed (So a String, Number, Boolean, null, undefined or a ES2015 Symbols can not be used as a Weakmap key.). A Map can use primitive values for keys. ``` w = new Map; w.set('a', 'b'); //Map { a: \"b\" } w = new WeakMap; w.set('a', 'b'); //TypeError: \"a\" is not a non-null object ``` ###Sets and WeakSets \\*\\*Sets\\*\\* are collections for unique values. The values could be also a primitives or object references. https://gist.github.com/savelee/a78d45462ef84b182d41ce539f374ad8 An ES2015 \\*\\*Set\\*\\* has similar functionalities as a \\*\\*Map\\*\\*. But a value in the Set may only occur once; it is unique in the Set's collection and can not contain duplicates: ``` var myset = new Set(\\[\"A\", \"A\", \"B\"\\]); console.log(myset.size); //2 !!! ``` \\[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Set\\](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Set) Like a WeakMap, \\*\\*WeakSet\\*\\* is a Set that doesn’t prevent its values from being garbage-collected. It has simpler API than WeakMap, because has only three methods: \\`add()\\`, \\`delete()\\` and \\`has()\\`. These new data structures are supported in most of the modern desktop and mobile browsers. \\[http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/) If you want to use it in production, you will need to make use of a transpiler like Babel, who can provide you a polyfill. (\\[https://babeljs.io\\](https://babeljs.io)) ##For-of loop The \\`for...of\\` statement creates a loop iterating over iterable objects (including Array, Map, Set,String, arguments object etc..): It is the most concise, direct syntax yet for looping through array elements and it avoids all the pitfalls of \\`for–in\\` loops, (which you would typically use for looping over object properties).Unlike \\`forEach()\\`, it works with \\`break\\`, \\`continue\\`, and \\`return\\`. https://gist.github.com/savelee/b6f7ffded255b61c1ed2f91d742a74da As you can see it is pretty similar to for-in loop, which can be used to iterate through object properties. These new data structures are supported in most of the modern desktop browsers. \\[http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/) ##Generators \\*\\*Generators\\*\\* are simply subtypes of Iterators. They are a special kind of function that can be suspended and resumed, which is different compared to iterators. Generators use \\`function*\\` and \\`yield\\` operators: https://gist.github.com/savelee/8adac424eec58313d2a9ae0fc9cc9e4f Note the yield statements. It returns a generator instance and moves to the next yield when \\`next()\\` is called. The snippet for the Dice Generator has a while loop that won’t end. It can roll numbers between 1 and 6. These new data structures are supported in most of the modern desktop browsers. \\[http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/) If you want to use it in production, you will need to make use of a transpiler like Babel, who can provide you a polyfill. (\\[https://babeljs.io\\](https://babeljs.io))\n\n* * *\n\nWant to learn more about ECMAScript 2015? Join me at the roadshows: \\[https://www.sencha.com/company/roadshow\\](https://www.sencha.com/company/roadshow) Beside ECMAScript 2015 and TypeScript fun, there will be much to talk about: How to Test your JavaScript code, Build Data analysing apps with Ext JS 6.2, new upcoming Sencha Tools, customer cases and much more...","source":"_drafts/how-tos/sencha-ecmascript-2015.md","raw":"---\ntitle: Sencha & ECMAScript 2015\ntags:\n  - ECMAScript 2015\n  - ES2015\n  - es6\n  - ext\n  - Ext JS 7\n  - Roadshows\n  - Sencha\n  - TypeScript\nurl: 1583.html\nid: 1583\ncategories:\n  - ES2015\n  - JavaScript\ndate: 2016-08-29 14:27:00\n---\n\nWith just a few more days to go, before the release of Ext JS 6.2, (BTW, Can’t wait! Material Design theme, pinch to zoom, D3 integration, calendar component and much more…) Sencha is already busy with working on the next major version of Ext JS. We will give you a preview on our long term roadmap on: * 20 Sept in London UK - \\[https://www.sencha.com/company/roadshow/london/\\](https://www.sencha.com/company/roadshow/london/) * 21 Sept in Paris France - \\[https://www.sencha.com/company/roadshow/paris/\\](https://www.sencha.com/company/roadshow/paris/) * 22 Sept in Karlsruhe Germany - \\[https://www.sencha.com/company/roadshow/karlsruhe\\](https://www.sencha.com/company/roadshow/karlsruhe) ![es2015](https://www.leeboonstra.com/wp-content/uploads/2016/08/es2015-500x119.jpg) One of the things that’s gonna be huge, is ES2015 support for Ext JS. Our goal is not to rewrite the whole framework according the new ECMAScript standard. no. ..but we want you to be able to write ES2015 code together with your Sencha framework API calls. So you can leverage the advantages of cleaner JavaScript code in your own Sencha classes and controllers. With that comes new tooling that includes a transpiler, to make sure your code runs in all the supported browsers, and probably will also support for TypeScript, Grunt/Gulp etc. It’s all at an early stage yet, but if you have questions, (and you’re in Europe the week of the 20th of September), you will have the chance to meet the Sencha product manager and engineers at the roadshows. \\*I will be there as well, presenting an ECMAScript 2015 masterclass. I will cover the top 10 new features of ECMAScript 2015, and teach you what’s new through code examples.\\* (Are you from the USA? - I will give the presentation at SenchaCon in Las Vegas, November this year.) Think about: \\*\\*Block Code Constructs\\*\\*, \\*\\*Arrow functions\\*\\*, \\*\\*Default Parameters\\*\\*, \\*\\*Promises\\*\\* (see also my earlier post: \\[https://www.leeboonstra.com/asynchronous-javascript-promises/\\](https://www.leeboonstra.com/asynchronous-javascript-promises/)), \\*\\*Classes\\*\\*, \\*\\*Modules\\*\\*... etc. But there’s much more. And unfortunately not everything fits in my Top 10 / in an 45min talk. I like to share with you some more ES2015 code snippets, which are as cool, but didn’t make it in my final presentation. Have a look, this article contains info about: * Spread Operators * Maps & Sets * For Of Loops * Generators ##Rest parameters & Spread Operator Let’s say I have a function but I don’t know how many arguments I am gonna pass into it. Maybe 1, maybe 2, or maybe 15. (Not sure if you would want that tho... but you get the idea). The spread operator looks like this: `...n`. 3 dots and a variable which holds an array. That array contains all the parameters that you passed in. The rest parameters. Let’s have a look how we did this before ES2015 and what’s new: https://gist.github.com/savelee/3667a2c6b6e2d21683bf390f29682811 You can see the ES2015 is much nicer to write. It’s better performing, and it returns a true Array, where the old fashioned JavaScript \\`arguments\\` just contains an object that somehow fakes to be an Array. You can use the spread operator in combination with Arrays for example: https://gist.github.com/savelee/e7922bb28eb7ee22466c5a0acdf2c2ea These new data structures are supported in most of the modern desktop browsers. \\[http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/) ##New Data Structures ###Map & WeakMap The following four data structures are new in ECMAScript 2015: \\*\\*Map\\*\\*, \\*\\*WeakMap\\*\\*, \\*\\*Set\\*\\* and \\*\\*WeakSet\\*\\*. Let me explain how these work. Maps are a store for key / value pairs. The Key and value could be a primitives or object references. ES5 JavaScript was missing a data structure for mapping values. What people use to do; was abusing objects to save values, and that can lead you into nasty inheritance pitfalls. (See: \\[http://speakingjs.com/es5/ch17.html#\\_pitfalls\\_using\\_an\\_object\\_as\\_a\\_map\\](http://speakingjs.com/es5/ch17.html#\\_pitfalls\\_using\\_an\\_object\\_as\\_a\\_map)) https://gist.github.com/savelee/c46bdb2560b16ecb4fc6acf47ba0344b Maps give you a whole bunch of extra functionalities. You can \\`get\\` and \\`set\\` values in a map. You can \\`delete\\` a value in a map. You can loop through entries or values in maps, and you can \\`clear\\` them: \\[https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global\\_Objects/Map\\](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global\\_Objects/Map) A \\*\\*WeakMap\\*\\* is a map that doesn’t prevent its keys from being garbage-collected, so you don’t have to worry about memory leaks. It has almost the same functionalities as a Map, however you can’t iterate over the keys, values or entries and you also can not clear it. \\[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/WeakMap\\](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/WeakMap) Keys of WeakMaps are of the type Object only. Primitive data types as keys are not allowed (So a String, Number, Boolean, null, undefined or a ES2015 Symbols can not be used as a Weakmap key.). A Map can use primitive values for keys. ``` w = new Map; w.set('a', 'b'); //Map { a: \"b\" } w = new WeakMap; w.set('a', 'b'); //TypeError: \"a\" is not a non-null object ``` ###Sets and WeakSets \\*\\*Sets\\*\\* are collections for unique values. The values could be also a primitives or object references. https://gist.github.com/savelee/a78d45462ef84b182d41ce539f374ad8 An ES2015 \\*\\*Set\\*\\* has similar functionalities as a \\*\\*Map\\*\\*. But a value in the Set may only occur once; it is unique in the Set's collection and can not contain duplicates: ``` var myset = new Set(\\[\"A\", \"A\", \"B\"\\]); console.log(myset.size); //2 !!! ``` \\[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Set\\](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Set) Like a WeakMap, \\*\\*WeakSet\\*\\* is a Set that doesn’t prevent its values from being garbage-collected. It has simpler API than WeakMap, because has only three methods: \\`add()\\`, \\`delete()\\` and \\`has()\\`. These new data structures are supported in most of the modern desktop and mobile browsers. \\[http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/) If you want to use it in production, you will need to make use of a transpiler like Babel, who can provide you a polyfill. (\\[https://babeljs.io\\](https://babeljs.io)) ##For-of loop The \\`for...of\\` statement creates a loop iterating over iterable objects (including Array, Map, Set,String, arguments object etc..): It is the most concise, direct syntax yet for looping through array elements and it avoids all the pitfalls of \\`for–in\\` loops, (which you would typically use for looping over object properties).Unlike \\`forEach()\\`, it works with \\`break\\`, \\`continue\\`, and \\`return\\`. https://gist.github.com/savelee/b6f7ffded255b61c1ed2f91d742a74da As you can see it is pretty similar to for-in loop, which can be used to iterate through object properties. These new data structures are supported in most of the modern desktop browsers. \\[http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/) ##Generators \\*\\*Generators\\*\\* are simply subtypes of Iterators. They are a special kind of function that can be suspended and resumed, which is different compared to iterators. Generators use \\`function*\\` and \\`yield\\` operators: https://gist.github.com/savelee/8adac424eec58313d2a9ae0fc9cc9e4f Note the yield statements. It returns a generator instance and moves to the next yield when \\`next()\\` is called. The snippet for the Dice Generator has a while loop that won’t end. It can roll numbers between 1 and 6. These new data structures are supported in most of the modern desktop browsers. \\[http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/) If you want to use it in production, you will need to make use of a transpiler like Babel, who can provide you a polyfill. (\\[https://babeljs.io\\](https://babeljs.io))\n\n* * *\n\nWant to learn more about ECMAScript 2015? Join me at the roadshows: \\[https://www.sencha.com/company/roadshow\\](https://www.sencha.com/company/roadshow) Beside ECMAScript 2015 and TypeScript fun, there will be much to talk about: How to Test your JavaScript code, Build Data analysing apps with Ext JS 6.2, new upcoming Sencha Tools, customer cases and much more...","slug":"how-tos/sencha-ecmascript-2015","published":0,"updated":"2018-11-25T13:09:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnczh010gkif5k3l38jqi","content":"<p>With just a few more days to go, before the release of Ext JS 6.2, (BTW,\n  Can’t wait! Material Design theme, pinch to zoom, D3 integration, calendar\n  component and much more…) Sencha is already busy with working on the next\n  major version of Ext JS. We will give you a preview on our long term roadmap\n  on: <em>20 Sept in London UK - [<a href=\"https://www.sencha.com/company/roadshow/london/\\](https://www.sencha.com/company/roadshow/london/)\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/company/roadshow/london/\\](https://www.sencha.com/company/roadshow/london/)</a>\n  </em>21 Sept in Paris France - [<a href=\"https://www.sencha.com/company/roadshow/paris/\\](https://www.sencha.com/company/roadshow/paris/)\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/company/roadshow/paris/\\](https://www.sencha.com/company/roadshow/paris/)</a>\n  <em>22 Sept in Karlsruhe Germany - [<a href=\"https://www.sencha.com/company/roadshow/karlsruhe\\](https://www.sencha.com/company/roadshow/karlsruhe)\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/company/roadshow/karlsruhe\\](https://www.sencha.com/company/roadshow/karlsruhe)</a>\n    <img src=\"https://www.leeboonstra.com/wp-content/uploads/2016/08/es2015-500x119.jpg\" alt=\"es2015\">\n    One of the things that’s gonna be huge, is ES2015 support for Ext JS. Our\n    goal is not to rewrite the whole framework according the new ECMAScript\n    standard. no. ..but we want you to be able to write ES2015 code together\n    with your Sencha framework API calls. So you can leverage the advantages of\n    cleaner JavaScript code in your own Sencha classes and controllers. With\n    that comes new tooling that includes a transpiler, to make sure your code\n    runs in all the supported browsers, and probably will also support for\n    TypeScript, Grunt/Gulp etc. It’s all at an early stage yet, but if you have\n    questions, (and you’re in Europe the week of the 20th of September), you\n    will have the chance to meet the Sencha product manager and engineers at\n    the roadshows. \\</em>I will be there as well, presenting an ECMAScript 2015\n  masterclass. I will cover the top 10 new features of ECMAScript 2015, and\n  teach you what’s new through code examples.* (Are you from the USA? - I will\n  give the presentation at SenchaCon in Las Vegas, November this year.) Think\n  about: **Block Code Constructs**, **Arrow functions**, **Default\n  Parameters**, **Promises** (see also my earlier post: [<a href=\"https://www.leeboonstra.com/asynchronous-javascript-promises/\\](https://www.leeboonstra.com/asynchronous-javascript-promises/))\" target=\"_blank\" rel=\"noopener\">https://www.leeboonstra.com/asynchronous-javascript-promises/\\](https://www.leeboonstra.com/asynchronous-javascript-promises/))</a>,\n  **Classes**, **Modules**… etc. But there’s much more. And unfortunately not\n  everything fits in my Top 10 / in an 45min talk. I like to share with you\n  some more ES2015 code snippets, which are as cool, but didn’t make it in my\n  final presentation. Have a look, this article contains info about: <em>Spread\n    Operators </em>Maps &amp; Sets <em>For Of Loops </em>Generators ##Rest\n  parameters &amp; Spread Operator Let’s say I have a function but I don’t know\n  how many arguments I am gonna pass into it. Maybe 1, maybe 2, or maybe 15.\n  (Not sure if you would want that tho… but you get the idea). The spread\n  operator looks like this: <code>...n</code>. 3 dots and a variable which\n  holds an array. That array contains all the parameters that you passed in.\n  The rest parameters. Let’s have a look how we did this before ES2015 and\n  what’s new: <a href=\"https://gist.github.com/savelee/3667a2c6b6e2d21683bf390f29682811\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/3667a2c6b6e2d21683bf390f29682811</a>\n  You can see the ES2015 is much nicer to write. It’s better performing, and it\n  returns a true Array, where the old fashioned JavaScript `arguments` just\n  contains an object that somehow fakes to be an Array. You can use the spread\n  operator in combination with Arrays for example: <a href=\"https://gist.github.com/savelee/e7922bb28eb7ee22466c5a0acdf2c2ea\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/e7922bb28eb7ee22466c5a0acdf2c2ea</a>\n  These new data structures are supported in most of the modern desktop\n  browsers. [<a href=\"http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/)\" target=\"_blank\" rel=\"noopener\">http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/)</a>\n  ##New Data Structures ###Map &amp; WeakMap The following four data structures\n  are new in ECMAScript 2015: **Map**, **WeakMap**, **Set** and **WeakSet**.\n  Let me explain how these work. Maps are a store for key / value pairs. The\n  Key and value could be a primitives or object references. ES5 JavaScript was\n  missing a data structure for mapping values. What people use to do; was\n  abusing objects to save values, and that can lead you into nasty inheritance\n  pitfalls. (See: [<a href=\"http://speakingjs.com/es5/ch17.html#\\_pitfalls\\_using\\_an\\_object\\_as\\_a\\_map\\](http://speakingjs.com/es5/ch17.html#\\_pitfalls\\_using\\_an\\_object\\_as\\_a\\_map)\" target=\"_blank\" rel=\"noopener\">http://speakingjs.com/es5/ch17.html#\\_pitfalls\\_using\\_an\\_object\\_as\\_a\\_map\\](http://speakingjs.com/es5/ch17.html#\\_pitfalls\\_using\\_an\\_object\\_as\\_a\\_map)</a>)\n  <a href=\"https://gist.github.com/savelee/c46bdb2560b16ecb4fc6acf47ba0344b\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/c46bdb2560b16ecb4fc6acf47ba0344b</a>\n  Maps give you a whole bunch of extra functionalities. You can `get` and `set`\n  values in a map. You can `delete` a value in a map. You can loop through\n  entries or values in maps, and you can `clear` them: [<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global\\_Objects/Map\\](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global\\_Objects/Map)\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global\\_Objects/Map\\](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global\\_Objects/Map)</a>\n  A **WeakMap** is a map that doesn’t prevent its keys from being\n  garbage-collected, so you don’t have to worry about memory leaks. It has\n  almost the same functionalities as a Map, however you can’t iterate over the\n  keys, values or entries and you also can not clear it. [<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/WeakMap\\](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/WeakMap)\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/WeakMap\\](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/WeakMap)</a>\n  Keys of WeakMaps are of the type Object only. Primitive data types as keys\n  are not allowed (So a String, Number, Boolean, null, undefined or a ES2015\n  Symbols can not be used as a Weakmap key.). A Map can use primitive values\n  for keys. <code>w = new Map; w.set(&#39;a&#39;, &#39;b&#39;); //Map { a:\n    &quot;b&quot; } w = new WeakMap; w.set(&#39;a&#39;, &#39;b&#39;);\n    //TypeError: &quot;a&quot; is not a non-null object</code> ###Sets and\n  WeakSets **Sets** are collections for unique values. The values could be also\n  a primitives or object references. <a href=\"https://gist.github.com/savelee/a78d45462ef84b182d41ce539f374ad8\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/a78d45462ef84b182d41ce539f374ad8</a>\n  An ES2015 **Set** has similar functionalities as a **Map**. But a value in\n  the Set may only occur once; it is unique in the Set’s collection and can not\n  contain duplicates: <code>var myset = new Set(\\[&quot;A&quot;, &quot;A&quot;,\n    &quot;B&quot;\\]); console.log(myset.size); //2 !!!</code> [<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Set\\](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Set)\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Set\\](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Set)</a>\n  Like a WeakMap, **WeakSet** is a Set that doesn’t prevent its values from\n  being garbage-collected. It has simpler API than WeakMap, because has only\n  three methods: `add()`, `delete()` and `has()`. These new data structures are\n  supported in most of the modern desktop and mobile browsers. [<a href=\"http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/)\" target=\"_blank\" rel=\"noopener\">http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/)</a>\n  If you want to use it in production, you will need to make use of a\n  transpiler like Babel, who can provide you a polyfill. ([<a href=\"https://babeljs.io\\](https://babeljs.io)\" target=\"_blank\" rel=\"noopener\">https://babeljs.io\\](https://babeljs.io)</a>)\n  ##For-of loop The `for…of` statement creates a loop iterating over iterable\n  objects (including Array, Map, Set,String, arguments object etc..): It is the\n  most concise, direct syntax yet for looping through array elements and it\n  avoids all the pitfalls of `for–in` loops, (which you would typically use for\n  looping over object properties).Unlike `forEach()`, it works with `break`,\n  `continue`, and `return`. <a href=\"https://gist.github.com/savelee/b6f7ffded255b61c1ed2f91d742a74da\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/b6f7ffded255b61c1ed2f91d742a74da</a>\n  As you can see it is pretty similar to for-in loop, which can be used to\n  iterate through object properties. These new data structures are supported in\n  most of the modern desktop browsers. [<a href=\"http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/)\" target=\"_blank\" rel=\"noopener\">http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/)</a>\n  ##Generators **Generators** are simply subtypes of Iterators. They are a\n  special kind of function that can be suspended and resumed, which is\n  different compared to iterators. Generators use `function*` and `yield`\n  operators: <a href=\"https://gist.github.com/savelee/8adac424eec58313d2a9ae0fc9cc9e4f\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/8adac424eec58313d2a9ae0fc9cc9e4f</a>\n  Note the yield statements. It returns a generator instance and moves to the\n  next yield when `next()` is called. The snippet for the Dice Generator has a\n  while loop that won’t end. It can roll numbers between 1 and 6. These new\n  data structures are supported in most of the modern desktop browsers. [<a href=\"http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/)\" target=\"_blank\" rel=\"noopener\">http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/)</a>\n  If you want to use it in production, you will need to make use of a\n  transpiler like Babel, who can provide you a polyfill. ([<a href=\"https://babeljs.io\\](https://babeljs.io)\" target=\"_blank\" rel=\"noopener\">https://babeljs.io\\](https://babeljs.io)</a>)</p>\n<hr>\n<p>Want to learn more about ECMAScript 2015? Join me at the roadshows: [<a href=\"https://www.sencha.com/company/roadshow\\](https://www.sencha.com/company/roadshow)\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/company/roadshow\\](https://www.sencha.com/company/roadshow)</a>\n  Beside ECMAScript 2015 and TypeScript fun, there will be much to talk about:\n  How to Test your JavaScript code, Build Data analysing apps with Ext JS 6.2,\n  new upcoming Sencha Tools, customer cases and much more…</p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<p>With just a few more days to go, before the release of Ext JS 6.2, (BTW,\n  Can’t wait! Material Design theme, pinch to zoom, D3 integration, calendar\n  component and much more…) Sencha is already busy with working on the next\n  major version of Ext JS. We will give you a preview on our long term roadmap\n  on: <em>20 Sept in London UK - [<a href=\"https://www.sencha.com/company/roadshow/london/\\](https://www.sencha.com/company/roadshow/london/)\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/company/roadshow/london/\\](https://www.sencha.com/company/roadshow/london/)</a>\n  </em>21 Sept in Paris France - [<a href=\"https://www.sencha.com/company/roadshow/paris/\\](https://www.sencha.com/company/roadshow/paris/)\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/company/roadshow/paris/\\](https://www.sencha.com/company/roadshow/paris/)</a>\n  <em>22 Sept in Karlsruhe Germany - [<a href=\"https://www.sencha.com/company/roadshow/karlsruhe\\](https://www.sencha.com/company/roadshow/karlsruhe)\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/company/roadshow/karlsruhe\\](https://www.sencha.com/company/roadshow/karlsruhe)</a>\n    <img src=\"https://www.leeboonstra.com/wp-content/uploads/2016/08/es2015-500x119.jpg\" alt=\"es2015\">\n    One of the things that’s gonna be huge, is ES2015 support for Ext JS. Our\n    goal is not to rewrite the whole framework according the new ECMAScript\n    standard. no. ..but we want you to be able to write ES2015 code together\n    with your Sencha framework API calls. So you can leverage the advantages of\n    cleaner JavaScript code in your own Sencha classes and controllers. With\n    that comes new tooling that includes a transpiler, to make sure your code\n    runs in all the supported browsers, and probably will also support for\n    TypeScript, Grunt/Gulp etc. It’s all at an early stage yet, but if you have\n    questions, (and you’re in Europe the week of the 20th of September), you\n    will have the chance to meet the Sencha product manager and engineers at\n    the roadshows. \\</em>I will be there as well, presenting an ECMAScript 2015\n  masterclass. I will cover the top 10 new features of ECMAScript 2015, and\n  teach you what’s new through code examples.* (Are you from the USA? - I will\n  give the presentation at SenchaCon in Las Vegas, November this year.) Think\n  about: **Block Code Constructs**, **Arrow functions**, **Default\n  Parameters**, **Promises** (see also my earlier post: [<a href=\"https://www.leeboonstra.com/asynchronous-javascript-promises/\\](https://www.leeboonstra.com/asynchronous-javascript-promises/))\" target=\"_blank\" rel=\"noopener\">https://www.leeboonstra.com/asynchronous-javascript-promises/\\](https://www.leeboonstra.com/asynchronous-javascript-promises/))</a>,\n  **Classes**, **Modules**… etc. But there’s much more. And unfortunately not\n  everything fits in my Top 10 / in an 45min talk. I like to share with you\n  some more ES2015 code snippets, which are as cool, but didn’t make it in my\n  final presentation. Have a look, this article contains info about: <em>Spread\n    Operators </em>Maps &amp; Sets <em>For Of Loops </em>Generators ##Rest\n  parameters &amp; Spread Operator Let’s say I have a function but I don’t know\n  how many arguments I am gonna pass into it. Maybe 1, maybe 2, or maybe 15.\n  (Not sure if you would want that tho… but you get the idea). The spread\n  operator looks like this: <code>...n</code>. 3 dots and a variable which\n  holds an array. That array contains all the parameters that you passed in.\n  The rest parameters. Let’s have a look how we did this before ES2015 and\n  what’s new: <a href=\"https://gist.github.com/savelee/3667a2c6b6e2d21683bf390f29682811\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/3667a2c6b6e2d21683bf390f29682811</a>\n  You can see the ES2015 is much nicer to write. It’s better performing, and it\n  returns a true Array, where the old fashioned JavaScript `arguments` just\n  contains an object that somehow fakes to be an Array. You can use the spread\n  operator in combination with Arrays for example: <a href=\"https://gist.github.com/savelee/e7922bb28eb7ee22466c5a0acdf2c2ea\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/e7922bb28eb7ee22466c5a0acdf2c2ea</a>\n  These new data structures are supported in most of the modern desktop\n  browsers. [<a href=\"http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/)\" target=\"_blank\" rel=\"noopener\">http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/)</a>\n  ##New Data Structures ###Map &amp; WeakMap The following four data structures\n  are new in ECMAScript 2015: **Map**, **WeakMap**, **Set** and **WeakSet**.\n  Let me explain how these work. Maps are a store for key / value pairs. The\n  Key and value could be a primitives or object references. ES5 JavaScript was\n  missing a data structure for mapping values. What people use to do; was\n  abusing objects to save values, and that can lead you into nasty inheritance\n  pitfalls. (See: [<a href=\"http://speakingjs.com/es5/ch17.html#\\_pitfalls\\_using\\_an\\_object\\_as\\_a\\_map\\](http://speakingjs.com/es5/ch17.html#\\_pitfalls\\_using\\_an\\_object\\_as\\_a\\_map)\" target=\"_blank\" rel=\"noopener\">http://speakingjs.com/es5/ch17.html#\\_pitfalls\\_using\\_an\\_object\\_as\\_a\\_map\\](http://speakingjs.com/es5/ch17.html#\\_pitfalls\\_using\\_an\\_object\\_as\\_a\\_map)</a>)\n  <a href=\"https://gist.github.com/savelee/c46bdb2560b16ecb4fc6acf47ba0344b\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/c46bdb2560b16ecb4fc6acf47ba0344b</a>\n  Maps give you a whole bunch of extra functionalities. You can `get` and `set`\n  values in a map. You can `delete` a value in a map. You can loop through\n  entries or values in maps, and you can `clear` them: [<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global\\_Objects/Map\\](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global\\_Objects/Map)\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global\\_Objects/Map\\](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global\\_Objects/Map)</a>\n  A **WeakMap** is a map that doesn’t prevent its keys from being\n  garbage-collected, so you don’t have to worry about memory leaks. It has\n  almost the same functionalities as a Map, however you can’t iterate over the\n  keys, values or entries and you also can not clear it. [<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/WeakMap\\](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/WeakMap)\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/WeakMap\\](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/WeakMap)</a>\n  Keys of WeakMaps are of the type Object only. Primitive data types as keys\n  are not allowed (So a String, Number, Boolean, null, undefined or a ES2015\n  Symbols can not be used as a Weakmap key.). A Map can use primitive values\n  for keys. <code>w = new Map; w.set(&#39;a&#39;, &#39;b&#39;); //Map { a:\n    &quot;b&quot; } w = new WeakMap; w.set(&#39;a&#39;, &#39;b&#39;);\n    //TypeError: &quot;a&quot; is not a non-null object</code> ###Sets and\n  WeakSets **Sets** are collections for unique values. The values could be also\n  a primitives or object references. <a href=\"https://gist.github.com/savelee/a78d45462ef84b182d41ce539f374ad8\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/a78d45462ef84b182d41ce539f374ad8</a>\n  An ES2015 **Set** has similar functionalities as a **Map**. But a value in\n  the Set may only occur once; it is unique in the Set’s collection and can not\n  contain duplicates: <code>var myset = new Set(\\[&quot;A&quot;, &quot;A&quot;,\n    &quot;B&quot;\\]); console.log(myset.size); //2 !!!</code> [<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Set\\](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Set)\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Set\\](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Set)</a>\n  Like a WeakMap, **WeakSet** is a Set that doesn’t prevent its values from\n  being garbage-collected. It has simpler API than WeakMap, because has only\n  three methods: `add()`, `delete()` and `has()`. These new data structures are\n  supported in most of the modern desktop and mobile browsers. [<a href=\"http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/)\" target=\"_blank\" rel=\"noopener\">http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/)</a>\n  If you want to use it in production, you will need to make use of a\n  transpiler like Babel, who can provide you a polyfill. ([<a href=\"https://babeljs.io\\](https://babeljs.io)\" target=\"_blank\" rel=\"noopener\">https://babeljs.io\\](https://babeljs.io)</a>)\n  ##For-of loop The `for…of` statement creates a loop iterating over iterable\n  objects (including Array, Map, Set,String, arguments object etc..): It is the\n  most concise, direct syntax yet for looping through array elements and it\n  avoids all the pitfalls of `for–in` loops, (which you would typically use for\n  looping over object properties).Unlike `forEach()`, it works with `break`,\n  `continue`, and `return`. <a href=\"https://gist.github.com/savelee/b6f7ffded255b61c1ed2f91d742a74da\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/b6f7ffded255b61c1ed2f91d742a74da</a>\n  As you can see it is pretty similar to for-in loop, which can be used to\n  iterate through object properties. These new data structures are supported in\n  most of the modern desktop browsers. [<a href=\"http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/)\" target=\"_blank\" rel=\"noopener\">http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/)</a>\n  ##Generators **Generators** are simply subtypes of Iterators. They are a\n  special kind of function that can be suspended and resumed, which is\n  different compared to iterators. Generators use `function*` and `yield`\n  operators: <a href=\"https://gist.github.com/savelee/8adac424eec58313d2a9ae0fc9cc9e4f\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/savelee/8adac424eec58313d2a9ae0fc9cc9e4f</a>\n  Note the yield statements. It returns a generator instance and moves to the\n  next yield when `next()` is called. The snippet for the Dice Generator has a\n  while loop that won’t end. It can roll numbers between 1 and 6. These new\n  data structures are supported in most of the modern desktop browsers. [<a href=\"http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/)\" target=\"_blank\" rel=\"noopener\">http://kangax.github.io/compat-table/es6/\\](http://kangax.github.io/compat-table/es6/)</a>\n  If you want to use it in production, you will need to make use of a\n  transpiler like Babel, who can provide you a polyfill. ([<a href=\"https://babeljs.io\\](https://babeljs.io)\" target=\"_blank\" rel=\"noopener\">https://babeljs.io\\](https://babeljs.io)</a>)</p>\n<hr>\n<p>Want to learn more about ECMAScript 2015? Join me at the roadshows: [<a href=\"https://www.sencha.com/company/roadshow\\](https://www.sencha.com/company/roadshow)\" target=\"_blank\" rel=\"noopener\">https://www.sencha.com/company/roadshow\\](https://www.sencha.com/company/roadshow)</a>\n  Beside ECMAScript 2015 and TypeScript fun, there will be much to talk about:\n  How to Test your JavaScript code, Build Data analysing apps with Ext JS 6.2,\n  new upcoming Sencha Tools, customer cases and much more…</p>\n"},{"title":"How to Create a Dark Ext JS Theme (part 1)","url":"692.html","id":"692","date":"2015-08-01T09:18:13.000Z","_content":"\n### Introduction\n\nEvery now and then, I demo my [Spotifinder Ext JS app](https://chrome.google.com/webstore/detail/spotifinder-spotify-and-y/eihejbblncmfbklmoadloifongaomcaa). It’s a really cool app that connects to LastFm and Spotify. I created it, to demo Ext JS concepts in my training classes. It also shows off the great theming capabilities in Ext JS.\n\nThis year, I presented advanced theming at SenchaCon and I received lots of questions about how I created the Spotifinder app theme. So I decided to write a tutorial on how to create a really cool, good looking dark theme.\n\nYou can use this tutorial to help you build your theme for the Sencha Application Theming Contest.  \nThe first prize winner gets $2,500!\n\n[Sign up now](http://pages.sencha.com/App-Theming-Contest-2015.html)\n\nThe tutorial files I used for this tutorial can be found [here](https://github.com/savelee/sencha-theming-tutorial). It’s basically just a simple Ext JS app (view) with many components, like a grid, and some other components. You can use any other Ext JS (4, 5 or 6) application as well, but I used this as a reference point, and I used Ext JS 6. What’s great about theming an “all-component” -app, is that you see on the fly how your new theme looks like, without clicking through a real-life app.\n\nAnother prerequisite: Sencha Cmd needs to run on your command line. Test with this command: sencha which. It should output a version number – for Ext JS 6, the Cmd version should be 6.x.\n\n[![Neptune theme](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img1.png)](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img1.png)\n\nExt JS themes use Sass, which stands for syntactically awesome stylesheets, and yes, it’s indeed awesome. Its a more dynamic way to write CSS code. For example, you can use variables and calculations in your stylesheets. A browser doesn’t understand Sass, only CSS. Therefore, these Sass themes need to be compiled to production-ready CSS code, so your browser can understand it. The compilation process of themes in Ext JS apps runs via Sencha Cmd.\n\nExt JS ships with a couple of out-of-the-box themes. You can directly switch to one of these themes and use it, or you can extend one of them and modify it. That’s how you create custom themes. The best theme to modify is Neptune or the new Triton. It provides lots of variables you can use to change the look and feel, and because it’s color background and white text on the front, it’s the ideal theme to use to create good looking dark themes. Alright, enough theory, let’s try it out.\n\n[![Triton theme](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img2.png)](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img2.png)\n\n[![Crisp theme](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img3.png)](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img3.png)\n\nWe’ll start by generating a new theme. We’ll just generate a theme package, so you can reuse it in other projects.\n\nOpen Sencha Cmd and run the following command:\n\nsencha generate theme theme-spotifext\n\nThis will generate a theme package, in my workspace **packages/local** folder. It will contain a **sass/var** folder, which will contain a Sass stylesheet with variables. It will be first in the compile order), and it will also contain a **sass/src** folder, which is the folder that contains Sass stylesheets with mixins and CSS rules. These files will be compiled last, so the pre-defined variables are used. The theme package also contains a **resources** folder – it can be handy to save assets such as images or fonts in this folder. The package will also contain a **package.json** file. It has meta info for your theme package. For example, it sets the type of the package to a “theme”. Also, you can write your contact information and description. There is one thing here that you’ll need to change. To create a theme variant of the new Triton theme, change the extend line to:\n\n    \"extend\": \"theme-triton\",\n\nNote that themes in Ext JS 6 don’t have the `\"ext-\"` prefix anymore.\n\nNow, to see your variant of the Triton theme in the theming demo app, you need to wire it up the correct way.\n\n### Switching Themes\n\nI mentioned “the correct way” on purpose because in traditional web design you would change stylesheets by opening the **index.html** page and swapping the ‹style› tags. It doesn’t work like this in Ext JS applications – you swap your themes via the **app.json** file. What’s happening here is that the Ext JS microloader loads the correct stylesheet for you, via the **bootstrap.css** file, which is included in your **index.html**. The bootstrap.css points to a CSS build version of your Sass theme. This way of serving themes has a huge advantage; all your paths to images and fonts will be all the same across any environment: development, test, or production.\n\nYou can wire up your new Spotifext theme by opening **app.json** of the demo app and changing the `\"theme\"` line to:\n\n\"theme\": \"theme-spotifext\"\n\nThe next step is to build your application with **sencha app build** or **sencha app build development** (which only builds the theme instead of the full app), and you’re good to go.  \nIn case you’re running a universal app and you want to use the Spotifext theme for the classic toolkit, you should wire up the theme to a **build profile**. For example:\n\n\"builds\": {\n   \"myclassicprofile\": {\n      \"toolkit\": \"classic\",\n       \"theme\": \"theme-spotifext\"\n    },\n \n   \"mymodernprofile\": {\n      \"toolkit\": \"modern\",\n      \"theme\": \"theme-cupertino\"\n   }\n },\n\n### Variables\n\nThe first thing you’ll need to do is create some files. You can create the following file structure, in your package folder **(packages/local/theme-spotifext)**:\n\n**  \nsass/var/_config.scss  \nsass/var/Component.scss  \nsass/var/button/Button.scss  \nsass/var/form/field/Base.scss  \nsass/var/grid/Panel.scss  \nsass/var/tab/Panel.scss  \n**\n\nNotice the naming of the files. Everything, except **_config.scss**, maps to the framework components. Component.scss – > Ext.Component, and grid/Panel.scss to Ext.grid.Panel.scss. This mapping is set up in the **app.json** file as a sass namespace. You don’t need to change that.\n\nAn important feature of Sass is the ability to define variables. Do you remember when you used to use plain old CSS? You coded a full stylesheet and by the end of the week someone in your company wanted you to change one of the application colors. It was a huge problem because you had to find and replace all those color values, including all the color codes with lighter or darker contrasts.\n\nWith Sass, this is not a big deal anymore. You just define a variable at the top of your file. Later in your CSS rules, you point to those pre-defined variables. Because a Sass stylesheet is compiled, it makes your stylesheet a lot more dynamic.\n\nTry this out. In the **Component.scss** file, you will include your own color configuration sheet (that’s the **_config.scss** file). Just write the following line at the top of **var/Component.scss**:  \n`@import ‘_config.scss’;`\n\nNow in the **_config.scss** file, define a couple of vars which you can use though the full stylesheet. You can define these variables at the top of the file:\n\n//my own variables\n$dark-bg: #000;\n$dark-bg2: #121314;\n$dark-bg3: #222326;\n$dark-bg4: darken(#88898C, 15%);\n \n$front-color: #adafb2;\n$front-color2: #fff;\n \n$highlight-color: $base-color;\n$highlight-color2: lighten($highlight-color, 20%);\n$highlight-color3: darken($highlight-color, 20%);\n \n$font-family: 'Montserrat', helvetica , arial , verdana , sans-serif;\n$font-size: 12px;\n\nNote the `$highlight-color2` and `3`, these use built-in Sass functions to change the highlight-color to a 20% lighter or darker tone of the color.\n\nWe understand that Sass variables are an extremely important feature of Sass, so Ext JS uses Sass variables as well. There are actually two types of variables: _Global_ variables and _Component_ variables.\n\n#### Global Variables\n\nThe first variable you’ll set is the `$base-color` – it’s a global Ext JS Sass variable. When you change this variable, it will affect everything in the global scope. Many other colors will be calculated based on the `$base-color`.\n\nYou can find all the Global variables in the API docs by searching for **Global_CSS**. Or, even better, you can use Sencha App Inspector – see below for more information.\n\nFor your theme, you can use these global vars and put them in **var/Component.scss**:\n\n$base-color: #639000;\n \n$body-background-color: $dark-bg3;\n$color: $front-color;\n$enable-font-smoothing: true;\n\n#### Component Variables\n\nInside **Component.scss**, I have set a bunch of component variables too. Take a look at my [files](https://github.com/savelee/sencha-theming-tutorial/tree/master/packages/local/theme-spotifext/sass/var) in the **packages/local/theme-spotifext/sass/var/** folder in Git.\n\nI moved some of these component variables to their own scss file, as I did for **grid/Panel.scss**. That’s just so I can maintain smaller files. By using variables, you’ll notice that I styled about 80% of my application, and I don’t have any problems with CSS overrides. You can find Component Sass variables in the API docs for the component you want to style. For example, search for grids and then click on the CSS vars button. There are a lot of variables to choose from. Before Ext JS 6, you had to use trial and error. But, with Ext JS 6 and App Inspector, it’s a piece of cake to figure out which variable you should use.\n\n[![Ext.grid.Panel](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img4.png)](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img4.png)\n\n### Sencha Inspector\n\nSencha Inspector is a new stand-alone tool. With this tool, you’re able to inspect your Ext JS code, including your MVVM patterns. You can inspect applications, running in any browser or device, even apps that are running in Sencha Web Application Manager.\n\nNot only are you able to inspect your JavaScript code, you can inspect all your Ext JS Sass variables. Together with Fashion, the new way of compiling Ext JS Styleheets, this is super powerful.\n\nFor this tutorial, you can try out the awesome theming feature. [Download](http://pages.sencha.com/Inspector-early-access.html) Sencha Inspector Early Access version.\n\nWhen you search for an Ext JS 6 component in the theme panel, it will expose all the available Sass variables. This will save you from manually browsing through all the docs.\n\n[![Theme panel](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img5.png)](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img5.png)\n\nWith Fashion (read more below), you can enter values for all these variables, and you’ll see the result immediately on your screen. This is great for testing when you don’t know which Sass variable you need to use. Because you no longer need to wait for app builds or theme compilations, this really speeds up your theme development time. I work with my IDE and Inspector on one screen, and my application running in a browser on another monitor. As soon as I find the right Sass variable with Sencha Inspector, I copy it over to my theme package.\n\nTake a moment and browse through the **sass/var** code in my package on Github. Within a couple of hours, I finished 80% of my theme.\n\nTo get this up and running, you’ll need to have Inspector installed along with Sencha Cmd.  \nSee the [docs](http://docs.sencha.com/tools/sencha_inspector/installation_setup.html).\n\nWithin Sencha Cmd, you’ll run the built-in webserver (it’s a Jetty web server).\n\nOpen Sencha Cmd and run the following command:\n\nsencha app watch\n\nAfter **sencha app watch** starts the web server (by default it’s on port **1841**), Sencha Cmd polls for changes. Next, open the following URL in your browser:\n\nhttp://localhost:1841/extthemingapp/?**platformTags=fashion:true**\n\nOnce the app is loaded and finishes compiling the theme for the first time, you’ll have to copy and paste the following bookmarklet in your browser console to create a connection between App Inspector and your app.\n\njavascript:!function(a,b){var a=a||3e3,b=b||\"http://localhost\",c=b+\":\"+a+\"/inspector.js\",d=function(a,c){var d=document.createElement(\"script\");d.type=\"text/javascript\",d.src=a,document.addEventListener(\"load\",function(){\"undefined\"!=typeof Ext&&\"undefined\"!=typeof Ext.onReady&&Ext.onReady(function(){if(window.SenchaInspector){var a=document.head.getAttribute(“data-senchainspectorport\");SenchaInspector.init(b+\":\"+a)}})},!0),c?document.head.insertBefore(d,document.head.firstChild):document.body.appendChild(d)};document.head.setAttribute(\"data-senchainspectorport\",a),d(c,!0)}();\n\nIf you’re interested in what’s going on under the hood, App Inspector uses WebSockets. The App inspector script is running on port 3000. That’s how the standalone app can inspect your application code. Now, we’ll look at compiling the themes.\n\n[![Sencha App Inspector](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img6.png)](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img6.png)\n\n### Fashion\n\nI mentioned the word Fashion above. And no, I am not talking about the latest style of clothing. This is a new way of compiling themes that is built into Sencha Cmd.\n\nTo compile a theme in Ext JS, you use Sencha Cmd and run either:\n\n`sencha app build [development]`  \nor  \n`sencha app watch [toolkit]`\n\nThe difference here is that **watch** is polling for changes, and compiles on the fly, while **sencha app build** only compiles manually once.\n\nIn older versions of Ext JS and Sencha Touch, the Sass stylesheets were compiled on top of Ruby (on Windows, you had to install Ruby with administrator rights). Once everything was set up, you could start compiling the themes, but that compilation took a lot of time – especially when you had a large codebase and an advanced theme. You can see why I am so happy about Fashion.\n\nWith Fashion, you can compile your themes on top of JavaScript. It’s so fast that when I change a line of code on my left monitor, it’s already changed on the right monitor before I can turn my head. I don’t need to wait for the compilation (except when starting the server), and I don’t need to refresh my browser window.\n\nThe magic all happens under the hood. Sencha Cmd is running PhantomJS in the background, which is basically a headless browser that you can run from the command line. It will run your application, compile the theme, and put it all into one big JavaScript function. Every change you make – whether it’s in your IDE/editor, in the classic or modern toolkit, or with Sencha Inspector – is handled by JavaScript which changes the styling in the DOM. There are many more advantages. For example you can extend on top of Fashion and create your own styling functions (like Sass functions), and you can debug your stylesheet code. You can see these the big advantages on your development machine while you’re designing your theme.\n\nTo get this up and running, you’ll need to run sencha app watch classic from your command line and run the following arguments in your URL: **?platformTags=fashion:true** and then you are good to go:\n\nhttp://localhost:1841/extthemingapp/?platformTags=fashion:true\n\n### Coming Up\n\nThere are a few more things I did in my spotifext theme to make it look awesome. I wrote some CSS rules to animate the button hovers, used custom fonts, and created my own button and tab panel variants to make it look unique.\n\nIn part 2 of this article, I will explain mixins versus css overrides as well as fonts and icons.\n\nWith this information, you should be able to create good looking themes.\n\n[Sign up](http://pages.sencha.com/App-Theming-Contest-2015.html) for the Sencha Application Theming Contest. The first prize winner gets $2,500!\n\n[![Dark theme](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img7.png)](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img7.png)\n\n[![Dark theme](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img8.png)](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img8.png)\n\n#### Resources:\n\n[Sencha Theming Guide](http://docs.sencha.com/extjs/6.0/core_concepts/theming.html)  \n[My SenchaCon Presentation](https://speakerdeck.com/savelee/advanced-theming-with-sencha-cmd)  \n[Download Sencha App Inspector Early Access](http://pages.sencha.com/Inspector-early-access.html)  \n[Tutorial demo files](https://github.com/savelee/sencha-theming-tutorial/)","source":"_drafts/how-tos/how-to-create-a-dark-ext-js-theme-part-1.md","raw":"---\ntitle: How to Create a Dark Ext JS Theme (part 1)\ntags:\n  - CSS\n  - fashion\n  - Sass\n  - Theming\nurl: 692.html\nid: 692\ncategories:\n  - CSS\n  - Sass\ndate: 2015-08-01 11:18:13\n---\n\n### Introduction\n\nEvery now and then, I demo my [Spotifinder Ext JS app](https://chrome.google.com/webstore/detail/spotifinder-spotify-and-y/eihejbblncmfbklmoadloifongaomcaa). It’s a really cool app that connects to LastFm and Spotify. I created it, to demo Ext JS concepts in my training classes. It also shows off the great theming capabilities in Ext JS.\n\nThis year, I presented advanced theming at SenchaCon and I received lots of questions about how I created the Spotifinder app theme. So I decided to write a tutorial on how to create a really cool, good looking dark theme.\n\nYou can use this tutorial to help you build your theme for the Sencha Application Theming Contest.  \nThe first prize winner gets $2,500!\n\n[Sign up now](http://pages.sencha.com/App-Theming-Contest-2015.html)\n\nThe tutorial files I used for this tutorial can be found [here](https://github.com/savelee/sencha-theming-tutorial). It’s basically just a simple Ext JS app (view) with many components, like a grid, and some other components. You can use any other Ext JS (4, 5 or 6) application as well, but I used this as a reference point, and I used Ext JS 6. What’s great about theming an “all-component” -app, is that you see on the fly how your new theme looks like, without clicking through a real-life app.\n\nAnother prerequisite: Sencha Cmd needs to run on your command line. Test with this command: sencha which. It should output a version number – for Ext JS 6, the Cmd version should be 6.x.\n\n[![Neptune theme](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img1.png)](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img1.png)\n\nExt JS themes use Sass, which stands for syntactically awesome stylesheets, and yes, it’s indeed awesome. Its a more dynamic way to write CSS code. For example, you can use variables and calculations in your stylesheets. A browser doesn’t understand Sass, only CSS. Therefore, these Sass themes need to be compiled to production-ready CSS code, so your browser can understand it. The compilation process of themes in Ext JS apps runs via Sencha Cmd.\n\nExt JS ships with a couple of out-of-the-box themes. You can directly switch to one of these themes and use it, or you can extend one of them and modify it. That’s how you create custom themes. The best theme to modify is Neptune or the new Triton. It provides lots of variables you can use to change the look and feel, and because it’s color background and white text on the front, it’s the ideal theme to use to create good looking dark themes. Alright, enough theory, let’s try it out.\n\n[![Triton theme](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img2.png)](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img2.png)\n\n[![Crisp theme](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img3.png)](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img3.png)\n\nWe’ll start by generating a new theme. We’ll just generate a theme package, so you can reuse it in other projects.\n\nOpen Sencha Cmd and run the following command:\n\nsencha generate theme theme-spotifext\n\nThis will generate a theme package, in my workspace **packages/local** folder. It will contain a **sass/var** folder, which will contain a Sass stylesheet with variables. It will be first in the compile order), and it will also contain a **sass/src** folder, which is the folder that contains Sass stylesheets with mixins and CSS rules. These files will be compiled last, so the pre-defined variables are used. The theme package also contains a **resources** folder – it can be handy to save assets such as images or fonts in this folder. The package will also contain a **package.json** file. It has meta info for your theme package. For example, it sets the type of the package to a “theme”. Also, you can write your contact information and description. There is one thing here that you’ll need to change. To create a theme variant of the new Triton theme, change the extend line to:\n\n    \"extend\": \"theme-triton\",\n\nNote that themes in Ext JS 6 don’t have the `\"ext-\"` prefix anymore.\n\nNow, to see your variant of the Triton theme in the theming demo app, you need to wire it up the correct way.\n\n### Switching Themes\n\nI mentioned “the correct way” on purpose because in traditional web design you would change stylesheets by opening the **index.html** page and swapping the ‹style› tags. It doesn’t work like this in Ext JS applications – you swap your themes via the **app.json** file. What’s happening here is that the Ext JS microloader loads the correct stylesheet for you, via the **bootstrap.css** file, which is included in your **index.html**. The bootstrap.css points to a CSS build version of your Sass theme. This way of serving themes has a huge advantage; all your paths to images and fonts will be all the same across any environment: development, test, or production.\n\nYou can wire up your new Spotifext theme by opening **app.json** of the demo app and changing the `\"theme\"` line to:\n\n\"theme\": \"theme-spotifext\"\n\nThe next step is to build your application with **sencha app build** or **sencha app build development** (which only builds the theme instead of the full app), and you’re good to go.  \nIn case you’re running a universal app and you want to use the Spotifext theme for the classic toolkit, you should wire up the theme to a **build profile**. For example:\n\n\"builds\": {\n   \"myclassicprofile\": {\n      \"toolkit\": \"classic\",\n       \"theme\": \"theme-spotifext\"\n    },\n \n   \"mymodernprofile\": {\n      \"toolkit\": \"modern\",\n      \"theme\": \"theme-cupertino\"\n   }\n },\n\n### Variables\n\nThe first thing you’ll need to do is create some files. You can create the following file structure, in your package folder **(packages/local/theme-spotifext)**:\n\n**  \nsass/var/_config.scss  \nsass/var/Component.scss  \nsass/var/button/Button.scss  \nsass/var/form/field/Base.scss  \nsass/var/grid/Panel.scss  \nsass/var/tab/Panel.scss  \n**\n\nNotice the naming of the files. Everything, except **_config.scss**, maps to the framework components. Component.scss – > Ext.Component, and grid/Panel.scss to Ext.grid.Panel.scss. This mapping is set up in the **app.json** file as a sass namespace. You don’t need to change that.\n\nAn important feature of Sass is the ability to define variables. Do you remember when you used to use plain old CSS? You coded a full stylesheet and by the end of the week someone in your company wanted you to change one of the application colors. It was a huge problem because you had to find and replace all those color values, including all the color codes with lighter or darker contrasts.\n\nWith Sass, this is not a big deal anymore. You just define a variable at the top of your file. Later in your CSS rules, you point to those pre-defined variables. Because a Sass stylesheet is compiled, it makes your stylesheet a lot more dynamic.\n\nTry this out. In the **Component.scss** file, you will include your own color configuration sheet (that’s the **_config.scss** file). Just write the following line at the top of **var/Component.scss**:  \n`@import ‘_config.scss’;`\n\nNow in the **_config.scss** file, define a couple of vars which you can use though the full stylesheet. You can define these variables at the top of the file:\n\n//my own variables\n$dark-bg: #000;\n$dark-bg2: #121314;\n$dark-bg3: #222326;\n$dark-bg4: darken(#88898C, 15%);\n \n$front-color: #adafb2;\n$front-color2: #fff;\n \n$highlight-color: $base-color;\n$highlight-color2: lighten($highlight-color, 20%);\n$highlight-color3: darken($highlight-color, 20%);\n \n$font-family: 'Montserrat', helvetica , arial , verdana , sans-serif;\n$font-size: 12px;\n\nNote the `$highlight-color2` and `3`, these use built-in Sass functions to change the highlight-color to a 20% lighter or darker tone of the color.\n\nWe understand that Sass variables are an extremely important feature of Sass, so Ext JS uses Sass variables as well. There are actually two types of variables: _Global_ variables and _Component_ variables.\n\n#### Global Variables\n\nThe first variable you’ll set is the `$base-color` – it’s a global Ext JS Sass variable. When you change this variable, it will affect everything in the global scope. Many other colors will be calculated based on the `$base-color`.\n\nYou can find all the Global variables in the API docs by searching for **Global_CSS**. Or, even better, you can use Sencha App Inspector – see below for more information.\n\nFor your theme, you can use these global vars and put them in **var/Component.scss**:\n\n$base-color: #639000;\n \n$body-background-color: $dark-bg3;\n$color: $front-color;\n$enable-font-smoothing: true;\n\n#### Component Variables\n\nInside **Component.scss**, I have set a bunch of component variables too. Take a look at my [files](https://github.com/savelee/sencha-theming-tutorial/tree/master/packages/local/theme-spotifext/sass/var) in the **packages/local/theme-spotifext/sass/var/** folder in Git.\n\nI moved some of these component variables to their own scss file, as I did for **grid/Panel.scss**. That’s just so I can maintain smaller files. By using variables, you’ll notice that I styled about 80% of my application, and I don’t have any problems with CSS overrides. You can find Component Sass variables in the API docs for the component you want to style. For example, search for grids and then click on the CSS vars button. There are a lot of variables to choose from. Before Ext JS 6, you had to use trial and error. But, with Ext JS 6 and App Inspector, it’s a piece of cake to figure out which variable you should use.\n\n[![Ext.grid.Panel](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img4.png)](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img4.png)\n\n### Sencha Inspector\n\nSencha Inspector is a new stand-alone tool. With this tool, you’re able to inspect your Ext JS code, including your MVVM patterns. You can inspect applications, running in any browser or device, even apps that are running in Sencha Web Application Manager.\n\nNot only are you able to inspect your JavaScript code, you can inspect all your Ext JS Sass variables. Together with Fashion, the new way of compiling Ext JS Styleheets, this is super powerful.\n\nFor this tutorial, you can try out the awesome theming feature. [Download](http://pages.sencha.com/Inspector-early-access.html) Sencha Inspector Early Access version.\n\nWhen you search for an Ext JS 6 component in the theme panel, it will expose all the available Sass variables. This will save you from manually browsing through all the docs.\n\n[![Theme panel](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img5.png)](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img5.png)\n\nWith Fashion (read more below), you can enter values for all these variables, and you’ll see the result immediately on your screen. This is great for testing when you don’t know which Sass variable you need to use. Because you no longer need to wait for app builds or theme compilations, this really speeds up your theme development time. I work with my IDE and Inspector on one screen, and my application running in a browser on another monitor. As soon as I find the right Sass variable with Sencha Inspector, I copy it over to my theme package.\n\nTake a moment and browse through the **sass/var** code in my package on Github. Within a couple of hours, I finished 80% of my theme.\n\nTo get this up and running, you’ll need to have Inspector installed along with Sencha Cmd.  \nSee the [docs](http://docs.sencha.com/tools/sencha_inspector/installation_setup.html).\n\nWithin Sencha Cmd, you’ll run the built-in webserver (it’s a Jetty web server).\n\nOpen Sencha Cmd and run the following command:\n\nsencha app watch\n\nAfter **sencha app watch** starts the web server (by default it’s on port **1841**), Sencha Cmd polls for changes. Next, open the following URL in your browser:\n\nhttp://localhost:1841/extthemingapp/?**platformTags=fashion:true**\n\nOnce the app is loaded and finishes compiling the theme for the first time, you’ll have to copy and paste the following bookmarklet in your browser console to create a connection between App Inspector and your app.\n\njavascript:!function(a,b){var a=a||3e3,b=b||\"http://localhost\",c=b+\":\"+a+\"/inspector.js\",d=function(a,c){var d=document.createElement(\"script\");d.type=\"text/javascript\",d.src=a,document.addEventListener(\"load\",function(){\"undefined\"!=typeof Ext&&\"undefined\"!=typeof Ext.onReady&&Ext.onReady(function(){if(window.SenchaInspector){var a=document.head.getAttribute(“data-senchainspectorport\");SenchaInspector.init(b+\":\"+a)}})},!0),c?document.head.insertBefore(d,document.head.firstChild):document.body.appendChild(d)};document.head.setAttribute(\"data-senchainspectorport\",a),d(c,!0)}();\n\nIf you’re interested in what’s going on under the hood, App Inspector uses WebSockets. The App inspector script is running on port 3000. That’s how the standalone app can inspect your application code. Now, we’ll look at compiling the themes.\n\n[![Sencha App Inspector](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img6.png)](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img6.png)\n\n### Fashion\n\nI mentioned the word Fashion above. And no, I am not talking about the latest style of clothing. This is a new way of compiling themes that is built into Sencha Cmd.\n\nTo compile a theme in Ext JS, you use Sencha Cmd and run either:\n\n`sencha app build [development]`  \nor  \n`sencha app watch [toolkit]`\n\nThe difference here is that **watch** is polling for changes, and compiles on the fly, while **sencha app build** only compiles manually once.\n\nIn older versions of Ext JS and Sencha Touch, the Sass stylesheets were compiled on top of Ruby (on Windows, you had to install Ruby with administrator rights). Once everything was set up, you could start compiling the themes, but that compilation took a lot of time – especially when you had a large codebase and an advanced theme. You can see why I am so happy about Fashion.\n\nWith Fashion, you can compile your themes on top of JavaScript. It’s so fast that when I change a line of code on my left monitor, it’s already changed on the right monitor before I can turn my head. I don’t need to wait for the compilation (except when starting the server), and I don’t need to refresh my browser window.\n\nThe magic all happens under the hood. Sencha Cmd is running PhantomJS in the background, which is basically a headless browser that you can run from the command line. It will run your application, compile the theme, and put it all into one big JavaScript function. Every change you make – whether it’s in your IDE/editor, in the classic or modern toolkit, or with Sencha Inspector – is handled by JavaScript which changes the styling in the DOM. There are many more advantages. For example you can extend on top of Fashion and create your own styling functions (like Sass functions), and you can debug your stylesheet code. You can see these the big advantages on your development machine while you’re designing your theme.\n\nTo get this up and running, you’ll need to run sencha app watch classic from your command line and run the following arguments in your URL: **?platformTags=fashion:true** and then you are good to go:\n\nhttp://localhost:1841/extthemingapp/?platformTags=fashion:true\n\n### Coming Up\n\nThere are a few more things I did in my spotifext theme to make it look awesome. I wrote some CSS rules to animate the button hovers, used custom fonts, and created my own button and tab panel variants to make it look unique.\n\nIn part 2 of this article, I will explain mixins versus css overrides as well as fonts and icons.\n\nWith this information, you should be able to create good looking themes.\n\n[Sign up](http://pages.sencha.com/App-Theming-Contest-2015.html) for the Sencha Application Theming Contest. The first prize winner gets $2,500!\n\n[![Dark theme](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img7.png)](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img7.png)\n\n[![Dark theme](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img8.png)](//cdn.sencha.com/img/20150716-theming-tutorial-part1-img8.png)\n\n#### Resources:\n\n[Sencha Theming Guide](http://docs.sencha.com/extjs/6.0/core_concepts/theming.html)  \n[My SenchaCon Presentation](https://speakerdeck.com/savelee/advanced-theming-with-sencha-cmd)  \n[Download Sencha App Inspector Early Access](http://pages.sencha.com/Inspector-early-access.html)  \n[Tutorial demo files](https://github.com/savelee/sencha-theming-tutorial/)","slug":"how-tos/how-to-create-a-dark-ext-js-theme-part-1","published":0,"updated":"2018-11-25T11:46:09.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp5jnd0c0142kif5zhiw4gvx","content":"<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3>\n<p>Every now and then, I demo my <a href=\"https://chrome.google.com/webstore/detail/spotifinder-spotify-and-y/eihejbblncmfbklmoadloifongaomcaa\" target=\"_blank\" rel=\"noopener\">Spotifinder\n    Ext JS app</a>. It’s a really cool app that connects to LastFm and Spotify.\n  I created it, to demo Ext JS concepts in my training classes. It also shows\n  off the great theming capabilities in Ext JS.</p>\n<p>This year, I presented advanced theming at SenchaCon and I received lots of\n  questions about how I created the Spotifinder app theme. So I decided to\n  write a tutorial on how to create a really cool, good looking dark theme.</p>\n<p>You can use this tutorial to help you build your theme for the Sencha\n  Application Theming Contest.<br>The first prize winner gets $2,500!</p>\n<p><a href=\"http://pages.sencha.com/App-Theming-Contest-2015.html\" target=\"_blank\" rel=\"noopener\">Sign up now</a></p>\n<p>The tutorial files I used for this tutorial can be found <a href=\"https://github.com/savelee/sencha-theming-tutorial\" target=\"_blank\" rel=\"noopener\">here</a>.\n  It’s basically just a simple Ext JS app (view) with many components, like a\n  grid, and some other components. You can use any other Ext JS (4, 5 or 6)\n  application as well, but I used this as a reference point, and I used Ext JS\n  6. What’s great about theming an “all-component” -app, is that you see on the\n  fly how your new theme looks like, without clicking through a real-life app.</p>\n<p>Another prerequisite: Sencha Cmd needs to run on your command line. Test\n  with this command: sencha which. It should output a version number – for Ext\n  JS 6, the Cmd version should be 6.x.</p>\n<p><a href=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img1.png\"><img src=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img1.png\" alt=\"Neptune theme\"></a></p>\n<p>Ext JS themes use Sass, which stands for syntactically awesome stylesheets,\n  and yes, it’s indeed awesome. Its a more dynamic way to write CSS code. For\n  example, you can use variables and calculations in your stylesheets. A\n  browser doesn’t understand Sass, only CSS. Therefore, these Sass themes need\n  to be compiled to production-ready CSS code, so your browser can understand\n  it. The compilation process of themes in Ext JS apps runs via Sencha Cmd.</p>\n<p>Ext JS ships with a couple of out-of-the-box themes. You can directly switch\n  to one of these themes and use it, or you can extend one of them and modify\n  it. That’s how you create custom themes. The best theme to modify is Neptune\n  or the new Triton. It provides lots of variables you can use to change the\n  look and feel, and because it’s color background and white text on the front,\n  it’s the ideal theme to use to create good looking dark themes. Alright,\n  enough theory, let’s try it out.</p>\n<p><a href=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img2.png\"><img src=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img2.png\" alt=\"Triton theme\"></a></p>\n<p><a href=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img3.png\"><img src=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img3.png\" alt=\"Crisp theme\"></a></p>\n<p>We’ll start by generating a new theme. We’ll just generate a theme package,\n  so you can reuse it in other projects.</p>\n<p>Open Sencha Cmd and run the following command:</p>\n<p>sencha generate theme theme-spotifext</p>\n<p>This will generate a theme package, in my workspace <strong>packages/local</strong>\n  folder. It will contain a <strong>sass/var</strong> folder, which will\n  contain a Sass stylesheet with variables. It will be first in the compile\n  order), and it will also contain a <strong>sass/src</strong> folder, which is\n  the folder that contains Sass stylesheets with mixins and CSS rules. These\n  files will be compiled last, so the pre-defined variables are used. The theme\n  package also contains a <strong>resources</strong> folder – it can be handy\n  to save assets such as images or fonts in this folder. The package will also\n  contain a <strong>package.json</strong> file. It has meta info for your theme\n  package. For example, it sets the type of the package to a “theme”. Also, you\n  can write your contact information and description. There is one thing here\n  that you’ll need to change. To create a theme variant of the new Triton\n  theme, change the extend line to:</p>\n<pre><code>&quot;extend&quot;: &quot;theme-triton&quot;,\n</code></pre>\n<p>Note that themes in Ext JS 6 don’t have the <code>&quot;ext-&quot;</code>\n  prefix anymore.</p>\n<p>Now, to see your variant of the Triton theme in the theming demo app, you\n  need to wire it up the correct way.</p>\n<h3 id=\"Switching-Themes\"><a href=\"#Switching-Themes\" class=\"headerlink\" title=\"Switching Themes\"></a>Switching\n  Themes</h3>\n<p>I mentioned “the correct way” on purpose because in traditional web design\n  you would change stylesheets by opening the <strong>index.html</strong> page\n  and swapping the ‹style› tags. It doesn’t work like this in Ext JS\n  applications – you swap your themes via the <strong>app.json</strong> file.\n  What’s happening here is that the Ext JS microloader loads the correct\n  stylesheet for you, via the <strong>bootstrap.css</strong> file, which is\n  included in your <strong>index.html</strong>. The bootstrap.css points to a\n  CSS build version of your Sass theme. This way of serving themes has a huge\n  advantage; all your paths to images and fonts will be all the same across any\n  environment: development, test, or production.</p>\n<p>You can wire up your new Spotifext theme by opening <strong>app.json</strong>\n  of the demo app and changing the <code>&quot;theme&quot;</code> line to:</p>\n<p>“theme”: “theme-spotifext”</p>\n<p>The next step is to build your application with <strong>sencha app build</strong>\n  or <strong>sencha app build development</strong> (which only builds the theme\n  instead of the full app), and you’re good to go.<br>In case you’re running a\n  universal app and you want to use the Spotifext theme for the classic\n  toolkit, you should wire up the theme to a <strong>build profile</strong>.\n  For example:</p>\n<p>“builds”: { “myclassicprofile”: { “toolkit”: “classic”, “theme”:\n  “theme-spotifext” },</p>\n<p>“mymodernprofile”: { “toolkit”: “modern”, “theme”: “theme-cupertino” } },</p>\n<h3 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h3>\n<p>The first thing you’ll need to do is create some files. You can create the\n  following file structure, in your package folder <strong>(packages/local/theme-spotifext)</strong>:</p>\n<p><strong><br>sass/var/_config.scss<br>sass/var/Component.scss<br>sass/var/button/Button.scss<br>sass/var/form/field/Base.scss<br>sass/var/grid/Panel.scss<br>sass/var/tab/Panel.scss</strong></p>\n<p>Notice the naming of the files. Everything, except <strong>_config.scss</strong>,\n  maps to the framework components. Component.scss – &gt; Ext.Component, and\n  grid/Panel.scss to Ext.grid.Panel.scss. This mapping is set up in the <strong>app.json</strong>\n  file as a sass namespace. You don’t need to change that.</p>\n<p>An important feature of Sass is the ability to define variables. Do you\n  remember when you used to use plain old CSS? You coded a full stylesheet and\n  by the end of the week someone in your company wanted you to change one of\n  the application colors. It was a huge problem because you had to find and\n  replace all those color values, including all the color codes with lighter or\n  darker contrasts.</p>\n<p>With Sass, this is not a big deal anymore. You just define a variable at the\n  top of your file. Later in your CSS rules, you point to those pre-defined\n  variables. Because a Sass stylesheet is compiled, it makes your stylesheet a\n  lot more dynamic.</p>\n<p>Try this out. In the <strong>Component.scss</strong> file, you will include\n  your own color configuration sheet (that’s the <strong>_config.scss</strong>\n  file). Just write the following line at the top of <strong>var/Component.scss</strong>:<br><code>@import\n    ‘_config.scss’;</code></p>\n<p>Now in the <strong>_config.scss</strong> file, define a couple of vars which\n  you can use though the full stylesheet. You can define these variables at the\n  top of the file:</p>\n<p>//my own variables $dark-bg: #000; $dark-bg2: #121314; $dark-bg3: #222326;\n  $dark-bg4: darken(#88898C, 15%);</p>\n<p>$front-color: #adafb2; $front-color2: #fff;</p>\n<p>$highlight-color: $base-color; $highlight-color2: lighten($highlight-color,\n  20%); $highlight-color3: darken($highlight-color, 20%);</p>\n<p>$font-family: ‘Montserrat’, helvetica , arial , verdana , sans-serif;\n  $font-size: 12px;</p>\n<p>Note the <code>$highlight-color2</code> and <code>3</code>, these use\n  built-in Sass functions to change the highlight-color to a 20% lighter or\n  darker tone of the color.</p>\n<p>We understand that Sass variables are an extremely important feature of\n  Sass, so Ext JS uses Sass variables as well. There are actually two types of\n  variables: <em>Global</em> variables and <em>Component</em> variables.</p>\n<h4 id=\"Global-Variables\"><a href=\"#Global-Variables\" class=\"headerlink\" title=\"Global Variables\"></a>Global\n  Variables</h4>\n<p>The first variable you’ll set is the <code>$base-color</code> – it’s a\n  global Ext JS Sass variable. When you change this variable, it will affect\n  everything in the global scope. Many other colors will be calculated based on\n  the <code>$base-color</code>.</p>\n<p>You can find all the Global variables in the API docs by searching for\n  <strong>Global_CSS</strong>. Or, even better, you can use Sencha App\n  Inspector – see below for more information.</p>\n<p>For your theme, you can use these global vars and put them in <strong>var/Component.scss</strong>:</p>\n<p>$base-color: #639000;</p>\n<p>$body-background-color: $dark-bg3; $color: $front-color;\n  $enable-font-smoothing: true;</p>\n<h4 id=\"Component-Variables\"><a href=\"#Component-Variables\" class=\"headerlink\" title=\"Component Variables\"></a>Component\n  Variables</h4>\n<p>Inside <strong>Component.scss</strong>, I have set a bunch of component\n  variables too. Take a look at my <a href=\"https://github.com/savelee/sencha-theming-tutorial/tree/master/packages/local/theme-spotifext/sass/var\" target=\"_blank\" rel=\"noopener\">files</a>\n  in the <strong>packages/local/theme-spotifext/sass/var/</strong> folder in\n  Git.</p>\n<p>I moved some of these component variables to their own scss file, as I did\n  for <strong>grid/Panel.scss</strong>. That’s just so I can maintain smaller\n  files. By using variables, you’ll notice that I styled about 80% of my\n  application, and I don’t have any problems with CSS overrides. You can find\n  Component Sass variables in the API docs for the component you want to style.\n  For example, search for grids and then click on the CSS vars button. There\n  are a lot of variables to choose from. Before Ext JS 6, you had to use trial\n  and error. But, with Ext JS 6 and App Inspector, it’s a piece of cake to\n  figure out which variable you should use.</p>\n<p><a href=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img4.png\"><img src=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img4.png\" alt=\"Ext.grid.Panel\"></a></p>\n<h3 id=\"Sencha-Inspector\"><a href=\"#Sencha-Inspector\" class=\"headerlink\" title=\"Sencha Inspector\"></a>Sencha\n  Inspector</h3>\n<p>Sencha Inspector is a new stand-alone tool. With this tool, you’re able to\n  inspect your Ext JS code, including your MVVM patterns. You can inspect\n  applications, running in any browser or device, even apps that are running in\n  Sencha Web Application Manager.</p>\n<p>Not only are you able to inspect your JavaScript code, you can inspect all\n  your Ext JS Sass variables. Together with Fashion, the new way of compiling\n  Ext JS Styleheets, this is super powerful.</p>\n<p>For this tutorial, you can try out the awesome theming feature. <a href=\"http://pages.sencha.com/Inspector-early-access.html\" target=\"_blank\" rel=\"noopener\">Download</a>\n  Sencha Inspector Early Access version.</p>\n<p>When you search for an Ext JS 6 component in the theme panel, it will expose\n  all the available Sass variables. This will save you from manually browsing\n  through all the docs.</p>\n<p><a href=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img5.png\"><img src=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img5.png\" alt=\"Theme panel\"></a></p>\n<p>With Fashion (read more below), you can enter values for all these\n  variables, and you’ll see the result immediately on your screen. This is\n  great for testing when you don’t know which Sass variable you need to use.\n  Because you no longer need to wait for app builds or theme compilations, this\n  really speeds up your theme development time. I work with my IDE and\n  Inspector on one screen, and my application running in a browser on another\n  monitor. As soon as I find the right Sass variable with Sencha Inspector, I\n  copy it over to my theme package.</p>\n<p>Take a moment and browse through the <strong>sass/var</strong> code in my\n  package on Github. Within a couple of hours, I finished 80% of my theme.</p>\n<p>To get this up and running, you’ll need to have Inspector installed along\n  with Sencha Cmd.<br>See the <a href=\"http://docs.sencha.com/tools/sencha_inspector/installation_setup.html\" target=\"_blank\" rel=\"noopener\">docs</a>.</p>\n<p>Within Sencha Cmd, you’ll run the built-in webserver (it’s a Jetty web\n  server).</p>\n<p>Open Sencha Cmd and run the following command:</p>\n<p>sencha app watch</p>\n<p>After <strong>sencha app watch</strong> starts the web server (by default\n  it’s on port <strong>1841</strong>), Sencha Cmd polls for changes. Next, open\n  the following URL in your browser:</p>\n<p><a href=\"http://localhost:1841/extthemingapp/?**platformTags=fashion:true*\" target=\"_blank\" rel=\"noopener\">http://localhost:1841/extthemingapp/?**platformTags=fashion:true*</a>*</p>\n<p>Once the app is loaded and finishes compiling the theme for the first time,\n  you’ll have to copy and paste the following bookmarklet in your browser\n  console to create a connection between App Inspector and your app.</p>\n<p>javascript:!function(a,b){var a=a||3e3,b=b||”<a href=\"http://localhost&quot;,c=b+&quot;:&quot;+a+&quot;/inspector.js&quot;,d=function(a,c){var\" target=\"_blank\" rel=\"noopener\">http://localhost&quot;,c=b+&quot;:&quot;+a+&quot;/inspector.js&quot;,d=function(a,c){var</a>\n  d=document.createElement(“script”);d.type=”text/javascript”,d.src=a,document.addEventListener(“load”,function(){“undefined”!=typeof\n  Ext&amp;&amp;”undefined”!=typeof\n  Ext.onReady&amp;&amp;Ext.onReady(function(){if(window.SenchaInspector){var\n  a=document.head.getAttribute(“data-senchainspectorport”);SenchaInspector.init(b+”:”+a)}})},!0),c?document.head.insertBefore(d,document.head.firstChild):document.body.appendChild(d)};document.head.setAttribute(“data-senchainspectorport”,a),d(c,!0)}();</p>\n<p>If you’re interested in what’s going on under the hood, App Inspector uses\n  WebSockets. The App inspector script is running on port 3000. That’s how the\n  standalone app can inspect your application code. Now, we’ll look at\n  compiling the themes.</p>\n<p><a href=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img6.png\"><img src=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img6.png\" alt=\"Sencha App Inspector\"></a></p>\n<h3 id=\"Fashion\"><a href=\"#Fashion\" class=\"headerlink\" title=\"Fashion\"></a>Fashion</h3>\n<p>I mentioned the word Fashion above. And no, I am not talking about the\n  latest style of clothing. This is a new way of compiling themes that is built\n  into Sencha Cmd.</p>\n<p>To compile a theme in Ext JS, you use Sencha Cmd and run either:</p>\n<p><code>sencha app build [development]</code><br>or<br><code>sencha app watch\n    [toolkit]</code></p>\n<p>The difference here is that <strong>watch</strong> is polling for changes,\n  and compiles on the fly, while <strong>sencha app build</strong> only\n  compiles manually once.</p>\n<p>In older versions of Ext JS and Sencha Touch, the Sass stylesheets were\n  compiled on top of Ruby (on Windows, you had to install Ruby with\n  administrator rights). Once everything was set up, you could start compiling\n  the themes, but that compilation took a lot of time – especially when you had\n  a large codebase and an advanced theme. You can see why I am so happy about\n  Fashion.</p>\n<p>With Fashion, you can compile your themes on top of JavaScript. It’s so fast\n  that when I change a line of code on my left monitor, it’s already changed on\n  the right monitor before I can turn my head. I don’t need to wait for the\n  compilation (except when starting the server), and I don’t need to refresh my\n  browser window.</p>\n<p>The magic all happens under the hood. Sencha Cmd is running PhantomJS in the\n  background, which is basically a headless browser that you can run from the\n  command line. It will run your application, compile the theme, and put it all\n  into one big JavaScript function. Every change you make – whether it’s in\n  your IDE/editor, in the classic or modern toolkit, or with Sencha Inspector –\n  is handled by JavaScript which changes the styling in the DOM. There are many\n  more advantages. For example you can extend on top of Fashion and create your\n  own styling functions (like Sass functions), and you can debug your\n  stylesheet code. You can see these the big advantages on your development\n  machine while you’re designing your theme.</p>\n<p>To get this up and running, you’ll need to run sencha app watch classic from\n  your command line and run the following arguments in your URL: <strong>?platformTags=fashion:true</strong>\n  and then you are good to go:</p>\n<p><a href=\"http://localhost:1841/extthemingapp/?platformTags=fashion:true\" target=\"_blank\" rel=\"noopener\">http://localhost:1841/extthemingapp/?platformTags=fashion:true</a></p>\n<h3 id=\"Coming-Up\"><a href=\"#Coming-Up\" class=\"headerlink\" title=\"Coming Up\"></a>Coming\n  Up</h3>\n<p>There are a few more things I did in my spotifext theme to make it look\n  awesome. I wrote some CSS rules to animate the button hovers, used custom\n  fonts, and created my own button and tab panel variants to make it look\n  unique.</p>\n<p>In part 2 of this article, I will explain mixins versus css overrides as\n  well as fonts and icons.</p>\n<p>With this information, you should be able to create good looking themes.</p>\n<p><a href=\"http://pages.sencha.com/App-Theming-Contest-2015.html\" target=\"_blank\" rel=\"noopener\">Sign up</a>\n  for the Sencha Application Theming Contest. The first prize winner gets\n  $2,500!</p>\n<p><a href=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img7.png\"><img src=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img7.png\" alt=\"Dark theme\"></a></p>\n<p><a href=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img8.png\"><img src=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img8.png\" alt=\"Dark theme\"></a></p>\n<h4 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources:\"></a>Resources:</h4>\n<p><a href=\"http://docs.sencha.com/extjs/6.0/core_concepts/theming.html\" target=\"_blank\" rel=\"noopener\">Sencha\n    Theming Guide</a><br><a href=\"https://speakerdeck.com/savelee/advanced-theming-with-sencha-cmd\" target=\"_blank\" rel=\"noopener\">My\n    SenchaCon Presentation</a><br><a href=\"http://pages.sencha.com/Inspector-early-access.html\" target=\"_blank\" rel=\"noopener\">Download\n    Sencha App Inspector Early Access</a><br><a href=\"https://github.com/savelee/sencha-theming-tutorial/\" target=\"_blank\" rel=\"noopener\">Tutorial\n    demo files</a></p>\n","site":{"data":{"menu":{"links":{"Home":"/","Contact Us":"contact-us/"}}}},"excerpt":"","more":"<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3>\n<p>Every now and then, I demo my <a href=\"https://chrome.google.com/webstore/detail/spotifinder-spotify-and-y/eihejbblncmfbklmoadloifongaomcaa\" target=\"_blank\" rel=\"noopener\">Spotifinder\n    Ext JS app</a>. It’s a really cool app that connects to LastFm and Spotify.\n  I created it, to demo Ext JS concepts in my training classes. It also shows\n  off the great theming capabilities in Ext JS.</p>\n<p>This year, I presented advanced theming at SenchaCon and I received lots of\n  questions about how I created the Spotifinder app theme. So I decided to\n  write a tutorial on how to create a really cool, good looking dark theme.</p>\n<p>You can use this tutorial to help you build your theme for the Sencha\n  Application Theming Contest.<br>The first prize winner gets $2,500!</p>\n<p><a href=\"http://pages.sencha.com/App-Theming-Contest-2015.html\" target=\"_blank\" rel=\"noopener\">Sign up now</a></p>\n<p>The tutorial files I used for this tutorial can be found <a href=\"https://github.com/savelee/sencha-theming-tutorial\" target=\"_blank\" rel=\"noopener\">here</a>.\n  It’s basically just a simple Ext JS app (view) with many components, like a\n  grid, and some other components. You can use any other Ext JS (4, 5 or 6)\n  application as well, but I used this as a reference point, and I used Ext JS\n  6. What’s great about theming an “all-component” -app, is that you see on the\n  fly how your new theme looks like, without clicking through a real-life app.</p>\n<p>Another prerequisite: Sencha Cmd needs to run on your command line. Test\n  with this command: sencha which. It should output a version number – for Ext\n  JS 6, the Cmd version should be 6.x.</p>\n<p><a href=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img1.png\"><img src=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img1.png\" alt=\"Neptune theme\"></a></p>\n<p>Ext JS themes use Sass, which stands for syntactically awesome stylesheets,\n  and yes, it’s indeed awesome. Its a more dynamic way to write CSS code. For\n  example, you can use variables and calculations in your stylesheets. A\n  browser doesn’t understand Sass, only CSS. Therefore, these Sass themes need\n  to be compiled to production-ready CSS code, so your browser can understand\n  it. The compilation process of themes in Ext JS apps runs via Sencha Cmd.</p>\n<p>Ext JS ships with a couple of out-of-the-box themes. You can directly switch\n  to one of these themes and use it, or you can extend one of them and modify\n  it. That’s how you create custom themes. The best theme to modify is Neptune\n  or the new Triton. It provides lots of variables you can use to change the\n  look and feel, and because it’s color background and white text on the front,\n  it’s the ideal theme to use to create good looking dark themes. Alright,\n  enough theory, let’s try it out.</p>\n<p><a href=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img2.png\"><img src=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img2.png\" alt=\"Triton theme\"></a></p>\n<p><a href=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img3.png\"><img src=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img3.png\" alt=\"Crisp theme\"></a></p>\n<p>We’ll start by generating a new theme. We’ll just generate a theme package,\n  so you can reuse it in other projects.</p>\n<p>Open Sencha Cmd and run the following command:</p>\n<p>sencha generate theme theme-spotifext</p>\n<p>This will generate a theme package, in my workspace <strong>packages/local</strong>\n  folder. It will contain a <strong>sass/var</strong> folder, which will\n  contain a Sass stylesheet with variables. It will be first in the compile\n  order), and it will also contain a <strong>sass/src</strong> folder, which is\n  the folder that contains Sass stylesheets with mixins and CSS rules. These\n  files will be compiled last, so the pre-defined variables are used. The theme\n  package also contains a <strong>resources</strong> folder – it can be handy\n  to save assets such as images or fonts in this folder. The package will also\n  contain a <strong>package.json</strong> file. It has meta info for your theme\n  package. For example, it sets the type of the package to a “theme”. Also, you\n  can write your contact information and description. There is one thing here\n  that you’ll need to change. To create a theme variant of the new Triton\n  theme, change the extend line to:</p>\n<pre><code>&quot;extend&quot;: &quot;theme-triton&quot;,\n</code></pre>\n<p>Note that themes in Ext JS 6 don’t have the <code>&quot;ext-&quot;</code>\n  prefix anymore.</p>\n<p>Now, to see your variant of the Triton theme in the theming demo app, you\n  need to wire it up the correct way.</p>\n<h3 id=\"Switching-Themes\"><a href=\"#Switching-Themes\" class=\"headerlink\" title=\"Switching Themes\"></a>Switching\n  Themes</h3>\n<p>I mentioned “the correct way” on purpose because in traditional web design\n  you would change stylesheets by opening the <strong>index.html</strong> page\n  and swapping the ‹style› tags. It doesn’t work like this in Ext JS\n  applications – you swap your themes via the <strong>app.json</strong> file.\n  What’s happening here is that the Ext JS microloader loads the correct\n  stylesheet for you, via the <strong>bootstrap.css</strong> file, which is\n  included in your <strong>index.html</strong>. The bootstrap.css points to a\n  CSS build version of your Sass theme. This way of serving themes has a huge\n  advantage; all your paths to images and fonts will be all the same across any\n  environment: development, test, or production.</p>\n<p>You can wire up your new Spotifext theme by opening <strong>app.json</strong>\n  of the demo app and changing the <code>&quot;theme&quot;</code> line to:</p>\n<p>“theme”: “theme-spotifext”</p>\n<p>The next step is to build your application with <strong>sencha app build</strong>\n  or <strong>sencha app build development</strong> (which only builds the theme\n  instead of the full app), and you’re good to go.<br>In case you’re running a\n  universal app and you want to use the Spotifext theme for the classic\n  toolkit, you should wire up the theme to a <strong>build profile</strong>.\n  For example:</p>\n<p>“builds”: { “myclassicprofile”: { “toolkit”: “classic”, “theme”:\n  “theme-spotifext” },</p>\n<p>“mymodernprofile”: { “toolkit”: “modern”, “theme”: “theme-cupertino” } },</p>\n<h3 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h3>\n<p>The first thing you’ll need to do is create some files. You can create the\n  following file structure, in your package folder <strong>(packages/local/theme-spotifext)</strong>:</p>\n<p><strong><br>sass/var/_config.scss<br>sass/var/Component.scss<br>sass/var/button/Button.scss<br>sass/var/form/field/Base.scss<br>sass/var/grid/Panel.scss<br>sass/var/tab/Panel.scss</strong></p>\n<p>Notice the naming of the files. Everything, except <strong>_config.scss</strong>,\n  maps to the framework components. Component.scss – &gt; Ext.Component, and\n  grid/Panel.scss to Ext.grid.Panel.scss. This mapping is set up in the <strong>app.json</strong>\n  file as a sass namespace. You don’t need to change that.</p>\n<p>An important feature of Sass is the ability to define variables. Do you\n  remember when you used to use plain old CSS? You coded a full stylesheet and\n  by the end of the week someone in your company wanted you to change one of\n  the application colors. It was a huge problem because you had to find and\n  replace all those color values, including all the color codes with lighter or\n  darker contrasts.</p>\n<p>With Sass, this is not a big deal anymore. You just define a variable at the\n  top of your file. Later in your CSS rules, you point to those pre-defined\n  variables. Because a Sass stylesheet is compiled, it makes your stylesheet a\n  lot more dynamic.</p>\n<p>Try this out. In the <strong>Component.scss</strong> file, you will include\n  your own color configuration sheet (that’s the <strong>_config.scss</strong>\n  file). Just write the following line at the top of <strong>var/Component.scss</strong>:<br><code>@import\n    ‘_config.scss’;</code></p>\n<p>Now in the <strong>_config.scss</strong> file, define a couple of vars which\n  you can use though the full stylesheet. You can define these variables at the\n  top of the file:</p>\n<p>//my own variables $dark-bg: #000; $dark-bg2: #121314; $dark-bg3: #222326;\n  $dark-bg4: darken(#88898C, 15%);</p>\n<p>$front-color: #adafb2; $front-color2: #fff;</p>\n<p>$highlight-color: $base-color; $highlight-color2: lighten($highlight-color,\n  20%); $highlight-color3: darken($highlight-color, 20%);</p>\n<p>$font-family: ‘Montserrat’, helvetica , arial , verdana , sans-serif;\n  $font-size: 12px;</p>\n<p>Note the <code>$highlight-color2</code> and <code>3</code>, these use\n  built-in Sass functions to change the highlight-color to a 20% lighter or\n  darker tone of the color.</p>\n<p>We understand that Sass variables are an extremely important feature of\n  Sass, so Ext JS uses Sass variables as well. There are actually two types of\n  variables: <em>Global</em> variables and <em>Component</em> variables.</p>\n<h4 id=\"Global-Variables\"><a href=\"#Global-Variables\" class=\"headerlink\" title=\"Global Variables\"></a>Global\n  Variables</h4>\n<p>The first variable you’ll set is the <code>$base-color</code> – it’s a\n  global Ext JS Sass variable. When you change this variable, it will affect\n  everything in the global scope. Many other colors will be calculated based on\n  the <code>$base-color</code>.</p>\n<p>You can find all the Global variables in the API docs by searching for\n  <strong>Global_CSS</strong>. Or, even better, you can use Sencha App\n  Inspector – see below for more information.</p>\n<p>For your theme, you can use these global vars and put them in <strong>var/Component.scss</strong>:</p>\n<p>$base-color: #639000;</p>\n<p>$body-background-color: $dark-bg3; $color: $front-color;\n  $enable-font-smoothing: true;</p>\n<h4 id=\"Component-Variables\"><a href=\"#Component-Variables\" class=\"headerlink\" title=\"Component Variables\"></a>Component\n  Variables</h4>\n<p>Inside <strong>Component.scss</strong>, I have set a bunch of component\n  variables too. Take a look at my <a href=\"https://github.com/savelee/sencha-theming-tutorial/tree/master/packages/local/theme-spotifext/sass/var\" target=\"_blank\" rel=\"noopener\">files</a>\n  in the <strong>packages/local/theme-spotifext/sass/var/</strong> folder in\n  Git.</p>\n<p>I moved some of these component variables to their own scss file, as I did\n  for <strong>grid/Panel.scss</strong>. That’s just so I can maintain smaller\n  files. By using variables, you’ll notice that I styled about 80% of my\n  application, and I don’t have any problems with CSS overrides. You can find\n  Component Sass variables in the API docs for the component you want to style.\n  For example, search for grids and then click on the CSS vars button. There\n  are a lot of variables to choose from. Before Ext JS 6, you had to use trial\n  and error. But, with Ext JS 6 and App Inspector, it’s a piece of cake to\n  figure out which variable you should use.</p>\n<p><a href=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img4.png\"><img src=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img4.png\" alt=\"Ext.grid.Panel\"></a></p>\n<h3 id=\"Sencha-Inspector\"><a href=\"#Sencha-Inspector\" class=\"headerlink\" title=\"Sencha Inspector\"></a>Sencha\n  Inspector</h3>\n<p>Sencha Inspector is a new stand-alone tool. With this tool, you’re able to\n  inspect your Ext JS code, including your MVVM patterns. You can inspect\n  applications, running in any browser or device, even apps that are running in\n  Sencha Web Application Manager.</p>\n<p>Not only are you able to inspect your JavaScript code, you can inspect all\n  your Ext JS Sass variables. Together with Fashion, the new way of compiling\n  Ext JS Styleheets, this is super powerful.</p>\n<p>For this tutorial, you can try out the awesome theming feature. <a href=\"http://pages.sencha.com/Inspector-early-access.html\" target=\"_blank\" rel=\"noopener\">Download</a>\n  Sencha Inspector Early Access version.</p>\n<p>When you search for an Ext JS 6 component in the theme panel, it will expose\n  all the available Sass variables. This will save you from manually browsing\n  through all the docs.</p>\n<p><a href=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img5.png\"><img src=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img5.png\" alt=\"Theme panel\"></a></p>\n<p>With Fashion (read more below), you can enter values for all these\n  variables, and you’ll see the result immediately on your screen. This is\n  great for testing when you don’t know which Sass variable you need to use.\n  Because you no longer need to wait for app builds or theme compilations, this\n  really speeds up your theme development time. I work with my IDE and\n  Inspector on one screen, and my application running in a browser on another\n  monitor. As soon as I find the right Sass variable with Sencha Inspector, I\n  copy it over to my theme package.</p>\n<p>Take a moment and browse through the <strong>sass/var</strong> code in my\n  package on Github. Within a couple of hours, I finished 80% of my theme.</p>\n<p>To get this up and running, you’ll need to have Inspector installed along\n  with Sencha Cmd.<br>See the <a href=\"http://docs.sencha.com/tools/sencha_inspector/installation_setup.html\" target=\"_blank\" rel=\"noopener\">docs</a>.</p>\n<p>Within Sencha Cmd, you’ll run the built-in webserver (it’s a Jetty web\n  server).</p>\n<p>Open Sencha Cmd and run the following command:</p>\n<p>sencha app watch</p>\n<p>After <strong>sencha app watch</strong> starts the web server (by default\n  it’s on port <strong>1841</strong>), Sencha Cmd polls for changes. Next, open\n  the following URL in your browser:</p>\n<p><a href=\"http://localhost:1841/extthemingapp/?**platformTags=fashion:true*\" target=\"_blank\" rel=\"noopener\">http://localhost:1841/extthemingapp/?**platformTags=fashion:true*</a>*</p>\n<p>Once the app is loaded and finishes compiling the theme for the first time,\n  you’ll have to copy and paste the following bookmarklet in your browser\n  console to create a connection between App Inspector and your app.</p>\n<p>javascript:!function(a,b){var a=a||3e3,b=b||”<a href=\"http://localhost&quot;,c=b+&quot;:&quot;+a+&quot;/inspector.js&quot;,d=function(a,c){var\" target=\"_blank\" rel=\"noopener\">http://localhost&quot;,c=b+&quot;:&quot;+a+&quot;/inspector.js&quot;,d=function(a,c){var</a>\n  d=document.createElement(“script”);d.type=”text/javascript”,d.src=a,document.addEventListener(“load”,function(){“undefined”!=typeof\n  Ext&amp;&amp;”undefined”!=typeof\n  Ext.onReady&amp;&amp;Ext.onReady(function(){if(window.SenchaInspector){var\n  a=document.head.getAttribute(“data-senchainspectorport”);SenchaInspector.init(b+”:”+a)}})},!0),c?document.head.insertBefore(d,document.head.firstChild):document.body.appendChild(d)};document.head.setAttribute(“data-senchainspectorport”,a),d(c,!0)}();</p>\n<p>If you’re interested in what’s going on under the hood, App Inspector uses\n  WebSockets. The App inspector script is running on port 3000. That’s how the\n  standalone app can inspect your application code. Now, we’ll look at\n  compiling the themes.</p>\n<p><a href=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img6.png\"><img src=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img6.png\" alt=\"Sencha App Inspector\"></a></p>\n<h3 id=\"Fashion\"><a href=\"#Fashion\" class=\"headerlink\" title=\"Fashion\"></a>Fashion</h3>\n<p>I mentioned the word Fashion above. And no, I am not talking about the\n  latest style of clothing. This is a new way of compiling themes that is built\n  into Sencha Cmd.</p>\n<p>To compile a theme in Ext JS, you use Sencha Cmd and run either:</p>\n<p><code>sencha app build [development]</code><br>or<br><code>sencha app watch\n    [toolkit]</code></p>\n<p>The difference here is that <strong>watch</strong> is polling for changes,\n  and compiles on the fly, while <strong>sencha app build</strong> only\n  compiles manually once.</p>\n<p>In older versions of Ext JS and Sencha Touch, the Sass stylesheets were\n  compiled on top of Ruby (on Windows, you had to install Ruby with\n  administrator rights). Once everything was set up, you could start compiling\n  the themes, but that compilation took a lot of time – especially when you had\n  a large codebase and an advanced theme. You can see why I am so happy about\n  Fashion.</p>\n<p>With Fashion, you can compile your themes on top of JavaScript. It’s so fast\n  that when I change a line of code on my left monitor, it’s already changed on\n  the right monitor before I can turn my head. I don’t need to wait for the\n  compilation (except when starting the server), and I don’t need to refresh my\n  browser window.</p>\n<p>The magic all happens under the hood. Sencha Cmd is running PhantomJS in the\n  background, which is basically a headless browser that you can run from the\n  command line. It will run your application, compile the theme, and put it all\n  into one big JavaScript function. Every change you make – whether it’s in\n  your IDE/editor, in the classic or modern toolkit, or with Sencha Inspector –\n  is handled by JavaScript which changes the styling in the DOM. There are many\n  more advantages. For example you can extend on top of Fashion and create your\n  own styling functions (like Sass functions), and you can debug your\n  stylesheet code. You can see these the big advantages on your development\n  machine while you’re designing your theme.</p>\n<p>To get this up and running, you’ll need to run sencha app watch classic from\n  your command line and run the following arguments in your URL: <strong>?platformTags=fashion:true</strong>\n  and then you are good to go:</p>\n<p><a href=\"http://localhost:1841/extthemingapp/?platformTags=fashion:true\" target=\"_blank\" rel=\"noopener\">http://localhost:1841/extthemingapp/?platformTags=fashion:true</a></p>\n<h3 id=\"Coming-Up\"><a href=\"#Coming-Up\" class=\"headerlink\" title=\"Coming Up\"></a>Coming\n  Up</h3>\n<p>There are a few more things I did in my spotifext theme to make it look\n  awesome. I wrote some CSS rules to animate the button hovers, used custom\n  fonts, and created my own button and tab panel variants to make it look\n  unique.</p>\n<p>In part 2 of this article, I will explain mixins versus css overrides as\n  well as fonts and icons.</p>\n<p>With this information, you should be able to create good looking themes.</p>\n<p><a href=\"http://pages.sencha.com/App-Theming-Contest-2015.html\" target=\"_blank\" rel=\"noopener\">Sign up</a>\n  for the Sencha Application Theming Contest. The first prize winner gets\n  $2,500!</p>\n<p><a href=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img7.png\"><img src=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img7.png\" alt=\"Dark theme\"></a></p>\n<p><a href=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img8.png\"><img src=\"//cdn.sencha.com/img/20150716-theming-tutorial-part1-img8.png\" alt=\"Dark theme\"></a></p>\n<h4 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources:\"></a>Resources:</h4>\n<p><a href=\"http://docs.sencha.com/extjs/6.0/core_concepts/theming.html\" target=\"_blank\" rel=\"noopener\">Sencha\n    Theming Guide</a><br><a href=\"https://speakerdeck.com/savelee/advanced-theming-with-sencha-cmd\" target=\"_blank\" rel=\"noopener\">My\n    SenchaCon Presentation</a><br><a href=\"http://pages.sencha.com/Inspector-early-access.html\" target=\"_blank\" rel=\"noopener\">Download\n    Sencha App Inspector Early Access</a><br><a href=\"https://github.com/savelee/sencha-theming-tutorial/\" target=\"_blank\" rel=\"noopener\">Tutorial\n    demo files</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjp5jncnd0001kif5ofdk6wme","category_id":"cjp5jncnn0005kif5g3xijci4","_id":"cjp5jncnx000fkif50j32wc3e"},{"post_id":"cjp5jncnh0003kif54x49ighg","category_id":"cjp5jncnu000bkif5v8774kl8","_id":"cjp5jnco0000mkif5j3klltma"},{"post_id":"cjp5jncny000ikif5eorpn6hm","category_id":"cjp5jncnx000gkif58r8so7mz","_id":"cjp5jnco3000rkif5qqw67gsr"},{"post_id":"cjp5jncnq0007kif52i7fo4x9","category_id":"cjp5jncnx000gkif58r8so7mz","_id":"cjp5jnco4000vkif5j5xczl82"},{"post_id":"cjp5jncns0009kif53u43b7ca","category_id":"cjp5jnco0000nkif5y83uh5mo","_id":"cjp5jnco7000ykif54sc09bgd"},{"post_id":"cjp5jnco2000qkif5yr8ps9e4","category_id":"cjp5jncnx000gkif58r8so7mz","_id":"cjp5jnco80011kif51sonwq5x"},{"post_id":"cjp5jnco3000ukif503jyco9p","category_id":"cjp5jncnu000bkif5v8774kl8","_id":"cjp5jnco90013kif5eoq1c3cg"},{"post_id":"cjp5jncnt000akif5occua2mh","category_id":"cjp5jncnu000bkif5v8774kl8","_id":"cjp5jncoa0017kif5jrpjnr8z"},{"post_id":"cjp5jnco6000wkif5xr77um9e","category_id":"cjp5jncnx000gkif58r8so7mz","_id":"cjp5jncob001akif5ppi3w9gv"},{"post_id":"cjp5jncnv000dkif5olvddd56","category_id":"cjp5jnco7000xkif5mbb2wnox","_id":"cjp5jncoc001fkif5948y9vu6"},{"post_id":"cjp5jncnw000ekif5gu7m8bku","category_id":"cjp5jnco90015kif5jsiascod","_id":"cjp5jncoe001kkif5b7qjatoj"},{"post_id":"cjp5jncnz000kkif5f4583q3h","category_id":"cjp5jncoc001dkif5mah64226","_id":"cjp5jncog001qkif5xnjafww9"},{"post_id":"cjp5jnco1000pkif5ummarbqn","category_id":"cjp5jnco7000xkif5mbb2wnox","_id":"cjp5jncoi001ukif545e9fbni"},{"post_id":"cjp5jncog001okif5l7b8uz8z","category_id":"cjp5jnco7000xkif5mbb2wnox","_id":"cjp5jncoj001ykif5972qgw2w"},{"post_id":"cjp5jnco7000zkif51yj90zdm","category_id":"cjp5jncog001pkif5zkpeijar","_id":"cjp5jncok0020kif5vrso5gjq"},{"post_id":"cjp5jnco80012kif5yqm4mexe","category_id":"cjp5jncoi001vkif51219kqak","_id":"cjp5jncon0026kif5apyllhxr"},{"post_id":"cjp5jncok0021kif5asd2mb1j","category_id":"cjp5jnco90015kif5jsiascod","_id":"cjp5jncoo002akif550byxmyt"},{"post_id":"cjp5jnco90014kif5m2fkgbci","category_id":"cjp5jncol0022kif5hv8esfgh","_id":"cjp5jncop002ekif560952z9t"},{"post_id":"cjp5jncom0025kif5ijw80rge","category_id":"cjp5jncol0022kif5hv8esfgh","_id":"cjp5jncor002hkif5eqy33cmf"},{"post_id":"cjp5jncon0029kif5qp2np8cg","category_id":"cjp5jncol0022kif5hv8esfgh","_id":"cjp5jncos002lkif5zdsqyqhe"},{"post_id":"cjp5jncoa0018kif5a47b9xxf","category_id":"cjp5jncol0022kif5hv8esfgh","_id":"cjp5jncot002pkif5y1a7c6mr"},{"post_id":"cjp5jncoo002ckif5poco7wqa","category_id":"cjp5jncol0022kif5hv8esfgh","_id":"cjp5jncou002skif57ejgs21w"},{"post_id":"cjp5jncoq002gkif5nqlbfxvu","category_id":"cjp5jncol0022kif5hv8esfgh","_id":"cjp5jncoy002xkif5mmivnl1h"},{"post_id":"cjp5jncob001bkif5d71ze5yc","category_id":"cjp5jncoc001dkif5mah64226","_id":"cjp5jncoz0030kif57ut752ig"},{"post_id":"cjp5jncor002jkif5v9us6b4j","category_id":"cjp5jncol0022kif5hv8esfgh","_id":"cjp5jncp00034kif5vxua6ha0"},{"post_id":"cjp5jncos002nkif5jpkmms5x","category_id":"cjp5jncol0022kif5hv8esfgh","_id":"cjp5jncp10038kif5elbtob42"},{"post_id":"cjp5jncoc001gkif5mz7emql4","category_id":"cjp5jncos002kkif5md2xowv2","_id":"cjp5jncp2003akif5aqj2pehh"},{"post_id":"cjp5jncou002rkif5n9coyvrh","category_id":"cjp5jncol0022kif5hv8esfgh","_id":"cjp5jncp2003ckif5j7runol0"},{"post_id":"cjp5jncov002vkif5jztv1dxo","category_id":"cjp5jncol0022kif5hv8esfgh","_id":"cjp5jncp3003fkif5wtakgowh"},{"post_id":"cjp5jncod001ikif5mdzhbhmt","category_id":"cjp5jncov002tkif53lh1fvco","_id":"cjp5jncp3003ikif5s0riextd"},{"post_id":"cjp5jncoy002zkif5miqqll7y","category_id":"cjp5jncnx000gkif58r8so7mz","_id":"cjp5jncp4003lkif5jmoi22pn"},{"post_id":"cjp5jncoz0033kif5jses2oli","category_id":"cjp5jncol0022kif5hv8esfgh","_id":"cjp5jncp5003okif5lsbf8qlv"},{"post_id":"cjp5jncof001nkif5uiljlj5l","category_id":"cjp5jncol0022kif5hv8esfgh","_id":"cjp5jncp6003qkif564o7k7wc"},{"post_id":"cjp5jncp00037kif5m0fxij6s","category_id":"cjp5jncol0022kif5hv8esfgh","_id":"cjp5jncp7003skif53uju9loo"},{"post_id":"cjp5jncoh001rkif57mgaq9xr","category_id":"cjp5jncov002tkif53lh1fvco","_id":"cjp5jncp8003ukif57hvznwlu"},{"post_id":"cjp5jncoh001tkif5npiou01o","category_id":"cjp5jncov002tkif53lh1fvco","_id":"cjp5jncp8003wkif5wsmemq3i"},{"post_id":"cjp5jncoi001wkif51faqi1tm","category_id":"cjp5jncov002tkif53lh1fvco","_id":"cjp5jncp8003xkif5re2ydez9"},{"post_id":"cjp5jncoj001zkif5wvxoe3s9","category_id":"cjp5jncov002tkif53lh1fvco","_id":"cjp5jncp9003ykif5if0ycxc9"},{"post_id":"cjp5jncol0024kif5vufy1me3","category_id":"cjp5jncp8003tkif59aed2gf4","_id":"cjp5jncp90040kif5f566z1oe"},{"post_id":"cjp5jncqp009gkif5s911z2qa","category_id":"cjp5jnco7000xkif5mbb2wnox","_id":"cjp5jncqt009lkif5hmg18rwl"},{"post_id":"cjp5jncqq009hkif5p7v4r1e9","category_id":"cjp5jncp8003tkif59aed2gf4","_id":"cjp5jncqu009okif5bendz0g9"},{"post_id":"cjp5jncqu009nkif5r47tytvz","category_id":"cjp5jncog001pkif5zkpeijar","_id":"cjp5jncqz009wkif5roaw0npf"},{"post_id":"cjp5jncqv009qkif5veghwjk1","category_id":"cjp5jncov002tkif53lh1fvco","_id":"cjp5jncr0009zkif51mhux33h"},{"post_id":"cjp5jncqr009jkif52b9k3pzq","category_id":"cjp5jncqu009mkif5et2hvz00","_id":"cjp5jncr200a3kif5rgizr6jq"},{"post_id":"cjp5jncqx009rkif53rtvyogl","category_id":"cjp5jncov002tkif53lh1fvco","_id":"cjp5jncr300a6kif5bgk4t82w"},{"post_id":"cjp5jncqy009vkif5rwo9mxqa","category_id":"cjp5jncov002tkif53lh1fvco","_id":"cjp5jncr400a9kif592hlgqu6"},{"post_id":"cjp5jncqt009kkif5ff1qvvhx","category_id":"cjp5jncqx009skif52ag2uo58","_id":"cjp5jncr500abkif5qcpv7kx8"},{"post_id":"cjp5jncr0009ykif52npq3rcp","category_id":"cjp5jncnx000gkif58r8so7mz","_id":"cjp5jncr500adkif5fm8c5f0d"},{"post_id":"cjp5jncr100a2kif5ohtebrw8","category_id":"cjp5jncnx000gkif58r8so7mz","_id":"cjp5jncr500agkif5nl6rtwwc"},{"post_id":"cjp5jncr300a5kif5i7zc31g7","category_id":"cjp5jncnx000gkif58r8so7mz","_id":"cjp5jncr600aikif539jjbm3t"},{"post_id":"cjp5jncs100bpkif5daqzl96z","category_id":"cjp5jncqu009mkif5et2hvz00","_id":"cjp5jncs600bvkif5jfkby6uh"},{"post_id":"cjp5jncs300brkif5c5jxioc5","category_id":"cjp5jncqu009mkif5et2hvz00","_id":"cjp5jncs800bykif576aeq5as"},{"post_id":"cjp5jncs600bukif52dy8oknm","category_id":"cjp5jncoi001vkif51219kqak","_id":"cjp5jncsa00c2kif5maj2o65n"},{"post_id":"cjp5jncs700bxkif59mff0xxi","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncsh00cdkif5zl16b348"},{"post_id":"cjp5jncs800c0kif5xc7vhhfv","category_id":"cjp5jncse00c7kif5pb9k8zlx","_id":"cjp5jncsk00cjkif5ynzomt7y"},{"post_id":"cjp5jncsg00cckif5wii876v6","category_id":"cjp5jncse00c7kif5pb9k8zlx","_id":"cjp5jncsm00cokif5890shdyr"},{"post_id":"cjp5jncsl00cmkif5wnn1jr12","category_id":"cjp5jncnx000gkif58r8so7mz","_id":"cjp5jncsp00cxkif5p4q26phk"},{"post_id":"cjp5jncs900c1kif5uhvie9wh","category_id":"cjp5jncsl00clkif5qzorrdcq","_id":"cjp5jncsq00d0kif59otxzzf9"},{"post_id":"cjp5jncsb00c5kif5xr4b7hu0","category_id":"cjp5jncnn0005kif5g3xijci4","_id":"cjp5jncss00d7kif5qok9z98m"},{"post_id":"cjp5jncsb00c5kif5xr4b7hu0","category_id":"cjp5jncso00ctkif5rmvaez9s","_id":"cjp5jncsu00dckif59ontmfsg"},{"post_id":"cjp5jncsu00dekif51kxofwlo","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncsy00dnkif5y312uofx"},{"post_id":"cjp5jnct000drkif5yoz52mvo","category_id":"cjp5jncse00c7kif5pb9k8zlx","_id":"cjp5jnct400e0kif5u7a965yy"},{"post_id":"cjp5jncs400btkif5dawk1ucc","category_id":"cjp5jncs700bwkif5x64h6l89","_id":"cjp5jnct500e3kif5buqf7kxd"},{"post_id":"cjp5jncs400btkif5dawk1ucc","category_id":"cjp5jncsh00cekif5z4q40wh9","_id":"cjp5jnct700e7kif549emonnw"},{"post_id":"cjp5jncs400btkif5dawk1ucc","category_id":"cjp5jnct000dqkif5bxg8r1nu","_id":"cjp5jnct800ebkif5l220d8m2"},{"post_id":"cjp5jnct200dvkif5i3xqynqf","category_id":"cjp5jncse00c7kif5pb9k8zlx","_id":"cjp5jnct900efkif5v5m3ic8o"},{"post_id":"cjp5jnct600e6kif5fihc9xje","category_id":"cjp5jncse00c7kif5pb9k8zlx","_id":"cjp5jncta00ejkif5ic2mrpxb"},{"post_id":"cjp5jnctb00emkif59ksgaw93","category_id":"cjp5jncse00c7kif5pb9k8zlx","_id":"cjp5jnctf00evkif5bwsdlow0"},{"post_id":"cjp5jncsr00d4kif5we77yn9i","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncth00f0kif58308drvb"},{"post_id":"cjp5jncsr00d4kif5we77yn9i","category_id":"cjp5jnctd00epkif5tdq8n8ka","_id":"cjp5jncti00f4kif5lwrc951p"},{"post_id":"cjp5jnctf00exkif5exxn8ya9","category_id":"cjp5jncoi001vkif51219kqak","_id":"cjp5jnctk00f8kif5vl81v8oc"},{"post_id":"cjp5jncsd00c6kif5hckcx195","category_id":"cjp5jncsq00d1kif51nyp4ids","_id":"cjp5jnctl00fckif5iihzg82q"},{"post_id":"cjp5jncsd00c6kif5hckcx195","category_id":"cjp5jnctf00ewkif59semgmhf","_id":"cjp5jnctm00fekif5w1xau633"},{"post_id":"cjp5jnctj00f6kif5lvxi9c0n","category_id":"cjp5jncs700bwkif5x64h6l89","_id":"cjp5jncto00fikif5ag18xvlo"},{"post_id":"cjp5jncss00d6kif5n0sy2vmh","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jnctp00fkkif5ry3ddyhf"},{"post_id":"cjp5jncss00d6kif5n0sy2vmh","category_id":"cjp5jncth00f1kif5hwkw28yb","_id":"cjp5jnctq00fokif5ljhc9p0b"},{"post_id":"cjp5jnctl00fdkif53n0j72rr","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jnctr00frkif52y0bzldl"},{"post_id":"cjp5jncst00dbkif5bbwhs6md","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jnctt00fwkif5z8kug1ix"},{"post_id":"cjp5jncst00dbkif5bbwhs6md","category_id":"cjp5jnctl00fbkif5pfnkdcpi","_id":"cjp5jnctu00fzkif5wgs270z0"},{"post_id":"cjp5jncto00fjkif5akwavosc","category_id":"cjp5jncsq00d1kif51nyp4ids","_id":"cjp5jnctw00g4kif5ptel7ack"},{"post_id":"cjp5jncto00fjkif5akwavosc","category_id":"cjp5jnctf00ewkif59semgmhf","_id":"cjp5jnctx00g7kif53reh6jkq"},{"post_id":"cjp5jncsf00cakif58cqa0txn","category_id":"cjp5jncsq00d1kif51nyp4ids","_id":"cjp5jncty00gakif5y6f34r1h"},{"post_id":"cjp5jncsf00cakif58cqa0txn","category_id":"cjp5jnctf00ewkif59semgmhf","_id":"cjp5jnctz00gfkif5l0h8jijr"},{"post_id":"cjp5jnctq00fqkif5jqh3ofdt","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncu300ghkif5nzu3qyto"},{"post_id":"cjp5jncsv00dhkif508djr1im","category_id":"cjp5jnctq00fnkif5vglz4eam","_id":"cjp5jncu500glkif5x3ngy4s2"},{"post_id":"cjp5jnctt00fykif5stwehag2","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncu600gokif53ce3kcrv"},{"post_id":"cjp5jnctw00g5kif5jz1o91rv","category_id":"cjp5jncsq00d1kif51nyp4ids","_id":"cjp5jncu800gtkif5rhkcbudu"},{"post_id":"cjp5jnctw00g5kif5jz1o91rv","category_id":"cjp5jnctf00ewkif59semgmhf","_id":"cjp5jncua00gwkif5ikwe8ex5"},{"post_id":"cjp5jncsi00cgkif50lq3swh5","category_id":"cjp5jncsv00dfkif5gahz1tv7","_id":"cjp5jncud00h0kif5u54680sz"},{"post_id":"cjp5jncsi00cgkif50lq3swh5","category_id":"cjp5jnctv00g3kif5x3xwe6rm","_id":"cjp5jncue00h2kif5x3gqg4it"},{"post_id":"cjp5jncsx00dmkif5m4o3vd55","category_id":"cjp5jncse00c7kif5pb9k8zlx","_id":"cjp5jncuf00h5kif5c7aj591e"},{"post_id":"cjp5jncsx00dmkif5m4o3vd55","category_id":"cjp5jncty00gckif5en1yhick","_id":"cjp5jncug00h8kif5iw0qumij"},{"post_id":"cjp5jnctz00ggkif5rqb8v1m6","category_id":"cjp5jncs700bwkif5x64h6l89","_id":"cjp5jncui00hbkif5ih5quany"},{"post_id":"cjp5jnctz00ggkif5rqb8v1m6","category_id":"cjp5jncsh00cekif5z4q40wh9","_id":"cjp5jncuj00hekif5gxmoosbn"},{"post_id":"cjp5jncu500gnkif5c0bdip79","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncuk00hhkif55zfkuk1v"},{"post_id":"cjp5jncu500gnkif5c0bdip79","category_id":"cjp5jnctl00fbkif5pfnkdcpi","_id":"cjp5jncul00hmkif5z228m4ah"},{"post_id":"cjp5jncu700gqkif5ar3akk1h","category_id":"cjp5jncsl00clkif5qzorrdcq","_id":"cjp5jncum00hpkif5ln36150x"},{"post_id":"cjp5jncu900gvkif5uf1nnafi","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncuo00hukif5lh4xgm1o"},{"post_id":"cjp5jncu900gvkif5uf1nnafi","category_id":"cjp5jnctl00fbkif5pfnkdcpi","_id":"cjp5jncup00hwkif5eg090mgz"},{"post_id":"cjp5jncsz00dpkif537ssx9vi","category_id":"cjp5jncsq00d1kif51nyp4ids","_id":"cjp5jncuq00hzkif5ei3iup4o"},{"post_id":"cjp5jncsz00dpkif537ssx9vi","category_id":"cjp5jnctf00ewkif59semgmhf","_id":"cjp5jncut00i3kif5rfwp0f2k"},{"post_id":"cjp5jncub00gxkif5c9j1i6it","category_id":"cjp5jncsl00clkif5qzorrdcq","_id":"cjp5jncuv00i7kif50ilkdues"},{"post_id":"cjp5jncud00h1kif5q9jvuxs7","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncuw00ibkif5nkbdstu5"},{"post_id":"cjp5jnct200dtkif5fl7d77lj","category_id":"cjp5jncsq00d1kif51nyp4ids","_id":"cjp5jncuy00ifkif5gdy36uiq"},{"post_id":"cjp5jnct200dtkif5fl7d77lj","category_id":"cjp5jncu400gkkif5gz40fvjw","_id":"cjp5jncuz00ijkif5o5oiuq7u"},{"post_id":"cjp5jncue00h3kif58bvexcat","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncv000imkif5s00ulfar"},{"post_id":"cjp5jncug00h7kif5ropwwemh","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncv200ipkif5x1dzi8ua"},{"post_id":"cjp5jnct400dzkif50c7xep5m","category_id":"cjp5jncuf00h4kif5im35o5fo","_id":"cjp5jncv400iskif5gpngx9hw"},{"post_id":"cjp5jncsm00cqkif5428021cx","category_id":"cjp5jncog001pkif5zkpeijar","_id":"cjp5jncv500ivkif5gyzrtyvd"},{"post_id":"cjp5jncsm00cqkif5428021cx","category_id":"cjp5jnct300dwkif56w8xi0ay","_id":"cjp5jncv700izkif5yqy8efa6"},{"post_id":"cjp5jncsm00cqkif5428021cx","category_id":"cjp5jncuh00hakif59q17nixv","_id":"cjp5jncv800j2kif558aisvuj"},{"post_id":"cjp5jncuk00hkkif5m8zsz1u7","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncva00j7kif5hua5mqet"},{"post_id":"cjp5jncuk00hkkif5m8zsz1u7","category_id":"cjp5jnctl00fbkif5pfnkdcpi","_id":"cjp5jncvb00jakif5g662tp94"},{"post_id":"cjp5jnct400e2kif5z5pg9i81","category_id":"cjp5jncsq00d1kif51nyp4ids","_id":"cjp5jncvd00jfkif5gw70q3m0"},{"post_id":"cjp5jnct400e2kif5z5pg9i81","category_id":"cjp5jnctf00ewkif59semgmhf","_id":"cjp5jncve00jikif549whn5bj"},{"post_id":"cjp5jncun00hskif5k8wuye8z","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncvf00jnkif5ybshcoco"},{"post_id":"cjp5jncun00hskif5k8wuye8z","category_id":"cjp5jncth00f1kif5hwkw28yb","_id":"cjp5jncvg00jqkif58nl8sbov"},{"post_id":"cjp5jncsn00cskif5fwagwrsq","category_id":"cjp5jncsq00d1kif51nyp4ids","_id":"cjp5jncvi00jvkif5yu92ytke"},{"post_id":"cjp5jncsn00cskif5fwagwrsq","category_id":"cjp5jnctf00ewkif59semgmhf","_id":"cjp5jncvj00jxkif5d0w22kw2"},{"post_id":"cjp5jncuo00hvkif58wc76taa","category_id":"cjp5jncse00c7kif5pb9k8zlx","_id":"cjp5jncvl00k0kif5rsbck354"},{"post_id":"cjp5jnct700eakif5oa0miytg","category_id":"cjp5jncse00c7kif5pb9k8zlx","_id":"cjp5jncvm00k4kif5d4z96qi9"},{"post_id":"cjp5jnct700eakif5oa0miytg","category_id":"cjp5jncup00hxkif56kv1frag","_id":"cjp5jncvm00k5kif5c1eqg8i1"},{"post_id":"cjp5jnct800eekif5t8pk1e2k","category_id":"cjp5jncsq00d1kif51nyp4ids","_id":"cjp5jncvn00k8kif515v1dxqq"},{"post_id":"cjp5jnct800eekif5t8pk1e2k","category_id":"cjp5jnctf00ewkif59semgmhf","_id":"cjp5jncvn00kakif5vilhoslw"},{"post_id":"cjp5jncuw00ickif5zv3ya858","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncvn00kekif5im78g15j"},{"post_id":"cjp5jncso00cwkif5eq07sxcl","category_id":"cjp5jncsq00d1kif51nyp4ids","_id":"cjp5jncvn00kgkif50nm3swux"},{"post_id":"cjp5jncso00cwkif5eq07sxcl","category_id":"cjp5jnctf00ewkif59semgmhf","_id":"cjp5jncvo00kjkif556cz9ahi"},{"post_id":"cjp5jncuz00ikkif5oncn6bd9","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncvo00klkif59wkuox5k"},{"post_id":"cjp5jnct900eikif50avqlxx8","category_id":"cjp5jncse00c7kif5pb9k8zlx","_id":"cjp5jncvp00kpkif50uc784oy"},{"post_id":"cjp5jnct900eikif50avqlxx8","category_id":"cjp5jncup00hxkif56kv1frag","_id":"cjp5jncvp00krkif542h1yaim"},{"post_id":"cjp5jncsp00czkif5m64xxuww","category_id":"cjp5jncsq00d1kif51nyp4ids","_id":"cjp5jncvp00kskif5dabbj2of"},{"post_id":"cjp5jncsp00czkif5m64xxuww","category_id":"cjp5jnctf00ewkif59semgmhf","_id":"cjp5jncvq00kvkif5ciomtosu"},{"post_id":"cjp5jnctd00erkif5bblzh8nr","category_id":"cjp5jncsq00d1kif51nyp4ids","_id":"cjp5jncvq00kwkif506adaiop"},{"post_id":"cjp5jnctd00erkif5bblzh8nr","category_id":"cjp5jnctf00ewkif59semgmhf","_id":"cjp5jncvr00kzkif5esid2x68"},{"post_id":"cjp5jncte00eukif52g4qqp03","category_id":"cjp5jncsq00d1kif51nyp4ids","_id":"cjp5jncvr00l0kif5ugnelr0z"},{"post_id":"cjp5jncte00eukif52g4qqp03","category_id":"cjp5jnctf00ewkif59semgmhf","_id":"cjp5jncvr00l3kif54br35dx5"},{"post_id":"cjp5jncve00jkkif5zg0l14wi","category_id":"cjp5jncsq00d1kif51nyp4ids","_id":"cjp5jncvs00l5kif53beyrxoe"},{"post_id":"cjp5jncve00jkkif5zg0l14wi","category_id":"cjp5jnctf00ewkif59semgmhf","_id":"cjp5jncvs00l9kif5z1vgjfcv"},{"post_id":"cjp5jncvh00jskif5uyvbqhr3","category_id":"cjp5jncse00c7kif5pb9k8zlx","_id":"cjp5jncvs00lbkif5xal5gb7w"},{"post_id":"cjp5jncti00f3kif5se6zq2fz","category_id":"cjp5jncoi001vkif51219kqak","_id":"cjp5jncvt00lekif5e00e03dd"},{"post_id":"cjp5jncti00f3kif5se6zq2fz","category_id":"cjp5jncvi00jukif50o6oe03c","_id":"cjp5jncvt00lhkif540xzvg26"},{"post_id":"cjp5jnctk00fakif5vr736i0j","category_id":"cjp5jncvl00k3kif5mmghpioz","_id":"cjp5jncvu00likif5yxsiclvg"},{"post_id":"cjp5jnctn00fgkif558dcpizg","category_id":"cjp5jncsv00dfkif5gahz1tv7","_id":"cjp5jncvu00llkif535p30qzs"},{"post_id":"cjp5jnctn00fgkif558dcpizg","category_id":"cjp5jnctv00g3kif5x3xwe6rm","_id":"cjp5jncvu00lmkif59wcue9nn"},{"post_id":"cjp5jnctp00fmkif5kkmrt1hn","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncvv00lpkif5fc35yjml"},{"post_id":"cjp5jnctp00fmkif5kkmrt1hn","category_id":"cjp5jncvn00kckif5itx435fz","_id":"cjp5jncvv00lqkif5oii7yhvf"},{"post_id":"cjp5jncty00gdkif5gubcaecn","category_id":"cjp5jncnx000gkif58r8so7mz","_id":"cjp5jncvv00ltkif5vg6rxj4w"},{"post_id":"cjp5jncty00gdkif5gubcaecn","category_id":"cjp5jncvr00l2kif5h0cpuk7a","_id":"cjp5jncvv00lukif5ndb6s6ny"},{"post_id":"cjp5jncu300gjkif5k4ghdj5c","category_id":"cjp5jnctq00fnkif5vglz4eam","_id":"cjp5jncvw00lxkif50z36qifl"},{"post_id":"cjp5jncu300gjkif5k4ghdj5c","category_id":"cjp5jncvp00kokif5fbgrhtf9","_id":"cjp5jncvw00lzkif5t0wb6qgu"},{"post_id":"cjp5jncsk00cikif5pg7p7ki3","category_id":"cjp5jncsq00d1kif51nyp4ids","_id":"cjp5jncvx00m2kif5yok68jdo"},{"post_id":"cjp5jncsk00cikif5pg7p7ki3","category_id":"cjp5jncu400gkkif5gz40fvjw","_id":"cjp5jncvx00m5kif5k3qc6qke"},{"post_id":"cjp5jncsk00cikif5pg7p7ki3","category_id":"cjp5jncvt00ldkif54eyk52vu","_id":"cjp5jncvy00m8kif5pkygllif"},{"post_id":"cjp5jncuh00h9kif5v854vyhj","category_id":"cjp5jncvu00lkkif5u710mbwv","_id":"cjp5jncvy00mbkif50zdivl7a"},{"post_id":"cjp5jncui00hdkif5izwjbbnz","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncvz00mekif5kcei2jug"},{"post_id":"cjp5jncui00hdkif5izwjbbnz","category_id":"cjp5jncvu00lokif52j960pz9","_id":"cjp5jncvz00mhkif51ndr2nmh"},{"post_id":"cjp5jncuj00hgkif54yqbjar2","category_id":"cjp5jnctq00fnkif5vglz4eam","_id":"cjp5jncvz00mjkif517ygq7o5"},{"post_id":"cjp5jncuj00hgkif54yqbjar2","category_id":"cjp5jncvp00kokif5fbgrhtf9","_id":"cjp5jncvz00mlkif5bmn7jacn"},{"post_id":"cjp5jncup00hykif51z6x3td4","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncw000mnkif5a37p994b"},{"post_id":"cjp5jncup00hykif51z6x3td4","category_id":"cjp5jncvu00lokif52j960pz9","_id":"cjp5jncw000mqkif56hv8kkn4"},{"post_id":"cjp5jncus00i1kif5gqurcbei","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncw100mtkif52vt0wv70"},{"post_id":"cjp5jncus00i1kif5gqurcbei","category_id":"cjp5jncvu00lokif52j960pz9","_id":"cjp5jncw100mwkif5s6z5yqc2"},{"post_id":"cjp5jncv200iqkif5kcbqu4wt","category_id":"cjp5jncw100n0kif5101rl5ah","_id":"cjp5jncw300n8kif5c6z0fbc6"},{"post_id":"cjp5jncv500ixkif539of8q45","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncw500nekif555vrghcl"},{"post_id":"cjp5jncv500ixkif539of8q45","category_id":"cjp5jncw300n7kif55j7wq0s6","_id":"cjp5jncw500nikif5gh67xp4w"},{"post_id":"cjp5jncv700j1kif5gu917bdb","category_id":"cjp5jncs700bwkif5x64h6l89","_id":"cjp5jncw600njkif57i99xccl"},{"post_id":"cjp5jncv700j1kif5gu917bdb","category_id":"cjp5jncsh00cekif5z4q40wh9","_id":"cjp5jncw700nmkif5acxnp7q9"},{"post_id":"cjp5jncv700j1kif5gu917bdb","category_id":"cjp5jncw300nbkif5e77lwmio","_id":"cjp5jncw700nnkif5bm3kfmpl"},{"post_id":"cjp5jnctc00eokif5og598uk9","category_id":"cjp5jncv600iykif5rlnoejcf","_id":"cjp5jncw800npkif5ihoiby93"},{"post_id":"cjp5jnctc00eokif5og598uk9","category_id":"cjp5jncw500nfkif5nrfiknug","_id":"cjp5jncw800nskif5q4v61206"},{"post_id":"cjp5jncv800j5kif5n8jyzrck","category_id":"cjp5jncvu00lkkif5u710mbwv","_id":"cjp5jncw900nvkif5rixtonve"},{"post_id":"cjp5jncvb00jdkif5jaiii4yu","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncwa00o1kif5lgy9s94s"},{"post_id":"cjp5jncvb00jdkif5jaiii4yu","category_id":"cjp5jncw100mukif5gczp8imn","_id":"cjp5jncwa00o3kif5625la50a"},{"post_id":"cjp5jncvd00jhkif5q1czk4p5","category_id":"cjp5jncw900nykif5c77096hk","_id":"cjp5jncwb00o6kif58idq4582"},{"post_id":"cjp5jnctg00eykif5puowwo7r","category_id":"cjp5jncs700bwkif5x64h6l89","_id":"cjp5jncwc00oekif53yswsg19"},{"post_id":"cjp5jnctg00eykif5puowwo7r","category_id":"cjp5jncsh00cekif5z4q40wh9","_id":"cjp5jncwc00ogkif59ds2pksx"},{"post_id":"cjp5jnctg00eykif5puowwo7r","category_id":"cjp5jnct000dqkif5bxg8r1nu","_id":"cjp5jncwd00ojkif5fcumuwiy"},{"post_id":"cjp5jnctg00eykif5puowwo7r","category_id":"cjp5jncvf00jmkif5esvc96v7","_id":"cjp5jncwd00olkif5nuyc1k3s"},{"post_id":"cjp5jnctg00eykif5puowwo7r","category_id":"cjp5jncwa00o5kif5fx4gek27","_id":"cjp5jncwd00onkif5lnmyp7sm"},{"post_id":"cjp5jncvi00jwkif5xg0ktg01","category_id":"cjp5jncsq00d1kif51nyp4ids","_id":"cjp5jncwe00oqkif5uwyr4tsw"},{"post_id":"cjp5jncvi00jwkif5xg0ktg01","category_id":"cjp5jncu400gkkif5gz40fvjw","_id":"cjp5jncwg00oskif52d30hq0g"},{"post_id":"cjp5jncvi00jwkif5xg0ktg01","category_id":"cjp5jncvt00ldkif54eyk52vu","_id":"cjp5jncwh00ovkif5kxzay67g"},{"post_id":"cjp5jncvj00jzkif5q05jfbj6","category_id":"cjp5jncse00c7kif5pb9k8zlx","_id":"cjp5jncwh00owkif56fv0qwjc"},{"post_id":"cjp5jncvj00jzkif5q05jfbj6","category_id":"cjp5jncup00hxkif56kv1frag","_id":"cjp5jncwh00ozkif59jaxv347"},{"post_id":"cjp5jncvj00jzkif5q05jfbj6","category_id":"cjp5jncwc00odkif51taqe0o6","_id":"cjp5jncwi00p1kif5sanzqiuz"},{"post_id":"cjp5jnctr00ftkif513ntvggf","category_id":"cjp5jncsv00dfkif5gahz1tv7","_id":"cjp5jncwi00p4kif5eclos9gu"},{"post_id":"cjp5jnctr00ftkif513ntvggf","category_id":"cjp5jncvo00kikif587p1ggop","_id":"cjp5jncwi00p7kif511est4nk"},{"post_id":"cjp5jnctr00ftkif513ntvggf","category_id":"cjp5jncwd00okkif55z42lqqg","_id":"cjp5jncwj00p9kif5bl22ic9w"},{"post_id":"cjp5jnctu00g1kif5dcinej4j","category_id":"cjp5jncnx000gkif58r8so7mz","_id":"cjp5jncwj00pckif5b3pra9gy"},{"post_id":"cjp5jnctu00g1kif5dcinej4j","category_id":"cjp5jncvp00kukif56bxupdt3","_id":"cjp5jncwk00pfkif5h8ffr3si"},{"post_id":"cjp5jnctu00g1kif5dcinej4j","category_id":"cjp5jncwg00oukif5adsew9ap","_id":"cjp5jncwk00phkif518nhnhow"},{"post_id":"cjp5jnctx00g8kif5i52w2hxh","category_id":"cjp5jncvr00kykif5rp6ppvr0","_id":"cjp5jncwk00pikif56r68pycd"},{"post_id":"cjp5jnctx00g8kif5i52w2hxh","category_id":"cjp5jncwh00oykif5jzq9vy5j","_id":"cjp5jncwl00pmkif5gs8gdca6"},{"post_id":"cjp5jncum00hokif52xasx7tp","category_id":"cjp5jncv600iykif5rlnoejcf","_id":"cjp5jncwl00pokif5p31bq6xq"},{"post_id":"cjp5jncum00hokif52xasx7tp","category_id":"cjp5jncw500nfkif5nrfiknug","_id":"cjp5jncwm00prkif5ns8ew9q7"},{"post_id":"cjp5jncuu00i4kif5599vmfe1","category_id":"cjp5jncvy00mdkif52p3z19l5","_id":"cjp5jncwm00pskif5dsa8j960"},{"post_id":"cjp5jncuu00i4kif5599vmfe1","category_id":"cjp5jncwj00pakif5d9r73adu","_id":"cjp5jncwn00pukif5ddkq101e"},{"post_id":"cjp5jncuv00i9kif5m1q6hn5h","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncwn00pxkif5rpexc1zv"},{"post_id":"cjp5jncuv00i9kif5m1q6hn5h","category_id":"cjp5jncvz00mikif5ue7v59oq","_id":"cjp5jncwo00q0kif597q2nrgt"},{"post_id":"cjp5jncuv00i9kif5m1q6hn5h","category_id":"cjp5jncwk00pgkif5c2vtmbix","_id":"cjp5jncwo00q3kif5fbvk4ou2"},{"post_id":"cjp5jncv400itkif5s6dengf2","category_id":"cjp5jncvr00kykif5rp6ppvr0","_id":"cjp5jncwo00q5kif5f7s2lf91"},{"post_id":"cjp5jncv400itkif5s6dengf2","category_id":"cjp5jncwh00oykif5jzq9vy5j","_id":"cjp5jncwp00q7kif5elig9k90"},{"post_id":"cjp5jncva00j9kif596q4n4a2","category_id":"cjp5jncnx000gkif58r8so7mz","_id":"cjp5jncwp00q9kif5cljgbdny"},{"post_id":"cjp5jncva00j9kif596q4n4a2","category_id":"cjp5jncw700nokif5rvf6n1o2","_id":"cjp5jncwq00qckif510d07fjb"},{"post_id":"cjp5jncva00j9kif596q4n4a2","category_id":"cjp5jncwo00q1kif5jtw34aya","_id":"cjp5jncwq00qekif5il2mgbgx"},{"post_id":"cjp5jncsw00dkkif5k9g8fmd0","category_id":"cjp5jnctq00fnkif5vglz4eam","_id":"cjp5jncwr00qjkif5icdfq00t"},{"post_id":"cjp5jncsw00dkkif5k9g8fmd0","category_id":"cjp5jncvp00kokif5fbgrhtf9","_id":"cjp5jncwr00qlkif5c577udch"},{"post_id":"cjp5jncsw00dkkif5k9g8fmd0","category_id":"cjp5jncwe00ookif5btvb8xj8","_id":"cjp5jncwr00qmkif5oy7uz831"},{"post_id":"cjp5jncsw00dkkif5k9g8fmd0","category_id":"cjp5jncwp00qakif509sdzriq","_id":"cjp5jncws00qqkif5m3xhw59s"},{"post_id":"cjp5jncv100inkif5l6yqrffd","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncws00qtkif5vowvulpf"},{"post_id":"cjp5jncv100inkif5l6yqrffd","category_id":"cjp5jncw100mukif5gczp8imn","_id":"cjp5jncwt00qwkif5e62netum"},{"post_id":"cjp5jncv100inkif5l6yqrffd","category_id":"cjp5jncwm00pqkif5h7mgajne","_id":"cjp5jncwt00qxkif54e5pndrw"},{"post_id":"cjp5jncv100inkif5l6yqrffd","category_id":"cjp5jncwr00qkkif5lxn9vjov","_id":"cjp5jncwu00r0kif52iwmdb2z"},{"post_id":"cjp5jncvg00jpkif5pprfms9k","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jncwu00r3kif5wwc47w5a"},{"post_id":"cjp5jncvg00jpkif5pprfms9k","category_id":"cjp5jncw100mukif5gczp8imn","_id":"cjp5jncwu00r6kif50tktqmj0"},{"post_id":"cjp5jncvg00jpkif5pprfms9k","category_id":"cjp5jncwp00q6kif5hllzqles","_id":"cjp5jncwu00r7kif5tur46dr5"},{"post_id":"cjp5jncvg00jpkif5pprfms9k","category_id":"cjp5jncws00qokif52a9gxx7o","_id":"cjp5jncwu00r9kif5he8bu3h0"},{"post_id":"cjp5jncuy00ihkif5ub6fcmp1","category_id":"cjp5jncnx000gkif58r8so7mz","_id":"cjp5jncwv00rakif50r1d4qj3"},{"post_id":"cjp5jncuy00ihkif5ub6fcmp1","category_id":"cjp5jncw000mokif5d4ottgwy","_id":"cjp5jncwv00rckif5j4bm1owt"},{"post_id":"cjp5jncuy00ihkif5ub6fcmp1","category_id":"cjp5jncwl00pkkif565jjx7qm","_id":"cjp5jncwv00rdkif5756o4a8s"},{"post_id":"cjp5jncuy00ihkif5ub6fcmp1","category_id":"cjp5jncwq00qgkif5122000wg","_id":"cjp5jncwv00rekif5vw3mg2is"},{"post_id":"cjp5jncuy00ihkif5ub6fcmp1","category_id":"cjp5jncws00qukif566wpmghe","_id":"cjp5jncwv00rgkif5quht9mw9"},{"post_id":"cjp5jncuy00ihkif5ub6fcmp1","category_id":"cjp5jncwu00r1kif57723qfug","_id":"cjp5jncwv00rhkif5fldc7vdn"},{"post_id":"cjp5jncz300zxkif58x7dhvrc","category_id":"cjp5jncoi001vkif51219kqak","_id":"cjp5jncz90103kif5mjxhpwvg"},{"post_id":"cjp5jncz000ztkif516xiler9","category_id":"cjp5jncz300zvkif5wj49rod6","_id":"cjp5jnczb0105kif5qnqqscqn"},{"post_id":"cjp5jncz500zykif5t4qe2pri","category_id":"cjp5jnctq00fnkif5vglz4eam","_id":"cjp5jnczd0109kif55tj2sq1x"},{"post_id":"cjp5jncz500zykif5t4qe2pri","category_id":"cjp5jncvp00kokif5fbgrhtf9","_id":"cjp5jncze010bkif5u2a0r4fu"},{"post_id":"cjp5jncz80102kif51i6yjk67","category_id":"cjp5jncsq00d1kif51nyp4ids","_id":"cjp5jnczh010fkif59gzz9shk"},{"post_id":"cjp5jncz80102kif51i6yjk67","category_id":"cjp5jnctf00ewkif59semgmhf","_id":"cjp5jnczi010hkif5psyr4h9j"},{"post_id":"cjp5jncza0104kif5zzx96g7g","category_id":"cjp5jncoi001vkif51219kqak","_id":"cjp5jnczj010kkif5hjpvwppd"},{"post_id":"cjp5jnczd010akif5933w8muk","category_id":"cjp5jncsv00dfkif5gahz1tv7","_id":"cjp5jnczk010lkif594ucn7iy"},{"post_id":"cjp5jnczd010akif5933w8muk","category_id":"cjp5jnctv00g3kif5x3xwe6rm","_id":"cjp5jnczl010nkif56bc4g1za"},{"post_id":"cjp5jnczf010ekif5pmdc3ezc","category_id":"cjp5jncsv00dfkif5gahz1tv7","_id":"cjp5jnczl010pkif5sadw928h"},{"post_id":"cjp5jnczf010ekif5pmdc3ezc","category_id":"cjp5jnctv00g3kif5x3xwe6rm","_id":"cjp5jnczl010qkif5of1krwvp"},{"post_id":"cjp5jncz100zukif5md83krt1","category_id":"cjp5jncs700bwkif5x64h6l89","_id":"cjp5jnczp0113kif5j6xi8hoe"},{"post_id":"cjp5jncz100zukif5md83krt1","category_id":"cjp5jncz70100kif5ebpkiuw3","_id":"cjp5jnczp0117kif5wnhree7w"},{"post_id":"cjp5jncz100zukif5md83krt1","category_id":"cjp5jncze010ckif5a3skcdz1","_id":"cjp5jnczp0118kif5gyeijnij"},{"post_id":"cjp5jncz100zukif5md83krt1","category_id":"cjp5jnczn010vkif5el5mxxma","_id":"cjp5jnczq011bkif5el86gko5"},{"post_id":"cjp5jncz600zzkif5v21elr92","category_id":"cjp5jncsa00c3kif5tpazfhb3","_id":"cjp5jnczr011ekif516koaa9g"},{"post_id":"cjp5jncz600zzkif5v21elr92","category_id":"cjp5jncw100mukif5gczp8imn","_id":"cjp5jnczs011ikif5pljzgrs4"},{"post_id":"cjp5jncz600zzkif5v21elr92","category_id":"cjp5jnczb0106kif5pqju5ke1","_id":"cjp5jnczs011kkif5uduxxdtb"},{"post_id":"cjp5jncz600zzkif5v21elr92","category_id":"cjp5jnczk010mkif5id0gwa6z","_id":"cjp5jnczs011mkif5gq3vxi5j"},{"post_id":"cjp5jncz600zzkif5v21elr92","category_id":"cjp5jnczp0114kif54l77ww4g","_id":"cjp5jnczu011okif5d7frgyce"},{"post_id":"cjp5jnczh010gkif5k3l38jqi","category_id":"cjp5jnczl010rkif515985vxf","_id":"cjp5jnczu011qkif5zk9is3iz"},{"post_id":"cjp5jnczh010gkif5k3l38jqi","category_id":"cjp5jnczq0119kif576fo5383","_id":"cjp5jnczu011rkif5m3nj3a72"},{"post_id":"cjp5jnczc0108kif54anrwi4c","category_id":"cjp5jncv600iykif5rlnoejcf","_id":"cjp5jnd01012hkif5b9omjrkv"},{"post_id":"cjp5jnczc0108kif54anrwi4c","category_id":"cjp5jnczj010ikif5rs27kf6m","_id":"cjp5jnd02012jkif5f0b9c3zn"},{"post_id":"cjp5jnczc0108kif54anrwi4c","category_id":"cjp5jnczo010zkif5jsfkhd5z","_id":"cjp5jnd02012mkif5jur26u6c"},{"post_id":"cjp5jnczc0108kif54anrwi4c","category_id":"cjp5jnczr011fkif5jn9d6zoh","_id":"cjp5jnd02012okif5tjzqb926"},{"post_id":"cjp5jnczc0108kif54anrwi4c","category_id":"cjp5jnczs011nkif5ojnbmad7","_id":"cjp5jnd03012rkif5u1ure47q"},{"post_id":"cjp5jnczc0108kif54anrwi4c","category_id":"cjp5jnczu011skif5874jx017","_id":"cjp5jnd03012tkif5sxwqi8wn"},{"post_id":"cjp5jnczc0108kif54anrwi4c","category_id":"cjp5jnczv011vkif51sy36wjv","_id":"cjp5jnd03012wkif57575454s"},{"post_id":"cjp5jnczc0108kif54anrwi4c","category_id":"cjp5jnczx011ykif5xc6pvkso","_id":"cjp5jnd03012ykif5rgkn1992"},{"post_id":"cjp5jnczc0108kif54anrwi4c","category_id":"cjp5jnczy0125kif5jr1hpm64","_id":"cjp5jnd040131kif5z53bfaoq"},{"post_id":"cjp5jnczc0108kif54anrwi4c","category_id":"cjp5jnczz012akif5knozxc40","_id":"cjp5jnd040133kif5e354oirt"},{"post_id":"cjp5jnd0c0142kif5zhiw4gvx","category_id":"cjp5jnctq00fnkif5vglz4eam","_id":"cjp5jnd0f0145kif5ko9yzvs1"},{"post_id":"cjp5jnd0c0142kif5zhiw4gvx","category_id":"cjp5jncvp00kokif5fbgrhtf9","_id":"cjp5jnd0f0147kif529akhc9h"}],"PostTag":[{"post_id":"cjp5jncnd0001kif5ofdk6wme","tag_id":"cjp5jncnp0006kif59dh2m818","_id":"cjp5jncnz000jkif5et6gzh3v"},{"post_id":"cjp5jncnd0001kif5ofdk6wme","tag_id":"cjp5jncnu000ckif55xwxbomh","_id":"cjp5jnco0000lkif50l74fa4q"},{"post_id":"cjp5jncnh0003kif54x49ighg","tag_id":"cjp5jncnx000hkif5hox6wysz","_id":"cjp5jncob0019kif5kowhc2jq"},{"post_id":"cjp5jncnh0003kif54x49ighg","tag_id":"cjp5jnco1000okif50mqq65wk","_id":"cjp5jncoc001ckif5p516g1ay"},{"post_id":"cjp5jncnh0003kif54x49ighg","tag_id":"cjp5jnco3000tkif5f8mmtynw","_id":"cjp5jncod001hkif5i13dan72"},{"post_id":"cjp5jncnh0003kif54x49ighg","tag_id":"cjp5jnco80010kif5vqcpi0w0","_id":"cjp5jncoe001jkif53s82tpdp"},{"post_id":"cjp5jncom0025kif5ijw80rge","tag_id":"cjp5jnco3000tkif5f8mmtynw","_id":"cjp5jncoo002bkif5x29b7tb8"},{"post_id":"cjp5jncnq0007kif52i7fo4x9","tag_id":"cjp5jncoa0016kif587qqbq7p","_id":"cjp5jncor002ikif52dn3bdv5"},{"post_id":"cjp5jncnq0007kif52i7fo4x9","tag_id":"cjp5jncoc001ekif5yqsbgpvp","_id":"cjp5jncos002mkif5jy38r66l"},{"post_id":"cjp5jncnq0007kif52i7fo4x9","tag_id":"cjp5jncof001mkif5zkybitr3","_id":"cjp5jncot002qkif5tnv1rxls"},{"post_id":"cjp5jncnq0007kif52i7fo4x9","tag_id":"cjp5jncoh001skif5ti8fzvno","_id":"cjp5jncov002ukif5953zfzxa"},{"post_id":"cjp5jncnq0007kif52i7fo4x9","tag_id":"cjp5jncoj001xkif5akckut0b","_id":"cjp5jncoy002ykif5dc8s9jit"},{"post_id":"cjp5jncnq0007kif52i7fo4x9","tag_id":"cjp5jncol0023kif56030dxi9","_id":"cjp5jncoz0031kif5a3w53kb1"},{"post_id":"cjp5jncnq0007kif52i7fo4x9","tag_id":"cjp5jncnp0006kif59dh2m818","_id":"cjp5jncp00036kif5mgwmyey2"},{"post_id":"cjp5jncns0009kif53u43b7ca","tag_id":"cjp5jncoq002fkif5h7k4e5is","_id":"cjp5jncp2003dkif5ppd4f7c9"},{"post_id":"cjp5jncns0009kif53u43b7ca","tag_id":"cjp5jncoh001skif5ti8fzvno","_id":"cjp5jncp3003gkif5t6rdj5s8"},{"post_id":"cjp5jncns0009kif53u43b7ca","tag_id":"cjp5jncox002wkif5uera8tpr","_id":"cjp5jncp3003jkif5tkgxokng"},{"post_id":"cjp5jncns0009kif53u43b7ca","tag_id":"cjp5jncp00035kif5ftcxskih","_id":"cjp5jncp4003mkif5ciaxlahj"},{"post_id":"cjp5jncnt000akif5occua2mh","tag_id":"cjp5jncnx000hkif5hox6wysz","_id":"cjp5jncpa0042kif5n01pvyga"},{"post_id":"cjp5jncnt000akif5occua2mh","tag_id":"cjp5jncp3003hkif59dub0dtm","_id":"cjp5jncpa0043kif5nns9gtk4"},{"post_id":"cjp5jncnt000akif5occua2mh","tag_id":"cjp5jnco3000tkif5f8mmtynw","_id":"cjp5jncpa0045kif538b52xt1"},{"post_id":"cjp5jncnt000akif5occua2mh","tag_id":"cjp5jncp7003rkif51wu6bkhc","_id":"cjp5jncpa0046kif528l7wgj2"},{"post_id":"cjp5jncnt000akif5occua2mh","tag_id":"cjp5jncp8003vkif5jv1812tx","_id":"cjp5jncpa0048kif5z9vr8nlb"},{"post_id":"cjp5jncnt000akif5occua2mh","tag_id":"cjp5jncp9003zkif5tp5qki6c","_id":"cjp5jncpb0049kif5mkhcj427"},{"post_id":"cjp5jncnv000dkif5olvddd56","tag_id":"cjp5jncp90041kif567xkuk52","_id":"cjp5jncpb004bkif5bravq455"},{"post_id":"cjp5jncnv000dkif5olvddd56","tag_id":"cjp5jncpa0044kif5eup1ycuk","_id":"cjp5jncpb004ckif57g2tp5g3"},{"post_id":"cjp5jncnv000dkif5olvddd56","tag_id":"cjp5jncpa0047kif5nk977p9k","_id":"cjp5jncpb004ekif5wstqw0c5"},{"post_id":"cjp5jncnv000dkif5olvddd56","tag_id":"cjp5jncnp0006kif59dh2m818","_id":"cjp5jncpb004fkif50ji2qlg3"},{"post_id":"cjp5jncnw000ekif5gu7m8bku","tag_id":"cjp5jncpb004akif51fx6gred","_id":"cjp5jncpc004jkif59cb79um4"},{"post_id":"cjp5jncnw000ekif5gu7m8bku","tag_id":"cjp5jncpb004dkif5chbm9vxy","_id":"cjp5jncpc004kkif5tbfs5mce"},{"post_id":"cjp5jncnw000ekif5gu7m8bku","tag_id":"cjp5jncpb004gkif571o3aquu","_id":"cjp5jncpc004mkif5rbq8b5g5"},{"post_id":"cjp5jncnw000ekif5gu7m8bku","tag_id":"cjp5jncpc004hkif5ahnpbcjk","_id":"cjp5jncpc004nkif5rl8mpudg"},{"post_id":"cjp5jncny000ikif5eorpn6hm","tag_id":"cjp5jncnu000ckif55xwxbomh","_id":"cjp5jncpd004pkif5bhmag8b7"},{"post_id":"cjp5jncny000ikif5eorpn6hm","tag_id":"cjp5jncpc004ikif5sdkmxxkq","_id":"cjp5jncpd004qkif5akh4ukm8"},{"post_id":"cjp5jncny000ikif5eorpn6hm","tag_id":"cjp5jncpc004lkif52knjk1iy","_id":"cjp5jncpd004skif5dowd4tf7"},{"post_id":"cjp5jncnz000kkif5f4583q3h","tag_id":"cjp5jncpd004okif5sctlw88t","_id":"cjp5jncpe004vkif5lakqxs0x"},{"post_id":"cjp5jncnz000kkif5f4583q3h","tag_id":"cjp5jncpd004rkif5xmvbesfg","_id":"cjp5jncpe004wkif55ccwrvfn"},{"post_id":"cjp5jncnz000kkif5f4583q3h","tag_id":"cjp5jncpe004tkif5dgn266sg","_id":"cjp5jncpf004ykif5rxw22ie1"},{"post_id":"cjp5jnco1000pkif5ummarbqn","tag_id":"cjp5jncpb004akif51fx6gred","_id":"cjp5jncpg0053kif5q0q5c13z"},{"post_id":"cjp5jnco1000pkif5ummarbqn","tag_id":"cjp5jncpb004gkif571o3aquu","_id":"cjp5jncph0054kif5jwx57pjk"},{"post_id":"cjp5jnco1000pkif5ummarbqn","tag_id":"cjp5jncpf004zkif5wf2s0uoz","_id":"cjp5jncph0056kif5llkdhitc"},{"post_id":"cjp5jnco1000pkif5ummarbqn","tag_id":"cjp5jncpf0050kif5rkr0y1zj","_id":"cjp5jncph0057kif5vtb7jb0h"},{"post_id":"cjp5jnco1000pkif5ummarbqn","tag_id":"cjp5jncpc004hkif5ahnpbcjk","_id":"cjp5jncpi0059kif5fpt75dfb"},{"post_id":"cjp5jnco2000qkif5yr8ps9e4","tag_id":"cjp5jncpg0052kif5xrsfqr03","_id":"cjp5jncpi005akif5f09e655h"},{"post_id":"cjp5jnco2000qkif5yr8ps9e4","tag_id":"cjp5jncpc004hkif5ahnpbcjk","_id":"cjp5jncpi005ckif54swz02fp"},{"post_id":"cjp5jnco3000ukif503jyco9p","tag_id":"cjp5jncph0058kif53vi87cja","_id":"cjp5jncpj005fkif5anu7q45p"},{"post_id":"cjp5jnco3000ukif503jyco9p","tag_id":"cjp5jnco3000tkif5f8mmtynw","_id":"cjp5jncpj005gkif51o5rffxs"},{"post_id":"cjp5jnco3000ukif503jyco9p","tag_id":"cjp5jncp7003rkif51wu6bkhc","_id":"cjp5jncpj005ikif5d1m5nfe7"},{"post_id":"cjp5jnco6000wkif5xr77um9e","tag_id":"cjp5jncpi005ekif5lxpltmm4","_id":"cjp5jncpj005kkif5bt23c1bf"},{"post_id":"cjp5jnco6000wkif5xr77um9e","tag_id":"cjp5jncpj005hkif58w2g1y26","_id":"cjp5jncpj005lkif5p9xyzpib"},{"post_id":"cjp5jnco7000zkif51yj90zdm","tag_id":"cjp5jncpj005jkif5ohgopbcy","_id":"cjp5jncpk005skif5tc9dt1a2"},{"post_id":"cjp5jnco7000zkif51yj90zdm","tag_id":"cjp5jncpj005mkif5cldzg2hw","_id":"cjp5jncpk005tkif5qkhere0h"},{"post_id":"cjp5jnco7000zkif51yj90zdm","tag_id":"cjp5jncpk005nkif5xwc911i8","_id":"cjp5jncpl005vkif5mbj4rsuh"},{"post_id":"cjp5jnco7000zkif51yj90zdm","tag_id":"cjp5jncpk005okif5ddutxttx","_id":"cjp5jncpl005wkif5in552qwt"},{"post_id":"cjp5jnco7000zkif51yj90zdm","tag_id":"cjp5jncpk005pkif56evx2djp","_id":"cjp5jncpm005ykif59f6a1dt9"},{"post_id":"cjp5jnco7000zkif51yj90zdm","tag_id":"cjp5jncpk005qkif56lzki8nf","_id":"cjp5jncpm005zkif5j6fi018q"},{"post_id":"cjp5jnco80012kif5yqm4mexe","tag_id":"cjp5jncpk005rkif5tu184rwk","_id":"cjp5jncpm0061kif5d1ifdfdk"},{"post_id":"cjp5jnco80012kif5yqm4mexe","tag_id":"cjp5jncpk005ukif5m5kw5ypd","_id":"cjp5jncpm0062kif50uijz8pd"},{"post_id":"cjp5jnco80012kif5yqm4mexe","tag_id":"cjp5jncnp0006kif59dh2m818","_id":"cjp5jncpm0063kif5jzxi2rv3"},{"post_id":"cjp5jnco90014kif5m2fkgbci","tag_id":"cjp5jncpl005xkif5308coq3t","_id":"cjp5jncpn0066kif5z15xvvrx"},{"post_id":"cjp5jnco90014kif5m2fkgbci","tag_id":"cjp5jncpm0060kif5lgy41qd6","_id":"cjp5jncpn0067kif55dauayxc"},{"post_id":"cjp5jnco90014kif5m2fkgbci","tag_id":"cjp5jncpd004rkif5xmvbesfg","_id":"cjp5jncpo0069kif55ydywskl"},{"post_id":"cjp5jncoa0018kif5a47b9xxf","tag_id":"cjp5jncpn0065kif5zqyhysdw","_id":"cjp5jncpo006akif58pt1xvxf"},{"post_id":"cjp5jncob001bkif5d71ze5yc","tag_id":"cjp5jncpd004okif5sctlw88t","_id":"cjp5jncpp006ekif5w8zgm89a"},{"post_id":"cjp5jncob001bkif5d71ze5yc","tag_id":"cjp5jncpo006bkif5agprg0bm","_id":"cjp5jncpp006fkif5nrc5yvln"},{"post_id":"cjp5jncob001bkif5d71ze5yc","tag_id":"cjp5jncpo006ckif5fq7t4int","_id":"cjp5jncpp006hkif5arkcy0v2"},{"post_id":"cjp5jncoc001gkif5mz7emql4","tag_id":"cjp5jncpo006dkif5w3awbe3m","_id":"cjp5jncpq006kkif5g2hew1ph"},{"post_id":"cjp5jncoc001gkif5mz7emql4","tag_id":"cjp5jncoh001skif5ti8fzvno","_id":"cjp5jncpq006lkif5u1gcig56"},{"post_id":"cjp5jncoc001gkif5mz7emql4","tag_id":"cjp5jncpp006ikif5zwun8atc","_id":"cjp5jncpq006nkif5jp5qib4s"},{"post_id":"cjp5jncod001ikif5mdzhbhmt","tag_id":"cjp5jncpp006jkif572tfvppa","_id":"cjp5jncps006qkif50rv56req"},{"post_id":"cjp5jncod001ikif5mdzhbhmt","tag_id":"cjp5jncpq006mkif5rilmqsg6","_id":"cjp5jncps006rkif5c6hycw6z"},{"post_id":"cjp5jncod001ikif5mdzhbhmt","tag_id":"cjp5jncpq006okif538dw0jqs","_id":"cjp5jncps006tkif5ey9ey7b7"},{"post_id":"cjp5jncod001ikif5mdzhbhmt","tag_id":"cjp5jncnu000ckif55xwxbomh","_id":"cjp5jncps006ukif5dkh51kgi"},{"post_id":"cjp5jncof001nkif5uiljlj5l","tag_id":"cjp5jncpn0065kif5zqyhysdw","_id":"cjp5jncps006wkif5npadwvaj"},{"post_id":"cjp5jncog001okif5l7b8uz8z","tag_id":"cjp5jncps006skif5xaixhno8","_id":"cjp5jncpt006xkif5ce0b985g"},{"post_id":"cjp5jncoh001rkif57mgaq9xr","tag_id":"cjp5jncpp006jkif572tfvppa","_id":"cjp5jncpu0071kif5d2y1tmqx"},{"post_id":"cjp5jncoh001rkif57mgaq9xr","tag_id":"cjp5jncpq006mkif5rilmqsg6","_id":"cjp5jncpu0072kif5ldrp1lvj"},{"post_id":"cjp5jncoh001rkif57mgaq9xr","tag_id":"cjp5jncpq006okif538dw0jqs","_id":"cjp5jncpv0074kif5zqzr2nnr"},{"post_id":"cjp5jncoh001rkif57mgaq9xr","tag_id":"cjp5jncnu000ckif55xwxbomh","_id":"cjp5jncpv0075kif53xtq3ug4"},{"post_id":"cjp5jncoh001tkif5npiou01o","tag_id":"cjp5jncpp006jkif572tfvppa","_id":"cjp5jncpw0078kif50k09ydn5"},{"post_id":"cjp5jncoh001tkif5npiou01o","tag_id":"cjp5jncpq006mkif5rilmqsg6","_id":"cjp5jncpw0079kif5ep31xj8r"},{"post_id":"cjp5jncoh001tkif5npiou01o","tag_id":"cjp5jncpq006okif538dw0jqs","_id":"cjp5jncpw007bkif5evmpl779"},{"post_id":"cjp5jncoh001tkif5npiou01o","tag_id":"cjp5jncnu000ckif55xwxbomh","_id":"cjp5jncpw007ckif5sjycb7hj"},{"post_id":"cjp5jncoi001wkif51faqi1tm","tag_id":"cjp5jncpp006jkif572tfvppa","_id":"cjp5jncpx007fkif5d5wplob1"},{"post_id":"cjp5jncoi001wkif51faqi1tm","tag_id":"cjp5jncpq006mkif5rilmqsg6","_id":"cjp5jncpx007gkif5taqxyhvy"},{"post_id":"cjp5jncoi001wkif51faqi1tm","tag_id":"cjp5jncpq006okif538dw0jqs","_id":"cjp5jncpy007ikif518y9f3c7"},{"post_id":"cjp5jncoi001wkif51faqi1tm","tag_id":"cjp5jncnu000ckif55xwxbomh","_id":"cjp5jncpy007jkif59jmzqsqu"},{"post_id":"cjp5jncoj001zkif5wvxoe3s9","tag_id":"cjp5jncpp006jkif572tfvppa","_id":"cjp5jncpz007mkif5rakfce2s"},{"post_id":"cjp5jncoj001zkif5wvxoe3s9","tag_id":"cjp5jncpq006mkif5rilmqsg6","_id":"cjp5jncpz007nkif53brpt23l"},{"post_id":"cjp5jncoj001zkif5wvxoe3s9","tag_id":"cjp5jncpq006okif538dw0jqs","_id":"cjp5jncpz007pkif5svjxqv6o"},{"post_id":"cjp5jncoj001zkif5wvxoe3s9","tag_id":"cjp5jncnu000ckif55xwxbomh","_id":"cjp5jncpz007qkif56loy23au"},{"post_id":"cjp5jncok0021kif5asd2mb1j","tag_id":"cjp5jncpy007lkif567osjl3f","_id":"cjp5jncq0007vkif5t206bagj"},{"post_id":"cjp5jncok0021kif5asd2mb1j","tag_id":"cjp5jncpz007okif5kmbfxdyw","_id":"cjp5jncq0007wkif5nlsn3f35"},{"post_id":"cjp5jncok0021kif5asd2mb1j","tag_id":"cjp5jncpz007rkif5i445pm4t","_id":"cjp5jncq1007ykif5omf6mr1z"},{"post_id":"cjp5jncok0021kif5asd2mb1j","tag_id":"cjp5jncpb004gkif571o3aquu","_id":"cjp5jncq1007zkif5jsozfz03"},{"post_id":"cjp5jncok0021kif5asd2mb1j","tag_id":"cjp5jncpc004hkif5ahnpbcjk","_id":"cjp5jncq10081kif5xa2u061f"},{"post_id":"cjp5jncol0024kif5vufy1me3","tag_id":"cjp5jncq0007ukif5evbslcmw","_id":"cjp5jncq10083kif5ez0jl8a3"},{"post_id":"cjp5jncol0024kif5vufy1me3","tag_id":"cjp5jncq1007xkif53234dhs9","_id":"cjp5jncq10084kif5jcxeih28"},{"post_id":"cjp5jncol0024kif5vufy1me3","tag_id":"cjp5jncpn0065kif5zqyhysdw","_id":"cjp5jncq20086kif5c2bbq7rv"},{"post_id":"cjp5jncon0029kif5qp2np8cg","tag_id":"cjp5jncq10082kif5075ph8vl","_id":"cjp5jncq3008akif5y7wbuhgm"},{"post_id":"cjp5jncon0029kif5qp2np8cg","tag_id":"cjp5jncq20085kif51mv9idn2","_id":"cjp5jncq3008bkif53eep4cj8"},{"post_id":"cjp5jncon0029kif5qp2np8cg","tag_id":"cjp5jncpl005xkif5308coq3t","_id":"cjp5jncq3008dkif5movclvme"},{"post_id":"cjp5jncon0029kif5qp2np8cg","tag_id":"cjp5jncq20088kif5yihr1x8f","_id":"cjp5jncq3008ekif5otd4xfq2"},{"post_id":"cjp5jncoo002ckif5poco7wqa","tag_id":"cjp5jncq20089kif5ecxej5qu","_id":"cjp5jncq4008kkif524lqqdvu"},{"post_id":"cjp5jncoo002ckif5poco7wqa","tag_id":"cjp5jnco3000tkif5f8mmtynw","_id":"cjp5jncq4008lkif596hwcoil"},{"post_id":"cjp5jncoo002ckif5poco7wqa","tag_id":"cjp5jncq3008ckif5uoaaf27h","_id":"cjp5jncq5008nkif5ifjjtevh"},{"post_id":"cjp5jncoo002ckif5poco7wqa","tag_id":"cjp5jncq3008fkif5ukn49ob3","_id":"cjp5jncq5008okif5lasniq0q"},{"post_id":"cjp5jncoo002ckif5poco7wqa","tag_id":"cjp5jncp7003rkif51wu6bkhc","_id":"cjp5jncq5008qkif53ev211hb"},{"post_id":"cjp5jncoo002ckif5poco7wqa","tag_id":"cjp5jncq4008hkif5lcivnowm","_id":"cjp5jncq5008rkif5ae88x5tu"},{"post_id":"cjp5jncoo002ckif5poco7wqa","tag_id":"cjp5jncq4008ikif5vkaqsf5t","_id":"cjp5jncq6008tkif5k5elq2w4"},{"post_id":"cjp5jncoq002gkif5nqlbfxvu","tag_id":"cjp5jncq4008jkif5ybnlgyo1","_id":"cjp5jncq6008ukif5uurprf9h"},{"post_id":"cjp5jncor002jkif5v9us6b4j","tag_id":"cjp5jncq4008jkif5ybnlgyo1","_id":"cjp5jncq6008wkif5dcopspkl"},{"post_id":"cjp5jncos002nkif5jpkmms5x","tag_id":"cjp5jncq5008pkif518ywnry6","_id":"cjp5jncq7008ykif58qmiknd0"},{"post_id":"cjp5jncos002nkif5jpkmms5x","tag_id":"cjp5jncq3008fkif5ukn49ob3","_id":"cjp5jncq7008zkif5yrb109b5"},{"post_id":"cjp5jncos002nkif5jpkmms5x","tag_id":"cjp5jncpl005xkif5308coq3t","_id":"cjp5jncq70091kif52mu6de7c"},{"post_id":"cjp5jncos002nkif5jpkmms5x","tag_id":"cjp5jnco3000tkif5f8mmtynw","_id":"cjp5jncq70092kif5ahsdvz79"},{"post_id":"cjp5jncou002rkif5n9coyvrh","tag_id":"cjp5jncq6008xkif5ipkrdv2o","_id":"cjp5jncq70094kif5avyu466a"},{"post_id":"cjp5jncoy002zkif5miqqll7y","tag_id":"cjp5jncq70090kif52eujd7f1","_id":"cjp5jncq80098kif5ju6fnzrl"},{"post_id":"cjp5jncoy002zkif5miqqll7y","tag_id":"cjp5jncq70093kif57wkhaqzt","_id":"cjp5jncq80099kif5yhh43upp"},{"post_id":"cjp5jncoy002zkif5miqqll7y","tag_id":"cjp5jncq70095kif5fj0t5ste","_id":"cjp5jncq8009bkif58ug48yjm"},{"post_id":"cjp5jncoy002zkif5miqqll7y","tag_id":"cjp5jncnp0006kif59dh2m818","_id":"cjp5jncq9009ckif5zt2kwl61"},{"post_id":"cjp5jncoy002zkif5miqqll7y","tag_id":"cjp5jncq80096kif5vmvukhas","_id":"cjp5jncq9009dkif5a3646jgt"},{"post_id":"cjp5jncoz0033kif5jses2oli","tag_id":"cjp5jncq80097kif5d9igy1hm","_id":"cjp5jncq9009ekif5ruow9w9x"},{"post_id":"cjp5jncp00037kif5m0fxij6s","tag_id":"cjp5jncq4008jkif5ybnlgyo1","_id":"cjp5jncq9009fkif59z27b13p"},{"post_id":"cjp5jncqv009qkif5veghwjk1","tag_id":"cjp5jncpp006jkif572tfvppa","_id":"cjp5jncqy009ukif5icmr6aj8"},{"post_id":"cjp5jncqv009qkif5veghwjk1","tag_id":"cjp5jncpq006mkif5rilmqsg6","_id":"cjp5jncr0009xkif5nn03piq7"},{"post_id":"cjp5jncqv009qkif5veghwjk1","tag_id":"cjp5jncpq006okif538dw0jqs","_id":"cjp5jncr100a1kif5g6s61tkt"},{"post_id":"cjp5jncqv009qkif5veghwjk1","tag_id":"cjp5jncnu000ckif55xwxbomh","_id":"cjp5jncr200a4kif5h3r6aeu7"},{"post_id":"cjp5jncqx009rkif53rtvyogl","tag_id":"cjp5jncpp006jkif572tfvppa","_id":"cjp5jncr400a7kif56de1i90g"},{"post_id":"cjp5jncqx009rkif53rtvyogl","tag_id":"cjp5jncpq006mkif5rilmqsg6","_id":"cjp5jncr500aakif5hva35mny"},{"post_id":"cjp5jncqx009rkif53rtvyogl","tag_id":"cjp5jncpq006okif538dw0jqs","_id":"cjp5jncr500ackif5q6hgpah9"},{"post_id":"cjp5jncqx009rkif53rtvyogl","tag_id":"cjp5jncnu000ckif55xwxbomh","_id":"cjp5jncr500afkif5l0sy8rsq"},{"post_id":"cjp5jncqy009vkif5rwo9mxqa","tag_id":"cjp5jncpp006jkif572tfvppa","_id":"cjp5jncr600ahkif5qbusgpt4"},{"post_id":"cjp5jncqy009vkif5rwo9mxqa","tag_id":"cjp5jncpq006mkif5rilmqsg6","_id":"cjp5jncr700akkif5k2j7thv8"},{"post_id":"cjp5jncqy009vkif5rwo9mxqa","tag_id":"cjp5jncpq006okif538dw0jqs","_id":"cjp5jncr700alkif5ayl2mjuu"},{"post_id":"cjp5jncqy009vkif5rwo9mxqa","tag_id":"cjp5jncnu000ckif55xwxbomh","_id":"cjp5jncr700ankif5i2x2tc2c"},{"post_id":"cjp5jncqp009gkif5s911z2qa","tag_id":"cjp5jncqr009ikif5eg2h8u3b","_id":"cjp5jncr800aokif5dgn3bkyx"},{"post_id":"cjp5jncqp009gkif5s911z2qa","tag_id":"cjp5jncqu009pkif5lqf60tks","_id":"cjp5jncr800aqkif5ltcjmkhx"},{"post_id":"cjp5jncqp009gkif5s911z2qa","tag_id":"cjp5jncqy009tkif54zxfbcgy","_id":"cjp5jncr800arkif5afq0ngmj"},{"post_id":"cjp5jncqp009gkif5s911z2qa","tag_id":"cjp5jncnu000ckif55xwxbomh","_id":"cjp5jncrb00askif566mxyhl1"},{"post_id":"cjp5jncqp009gkif5s911z2qa","tag_id":"cjp5jncnp0006kif59dh2m818","_id":"cjp5jncrc00aukif59gwqdrwi"},{"post_id":"cjp5jncqp009gkif5s911z2qa","tag_id":"cjp5jncr100a0kif5ixc0dxji","_id":"cjp5jncrc00avkif54wf7hj42"},{"post_id":"cjp5jncqq009hkif5p7v4r1e9","tag_id":"cjp5jncpn0065kif5zqyhysdw","_id":"cjp5jncrc00axkif5dlovyzh3"},{"post_id":"cjp5jncqq009hkif5p7v4r1e9","tag_id":"cjp5jncr400a8kif5eecuyfoj","_id":"cjp5jncrd00aykif5bkh9rbic"},{"post_id":"cjp5jncqr009jkif52b9k3pzq","tag_id":"cjp5jncr500aekif5i6p3kt25","_id":"cjp5jncrd00b0kif5ii76b49x"},{"post_id":"cjp5jncqr009jkif52b9k3pzq","tag_id":"cjp5jncpb004gkif571o3aquu","_id":"cjp5jncrd00b1kif5qtu0vqug"},{"post_id":"cjp5jncqr009jkif52b9k3pzq","tag_id":"cjp5jncr400a8kif5eecuyfoj","_id":"cjp5jncre00b3kif5w4hca1iq"},{"post_id":"cjp5jncqr009jkif52b9k3pzq","tag_id":"cjp5jncpc004hkif5ahnpbcjk","_id":"cjp5jncre00b4kif5j1hcp94n"},{"post_id":"cjp5jncqt009kkif5ff1qvvhx","tag_id":"cjp5jncr700amkif5z07dzf2n","_id":"cjp5jncre00b5kif5m7nzbzva"},{"post_id":"cjp5jncqt009kkif5ff1qvvhx","tag_id":"cjp5jncpl005xkif5308coq3t","_id":"cjp5jncre00b7kif5srxq5ox7"},{"post_id":"cjp5jncqt009kkif5ff1qvvhx","tag_id":"cjp5jncr800apkif5tuecrbjc","_id":"cjp5jncrf00b8kif5vfkkrlwo"},{"post_id":"cjp5jncqu009nkif5r47tytvz","tag_id":"cjp5jncpj005jkif5ohgopbcy","_id":"cjp5jncrf00bakif5dlpr6kkc"},{"post_id":"cjp5jncqu009nkif5r47tytvz","tag_id":"cjp5jncrb00atkif5fv1ywh1y","_id":"cjp5jncrf00bbkif5p9v9sk4d"},{"post_id":"cjp5jncqu009nkif5r47tytvz","tag_id":"cjp5jncpk005pkif56evx2djp","_id":"cjp5jncrg00bdkif526hoz29w"},{"post_id":"cjp5jncqu009nkif5r47tytvz","tag_id":"cjp5jncpk005qkif56lzki8nf","_id":"cjp5jncrh00bekif5rx2tdnis"},{"post_id":"cjp5jncr0009ykif52npq3rcp","tag_id":"cjp5jncrc00awkif5p27no1rz","_id":"cjp5jncrh00bgkif5ubjrowwv"},{"post_id":"cjp5jncr0009ykif52npq3rcp","tag_id":"cjp5jncrd00azkif56apgbmhi","_id":"cjp5jncrh00bhkif56tr1uxgz"},{"post_id":"cjp5jncr100a2kif5ohtebrw8","tag_id":"cjp5jncrd00b2kif5tiyvymg4","_id":"cjp5jncri00bjkif52v0ehafz"},{"post_id":"cjp5jncr100a2kif5ohtebrw8","tag_id":"cjp5jncre00b6kif5nn8gfh17","_id":"cjp5jncri00bkkif5hbvk776e"},{"post_id":"cjp5jncr100a2kif5ohtebrw8","tag_id":"cjp5jncrd00azkif56apgbmhi","_id":"cjp5jncri00blkif5thyw3dtl"},{"post_id":"cjp5jncr300a5kif5i7zc31g7","tag_id":"cjp5jncrd00b2kif5tiyvymg4","_id":"cjp5jncri00bmkif5ppvpkcbq"},{"post_id":"cjp5jncr300a5kif5i7zc31g7","tag_id":"cjp5jncre00b6kif5nn8gfh17","_id":"cjp5jncri00bnkif5wmlaxauh"},{"post_id":"cjp5jncr300a5kif5i7zc31g7","tag_id":"cjp5jncrd00azkif56apgbmhi","_id":"cjp5jncri00bokif55sjvp73v"},{"post_id":"cjp5jncsb00c5kif5xr4b7hu0","tag_id":"cjp5jncoh001skif5ti8fzvno","_id":"cjp5jncsf00c9kif51pf48gjb"},{"post_id":"cjp5jncsb00c5kif5xr4b7hu0","tag_id":"cjp5jnco80010kif5vqcpi0w0","_id":"cjp5jncsg00cbkif5pa1y1d4m"},{"post_id":"cjp5jncs100bpkif5daqzl96z","tag_id":"cjp5jncs400bskif5ehw47fge","_id":"cjp5jncsj00chkif56psrgs5m"},{"post_id":"cjp5jncs100bpkif5daqzl96z","tag_id":"cjp5jncpj005jkif5ohgopbcy","_id":"cjp5jncsl00ckkif571mdaa2t"},{"post_id":"cjp5jncs100bpkif5daqzl96z","tag_id":"cjp5jncs800bzkif5xye67ryb","_id":"cjp5jncsm00cpkif5ltxmx6nc"},{"post_id":"cjp5jncs100bpkif5daqzl96z","tag_id":"cjp5jncpk005qkif56lzki8nf","_id":"cjp5jncsn00crkif5crekzyug"},{"post_id":"cjp5jncs100bpkif5daqzl96z","tag_id":"cjp5jncsb00c4kif50m096tvo","_id":"cjp5jncso00cvkif5td2nnxr1"},{"post_id":"cjp5jncs100bpkif5daqzl96z","tag_id":"cjp5jncse00c8kif5x2kkovpg","_id":"cjp5jncsp00cykif5wbsrbbnr"},{"post_id":"cjp5jncs100bpkif5daqzl96z","tag_id":"cjp5jncr100a0kif5ixc0dxji","_id":"cjp5jncsr00d3kif52db6ajzi"},{"post_id":"cjp5jncs100bpkif5daqzl96z","tag_id":"cjp5jncr400a8kif5eecuyfoj","_id":"cjp5jncss00d5kif5vyuk5cz0"},{"post_id":"cjp5jncs300brkif5c5jxioc5","tag_id":"cjp5jncr100a0kif5ixc0dxji","_id":"cjp5jncst00d9kif5knochrwv"},{"post_id":"cjp5jncs300brkif5c5jxioc5","tag_id":"cjp5jncr400a8kif5eecuyfoj","_id":"cjp5jncsu00ddkif5pi5iori1"},{"post_id":"cjp5jncs300brkif5c5jxioc5","tag_id":"cjp5jncsh00cfkif5bqnhas8k","_id":"cjp5jncsv00dgkif5mqlykqtt"},{"post_id":"cjp5jncs300brkif5c5jxioc5","tag_id":"cjp5jncsm00cnkif5y6qppdp1","_id":"cjp5jncsw00djkif5mpqtea9o"},{"post_id":"cjp5jncs400btkif5dawk1ucc","tag_id":"cjp5jncso00cukif5h7hq4wjj","_id":"cjp5jnct200dukif5yi9a3ndw"},{"post_id":"cjp5jncs400btkif5dawk1ucc","tag_id":"cjp5jncsr00d2kif555512zmn","_id":"cjp5jnct300dxkif5hndhstz6"},{"post_id":"cjp5jncs400btkif5dawk1ucc","tag_id":"cjp5jncst00dakif5afcqsmve","_id":"cjp5jnct400e1kif5g15smin8"},{"post_id":"cjp5jncs400btkif5dawk1ucc","tag_id":"cjp5jncsw00dikif511m4m2hs","_id":"cjp5jnct500e5kif5uz69pfrh"},{"post_id":"cjp5jncs400btkif5dawk1ucc","tag_id":"cjp5jncsz00dokif58djme4ob","_id":"cjp5jnct700e9kif5faveaank"},{"post_id":"cjp5jncs400btkif5dawk1ucc","tag_id":"cjp5jncpk005pkif56evx2djp","_id":"cjp5jnct800edkif56jso5ezn"},{"post_id":"cjp5jncs600bukif52dy8oknm","tag_id":"cjp5jnct100dskif5y737nf9e","_id":"cjp5jnct900ehkif5fdjpnpk4"},{"post_id":"cjp5jncs600bukif52dy8oknm","tag_id":"cjp5jnct300dykif5ukgqrac1","_id":"cjp5jncta00elkif5mz6jdxic"},{"post_id":"cjp5jncs700bxkif59mff0xxi","tag_id":"cjp5jnct700e8kif5ljqfk8fc","_id":"cjp5jnctd00eqkif5ywwxoozu"},{"post_id":"cjp5jncs700bxkif59mff0xxi","tag_id":"cjp5jnct900egkif5r9spdztt","_id":"cjp5jncte00eskif5s4m2kdwk"},{"post_id":"cjp5jncs800c0kif5xc7vhhfv","tag_id":"cjp5jnctc00enkif59gto6e3x","_id":"cjp5jncth00f2kif5q76g11b8"},{"post_id":"cjp5jncs800c0kif5xc7vhhfv","tag_id":"cjp5jncte00etkif52sq47krc","_id":"cjp5jnctj00f5kif5mw1lxc47"},{"post_id":"cjp5jncs800c0kif5xc7vhhfv","tag_id":"cjp5jncpk005pkif56evx2djp","_id":"cjp5jnctk00f9kif59azdlhut"},{"post_id":"cjp5jncsd00c6kif5hckcx195","tag_id":"cjp5jncth00ezkif5btnbmtd9","_id":"cjp5jnctq00fpkif5g9fho6b0"},{"post_id":"cjp5jncsd00c6kif5hckcx195","tag_id":"cjp5jnctk00f7kif5qynbhtrh","_id":"cjp5jnctr00fskif5kd6qe7li"},{"post_id":"cjp5jncsd00c6kif5hckcx195","tag_id":"cjp5jnctm00ffkif522taagrs","_id":"cjp5jnctt00fxkif5qty89syn"},{"post_id":"cjp5jncto00fjkif5akwavosc","tag_id":"cjp5jncre00b6kif5nn8gfh17","_id":"cjp5jnctu00g0kif5fqqhzuvx"},{"post_id":"cjp5jncsf00cakif58cqa0txn","tag_id":"cjp5jncnu000ckif55xwxbomh","_id":"cjp5jnctx00g6kif5ne2wgg2h"},{"post_id":"cjp5jncsf00cakif58cqa0txn","tag_id":"cjp5jnctp00flkif54olmer2q","_id":"cjp5jnctx00g9kif52yh1vfxt"},{"post_id":"cjp5jncsf00cakif58cqa0txn","tag_id":"cjp5jncts00fukif540kkuoxb","_id":"cjp5jnctz00gekif5ybe4lo4v"},{"post_id":"cjp5jncsg00cckif5wii876v6","tag_id":"cjp5jncr100a0kif5ixc0dxji","_id":"cjp5jncu500gmkif582o19gif"},{"post_id":"cjp5jncsg00cckif5wii876v6","tag_id":"cjp5jnctv00g2kif5dvbvj7vd","_id":"cjp5jncu600gpkif5a7qdk3hc"},{"post_id":"cjp5jncsg00cckif5wii876v6","tag_id":"cjp5jncty00gbkif59osgzyb3","_id":"cjp5jncu800gukif56ilql55h"},{"post_id":"cjp5jncsi00cgkif50lq3swh5","tag_id":"cjp5jncu300gikif51apth5nn","_id":"cjp5jncuj00hfkif5sbnqscdy"},{"post_id":"cjp5jncsi00cgkif50lq3swh5","tag_id":"cjp5jncu700grkif5j6wv9quc","_id":"cjp5jncuk00hikif5xun5vg5y"},{"post_id":"cjp5jncsi00cgkif50lq3swh5","tag_id":"cjp5jncud00gzkif5eun9e9uz","_id":"cjp5jncul00hnkif52ln0q6gu"},{"post_id":"cjp5jncsi00cgkif50lq3swh5","tag_id":"cjp5jncuf00h6kif5byslueq3","_id":"cjp5jncun00hqkif59i9rc1my"},{"post_id":"cjp5jncsk00cikif5pg7p7ki3","tag_id":"cjp5jncui00hckif5ty79b8zt","_id":"cjp5jncut00i2kif5uk8rmv95"},{"post_id":"cjp5jncsk00cikif5pg7p7ki3","tag_id":"cjp5jncul00hlkif5p2u2qa97","_id":"cjp5jncuv00i6kif559wp4peg"},{"post_id":"cjp5jncsk00cikif5pg7p7ki3","tag_id":"cjp5jncuo00htkif5bklw1dto","_id":"cjp5jncuw00iakif5nkhjyb0h"},{"post_id":"cjp5jncsk00cikif5pg7p7ki3","tag_id":"cjp5jncnp0006kif59dh2m818","_id":"cjp5jncuy00iekif5a0k5zcij"},{"post_id":"cjp5jncsl00cmkif5wnn1jr12","tag_id":"cjp5jncu300gikif51apth5nn","_id":"cjp5jncuz00iikif5jtz6oh7p"},{"post_id":"cjp5jncv200iqkif5kcbqu4wt","tag_id":"cjp5jncpb004dkif5chbm9vxy","_id":"cjp5jncv500iwkif5xx5v36n9"},{"post_id":"cjp5jncv200iqkif5kcbqu4wt","tag_id":"cjp5jncpb004gkif571o3aquu","_id":"cjp5jncv700j0kif5ql9ukdw3"},{"post_id":"cjp5jncsm00cqkif5428021cx","tag_id":"cjp5jncuv00i8kif5xmxqv0jl","_id":"cjp5jncv800j4kif5d80d96bp"},{"post_id":"cjp5jncsm00cqkif5428021cx","tag_id":"cjp5jncuy00igkif5jc8yqhhm","_id":"cjp5jncva00j8kif566vg3nte"},{"post_id":"cjp5jncsm00cqkif5428021cx","tag_id":"cjp5jncv100iokif5vjhbxamp","_id":"cjp5jncvb00jbkif5apgm5wzh"},{"post_id":"cjp5jncsn00cskif5fwagwrsq","tag_id":"cjp5jncv500iukif5mmm2j3p4","_id":"cjp5jncvd00jgkif5ffcgzzbe"},{"post_id":"cjp5jncsn00cskif5fwagwrsq","tag_id":"cjp5jncnu000ckif55xwxbomh","_id":"cjp5jncve00jjkif5km2jjven"},{"post_id":"cjp5jncsn00cskif5fwagwrsq","tag_id":"cjp5jncv800j3kif5wwyuxdm0","_id":"cjp5jncvf00jokif5exy9ttd9"},{"post_id":"cjp5jncso00cwkif5eq07sxcl","tag_id":"cjp5jncvb00jckif5tuxdlkdg","_id":"cjp5jncvg00jrkif5kh6mseyr"},{"post_id":"cjp5jncvh00jskif5uyvbqhr3","tag_id":"cjp5jncuv00i8kif5xmxqv0jl","_id":"cjp5jncvj00jykif54gdcmhgz"},{"post_id":"cjp5jncvh00jskif5uyvbqhr3","tag_id":"cjp5jncv100iokif5vjhbxamp","_id":"cjp5jncvl00k2kif56pozev43"},{"post_id":"cjp5jncsp00czkif5m64xxuww","tag_id":"cjp5jncvf00jlkif56savidc9","_id":"cjp5jncvn00k9kif5rg7nd4kz"},{"post_id":"cjp5jncsp00czkif5m64xxuww","tag_id":"cjp5jncvi00jtkif5l7dg5dkz","_id":"cjp5jncvn00kbkif5ggjgxu2m"},{"post_id":"cjp5jncsp00czkif5m64xxuww","tag_id":"cjp5jncvl00k1kif5drbitylz","_id":"cjp5jncvn00kfkif5noruay0d"},{"post_id":"cjp5jncsr00d4kif5we77yn9i","tag_id":"cjp5jncr100a0kif5ixc0dxji","_id":"cjp5jncvo00kkkif5r3dz57ht"},{"post_id":"cjp5jncsr00d4kif5we77yn9i","tag_id":"cjp5jncvm00k6kif58hkn7rnb","_id":"cjp5jncvo00kmkif5k5hnqgag"},{"post_id":"cjp5jncsr00d4kif5we77yn9i","tag_id":"cjp5jnctv00g2kif5dvbvj7vd","_id":"cjp5jncvp00kqkif5f3qxycly"},{"post_id":"cjp5jncss00d6kif5n0sy2vmh","tag_id":"cjp5jncvo00khkif56ineo4qm","_id":"cjp5jncvs00l4kif5cf466gbo"},{"post_id":"cjp5jncss00d6kif5n0sy2vmh","tag_id":"cjp5jncvo00knkif5gklj7rj2","_id":"cjp5jncvs00l6kif5tmdf0u73"},{"post_id":"cjp5jncss00d6kif5n0sy2vmh","tag_id":"cjp5jncvp00ktkif5r6tdk7e7","_id":"cjp5jncvs00lakif5n406cqv2"},{"post_id":"cjp5jncss00d6kif5n0sy2vmh","tag_id":"cjp5jncvq00kxkif53lz7yu9n","_id":"cjp5jncvs00lckif558f83kfn"},{"post_id":"cjp5jncst00dbkif5bbwhs6md","tag_id":"cjp5jncvr00l1kif5jyzrsbd3","_id":"cjp5jncvt00lgkif5ujwx3793"},{"post_id":"cjp5jncsu00dekif51kxofwlo","tag_id":"cjp5jncvs00l7kif50bwph923","_id":"cjp5jncvw00lykif5jhwk0lcc"},{"post_id":"cjp5jncsu00dekif51kxofwlo","tag_id":"cjp5jncvq00kxkif53lz7yu9n","_id":"cjp5jncvw00m0kif5643u59m4"},{"post_id":"cjp5jncsu00dekif51kxofwlo","tag_id":"cjp5jncvu00ljkif5ghsb4cqk","_id":"cjp5jncvx00m4kif53zswa8d4"},{"post_id":"cjp5jncsu00dekif51kxofwlo","tag_id":"cjp5jncvu00lnkif5a4hthg4o","_id":"cjp5jncvx00m6kif5wut0y9af"},{"post_id":"cjp5jncsu00dekif51kxofwlo","tag_id":"cjp5jncvv00lrkif5hcyx64vy","_id":"cjp5jncvy00makif58tzutvyx"},{"post_id":"cjp5jncsv00dhkif508djr1im","tag_id":"cjp5jncr500aekif5i6p3kt25","_id":"cjp5jncvy00mckif5tvez96xz"},{"post_id":"cjp5jncsv00dhkif508djr1im","tag_id":"cjp5jncvw00lwkif5gr1rj5x5","_id":"cjp5jncvz00mgkif5lehuuh51"},{"post_id":"cjp5jncsw00dkkif5k9g8fmd0","tag_id":"cjp5jncvx00m3kif57wcy83a0","_id":"cjp5jncw000mmkif5ihfcw04k"},{"post_id":"cjp5jncsw00dkkif5k9g8fmd0","tag_id":"cjp5jncvy00m9kif5i4a7r87j","_id":"cjp5jncw000mpkif5t9owvvdx"},{"post_id":"cjp5jncsw00dkkif5k9g8fmd0","tag_id":"cjp5jncvz00mfkif5hpqrl3mv","_id":"cjp5jncw100mskif5ettaz1cm"},{"post_id":"cjp5jncsw00dkkif5k9g8fmd0","tag_id":"cjp5jncpb004gkif571o3aquu","_id":"cjp5jncw100mvkif52m0p5rp8"},{"post_id":"cjp5jncsw00dkkif5k9g8fmd0","tag_id":"cjp5jncr400a8kif5eecuyfoj","_id":"cjp5jncw100mykif5o4rwagg0"},{"post_id":"cjp5jncsx00dmkif5m4o3vd55","tag_id":"cjp5jncr400a8kif5eecuyfoj","_id":"cjp5jncw100mzkif51p9u38c9"},{"post_id":"cjp5jncsx00dmkif5m4o3vd55","tag_id":"cjp5jncvz00mkkif57oam9y9i","_id":"cjp5jncw200n2kif5ck22puqh"},{"post_id":"cjp5jncsz00dpkif537ssx9vi","tag_id":"cjp5jncw000mrkif5wqbcet5c","_id":"cjp5jncw200n3kif5ojley9mc"},{"post_id":"cjp5jnct200dtkif5fl7d77lj","tag_id":"cjp5jncuo00htkif5bklw1dto","_id":"cjp5jncw300n6kif5pef1r5h1"},{"post_id":"cjp5jnct200dtkif5fl7d77lj","tag_id":"cjp5jncw200n1kif5v6x92b9a","_id":"cjp5jncw300n9kif5f6mql675"},{"post_id":"cjp5jnct200dvkif5i3xqynqf","tag_id":"cjp5jncw200n5kif51x9n6kbu","_id":"cjp5jncw500ndkif5p3t2wggl"},{"post_id":"cjp5jnct200dvkif5i3xqynqf","tag_id":"cjp5jncw300nakif50ltqciy8","_id":"cjp5jncw500ngkif5y1k7metb"},{"post_id":"cjp5jnct400dzkif50c7xep5m","tag_id":"cjp5jncvq00kxkif53lz7yu9n","_id":"cjp5jncw800nrkif5vnr6epzu"},{"post_id":"cjp5jnct400dzkif50c7xep5m","tag_id":"cjp5jncsz00dokif58djme4ob","_id":"cjp5jncw900nukif5z1bp3ckt"},{"post_id":"cjp5jnct400dzkif50c7xep5m","tag_id":"cjp5jncw500nhkif5mh4iwk09","_id":"cjp5jncw900nxkif5yj5o6pq8"},{"post_id":"cjp5jnct400dzkif50c7xep5m","tag_id":"cjp5jncw600nlkif5z07syb2y","_id":"cjp5jncw900nzkif5t41kpcfh"},{"post_id":"cjp5jnct400e2kif5z5pg9i81","tag_id":"cjp5jncw800nqkif53f38de7l","_id":"cjp5jncwb00o8kif55ijhw8o5"},{"post_id":"cjp5jnct400e2kif5z5pg9i81","tag_id":"cjp5jncw900nwkif5jmiv6znn","_id":"cjp5jncwb00oakif5vfz3t5fk"},{"post_id":"cjp5jnct400e2kif5z5pg9i81","tag_id":"cjp5jncw900o0kif55dew404b","_id":"cjp5jncwc00ockif58ibganoy"},{"post_id":"cjp5jnct400e2kif5z5pg9i81","tag_id":"cjp5jncwa00o4kif59ih1gi2v","_id":"cjp5jncwc00ofkif5ruw3d47h"},{"post_id":"cjp5jnct600e6kif5fihc9xje","tag_id":"cjp5jncwb00o7kif5e9vv9i1o","_id":"cjp5jncwd00oikif56cz6ndrp"},{"post_id":"cjp5jnct700eakif5oa0miytg","tag_id":"cjp5jncwb00obkif5vimryojh","_id":"cjp5jncwe00opkif5xo9zmy24"},{"post_id":"cjp5jnct700eakif5oa0miytg","tag_id":"cjp5jncwd00ohkif5rx0rx8ky","_id":"cjp5jncwe00orkif5125zd88l"},{"post_id":"cjp5jnct800eekif5t8pk1e2k","tag_id":"cjp5jncwd00omkif51286pj57","_id":"cjp5jncwi00p0kif57kuuzmr6"},{"post_id":"cjp5jnct800eekif5t8pk1e2k","tag_id":"cjp5jncpc004lkif52knjk1iy","_id":"cjp5jncwi00p2kif5r6eegdpv"},{"post_id":"cjp5jnct800eekif5t8pk1e2k","tag_id":"cjp5jncwg00otkif5xujkmwdh","_id":"cjp5jncwi00p5kif5wzhsg9bk"},{"post_id":"cjp5jnct900eikif50avqlxx8","tag_id":"cjp5jncwd00ohkif5rx0rx8ky","_id":"cjp5jncwj00pbkif59k1gw9pe"},{"post_id":"cjp5jnct900eikif50avqlxx8","tag_id":"cjp5jncwi00p3kif5lg0q52bk","_id":"cjp5jncwj00pdkif5q1oksek6"},{"post_id":"cjp5jnctb00emkif59ksgaw93","tag_id":"cjp5jncwj00p8kif5n61m0adv","_id":"cjp5jncwl00plkif5ykrbbisv"},{"post_id":"cjp5jnctb00emkif59ksgaw93","tag_id":"cjp5jncwj00pekif51s5h8f2m","_id":"cjp5jncwl00pnkif5j9ailq3y"},{"post_id":"cjp5jnctc00eokif5og598uk9","tag_id":"cjp5jncwk00pjkif57be43dq4","_id":"cjp5jncwn00pwkif5tr0cw4hp"},{"post_id":"cjp5jnctc00eokif5og598uk9","tag_id":"cjp5jncpn0065kif5zqyhysdw","_id":"cjp5jncwn00pykif5lp532bnq"},{"post_id":"cjp5jnctc00eokif5og598uk9","tag_id":"cjp5jncwm00ppkif53naji7a2","_id":"cjp5jncwo00q2kif5xge86vj9"},{"post_id":"cjp5jnctd00erkif5bblzh8nr","tag_id":"cjp5jncwn00ptkif5q8b21spn","_id":"cjp5jncwq00qbkif5r3hcgif7"},{"post_id":"cjp5jnctd00erkif5bblzh8nr","tag_id":"cjp5jncwo00pzkif59skyq8cc","_id":"cjp5jncwq00qdkif5wmmbmt5d"},{"post_id":"cjp5jnctd00erkif5bblzh8nr","tag_id":"cjp5jncwo00q4kif5is4nozgy","_id":"cjp5jncwq00qhkif51ipzoerd"},{"post_id":"cjp5jncte00eukif52g4qqp03","tag_id":"cjp5jncwp00q8kif5w0z2dr53","_id":"cjp5jncws00qpkif5et17x425"},{"post_id":"cjp5jncte00eukif52g4qqp03","tag_id":"cjp5jncwq00qfkif5ya7dtu14","_id":"cjp5jncws00qrkif5upv705in"},{"post_id":"cjp5jncte00eukif52g4qqp03","tag_id":"cjp5jncwr00qikif562i8lllt","_id":"cjp5jncwt00qvkif536oiktu8"},{"post_id":"cjp5jnctg00eykif5puowwo7r","tag_id":"cjp5jncwr00qnkif5zmoghsg2","_id":"cjp5jncwt00qzkif5np8et2s2"},{"post_id":"cjp5jnctg00eykif5puowwo7r","tag_id":"cjp5jncws00qskif5mi7mgr2k","_id":"cjp5jncwu00r2kif5ag1qnsye"},{"post_id":"cjp5jnctg00eykif5puowwo7r","tag_id":"cjp5jncnp0006kif59dh2m818","_id":"cjp5jncwu00r5kif5s8ccnk7u"},{"post_id":"cjp5jncti00f3kif5se6zq2fz","tag_id":"cjp5jncwt00qykif58zfeutm1","_id":"cjp5jncww00rjkif50colbz3r"},{"post_id":"cjp5jncti00f3kif5se6zq2fz","tag_id":"cjp5jncwu00r4kif553y351jw","_id":"cjp5jncww00rkkif526nanir3"},{"post_id":"cjp5jncti00f3kif5se6zq2fz","tag_id":"cjp5jncwu00r8kif5ewogv3xp","_id":"cjp5jncwx00rmkif5etkmlp0c"},{"post_id":"cjp5jncti00f3kif5se6zq2fz","tag_id":"cjp5jncwv00rbkif54jtha3dx","_id":"cjp5jncwx00rnkif5eokycq9l"},{"post_id":"cjp5jncti00f3kif5se6zq2fz","tag_id":"cjp5jncr400a8kif5eecuyfoj","_id":"cjp5jncwx00rpkif5lviigu8n"},{"post_id":"cjp5jncti00f3kif5se6zq2fz","tag_id":"cjp5jncwv00rfkif5yc0vpzbr","_id":"cjp5jncwx00rqkif5dlsurzww"},{"post_id":"cjp5jnctj00f6kif5lvxi9c0n","tag_id":"cjp5jncr100a0kif5ixc0dxji","_id":"cjp5jncwx00rskif57us763tp"},{"post_id":"cjp5jnctj00f6kif5lvxi9c0n","tag_id":"cjp5jncww00rikif5w0gskl86","_id":"cjp5jncwx00rtkif5ijo2z190"},{"post_id":"cjp5jnctk00fakif5vr736i0j","tag_id":"cjp5jncww00rlkif54cxfudg8","_id":"cjp5jncwy00rwkif5ff6xil31"},{"post_id":"cjp5jnctk00fakif5vr736i0j","tag_id":"cjp5jncwx00rokif57x0fu6h5","_id":"cjp5jncwy00rxkif5460sbaj8"},{"post_id":"cjp5jnctk00fakif5vr736i0j","tag_id":"cjp5jncwx00rrkif5iv2lwcle","_id":"cjp5jncwy00rzkif5m5a0p2nq"},{"post_id":"cjp5jnctk00fakif5vr736i0j","tag_id":"cjp5jncwx00rukif50aqiu0oh","_id":"cjp5jncwy00s0kif5aeb1v2bj"},{"post_id":"cjp5jnctl00fdkif53n0j72rr","tag_id":"cjp5jncwy00rvkif5q47yqoh3","_id":"cjp5jncwz00s3kif5qoulvyer"},{"post_id":"cjp5jnctl00fdkif53n0j72rr","tag_id":"cjp5jncwy00rykif50khctv9o","_id":"cjp5jncwz00s4kif5egjhm3lu"},{"post_id":"cjp5jnctl00fdkif53n0j72rr","tag_id":"cjp5jncwy00s1kif55bu0qv7u","_id":"cjp5jncx000s6kif5koflo57n"},{"post_id":"cjp5jnctn00fgkif558dcpizg","tag_id":"cjp5jncnu000ckif55xwxbomh","_id":"cjp5jncx000s7kif5x9672ey9"},{"post_id":"cjp5jnctn00fgkif558dcpizg","tag_id":"cjp5jncwz00s2kif5xkxybk5o","_id":"cjp5jncx000s9kif5ys74gdwv"},{"post_id":"cjp5jnctn00fgkif558dcpizg","tag_id":"cjp5jncr400a8kif5eecuyfoj","_id":"cjp5jncx000sakif563qa3ff8"},{"post_id":"cjp5jnctp00fmkif5kkmrt1hn","tag_id":"cjp5jncwz00s5kif5ebro1aq2","_id":"cjp5jncx000sckif54fl0vmtd"},{"post_id":"cjp5jnctp00fmkif5kkmrt1hn","tag_id":"cjp5jnco80010kif5vqcpi0w0","_id":"cjp5jncx000sdkif5cxsicsbt"},{"post_id":"cjp5jnctp00fmkif5kkmrt1hn","tag_id":"cjp5jnct700e8kif5ljqfk8fc","_id":"cjp5jncx100sekif5ni13vtl1"},{"post_id":"cjp5jnctq00fqkif5jqh3ofdt","tag_id":"cjp5jncx000s8kif5wpcfp0z5","_id":"cjp5jncx100shkif5ntr2noiy"},{"post_id":"cjp5jnctq00fqkif5jqh3ofdt","tag_id":"cjp5jncx000sbkif52ab0eeg7","_id":"cjp5jncx100sikif5vwvn0r2l"},{"post_id":"cjp5jnctq00fqkif5jqh3ofdt","tag_id":"cjp5jncx100sfkif5wczbhano","_id":"cjp5jncx200skkif5x2vbxib4"},{"post_id":"cjp5jnctr00ftkif513ntvggf","tag_id":"cjp5jncx100sgkif5jf2jmn2w","_id":"cjp5jncx200slkif5ggjfw8og"},{"post_id":"cjp5jnctr00ftkif513ntvggf","tag_id":"cjp5jncpb004gkif571o3aquu","_id":"cjp5jncx300snkif5si8gli9c"},{"post_id":"cjp5jnctr00ftkif513ntvggf","tag_id":"cjp5jncpc004hkif5ahnpbcjk","_id":"cjp5jncx300sokif5mwl8u7tz"},{"post_id":"cjp5jnctt00fykif5stwehag2","tag_id":"cjp5jncwy00rvkif5q47yqoh3","_id":"cjp5jncx400srkif5sbkv622o"},{"post_id":"cjp5jnctt00fykif5stwehag2","tag_id":"cjp5jncwy00rykif50khctv9o","_id":"cjp5jncx400sskif50cz3v07o"},{"post_id":"cjp5jnctt00fykif5stwehag2","tag_id":"cjp5jncwy00s1kif55bu0qv7u","_id":"cjp5jncx400sukif5n31ugjcq"},{"post_id":"cjp5jnctu00g1kif5dcinej4j","tag_id":"cjp5jncx300sqkif58nptb854","_id":"cjp5jncx500sxkif56u3qdbfn"},{"post_id":"cjp5jnctu00g1kif5dcinej4j","tag_id":"cjp5jncx400stkif505qi5eik","_id":"cjp5jncx500sykif5q9gavli1"},{"post_id":"cjp5jnctu00g1kif5dcinej4j","tag_id":"cjp5jncx400svkif5nx80iwmz","_id":"cjp5jncx500t0kif54ugp8q1t"},{"post_id":"cjp5jnctw00g5kif5jz1o91rv","tag_id":"cjp5jncx400swkif5sz2c6wn2","_id":"cjp5jncx500t1kif5tcc3bpwv"},{"post_id":"cjp5jnctx00g8kif5i52w2hxh","tag_id":"cjp5jncx500szkif5kju3kzhn","_id":"cjp5jncx700t6kif5zq2085xl"},{"post_id":"cjp5jnctx00g8kif5i52w2hxh","tag_id":"cjp5jncx500t2kif5vhlbe34e","_id":"cjp5jncx700t7kif54odaldyo"},{"post_id":"cjp5jnctx00g8kif5i52w2hxh","tag_id":"cjp5jncx600t3kif5c5fq9q0p","_id":"cjp5jncx700t9kif58t0mxlif"},{"post_id":"cjp5jnctx00g8kif5i52w2hxh","tag_id":"cjp5jncnp0006kif59dh2m818","_id":"cjp5jncx700takif5m6e0nf4d"},{"post_id":"cjp5jnctx00g8kif5i52w2hxh","tag_id":"cjp5jncx600t4kif5qn9y13y9","_id":"cjp5jncx800tckif5xs2fwn6j"},{"post_id":"cjp5jncty00gdkif5gubcaecn","tag_id":"cjp5jncx600t5kif50oxen2gv","_id":"cjp5jncx800tdkif5113o3v81"},{"post_id":"cjp5jncty00gdkif5gubcaecn","tag_id":"cjp5jncnu000ckif55xwxbomh","_id":"cjp5jncx800tfkif5r81xxv99"},{"post_id":"cjp5jncty00gdkif5gubcaecn","tag_id":"cjp5jncoh001skif5ti8fzvno","_id":"cjp5jncx800tgkif5iwo94ago"},{"post_id":"cjp5jncty00gdkif5gubcaecn","tag_id":"cjp5jncx700t8kif5uvnd9t3b","_id":"cjp5jncx900tikif5k73imcr5"},{"post_id":"cjp5jnctz00ggkif5rqb8v1m6","tag_id":"cjp5jncx700tbkif5mcsv1xzv","_id":"cjp5jncx900tkkif5qdm0lj6d"},{"post_id":"cjp5jnctz00ggkif5rqb8v1m6","tag_id":"cjp5jncwx00rrkif5iv2lwcle","_id":"cjp5jncx900tlkif5x7lhlaa4"},{"post_id":"cjp5jnctz00ggkif5rqb8v1m6","tag_id":"cjp5jncx800thkif5vco6jgfd","_id":"cjp5jncxa00tnkif5dfacy26b"},{"post_id":"cjp5jnctz00ggkif5rqb8v1m6","tag_id":"cjp5jncr100a0kif5ixc0dxji","_id":"cjp5jncxa00tokif5jy4nm1wd"},{"post_id":"cjp5jncu300gjkif5k4ghdj5c","tag_id":"cjp5jncpb004akif51fx6gred","_id":"cjp5jncxb00trkif5r1lv7a6q"},{"post_id":"cjp5jncu300gjkif5k4ghdj5c","tag_id":"cjp5jncr500aekif5i6p3kt25","_id":"cjp5jncxb00tskif5r4o75jh2"},{"post_id":"cjp5jncu300gjkif5k4ghdj5c","tag_id":"cjp5jncpb004dkif5chbm9vxy","_id":"cjp5jncxb00tukif5nqkjdjst"},{"post_id":"cjp5jncu300gjkif5k4ghdj5c","tag_id":"cjp5jncx900tjkif51z5vws1d","_id":"cjp5jncxb00tvkif5vt2rqa04"},{"post_id":"cjp5jncu300gjkif5k4ghdj5c","tag_id":"cjp5jncx900tmkif5q2uhkcan","_id":"cjp5jncxb00txkif5d9au3hr1"},{"post_id":"cjp5jncu300gjkif5k4ghdj5c","tag_id":"cjp5jncxa00tpkif5nm3wyj6t","_id":"cjp5jncxb00tykif5y8xzs359"},{"post_id":"cjp5jncu300gjkif5k4ghdj5c","tag_id":"cjp5jncpb004gkif571o3aquu","_id":"cjp5jncxc00u0kif5wqux4tqo"},{"post_id":"cjp5jncu500gnkif5c0bdip79","tag_id":"cjp5jncxa00tqkif5kkjdiagm","_id":"cjp5jncxc00u3kif5a1rgltzq"},{"post_id":"cjp5jncu500gnkif5c0bdip79","tag_id":"cjp5jncxb00ttkif5tt1bdouq","_id":"cjp5jncxd00u4kif5t69ug02f"},{"post_id":"cjp5jncu500gnkif5c0bdip79","tag_id":"cjp5jncxb00twkif5prbiysxv","_id":"cjp5jncxd00u6kif5bi813loo"},{"post_id":"cjp5jncu500gnkif5c0bdip79","tag_id":"cjp5jncxb00tzkif5fx10rfnl","_id":"cjp5jncxd00u7kif55j1zv6ae"},{"post_id":"cjp5jncu500gnkif5c0bdip79","tag_id":"cjp5jncxc00u1kif5zx0xd6ni","_id":"cjp5jncxd00u9kif57nqqyuqa"},{"post_id":"cjp5jncu700gqkif5ar3akk1h","tag_id":"cjp5jncxc00u2kif59gxb88r5","_id":"cjp5jncxe00uckif5p7cjopkw"},{"post_id":"cjp5jncu700gqkif5ar3akk1h","tag_id":"cjp5jncxd00u5kif5qgqj95k5","_id":"cjp5jncxe00udkif5nn86qiq7"},{"post_id":"cjp5jncu700gqkif5ar3akk1h","tag_id":"cjp5jncxd00u8kif58z5hsqkv","_id":"cjp5jncxf00ufkif5t98z5swb"},{"post_id":"cjp5jncu700gqkif5ar3akk1h","tag_id":"cjp5jncxd00uakif5oivj51xl","_id":"cjp5jncxf00ugkif5rojipkmg"},{"post_id":"cjp5jncu700gqkif5ar3akk1h","tag_id":"cjp5jncr100a0kif5ixc0dxji","_id":"cjp5jncxf00uikif5rxds7sqx"},{"post_id":"cjp5jncu700gqkif5ar3akk1h","tag_id":"cjp5jnctv00g2kif5dvbvj7vd","_id":"cjp5jncxf00ujkif57kjdpunz"},{"post_id":"cjp5jncu900gvkif5uf1nnafi","tag_id":"cjp5jncxe00ubkif589g3eszd","_id":"cjp5jncxg00ulkif579xtkzoj"},{"post_id":"cjp5jncu900gvkif5uf1nnafi","tag_id":"cjp5jncxc00u1kif5zx0xd6ni","_id":"cjp5jncxg00umkif5ztret0ak"},{"post_id":"cjp5jncub00gxkif5c9j1i6it","tag_id":"cjp5jncxf00uhkif50dnlwaji","_id":"cjp5jncxh00uqkif5ahq15jb2"},{"post_id":"cjp5jncub00gxkif5c9j1i6it","tag_id":"cjp5jncxg00ukkif58duy3k82","_id":"cjp5jncxh00urkif52az7rvo4"},{"post_id":"cjp5jncub00gxkif5c9j1i6it","tag_id":"cjp5jncxg00unkif5qmw2qoql","_id":"cjp5jncxi00utkif5vlmy0rxo"},{"post_id":"cjp5jncub00gxkif5c9j1i6it","tag_id":"cjp5jncxg00uokif5f3enjb3c","_id":"cjp5jncxi00uukif5azg9vj2x"},{"post_id":"cjp5jncud00h1kif5q9jvuxs7","tag_id":"cjp5jncwz00s5kif5ebro1aq2","_id":"cjp5jncxi00uwkif5nuctrpou"},{"post_id":"cjp5jncue00h3kif58bvexcat","tag_id":"cjp5jncwk00pjkif57be43dq4","_id":"cjp5jncxk00v0kif5j5w2sp9j"},{"post_id":"cjp5jncue00h3kif58bvexcat","tag_id":"cjp5jncxi00uvkif5948tdenf","_id":"cjp5jncxk00v1kif5ejuijqpx"},{"post_id":"cjp5jncue00h3kif58bvexcat","tag_id":"cjp5jncwd00ohkif5rx0rx8ky","_id":"cjp5jncxl00v3kif54g2mf238"},{"post_id":"cjp5jncue00h3kif58bvexcat","tag_id":"cjp5jncxj00uykif56zfh5mbe","_id":"cjp5jncxl00v4kif5x74w7udz"},{"post_id":"cjp5jncug00h7kif5ropwwemh","tag_id":"cjp5jncxk00uzkif5k5pfplcs","_id":"cjp5jncxm00v8kif5sqzrsa7z"},{"post_id":"cjp5jncug00h7kif5ropwwemh","tag_id":"cjp5jncxk00v2kif5af635a12","_id":"cjp5jncxm00v9kif5smiu703g"},{"post_id":"cjp5jncug00h7kif5ropwwemh","tag_id":"cjp5jncxl00v5kif58r6y8fc5","_id":"cjp5jncxm00vbkif528ert5v4"},{"post_id":"cjp5jncug00h7kif5ropwwemh","tag_id":"cjp5jncxl00v6kif5xaqgmo2q","_id":"cjp5jncxm00vckif5po8cjili"},{"post_id":"cjp5jncuh00h9kif5v854vyhj","tag_id":"cjp5jncxl00v7kif5jr3ur3ys","_id":"cjp5jncxn00vekif5y4kf7h17"},{"post_id":"cjp5jncuj00hgkif54yqbjar2","tag_id":"cjp5jncxm00vakif503jzw71t","_id":"cjp5jncxo00vjkif543nomk8r"},{"post_id":"cjp5jncuj00hgkif54yqbjar2","tag_id":"cjp5jncxm00vdkif549g8svpr","_id":"cjp5jncxo00vkkif5az855t8d"},{"post_id":"cjp5jncuj00hgkif54yqbjar2","tag_id":"cjp5jncxn00vfkif577pgkt0u","_id":"cjp5jncxp00vmkif542qupptt"},{"post_id":"cjp5jncuj00hgkif54yqbjar2","tag_id":"cjp5jncxn00vgkif50tydm45l","_id":"cjp5jncxp00vnkif5vn4atto1"},{"post_id":"cjp5jncuj00hgkif54yqbjar2","tag_id":"cjp5jncnp0006kif59dh2m818","_id":"cjp5jncxp00vpkif5wm23lfhs"},{"post_id":"cjp5jncuj00hgkif54yqbjar2","tag_id":"cjp5jncpc004hkif5ahnpbcjk","_id":"cjp5jncxq00vqkif5ve23akta"},{"post_id":"cjp5jncuj00hgkif54yqbjar2","tag_id":"cjp5jncxn00vhkif5tg69rmw5","_id":"cjp5jncxq00vskif5t67zvu5i"},{"post_id":"cjp5jncuk00hkkif5m8zsz1u7","tag_id":"cjp5jncxn00vikif5rb1wqsn0","_id":"cjp5jncxq00vtkif5xm4hqnrq"},{"post_id":"cjp5jncuk00hkkif5m8zsz1u7","tag_id":"cjp5jncvr00l1kif5jyzrsbd3","_id":"cjp5jncxq00vvkif58gcrbbra"},{"post_id":"cjp5jncum00hokif52xasx7tp","tag_id":"cjp5jncxp00vokif50rbzf2is","_id":"cjp5jncxq00vwkif5wkd0ghg8"},{"post_id":"cjp5jncum00hokif52xasx7tp","tag_id":"cjp5jncxq00vrkif59dpjmw3w","_id":"cjp5jncxr00vxkif5gblq6enk"},{"post_id":"cjp5jncum00hokif52xasx7tp","tag_id":"cjp5jncpn0065kif5zqyhysdw","_id":"cjp5jncxr00vzkif5cljha104"},{"post_id":"cjp5jncuo00hvkif58wc76taa","tag_id":"cjp5jncxq00vukif5iyfc2gdh","_id":"cjp5jncxr00w0kif5jhnbrrnw"},{"post_id":"cjp5jncup00hykif51z6x3td4","tag_id":"cjp5jncxr00vykif50mssfiw5","_id":"cjp5jncxs00w4kif5dskeacb2"},{"post_id":"cjp5jncup00hykif51z6x3td4","tag_id":"cjp5jncxr00w1kif55k97kckq","_id":"cjp5jncxs00w5kif5w2gt3woz"},{"post_id":"cjp5jncup00hykif51z6x3td4","tag_id":"cjp5jncnp0006kif59dh2m818","_id":"cjp5jncxt00w7kif5od15dyuj"},{"post_id":"cjp5jncup00hykif51z6x3td4","tag_id":"cjp5jncr100a0kif5ixc0dxji","_id":"cjp5jncxt00w8kif50qg0emza"},{"post_id":"cjp5jncup00hykif51z6x3td4","tag_id":"cjp5jncxr00w2kif59i49htm7","_id":"cjp5jncxt00wakif52gvmjc8g"},{"post_id":"cjp5jncus00i1kif5gqurcbei","tag_id":"cjp5jncoh001skif5ti8fzvno","_id":"cjp5jncxt00wbkif53z7zmfam"},{"post_id":"cjp5jncus00i1kif5gqurcbei","tag_id":"cjp5jncxs00w3kif5rdzavjfu","_id":"cjp5jncxu00wdkif5bktqh2zz"},{"post_id":"cjp5jncus00i1kif5gqurcbei","tag_id":"cjp5jncnp0006kif59dh2m818","_id":"cjp5jncxu00wekif51dxt4z8k"},{"post_id":"cjp5jncus00i1kif5gqurcbei","tag_id":"cjp5jncr100a0kif5ixc0dxji","_id":"cjp5jncxu00wfkif5lonwcwcw"},{"post_id":"cjp5jncus00i1kif5gqurcbei","tag_id":"cjp5jncxs00w6kif57xczc8g2","_id":"cjp5jncxu00whkif54ituocba"},{"post_id":"cjp5jncus00i1kif5gqurcbei","tag_id":"cjp5jncr400a8kif5eecuyfoj","_id":"cjp5jncxu00wikif5np8ws8nc"},{"post_id":"cjp5jncuu00i4kif5599vmfe1","tag_id":"cjp5jncxt00w9kif5vxs9f3no","_id":"cjp5jncxv00wkkif57epy1e9n"},{"post_id":"cjp5jncuu00i4kif5599vmfe1","tag_id":"cjp5jncxu00wckif5t0fdh9vc","_id":"cjp5jncxv00wlkif5ra8s33ou"},{"post_id":"cjp5jncuv00i9kif5m1q6hn5h","tag_id":"cjp5jncxu00wgkif5v13ru306","_id":"cjp5jncxx00wrkif5wpq0wll3"},{"post_id":"cjp5jncuv00i9kif5m1q6hn5h","tag_id":"cjp5jncxu00wjkif5xjck3zzh","_id":"cjp5jncxx00wskif55ip56kfp"},{"post_id":"cjp5jncuv00i9kif5m1q6hn5h","tag_id":"cjp5jncxv00wmkif5efz1omkx","_id":"cjp5jncxx00wukif5nnzk7fxj"},{"post_id":"cjp5jncuv00i9kif5m1q6hn5h","tag_id":"cjp5jncxv00wnkif5bvv69u1a","_id":"cjp5jncxx00wvkif5x3wicl4p"},{"post_id":"cjp5jncuv00i9kif5m1q6hn5h","tag_id":"cjp5jncxv00wokif5r68bkuzl","_id":"cjp5jncxy00wxkif5rqma313c"},{"post_id":"cjp5jncuv00i9kif5m1q6hn5h","tag_id":"cjp5jncxw00wpkif5h1gni8nx","_id":"cjp5jncxy00wykif5v2ftzwmg"},{"post_id":"cjp5jncuw00ickif5zv3ya858","tag_id":"cjp5jncxw00wqkif5v6ce94cp","_id":"cjp5jncxz00x0kif52oloomhp"},{"post_id":"cjp5jncuw00ickif5zv3ya858","tag_id":"cjp5jncxl00v5kif58r6y8fc5","_id":"cjp5jncy000x1kif5sqjn71cq"},{"post_id":"cjp5jncuw00ickif5zv3ya858","tag_id":"cjp5jncwz00s5kif5ebro1aq2","_id":"cjp5jncy000x3kif5ojss5wsu"},{"post_id":"cjp5jncuy00ihkif5ub6fcmp1","tag_id":"cjp5jncnu000ckif55xwxbomh","_id":"cjp5jncy100x5kif536m8i2iv"},{"post_id":"cjp5jncuy00ihkif5ub6fcmp1","tag_id":"cjp5jncxy00wzkif5bvggbp3t","_id":"cjp5jncy100x6kif5xt19f6ku"},{"post_id":"cjp5jncuy00ihkif5ub6fcmp1","tag_id":"cjp5jncnp0006kif59dh2m818","_id":"cjp5jncy100x8kif5bdfb2qp9"},{"post_id":"cjp5jncuy00ihkif5ub6fcmp1","tag_id":"cjp5jncr400a8kif5eecuyfoj","_id":"cjp5jncy100x9kif5zn6v36h2"},{"post_id":"cjp5jncuy00ihkif5ub6fcmp1","tag_id":"cjp5jncy000x2kif5mpp4lxd5","_id":"cjp5jncy200xbkif55ywk2tvo"},{"post_id":"cjp5jncuz00ikkif5oncn6bd9","tag_id":"cjp5jncy000x4kif50935va9r","_id":"cjp5jncy200xckif58aoiicv8"},{"post_id":"cjp5jncuz00ikkif5oncn6bd9","tag_id":"cjp5jncy100x7kif5cvnvk0pd","_id":"cjp5jncy300xekif54sxslts6"},{"post_id":"cjp5jncuz00ikkif5oncn6bd9","tag_id":"cjp5jnct700e8kif5ljqfk8fc","_id":"cjp5jncy300xfkif5m49qkwsn"},{"post_id":"cjp5jncv100inkif5l6yqrffd","tag_id":"cjp5jncnu000ckif55xwxbomh","_id":"cjp5jncy500xjkif5ui8q4bm5"},{"post_id":"cjp5jncv100inkif5l6yqrffd","tag_id":"cjp5jncxu00wjkif5xjck3zzh","_id":"cjp5jncy500xkkif59qp0pz6v"},{"post_id":"cjp5jncv100inkif5l6yqrffd","tag_id":"cjp5jncxv00wokif5r68bkuzl","_id":"cjp5jncy500xmkif5thdy0ss5"},{"post_id":"cjp5jncv100inkif5l6yqrffd","tag_id":"cjp5jncy300xgkif5fvp61oz6","_id":"cjp5jncy500xnkif5oz7p87hy"},{"post_id":"cjp5jncv100inkif5l6yqrffd","tag_id":"cjp5jncy300xhkif5nhr6b385","_id":"cjp5jncy500xpkif5qs82vmgp"},{"post_id":"cjp5jncv400itkif5s6dengf2","tag_id":"cjp5jncy400xikif5yg4gnlvr","_id":"cjp5jncy900xykif5m2j9i1xk"},{"post_id":"cjp5jncv400itkif5s6dengf2","tag_id":"cjp5jncy500xlkif5s72a4zy1","_id":"cjp5jncy900xzkif5hn1km4ql"},{"post_id":"cjp5jncv400itkif5s6dengf2","tag_id":"cjp5jncx500szkif5kju3kzhn","_id":"cjp5jncya00y1kif5c7ir74ky"},{"post_id":"cjp5jncv400itkif5s6dengf2","tag_id":"cjp5jncy500xqkif53uqihwme","_id":"cjp5jncya00y2kif5rus1qcoy"},{"post_id":"cjp5jncv400itkif5s6dengf2","tag_id":"cjp5jncy600xrkif59bldcwiz","_id":"cjp5jncya00y4kif5fb466s5m"},{"post_id":"cjp5jncv400itkif5s6dengf2","tag_id":"cjp5jncy600xskif5t8x6rz2u","_id":"cjp5jncya00y5kif5nlz2z8p8"},{"post_id":"cjp5jncv400itkif5s6dengf2","tag_id":"cjp5jncy700xtkif5g9stvynj","_id":"cjp5jncyb00y7kif5rjarhhsq"},{"post_id":"cjp5jncv400itkif5s6dengf2","tag_id":"cjp5jncnp0006kif59dh2m818","_id":"cjp5jncyb00y8kif5djx1wlix"},{"post_id":"cjp5jncv400itkif5s6dengf2","tag_id":"cjp5jncr400a8kif5eecuyfoj","_id":"cjp5jncyb00yakif533fkrnk7"},{"post_id":"cjp5jncv400itkif5s6dengf2","tag_id":"cjp5jncy700xukif5i270yc7d","_id":"cjp5jncyb00ybkif5mqt6n3vp"},{"post_id":"cjp5jncv400itkif5s6dengf2","tag_id":"cjp5jncy700xvkif52pltib32","_id":"cjp5jncyb00yckif5vwzgze5p"},{"post_id":"cjp5jncv400itkif5s6dengf2","tag_id":"cjp5jncy800xwkif5qdbruchs","_id":"cjp5jncyb00yekif5f4fkptq7"},{"post_id":"cjp5jncv500ixkif539of8q45","tag_id":"cjp5jncy800xxkif5iiqaojke","_id":"cjp5jncyc00yfkif5v5oegke5"},{"post_id":"cjp5jncv500ixkif539of8q45","tag_id":"cjp5jncwz00s5kif5ebro1aq2","_id":"cjp5jncyc00yhkif50us8z7gr"},{"post_id":"cjp5jncv500ixkif539of8q45","tag_id":"cjp5jncya00y3kif5ybxjgqdv","_id":"cjp5jncyc00yikif59kh7i3ec"},{"post_id":"cjp5jncv700j1kif5gu917bdb","tag_id":"cjp5jncya00y6kif5tvn4ddna","_id":"cjp5jncye00ylkif5k1do8y9w"},{"post_id":"cjp5jncv700j1kif5gu917bdb","tag_id":"cjp5jncyb00y9kif5fkazyn5q","_id":"cjp5jncye00ymkif5oki8nqlz"},{"post_id":"cjp5jncv700j1kif5gu917bdb","tag_id":"cjp5jncyb00ydkif5jv9rgt99","_id":"cjp5jncye00yokif5gbmiuxov"},{"post_id":"cjp5jncv700j1kif5gu917bdb","tag_id":"cjp5jncof001mkif5zkybitr3","_id":"cjp5jncye00ypkif52hga4tp9"},{"post_id":"cjp5jncv700j1kif5gu917bdb","tag_id":"cjp5jncxb00twkif5prbiysxv","_id":"cjp5jncyf00yrkif501j3o9vm"},{"post_id":"cjp5jncv700j1kif5gu917bdb","tag_id":"cjp5jncr100a0kif5ixc0dxji","_id":"cjp5jncyf00yskif5j31air7x"},{"post_id":"cjp5jncv700j1kif5gu917bdb","tag_id":"cjp5jncyc00yjkif5qbwc3fgo","_id":"cjp5jncyg00yukif52kzt7uqq"},{"post_id":"cjp5jncv800j5kif5n8jyzrck","tag_id":"cjp5jncxl00v7kif5jr3ur3ys","_id":"cjp5jncyg00yvkif5ihay6rt3"},{"post_id":"cjp5jncva00j9kif596q4n4a2","tag_id":"cjp5jncnu000ckif55xwxbomh","_id":"cjp5jncyg00yxkif5ndqjoou3"},{"post_id":"cjp5jncva00j9kif596q4n4a2","tag_id":"cjp5jncnp0006kif59dh2m818","_id":"cjp5jncyh00yykif5go9kdjq2"},{"post_id":"cjp5jncva00j9kif596q4n4a2","tag_id":"cjp5jncr100a0kif5ixc0dxji","_id":"cjp5jncyh00z0kif5khh2cfom"},{"post_id":"cjp5jncva00j9kif596q4n4a2","tag_id":"cjp5jncr400a8kif5eecuyfoj","_id":"cjp5jncyj00z1kif5jy7n81s1"},{"post_id":"cjp5jncva00j9kif596q4n4a2","tag_id":"cjp5jncye00ynkif521cjlj55","_id":"cjp5jncyj00z2kif5gemngpqa"},{"post_id":"cjp5jncvb00jdkif5jaiii4yu","tag_id":"cjp5jncye00yqkif5afz5ghp2","_id":"cjp5jncyk00z4kif53tw8qffk"},{"post_id":"cjp5jncvb00jdkif5jaiii4yu","tag_id":"cjp5jncr100a0kif5ixc0dxji","_id":"cjp5jncyk00z5kif5m4y3sdqw"},{"post_id":"cjp5jncvb00jdkif5jaiii4yu","tag_id":"cjp5jncyf00ytkif55mox6wqn","_id":"cjp5jncyk00z7kif5l21kfxzu"},{"post_id":"cjp5jncvd00jhkif5q1czk4p5","tag_id":"cjp5jncvo00knkif5gklj7rj2","_id":"cjp5jncyk00z8kif57h6f4i1k"},{"post_id":"cjp5jncvd00jhkif5q1czk4p5","tag_id":"cjp5jncyh00yzkif5oftbr2nw","_id":"cjp5jncyl00zakif5kd930ndm"},{"post_id":"cjp5jncve00jkkif5zg0l14wi","tag_id":"cjp5jncvf00jlkif56savidc9","_id":"cjp5jncyl00zbkif55ffgr3wo"},{"post_id":"cjp5jncve00jkkif5zg0l14wi","tag_id":"cjp5jncnu000ckif55xwxbomh","_id":"cjp5jncym00zdkif57ko7ewyh"},{"post_id":"cjp5jncve00jkkif5zg0l14wi","tag_id":"cjp5jncyk00z6kif5z2c6bgan","_id":"cjp5jncym00zekif57youpd0p"},{"post_id":"cjp5jncvg00jpkif5pprfms9k","tag_id":"cjp5jncyb00y9kif5fkazyn5q","_id":"cjp5jncyn00zikif57kspxs6x"},{"post_id":"cjp5jncvg00jpkif5pprfms9k","tag_id":"cjp5jncxa00tqkif5kkjdiagm","_id":"cjp5jncyn00zjkif59td33ccd"},{"post_id":"cjp5jncvg00jpkif5pprfms9k","tag_id":"cjp5jncym00zfkif5rvs7h30j","_id":"cjp5jncyo00zlkif5uwlnqobo"},{"post_id":"cjp5jncvg00jpkif5pprfms9k","tag_id":"cjp5jncr100a0kif5ixc0dxji","_id":"cjp5jncyo00zmkif5wfwl90dg"},{"post_id":"cjp5jncvg00jpkif5pprfms9k","tag_id":"cjp5jncym00zgkif52dmero85","_id":"cjp5jncyp00zokif587v8jnj2"},{"post_id":"cjp5jncvi00jwkif5xg0ktg01","tag_id":"cjp5jncuo00htkif5bklw1dto","_id":"cjp5jncyp00zpkif5n2xto69j"},{"post_id":"cjp5jncvi00jwkif5xg0ktg01","tag_id":"cjp5jncyn00zhkif5fdh60abj","_id":"cjp5jncyq00zqkif54dj0u6f6"},{"post_id":"cjp5jncvj00jzkif5q05jfbj6","tag_id":"cjp5jncxu00wjkif5xjck3zzh","_id":"cjp5jncyq00zrkif5h83tv2iy"},{"post_id":"cjp5jncvj00jzkif5q05jfbj6","tag_id":"cjp5jncwd00ohkif5rx0rx8ky","_id":"cjp5jncyq00zskif5n7hzwbe3"},{"post_id":"cjp5jncz000ztkif516xiler9","tag_id":"cjp5jncq5008pkif518ywnry6","_id":"cjp5jnczn010tkif519pz4dxa"},{"post_id":"cjp5jncz000ztkif516xiler9","tag_id":"cjp5jncz300zwkif50ejzt6b5","_id":"cjp5jnczn010ukif5zijvlxxr"},{"post_id":"cjp5jncz000ztkif516xiler9","tag_id":"cjp5jncz70101kif5agng2od8","_id":"cjp5jnczo010xkif56jusn610"},{"post_id":"cjp5jncz000ztkif516xiler9","tag_id":"cjp5jnczb0107kif5m5ldwnf2","_id":"cjp5jnczo010ykif5rtuctw0u"},{"post_id":"cjp5jncz000ztkif516xiler9","tag_id":"cjp5jnczf010dkif5bbll8uuq","_id":"cjp5jnczo0111kif5o8rtsccw"},{"post_id":"cjp5jncz000ztkif516xiler9","tag_id":"cjp5jnczj010jkif5sys9o4ow","_id":"cjp5jnczo0112kif52xsn071k"},{"post_id":"cjp5jncz000ztkif516xiler9","tag_id":"cjp5jnczl010okif59en8f1dp","_id":"cjp5jnczp0116kif5wfmgoblf"},{"post_id":"cjp5jncz100zukif5md83krt1","tag_id":"cjp5jnczm010skif5v0y1n4eo","_id":"cjp5jnczr011ckif5cn2ijlkk"},{"post_id":"cjp5jncz100zukif5md83krt1","tag_id":"cjp5jnczn010wkif5lupw5iwb","_id":"cjp5jnczr011dkif5zfp7g2qc"},{"post_id":"cjp5jncz100zukif5md83krt1","tag_id":"cjp5jnczo0110kif5gnxji0e0","_id":"cjp5jnczs011hkif5g0cmakt9"},{"post_id":"cjp5jncz100zukif5md83krt1","tag_id":"cjp5jnczp0115kif5c2c8ogq7","_id":"cjp5jnczs011jkif5tqq36mmy"},{"post_id":"cjp5jncz300zxkif58x7dhvrc","tag_id":"cjp5jnczq011akif5nc4z9it0","_id":"cjp5jnczw011xkif53j8k0owm"},{"post_id":"cjp5jncz300zxkif58x7dhvrc","tag_id":"cjp5jnczr011gkif5jflln0zz","_id":"cjp5jnczx011zkif5m4y9p5hk"},{"post_id":"cjp5jncz300zxkif58x7dhvrc","tag_id":"cjp5jnczs011lkif5x1mg0s36","_id":"cjp5jnczx0121kif5cpe60xfz"},{"post_id":"cjp5jncz300zxkif58x7dhvrc","tag_id":"cjp5jnczu011pkif5lmtbgrkh","_id":"cjp5jnczx0122kif56lukofox"},{"post_id":"cjp5jncz300zxkif58x7dhvrc","tag_id":"cjp5jnczu011tkif5aa21pr28","_id":"cjp5jnczy0124kif5sv5rx8u0"},{"post_id":"cjp5jncz300zxkif58x7dhvrc","tag_id":"cjp5jnczv011ukif5och020xp","_id":"cjp5jnczz0126kif5vu062noh"},{"post_id":"cjp5jncz500zykif5t4qe2pri","tag_id":"cjp5jncpb004dkif5chbm9vxy","_id":"cjp5jnczz0128kif5q54a7eoo"},{"post_id":"cjp5jncz500zykif5t4qe2pri","tag_id":"cjp5jncpb004gkif571o3aquu","_id":"cjp5jnczz0129kif5g1kof8bb"},{"post_id":"cjp5jncz500zykif5t4qe2pri","tag_id":"cjp5jnczv011wkif57ad80nzq","_id":"cjp5jnczz012bkif50h4n0g7y"},{"post_id":"cjp5jncz500zykif5t4qe2pri","tag_id":"cjp5jncpc004hkif5ahnpbcjk","_id":"cjp5jnd00012dkif5u4af8efx"},{"post_id":"cjp5jncz500zykif5t4qe2pri","tag_id":"cjp5jnczx0120kif5tak9zwab","_id":"cjp5jnd00012ekif5rd8y7ija"},{"post_id":"cjp5jncz600zzkif5v21elr92","tag_id":"cjp5jnczx0123kif57sf2fz4h","_id":"cjp5jnd01012gkif5v35slln5"},{"post_id":"cjp5jncz600zzkif5v21elr92","tag_id":"cjp5jncxb00ttkif5tt1bdouq","_id":"cjp5jnd02012ikif5pf0vx1lp"},{"post_id":"cjp5jncz600zzkif5v21elr92","tag_id":"cjp5jncyh00yzkif5oftbr2nw","_id":"cjp5jnd02012lkif5jpth8heo"},{"post_id":"cjp5jncz600zzkif5v21elr92","tag_id":"cjp5jncx100sfkif5wczbhano","_id":"cjp5jnd02012nkif5zsnqv6vw"},{"post_id":"cjp5jncz600zzkif5v21elr92","tag_id":"cjp5jnczz0127kif5c3efl1mm","_id":"cjp5jnd03012qkif5v6vth3f4"},{"post_id":"cjp5jncz600zzkif5v21elr92","tag_id":"cjp5jncxv00wnkif5bvv69u1a","_id":"cjp5jnd03012skif589prc5ji"},{"post_id":"cjp5jncz600zzkif5v21elr92","tag_id":"cjp5jnczz012ckif5q20x2rft","_id":"cjp5jnd03012vkif5ed7ddfwm"},{"post_id":"cjp5jncz80102kif51i6yjk67","tag_id":"cjp5jnd00012fkif5slr7rsdu","_id":"cjp5jnd03012xkif55a9k1a9j"},{"post_id":"cjp5jncz80102kif51i6yjk67","tag_id":"cjp5jncx500t2kif5vhlbe34e","_id":"cjp5jnd03012zkif5g2b3rsmu"},{"post_id":"cjp5jncz80102kif51i6yjk67","tag_id":"cjp5jncuo00htkif5bklw1dto","_id":"cjp5jnd040132kif5enkr8i5j"},{"post_id":"cjp5jncz80102kif51i6yjk67","tag_id":"cjp5jncwj00pekif51s5h8f2m","_id":"cjp5jnd040134kif576iqnc6s"},{"post_id":"cjp5jncza0104kif5zzx96g7g","tag_id":"cjp5jncnu000ckif55xwxbomh","_id":"cjp5jnd050136kif5hjky2hfp"},{"post_id":"cjp5jncza0104kif5zzx96g7g","tag_id":"cjp5jnd02012kkif564kkn1ue","_id":"cjp5jnd050137kif5mnske4rv"},{"post_id":"cjp5jncza0104kif5zzx96g7g","tag_id":"cjp5jnd02012pkif5wytctgzi","_id":"cjp5jnd050139kif5ptyw3n13"},{"post_id":"cjp5jncza0104kif5zzx96g7g","tag_id":"cjp5jncr400a8kif5eecuyfoj","_id":"cjp5jnd05013akif5a9b4xdr9"},{"post_id":"cjp5jncza0104kif5zzx96g7g","tag_id":"cjp5jnd03012ukif52epmvvf8","_id":"cjp5jnd06013ckif5m1stt6w8"},{"post_id":"cjp5jnczd010akif5933w8muk","tag_id":"cjp5jnd030130kif5bjuernj6","_id":"cjp5jnd06013dkif5dr8ru9vx"},{"post_id":"cjp5jnczd010akif5933w8muk","tag_id":"cjp5jnd040135kif5m46n6g5c","_id":"cjp5jnd07013fkif52mg783p7"},{"post_id":"cjp5jnczd010akif5933w8muk","tag_id":"cjp5jnd050138kif5gfk6cq79","_id":"cjp5jnd07013gkif527sx3y1o"},{"post_id":"cjp5jnczd010akif5933w8muk","tag_id":"cjp5jncr400a8kif5eecuyfoj","_id":"cjp5jnd07013hkif5ort3omve"},{"post_id":"cjp5jnczf010ekif5pmdc3ezc","tag_id":"cjp5jncuo00htkif5bklw1dto","_id":"cjp5jnd08013jkif55iv0yxyq"},{"post_id":"cjp5jnczf010ekif5pmdc3ezc","tag_id":"cjp5jnd040135kif5m46n6g5c","_id":"cjp5jnd08013kkif514oiwn9q"},{"post_id":"cjp5jnczf010ekif5pmdc3ezc","tag_id":"cjp5jncwz00s2kif5xkxybk5o","_id":"cjp5jnd08013mkif56zlna0zl"},{"post_id":"cjp5jnczf010ekif5pmdc3ezc","tag_id":"cjp5jnd06013ekif5tqv3sanx","_id":"cjp5jnd08013nkif5f9wlxjgg"},{"post_id":"cjp5jnczf010ekif5pmdc3ezc","tag_id":"cjp5jncnp0006kif59dh2m818","_id":"cjp5jnd09013pkif5p52c4m9q"},{"post_id":"cjp5jnczf010ekif5pmdc3ezc","tag_id":"cjp5jncr400a8kif5eecuyfoj","_id":"cjp5jnd09013qkif59c02plgy"},{"post_id":"cjp5jnczf010ekif5pmdc3ezc","tag_id":"cjp5jnctv00g2kif5dvbvj7vd","_id":"cjp5jnd09013skif5nzl75ej0"},{"post_id":"cjp5jnczh010gkif5k3l38jqi","tag_id":"cjp5jnd07013ikif5v0nripqc","_id":"cjp5jnd0b013ukif5avkhq0qu"},{"post_id":"cjp5jnczh010gkif5k3l38jqi","tag_id":"cjp5jnd08013lkif5ua7cw7t5","_id":"cjp5jnd0b013vkif5eqopuprw"},{"post_id":"cjp5jnczh010gkif5k3l38jqi","tag_id":"cjp5jncof001mkif5zkybitr3","_id":"cjp5jnd0b013wkif5ny01jrbj"},{"post_id":"cjp5jnczh010gkif5k3l38jqi","tag_id":"cjp5jncx500szkif5kju3kzhn","_id":"cjp5jnd0b013xkif52ieeuulo"},{"post_id":"cjp5jnczh010gkif5k3l38jqi","tag_id":"cjp5jnd08013okif5dh4spqui","_id":"cjp5jnd0b013ykif5rukc5any"},{"post_id":"cjp5jnczh010gkif5k3l38jqi","tag_id":"cjp5jnd09013rkif5mao02koe","_id":"cjp5jnd0b013zkif54l2u0h4n"},{"post_id":"cjp5jnczh010gkif5k3l38jqi","tag_id":"cjp5jncnp0006kif59dh2m818","_id":"cjp5jnd0b0140kif5xbu7gapq"},{"post_id":"cjp5jnczh010gkif5k3l38jqi","tag_id":"cjp5jnd09013tkif5i35rlbo1","_id":"cjp5jnd0b0141kif500eyd5ur"},{"post_id":"cjp5jnd0c0142kif5zhiw4gvx","tag_id":"cjp5jncr500aekif5i6p3kt25","_id":"cjp5jnd0e0143kif5htcsbyg8"},{"post_id":"cjp5jnd0c0142kif5zhiw4gvx","tag_id":"cjp5jncx100sgkif5jf2jmn2w","_id":"cjp5jnd0f0144kif5s0yrx8s0"},{"post_id":"cjp5jnd0c0142kif5zhiw4gvx","tag_id":"cjp5jncpb004gkif571o3aquu","_id":"cjp5jnd0f0146kif5fzor6l88"},{"post_id":"cjp5jnd0c0142kif5zhiw4gvx","tag_id":"cjp5jncpc004hkif5ahnpbcjk","_id":"cjp5jnd0f0148kif54yzdqa9p"}],"Tag":[{"name":"Sencha","_id":"cjp5jncnp0006kif59dh2m818"},{"name":"Ext JS","_id":"cjp5jncnu000ckif55xwxbomh"},{"name":"Actions on Google","_id":"cjp5jncnx000hkif5hox6wysz"},{"name":"Cloud Functions","_id":"cjp5jnco1000okif50mqq65wk"},{"name":"Dialogflow","_id":"cjp5jnco3000tkif5f8mmtynw"},{"name":"Node JS","_id":"cjp5jnco80010kif5vqcpi0w0"},{"name":"async","_id":"cjp5jncoa0016kif587qqbq7p"},{"name":"ecmascript6","_id":"cjp5jncoc001ekif5yqsbgpvp"},{"name":"es6","_id":"cjp5jncof001mkif5zkybitr3"},{"name":"JavaScript","_id":"cjp5jncoh001skif5ti8fzvno"},{"name":"promises","_id":"cjp5jncoj001xkif5akckut0b"},{"name":"ExtJS6","_id":"cjp5jncol0023kif56030dxi9"},{"name":"BB8","_id":"cjp5jncoq002fkif5h7k4e5is"},{"name":"Sphero","_id":"cjp5jncox002wkif5uera8tpr"},{"name":"Star Wars","_id":"cjp5jncp00035kif5ftcxskih"},{"name":"Conditionals","_id":"cjp5jncp3003hkif59dub0dtm"},{"name":"Google Assistant","_id":"cjp5jncp7003rkif51wu6bkhc"},{"name":"Pug","_id":"cjp5jncp8003vkif5jv1812tx"},{"name":"Templating","_id":"cjp5jncp9003zkif5tp5qki6c"},{"name":"Java","_id":"cjp5jncp90041kif567xkuk52"},{"name":"Maven","_id":"cjp5jncpa0044kif5eup1ycuk"},{"name":"pom","_id":"cjp5jncpa0047kif5nk977p9k"},{"name":"Compass","_id":"cjp5jncpb004akif51fx6gred"},{"name":"CSS3","_id":"cjp5jncpb004dkif5chbm9vxy"},{"name":"Sass","_id":"cjp5jncpb004gkif571o3aquu"},{"name":"Theming","_id":"cjp5jncpc004hkif5ahnpbcjk"},{"name":"MVC","_id":"cjp5jncpc004ikif5sdkmxxkq"},{"name":"Models","_id":"cjp5jncpc004lkif52knjk1iy"},{"name":"Django","_id":"cjp5jncpd004okif5sctlw88t"},{"name":"Python","_id":"cjp5jncpd004rkif5xmvbesfg"},{"name":"Templates","_id":"cjp5jncpe004tkif5dgn266sg"},{"name":"Sencha Cmd","_id":"cjp5jncpf004zkif5wf2s0uoz"},{"name":"Sencha themes","_id":"cjp5jncpf0050kif5rkr0y1zj"},{"name":"Overrides","_id":"cjp5jncpg0052kif5xrsfqr03"},{"name":"Custom Welcome Intent","_id":"cjp5jncph0058kif53vi87cja"},{"name":"d3.js","_id":"cjp5jncpi005ekif5lxpltmm4"},{"name":"SVG","_id":"cjp5jncpj005hkif58w2g1y26"},{"name":"Cordova","_id":"cjp5jncpj005jkif5ohgopbcy"},{"name":"Hybrid App","_id":"cjp5jncpj005mkif5cldzg2hw"},{"name":"InAppBrowser","_id":"cjp5jncpk005nkif5xwc911i8"},{"name":"iOS","_id":"cjp5jncpk005okif5ddutxttx"},{"name":"Native","_id":"cjp5jncpk005pkif56evx2djp"},{"name":"Phonegap","_id":"cjp5jncpk005qkif56lzki8nf"},{"name":"Google","_id":"cjp5jncpk005rkif5tu184rwk"},{"name":"Google Cloud","_id":"cjp5jncpk005ukif5m5kw5ypd"},{"name":"Machine Learning","_id":"cjp5jncpl005xkif5308coq3t"},{"name":"Pygrunn 2017","_id":"cjp5jncpm0060kif5lgy41qd6"},{"name":"Sencha Architect","_id":"cjp5jncpn0065kif5zqyhysdw"},{"name":"MySQL","_id":"cjp5jncpo006bkif5agprg0bm"},{"name":"Phyton","_id":"cjp5jncpo006ckif5fq7t4int"},{"name":"Application Cache","_id":"cjp5jncpo006dkif5w3awbe3m"},{"name":"Offline Apps","_id":"cjp5jncpp006ikif5zwun8atc"},{"name":"Docker","_id":"cjp5jncpp006jkif572tfvppa"},{"name":"Node.js","_id":"cjp5jncpq006mkif5rilmqsg6"},{"name":"MongoDB","_id":"cjp5jncpq006okif538dw0jqs"},{"name":"Sench Cmd","_id":"cjp5jncps006skif5xaixhno8"},{"name":"glyphs","_id":"cjp5jncpy007lkif567osjl3f"},{"name":"icon fonts","_id":"cjp5jncpz007okif5kmbfxdyw"},{"name":"icons","_id":"cjp5jncpz007rkif5i445pm4t"},{"name":"Custom fonts","_id":"cjp5jncq0007ukif5evbslcmw"},{"name":"Font-Face","_id":"cjp5jncq1007xkif53234dhs9"},{"name":"DLP API","_id":"cjp5jncq10082kif5075ph8vl"},{"name":"GDPR","_id":"cjp5jncq20085kif51mv9idn2"},{"name":"Vision API","_id":"cjp5jncq20088kif5yihr1x8f"},{"name":"Alexa","_id":"cjp5jncq20089kif5ecxej5qu"},{"name":"Chat Agents","_id":"cjp5jncq3008ckif5uoaaf27h"},{"name":"Chatbots","_id":"cjp5jncq3008fkif5ukn49ob3"},{"name":"Google Home","_id":"cjp5jncq4008hkif5lcivnowm"},{"name":"Siri","_id":"cjp5jncq4008ikif5vkaqsf5t"},{"name":"Video Intelligence API","_id":"cjp5jncq4008jkif5ybnlgyo1"},{"name":"BigQuery","_id":"cjp5jncq5008pkif518ywnry6"},{"name":"App Maker","_id":"cjp5jncq6008xkif5ipkrdv2o"},{"name":"app templates","_id":"cjp5jncq70090kif52eujd7f1"},{"name":"boilerplate","_id":"cjp5jncq70093kif57wkhaqzt"},{"name":"bootstrap","_id":"cjp5jncq70095kif5fj0t5ste"},{"name":"templates","_id":"cjp5jncq80096kif5vmvukhas"},{"name":"AutoML","_id":"cjp5jncq80097kif5d9igy1hm"},{"name":"Apache Ant","_id":"cjp5jncqr009ikif5eg2h8u3b"},{"name":"build properties","_id":"cjp5jncqu009pkif5lqf60tks"},{"name":"build scripts","_id":"cjp5jncqy009tkif54zxfbcgy"},{"name":"Sencha CMD","_id":"cjp5jncr100a0kif5ixc0dxji"},{"name":"Sencha Touch","_id":"cjp5jncr400a8kif5eecuyfoj"},{"name":"CSS","_id":"cjp5jncr500aekif5i6p3kt25"},{"name":"Pre-trained Model","_id":"cjp5jncr700amkif5z07dzf2n"},{"name":"Video Intelligence Api","_id":"cjp5jncr800apkif5tuecrbjc"},{"name":"Hybrid","_id":"cjp5jncrb00atkif5fv1ywh1y"},{"name":"Surface Pro","_id":"cjp5jncrc00awkif5p27no1rz"},{"name":"Universal App","_id":"cjp5jncrd00azkif56apgbmhi"},{"name":"Desktop","_id":"cjp5jncrd00b2kif5tiyvymg4"},{"name":"Mobile","_id":"cjp5jncre00b6kif5nn8gfh17"},{"name":"Build native app","_id":"cjp5jncs400bskif5ehw47fge"},{"name":"hybrid app","_id":"cjp5jncs800bzkif5xye67ryb"},{"name":"Sencha Ant","_id":"cjp5jncsb00c4kif50m096tvo"},{"name":"Sencha Build","_id":"cjp5jncse00c8kif5x2kkovpg"},{"name":"Utility app","_id":"cjp5jncsh00cfkif5bqnhas8k"},{"name":"Weather app","_id":"cjp5jncsm00cnkif5y6qppdp1"},{"name":"desktop","_id":"cjp5jncso00cukif5h7hq4wjj"},{"name":"electron","_id":"cjp5jncsr00d2kif555512zmn"},{"name":"electron-packager","_id":"cjp5jncst00dakif5afcqsmve"},{"name":"ext-electron","_id":"cjp5jncsw00dikif511m4m2hs"},{"name":"github","_id":"cjp5jncsz00dokif58djme4ob"},{"name":"hostname","_id":"cjp5jnct100dskif5y737nf9e"},{"name":"macbook","_id":"cjp5jnct300dykif5ukgqrac1"},{"name":"Tools","_id":"cjp5jnct700e8kif5ljqfk8fc"},{"name":"Xcode","_id":"cjp5jnct900egkif5r9spdztt"},{"name":"appstore","_id":"cjp5jnctc00enkif59gto6e3x"},{"name":"examples","_id":"cjp5jncte00etkif52sq47krc"},{"name":"large applications","_id":"cjp5jncth00ezkif5btnbmtd9"},{"name":"performance","_id":"cjp5jnctk00f7kif5qynbhtrh"},{"name":"tips","_id":"cjp5jnctm00ffkif522taagrs"},{"name":"GPL","_id":"cjp5jnctp00flkif54olmer2q"},{"name":"opensource","_id":"cjp5jncts00fukif540kkuoxb"},{"name":"upgrade","_id":"cjp5jnctv00g2kif5dvbvj7vd"},{"name":"version mismatch","_id":"cjp5jncty00gbkif59osgzyb3"},{"name":"chrome 43","_id":"cjp5jncu300gikif51apth5nn"},{"name":"load spinner","_id":"cjp5jncu700grkif5j6wv9quc"},{"name":"overflowchangeevent","_id":"cjp5jncud00gzkif5eun9e9uz"},{"name":"scroll problem","_id":"cjp5jncuf00h6kif5byslueq3"},{"name":"Angular 2","_id":"cjp5jncui00hckif5ty79b8zt"},{"name":"Angular.js","_id":"cjp5jncul00hlkif5p2u2qa97"},{"name":"ext js 6","_id":"cjp5jncuo00htkif5bklw1dto"},{"name":"cordova","_id":"cjp5jncuv00i8kif5xmxqv0jl"},{"name":"deltas","_id":"cjp5jncuy00igkif5jc8yqhhm"},{"name":"phonegap","_id":"cjp5jncv100iokif5vjhbxamp"},{"name":"db","_id":"cjp5jncv500iukif5mmm2j3p4"},{"name":"external database","_id":"cjp5jncv800j3kif5wwyuxdm0"},{"name":"push notifications","_id":"cjp5jncvb00jckif5tuxdlkdg"},{"name":"accessibility","_id":"cjp5jncvf00jlkif56savidc9"},{"name":"ARIA","_id":"cjp5jncvi00jtkif5l7dg5dkz"},{"name":"JAWS","_id":"cjp5jncvl00k1kif5drbitylz"},{"name":"sencha update","_id":"cjp5jncvm00k6kif58hkn7rnb"},{"name":"cheatsheet","_id":"cjp5jncvo00khkif56ineo4qm"},{"name":"cli","_id":"cjp5jncvo00knkif5gklj7rj2"},{"name":"commands","_id":"cjp5jncvp00ktkif5r6tdk7e7"},{"name":"git","_id":"cjp5jncvq00kxkif53lz7yu9n"},{"name":"sublime","_id":"cjp5jncvr00l1kif5jyzrsbd3"},{"name":"fatal","_id":"cjp5jncvs00l7kif50bwph923"},{"name":"git push","_id":"cjp5jncvu00ljkif5ghsb4cqk"},{"name":"git sync","_id":"cjp5jncvu00lnkif5a4hthg4o"},{"name":"http error","_id":"cjp5jncvv00lrkif5hcyx64vy"},{"name":"print styles","_id":"cjp5jncvw00lwkif5gr1rj5x5"},{"name":"bug","_id":"cjp5jncvx00m3kif57wcy83a0"},{"name":"google chrome","_id":"cjp5jncvy00m9kif5i4a7r87j"},{"name":"patch","_id":"cjp5jncvz00mfkif5hpqrl3mv"},{"name":"windows 8 support","_id":"cjp5jncvz00mkkif57oam9y9i"},{"name":"google maps","_id":"cjp5jncw000mrkif5wqbcet5c"},{"name":"getting started","_id":"cjp5jncw200n1kif5v6x92b9a"},{"name":"licenses","_id":"cjp5jncw200n5kif51x9n6kbu"},{"name":"support","_id":"cjp5jncw300nakif50ltqciy8"},{"name":"permission error","_id":"cjp5jncw500nhkif5mh4iwk09"},{"name":"useraccounts","_id":"cjp5jncw600nlkif5z07syb2y"},{"name":"layout","_id":"cjp5jncw800nqkif53f38de7l"},{"name":"layout rendering","_id":"cjp5jncw900nwkif5jmiv6znn"},{"name":"resumeLayout","_id":"cjp5jncw900o0kif55dew404b"},{"name":"suspendLayout","_id":"cjp5jncwa00o4kif59ih1gi2v"},{"name":"architect","_id":"cjp5jncwb00o7kif5e9vv9i1o"},{"name":"Event Recorder","_id":"cjp5jncwb00obkif5vimryojh"},{"name":"sencha test","_id":"cjp5jncwd00ohkif5rx0rx8ky"},{"name":"Associations","_id":"cjp5jncwd00omkif51286pj57"},{"name":"Relationships","_id":"cjp5jncwg00otkif5xujkmwdh"},{"name":"ST.screenshot","_id":"cjp5jncwi00p3kif5lg0q52bk"},{"name":"ext 4","_id":"cjp5jncwj00p8kif5n61m0adv"},{"name":"external","_id":"cjp5jncwj00pekif51s5h8f2m"},{"name":"proxy","_id":"cjp5jncwk00pjkif57be43dq4"},{"name":"SOAP","_id":"cjp5jncwm00ppkif53naji7a2"},{"name":"filter","_id":"cjp5jncwn00ptkif5q8b21spn"},{"name":"grid filtering","_id":"cjp5jncwo00pzkif59skyq8cc"},{"name":"store","_id":"cjp5jncwo00q4kif5is4nozgy"},{"name":"Lazy loading","_id":"cjp5jncwp00q8kif5w0z2dr53"},{"name":"partials","_id":"cjp5jncwq00qfkif5ya7dtu14"},{"name":"scripts","_id":"cjp5jncwr00qikif562i8lllt"},{"name":"apache ant","_id":"cjp5jncwr00qnkif5zmoghsg2"},{"name":"build script","_id":"cjp5jncws00qskif5mi7mgr2k"},{"name":"l8n","_id":"cjp5jncwt00qykif58zfeutm1"},{"name":"languages","_id":"cjp5jncwu00r4kif553y351jw"},{"name":"localization","_id":"cjp5jncwu00r8kif5ewogv3xp"},{"name":"overwrites","_id":"cjp5jncwv00rbkif54jtha3dx"},{"name":"translation","_id":"cjp5jncwv00rfkif5yc0vpzbr"},{"name":"switch","_id":"cjp5jncww00rikif5w0gskl86"},{"name":"gwt","_id":"cjp5jncww00rlkif54cxfudg8"},{"name":"gxt","_id":"cjp5jncwx00rokif57x0fu6h5"},{"name":"java","_id":"cjp5jncwx00rrkif5iv2lwcle"},{"name":"maven","_id":"cjp5jncwx00rukif50aqiu0oh"},{"name":"microsoft","_id":"cjp5jncwy00rvkif5q47yqoh3"},{"name":"plugin","_id":"cjp5jncwy00rykif50khctv9o"},{"name":"visual studio","_id":"cjp5jncwy00s1kif55bu0qv7u"},{"name":"migration","_id":"cjp5jncwz00s2kif5xkxybk5o"},{"name":"Mac OSX","_id":"cjp5jncwz00s5kif5ebro1aq2"},{"name":"asciidoc","_id":"cjp5jncx000s8kif5wpcfp0z5"},{"name":"epub","_id":"cjp5jncx000sbkif52ab0eeg7"},{"name":"pdf","_id":"cjp5jncx100sfkif5wczbhano"},{"name":"fashion","_id":"cjp5jncx100sgkif5jf2jmn2w"},{"name":"events","_id":"cjp5jncx300sqkif58nptb854"},{"name":"listeners","_id":"cjp5jncx400stkif505qi5eik"},{"name":"timeout","_id":"cjp5jncx400svkif5nx80iwmz"},{"name":"external tools","_id":"cjp5jncx400swkif5sz2c6wn2"},{"name":"ext","_id":"cjp5jncx500szkif5kju3kzhn"},{"name":"ext js 5","_id":"cjp5jncx500t2kif5vhlbe34e"},{"name":"ext5","_id":"cjp5jncx600t3kif5c5fq9q0p"},{"name":"sencha5","_id":"cjp5jncx600t4kif5qn9y13y9"},{"name":"API","_id":"cjp5jncx600t5kif50oxen2gv"},{"name":"jQuery","_id":"cjp5jncx700t8kif5uvnd9t3b"},{"name":"heap space","_id":"cjp5jncx700tbkif5mcsv1xzv"},{"name":"jvm","_id":"cjp5jncx800thkif5vco6jgfd"},{"name":"Install","_id":"cjp5jncx900tjkif51z5vws1d"},{"name":"Installation SASS","_id":"cjp5jncx900tmkif5q2uhkcan"},{"name":"Ruby","_id":"cjp5jncxa00tpkif5nm3wyj6t"},{"name":"command line","_id":"cjp5jncxa00tqkif5kkjdiagm"},{"name":"node","_id":"cjp5jncxb00ttkif5tt1bdouq"},{"name":"npm","_id":"cjp5jncxb00twkif5prbiysxv"},{"name":"setup jslint","_id":"cjp5jncxb00tzkif5fx10rfnl"},{"name":"terminal","_id":"cjp5jncxc00u1kif5zx0xd6ni"},{"name":"build error","_id":"cjp5jncxc00u2kif59gxb88r5"},{"name":"mac os-x 10.9","_id":"cjp5jncxd00u5kif5qgqj95k5"},{"name":"mavericks","_id":"cjp5jncxd00u8kif58z5hsqkv"},{"name":"ruby 2.0","_id":"cjp5jncxd00uakif5oivj51xl"},{"name":"Sublime Text","_id":"cjp5jncxe00ubkif589g3eszd"},{"name":"apple tv","_id":"cjp5jncxf00uhkif50dnlwaji"},{"name":"audio driver","_id":"cjp5jncxg00ukkif58duy3k82"},{"name":"hdmi","_id":"cjp5jncxg00unkif5qmw2qoql"},{"name":"no audio","_id":"cjp5jncxg00uokif5f3enjb3c"},{"name":"sauce labs","_id":"cjp5jncxi00uvkif5948tdenf"},{"name":"WPAD","_id":"cjp5jncxj00uykif56zfh5mbe"},{"name":"environment","_id":"cjp5jncxk00uzkif5k5pfplcs"},{"name":"link","_id":"cjp5jncxk00v2kif5af635a12"},{"name":"Localhost","_id":"cjp5jncxl00v5kif58r6y8fc5"},{"name":"shortcut","_id":"cjp5jncxl00v6kif5xaqgmo2q"},{"name":"SVN","_id":"cjp5jncxl00v7kif5jr3ur3ys"},{"name":"font awesome","_id":"cjp5jncxm00vakif503jzw71t"},{"name":"fonts","_id":"cjp5jncxm00vdkif549g8svpr"},{"name":"icon font","_id":"cjp5jncxn00vfkif577pgkt0u"},{"name":"out of the box icons","_id":"cjp5jncxn00vgkif50tydm45l"},{"name":"which icons","_id":"cjp5jncxn00vhkif5tg69rmw5"},{"name":"projects","_id":"cjp5jncxn00vikif5rb1wqsn0"},{"name":"crash","_id":"cjp5jncxp00vokif50rbzf2is"},{"name":"install problems","_id":"cjp5jncxq00vrkif59dpjmw3w"},{"name":"Port error","_id":"cjp5jncxq00vukif5iyfc2gdh"},{"name":"Automated","_id":"cjp5jncxr00vykif50mssfiw5"},{"name":"Scafolding","_id":"cjp5jncxr00w1kif55k97kckq"},{"name":"Sencha SDK Tools","_id":"cjp5jncxr00w2kif59i49htm7"},{"name":"Scaffolding","_id":"cjp5jncxs00w3kif5rdzavjfu"},{"name":"Sencha SDK","_id":"cjp5jncxs00w6kif57xczc8g2"},{"name":"Sencha Touch Facebook Menu","_id":"cjp5jncxt00w9kif5vxs9f3no"},{"name":"Sencha Touch sliding menu","_id":"cjp5jncxu00wckif5t0fdh9vc"},{"name":"Automated Testing","_id":"cjp5jncxu00wgkif5v13ru306"},{"name":"Jasmine","_id":"cjp5jncxu00wjkif5xjck3zzh"},{"name":"JavaScript Testing","_id":"cjp5jncxv00wmkif5efz1omkx"},{"name":"PhantomJS","_id":"cjp5jncxv00wnkif5bvv69u1a"},{"name":"TDD","_id":"cjp5jncxv00wokif5r68bkuzl"},{"name":"Testing","_id":"cjp5jncxw00wpkif5h1gni8nx"},{"name":"Apache","_id":"cjp5jncxw00wqkif5v6ce94cp"},{"name":"problem solving","_id":"cjp5jncxy00wzkif5bvggbp3t"},{"name":"troubleshooting","_id":"cjp5jncy000x2kif5mpp4lxd5"},{"name":"Aptana","_id":"cjp5jncy000x4kif50935va9r"},{"name":"JSLint","_id":"cjp5jncy100x7kif5cvnvk0pd"},{"name":"Test Driven Development for JavaScript","_id":"cjp5jncy300xgkif5fvp61oz6"},{"name":"Unit Test","_id":"cjp5jncy300xhkif5nhr6b385"},{"name":"conferences","_id":"cjp5jncy400xikif5yg4gnlvr"},{"name":"discount","_id":"cjp5jncy500xlkif5s72a4zy1"},{"name":"extjs5","_id":"cjp5jncy500xqkif53uqihwme"},{"name":"hands-on sencha touch 2","_id":"cjp5jncy600xrkif59bldcwiz"},{"name":"O'Reilly","_id":"cjp5jncy600xskif5t8x6rz2u"},{"name":"promocodes","_id":"cjp5jncy700xtkif5g9stvynj"},{"name":"sencha training","_id":"cjp5jncy700xukif5i270yc7d"},{"name":"trainings","_id":"cjp5jncy700xvkif52pltib32"},{"name":"webinar","_id":"cjp5jncy800xwkif5qdbruchs"},{"name":"grep","_id":"cjp5jncy800xxkif5iiqaojke"},{"name":"Unix","_id":"cjp5jncya00y3kif5ybxjgqdv"},{"name":"babel","_id":"cjp5jncya00y6kif5tvn4ddna"},{"name":"build tools","_id":"cjp5jncyb00y9kif5fkazyn5q"},{"name":"cmd","_id":"cjp5jncyb00ydkif5jv9rgt99"},{"name":"yarn","_id":"cjp5jncyc00yjkif5qbwc3fgo"},{"name":"sencha.com","_id":"cjp5jncye00ynkif521cjlj55"},{"name":"extjs4.2","_id":"cjp5jncye00yqkif5afz5ghp2"},{"name":"upgrade ext","_id":"cjp5jncyf00ytkif55mox6wqn"},{"name":"nodejs","_id":"cjp5jncyh00yzkif5oftbr2nw"},{"name":"keyboard navigation","_id":"cjp5jncyk00z6kif5z2c6bgan"},{"name":"jetty","_id":"cjp5jncym00zfkif5rvs7h30j"},{"name":"webserver","_id":"cjp5jncym00zgkif52dmero85"},{"name":"OS support","_id":"cjp5jncyn00zhkif5fdh60abj"},{"name":"Cloud launcher","_id":"cjp5jncz300zwkif50ejzt6b5"},{"name":"Compute Engine","_id":"cjp5jncz70101kif5agng2od8"},{"name":"GCP","_id":"cjp5jnczb0107kif5m5ldwnf2"},{"name":"Natural Language API","_id":"cjp5jnczf010dkif5bbll8uuq"},{"name":"Translate API","_id":"cjp5jnczj010jkif5sys9o4ow"},{"name":"Virtual Machines","_id":"cjp5jnczl010okif59en8f1dp"},{"name":"Custom UI Components","_id":"cjp5jnczm010skif5v0y1n4eo"},{"name":"HTML","_id":"cjp5jnczn010wkif5lupw5iwb"},{"name":"packages","_id":"cjp5jnczo0110kif5gnxji0e0"},{"name":"XTemplate","_id":"cjp5jnczp0115kif5c2c8ogq7"},{"name":"how to present","_id":"cjp5jnczq011akif5nc4z9it0"},{"name":"killer presentations","_id":"cjp5jnczr011gkif5jflln0zz"},{"name":"presentation","_id":"cjp5jnczs011lkif5x1mg0s36"},{"name":"public speaking","_id":"cjp5jnczu011pkif5lmtbgrkh"},{"name":"speaker","_id":"cjp5jnczu011tkif5aa21pr28"},{"name":"stage","_id":"cjp5jnczv011ukif5och020xp"},{"name":"Theme","_id":"cjp5jnczv011wkif57ad80nzq"},{"name":"triton","_id":"cjp5jnczx0120kif5tak9zwab"},{"name":"express","_id":"cjp5jnczx0123kif57sf2fz4h"},{"name":"pdf generation","_id":"cjp5jnczz0127kif5c3efl1mm"},{"name":"screencapture","_id":"cjp5jnczz012ckif5q20x2rft"},{"name":"embed","_id":"cjp5jnd00012fkif5slr7rsdu"},{"name":"install sencha cmd","_id":"cjp5jnd02012kkif564kkn1ue"},{"name":"sencha dependencies","_id":"cjp5jnd02012pkif5wytctgzi"},{"name":"setup sencha","_id":"cjp5jnd03012ukif52epmvvf8"},{"name":"ext 6","_id":"cjp5jnd030130kif5bjuernj6"},{"name":"migrate","_id":"cjp5jnd040135kif5m46n6g5c"},{"name":"mvvm","_id":"cjp5jnd050138kif5gfk6cq79"},{"name":"mobile app","_id":"cjp5jnd06013ekif5tqv3sanx"},{"name":"ECMAScript 2015","_id":"cjp5jnd07013ikif5v0nripqc"},{"name":"ES2015","_id":"cjp5jnd08013lkif5ua7cw7t5"},{"name":"Ext JS 7","_id":"cjp5jnd08013okif5dh4spqui"},{"name":"Roadshows","_id":"cjp5jnd09013rkif5mao02koe"},{"name":"TypeScript","_id":"cjp5jnd09013tkif5i35rlbo1"}]}}